
f091-ai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e14  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08006ed0  08006ed0  00016ed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800736c  0800736c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800736c  0800736c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800736c  0800736c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800736c  0800736c  0001736c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007370  08007370  00017370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  200001dc  08007550  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20000308  08007550  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d02d  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b73  00000000  00000000  0002d231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002eda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  0002f860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c5a5  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d663  00000000  00000000  0004c805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad363  00000000  00000000  00059e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001071cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000371c  00000000  00000000  00107220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0010a93c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0010aa08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001dc 	.word	0x200001dc
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006eb8 	.word	0x08006eb8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e0 	.word	0x200001e0
 8000100:	08006eb8 	.word	0x08006eb8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f000 ff33 	bl	80012a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fe7d 	bl	8001148 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ff25 	bl	80012a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 ff1b 	bl	80012a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 fe9f 	bl	80011c0 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 fe95 	bl	80011c0 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dadd>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	464f      	mov	r7, r9
 80004a8:	46d6      	mov	lr, sl
 80004aa:	4646      	mov	r6, r8
 80004ac:	000d      	movs	r5, r1
 80004ae:	0001      	movs	r1, r0
 80004b0:	0018      	movs	r0, r3
 80004b2:	b5c0      	push	{r6, r7, lr}
 80004b4:	0017      	movs	r7, r2
 80004b6:	032b      	lsls	r3, r5, #12
 80004b8:	0a5a      	lsrs	r2, r3, #9
 80004ba:	0f4b      	lsrs	r3, r1, #29
 80004bc:	4313      	orrs	r3, r2
 80004be:	00ca      	lsls	r2, r1, #3
 80004c0:	4691      	mov	r9, r2
 80004c2:	0302      	lsls	r2, r0, #12
 80004c4:	006e      	lsls	r6, r5, #1
 80004c6:	0041      	lsls	r1, r0, #1
 80004c8:	0a52      	lsrs	r2, r2, #9
 80004ca:	0fec      	lsrs	r4, r5, #31
 80004cc:	0f7d      	lsrs	r5, r7, #29
 80004ce:	4315      	orrs	r5, r2
 80004d0:	0d76      	lsrs	r6, r6, #21
 80004d2:	0d49      	lsrs	r1, r1, #21
 80004d4:	0fc0      	lsrs	r0, r0, #31
 80004d6:	4682      	mov	sl, r0
 80004d8:	46ac      	mov	ip, r5
 80004da:	00ff      	lsls	r7, r7, #3
 80004dc:	1a72      	subs	r2, r6, r1
 80004de:	4284      	cmp	r4, r0
 80004e0:	d100      	bne.n	80004e4 <__aeabi_dadd+0x40>
 80004e2:	e098      	b.n	8000616 <__aeabi_dadd+0x172>
 80004e4:	2a00      	cmp	r2, #0
 80004e6:	dc00      	bgt.n	80004ea <__aeabi_dadd+0x46>
 80004e8:	e081      	b.n	80005ee <__aeabi_dadd+0x14a>
 80004ea:	2900      	cmp	r1, #0
 80004ec:	d100      	bne.n	80004f0 <__aeabi_dadd+0x4c>
 80004ee:	e0b6      	b.n	800065e <__aeabi_dadd+0x1ba>
 80004f0:	49c9      	ldr	r1, [pc, #804]	; (8000818 <__aeabi_dadd+0x374>)
 80004f2:	428e      	cmp	r6, r1
 80004f4:	d100      	bne.n	80004f8 <__aeabi_dadd+0x54>
 80004f6:	e172      	b.n	80007de <__aeabi_dadd+0x33a>
 80004f8:	2180      	movs	r1, #128	; 0x80
 80004fa:	0028      	movs	r0, r5
 80004fc:	0409      	lsls	r1, r1, #16
 80004fe:	4308      	orrs	r0, r1
 8000500:	4684      	mov	ip, r0
 8000502:	2a38      	cmp	r2, #56	; 0x38
 8000504:	dd00      	ble.n	8000508 <__aeabi_dadd+0x64>
 8000506:	e15e      	b.n	80007c6 <__aeabi_dadd+0x322>
 8000508:	2a1f      	cmp	r2, #31
 800050a:	dd00      	ble.n	800050e <__aeabi_dadd+0x6a>
 800050c:	e1ee      	b.n	80008ec <__aeabi_dadd+0x448>
 800050e:	2020      	movs	r0, #32
 8000510:	0039      	movs	r1, r7
 8000512:	4665      	mov	r5, ip
 8000514:	1a80      	subs	r0, r0, r2
 8000516:	4087      	lsls	r7, r0
 8000518:	40d1      	lsrs	r1, r2
 800051a:	4085      	lsls	r5, r0
 800051c:	430d      	orrs	r5, r1
 800051e:	0039      	movs	r1, r7
 8000520:	1e4f      	subs	r7, r1, #1
 8000522:	41b9      	sbcs	r1, r7
 8000524:	4667      	mov	r7, ip
 8000526:	40d7      	lsrs	r7, r2
 8000528:	4329      	orrs	r1, r5
 800052a:	1bdb      	subs	r3, r3, r7
 800052c:	464a      	mov	r2, r9
 800052e:	1a55      	subs	r5, r2, r1
 8000530:	45a9      	cmp	r9, r5
 8000532:	4189      	sbcs	r1, r1
 8000534:	4249      	negs	r1, r1
 8000536:	1a5b      	subs	r3, r3, r1
 8000538:	4698      	mov	r8, r3
 800053a:	4643      	mov	r3, r8
 800053c:	021b      	lsls	r3, r3, #8
 800053e:	d400      	bmi.n	8000542 <__aeabi_dadd+0x9e>
 8000540:	e0cc      	b.n	80006dc <__aeabi_dadd+0x238>
 8000542:	4643      	mov	r3, r8
 8000544:	025b      	lsls	r3, r3, #9
 8000546:	0a5b      	lsrs	r3, r3, #9
 8000548:	4698      	mov	r8, r3
 800054a:	4643      	mov	r3, r8
 800054c:	2b00      	cmp	r3, #0
 800054e:	d100      	bne.n	8000552 <__aeabi_dadd+0xae>
 8000550:	e12c      	b.n	80007ac <__aeabi_dadd+0x308>
 8000552:	4640      	mov	r0, r8
 8000554:	f001 fdbe 	bl	80020d4 <__clzsi2>
 8000558:	0001      	movs	r1, r0
 800055a:	3908      	subs	r1, #8
 800055c:	2220      	movs	r2, #32
 800055e:	0028      	movs	r0, r5
 8000560:	4643      	mov	r3, r8
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	408b      	lsls	r3, r1
 8000566:	40d0      	lsrs	r0, r2
 8000568:	408d      	lsls	r5, r1
 800056a:	4303      	orrs	r3, r0
 800056c:	428e      	cmp	r6, r1
 800056e:	dd00      	ble.n	8000572 <__aeabi_dadd+0xce>
 8000570:	e117      	b.n	80007a2 <__aeabi_dadd+0x2fe>
 8000572:	1b8e      	subs	r6, r1, r6
 8000574:	1c72      	adds	r2, r6, #1
 8000576:	2a1f      	cmp	r2, #31
 8000578:	dd00      	ble.n	800057c <__aeabi_dadd+0xd8>
 800057a:	e1a7      	b.n	80008cc <__aeabi_dadd+0x428>
 800057c:	2120      	movs	r1, #32
 800057e:	0018      	movs	r0, r3
 8000580:	002e      	movs	r6, r5
 8000582:	1a89      	subs	r1, r1, r2
 8000584:	408d      	lsls	r5, r1
 8000586:	4088      	lsls	r0, r1
 8000588:	40d6      	lsrs	r6, r2
 800058a:	40d3      	lsrs	r3, r2
 800058c:	1e69      	subs	r1, r5, #1
 800058e:	418d      	sbcs	r5, r1
 8000590:	4330      	orrs	r0, r6
 8000592:	4698      	mov	r8, r3
 8000594:	2600      	movs	r6, #0
 8000596:	4305      	orrs	r5, r0
 8000598:	076b      	lsls	r3, r5, #29
 800059a:	d009      	beq.n	80005b0 <__aeabi_dadd+0x10c>
 800059c:	230f      	movs	r3, #15
 800059e:	402b      	ands	r3, r5
 80005a0:	2b04      	cmp	r3, #4
 80005a2:	d005      	beq.n	80005b0 <__aeabi_dadd+0x10c>
 80005a4:	1d2b      	adds	r3, r5, #4
 80005a6:	42ab      	cmp	r3, r5
 80005a8:	41ad      	sbcs	r5, r5
 80005aa:	426d      	negs	r5, r5
 80005ac:	44a8      	add	r8, r5
 80005ae:	001d      	movs	r5, r3
 80005b0:	4643      	mov	r3, r8
 80005b2:	021b      	lsls	r3, r3, #8
 80005b4:	d400      	bmi.n	80005b8 <__aeabi_dadd+0x114>
 80005b6:	e094      	b.n	80006e2 <__aeabi_dadd+0x23e>
 80005b8:	4b97      	ldr	r3, [pc, #604]	; (8000818 <__aeabi_dadd+0x374>)
 80005ba:	1c72      	adds	r2, r6, #1
 80005bc:	429a      	cmp	r2, r3
 80005be:	d100      	bne.n	80005c2 <__aeabi_dadd+0x11e>
 80005c0:	e09d      	b.n	80006fe <__aeabi_dadd+0x25a>
 80005c2:	4641      	mov	r1, r8
 80005c4:	4b95      	ldr	r3, [pc, #596]	; (800081c <__aeabi_dadd+0x378>)
 80005c6:	08ed      	lsrs	r5, r5, #3
 80005c8:	4019      	ands	r1, r3
 80005ca:	000b      	movs	r3, r1
 80005cc:	0552      	lsls	r2, r2, #21
 80005ce:	0749      	lsls	r1, r1, #29
 80005d0:	025b      	lsls	r3, r3, #9
 80005d2:	4329      	orrs	r1, r5
 80005d4:	0b1b      	lsrs	r3, r3, #12
 80005d6:	0d52      	lsrs	r2, r2, #21
 80005d8:	0512      	lsls	r2, r2, #20
 80005da:	4313      	orrs	r3, r2
 80005dc:	07e4      	lsls	r4, r4, #31
 80005de:	4323      	orrs	r3, r4
 80005e0:	0008      	movs	r0, r1
 80005e2:	0019      	movs	r1, r3
 80005e4:	bce0      	pop	{r5, r6, r7}
 80005e6:	46ba      	mov	sl, r7
 80005e8:	46b1      	mov	r9, r6
 80005ea:	46a8      	mov	r8, r5
 80005ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ee:	2a00      	cmp	r2, #0
 80005f0:	d043      	beq.n	800067a <__aeabi_dadd+0x1d6>
 80005f2:	1b8a      	subs	r2, r1, r6
 80005f4:	2e00      	cmp	r6, #0
 80005f6:	d000      	beq.n	80005fa <__aeabi_dadd+0x156>
 80005f8:	e12a      	b.n	8000850 <__aeabi_dadd+0x3ac>
 80005fa:	464c      	mov	r4, r9
 80005fc:	431c      	orrs	r4, r3
 80005fe:	d100      	bne.n	8000602 <__aeabi_dadd+0x15e>
 8000600:	e1d1      	b.n	80009a6 <__aeabi_dadd+0x502>
 8000602:	1e54      	subs	r4, r2, #1
 8000604:	2a01      	cmp	r2, #1
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x166>
 8000608:	e21f      	b.n	8000a4a <__aeabi_dadd+0x5a6>
 800060a:	4d83      	ldr	r5, [pc, #524]	; (8000818 <__aeabi_dadd+0x374>)
 800060c:	42aa      	cmp	r2, r5
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x16e>
 8000610:	e272      	b.n	8000af8 <__aeabi_dadd+0x654>
 8000612:	0022      	movs	r2, r4
 8000614:	e123      	b.n	800085e <__aeabi_dadd+0x3ba>
 8000616:	2a00      	cmp	r2, #0
 8000618:	dc00      	bgt.n	800061c <__aeabi_dadd+0x178>
 800061a:	e098      	b.n	800074e <__aeabi_dadd+0x2aa>
 800061c:	2900      	cmp	r1, #0
 800061e:	d042      	beq.n	80006a6 <__aeabi_dadd+0x202>
 8000620:	497d      	ldr	r1, [pc, #500]	; (8000818 <__aeabi_dadd+0x374>)
 8000622:	428e      	cmp	r6, r1
 8000624:	d100      	bne.n	8000628 <__aeabi_dadd+0x184>
 8000626:	e0da      	b.n	80007de <__aeabi_dadd+0x33a>
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	0028      	movs	r0, r5
 800062c:	0409      	lsls	r1, r1, #16
 800062e:	4308      	orrs	r0, r1
 8000630:	4684      	mov	ip, r0
 8000632:	2a38      	cmp	r2, #56	; 0x38
 8000634:	dd00      	ble.n	8000638 <__aeabi_dadd+0x194>
 8000636:	e129      	b.n	800088c <__aeabi_dadd+0x3e8>
 8000638:	2a1f      	cmp	r2, #31
 800063a:	dc00      	bgt.n	800063e <__aeabi_dadd+0x19a>
 800063c:	e187      	b.n	800094e <__aeabi_dadd+0x4aa>
 800063e:	0011      	movs	r1, r2
 8000640:	4665      	mov	r5, ip
 8000642:	3920      	subs	r1, #32
 8000644:	40cd      	lsrs	r5, r1
 8000646:	2a20      	cmp	r2, #32
 8000648:	d004      	beq.n	8000654 <__aeabi_dadd+0x1b0>
 800064a:	2040      	movs	r0, #64	; 0x40
 800064c:	4661      	mov	r1, ip
 800064e:	1a82      	subs	r2, r0, r2
 8000650:	4091      	lsls	r1, r2
 8000652:	430f      	orrs	r7, r1
 8000654:	0039      	movs	r1, r7
 8000656:	1e4f      	subs	r7, r1, #1
 8000658:	41b9      	sbcs	r1, r7
 800065a:	430d      	orrs	r5, r1
 800065c:	e11b      	b.n	8000896 <__aeabi_dadd+0x3f2>
 800065e:	0029      	movs	r1, r5
 8000660:	4339      	orrs	r1, r7
 8000662:	d100      	bne.n	8000666 <__aeabi_dadd+0x1c2>
 8000664:	e0b5      	b.n	80007d2 <__aeabi_dadd+0x32e>
 8000666:	1e51      	subs	r1, r2, #1
 8000668:	2a01      	cmp	r2, #1
 800066a:	d100      	bne.n	800066e <__aeabi_dadd+0x1ca>
 800066c:	e1ab      	b.n	80009c6 <__aeabi_dadd+0x522>
 800066e:	486a      	ldr	r0, [pc, #424]	; (8000818 <__aeabi_dadd+0x374>)
 8000670:	4282      	cmp	r2, r0
 8000672:	d100      	bne.n	8000676 <__aeabi_dadd+0x1d2>
 8000674:	e1b2      	b.n	80009dc <__aeabi_dadd+0x538>
 8000676:	000a      	movs	r2, r1
 8000678:	e743      	b.n	8000502 <__aeabi_dadd+0x5e>
 800067a:	4969      	ldr	r1, [pc, #420]	; (8000820 <__aeabi_dadd+0x37c>)
 800067c:	1c75      	adds	r5, r6, #1
 800067e:	420d      	tst	r5, r1
 8000680:	d000      	beq.n	8000684 <__aeabi_dadd+0x1e0>
 8000682:	e0cf      	b.n	8000824 <__aeabi_dadd+0x380>
 8000684:	2e00      	cmp	r6, #0
 8000686:	d000      	beq.n	800068a <__aeabi_dadd+0x1e6>
 8000688:	e193      	b.n	80009b2 <__aeabi_dadd+0x50e>
 800068a:	4649      	mov	r1, r9
 800068c:	4319      	orrs	r1, r3
 800068e:	d100      	bne.n	8000692 <__aeabi_dadd+0x1ee>
 8000690:	e1d1      	b.n	8000a36 <__aeabi_dadd+0x592>
 8000692:	4661      	mov	r1, ip
 8000694:	4339      	orrs	r1, r7
 8000696:	d000      	beq.n	800069a <__aeabi_dadd+0x1f6>
 8000698:	e1e3      	b.n	8000a62 <__aeabi_dadd+0x5be>
 800069a:	4649      	mov	r1, r9
 800069c:	0758      	lsls	r0, r3, #29
 800069e:	08c9      	lsrs	r1, r1, #3
 80006a0:	4301      	orrs	r1, r0
 80006a2:	08db      	lsrs	r3, r3, #3
 80006a4:	e026      	b.n	80006f4 <__aeabi_dadd+0x250>
 80006a6:	0029      	movs	r1, r5
 80006a8:	4339      	orrs	r1, r7
 80006aa:	d100      	bne.n	80006ae <__aeabi_dadd+0x20a>
 80006ac:	e091      	b.n	80007d2 <__aeabi_dadd+0x32e>
 80006ae:	1e51      	subs	r1, r2, #1
 80006b0:	2a01      	cmp	r2, #1
 80006b2:	d005      	beq.n	80006c0 <__aeabi_dadd+0x21c>
 80006b4:	4858      	ldr	r0, [pc, #352]	; (8000818 <__aeabi_dadd+0x374>)
 80006b6:	4282      	cmp	r2, r0
 80006b8:	d100      	bne.n	80006bc <__aeabi_dadd+0x218>
 80006ba:	e18f      	b.n	80009dc <__aeabi_dadd+0x538>
 80006bc:	000a      	movs	r2, r1
 80006be:	e7b8      	b.n	8000632 <__aeabi_dadd+0x18e>
 80006c0:	003d      	movs	r5, r7
 80006c2:	444d      	add	r5, r9
 80006c4:	454d      	cmp	r5, r9
 80006c6:	4189      	sbcs	r1, r1
 80006c8:	4463      	add	r3, ip
 80006ca:	4698      	mov	r8, r3
 80006cc:	4249      	negs	r1, r1
 80006ce:	4488      	add	r8, r1
 80006d0:	4643      	mov	r3, r8
 80006d2:	2602      	movs	r6, #2
 80006d4:	021b      	lsls	r3, r3, #8
 80006d6:	d500      	bpl.n	80006da <__aeabi_dadd+0x236>
 80006d8:	e0eb      	b.n	80008b2 <__aeabi_dadd+0x40e>
 80006da:	3e01      	subs	r6, #1
 80006dc:	076b      	lsls	r3, r5, #29
 80006de:	d000      	beq.n	80006e2 <__aeabi_dadd+0x23e>
 80006e0:	e75c      	b.n	800059c <__aeabi_dadd+0xf8>
 80006e2:	4643      	mov	r3, r8
 80006e4:	08e9      	lsrs	r1, r5, #3
 80006e6:	075a      	lsls	r2, r3, #29
 80006e8:	4311      	orrs	r1, r2
 80006ea:	0032      	movs	r2, r6
 80006ec:	08db      	lsrs	r3, r3, #3
 80006ee:	484a      	ldr	r0, [pc, #296]	; (8000818 <__aeabi_dadd+0x374>)
 80006f0:	4282      	cmp	r2, r0
 80006f2:	d021      	beq.n	8000738 <__aeabi_dadd+0x294>
 80006f4:	031b      	lsls	r3, r3, #12
 80006f6:	0552      	lsls	r2, r2, #21
 80006f8:	0b1b      	lsrs	r3, r3, #12
 80006fa:	0d52      	lsrs	r2, r2, #21
 80006fc:	e76c      	b.n	80005d8 <__aeabi_dadd+0x134>
 80006fe:	2300      	movs	r3, #0
 8000700:	2100      	movs	r1, #0
 8000702:	e769      	b.n	80005d8 <__aeabi_dadd+0x134>
 8000704:	002a      	movs	r2, r5
 8000706:	433a      	orrs	r2, r7
 8000708:	d069      	beq.n	80007de <__aeabi_dadd+0x33a>
 800070a:	464a      	mov	r2, r9
 800070c:	0758      	lsls	r0, r3, #29
 800070e:	08d1      	lsrs	r1, r2, #3
 8000710:	08da      	lsrs	r2, r3, #3
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	031b      	lsls	r3, r3, #12
 8000716:	4308      	orrs	r0, r1
 8000718:	421a      	tst	r2, r3
 800071a:	d007      	beq.n	800072c <__aeabi_dadd+0x288>
 800071c:	0029      	movs	r1, r5
 800071e:	08ed      	lsrs	r5, r5, #3
 8000720:	421d      	tst	r5, r3
 8000722:	d103      	bne.n	800072c <__aeabi_dadd+0x288>
 8000724:	002a      	movs	r2, r5
 8000726:	08ff      	lsrs	r7, r7, #3
 8000728:	0748      	lsls	r0, r1, #29
 800072a:	4338      	orrs	r0, r7
 800072c:	0f43      	lsrs	r3, r0, #29
 800072e:	00c1      	lsls	r1, r0, #3
 8000730:	075b      	lsls	r3, r3, #29
 8000732:	08c9      	lsrs	r1, r1, #3
 8000734:	4319      	orrs	r1, r3
 8000736:	0013      	movs	r3, r2
 8000738:	000a      	movs	r2, r1
 800073a:	431a      	orrs	r2, r3
 800073c:	d100      	bne.n	8000740 <__aeabi_dadd+0x29c>
 800073e:	e213      	b.n	8000b68 <__aeabi_dadd+0x6c4>
 8000740:	2280      	movs	r2, #128	; 0x80
 8000742:	0312      	lsls	r2, r2, #12
 8000744:	4313      	orrs	r3, r2
 8000746:	031b      	lsls	r3, r3, #12
 8000748:	4a33      	ldr	r2, [pc, #204]	; (8000818 <__aeabi_dadd+0x374>)
 800074a:	0b1b      	lsrs	r3, r3, #12
 800074c:	e744      	b.n	80005d8 <__aeabi_dadd+0x134>
 800074e:	2a00      	cmp	r2, #0
 8000750:	d04b      	beq.n	80007ea <__aeabi_dadd+0x346>
 8000752:	1b8a      	subs	r2, r1, r6
 8000754:	2e00      	cmp	r6, #0
 8000756:	d100      	bne.n	800075a <__aeabi_dadd+0x2b6>
 8000758:	e0e7      	b.n	800092a <__aeabi_dadd+0x486>
 800075a:	482f      	ldr	r0, [pc, #188]	; (8000818 <__aeabi_dadd+0x374>)
 800075c:	4281      	cmp	r1, r0
 800075e:	d100      	bne.n	8000762 <__aeabi_dadd+0x2be>
 8000760:	e195      	b.n	8000a8e <__aeabi_dadd+0x5ea>
 8000762:	2080      	movs	r0, #128	; 0x80
 8000764:	0400      	lsls	r0, r0, #16
 8000766:	4303      	orrs	r3, r0
 8000768:	2a38      	cmp	r2, #56	; 0x38
 800076a:	dd00      	ble.n	800076e <__aeabi_dadd+0x2ca>
 800076c:	e143      	b.n	80009f6 <__aeabi_dadd+0x552>
 800076e:	2a1f      	cmp	r2, #31
 8000770:	dd00      	ble.n	8000774 <__aeabi_dadd+0x2d0>
 8000772:	e1db      	b.n	8000b2c <__aeabi_dadd+0x688>
 8000774:	2020      	movs	r0, #32
 8000776:	001d      	movs	r5, r3
 8000778:	464e      	mov	r6, r9
 800077a:	1a80      	subs	r0, r0, r2
 800077c:	4085      	lsls	r5, r0
 800077e:	40d6      	lsrs	r6, r2
 8000780:	4335      	orrs	r5, r6
 8000782:	464e      	mov	r6, r9
 8000784:	4086      	lsls	r6, r0
 8000786:	0030      	movs	r0, r6
 8000788:	40d3      	lsrs	r3, r2
 800078a:	1e46      	subs	r6, r0, #1
 800078c:	41b0      	sbcs	r0, r6
 800078e:	449c      	add	ip, r3
 8000790:	4305      	orrs	r5, r0
 8000792:	19ed      	adds	r5, r5, r7
 8000794:	42bd      	cmp	r5, r7
 8000796:	419b      	sbcs	r3, r3
 8000798:	425b      	negs	r3, r3
 800079a:	4463      	add	r3, ip
 800079c:	4698      	mov	r8, r3
 800079e:	000e      	movs	r6, r1
 80007a0:	e07f      	b.n	80008a2 <__aeabi_dadd+0x3fe>
 80007a2:	4a1e      	ldr	r2, [pc, #120]	; (800081c <__aeabi_dadd+0x378>)
 80007a4:	1a76      	subs	r6, r6, r1
 80007a6:	4013      	ands	r3, r2
 80007a8:	4698      	mov	r8, r3
 80007aa:	e6f5      	b.n	8000598 <__aeabi_dadd+0xf4>
 80007ac:	0028      	movs	r0, r5
 80007ae:	f001 fc91 	bl	80020d4 <__clzsi2>
 80007b2:	0001      	movs	r1, r0
 80007b4:	3118      	adds	r1, #24
 80007b6:	291f      	cmp	r1, #31
 80007b8:	dc00      	bgt.n	80007bc <__aeabi_dadd+0x318>
 80007ba:	e6cf      	b.n	800055c <__aeabi_dadd+0xb8>
 80007bc:	002b      	movs	r3, r5
 80007be:	3808      	subs	r0, #8
 80007c0:	4083      	lsls	r3, r0
 80007c2:	2500      	movs	r5, #0
 80007c4:	e6d2      	b.n	800056c <__aeabi_dadd+0xc8>
 80007c6:	4662      	mov	r2, ip
 80007c8:	433a      	orrs	r2, r7
 80007ca:	0011      	movs	r1, r2
 80007cc:	1e4f      	subs	r7, r1, #1
 80007ce:	41b9      	sbcs	r1, r7
 80007d0:	e6ac      	b.n	800052c <__aeabi_dadd+0x88>
 80007d2:	4649      	mov	r1, r9
 80007d4:	0758      	lsls	r0, r3, #29
 80007d6:	08c9      	lsrs	r1, r1, #3
 80007d8:	4301      	orrs	r1, r0
 80007da:	08db      	lsrs	r3, r3, #3
 80007dc:	e787      	b.n	80006ee <__aeabi_dadd+0x24a>
 80007de:	4649      	mov	r1, r9
 80007e0:	075a      	lsls	r2, r3, #29
 80007e2:	08c9      	lsrs	r1, r1, #3
 80007e4:	4311      	orrs	r1, r2
 80007e6:	08db      	lsrs	r3, r3, #3
 80007e8:	e7a6      	b.n	8000738 <__aeabi_dadd+0x294>
 80007ea:	490d      	ldr	r1, [pc, #52]	; (8000820 <__aeabi_dadd+0x37c>)
 80007ec:	1c70      	adds	r0, r6, #1
 80007ee:	4208      	tst	r0, r1
 80007f0:	d000      	beq.n	80007f4 <__aeabi_dadd+0x350>
 80007f2:	e0bb      	b.n	800096c <__aeabi_dadd+0x4c8>
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d000      	beq.n	80007fa <__aeabi_dadd+0x356>
 80007f8:	e114      	b.n	8000a24 <__aeabi_dadd+0x580>
 80007fa:	4649      	mov	r1, r9
 80007fc:	4319      	orrs	r1, r3
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x35e>
 8000800:	e175      	b.n	8000aee <__aeabi_dadd+0x64a>
 8000802:	0029      	movs	r1, r5
 8000804:	4339      	orrs	r1, r7
 8000806:	d000      	beq.n	800080a <__aeabi_dadd+0x366>
 8000808:	e17e      	b.n	8000b08 <__aeabi_dadd+0x664>
 800080a:	4649      	mov	r1, r9
 800080c:	0758      	lsls	r0, r3, #29
 800080e:	08c9      	lsrs	r1, r1, #3
 8000810:	4301      	orrs	r1, r0
 8000812:	08db      	lsrs	r3, r3, #3
 8000814:	e76e      	b.n	80006f4 <__aeabi_dadd+0x250>
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	000007ff 	.word	0x000007ff
 800081c:	ff7fffff 	.word	0xff7fffff
 8000820:	000007fe 	.word	0x000007fe
 8000824:	4649      	mov	r1, r9
 8000826:	1bcd      	subs	r5, r1, r7
 8000828:	4661      	mov	r1, ip
 800082a:	1a58      	subs	r0, r3, r1
 800082c:	45a9      	cmp	r9, r5
 800082e:	4189      	sbcs	r1, r1
 8000830:	4249      	negs	r1, r1
 8000832:	4688      	mov	r8, r1
 8000834:	0001      	movs	r1, r0
 8000836:	4640      	mov	r0, r8
 8000838:	1a09      	subs	r1, r1, r0
 800083a:	4688      	mov	r8, r1
 800083c:	0209      	lsls	r1, r1, #8
 800083e:	d500      	bpl.n	8000842 <__aeabi_dadd+0x39e>
 8000840:	e0a6      	b.n	8000990 <__aeabi_dadd+0x4ec>
 8000842:	4641      	mov	r1, r8
 8000844:	4329      	orrs	r1, r5
 8000846:	d000      	beq.n	800084a <__aeabi_dadd+0x3a6>
 8000848:	e67f      	b.n	800054a <__aeabi_dadd+0xa6>
 800084a:	2300      	movs	r3, #0
 800084c:	2400      	movs	r4, #0
 800084e:	e751      	b.n	80006f4 <__aeabi_dadd+0x250>
 8000850:	4cc7      	ldr	r4, [pc, #796]	; (8000b70 <__aeabi_dadd+0x6cc>)
 8000852:	42a1      	cmp	r1, r4
 8000854:	d100      	bne.n	8000858 <__aeabi_dadd+0x3b4>
 8000856:	e0c7      	b.n	80009e8 <__aeabi_dadd+0x544>
 8000858:	2480      	movs	r4, #128	; 0x80
 800085a:	0424      	lsls	r4, r4, #16
 800085c:	4323      	orrs	r3, r4
 800085e:	2a38      	cmp	r2, #56	; 0x38
 8000860:	dc54      	bgt.n	800090c <__aeabi_dadd+0x468>
 8000862:	2a1f      	cmp	r2, #31
 8000864:	dd00      	ble.n	8000868 <__aeabi_dadd+0x3c4>
 8000866:	e0cc      	b.n	8000a02 <__aeabi_dadd+0x55e>
 8000868:	2420      	movs	r4, #32
 800086a:	4648      	mov	r0, r9
 800086c:	1aa4      	subs	r4, r4, r2
 800086e:	001d      	movs	r5, r3
 8000870:	464e      	mov	r6, r9
 8000872:	40a0      	lsls	r0, r4
 8000874:	40d6      	lsrs	r6, r2
 8000876:	40a5      	lsls	r5, r4
 8000878:	0004      	movs	r4, r0
 800087a:	40d3      	lsrs	r3, r2
 800087c:	4662      	mov	r2, ip
 800087e:	4335      	orrs	r5, r6
 8000880:	1e66      	subs	r6, r4, #1
 8000882:	41b4      	sbcs	r4, r6
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	469c      	mov	ip, r3
 8000888:	4325      	orrs	r5, r4
 800088a:	e044      	b.n	8000916 <__aeabi_dadd+0x472>
 800088c:	4662      	mov	r2, ip
 800088e:	433a      	orrs	r2, r7
 8000890:	0015      	movs	r5, r2
 8000892:	1e6f      	subs	r7, r5, #1
 8000894:	41bd      	sbcs	r5, r7
 8000896:	444d      	add	r5, r9
 8000898:	454d      	cmp	r5, r9
 800089a:	4189      	sbcs	r1, r1
 800089c:	4249      	negs	r1, r1
 800089e:	4688      	mov	r8, r1
 80008a0:	4498      	add	r8, r3
 80008a2:	4643      	mov	r3, r8
 80008a4:	021b      	lsls	r3, r3, #8
 80008a6:	d400      	bmi.n	80008aa <__aeabi_dadd+0x406>
 80008a8:	e718      	b.n	80006dc <__aeabi_dadd+0x238>
 80008aa:	4bb1      	ldr	r3, [pc, #708]	; (8000b70 <__aeabi_dadd+0x6cc>)
 80008ac:	3601      	adds	r6, #1
 80008ae:	429e      	cmp	r6, r3
 80008b0:	d049      	beq.n	8000946 <__aeabi_dadd+0x4a2>
 80008b2:	4642      	mov	r2, r8
 80008b4:	4baf      	ldr	r3, [pc, #700]	; (8000b74 <__aeabi_dadd+0x6d0>)
 80008b6:	2101      	movs	r1, #1
 80008b8:	401a      	ands	r2, r3
 80008ba:	0013      	movs	r3, r2
 80008bc:	086a      	lsrs	r2, r5, #1
 80008be:	400d      	ands	r5, r1
 80008c0:	4315      	orrs	r5, r2
 80008c2:	07d9      	lsls	r1, r3, #31
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	4698      	mov	r8, r3
 80008c8:	430d      	orrs	r5, r1
 80008ca:	e665      	b.n	8000598 <__aeabi_dadd+0xf4>
 80008cc:	0018      	movs	r0, r3
 80008ce:	3e1f      	subs	r6, #31
 80008d0:	40f0      	lsrs	r0, r6
 80008d2:	2a20      	cmp	r2, #32
 80008d4:	d003      	beq.n	80008de <__aeabi_dadd+0x43a>
 80008d6:	2140      	movs	r1, #64	; 0x40
 80008d8:	1a8a      	subs	r2, r1, r2
 80008da:	4093      	lsls	r3, r2
 80008dc:	431d      	orrs	r5, r3
 80008de:	1e69      	subs	r1, r5, #1
 80008e0:	418d      	sbcs	r5, r1
 80008e2:	2300      	movs	r3, #0
 80008e4:	2600      	movs	r6, #0
 80008e6:	4698      	mov	r8, r3
 80008e8:	4305      	orrs	r5, r0
 80008ea:	e6f7      	b.n	80006dc <__aeabi_dadd+0x238>
 80008ec:	0011      	movs	r1, r2
 80008ee:	4665      	mov	r5, ip
 80008f0:	3920      	subs	r1, #32
 80008f2:	40cd      	lsrs	r5, r1
 80008f4:	2a20      	cmp	r2, #32
 80008f6:	d004      	beq.n	8000902 <__aeabi_dadd+0x45e>
 80008f8:	2040      	movs	r0, #64	; 0x40
 80008fa:	4661      	mov	r1, ip
 80008fc:	1a82      	subs	r2, r0, r2
 80008fe:	4091      	lsls	r1, r2
 8000900:	430f      	orrs	r7, r1
 8000902:	0039      	movs	r1, r7
 8000904:	1e4f      	subs	r7, r1, #1
 8000906:	41b9      	sbcs	r1, r7
 8000908:	4329      	orrs	r1, r5
 800090a:	e60f      	b.n	800052c <__aeabi_dadd+0x88>
 800090c:	464a      	mov	r2, r9
 800090e:	4313      	orrs	r3, r2
 8000910:	001d      	movs	r5, r3
 8000912:	1e6b      	subs	r3, r5, #1
 8000914:	419d      	sbcs	r5, r3
 8000916:	1b7d      	subs	r5, r7, r5
 8000918:	42af      	cmp	r7, r5
 800091a:	419b      	sbcs	r3, r3
 800091c:	4662      	mov	r2, ip
 800091e:	425b      	negs	r3, r3
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	4698      	mov	r8, r3
 8000924:	4654      	mov	r4, sl
 8000926:	000e      	movs	r6, r1
 8000928:	e607      	b.n	800053a <__aeabi_dadd+0x96>
 800092a:	4648      	mov	r0, r9
 800092c:	4318      	orrs	r0, r3
 800092e:	d100      	bne.n	8000932 <__aeabi_dadd+0x48e>
 8000930:	e0b3      	b.n	8000a9a <__aeabi_dadd+0x5f6>
 8000932:	1e50      	subs	r0, r2, #1
 8000934:	2a01      	cmp	r2, #1
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x496>
 8000938:	e10d      	b.n	8000b56 <__aeabi_dadd+0x6b2>
 800093a:	4d8d      	ldr	r5, [pc, #564]	; (8000b70 <__aeabi_dadd+0x6cc>)
 800093c:	42aa      	cmp	r2, r5
 800093e:	d100      	bne.n	8000942 <__aeabi_dadd+0x49e>
 8000940:	e0a5      	b.n	8000a8e <__aeabi_dadd+0x5ea>
 8000942:	0002      	movs	r2, r0
 8000944:	e710      	b.n	8000768 <__aeabi_dadd+0x2c4>
 8000946:	0032      	movs	r2, r6
 8000948:	2300      	movs	r3, #0
 800094a:	2100      	movs	r1, #0
 800094c:	e644      	b.n	80005d8 <__aeabi_dadd+0x134>
 800094e:	2120      	movs	r1, #32
 8000950:	0038      	movs	r0, r7
 8000952:	1a89      	subs	r1, r1, r2
 8000954:	4665      	mov	r5, ip
 8000956:	408f      	lsls	r7, r1
 8000958:	408d      	lsls	r5, r1
 800095a:	40d0      	lsrs	r0, r2
 800095c:	1e79      	subs	r1, r7, #1
 800095e:	418f      	sbcs	r7, r1
 8000960:	4305      	orrs	r5, r0
 8000962:	433d      	orrs	r5, r7
 8000964:	4667      	mov	r7, ip
 8000966:	40d7      	lsrs	r7, r2
 8000968:	19db      	adds	r3, r3, r7
 800096a:	e794      	b.n	8000896 <__aeabi_dadd+0x3f2>
 800096c:	4a80      	ldr	r2, [pc, #512]	; (8000b70 <__aeabi_dadd+0x6cc>)
 800096e:	4290      	cmp	r0, r2
 8000970:	d100      	bne.n	8000974 <__aeabi_dadd+0x4d0>
 8000972:	e0ec      	b.n	8000b4e <__aeabi_dadd+0x6aa>
 8000974:	0039      	movs	r1, r7
 8000976:	4449      	add	r1, r9
 8000978:	4549      	cmp	r1, r9
 800097a:	4192      	sbcs	r2, r2
 800097c:	4463      	add	r3, ip
 800097e:	4252      	negs	r2, r2
 8000980:	189b      	adds	r3, r3, r2
 8000982:	07dd      	lsls	r5, r3, #31
 8000984:	0849      	lsrs	r1, r1, #1
 8000986:	085b      	lsrs	r3, r3, #1
 8000988:	4698      	mov	r8, r3
 800098a:	0006      	movs	r6, r0
 800098c:	430d      	orrs	r5, r1
 800098e:	e6a5      	b.n	80006dc <__aeabi_dadd+0x238>
 8000990:	464a      	mov	r2, r9
 8000992:	1abd      	subs	r5, r7, r2
 8000994:	42af      	cmp	r7, r5
 8000996:	4189      	sbcs	r1, r1
 8000998:	4662      	mov	r2, ip
 800099a:	4249      	negs	r1, r1
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	1a5b      	subs	r3, r3, r1
 80009a0:	4698      	mov	r8, r3
 80009a2:	4654      	mov	r4, sl
 80009a4:	e5d1      	b.n	800054a <__aeabi_dadd+0xa6>
 80009a6:	076c      	lsls	r4, r5, #29
 80009a8:	08f9      	lsrs	r1, r7, #3
 80009aa:	4321      	orrs	r1, r4
 80009ac:	08eb      	lsrs	r3, r5, #3
 80009ae:	0004      	movs	r4, r0
 80009b0:	e69d      	b.n	80006ee <__aeabi_dadd+0x24a>
 80009b2:	464a      	mov	r2, r9
 80009b4:	431a      	orrs	r2, r3
 80009b6:	d175      	bne.n	8000aa4 <__aeabi_dadd+0x600>
 80009b8:	4661      	mov	r1, ip
 80009ba:	4339      	orrs	r1, r7
 80009bc:	d114      	bne.n	80009e8 <__aeabi_dadd+0x544>
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	2400      	movs	r4, #0
 80009c2:	031b      	lsls	r3, r3, #12
 80009c4:	e6bc      	b.n	8000740 <__aeabi_dadd+0x29c>
 80009c6:	464a      	mov	r2, r9
 80009c8:	1bd5      	subs	r5, r2, r7
 80009ca:	45a9      	cmp	r9, r5
 80009cc:	4189      	sbcs	r1, r1
 80009ce:	4662      	mov	r2, ip
 80009d0:	4249      	negs	r1, r1
 80009d2:	1a9b      	subs	r3, r3, r2
 80009d4:	1a5b      	subs	r3, r3, r1
 80009d6:	4698      	mov	r8, r3
 80009d8:	2601      	movs	r6, #1
 80009da:	e5ae      	b.n	800053a <__aeabi_dadd+0x96>
 80009dc:	464a      	mov	r2, r9
 80009de:	08d1      	lsrs	r1, r2, #3
 80009e0:	075a      	lsls	r2, r3, #29
 80009e2:	4311      	orrs	r1, r2
 80009e4:	08db      	lsrs	r3, r3, #3
 80009e6:	e6a7      	b.n	8000738 <__aeabi_dadd+0x294>
 80009e8:	4663      	mov	r3, ip
 80009ea:	08f9      	lsrs	r1, r7, #3
 80009ec:	075a      	lsls	r2, r3, #29
 80009ee:	4654      	mov	r4, sl
 80009f0:	4311      	orrs	r1, r2
 80009f2:	08db      	lsrs	r3, r3, #3
 80009f4:	e6a0      	b.n	8000738 <__aeabi_dadd+0x294>
 80009f6:	464a      	mov	r2, r9
 80009f8:	4313      	orrs	r3, r2
 80009fa:	001d      	movs	r5, r3
 80009fc:	1e6b      	subs	r3, r5, #1
 80009fe:	419d      	sbcs	r5, r3
 8000a00:	e6c7      	b.n	8000792 <__aeabi_dadd+0x2ee>
 8000a02:	0014      	movs	r4, r2
 8000a04:	001e      	movs	r6, r3
 8000a06:	3c20      	subs	r4, #32
 8000a08:	40e6      	lsrs	r6, r4
 8000a0a:	2a20      	cmp	r2, #32
 8000a0c:	d005      	beq.n	8000a1a <__aeabi_dadd+0x576>
 8000a0e:	2440      	movs	r4, #64	; 0x40
 8000a10:	1aa2      	subs	r2, r4, r2
 8000a12:	4093      	lsls	r3, r2
 8000a14:	464a      	mov	r2, r9
 8000a16:	431a      	orrs	r2, r3
 8000a18:	4691      	mov	r9, r2
 8000a1a:	464d      	mov	r5, r9
 8000a1c:	1e6b      	subs	r3, r5, #1
 8000a1e:	419d      	sbcs	r5, r3
 8000a20:	4335      	orrs	r5, r6
 8000a22:	e778      	b.n	8000916 <__aeabi_dadd+0x472>
 8000a24:	464a      	mov	r2, r9
 8000a26:	431a      	orrs	r2, r3
 8000a28:	d000      	beq.n	8000a2c <__aeabi_dadd+0x588>
 8000a2a:	e66b      	b.n	8000704 <__aeabi_dadd+0x260>
 8000a2c:	076b      	lsls	r3, r5, #29
 8000a2e:	08f9      	lsrs	r1, r7, #3
 8000a30:	4319      	orrs	r1, r3
 8000a32:	08eb      	lsrs	r3, r5, #3
 8000a34:	e680      	b.n	8000738 <__aeabi_dadd+0x294>
 8000a36:	4661      	mov	r1, ip
 8000a38:	4339      	orrs	r1, r7
 8000a3a:	d054      	beq.n	8000ae6 <__aeabi_dadd+0x642>
 8000a3c:	4663      	mov	r3, ip
 8000a3e:	08f9      	lsrs	r1, r7, #3
 8000a40:	075c      	lsls	r4, r3, #29
 8000a42:	4321      	orrs	r1, r4
 8000a44:	08db      	lsrs	r3, r3, #3
 8000a46:	0004      	movs	r4, r0
 8000a48:	e654      	b.n	80006f4 <__aeabi_dadd+0x250>
 8000a4a:	464a      	mov	r2, r9
 8000a4c:	1abd      	subs	r5, r7, r2
 8000a4e:	42af      	cmp	r7, r5
 8000a50:	4189      	sbcs	r1, r1
 8000a52:	4662      	mov	r2, ip
 8000a54:	4249      	negs	r1, r1
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	4698      	mov	r8, r3
 8000a5c:	0004      	movs	r4, r0
 8000a5e:	2601      	movs	r6, #1
 8000a60:	e56b      	b.n	800053a <__aeabi_dadd+0x96>
 8000a62:	464a      	mov	r2, r9
 8000a64:	1bd5      	subs	r5, r2, r7
 8000a66:	45a9      	cmp	r9, r5
 8000a68:	4189      	sbcs	r1, r1
 8000a6a:	4662      	mov	r2, ip
 8000a6c:	4249      	negs	r1, r1
 8000a6e:	1a9a      	subs	r2, r3, r2
 8000a70:	1a52      	subs	r2, r2, r1
 8000a72:	4690      	mov	r8, r2
 8000a74:	0212      	lsls	r2, r2, #8
 8000a76:	d532      	bpl.n	8000ade <__aeabi_dadd+0x63a>
 8000a78:	464a      	mov	r2, r9
 8000a7a:	1abd      	subs	r5, r7, r2
 8000a7c:	42af      	cmp	r7, r5
 8000a7e:	4189      	sbcs	r1, r1
 8000a80:	4662      	mov	r2, ip
 8000a82:	4249      	negs	r1, r1
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	1a5b      	subs	r3, r3, r1
 8000a88:	4698      	mov	r8, r3
 8000a8a:	0004      	movs	r4, r0
 8000a8c:	e584      	b.n	8000598 <__aeabi_dadd+0xf4>
 8000a8e:	4663      	mov	r3, ip
 8000a90:	08f9      	lsrs	r1, r7, #3
 8000a92:	075a      	lsls	r2, r3, #29
 8000a94:	4311      	orrs	r1, r2
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	e64e      	b.n	8000738 <__aeabi_dadd+0x294>
 8000a9a:	08f9      	lsrs	r1, r7, #3
 8000a9c:	0768      	lsls	r0, r5, #29
 8000a9e:	4301      	orrs	r1, r0
 8000aa0:	08eb      	lsrs	r3, r5, #3
 8000aa2:	e624      	b.n	80006ee <__aeabi_dadd+0x24a>
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	433a      	orrs	r2, r7
 8000aa8:	d100      	bne.n	8000aac <__aeabi_dadd+0x608>
 8000aaa:	e698      	b.n	80007de <__aeabi_dadd+0x33a>
 8000aac:	464a      	mov	r2, r9
 8000aae:	08d1      	lsrs	r1, r2, #3
 8000ab0:	075a      	lsls	r2, r3, #29
 8000ab2:	4311      	orrs	r1, r2
 8000ab4:	08da      	lsrs	r2, r3, #3
 8000ab6:	2380      	movs	r3, #128	; 0x80
 8000ab8:	031b      	lsls	r3, r3, #12
 8000aba:	421a      	tst	r2, r3
 8000abc:	d008      	beq.n	8000ad0 <__aeabi_dadd+0x62c>
 8000abe:	4660      	mov	r0, ip
 8000ac0:	08c5      	lsrs	r5, r0, #3
 8000ac2:	421d      	tst	r5, r3
 8000ac4:	d104      	bne.n	8000ad0 <__aeabi_dadd+0x62c>
 8000ac6:	4654      	mov	r4, sl
 8000ac8:	002a      	movs	r2, r5
 8000aca:	08f9      	lsrs	r1, r7, #3
 8000acc:	0743      	lsls	r3, r0, #29
 8000ace:	4319      	orrs	r1, r3
 8000ad0:	0f4b      	lsrs	r3, r1, #29
 8000ad2:	00c9      	lsls	r1, r1, #3
 8000ad4:	075b      	lsls	r3, r3, #29
 8000ad6:	08c9      	lsrs	r1, r1, #3
 8000ad8:	4319      	orrs	r1, r3
 8000ada:	0013      	movs	r3, r2
 8000adc:	e62c      	b.n	8000738 <__aeabi_dadd+0x294>
 8000ade:	4641      	mov	r1, r8
 8000ae0:	4329      	orrs	r1, r5
 8000ae2:	d000      	beq.n	8000ae6 <__aeabi_dadd+0x642>
 8000ae4:	e5fa      	b.n	80006dc <__aeabi_dadd+0x238>
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	000a      	movs	r2, r1
 8000aea:	2400      	movs	r4, #0
 8000aec:	e602      	b.n	80006f4 <__aeabi_dadd+0x250>
 8000aee:	076b      	lsls	r3, r5, #29
 8000af0:	08f9      	lsrs	r1, r7, #3
 8000af2:	4319      	orrs	r1, r3
 8000af4:	08eb      	lsrs	r3, r5, #3
 8000af6:	e5fd      	b.n	80006f4 <__aeabi_dadd+0x250>
 8000af8:	4663      	mov	r3, ip
 8000afa:	08f9      	lsrs	r1, r7, #3
 8000afc:	075b      	lsls	r3, r3, #29
 8000afe:	4319      	orrs	r1, r3
 8000b00:	4663      	mov	r3, ip
 8000b02:	0004      	movs	r4, r0
 8000b04:	08db      	lsrs	r3, r3, #3
 8000b06:	e617      	b.n	8000738 <__aeabi_dadd+0x294>
 8000b08:	003d      	movs	r5, r7
 8000b0a:	444d      	add	r5, r9
 8000b0c:	4463      	add	r3, ip
 8000b0e:	454d      	cmp	r5, r9
 8000b10:	4189      	sbcs	r1, r1
 8000b12:	4698      	mov	r8, r3
 8000b14:	4249      	negs	r1, r1
 8000b16:	4488      	add	r8, r1
 8000b18:	4643      	mov	r3, r8
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	d400      	bmi.n	8000b20 <__aeabi_dadd+0x67c>
 8000b1e:	e5dd      	b.n	80006dc <__aeabi_dadd+0x238>
 8000b20:	4642      	mov	r2, r8
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <__aeabi_dadd+0x6d0>)
 8000b24:	2601      	movs	r6, #1
 8000b26:	401a      	ands	r2, r3
 8000b28:	4690      	mov	r8, r2
 8000b2a:	e5d7      	b.n	80006dc <__aeabi_dadd+0x238>
 8000b2c:	0010      	movs	r0, r2
 8000b2e:	001e      	movs	r6, r3
 8000b30:	3820      	subs	r0, #32
 8000b32:	40c6      	lsrs	r6, r0
 8000b34:	2a20      	cmp	r2, #32
 8000b36:	d005      	beq.n	8000b44 <__aeabi_dadd+0x6a0>
 8000b38:	2040      	movs	r0, #64	; 0x40
 8000b3a:	1a82      	subs	r2, r0, r2
 8000b3c:	4093      	lsls	r3, r2
 8000b3e:	464a      	mov	r2, r9
 8000b40:	431a      	orrs	r2, r3
 8000b42:	4691      	mov	r9, r2
 8000b44:	464d      	mov	r5, r9
 8000b46:	1e6b      	subs	r3, r5, #1
 8000b48:	419d      	sbcs	r5, r3
 8000b4a:	4335      	orrs	r5, r6
 8000b4c:	e621      	b.n	8000792 <__aeabi_dadd+0x2ee>
 8000b4e:	0002      	movs	r2, r0
 8000b50:	2300      	movs	r3, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	e540      	b.n	80005d8 <__aeabi_dadd+0x134>
 8000b56:	464a      	mov	r2, r9
 8000b58:	19d5      	adds	r5, r2, r7
 8000b5a:	42bd      	cmp	r5, r7
 8000b5c:	4189      	sbcs	r1, r1
 8000b5e:	4463      	add	r3, ip
 8000b60:	4698      	mov	r8, r3
 8000b62:	4249      	negs	r1, r1
 8000b64:	4488      	add	r8, r1
 8000b66:	e5b3      	b.n	80006d0 <__aeabi_dadd+0x22c>
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4a01      	ldr	r2, [pc, #4]	; (8000b70 <__aeabi_dadd+0x6cc>)
 8000b6c:	000b      	movs	r3, r1
 8000b6e:	e533      	b.n	80005d8 <__aeabi_dadd+0x134>
 8000b70:	000007ff 	.word	0x000007ff
 8000b74:	ff7fffff 	.word	0xff7fffff

08000b78 <__aeabi_ddiv>:
 8000b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7a:	4657      	mov	r7, sl
 8000b7c:	464e      	mov	r6, r9
 8000b7e:	4645      	mov	r5, r8
 8000b80:	46de      	mov	lr, fp
 8000b82:	b5e0      	push	{r5, r6, r7, lr}
 8000b84:	4681      	mov	r9, r0
 8000b86:	0005      	movs	r5, r0
 8000b88:	030c      	lsls	r4, r1, #12
 8000b8a:	0048      	lsls	r0, r1, #1
 8000b8c:	4692      	mov	sl, r2
 8000b8e:	001f      	movs	r7, r3
 8000b90:	b085      	sub	sp, #20
 8000b92:	0b24      	lsrs	r4, r4, #12
 8000b94:	0d40      	lsrs	r0, r0, #21
 8000b96:	0fce      	lsrs	r6, r1, #31
 8000b98:	2800      	cmp	r0, #0
 8000b9a:	d059      	beq.n	8000c50 <__aeabi_ddiv+0xd8>
 8000b9c:	4b87      	ldr	r3, [pc, #540]	; (8000dbc <__aeabi_ddiv+0x244>)
 8000b9e:	4298      	cmp	r0, r3
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_ddiv+0x2c>
 8000ba2:	e098      	b.n	8000cd6 <__aeabi_ddiv+0x15e>
 8000ba4:	0f6b      	lsrs	r3, r5, #29
 8000ba6:	00e4      	lsls	r4, r4, #3
 8000ba8:	431c      	orrs	r4, r3
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	041b      	lsls	r3, r3, #16
 8000bae:	4323      	orrs	r3, r4
 8000bb0:	4698      	mov	r8, r3
 8000bb2:	4b83      	ldr	r3, [pc, #524]	; (8000dc0 <__aeabi_ddiv+0x248>)
 8000bb4:	00ed      	lsls	r5, r5, #3
 8000bb6:	469b      	mov	fp, r3
 8000bb8:	2300      	movs	r3, #0
 8000bba:	4699      	mov	r9, r3
 8000bbc:	4483      	add	fp, r0
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	033c      	lsls	r4, r7, #12
 8000bc2:	007b      	lsls	r3, r7, #1
 8000bc4:	4650      	mov	r0, sl
 8000bc6:	0b24      	lsrs	r4, r4, #12
 8000bc8:	0d5b      	lsrs	r3, r3, #21
 8000bca:	0fff      	lsrs	r7, r7, #31
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d067      	beq.n	8000ca0 <__aeabi_ddiv+0x128>
 8000bd0:	4a7a      	ldr	r2, [pc, #488]	; (8000dbc <__aeabi_ddiv+0x244>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d018      	beq.n	8000c08 <__aeabi_ddiv+0x90>
 8000bd6:	497a      	ldr	r1, [pc, #488]	; (8000dc0 <__aeabi_ddiv+0x248>)
 8000bd8:	0f42      	lsrs	r2, r0, #29
 8000bda:	468c      	mov	ip, r1
 8000bdc:	00e4      	lsls	r4, r4, #3
 8000bde:	4659      	mov	r1, fp
 8000be0:	4314      	orrs	r4, r2
 8000be2:	2280      	movs	r2, #128	; 0x80
 8000be4:	4463      	add	r3, ip
 8000be6:	0412      	lsls	r2, r2, #16
 8000be8:	1acb      	subs	r3, r1, r3
 8000bea:	4314      	orrs	r4, r2
 8000bec:	469b      	mov	fp, r3
 8000bee:	00c2      	lsls	r2, r0, #3
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	0033      	movs	r3, r6
 8000bf4:	407b      	eors	r3, r7
 8000bf6:	469a      	mov	sl, r3
 8000bf8:	464b      	mov	r3, r9
 8000bfa:	2b0f      	cmp	r3, #15
 8000bfc:	d900      	bls.n	8000c00 <__aeabi_ddiv+0x88>
 8000bfe:	e0ef      	b.n	8000de0 <__aeabi_ddiv+0x268>
 8000c00:	4970      	ldr	r1, [pc, #448]	; (8000dc4 <__aeabi_ddiv+0x24c>)
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	58cb      	ldr	r3, [r1, r3]
 8000c06:	469f      	mov	pc, r3
 8000c08:	4b6f      	ldr	r3, [pc, #444]	; (8000dc8 <__aeabi_ddiv+0x250>)
 8000c0a:	4652      	mov	r2, sl
 8000c0c:	469c      	mov	ip, r3
 8000c0e:	4322      	orrs	r2, r4
 8000c10:	44e3      	add	fp, ip
 8000c12:	2a00      	cmp	r2, #0
 8000c14:	d000      	beq.n	8000c18 <__aeabi_ddiv+0xa0>
 8000c16:	e095      	b.n	8000d44 <__aeabi_ddiv+0x1cc>
 8000c18:	4649      	mov	r1, r9
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	4319      	orrs	r1, r3
 8000c1e:	4689      	mov	r9, r1
 8000c20:	2400      	movs	r4, #0
 8000c22:	2002      	movs	r0, #2
 8000c24:	e7e5      	b.n	8000bf2 <__aeabi_ddiv+0x7a>
 8000c26:	2300      	movs	r3, #0
 8000c28:	2400      	movs	r4, #0
 8000c2a:	2500      	movs	r5, #0
 8000c2c:	4652      	mov	r2, sl
 8000c2e:	051b      	lsls	r3, r3, #20
 8000c30:	4323      	orrs	r3, r4
 8000c32:	07d2      	lsls	r2, r2, #31
 8000c34:	4313      	orrs	r3, r2
 8000c36:	0028      	movs	r0, r5
 8000c38:	0019      	movs	r1, r3
 8000c3a:	b005      	add	sp, #20
 8000c3c:	bcf0      	pop	{r4, r5, r6, r7}
 8000c3e:	46bb      	mov	fp, r7
 8000c40:	46b2      	mov	sl, r6
 8000c42:	46a9      	mov	r9, r5
 8000c44:	46a0      	mov	r8, r4
 8000c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c48:	2400      	movs	r4, #0
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	4b5b      	ldr	r3, [pc, #364]	; (8000dbc <__aeabi_ddiv+0x244>)
 8000c4e:	e7ed      	b.n	8000c2c <__aeabi_ddiv+0xb4>
 8000c50:	464b      	mov	r3, r9
 8000c52:	4323      	orrs	r3, r4
 8000c54:	4698      	mov	r8, r3
 8000c56:	d100      	bne.n	8000c5a <__aeabi_ddiv+0xe2>
 8000c58:	e089      	b.n	8000d6e <__aeabi_ddiv+0x1f6>
 8000c5a:	2c00      	cmp	r4, #0
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_ddiv+0xe8>
 8000c5e:	e1e0      	b.n	8001022 <__aeabi_ddiv+0x4aa>
 8000c60:	0020      	movs	r0, r4
 8000c62:	f001 fa37 	bl	80020d4 <__clzsi2>
 8000c66:	0001      	movs	r1, r0
 8000c68:	0002      	movs	r2, r0
 8000c6a:	390b      	subs	r1, #11
 8000c6c:	231d      	movs	r3, #29
 8000c6e:	1a5b      	subs	r3, r3, r1
 8000c70:	4649      	mov	r1, r9
 8000c72:	0010      	movs	r0, r2
 8000c74:	40d9      	lsrs	r1, r3
 8000c76:	3808      	subs	r0, #8
 8000c78:	4084      	lsls	r4, r0
 8000c7a:	000b      	movs	r3, r1
 8000c7c:	464d      	mov	r5, r9
 8000c7e:	4323      	orrs	r3, r4
 8000c80:	4698      	mov	r8, r3
 8000c82:	4085      	lsls	r5, r0
 8000c84:	4851      	ldr	r0, [pc, #324]	; (8000dcc <__aeabi_ddiv+0x254>)
 8000c86:	033c      	lsls	r4, r7, #12
 8000c88:	1a83      	subs	r3, r0, r2
 8000c8a:	469b      	mov	fp, r3
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4699      	mov	r9, r3
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	007b      	lsls	r3, r7, #1
 8000c94:	4650      	mov	r0, sl
 8000c96:	0b24      	lsrs	r4, r4, #12
 8000c98:	0d5b      	lsrs	r3, r3, #21
 8000c9a:	0fff      	lsrs	r7, r7, #31
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d197      	bne.n	8000bd0 <__aeabi_ddiv+0x58>
 8000ca0:	4652      	mov	r2, sl
 8000ca2:	4322      	orrs	r2, r4
 8000ca4:	d055      	beq.n	8000d52 <__aeabi_ddiv+0x1da>
 8000ca6:	2c00      	cmp	r4, #0
 8000ca8:	d100      	bne.n	8000cac <__aeabi_ddiv+0x134>
 8000caa:	e1ca      	b.n	8001042 <__aeabi_ddiv+0x4ca>
 8000cac:	0020      	movs	r0, r4
 8000cae:	f001 fa11 	bl	80020d4 <__clzsi2>
 8000cb2:	0002      	movs	r2, r0
 8000cb4:	3a0b      	subs	r2, #11
 8000cb6:	231d      	movs	r3, #29
 8000cb8:	0001      	movs	r1, r0
 8000cba:	1a9b      	subs	r3, r3, r2
 8000cbc:	4652      	mov	r2, sl
 8000cbe:	3908      	subs	r1, #8
 8000cc0:	40da      	lsrs	r2, r3
 8000cc2:	408c      	lsls	r4, r1
 8000cc4:	4314      	orrs	r4, r2
 8000cc6:	4652      	mov	r2, sl
 8000cc8:	408a      	lsls	r2, r1
 8000cca:	4b41      	ldr	r3, [pc, #260]	; (8000dd0 <__aeabi_ddiv+0x258>)
 8000ccc:	4458      	add	r0, fp
 8000cce:	469b      	mov	fp, r3
 8000cd0:	4483      	add	fp, r0
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	e78d      	b.n	8000bf2 <__aeabi_ddiv+0x7a>
 8000cd6:	464b      	mov	r3, r9
 8000cd8:	4323      	orrs	r3, r4
 8000cda:	4698      	mov	r8, r3
 8000cdc:	d140      	bne.n	8000d60 <__aeabi_ddiv+0x1e8>
 8000cde:	2308      	movs	r3, #8
 8000ce0:	4699      	mov	r9, r3
 8000ce2:	3b06      	subs	r3, #6
 8000ce4:	2500      	movs	r5, #0
 8000ce6:	4683      	mov	fp, r0
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	e769      	b.n	8000bc0 <__aeabi_ddiv+0x48>
 8000cec:	46b2      	mov	sl, r6
 8000cee:	9b00      	ldr	r3, [sp, #0]
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d0a9      	beq.n	8000c48 <__aeabi_ddiv+0xd0>
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_ddiv+0x182>
 8000cf8:	e211      	b.n	800111e <__aeabi_ddiv+0x5a6>
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d093      	beq.n	8000c26 <__aeabi_ddiv+0xae>
 8000cfe:	4a35      	ldr	r2, [pc, #212]	; (8000dd4 <__aeabi_ddiv+0x25c>)
 8000d00:	445a      	add	r2, fp
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	dc00      	bgt.n	8000d08 <__aeabi_ddiv+0x190>
 8000d06:	e13c      	b.n	8000f82 <__aeabi_ddiv+0x40a>
 8000d08:	076b      	lsls	r3, r5, #29
 8000d0a:	d000      	beq.n	8000d0e <__aeabi_ddiv+0x196>
 8000d0c:	e1a7      	b.n	800105e <__aeabi_ddiv+0x4e6>
 8000d0e:	08ed      	lsrs	r5, r5, #3
 8000d10:	4643      	mov	r3, r8
 8000d12:	01db      	lsls	r3, r3, #7
 8000d14:	d506      	bpl.n	8000d24 <__aeabi_ddiv+0x1ac>
 8000d16:	4642      	mov	r2, r8
 8000d18:	4b2f      	ldr	r3, [pc, #188]	; (8000dd8 <__aeabi_ddiv+0x260>)
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	4690      	mov	r8, r2
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	00d2      	lsls	r2, r2, #3
 8000d22:	445a      	add	r2, fp
 8000d24:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <__aeabi_ddiv+0x264>)
 8000d26:	429a      	cmp	r2, r3
 8000d28:	dc8e      	bgt.n	8000c48 <__aeabi_ddiv+0xd0>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	0552      	lsls	r2, r2, #21
 8000d2e:	0758      	lsls	r0, r3, #29
 8000d30:	025c      	lsls	r4, r3, #9
 8000d32:	4305      	orrs	r5, r0
 8000d34:	0b24      	lsrs	r4, r4, #12
 8000d36:	0d53      	lsrs	r3, r2, #21
 8000d38:	e778      	b.n	8000c2c <__aeabi_ddiv+0xb4>
 8000d3a:	46ba      	mov	sl, r7
 8000d3c:	46a0      	mov	r8, r4
 8000d3e:	0015      	movs	r5, r2
 8000d40:	9000      	str	r0, [sp, #0]
 8000d42:	e7d4      	b.n	8000cee <__aeabi_ddiv+0x176>
 8000d44:	464a      	mov	r2, r9
 8000d46:	2303      	movs	r3, #3
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	4691      	mov	r9, r2
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	4652      	mov	r2, sl
 8000d50:	e74f      	b.n	8000bf2 <__aeabi_ddiv+0x7a>
 8000d52:	4649      	mov	r1, r9
 8000d54:	2301      	movs	r3, #1
 8000d56:	4319      	orrs	r1, r3
 8000d58:	4689      	mov	r9, r1
 8000d5a:	2400      	movs	r4, #0
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	e748      	b.n	8000bf2 <__aeabi_ddiv+0x7a>
 8000d60:	230c      	movs	r3, #12
 8000d62:	4699      	mov	r9, r3
 8000d64:	3b09      	subs	r3, #9
 8000d66:	46a0      	mov	r8, r4
 8000d68:	4683      	mov	fp, r0
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	e728      	b.n	8000bc0 <__aeabi_ddiv+0x48>
 8000d6e:	2304      	movs	r3, #4
 8000d70:	4699      	mov	r9, r3
 8000d72:	2300      	movs	r3, #0
 8000d74:	469b      	mov	fp, r3
 8000d76:	3301      	adds	r3, #1
 8000d78:	2500      	movs	r5, #0
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	e720      	b.n	8000bc0 <__aeabi_ddiv+0x48>
 8000d7e:	2300      	movs	r3, #0
 8000d80:	2480      	movs	r4, #128	; 0x80
 8000d82:	469a      	mov	sl, r3
 8000d84:	2500      	movs	r5, #0
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <__aeabi_ddiv+0x244>)
 8000d88:	0324      	lsls	r4, r4, #12
 8000d8a:	e74f      	b.n	8000c2c <__aeabi_ddiv+0xb4>
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	4641      	mov	r1, r8
 8000d90:	031b      	lsls	r3, r3, #12
 8000d92:	4219      	tst	r1, r3
 8000d94:	d008      	beq.n	8000da8 <__aeabi_ddiv+0x230>
 8000d96:	421c      	tst	r4, r3
 8000d98:	d106      	bne.n	8000da8 <__aeabi_ddiv+0x230>
 8000d9a:	431c      	orrs	r4, r3
 8000d9c:	0324      	lsls	r4, r4, #12
 8000d9e:	46ba      	mov	sl, r7
 8000da0:	0015      	movs	r5, r2
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <__aeabi_ddiv+0x244>)
 8000da4:	0b24      	lsrs	r4, r4, #12
 8000da6:	e741      	b.n	8000c2c <__aeabi_ddiv+0xb4>
 8000da8:	2480      	movs	r4, #128	; 0x80
 8000daa:	4643      	mov	r3, r8
 8000dac:	0324      	lsls	r4, r4, #12
 8000dae:	431c      	orrs	r4, r3
 8000db0:	0324      	lsls	r4, r4, #12
 8000db2:	46b2      	mov	sl, r6
 8000db4:	4b01      	ldr	r3, [pc, #4]	; (8000dbc <__aeabi_ddiv+0x244>)
 8000db6:	0b24      	lsrs	r4, r4, #12
 8000db8:	e738      	b.n	8000c2c <__aeabi_ddiv+0xb4>
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	000007ff 	.word	0x000007ff
 8000dc0:	fffffc01 	.word	0xfffffc01
 8000dc4:	08006ef0 	.word	0x08006ef0
 8000dc8:	fffff801 	.word	0xfffff801
 8000dcc:	fffffc0d 	.word	0xfffffc0d
 8000dd0:	000003f3 	.word	0x000003f3
 8000dd4:	000003ff 	.word	0x000003ff
 8000dd8:	feffffff 	.word	0xfeffffff
 8000ddc:	000007fe 	.word	0x000007fe
 8000de0:	4544      	cmp	r4, r8
 8000de2:	d200      	bcs.n	8000de6 <__aeabi_ddiv+0x26e>
 8000de4:	e116      	b.n	8001014 <__aeabi_ddiv+0x49c>
 8000de6:	d100      	bne.n	8000dea <__aeabi_ddiv+0x272>
 8000de8:	e111      	b.n	800100e <__aeabi_ddiv+0x496>
 8000dea:	2301      	movs	r3, #1
 8000dec:	425b      	negs	r3, r3
 8000dee:	469c      	mov	ip, r3
 8000df0:	002e      	movs	r6, r5
 8000df2:	4640      	mov	r0, r8
 8000df4:	2500      	movs	r5, #0
 8000df6:	44e3      	add	fp, ip
 8000df8:	0223      	lsls	r3, r4, #8
 8000dfa:	0e14      	lsrs	r4, r2, #24
 8000dfc:	431c      	orrs	r4, r3
 8000dfe:	0c1b      	lsrs	r3, r3, #16
 8000e00:	4699      	mov	r9, r3
 8000e02:	0423      	lsls	r3, r4, #16
 8000e04:	0c1f      	lsrs	r7, r3, #16
 8000e06:	0212      	lsls	r2, r2, #8
 8000e08:	4649      	mov	r1, r9
 8000e0a:	9200      	str	r2, [sp, #0]
 8000e0c:	9701      	str	r7, [sp, #4]
 8000e0e:	f7ff fa1b 	bl	8000248 <__aeabi_uidivmod>
 8000e12:	0002      	movs	r2, r0
 8000e14:	437a      	muls	r2, r7
 8000e16:	040b      	lsls	r3, r1, #16
 8000e18:	0c31      	lsrs	r1, r6, #16
 8000e1a:	4680      	mov	r8, r0
 8000e1c:	4319      	orrs	r1, r3
 8000e1e:	428a      	cmp	r2, r1
 8000e20:	d90b      	bls.n	8000e3a <__aeabi_ddiv+0x2c2>
 8000e22:	2301      	movs	r3, #1
 8000e24:	425b      	negs	r3, r3
 8000e26:	469c      	mov	ip, r3
 8000e28:	1909      	adds	r1, r1, r4
 8000e2a:	44e0      	add	r8, ip
 8000e2c:	428c      	cmp	r4, r1
 8000e2e:	d804      	bhi.n	8000e3a <__aeabi_ddiv+0x2c2>
 8000e30:	428a      	cmp	r2, r1
 8000e32:	d902      	bls.n	8000e3a <__aeabi_ddiv+0x2c2>
 8000e34:	1e83      	subs	r3, r0, #2
 8000e36:	4698      	mov	r8, r3
 8000e38:	1909      	adds	r1, r1, r4
 8000e3a:	1a88      	subs	r0, r1, r2
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	f7ff fa03 	bl	8000248 <__aeabi_uidivmod>
 8000e42:	0409      	lsls	r1, r1, #16
 8000e44:	468c      	mov	ip, r1
 8000e46:	0431      	lsls	r1, r6, #16
 8000e48:	4666      	mov	r6, ip
 8000e4a:	9a01      	ldr	r2, [sp, #4]
 8000e4c:	0c09      	lsrs	r1, r1, #16
 8000e4e:	4342      	muls	r2, r0
 8000e50:	0003      	movs	r3, r0
 8000e52:	4331      	orrs	r1, r6
 8000e54:	428a      	cmp	r2, r1
 8000e56:	d904      	bls.n	8000e62 <__aeabi_ddiv+0x2ea>
 8000e58:	1909      	adds	r1, r1, r4
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	428c      	cmp	r4, r1
 8000e5e:	d800      	bhi.n	8000e62 <__aeabi_ddiv+0x2ea>
 8000e60:	e111      	b.n	8001086 <__aeabi_ddiv+0x50e>
 8000e62:	1a89      	subs	r1, r1, r2
 8000e64:	4642      	mov	r2, r8
 8000e66:	9e00      	ldr	r6, [sp, #0]
 8000e68:	0412      	lsls	r2, r2, #16
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	0c33      	lsrs	r3, r6, #16
 8000e6e:	001f      	movs	r7, r3
 8000e70:	0c10      	lsrs	r0, r2, #16
 8000e72:	4690      	mov	r8, r2
 8000e74:	9302      	str	r3, [sp, #8]
 8000e76:	0413      	lsls	r3, r2, #16
 8000e78:	0432      	lsls	r2, r6, #16
 8000e7a:	0c16      	lsrs	r6, r2, #16
 8000e7c:	0032      	movs	r2, r6
 8000e7e:	0c1b      	lsrs	r3, r3, #16
 8000e80:	435a      	muls	r2, r3
 8000e82:	9603      	str	r6, [sp, #12]
 8000e84:	437b      	muls	r3, r7
 8000e86:	4346      	muls	r6, r0
 8000e88:	4378      	muls	r0, r7
 8000e8a:	0c17      	lsrs	r7, r2, #16
 8000e8c:	46bc      	mov	ip, r7
 8000e8e:	199b      	adds	r3, r3, r6
 8000e90:	4463      	add	r3, ip
 8000e92:	429e      	cmp	r6, r3
 8000e94:	d903      	bls.n	8000e9e <__aeabi_ddiv+0x326>
 8000e96:	2680      	movs	r6, #128	; 0x80
 8000e98:	0276      	lsls	r6, r6, #9
 8000e9a:	46b4      	mov	ip, r6
 8000e9c:	4460      	add	r0, ip
 8000e9e:	0c1e      	lsrs	r6, r3, #16
 8000ea0:	1830      	adds	r0, r6, r0
 8000ea2:	0416      	lsls	r6, r2, #16
 8000ea4:	041b      	lsls	r3, r3, #16
 8000ea6:	0c36      	lsrs	r6, r6, #16
 8000ea8:	199e      	adds	r6, r3, r6
 8000eaa:	4281      	cmp	r1, r0
 8000eac:	d200      	bcs.n	8000eb0 <__aeabi_ddiv+0x338>
 8000eae:	e09c      	b.n	8000fea <__aeabi_ddiv+0x472>
 8000eb0:	d100      	bne.n	8000eb4 <__aeabi_ddiv+0x33c>
 8000eb2:	e097      	b.n	8000fe4 <__aeabi_ddiv+0x46c>
 8000eb4:	1bae      	subs	r6, r5, r6
 8000eb6:	1a09      	subs	r1, r1, r0
 8000eb8:	42b5      	cmp	r5, r6
 8000eba:	4180      	sbcs	r0, r0
 8000ebc:	4240      	negs	r0, r0
 8000ebe:	1a08      	subs	r0, r1, r0
 8000ec0:	4284      	cmp	r4, r0
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_ddiv+0x34e>
 8000ec4:	e111      	b.n	80010ea <__aeabi_ddiv+0x572>
 8000ec6:	4649      	mov	r1, r9
 8000ec8:	f7ff f9be 	bl	8000248 <__aeabi_uidivmod>
 8000ecc:	9a01      	ldr	r2, [sp, #4]
 8000ece:	040b      	lsls	r3, r1, #16
 8000ed0:	4342      	muls	r2, r0
 8000ed2:	0c31      	lsrs	r1, r6, #16
 8000ed4:	0005      	movs	r5, r0
 8000ed6:	4319      	orrs	r1, r3
 8000ed8:	428a      	cmp	r2, r1
 8000eda:	d907      	bls.n	8000eec <__aeabi_ddiv+0x374>
 8000edc:	1909      	adds	r1, r1, r4
 8000ede:	3d01      	subs	r5, #1
 8000ee0:	428c      	cmp	r4, r1
 8000ee2:	d803      	bhi.n	8000eec <__aeabi_ddiv+0x374>
 8000ee4:	428a      	cmp	r2, r1
 8000ee6:	d901      	bls.n	8000eec <__aeabi_ddiv+0x374>
 8000ee8:	1e85      	subs	r5, r0, #2
 8000eea:	1909      	adds	r1, r1, r4
 8000eec:	1a88      	subs	r0, r1, r2
 8000eee:	4649      	mov	r1, r9
 8000ef0:	f7ff f9aa 	bl	8000248 <__aeabi_uidivmod>
 8000ef4:	0409      	lsls	r1, r1, #16
 8000ef6:	468c      	mov	ip, r1
 8000ef8:	0431      	lsls	r1, r6, #16
 8000efa:	4666      	mov	r6, ip
 8000efc:	9a01      	ldr	r2, [sp, #4]
 8000efe:	0c09      	lsrs	r1, r1, #16
 8000f00:	4342      	muls	r2, r0
 8000f02:	0003      	movs	r3, r0
 8000f04:	4331      	orrs	r1, r6
 8000f06:	428a      	cmp	r2, r1
 8000f08:	d907      	bls.n	8000f1a <__aeabi_ddiv+0x3a2>
 8000f0a:	1909      	adds	r1, r1, r4
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	428c      	cmp	r4, r1
 8000f10:	d803      	bhi.n	8000f1a <__aeabi_ddiv+0x3a2>
 8000f12:	428a      	cmp	r2, r1
 8000f14:	d901      	bls.n	8000f1a <__aeabi_ddiv+0x3a2>
 8000f16:	1e83      	subs	r3, r0, #2
 8000f18:	1909      	adds	r1, r1, r4
 8000f1a:	9e03      	ldr	r6, [sp, #12]
 8000f1c:	1a89      	subs	r1, r1, r2
 8000f1e:	0032      	movs	r2, r6
 8000f20:	042d      	lsls	r5, r5, #16
 8000f22:	431d      	orrs	r5, r3
 8000f24:	9f02      	ldr	r7, [sp, #8]
 8000f26:	042b      	lsls	r3, r5, #16
 8000f28:	0c1b      	lsrs	r3, r3, #16
 8000f2a:	435a      	muls	r2, r3
 8000f2c:	437b      	muls	r3, r7
 8000f2e:	469c      	mov	ip, r3
 8000f30:	0c28      	lsrs	r0, r5, #16
 8000f32:	4346      	muls	r6, r0
 8000f34:	0c13      	lsrs	r3, r2, #16
 8000f36:	44b4      	add	ip, r6
 8000f38:	4463      	add	r3, ip
 8000f3a:	4378      	muls	r0, r7
 8000f3c:	429e      	cmp	r6, r3
 8000f3e:	d903      	bls.n	8000f48 <__aeabi_ddiv+0x3d0>
 8000f40:	2680      	movs	r6, #128	; 0x80
 8000f42:	0276      	lsls	r6, r6, #9
 8000f44:	46b4      	mov	ip, r6
 8000f46:	4460      	add	r0, ip
 8000f48:	0c1e      	lsrs	r6, r3, #16
 8000f4a:	0412      	lsls	r2, r2, #16
 8000f4c:	041b      	lsls	r3, r3, #16
 8000f4e:	0c12      	lsrs	r2, r2, #16
 8000f50:	1830      	adds	r0, r6, r0
 8000f52:	189b      	adds	r3, r3, r2
 8000f54:	4281      	cmp	r1, r0
 8000f56:	d306      	bcc.n	8000f66 <__aeabi_ddiv+0x3ee>
 8000f58:	d002      	beq.n	8000f60 <__aeabi_ddiv+0x3e8>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	431d      	orrs	r5, r3
 8000f5e:	e6ce      	b.n	8000cfe <__aeabi_ddiv+0x186>
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d100      	bne.n	8000f66 <__aeabi_ddiv+0x3ee>
 8000f64:	e6cb      	b.n	8000cfe <__aeabi_ddiv+0x186>
 8000f66:	1861      	adds	r1, r4, r1
 8000f68:	1e6e      	subs	r6, r5, #1
 8000f6a:	42a1      	cmp	r1, r4
 8000f6c:	d200      	bcs.n	8000f70 <__aeabi_ddiv+0x3f8>
 8000f6e:	e0a4      	b.n	80010ba <__aeabi_ddiv+0x542>
 8000f70:	4281      	cmp	r1, r0
 8000f72:	d200      	bcs.n	8000f76 <__aeabi_ddiv+0x3fe>
 8000f74:	e0c9      	b.n	800110a <__aeabi_ddiv+0x592>
 8000f76:	d100      	bne.n	8000f7a <__aeabi_ddiv+0x402>
 8000f78:	e0d9      	b.n	800112e <__aeabi_ddiv+0x5b6>
 8000f7a:	0035      	movs	r5, r6
 8000f7c:	e7ed      	b.n	8000f5a <__aeabi_ddiv+0x3e2>
 8000f7e:	2501      	movs	r5, #1
 8000f80:	426d      	negs	r5, r5
 8000f82:	2101      	movs	r1, #1
 8000f84:	1a89      	subs	r1, r1, r2
 8000f86:	2938      	cmp	r1, #56	; 0x38
 8000f88:	dd00      	ble.n	8000f8c <__aeabi_ddiv+0x414>
 8000f8a:	e64c      	b.n	8000c26 <__aeabi_ddiv+0xae>
 8000f8c:	291f      	cmp	r1, #31
 8000f8e:	dc00      	bgt.n	8000f92 <__aeabi_ddiv+0x41a>
 8000f90:	e07f      	b.n	8001092 <__aeabi_ddiv+0x51a>
 8000f92:	231f      	movs	r3, #31
 8000f94:	425b      	negs	r3, r3
 8000f96:	1a9a      	subs	r2, r3, r2
 8000f98:	4643      	mov	r3, r8
 8000f9a:	40d3      	lsrs	r3, r2
 8000f9c:	2920      	cmp	r1, #32
 8000f9e:	d004      	beq.n	8000faa <__aeabi_ddiv+0x432>
 8000fa0:	4644      	mov	r4, r8
 8000fa2:	4a65      	ldr	r2, [pc, #404]	; (8001138 <__aeabi_ddiv+0x5c0>)
 8000fa4:	445a      	add	r2, fp
 8000fa6:	4094      	lsls	r4, r2
 8000fa8:	4325      	orrs	r5, r4
 8000faa:	1e6a      	subs	r2, r5, #1
 8000fac:	4195      	sbcs	r5, r2
 8000fae:	2207      	movs	r2, #7
 8000fb0:	432b      	orrs	r3, r5
 8000fb2:	0015      	movs	r5, r2
 8000fb4:	2400      	movs	r4, #0
 8000fb6:	401d      	ands	r5, r3
 8000fb8:	421a      	tst	r2, r3
 8000fba:	d100      	bne.n	8000fbe <__aeabi_ddiv+0x446>
 8000fbc:	e0a1      	b.n	8001102 <__aeabi_ddiv+0x58a>
 8000fbe:	220f      	movs	r2, #15
 8000fc0:	2400      	movs	r4, #0
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	2a04      	cmp	r2, #4
 8000fc6:	d100      	bne.n	8000fca <__aeabi_ddiv+0x452>
 8000fc8:	e098      	b.n	80010fc <__aeabi_ddiv+0x584>
 8000fca:	1d1a      	adds	r2, r3, #4
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	419b      	sbcs	r3, r3
 8000fd0:	425b      	negs	r3, r3
 8000fd2:	18e4      	adds	r4, r4, r3
 8000fd4:	0013      	movs	r3, r2
 8000fd6:	0222      	lsls	r2, r4, #8
 8000fd8:	d400      	bmi.n	8000fdc <__aeabi_ddiv+0x464>
 8000fda:	e08f      	b.n	80010fc <__aeabi_ddiv+0x584>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	2400      	movs	r4, #0
 8000fe0:	2500      	movs	r5, #0
 8000fe2:	e623      	b.n	8000c2c <__aeabi_ddiv+0xb4>
 8000fe4:	42b5      	cmp	r5, r6
 8000fe6:	d300      	bcc.n	8000fea <__aeabi_ddiv+0x472>
 8000fe8:	e764      	b.n	8000eb4 <__aeabi_ddiv+0x33c>
 8000fea:	4643      	mov	r3, r8
 8000fec:	1e5a      	subs	r2, r3, #1
 8000fee:	9b00      	ldr	r3, [sp, #0]
 8000ff0:	469c      	mov	ip, r3
 8000ff2:	4465      	add	r5, ip
 8000ff4:	001f      	movs	r7, r3
 8000ff6:	429d      	cmp	r5, r3
 8000ff8:	419b      	sbcs	r3, r3
 8000ffa:	425b      	negs	r3, r3
 8000ffc:	191b      	adds	r3, r3, r4
 8000ffe:	18c9      	adds	r1, r1, r3
 8001000:	428c      	cmp	r4, r1
 8001002:	d23a      	bcs.n	800107a <__aeabi_ddiv+0x502>
 8001004:	4288      	cmp	r0, r1
 8001006:	d863      	bhi.n	80010d0 <__aeabi_ddiv+0x558>
 8001008:	d060      	beq.n	80010cc <__aeabi_ddiv+0x554>
 800100a:	4690      	mov	r8, r2
 800100c:	e752      	b.n	8000eb4 <__aeabi_ddiv+0x33c>
 800100e:	42aa      	cmp	r2, r5
 8001010:	d900      	bls.n	8001014 <__aeabi_ddiv+0x49c>
 8001012:	e6ea      	b.n	8000dea <__aeabi_ddiv+0x272>
 8001014:	4643      	mov	r3, r8
 8001016:	07de      	lsls	r6, r3, #31
 8001018:	0858      	lsrs	r0, r3, #1
 800101a:	086b      	lsrs	r3, r5, #1
 800101c:	431e      	orrs	r6, r3
 800101e:	07ed      	lsls	r5, r5, #31
 8001020:	e6ea      	b.n	8000df8 <__aeabi_ddiv+0x280>
 8001022:	4648      	mov	r0, r9
 8001024:	f001 f856 	bl	80020d4 <__clzsi2>
 8001028:	0001      	movs	r1, r0
 800102a:	0002      	movs	r2, r0
 800102c:	3115      	adds	r1, #21
 800102e:	3220      	adds	r2, #32
 8001030:	291c      	cmp	r1, #28
 8001032:	dc00      	bgt.n	8001036 <__aeabi_ddiv+0x4be>
 8001034:	e61a      	b.n	8000c6c <__aeabi_ddiv+0xf4>
 8001036:	464b      	mov	r3, r9
 8001038:	3808      	subs	r0, #8
 800103a:	4083      	lsls	r3, r0
 800103c:	2500      	movs	r5, #0
 800103e:	4698      	mov	r8, r3
 8001040:	e620      	b.n	8000c84 <__aeabi_ddiv+0x10c>
 8001042:	f001 f847 	bl	80020d4 <__clzsi2>
 8001046:	0003      	movs	r3, r0
 8001048:	001a      	movs	r2, r3
 800104a:	3215      	adds	r2, #21
 800104c:	3020      	adds	r0, #32
 800104e:	2a1c      	cmp	r2, #28
 8001050:	dc00      	bgt.n	8001054 <__aeabi_ddiv+0x4dc>
 8001052:	e630      	b.n	8000cb6 <__aeabi_ddiv+0x13e>
 8001054:	4654      	mov	r4, sl
 8001056:	3b08      	subs	r3, #8
 8001058:	2200      	movs	r2, #0
 800105a:	409c      	lsls	r4, r3
 800105c:	e635      	b.n	8000cca <__aeabi_ddiv+0x152>
 800105e:	230f      	movs	r3, #15
 8001060:	402b      	ands	r3, r5
 8001062:	2b04      	cmp	r3, #4
 8001064:	d100      	bne.n	8001068 <__aeabi_ddiv+0x4f0>
 8001066:	e652      	b.n	8000d0e <__aeabi_ddiv+0x196>
 8001068:	2305      	movs	r3, #5
 800106a:	425b      	negs	r3, r3
 800106c:	42ab      	cmp	r3, r5
 800106e:	419b      	sbcs	r3, r3
 8001070:	3504      	adds	r5, #4
 8001072:	425b      	negs	r3, r3
 8001074:	08ed      	lsrs	r5, r5, #3
 8001076:	4498      	add	r8, r3
 8001078:	e64a      	b.n	8000d10 <__aeabi_ddiv+0x198>
 800107a:	428c      	cmp	r4, r1
 800107c:	d1c5      	bne.n	800100a <__aeabi_ddiv+0x492>
 800107e:	42af      	cmp	r7, r5
 8001080:	d9c0      	bls.n	8001004 <__aeabi_ddiv+0x48c>
 8001082:	4690      	mov	r8, r2
 8001084:	e716      	b.n	8000eb4 <__aeabi_ddiv+0x33c>
 8001086:	428a      	cmp	r2, r1
 8001088:	d800      	bhi.n	800108c <__aeabi_ddiv+0x514>
 800108a:	e6ea      	b.n	8000e62 <__aeabi_ddiv+0x2ea>
 800108c:	1e83      	subs	r3, r0, #2
 800108e:	1909      	adds	r1, r1, r4
 8001090:	e6e7      	b.n	8000e62 <__aeabi_ddiv+0x2ea>
 8001092:	4a2a      	ldr	r2, [pc, #168]	; (800113c <__aeabi_ddiv+0x5c4>)
 8001094:	0028      	movs	r0, r5
 8001096:	445a      	add	r2, fp
 8001098:	4643      	mov	r3, r8
 800109a:	4095      	lsls	r5, r2
 800109c:	4093      	lsls	r3, r2
 800109e:	40c8      	lsrs	r0, r1
 80010a0:	1e6a      	subs	r2, r5, #1
 80010a2:	4195      	sbcs	r5, r2
 80010a4:	4644      	mov	r4, r8
 80010a6:	4303      	orrs	r3, r0
 80010a8:	432b      	orrs	r3, r5
 80010aa:	40cc      	lsrs	r4, r1
 80010ac:	075a      	lsls	r2, r3, #29
 80010ae:	d092      	beq.n	8000fd6 <__aeabi_ddiv+0x45e>
 80010b0:	220f      	movs	r2, #15
 80010b2:	401a      	ands	r2, r3
 80010b4:	2a04      	cmp	r2, #4
 80010b6:	d188      	bne.n	8000fca <__aeabi_ddiv+0x452>
 80010b8:	e78d      	b.n	8000fd6 <__aeabi_ddiv+0x45e>
 80010ba:	0035      	movs	r5, r6
 80010bc:	4281      	cmp	r1, r0
 80010be:	d000      	beq.n	80010c2 <__aeabi_ddiv+0x54a>
 80010c0:	e74b      	b.n	8000f5a <__aeabi_ddiv+0x3e2>
 80010c2:	9a00      	ldr	r2, [sp, #0]
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d000      	beq.n	80010ca <__aeabi_ddiv+0x552>
 80010c8:	e747      	b.n	8000f5a <__aeabi_ddiv+0x3e2>
 80010ca:	e618      	b.n	8000cfe <__aeabi_ddiv+0x186>
 80010cc:	42ae      	cmp	r6, r5
 80010ce:	d99c      	bls.n	800100a <__aeabi_ddiv+0x492>
 80010d0:	2302      	movs	r3, #2
 80010d2:	425b      	negs	r3, r3
 80010d4:	469c      	mov	ip, r3
 80010d6:	9b00      	ldr	r3, [sp, #0]
 80010d8:	44e0      	add	r8, ip
 80010da:	469c      	mov	ip, r3
 80010dc:	4465      	add	r5, ip
 80010de:	429d      	cmp	r5, r3
 80010e0:	419b      	sbcs	r3, r3
 80010e2:	425b      	negs	r3, r3
 80010e4:	191b      	adds	r3, r3, r4
 80010e6:	18c9      	adds	r1, r1, r3
 80010e8:	e6e4      	b.n	8000eb4 <__aeabi_ddiv+0x33c>
 80010ea:	4a15      	ldr	r2, [pc, #84]	; (8001140 <__aeabi_ddiv+0x5c8>)
 80010ec:	445a      	add	r2, fp
 80010ee:	2a00      	cmp	r2, #0
 80010f0:	dc00      	bgt.n	80010f4 <__aeabi_ddiv+0x57c>
 80010f2:	e744      	b.n	8000f7e <__aeabi_ddiv+0x406>
 80010f4:	2301      	movs	r3, #1
 80010f6:	2500      	movs	r5, #0
 80010f8:	4498      	add	r8, r3
 80010fa:	e609      	b.n	8000d10 <__aeabi_ddiv+0x198>
 80010fc:	0765      	lsls	r5, r4, #29
 80010fe:	0264      	lsls	r4, r4, #9
 8001100:	0b24      	lsrs	r4, r4, #12
 8001102:	08db      	lsrs	r3, r3, #3
 8001104:	431d      	orrs	r5, r3
 8001106:	2300      	movs	r3, #0
 8001108:	e590      	b.n	8000c2c <__aeabi_ddiv+0xb4>
 800110a:	9e00      	ldr	r6, [sp, #0]
 800110c:	3d02      	subs	r5, #2
 800110e:	0072      	lsls	r2, r6, #1
 8001110:	42b2      	cmp	r2, r6
 8001112:	41bf      	sbcs	r7, r7
 8001114:	427f      	negs	r7, r7
 8001116:	193c      	adds	r4, r7, r4
 8001118:	1909      	adds	r1, r1, r4
 800111a:	9200      	str	r2, [sp, #0]
 800111c:	e7ce      	b.n	80010bc <__aeabi_ddiv+0x544>
 800111e:	2480      	movs	r4, #128	; 0x80
 8001120:	4643      	mov	r3, r8
 8001122:	0324      	lsls	r4, r4, #12
 8001124:	431c      	orrs	r4, r3
 8001126:	0324      	lsls	r4, r4, #12
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <__aeabi_ddiv+0x5cc>)
 800112a:	0b24      	lsrs	r4, r4, #12
 800112c:	e57e      	b.n	8000c2c <__aeabi_ddiv+0xb4>
 800112e:	9a00      	ldr	r2, [sp, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d3ea      	bcc.n	800110a <__aeabi_ddiv+0x592>
 8001134:	0035      	movs	r5, r6
 8001136:	e7c4      	b.n	80010c2 <__aeabi_ddiv+0x54a>
 8001138:	0000043e 	.word	0x0000043e
 800113c:	0000041e 	.word	0x0000041e
 8001140:	000003ff 	.word	0x000003ff
 8001144:	000007ff 	.word	0x000007ff

08001148 <__eqdf2>:
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	464f      	mov	r7, r9
 800114c:	4646      	mov	r6, r8
 800114e:	46d6      	mov	lr, sl
 8001150:	4694      	mov	ip, r2
 8001152:	4691      	mov	r9, r2
 8001154:	031a      	lsls	r2, r3, #12
 8001156:	0b12      	lsrs	r2, r2, #12
 8001158:	4d18      	ldr	r5, [pc, #96]	; (80011bc <__eqdf2+0x74>)
 800115a:	b5c0      	push	{r6, r7, lr}
 800115c:	004c      	lsls	r4, r1, #1
 800115e:	030f      	lsls	r7, r1, #12
 8001160:	4692      	mov	sl, r2
 8001162:	005a      	lsls	r2, r3, #1
 8001164:	0006      	movs	r6, r0
 8001166:	4680      	mov	r8, r0
 8001168:	0b3f      	lsrs	r7, r7, #12
 800116a:	2001      	movs	r0, #1
 800116c:	0d64      	lsrs	r4, r4, #21
 800116e:	0fc9      	lsrs	r1, r1, #31
 8001170:	0d52      	lsrs	r2, r2, #21
 8001172:	0fdb      	lsrs	r3, r3, #31
 8001174:	42ac      	cmp	r4, r5
 8001176:	d00a      	beq.n	800118e <__eqdf2+0x46>
 8001178:	42aa      	cmp	r2, r5
 800117a:	d003      	beq.n	8001184 <__eqdf2+0x3c>
 800117c:	4294      	cmp	r4, r2
 800117e:	d101      	bne.n	8001184 <__eqdf2+0x3c>
 8001180:	4557      	cmp	r7, sl
 8001182:	d00d      	beq.n	80011a0 <__eqdf2+0x58>
 8001184:	bce0      	pop	{r5, r6, r7}
 8001186:	46ba      	mov	sl, r7
 8001188:	46b1      	mov	r9, r6
 800118a:	46a8      	mov	r8, r5
 800118c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800118e:	003d      	movs	r5, r7
 8001190:	4335      	orrs	r5, r6
 8001192:	d1f7      	bne.n	8001184 <__eqdf2+0x3c>
 8001194:	42a2      	cmp	r2, r4
 8001196:	d1f5      	bne.n	8001184 <__eqdf2+0x3c>
 8001198:	4652      	mov	r2, sl
 800119a:	4665      	mov	r5, ip
 800119c:	432a      	orrs	r2, r5
 800119e:	d1f1      	bne.n	8001184 <__eqdf2+0x3c>
 80011a0:	2001      	movs	r0, #1
 80011a2:	45c8      	cmp	r8, r9
 80011a4:	d1ee      	bne.n	8001184 <__eqdf2+0x3c>
 80011a6:	4299      	cmp	r1, r3
 80011a8:	d006      	beq.n	80011b8 <__eqdf2+0x70>
 80011aa:	2c00      	cmp	r4, #0
 80011ac:	d1ea      	bne.n	8001184 <__eqdf2+0x3c>
 80011ae:	433e      	orrs	r6, r7
 80011b0:	0030      	movs	r0, r6
 80011b2:	1e46      	subs	r6, r0, #1
 80011b4:	41b0      	sbcs	r0, r6
 80011b6:	e7e5      	b.n	8001184 <__eqdf2+0x3c>
 80011b8:	2000      	movs	r0, #0
 80011ba:	e7e3      	b.n	8001184 <__eqdf2+0x3c>
 80011bc:	000007ff 	.word	0x000007ff

080011c0 <__gedf2>:
 80011c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c2:	464e      	mov	r6, r9
 80011c4:	4645      	mov	r5, r8
 80011c6:	4657      	mov	r7, sl
 80011c8:	46de      	mov	lr, fp
 80011ca:	0004      	movs	r4, r0
 80011cc:	0018      	movs	r0, r3
 80011ce:	b5e0      	push	{r5, r6, r7, lr}
 80011d0:	0016      	movs	r6, r2
 80011d2:	031b      	lsls	r3, r3, #12
 80011d4:	0b1b      	lsrs	r3, r3, #12
 80011d6:	4d32      	ldr	r5, [pc, #200]	; (80012a0 <__gedf2+0xe0>)
 80011d8:	030f      	lsls	r7, r1, #12
 80011da:	004a      	lsls	r2, r1, #1
 80011dc:	4699      	mov	r9, r3
 80011de:	0043      	lsls	r3, r0, #1
 80011e0:	46a4      	mov	ip, r4
 80011e2:	46b0      	mov	r8, r6
 80011e4:	0b3f      	lsrs	r7, r7, #12
 80011e6:	0d52      	lsrs	r2, r2, #21
 80011e8:	0fc9      	lsrs	r1, r1, #31
 80011ea:	0d5b      	lsrs	r3, r3, #21
 80011ec:	0fc0      	lsrs	r0, r0, #31
 80011ee:	42aa      	cmp	r2, r5
 80011f0:	d029      	beq.n	8001246 <__gedf2+0x86>
 80011f2:	42ab      	cmp	r3, r5
 80011f4:	d018      	beq.n	8001228 <__gedf2+0x68>
 80011f6:	2a00      	cmp	r2, #0
 80011f8:	d12a      	bne.n	8001250 <__gedf2+0x90>
 80011fa:	433c      	orrs	r4, r7
 80011fc:	46a3      	mov	fp, r4
 80011fe:	4265      	negs	r5, r4
 8001200:	4165      	adcs	r5, r4
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <__gedf2+0x4c>
 8001206:	464c      	mov	r4, r9
 8001208:	4326      	orrs	r6, r4
 800120a:	d027      	beq.n	800125c <__gedf2+0x9c>
 800120c:	2d00      	cmp	r5, #0
 800120e:	d115      	bne.n	800123c <__gedf2+0x7c>
 8001210:	4281      	cmp	r1, r0
 8001212:	d028      	beq.n	8001266 <__gedf2+0xa6>
 8001214:	2002      	movs	r0, #2
 8001216:	3901      	subs	r1, #1
 8001218:	4008      	ands	r0, r1
 800121a:	3801      	subs	r0, #1
 800121c:	bcf0      	pop	{r4, r5, r6, r7}
 800121e:	46bb      	mov	fp, r7
 8001220:	46b2      	mov	sl, r6
 8001222:	46a9      	mov	r9, r5
 8001224:	46a0      	mov	r8, r4
 8001226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001228:	464d      	mov	r5, r9
 800122a:	432e      	orrs	r6, r5
 800122c:	d12f      	bne.n	800128e <__gedf2+0xce>
 800122e:	2a00      	cmp	r2, #0
 8001230:	d1ee      	bne.n	8001210 <__gedf2+0x50>
 8001232:	433c      	orrs	r4, r7
 8001234:	4265      	negs	r5, r4
 8001236:	4165      	adcs	r5, r4
 8001238:	2d00      	cmp	r5, #0
 800123a:	d0e9      	beq.n	8001210 <__gedf2+0x50>
 800123c:	2800      	cmp	r0, #0
 800123e:	d1ed      	bne.n	800121c <__gedf2+0x5c>
 8001240:	2001      	movs	r0, #1
 8001242:	4240      	negs	r0, r0
 8001244:	e7ea      	b.n	800121c <__gedf2+0x5c>
 8001246:	003d      	movs	r5, r7
 8001248:	4325      	orrs	r5, r4
 800124a:	d120      	bne.n	800128e <__gedf2+0xce>
 800124c:	4293      	cmp	r3, r2
 800124e:	d0eb      	beq.n	8001228 <__gedf2+0x68>
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1dd      	bne.n	8001210 <__gedf2+0x50>
 8001254:	464c      	mov	r4, r9
 8001256:	4326      	orrs	r6, r4
 8001258:	d1da      	bne.n	8001210 <__gedf2+0x50>
 800125a:	e7db      	b.n	8001214 <__gedf2+0x54>
 800125c:	465b      	mov	r3, fp
 800125e:	2000      	movs	r0, #0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0db      	beq.n	800121c <__gedf2+0x5c>
 8001264:	e7d6      	b.n	8001214 <__gedf2+0x54>
 8001266:	429a      	cmp	r2, r3
 8001268:	dc0a      	bgt.n	8001280 <__gedf2+0xc0>
 800126a:	dbe7      	blt.n	800123c <__gedf2+0x7c>
 800126c:	454f      	cmp	r7, r9
 800126e:	d8d1      	bhi.n	8001214 <__gedf2+0x54>
 8001270:	d010      	beq.n	8001294 <__gedf2+0xd4>
 8001272:	2000      	movs	r0, #0
 8001274:	454f      	cmp	r7, r9
 8001276:	d2d1      	bcs.n	800121c <__gedf2+0x5c>
 8001278:	2900      	cmp	r1, #0
 800127a:	d0e1      	beq.n	8001240 <__gedf2+0x80>
 800127c:	0008      	movs	r0, r1
 800127e:	e7cd      	b.n	800121c <__gedf2+0x5c>
 8001280:	4243      	negs	r3, r0
 8001282:	4158      	adcs	r0, r3
 8001284:	2302      	movs	r3, #2
 8001286:	4240      	negs	r0, r0
 8001288:	4018      	ands	r0, r3
 800128a:	3801      	subs	r0, #1
 800128c:	e7c6      	b.n	800121c <__gedf2+0x5c>
 800128e:	2002      	movs	r0, #2
 8001290:	4240      	negs	r0, r0
 8001292:	e7c3      	b.n	800121c <__gedf2+0x5c>
 8001294:	45c4      	cmp	ip, r8
 8001296:	d8bd      	bhi.n	8001214 <__gedf2+0x54>
 8001298:	2000      	movs	r0, #0
 800129a:	45c4      	cmp	ip, r8
 800129c:	d2be      	bcs.n	800121c <__gedf2+0x5c>
 800129e:	e7eb      	b.n	8001278 <__gedf2+0xb8>
 80012a0:	000007ff 	.word	0x000007ff

080012a4 <__ledf2>:
 80012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a6:	464e      	mov	r6, r9
 80012a8:	4645      	mov	r5, r8
 80012aa:	4657      	mov	r7, sl
 80012ac:	46de      	mov	lr, fp
 80012ae:	0004      	movs	r4, r0
 80012b0:	0018      	movs	r0, r3
 80012b2:	b5e0      	push	{r5, r6, r7, lr}
 80012b4:	0016      	movs	r6, r2
 80012b6:	031b      	lsls	r3, r3, #12
 80012b8:	0b1b      	lsrs	r3, r3, #12
 80012ba:	4d31      	ldr	r5, [pc, #196]	; (8001380 <__ledf2+0xdc>)
 80012bc:	030f      	lsls	r7, r1, #12
 80012be:	004a      	lsls	r2, r1, #1
 80012c0:	4699      	mov	r9, r3
 80012c2:	0043      	lsls	r3, r0, #1
 80012c4:	46a4      	mov	ip, r4
 80012c6:	46b0      	mov	r8, r6
 80012c8:	0b3f      	lsrs	r7, r7, #12
 80012ca:	0d52      	lsrs	r2, r2, #21
 80012cc:	0fc9      	lsrs	r1, r1, #31
 80012ce:	0d5b      	lsrs	r3, r3, #21
 80012d0:	0fc0      	lsrs	r0, r0, #31
 80012d2:	42aa      	cmp	r2, r5
 80012d4:	d011      	beq.n	80012fa <__ledf2+0x56>
 80012d6:	42ab      	cmp	r3, r5
 80012d8:	d014      	beq.n	8001304 <__ledf2+0x60>
 80012da:	2a00      	cmp	r2, #0
 80012dc:	d12f      	bne.n	800133e <__ledf2+0x9a>
 80012de:	433c      	orrs	r4, r7
 80012e0:	46a3      	mov	fp, r4
 80012e2:	4265      	negs	r5, r4
 80012e4:	4165      	adcs	r5, r4
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d114      	bne.n	8001314 <__ledf2+0x70>
 80012ea:	464c      	mov	r4, r9
 80012ec:	4326      	orrs	r6, r4
 80012ee:	d111      	bne.n	8001314 <__ledf2+0x70>
 80012f0:	465b      	mov	r3, fp
 80012f2:	2000      	movs	r0, #0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d017      	beq.n	8001328 <__ledf2+0x84>
 80012f8:	e010      	b.n	800131c <__ledf2+0x78>
 80012fa:	003d      	movs	r5, r7
 80012fc:	4325      	orrs	r5, r4
 80012fe:	d112      	bne.n	8001326 <__ledf2+0x82>
 8001300:	4293      	cmp	r3, r2
 8001302:	d11c      	bne.n	800133e <__ledf2+0x9a>
 8001304:	464d      	mov	r5, r9
 8001306:	432e      	orrs	r6, r5
 8001308:	d10d      	bne.n	8001326 <__ledf2+0x82>
 800130a:	2a00      	cmp	r2, #0
 800130c:	d104      	bne.n	8001318 <__ledf2+0x74>
 800130e:	433c      	orrs	r4, r7
 8001310:	4265      	negs	r5, r4
 8001312:	4165      	adcs	r5, r4
 8001314:	2d00      	cmp	r5, #0
 8001316:	d10d      	bne.n	8001334 <__ledf2+0x90>
 8001318:	4281      	cmp	r1, r0
 800131a:	d016      	beq.n	800134a <__ledf2+0xa6>
 800131c:	2002      	movs	r0, #2
 800131e:	3901      	subs	r1, #1
 8001320:	4008      	ands	r0, r1
 8001322:	3801      	subs	r0, #1
 8001324:	e000      	b.n	8001328 <__ledf2+0x84>
 8001326:	2002      	movs	r0, #2
 8001328:	bcf0      	pop	{r4, r5, r6, r7}
 800132a:	46bb      	mov	fp, r7
 800132c:	46b2      	mov	sl, r6
 800132e:	46a9      	mov	r9, r5
 8001330:	46a0      	mov	r8, r4
 8001332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001334:	2800      	cmp	r0, #0
 8001336:	d1f7      	bne.n	8001328 <__ledf2+0x84>
 8001338:	2001      	movs	r0, #1
 800133a:	4240      	negs	r0, r0
 800133c:	e7f4      	b.n	8001328 <__ledf2+0x84>
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1ea      	bne.n	8001318 <__ledf2+0x74>
 8001342:	464c      	mov	r4, r9
 8001344:	4326      	orrs	r6, r4
 8001346:	d1e7      	bne.n	8001318 <__ledf2+0x74>
 8001348:	e7e8      	b.n	800131c <__ledf2+0x78>
 800134a:	429a      	cmp	r2, r3
 800134c:	dd06      	ble.n	800135c <__ledf2+0xb8>
 800134e:	4243      	negs	r3, r0
 8001350:	4158      	adcs	r0, r3
 8001352:	2302      	movs	r3, #2
 8001354:	4240      	negs	r0, r0
 8001356:	4018      	ands	r0, r3
 8001358:	3801      	subs	r0, #1
 800135a:	e7e5      	b.n	8001328 <__ledf2+0x84>
 800135c:	429a      	cmp	r2, r3
 800135e:	dbe9      	blt.n	8001334 <__ledf2+0x90>
 8001360:	454f      	cmp	r7, r9
 8001362:	d8db      	bhi.n	800131c <__ledf2+0x78>
 8001364:	d006      	beq.n	8001374 <__ledf2+0xd0>
 8001366:	2000      	movs	r0, #0
 8001368:	454f      	cmp	r7, r9
 800136a:	d2dd      	bcs.n	8001328 <__ledf2+0x84>
 800136c:	2900      	cmp	r1, #0
 800136e:	d0e3      	beq.n	8001338 <__ledf2+0x94>
 8001370:	0008      	movs	r0, r1
 8001372:	e7d9      	b.n	8001328 <__ledf2+0x84>
 8001374:	45c4      	cmp	ip, r8
 8001376:	d8d1      	bhi.n	800131c <__ledf2+0x78>
 8001378:	2000      	movs	r0, #0
 800137a:	45c4      	cmp	ip, r8
 800137c:	d2d4      	bcs.n	8001328 <__ledf2+0x84>
 800137e:	e7f5      	b.n	800136c <__ledf2+0xc8>
 8001380:	000007ff 	.word	0x000007ff

08001384 <__aeabi_dmul>:
 8001384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001386:	4657      	mov	r7, sl
 8001388:	464e      	mov	r6, r9
 800138a:	4645      	mov	r5, r8
 800138c:	46de      	mov	lr, fp
 800138e:	b5e0      	push	{r5, r6, r7, lr}
 8001390:	4698      	mov	r8, r3
 8001392:	030c      	lsls	r4, r1, #12
 8001394:	004b      	lsls	r3, r1, #1
 8001396:	0006      	movs	r6, r0
 8001398:	4692      	mov	sl, r2
 800139a:	b087      	sub	sp, #28
 800139c:	0b24      	lsrs	r4, r4, #12
 800139e:	0d5b      	lsrs	r3, r3, #21
 80013a0:	0fcf      	lsrs	r7, r1, #31
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d06c      	beq.n	8001480 <__aeabi_dmul+0xfc>
 80013a6:	4add      	ldr	r2, [pc, #884]	; (800171c <__aeabi_dmul+0x398>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d100      	bne.n	80013ae <__aeabi_dmul+0x2a>
 80013ac:	e086      	b.n	80014bc <__aeabi_dmul+0x138>
 80013ae:	0f42      	lsrs	r2, r0, #29
 80013b0:	00e4      	lsls	r4, r4, #3
 80013b2:	4314      	orrs	r4, r2
 80013b4:	2280      	movs	r2, #128	; 0x80
 80013b6:	0412      	lsls	r2, r2, #16
 80013b8:	4314      	orrs	r4, r2
 80013ba:	4ad9      	ldr	r2, [pc, #868]	; (8001720 <__aeabi_dmul+0x39c>)
 80013bc:	00c5      	lsls	r5, r0, #3
 80013be:	4694      	mov	ip, r2
 80013c0:	4463      	add	r3, ip
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2300      	movs	r3, #0
 80013c6:	4699      	mov	r9, r3
 80013c8:	469b      	mov	fp, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4642      	mov	r2, r8
 80013ce:	031e      	lsls	r6, r3, #12
 80013d0:	0fd2      	lsrs	r2, r2, #31
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4650      	mov	r0, sl
 80013d6:	4690      	mov	r8, r2
 80013d8:	0b36      	lsrs	r6, r6, #12
 80013da:	0d5b      	lsrs	r3, r3, #21
 80013dc:	d100      	bne.n	80013e0 <__aeabi_dmul+0x5c>
 80013de:	e078      	b.n	80014d2 <__aeabi_dmul+0x14e>
 80013e0:	4ace      	ldr	r2, [pc, #824]	; (800171c <__aeabi_dmul+0x398>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d01d      	beq.n	8001422 <__aeabi_dmul+0x9e>
 80013e6:	49ce      	ldr	r1, [pc, #824]	; (8001720 <__aeabi_dmul+0x39c>)
 80013e8:	0f42      	lsrs	r2, r0, #29
 80013ea:	468c      	mov	ip, r1
 80013ec:	9900      	ldr	r1, [sp, #0]
 80013ee:	4463      	add	r3, ip
 80013f0:	00f6      	lsls	r6, r6, #3
 80013f2:	468c      	mov	ip, r1
 80013f4:	4316      	orrs	r6, r2
 80013f6:	2280      	movs	r2, #128	; 0x80
 80013f8:	449c      	add	ip, r3
 80013fa:	0412      	lsls	r2, r2, #16
 80013fc:	4663      	mov	r3, ip
 80013fe:	4316      	orrs	r6, r2
 8001400:	00c2      	lsls	r2, r0, #3
 8001402:	2000      	movs	r0, #0
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	9900      	ldr	r1, [sp, #0]
 8001408:	4643      	mov	r3, r8
 800140a:	3101      	adds	r1, #1
 800140c:	468c      	mov	ip, r1
 800140e:	4649      	mov	r1, r9
 8001410:	407b      	eors	r3, r7
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	290f      	cmp	r1, #15
 8001416:	d900      	bls.n	800141a <__aeabi_dmul+0x96>
 8001418:	e07e      	b.n	8001518 <__aeabi_dmul+0x194>
 800141a:	4bc2      	ldr	r3, [pc, #776]	; (8001724 <__aeabi_dmul+0x3a0>)
 800141c:	0089      	lsls	r1, r1, #2
 800141e:	5859      	ldr	r1, [r3, r1]
 8001420:	468f      	mov	pc, r1
 8001422:	4652      	mov	r2, sl
 8001424:	9b00      	ldr	r3, [sp, #0]
 8001426:	4332      	orrs	r2, r6
 8001428:	d000      	beq.n	800142c <__aeabi_dmul+0xa8>
 800142a:	e156      	b.n	80016da <__aeabi_dmul+0x356>
 800142c:	49bb      	ldr	r1, [pc, #748]	; (800171c <__aeabi_dmul+0x398>)
 800142e:	2600      	movs	r6, #0
 8001430:	468c      	mov	ip, r1
 8001432:	4463      	add	r3, ip
 8001434:	4649      	mov	r1, r9
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2302      	movs	r3, #2
 800143a:	4319      	orrs	r1, r3
 800143c:	4689      	mov	r9, r1
 800143e:	2002      	movs	r0, #2
 8001440:	e7e1      	b.n	8001406 <__aeabi_dmul+0x82>
 8001442:	4643      	mov	r3, r8
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	0034      	movs	r4, r6
 8001448:	0015      	movs	r5, r2
 800144a:	4683      	mov	fp, r0
 800144c:	465b      	mov	r3, fp
 800144e:	2b02      	cmp	r3, #2
 8001450:	d05e      	beq.n	8001510 <__aeabi_dmul+0x18c>
 8001452:	2b03      	cmp	r3, #3
 8001454:	d100      	bne.n	8001458 <__aeabi_dmul+0xd4>
 8001456:	e1f3      	b.n	8001840 <__aeabi_dmul+0x4bc>
 8001458:	2b01      	cmp	r3, #1
 800145a:	d000      	beq.n	800145e <__aeabi_dmul+0xda>
 800145c:	e118      	b.n	8001690 <__aeabi_dmul+0x30c>
 800145e:	2200      	movs	r2, #0
 8001460:	2400      	movs	r4, #0
 8001462:	2500      	movs	r5, #0
 8001464:	9b01      	ldr	r3, [sp, #4]
 8001466:	0512      	lsls	r2, r2, #20
 8001468:	4322      	orrs	r2, r4
 800146a:	07db      	lsls	r3, r3, #31
 800146c:	431a      	orrs	r2, r3
 800146e:	0028      	movs	r0, r5
 8001470:	0011      	movs	r1, r2
 8001472:	b007      	add	sp, #28
 8001474:	bcf0      	pop	{r4, r5, r6, r7}
 8001476:	46bb      	mov	fp, r7
 8001478:	46b2      	mov	sl, r6
 800147a:	46a9      	mov	r9, r5
 800147c:	46a0      	mov	r8, r4
 800147e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001480:	0025      	movs	r5, r4
 8001482:	4305      	orrs	r5, r0
 8001484:	d100      	bne.n	8001488 <__aeabi_dmul+0x104>
 8001486:	e141      	b.n	800170c <__aeabi_dmul+0x388>
 8001488:	2c00      	cmp	r4, #0
 800148a:	d100      	bne.n	800148e <__aeabi_dmul+0x10a>
 800148c:	e1ad      	b.n	80017ea <__aeabi_dmul+0x466>
 800148e:	0020      	movs	r0, r4
 8001490:	f000 fe20 	bl	80020d4 <__clzsi2>
 8001494:	0001      	movs	r1, r0
 8001496:	0002      	movs	r2, r0
 8001498:	390b      	subs	r1, #11
 800149a:	231d      	movs	r3, #29
 800149c:	0010      	movs	r0, r2
 800149e:	1a5b      	subs	r3, r3, r1
 80014a0:	0031      	movs	r1, r6
 80014a2:	0035      	movs	r5, r6
 80014a4:	3808      	subs	r0, #8
 80014a6:	4084      	lsls	r4, r0
 80014a8:	40d9      	lsrs	r1, r3
 80014aa:	4085      	lsls	r5, r0
 80014ac:	430c      	orrs	r4, r1
 80014ae:	489e      	ldr	r0, [pc, #632]	; (8001728 <__aeabi_dmul+0x3a4>)
 80014b0:	1a83      	subs	r3, r0, r2
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2300      	movs	r3, #0
 80014b6:	4699      	mov	r9, r3
 80014b8:	469b      	mov	fp, r3
 80014ba:	e786      	b.n	80013ca <__aeabi_dmul+0x46>
 80014bc:	0005      	movs	r5, r0
 80014be:	4325      	orrs	r5, r4
 80014c0:	d000      	beq.n	80014c4 <__aeabi_dmul+0x140>
 80014c2:	e11c      	b.n	80016fe <__aeabi_dmul+0x37a>
 80014c4:	2208      	movs	r2, #8
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2302      	movs	r3, #2
 80014ca:	2400      	movs	r4, #0
 80014cc:	4691      	mov	r9, r2
 80014ce:	469b      	mov	fp, r3
 80014d0:	e77b      	b.n	80013ca <__aeabi_dmul+0x46>
 80014d2:	4652      	mov	r2, sl
 80014d4:	4332      	orrs	r2, r6
 80014d6:	d100      	bne.n	80014da <__aeabi_dmul+0x156>
 80014d8:	e10a      	b.n	80016f0 <__aeabi_dmul+0x36c>
 80014da:	2e00      	cmp	r6, #0
 80014dc:	d100      	bne.n	80014e0 <__aeabi_dmul+0x15c>
 80014de:	e176      	b.n	80017ce <__aeabi_dmul+0x44a>
 80014e0:	0030      	movs	r0, r6
 80014e2:	f000 fdf7 	bl	80020d4 <__clzsi2>
 80014e6:	0002      	movs	r2, r0
 80014e8:	3a0b      	subs	r2, #11
 80014ea:	231d      	movs	r3, #29
 80014ec:	0001      	movs	r1, r0
 80014ee:	1a9b      	subs	r3, r3, r2
 80014f0:	4652      	mov	r2, sl
 80014f2:	3908      	subs	r1, #8
 80014f4:	40da      	lsrs	r2, r3
 80014f6:	408e      	lsls	r6, r1
 80014f8:	4316      	orrs	r6, r2
 80014fa:	4652      	mov	r2, sl
 80014fc:	408a      	lsls	r2, r1
 80014fe:	9b00      	ldr	r3, [sp, #0]
 8001500:	4989      	ldr	r1, [pc, #548]	; (8001728 <__aeabi_dmul+0x3a4>)
 8001502:	1a18      	subs	r0, r3, r0
 8001504:	0003      	movs	r3, r0
 8001506:	468c      	mov	ip, r1
 8001508:	4463      	add	r3, ip
 800150a:	2000      	movs	r0, #0
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	e77a      	b.n	8001406 <__aeabi_dmul+0x82>
 8001510:	2400      	movs	r4, #0
 8001512:	2500      	movs	r5, #0
 8001514:	4a81      	ldr	r2, [pc, #516]	; (800171c <__aeabi_dmul+0x398>)
 8001516:	e7a5      	b.n	8001464 <__aeabi_dmul+0xe0>
 8001518:	0c2f      	lsrs	r7, r5, #16
 800151a:	042d      	lsls	r5, r5, #16
 800151c:	0c2d      	lsrs	r5, r5, #16
 800151e:	002b      	movs	r3, r5
 8001520:	0c11      	lsrs	r1, r2, #16
 8001522:	0412      	lsls	r2, r2, #16
 8001524:	0c12      	lsrs	r2, r2, #16
 8001526:	4353      	muls	r3, r2
 8001528:	4698      	mov	r8, r3
 800152a:	0013      	movs	r3, r2
 800152c:	0028      	movs	r0, r5
 800152e:	437b      	muls	r3, r7
 8001530:	4699      	mov	r9, r3
 8001532:	4348      	muls	r0, r1
 8001534:	4448      	add	r0, r9
 8001536:	4683      	mov	fp, r0
 8001538:	4640      	mov	r0, r8
 800153a:	000b      	movs	r3, r1
 800153c:	0c00      	lsrs	r0, r0, #16
 800153e:	4682      	mov	sl, r0
 8001540:	4658      	mov	r0, fp
 8001542:	437b      	muls	r3, r7
 8001544:	4450      	add	r0, sl
 8001546:	9302      	str	r3, [sp, #8]
 8001548:	4581      	cmp	r9, r0
 800154a:	d906      	bls.n	800155a <__aeabi_dmul+0x1d6>
 800154c:	469a      	mov	sl, r3
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	025b      	lsls	r3, r3, #9
 8001552:	4699      	mov	r9, r3
 8001554:	44ca      	add	sl, r9
 8001556:	4653      	mov	r3, sl
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	0c03      	lsrs	r3, r0, #16
 800155c:	469b      	mov	fp, r3
 800155e:	4643      	mov	r3, r8
 8001560:	041b      	lsls	r3, r3, #16
 8001562:	0400      	lsls	r0, r0, #16
 8001564:	0c1b      	lsrs	r3, r3, #16
 8001566:	4698      	mov	r8, r3
 8001568:	0003      	movs	r3, r0
 800156a:	4443      	add	r3, r8
 800156c:	9304      	str	r3, [sp, #16]
 800156e:	0c33      	lsrs	r3, r6, #16
 8001570:	4699      	mov	r9, r3
 8001572:	002b      	movs	r3, r5
 8001574:	0436      	lsls	r6, r6, #16
 8001576:	0c36      	lsrs	r6, r6, #16
 8001578:	4373      	muls	r3, r6
 800157a:	4698      	mov	r8, r3
 800157c:	0033      	movs	r3, r6
 800157e:	437b      	muls	r3, r7
 8001580:	469a      	mov	sl, r3
 8001582:	464b      	mov	r3, r9
 8001584:	435d      	muls	r5, r3
 8001586:	435f      	muls	r7, r3
 8001588:	4643      	mov	r3, r8
 800158a:	4455      	add	r5, sl
 800158c:	0c18      	lsrs	r0, r3, #16
 800158e:	1940      	adds	r0, r0, r5
 8001590:	4582      	cmp	sl, r0
 8001592:	d903      	bls.n	800159c <__aeabi_dmul+0x218>
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	025b      	lsls	r3, r3, #9
 8001598:	469a      	mov	sl, r3
 800159a:	4457      	add	r7, sl
 800159c:	0c05      	lsrs	r5, r0, #16
 800159e:	19eb      	adds	r3, r5, r7
 80015a0:	9305      	str	r3, [sp, #20]
 80015a2:	4643      	mov	r3, r8
 80015a4:	041d      	lsls	r5, r3, #16
 80015a6:	0c2d      	lsrs	r5, r5, #16
 80015a8:	0400      	lsls	r0, r0, #16
 80015aa:	1940      	adds	r0, r0, r5
 80015ac:	0c25      	lsrs	r5, r4, #16
 80015ae:	0424      	lsls	r4, r4, #16
 80015b0:	0c24      	lsrs	r4, r4, #16
 80015b2:	0027      	movs	r7, r4
 80015b4:	4357      	muls	r7, r2
 80015b6:	436a      	muls	r2, r5
 80015b8:	4690      	mov	r8, r2
 80015ba:	002a      	movs	r2, r5
 80015bc:	0c3b      	lsrs	r3, r7, #16
 80015be:	469a      	mov	sl, r3
 80015c0:	434a      	muls	r2, r1
 80015c2:	4361      	muls	r1, r4
 80015c4:	4441      	add	r1, r8
 80015c6:	4451      	add	r1, sl
 80015c8:	4483      	add	fp, r0
 80015ca:	4588      	cmp	r8, r1
 80015cc:	d903      	bls.n	80015d6 <__aeabi_dmul+0x252>
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	025b      	lsls	r3, r3, #9
 80015d2:	4698      	mov	r8, r3
 80015d4:	4442      	add	r2, r8
 80015d6:	043f      	lsls	r7, r7, #16
 80015d8:	0c0b      	lsrs	r3, r1, #16
 80015da:	0c3f      	lsrs	r7, r7, #16
 80015dc:	0409      	lsls	r1, r1, #16
 80015de:	19c9      	adds	r1, r1, r7
 80015e0:	0027      	movs	r7, r4
 80015e2:	4698      	mov	r8, r3
 80015e4:	464b      	mov	r3, r9
 80015e6:	4377      	muls	r7, r6
 80015e8:	435c      	muls	r4, r3
 80015ea:	436e      	muls	r6, r5
 80015ec:	435d      	muls	r5, r3
 80015ee:	0c3b      	lsrs	r3, r7, #16
 80015f0:	4699      	mov	r9, r3
 80015f2:	19a4      	adds	r4, r4, r6
 80015f4:	444c      	add	r4, r9
 80015f6:	4442      	add	r2, r8
 80015f8:	9503      	str	r5, [sp, #12]
 80015fa:	42a6      	cmp	r6, r4
 80015fc:	d904      	bls.n	8001608 <__aeabi_dmul+0x284>
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	025b      	lsls	r3, r3, #9
 8001602:	4698      	mov	r8, r3
 8001604:	4445      	add	r5, r8
 8001606:	9503      	str	r5, [sp, #12]
 8001608:	9b02      	ldr	r3, [sp, #8]
 800160a:	043f      	lsls	r7, r7, #16
 800160c:	445b      	add	r3, fp
 800160e:	001e      	movs	r6, r3
 8001610:	4283      	cmp	r3, r0
 8001612:	4180      	sbcs	r0, r0
 8001614:	0423      	lsls	r3, r4, #16
 8001616:	4698      	mov	r8, r3
 8001618:	9b05      	ldr	r3, [sp, #20]
 800161a:	0c3f      	lsrs	r7, r7, #16
 800161c:	4447      	add	r7, r8
 800161e:	4698      	mov	r8, r3
 8001620:	1876      	adds	r6, r6, r1
 8001622:	428e      	cmp	r6, r1
 8001624:	4189      	sbcs	r1, r1
 8001626:	4447      	add	r7, r8
 8001628:	4240      	negs	r0, r0
 800162a:	183d      	adds	r5, r7, r0
 800162c:	46a8      	mov	r8, r5
 800162e:	4693      	mov	fp, r2
 8001630:	4249      	negs	r1, r1
 8001632:	468a      	mov	sl, r1
 8001634:	44c3      	add	fp, r8
 8001636:	429f      	cmp	r7, r3
 8001638:	41bf      	sbcs	r7, r7
 800163a:	4580      	cmp	r8, r0
 800163c:	4180      	sbcs	r0, r0
 800163e:	9b03      	ldr	r3, [sp, #12]
 8001640:	44da      	add	sl, fp
 8001642:	4698      	mov	r8, r3
 8001644:	4653      	mov	r3, sl
 8001646:	4240      	negs	r0, r0
 8001648:	427f      	negs	r7, r7
 800164a:	4307      	orrs	r7, r0
 800164c:	0c24      	lsrs	r4, r4, #16
 800164e:	4593      	cmp	fp, r2
 8001650:	4192      	sbcs	r2, r2
 8001652:	458a      	cmp	sl, r1
 8001654:	4189      	sbcs	r1, r1
 8001656:	193f      	adds	r7, r7, r4
 8001658:	0ddc      	lsrs	r4, r3, #23
 800165a:	9b04      	ldr	r3, [sp, #16]
 800165c:	0275      	lsls	r5, r6, #9
 800165e:	431d      	orrs	r5, r3
 8001660:	1e68      	subs	r0, r5, #1
 8001662:	4185      	sbcs	r5, r0
 8001664:	4653      	mov	r3, sl
 8001666:	4252      	negs	r2, r2
 8001668:	4249      	negs	r1, r1
 800166a:	430a      	orrs	r2, r1
 800166c:	18bf      	adds	r7, r7, r2
 800166e:	4447      	add	r7, r8
 8001670:	0df6      	lsrs	r6, r6, #23
 8001672:	027f      	lsls	r7, r7, #9
 8001674:	4335      	orrs	r5, r6
 8001676:	025a      	lsls	r2, r3, #9
 8001678:	433c      	orrs	r4, r7
 800167a:	4315      	orrs	r5, r2
 800167c:	01fb      	lsls	r3, r7, #7
 800167e:	d400      	bmi.n	8001682 <__aeabi_dmul+0x2fe>
 8001680:	e0c1      	b.n	8001806 <__aeabi_dmul+0x482>
 8001682:	2101      	movs	r1, #1
 8001684:	086a      	lsrs	r2, r5, #1
 8001686:	400d      	ands	r5, r1
 8001688:	4315      	orrs	r5, r2
 800168a:	07e2      	lsls	r2, r4, #31
 800168c:	4315      	orrs	r5, r2
 800168e:	0864      	lsrs	r4, r4, #1
 8001690:	4926      	ldr	r1, [pc, #152]	; (800172c <__aeabi_dmul+0x3a8>)
 8001692:	4461      	add	r1, ip
 8001694:	2900      	cmp	r1, #0
 8001696:	dd56      	ble.n	8001746 <__aeabi_dmul+0x3c2>
 8001698:	076b      	lsls	r3, r5, #29
 800169a:	d009      	beq.n	80016b0 <__aeabi_dmul+0x32c>
 800169c:	220f      	movs	r2, #15
 800169e:	402a      	ands	r2, r5
 80016a0:	2a04      	cmp	r2, #4
 80016a2:	d005      	beq.n	80016b0 <__aeabi_dmul+0x32c>
 80016a4:	1d2a      	adds	r2, r5, #4
 80016a6:	42aa      	cmp	r2, r5
 80016a8:	41ad      	sbcs	r5, r5
 80016aa:	426d      	negs	r5, r5
 80016ac:	1964      	adds	r4, r4, r5
 80016ae:	0015      	movs	r5, r2
 80016b0:	01e3      	lsls	r3, r4, #7
 80016b2:	d504      	bpl.n	80016be <__aeabi_dmul+0x33a>
 80016b4:	2180      	movs	r1, #128	; 0x80
 80016b6:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <__aeabi_dmul+0x3ac>)
 80016b8:	00c9      	lsls	r1, r1, #3
 80016ba:	4014      	ands	r4, r2
 80016bc:	4461      	add	r1, ip
 80016be:	4a1d      	ldr	r2, [pc, #116]	; (8001734 <__aeabi_dmul+0x3b0>)
 80016c0:	4291      	cmp	r1, r2
 80016c2:	dd00      	ble.n	80016c6 <__aeabi_dmul+0x342>
 80016c4:	e724      	b.n	8001510 <__aeabi_dmul+0x18c>
 80016c6:	0762      	lsls	r2, r4, #29
 80016c8:	08ed      	lsrs	r5, r5, #3
 80016ca:	0264      	lsls	r4, r4, #9
 80016cc:	0549      	lsls	r1, r1, #21
 80016ce:	4315      	orrs	r5, r2
 80016d0:	0b24      	lsrs	r4, r4, #12
 80016d2:	0d4a      	lsrs	r2, r1, #21
 80016d4:	e6c6      	b.n	8001464 <__aeabi_dmul+0xe0>
 80016d6:	9701      	str	r7, [sp, #4]
 80016d8:	e6b8      	b.n	800144c <__aeabi_dmul+0xc8>
 80016da:	4a10      	ldr	r2, [pc, #64]	; (800171c <__aeabi_dmul+0x398>)
 80016dc:	2003      	movs	r0, #3
 80016de:	4694      	mov	ip, r2
 80016e0:	4463      	add	r3, ip
 80016e2:	464a      	mov	r2, r9
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2303      	movs	r3, #3
 80016e8:	431a      	orrs	r2, r3
 80016ea:	4691      	mov	r9, r2
 80016ec:	4652      	mov	r2, sl
 80016ee:	e68a      	b.n	8001406 <__aeabi_dmul+0x82>
 80016f0:	4649      	mov	r1, r9
 80016f2:	2301      	movs	r3, #1
 80016f4:	4319      	orrs	r1, r3
 80016f6:	4689      	mov	r9, r1
 80016f8:	2600      	movs	r6, #0
 80016fa:	2001      	movs	r0, #1
 80016fc:	e683      	b.n	8001406 <__aeabi_dmul+0x82>
 80016fe:	220c      	movs	r2, #12
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2303      	movs	r3, #3
 8001704:	0005      	movs	r5, r0
 8001706:	4691      	mov	r9, r2
 8001708:	469b      	mov	fp, r3
 800170a:	e65e      	b.n	80013ca <__aeabi_dmul+0x46>
 800170c:	2304      	movs	r3, #4
 800170e:	4699      	mov	r9, r3
 8001710:	2300      	movs	r3, #0
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	2400      	movs	r4, #0
 8001718:	469b      	mov	fp, r3
 800171a:	e656      	b.n	80013ca <__aeabi_dmul+0x46>
 800171c:	000007ff 	.word	0x000007ff
 8001720:	fffffc01 	.word	0xfffffc01
 8001724:	08006f30 	.word	0x08006f30
 8001728:	fffffc0d 	.word	0xfffffc0d
 800172c:	000003ff 	.word	0x000003ff
 8001730:	feffffff 	.word	0xfeffffff
 8001734:	000007fe 	.word	0x000007fe
 8001738:	2300      	movs	r3, #0
 800173a:	2480      	movs	r4, #128	; 0x80
 800173c:	2500      	movs	r5, #0
 800173e:	4a44      	ldr	r2, [pc, #272]	; (8001850 <__aeabi_dmul+0x4cc>)
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	0324      	lsls	r4, r4, #12
 8001744:	e68e      	b.n	8001464 <__aeabi_dmul+0xe0>
 8001746:	2001      	movs	r0, #1
 8001748:	1a40      	subs	r0, r0, r1
 800174a:	2838      	cmp	r0, #56	; 0x38
 800174c:	dd00      	ble.n	8001750 <__aeabi_dmul+0x3cc>
 800174e:	e686      	b.n	800145e <__aeabi_dmul+0xda>
 8001750:	281f      	cmp	r0, #31
 8001752:	dd5b      	ble.n	800180c <__aeabi_dmul+0x488>
 8001754:	221f      	movs	r2, #31
 8001756:	0023      	movs	r3, r4
 8001758:	4252      	negs	r2, r2
 800175a:	1a51      	subs	r1, r2, r1
 800175c:	40cb      	lsrs	r3, r1
 800175e:	0019      	movs	r1, r3
 8001760:	2820      	cmp	r0, #32
 8001762:	d003      	beq.n	800176c <__aeabi_dmul+0x3e8>
 8001764:	4a3b      	ldr	r2, [pc, #236]	; (8001854 <__aeabi_dmul+0x4d0>)
 8001766:	4462      	add	r2, ip
 8001768:	4094      	lsls	r4, r2
 800176a:	4325      	orrs	r5, r4
 800176c:	1e6a      	subs	r2, r5, #1
 800176e:	4195      	sbcs	r5, r2
 8001770:	002a      	movs	r2, r5
 8001772:	430a      	orrs	r2, r1
 8001774:	2107      	movs	r1, #7
 8001776:	000d      	movs	r5, r1
 8001778:	2400      	movs	r4, #0
 800177a:	4015      	ands	r5, r2
 800177c:	4211      	tst	r1, r2
 800177e:	d05b      	beq.n	8001838 <__aeabi_dmul+0x4b4>
 8001780:	210f      	movs	r1, #15
 8001782:	2400      	movs	r4, #0
 8001784:	4011      	ands	r1, r2
 8001786:	2904      	cmp	r1, #4
 8001788:	d053      	beq.n	8001832 <__aeabi_dmul+0x4ae>
 800178a:	1d11      	adds	r1, r2, #4
 800178c:	4291      	cmp	r1, r2
 800178e:	4192      	sbcs	r2, r2
 8001790:	4252      	negs	r2, r2
 8001792:	18a4      	adds	r4, r4, r2
 8001794:	000a      	movs	r2, r1
 8001796:	0223      	lsls	r3, r4, #8
 8001798:	d54b      	bpl.n	8001832 <__aeabi_dmul+0x4ae>
 800179a:	2201      	movs	r2, #1
 800179c:	2400      	movs	r4, #0
 800179e:	2500      	movs	r5, #0
 80017a0:	e660      	b.n	8001464 <__aeabi_dmul+0xe0>
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	031b      	lsls	r3, r3, #12
 80017a6:	421c      	tst	r4, r3
 80017a8:	d009      	beq.n	80017be <__aeabi_dmul+0x43a>
 80017aa:	421e      	tst	r6, r3
 80017ac:	d107      	bne.n	80017be <__aeabi_dmul+0x43a>
 80017ae:	4333      	orrs	r3, r6
 80017b0:	031c      	lsls	r4, r3, #12
 80017b2:	4643      	mov	r3, r8
 80017b4:	0015      	movs	r5, r2
 80017b6:	0b24      	lsrs	r4, r4, #12
 80017b8:	4a25      	ldr	r2, [pc, #148]	; (8001850 <__aeabi_dmul+0x4cc>)
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	e652      	b.n	8001464 <__aeabi_dmul+0xe0>
 80017be:	2280      	movs	r2, #128	; 0x80
 80017c0:	0312      	lsls	r2, r2, #12
 80017c2:	4314      	orrs	r4, r2
 80017c4:	0324      	lsls	r4, r4, #12
 80017c6:	4a22      	ldr	r2, [pc, #136]	; (8001850 <__aeabi_dmul+0x4cc>)
 80017c8:	0b24      	lsrs	r4, r4, #12
 80017ca:	9701      	str	r7, [sp, #4]
 80017cc:	e64a      	b.n	8001464 <__aeabi_dmul+0xe0>
 80017ce:	f000 fc81 	bl	80020d4 <__clzsi2>
 80017d2:	0003      	movs	r3, r0
 80017d4:	001a      	movs	r2, r3
 80017d6:	3215      	adds	r2, #21
 80017d8:	3020      	adds	r0, #32
 80017da:	2a1c      	cmp	r2, #28
 80017dc:	dc00      	bgt.n	80017e0 <__aeabi_dmul+0x45c>
 80017de:	e684      	b.n	80014ea <__aeabi_dmul+0x166>
 80017e0:	4656      	mov	r6, sl
 80017e2:	3b08      	subs	r3, #8
 80017e4:	2200      	movs	r2, #0
 80017e6:	409e      	lsls	r6, r3
 80017e8:	e689      	b.n	80014fe <__aeabi_dmul+0x17a>
 80017ea:	f000 fc73 	bl	80020d4 <__clzsi2>
 80017ee:	0001      	movs	r1, r0
 80017f0:	0002      	movs	r2, r0
 80017f2:	3115      	adds	r1, #21
 80017f4:	3220      	adds	r2, #32
 80017f6:	291c      	cmp	r1, #28
 80017f8:	dc00      	bgt.n	80017fc <__aeabi_dmul+0x478>
 80017fa:	e64e      	b.n	800149a <__aeabi_dmul+0x116>
 80017fc:	0034      	movs	r4, r6
 80017fe:	3808      	subs	r0, #8
 8001800:	2500      	movs	r5, #0
 8001802:	4084      	lsls	r4, r0
 8001804:	e653      	b.n	80014ae <__aeabi_dmul+0x12a>
 8001806:	9b00      	ldr	r3, [sp, #0]
 8001808:	469c      	mov	ip, r3
 800180a:	e741      	b.n	8001690 <__aeabi_dmul+0x30c>
 800180c:	4912      	ldr	r1, [pc, #72]	; (8001858 <__aeabi_dmul+0x4d4>)
 800180e:	0022      	movs	r2, r4
 8001810:	4461      	add	r1, ip
 8001812:	002e      	movs	r6, r5
 8001814:	408d      	lsls	r5, r1
 8001816:	408a      	lsls	r2, r1
 8001818:	40c6      	lsrs	r6, r0
 800181a:	1e69      	subs	r1, r5, #1
 800181c:	418d      	sbcs	r5, r1
 800181e:	4332      	orrs	r2, r6
 8001820:	432a      	orrs	r2, r5
 8001822:	40c4      	lsrs	r4, r0
 8001824:	0753      	lsls	r3, r2, #29
 8001826:	d0b6      	beq.n	8001796 <__aeabi_dmul+0x412>
 8001828:	210f      	movs	r1, #15
 800182a:	4011      	ands	r1, r2
 800182c:	2904      	cmp	r1, #4
 800182e:	d1ac      	bne.n	800178a <__aeabi_dmul+0x406>
 8001830:	e7b1      	b.n	8001796 <__aeabi_dmul+0x412>
 8001832:	0765      	lsls	r5, r4, #29
 8001834:	0264      	lsls	r4, r4, #9
 8001836:	0b24      	lsrs	r4, r4, #12
 8001838:	08d2      	lsrs	r2, r2, #3
 800183a:	4315      	orrs	r5, r2
 800183c:	2200      	movs	r2, #0
 800183e:	e611      	b.n	8001464 <__aeabi_dmul+0xe0>
 8001840:	2280      	movs	r2, #128	; 0x80
 8001842:	0312      	lsls	r2, r2, #12
 8001844:	4314      	orrs	r4, r2
 8001846:	0324      	lsls	r4, r4, #12
 8001848:	4a01      	ldr	r2, [pc, #4]	; (8001850 <__aeabi_dmul+0x4cc>)
 800184a:	0b24      	lsrs	r4, r4, #12
 800184c:	e60a      	b.n	8001464 <__aeabi_dmul+0xe0>
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	000007ff 	.word	0x000007ff
 8001854:	0000043e 	.word	0x0000043e
 8001858:	0000041e 	.word	0x0000041e

0800185c <__aeabi_dsub>:
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185e:	4657      	mov	r7, sl
 8001860:	464e      	mov	r6, r9
 8001862:	4645      	mov	r5, r8
 8001864:	46de      	mov	lr, fp
 8001866:	0004      	movs	r4, r0
 8001868:	b5e0      	push	{r5, r6, r7, lr}
 800186a:	001f      	movs	r7, r3
 800186c:	0010      	movs	r0, r2
 800186e:	030b      	lsls	r3, r1, #12
 8001870:	0f62      	lsrs	r2, r4, #29
 8001872:	004e      	lsls	r6, r1, #1
 8001874:	0fcd      	lsrs	r5, r1, #31
 8001876:	0a5b      	lsrs	r3, r3, #9
 8001878:	0339      	lsls	r1, r7, #12
 800187a:	4313      	orrs	r3, r2
 800187c:	0a49      	lsrs	r1, r1, #9
 800187e:	00e2      	lsls	r2, r4, #3
 8001880:	0f44      	lsrs	r4, r0, #29
 8001882:	4321      	orrs	r1, r4
 8001884:	4cc2      	ldr	r4, [pc, #776]	; (8001b90 <__aeabi_dsub+0x334>)
 8001886:	4691      	mov	r9, r2
 8001888:	4692      	mov	sl, r2
 800188a:	00c0      	lsls	r0, r0, #3
 800188c:	007a      	lsls	r2, r7, #1
 800188e:	4680      	mov	r8, r0
 8001890:	0d76      	lsrs	r6, r6, #21
 8001892:	0d52      	lsrs	r2, r2, #21
 8001894:	0fff      	lsrs	r7, r7, #31
 8001896:	42a2      	cmp	r2, r4
 8001898:	d100      	bne.n	800189c <__aeabi_dsub+0x40>
 800189a:	e0b4      	b.n	8001a06 <__aeabi_dsub+0x1aa>
 800189c:	2401      	movs	r4, #1
 800189e:	4067      	eors	r7, r4
 80018a0:	46bb      	mov	fp, r7
 80018a2:	42bd      	cmp	r5, r7
 80018a4:	d100      	bne.n	80018a8 <__aeabi_dsub+0x4c>
 80018a6:	e088      	b.n	80019ba <__aeabi_dsub+0x15e>
 80018a8:	1ab4      	subs	r4, r6, r2
 80018aa:	46a4      	mov	ip, r4
 80018ac:	2c00      	cmp	r4, #0
 80018ae:	dc00      	bgt.n	80018b2 <__aeabi_dsub+0x56>
 80018b0:	e0b2      	b.n	8001a18 <__aeabi_dsub+0x1bc>
 80018b2:	2a00      	cmp	r2, #0
 80018b4:	d100      	bne.n	80018b8 <__aeabi_dsub+0x5c>
 80018b6:	e0c5      	b.n	8001a44 <__aeabi_dsub+0x1e8>
 80018b8:	4ab5      	ldr	r2, [pc, #724]	; (8001b90 <__aeabi_dsub+0x334>)
 80018ba:	4296      	cmp	r6, r2
 80018bc:	d100      	bne.n	80018c0 <__aeabi_dsub+0x64>
 80018be:	e28b      	b.n	8001dd8 <__aeabi_dsub+0x57c>
 80018c0:	2280      	movs	r2, #128	; 0x80
 80018c2:	0412      	lsls	r2, r2, #16
 80018c4:	4311      	orrs	r1, r2
 80018c6:	4662      	mov	r2, ip
 80018c8:	2a38      	cmp	r2, #56	; 0x38
 80018ca:	dd00      	ble.n	80018ce <__aeabi_dsub+0x72>
 80018cc:	e1a1      	b.n	8001c12 <__aeabi_dsub+0x3b6>
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dsub+0x78>
 80018d2:	e216      	b.n	8001d02 <__aeabi_dsub+0x4a6>
 80018d4:	2720      	movs	r7, #32
 80018d6:	000c      	movs	r4, r1
 80018d8:	1abf      	subs	r7, r7, r2
 80018da:	40bc      	lsls	r4, r7
 80018dc:	0002      	movs	r2, r0
 80018de:	46a0      	mov	r8, r4
 80018e0:	4664      	mov	r4, ip
 80018e2:	40b8      	lsls	r0, r7
 80018e4:	40e2      	lsrs	r2, r4
 80018e6:	4644      	mov	r4, r8
 80018e8:	4314      	orrs	r4, r2
 80018ea:	0002      	movs	r2, r0
 80018ec:	1e50      	subs	r0, r2, #1
 80018ee:	4182      	sbcs	r2, r0
 80018f0:	4660      	mov	r0, ip
 80018f2:	40c1      	lsrs	r1, r0
 80018f4:	4322      	orrs	r2, r4
 80018f6:	1a5b      	subs	r3, r3, r1
 80018f8:	4649      	mov	r1, r9
 80018fa:	1a8c      	subs	r4, r1, r2
 80018fc:	45a1      	cmp	r9, r4
 80018fe:	4192      	sbcs	r2, r2
 8001900:	4252      	negs	r2, r2
 8001902:	1a9b      	subs	r3, r3, r2
 8001904:	4698      	mov	r8, r3
 8001906:	4643      	mov	r3, r8
 8001908:	021b      	lsls	r3, r3, #8
 800190a:	d400      	bmi.n	800190e <__aeabi_dsub+0xb2>
 800190c:	e117      	b.n	8001b3e <__aeabi_dsub+0x2e2>
 800190e:	4643      	mov	r3, r8
 8001910:	025b      	lsls	r3, r3, #9
 8001912:	0a5b      	lsrs	r3, r3, #9
 8001914:	4698      	mov	r8, r3
 8001916:	4643      	mov	r3, r8
 8001918:	2b00      	cmp	r3, #0
 800191a:	d100      	bne.n	800191e <__aeabi_dsub+0xc2>
 800191c:	e16c      	b.n	8001bf8 <__aeabi_dsub+0x39c>
 800191e:	4640      	mov	r0, r8
 8001920:	f000 fbd8 	bl	80020d4 <__clzsi2>
 8001924:	0002      	movs	r2, r0
 8001926:	3a08      	subs	r2, #8
 8001928:	2120      	movs	r1, #32
 800192a:	0020      	movs	r0, r4
 800192c:	4643      	mov	r3, r8
 800192e:	1a89      	subs	r1, r1, r2
 8001930:	4093      	lsls	r3, r2
 8001932:	40c8      	lsrs	r0, r1
 8001934:	4094      	lsls	r4, r2
 8001936:	4303      	orrs	r3, r0
 8001938:	4296      	cmp	r6, r2
 800193a:	dd00      	ble.n	800193e <__aeabi_dsub+0xe2>
 800193c:	e157      	b.n	8001bee <__aeabi_dsub+0x392>
 800193e:	1b96      	subs	r6, r2, r6
 8001940:	1c71      	adds	r1, r6, #1
 8001942:	291f      	cmp	r1, #31
 8001944:	dd00      	ble.n	8001948 <__aeabi_dsub+0xec>
 8001946:	e1cb      	b.n	8001ce0 <__aeabi_dsub+0x484>
 8001948:	2220      	movs	r2, #32
 800194a:	0018      	movs	r0, r3
 800194c:	0026      	movs	r6, r4
 800194e:	1a52      	subs	r2, r2, r1
 8001950:	4094      	lsls	r4, r2
 8001952:	4090      	lsls	r0, r2
 8001954:	40ce      	lsrs	r6, r1
 8001956:	40cb      	lsrs	r3, r1
 8001958:	1e62      	subs	r2, r4, #1
 800195a:	4194      	sbcs	r4, r2
 800195c:	4330      	orrs	r0, r6
 800195e:	4698      	mov	r8, r3
 8001960:	2600      	movs	r6, #0
 8001962:	4304      	orrs	r4, r0
 8001964:	0763      	lsls	r3, r4, #29
 8001966:	d009      	beq.n	800197c <__aeabi_dsub+0x120>
 8001968:	230f      	movs	r3, #15
 800196a:	4023      	ands	r3, r4
 800196c:	2b04      	cmp	r3, #4
 800196e:	d005      	beq.n	800197c <__aeabi_dsub+0x120>
 8001970:	1d23      	adds	r3, r4, #4
 8001972:	42a3      	cmp	r3, r4
 8001974:	41a4      	sbcs	r4, r4
 8001976:	4264      	negs	r4, r4
 8001978:	44a0      	add	r8, r4
 800197a:	001c      	movs	r4, r3
 800197c:	4643      	mov	r3, r8
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	d400      	bmi.n	8001984 <__aeabi_dsub+0x128>
 8001982:	e0df      	b.n	8001b44 <__aeabi_dsub+0x2e8>
 8001984:	4b82      	ldr	r3, [pc, #520]	; (8001b90 <__aeabi_dsub+0x334>)
 8001986:	3601      	adds	r6, #1
 8001988:	429e      	cmp	r6, r3
 800198a:	d100      	bne.n	800198e <__aeabi_dsub+0x132>
 800198c:	e0fb      	b.n	8001b86 <__aeabi_dsub+0x32a>
 800198e:	4642      	mov	r2, r8
 8001990:	4b80      	ldr	r3, [pc, #512]	; (8001b94 <__aeabi_dsub+0x338>)
 8001992:	08e4      	lsrs	r4, r4, #3
 8001994:	401a      	ands	r2, r3
 8001996:	0013      	movs	r3, r2
 8001998:	0571      	lsls	r1, r6, #21
 800199a:	0752      	lsls	r2, r2, #29
 800199c:	025b      	lsls	r3, r3, #9
 800199e:	4322      	orrs	r2, r4
 80019a0:	0b1b      	lsrs	r3, r3, #12
 80019a2:	0d49      	lsrs	r1, r1, #21
 80019a4:	0509      	lsls	r1, r1, #20
 80019a6:	07ed      	lsls	r5, r5, #31
 80019a8:	4319      	orrs	r1, r3
 80019aa:	4329      	orrs	r1, r5
 80019ac:	0010      	movs	r0, r2
 80019ae:	bcf0      	pop	{r4, r5, r6, r7}
 80019b0:	46bb      	mov	fp, r7
 80019b2:	46b2      	mov	sl, r6
 80019b4:	46a9      	mov	r9, r5
 80019b6:	46a0      	mov	r8, r4
 80019b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019ba:	1ab4      	subs	r4, r6, r2
 80019bc:	46a4      	mov	ip, r4
 80019be:	2c00      	cmp	r4, #0
 80019c0:	dd58      	ble.n	8001a74 <__aeabi_dsub+0x218>
 80019c2:	2a00      	cmp	r2, #0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x16c>
 80019c6:	e09e      	b.n	8001b06 <__aeabi_dsub+0x2aa>
 80019c8:	4a71      	ldr	r2, [pc, #452]	; (8001b90 <__aeabi_dsub+0x334>)
 80019ca:	4296      	cmp	r6, r2
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x174>
 80019ce:	e13b      	b.n	8001c48 <__aeabi_dsub+0x3ec>
 80019d0:	2280      	movs	r2, #128	; 0x80
 80019d2:	0412      	lsls	r2, r2, #16
 80019d4:	4311      	orrs	r1, r2
 80019d6:	4662      	mov	r2, ip
 80019d8:	2a38      	cmp	r2, #56	; 0x38
 80019da:	dd00      	ble.n	80019de <__aeabi_dsub+0x182>
 80019dc:	e0c1      	b.n	8001b62 <__aeabi_dsub+0x306>
 80019de:	2a1f      	cmp	r2, #31
 80019e0:	dc00      	bgt.n	80019e4 <__aeabi_dsub+0x188>
 80019e2:	e1bb      	b.n	8001d5c <__aeabi_dsub+0x500>
 80019e4:	000c      	movs	r4, r1
 80019e6:	3a20      	subs	r2, #32
 80019e8:	40d4      	lsrs	r4, r2
 80019ea:	0022      	movs	r2, r4
 80019ec:	4664      	mov	r4, ip
 80019ee:	2c20      	cmp	r4, #32
 80019f0:	d004      	beq.n	80019fc <__aeabi_dsub+0x1a0>
 80019f2:	2740      	movs	r7, #64	; 0x40
 80019f4:	1b3f      	subs	r7, r7, r4
 80019f6:	40b9      	lsls	r1, r7
 80019f8:	4308      	orrs	r0, r1
 80019fa:	4680      	mov	r8, r0
 80019fc:	4644      	mov	r4, r8
 80019fe:	1e61      	subs	r1, r4, #1
 8001a00:	418c      	sbcs	r4, r1
 8001a02:	4314      	orrs	r4, r2
 8001a04:	e0b1      	b.n	8001b6a <__aeabi_dsub+0x30e>
 8001a06:	000c      	movs	r4, r1
 8001a08:	4304      	orrs	r4, r0
 8001a0a:	d02a      	beq.n	8001a62 <__aeabi_dsub+0x206>
 8001a0c:	46bb      	mov	fp, r7
 8001a0e:	42bd      	cmp	r5, r7
 8001a10:	d02d      	beq.n	8001a6e <__aeabi_dsub+0x212>
 8001a12:	4c61      	ldr	r4, [pc, #388]	; (8001b98 <__aeabi_dsub+0x33c>)
 8001a14:	46a4      	mov	ip, r4
 8001a16:	44b4      	add	ip, r6
 8001a18:	4664      	mov	r4, ip
 8001a1a:	2c00      	cmp	r4, #0
 8001a1c:	d05c      	beq.n	8001ad8 <__aeabi_dsub+0x27c>
 8001a1e:	1b94      	subs	r4, r2, r6
 8001a20:	46a4      	mov	ip, r4
 8001a22:	2e00      	cmp	r6, #0
 8001a24:	d000      	beq.n	8001a28 <__aeabi_dsub+0x1cc>
 8001a26:	e115      	b.n	8001c54 <__aeabi_dsub+0x3f8>
 8001a28:	464d      	mov	r5, r9
 8001a2a:	431d      	orrs	r5, r3
 8001a2c:	d100      	bne.n	8001a30 <__aeabi_dsub+0x1d4>
 8001a2e:	e1c3      	b.n	8001db8 <__aeabi_dsub+0x55c>
 8001a30:	1e65      	subs	r5, r4, #1
 8001a32:	2c01      	cmp	r4, #1
 8001a34:	d100      	bne.n	8001a38 <__aeabi_dsub+0x1dc>
 8001a36:	e20c      	b.n	8001e52 <__aeabi_dsub+0x5f6>
 8001a38:	4e55      	ldr	r6, [pc, #340]	; (8001b90 <__aeabi_dsub+0x334>)
 8001a3a:	42b4      	cmp	r4, r6
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_dsub+0x1e4>
 8001a3e:	e1f8      	b.n	8001e32 <__aeabi_dsub+0x5d6>
 8001a40:	46ac      	mov	ip, r5
 8001a42:	e10e      	b.n	8001c62 <__aeabi_dsub+0x406>
 8001a44:	000a      	movs	r2, r1
 8001a46:	4302      	orrs	r2, r0
 8001a48:	d100      	bne.n	8001a4c <__aeabi_dsub+0x1f0>
 8001a4a:	e136      	b.n	8001cba <__aeabi_dsub+0x45e>
 8001a4c:	0022      	movs	r2, r4
 8001a4e:	3a01      	subs	r2, #1
 8001a50:	2c01      	cmp	r4, #1
 8001a52:	d100      	bne.n	8001a56 <__aeabi_dsub+0x1fa>
 8001a54:	e1c6      	b.n	8001de4 <__aeabi_dsub+0x588>
 8001a56:	4c4e      	ldr	r4, [pc, #312]	; (8001b90 <__aeabi_dsub+0x334>)
 8001a58:	45a4      	cmp	ip, r4
 8001a5a:	d100      	bne.n	8001a5e <__aeabi_dsub+0x202>
 8001a5c:	e0f4      	b.n	8001c48 <__aeabi_dsub+0x3ec>
 8001a5e:	4694      	mov	ip, r2
 8001a60:	e731      	b.n	80018c6 <__aeabi_dsub+0x6a>
 8001a62:	2401      	movs	r4, #1
 8001a64:	4067      	eors	r7, r4
 8001a66:	46bb      	mov	fp, r7
 8001a68:	42bd      	cmp	r5, r7
 8001a6a:	d000      	beq.n	8001a6e <__aeabi_dsub+0x212>
 8001a6c:	e71c      	b.n	80018a8 <__aeabi_dsub+0x4c>
 8001a6e:	4c4a      	ldr	r4, [pc, #296]	; (8001b98 <__aeabi_dsub+0x33c>)
 8001a70:	46a4      	mov	ip, r4
 8001a72:	44b4      	add	ip, r6
 8001a74:	4664      	mov	r4, ip
 8001a76:	2c00      	cmp	r4, #0
 8001a78:	d100      	bne.n	8001a7c <__aeabi_dsub+0x220>
 8001a7a:	e0cf      	b.n	8001c1c <__aeabi_dsub+0x3c0>
 8001a7c:	1b94      	subs	r4, r2, r6
 8001a7e:	46a4      	mov	ip, r4
 8001a80:	2e00      	cmp	r6, #0
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0x22a>
 8001a84:	e15c      	b.n	8001d40 <__aeabi_dsub+0x4e4>
 8001a86:	4e42      	ldr	r6, [pc, #264]	; (8001b90 <__aeabi_dsub+0x334>)
 8001a88:	42b2      	cmp	r2, r6
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dsub+0x232>
 8001a8c:	e1ec      	b.n	8001e68 <__aeabi_dsub+0x60c>
 8001a8e:	2680      	movs	r6, #128	; 0x80
 8001a90:	0436      	lsls	r6, r6, #16
 8001a92:	4333      	orrs	r3, r6
 8001a94:	4664      	mov	r4, ip
 8001a96:	2c38      	cmp	r4, #56	; 0x38
 8001a98:	dd00      	ble.n	8001a9c <__aeabi_dsub+0x240>
 8001a9a:	e1b3      	b.n	8001e04 <__aeabi_dsub+0x5a8>
 8001a9c:	2c1f      	cmp	r4, #31
 8001a9e:	dd00      	ble.n	8001aa2 <__aeabi_dsub+0x246>
 8001aa0:	e238      	b.n	8001f14 <__aeabi_dsub+0x6b8>
 8001aa2:	2620      	movs	r6, #32
 8001aa4:	1b36      	subs	r6, r6, r4
 8001aa6:	001c      	movs	r4, r3
 8001aa8:	40b4      	lsls	r4, r6
 8001aaa:	464f      	mov	r7, r9
 8001aac:	46a0      	mov	r8, r4
 8001aae:	4664      	mov	r4, ip
 8001ab0:	40e7      	lsrs	r7, r4
 8001ab2:	4644      	mov	r4, r8
 8001ab4:	433c      	orrs	r4, r7
 8001ab6:	464f      	mov	r7, r9
 8001ab8:	40b7      	lsls	r7, r6
 8001aba:	003e      	movs	r6, r7
 8001abc:	1e77      	subs	r7, r6, #1
 8001abe:	41be      	sbcs	r6, r7
 8001ac0:	4334      	orrs	r4, r6
 8001ac2:	4666      	mov	r6, ip
 8001ac4:	40f3      	lsrs	r3, r6
 8001ac6:	18c9      	adds	r1, r1, r3
 8001ac8:	1824      	adds	r4, r4, r0
 8001aca:	4284      	cmp	r4, r0
 8001acc:	419b      	sbcs	r3, r3
 8001ace:	425b      	negs	r3, r3
 8001ad0:	4698      	mov	r8, r3
 8001ad2:	0016      	movs	r6, r2
 8001ad4:	4488      	add	r8, r1
 8001ad6:	e04e      	b.n	8001b76 <__aeabi_dsub+0x31a>
 8001ad8:	4a30      	ldr	r2, [pc, #192]	; (8001b9c <__aeabi_dsub+0x340>)
 8001ada:	1c74      	adds	r4, r6, #1
 8001adc:	4214      	tst	r4, r2
 8001ade:	d000      	beq.n	8001ae2 <__aeabi_dsub+0x286>
 8001ae0:	e0d6      	b.n	8001c90 <__aeabi_dsub+0x434>
 8001ae2:	464a      	mov	r2, r9
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	2e00      	cmp	r6, #0
 8001ae8:	d000      	beq.n	8001aec <__aeabi_dsub+0x290>
 8001aea:	e15b      	b.n	8001da4 <__aeabi_dsub+0x548>
 8001aec:	2a00      	cmp	r2, #0
 8001aee:	d100      	bne.n	8001af2 <__aeabi_dsub+0x296>
 8001af0:	e1a5      	b.n	8001e3e <__aeabi_dsub+0x5e2>
 8001af2:	000a      	movs	r2, r1
 8001af4:	4302      	orrs	r2, r0
 8001af6:	d000      	beq.n	8001afa <__aeabi_dsub+0x29e>
 8001af8:	e1bb      	b.n	8001e72 <__aeabi_dsub+0x616>
 8001afa:	464a      	mov	r2, r9
 8001afc:	0759      	lsls	r1, r3, #29
 8001afe:	08d2      	lsrs	r2, r2, #3
 8001b00:	430a      	orrs	r2, r1
 8001b02:	08db      	lsrs	r3, r3, #3
 8001b04:	e027      	b.n	8001b56 <__aeabi_dsub+0x2fa>
 8001b06:	000a      	movs	r2, r1
 8001b08:	4302      	orrs	r2, r0
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_dsub+0x2b2>
 8001b0c:	e174      	b.n	8001df8 <__aeabi_dsub+0x59c>
 8001b0e:	0022      	movs	r2, r4
 8001b10:	3a01      	subs	r2, #1
 8001b12:	2c01      	cmp	r4, #1
 8001b14:	d005      	beq.n	8001b22 <__aeabi_dsub+0x2c6>
 8001b16:	4c1e      	ldr	r4, [pc, #120]	; (8001b90 <__aeabi_dsub+0x334>)
 8001b18:	45a4      	cmp	ip, r4
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dsub+0x2c2>
 8001b1c:	e094      	b.n	8001c48 <__aeabi_dsub+0x3ec>
 8001b1e:	4694      	mov	ip, r2
 8001b20:	e759      	b.n	80019d6 <__aeabi_dsub+0x17a>
 8001b22:	4448      	add	r0, r9
 8001b24:	4548      	cmp	r0, r9
 8001b26:	4192      	sbcs	r2, r2
 8001b28:	185b      	adds	r3, r3, r1
 8001b2a:	4698      	mov	r8, r3
 8001b2c:	0004      	movs	r4, r0
 8001b2e:	4252      	negs	r2, r2
 8001b30:	4490      	add	r8, r2
 8001b32:	4643      	mov	r3, r8
 8001b34:	2602      	movs	r6, #2
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	d500      	bpl.n	8001b3c <__aeabi_dsub+0x2e0>
 8001b3a:	e0c4      	b.n	8001cc6 <__aeabi_dsub+0x46a>
 8001b3c:	3e01      	subs	r6, #1
 8001b3e:	0763      	lsls	r3, r4, #29
 8001b40:	d000      	beq.n	8001b44 <__aeabi_dsub+0x2e8>
 8001b42:	e711      	b.n	8001968 <__aeabi_dsub+0x10c>
 8001b44:	4643      	mov	r3, r8
 8001b46:	46b4      	mov	ip, r6
 8001b48:	0759      	lsls	r1, r3, #29
 8001b4a:	08e2      	lsrs	r2, r4, #3
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	08db      	lsrs	r3, r3, #3
 8001b50:	490f      	ldr	r1, [pc, #60]	; (8001b90 <__aeabi_dsub+0x334>)
 8001b52:	458c      	cmp	ip, r1
 8001b54:	d040      	beq.n	8001bd8 <__aeabi_dsub+0x37c>
 8001b56:	4661      	mov	r1, ip
 8001b58:	031b      	lsls	r3, r3, #12
 8001b5a:	0549      	lsls	r1, r1, #21
 8001b5c:	0b1b      	lsrs	r3, r3, #12
 8001b5e:	0d49      	lsrs	r1, r1, #21
 8001b60:	e720      	b.n	80019a4 <__aeabi_dsub+0x148>
 8001b62:	4301      	orrs	r1, r0
 8001b64:	000c      	movs	r4, r1
 8001b66:	1e61      	subs	r1, r4, #1
 8001b68:	418c      	sbcs	r4, r1
 8001b6a:	444c      	add	r4, r9
 8001b6c:	454c      	cmp	r4, r9
 8001b6e:	4192      	sbcs	r2, r2
 8001b70:	4252      	negs	r2, r2
 8001b72:	4690      	mov	r8, r2
 8001b74:	4498      	add	r8, r3
 8001b76:	4643      	mov	r3, r8
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	d5e0      	bpl.n	8001b3e <__aeabi_dsub+0x2e2>
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <__aeabi_dsub+0x334>)
 8001b7e:	3601      	adds	r6, #1
 8001b80:	429e      	cmp	r6, r3
 8001b82:	d000      	beq.n	8001b86 <__aeabi_dsub+0x32a>
 8001b84:	e09f      	b.n	8001cc6 <__aeabi_dsub+0x46a>
 8001b86:	0031      	movs	r1, r6
 8001b88:	2300      	movs	r3, #0
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	e70a      	b.n	80019a4 <__aeabi_dsub+0x148>
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	000007ff 	.word	0x000007ff
 8001b94:	ff7fffff 	.word	0xff7fffff
 8001b98:	fffff801 	.word	0xfffff801
 8001b9c:	000007fe 	.word	0x000007fe
 8001ba0:	2a00      	cmp	r2, #0
 8001ba2:	d100      	bne.n	8001ba6 <__aeabi_dsub+0x34a>
 8001ba4:	e160      	b.n	8001e68 <__aeabi_dsub+0x60c>
 8001ba6:	000a      	movs	r2, r1
 8001ba8:	4302      	orrs	r2, r0
 8001baa:	d04d      	beq.n	8001c48 <__aeabi_dsub+0x3ec>
 8001bac:	464a      	mov	r2, r9
 8001bae:	075c      	lsls	r4, r3, #29
 8001bb0:	08d2      	lsrs	r2, r2, #3
 8001bb2:	4322      	orrs	r2, r4
 8001bb4:	2480      	movs	r4, #128	; 0x80
 8001bb6:	08db      	lsrs	r3, r3, #3
 8001bb8:	0324      	lsls	r4, r4, #12
 8001bba:	4223      	tst	r3, r4
 8001bbc:	d007      	beq.n	8001bce <__aeabi_dsub+0x372>
 8001bbe:	08ce      	lsrs	r6, r1, #3
 8001bc0:	4226      	tst	r6, r4
 8001bc2:	d104      	bne.n	8001bce <__aeabi_dsub+0x372>
 8001bc4:	465d      	mov	r5, fp
 8001bc6:	0033      	movs	r3, r6
 8001bc8:	08c2      	lsrs	r2, r0, #3
 8001bca:	0749      	lsls	r1, r1, #29
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	0f51      	lsrs	r1, r2, #29
 8001bd0:	00d2      	lsls	r2, r2, #3
 8001bd2:	08d2      	lsrs	r2, r2, #3
 8001bd4:	0749      	lsls	r1, r1, #29
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	0011      	movs	r1, r2
 8001bda:	4319      	orrs	r1, r3
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_dsub+0x384>
 8001bde:	e1c8      	b.n	8001f72 <__aeabi_dsub+0x716>
 8001be0:	2180      	movs	r1, #128	; 0x80
 8001be2:	0309      	lsls	r1, r1, #12
 8001be4:	430b      	orrs	r3, r1
 8001be6:	031b      	lsls	r3, r3, #12
 8001be8:	49d5      	ldr	r1, [pc, #852]	; (8001f40 <__aeabi_dsub+0x6e4>)
 8001bea:	0b1b      	lsrs	r3, r3, #12
 8001bec:	e6da      	b.n	80019a4 <__aeabi_dsub+0x148>
 8001bee:	49d5      	ldr	r1, [pc, #852]	; (8001f44 <__aeabi_dsub+0x6e8>)
 8001bf0:	1ab6      	subs	r6, r6, r2
 8001bf2:	400b      	ands	r3, r1
 8001bf4:	4698      	mov	r8, r3
 8001bf6:	e6b5      	b.n	8001964 <__aeabi_dsub+0x108>
 8001bf8:	0020      	movs	r0, r4
 8001bfa:	f000 fa6b 	bl	80020d4 <__clzsi2>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	3218      	adds	r2, #24
 8001c02:	2a1f      	cmp	r2, #31
 8001c04:	dc00      	bgt.n	8001c08 <__aeabi_dsub+0x3ac>
 8001c06:	e68f      	b.n	8001928 <__aeabi_dsub+0xcc>
 8001c08:	0023      	movs	r3, r4
 8001c0a:	3808      	subs	r0, #8
 8001c0c:	4083      	lsls	r3, r0
 8001c0e:	2400      	movs	r4, #0
 8001c10:	e692      	b.n	8001938 <__aeabi_dsub+0xdc>
 8001c12:	4308      	orrs	r0, r1
 8001c14:	0002      	movs	r2, r0
 8001c16:	1e50      	subs	r0, r2, #1
 8001c18:	4182      	sbcs	r2, r0
 8001c1a:	e66d      	b.n	80018f8 <__aeabi_dsub+0x9c>
 8001c1c:	4cca      	ldr	r4, [pc, #808]	; (8001f48 <__aeabi_dsub+0x6ec>)
 8001c1e:	1c72      	adds	r2, r6, #1
 8001c20:	4222      	tst	r2, r4
 8001c22:	d000      	beq.n	8001c26 <__aeabi_dsub+0x3ca>
 8001c24:	e0ad      	b.n	8001d82 <__aeabi_dsub+0x526>
 8001c26:	464a      	mov	r2, r9
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	2e00      	cmp	r6, #0
 8001c2c:	d1b8      	bne.n	8001ba0 <__aeabi_dsub+0x344>
 8001c2e:	2a00      	cmp	r2, #0
 8001c30:	d100      	bne.n	8001c34 <__aeabi_dsub+0x3d8>
 8001c32:	e158      	b.n	8001ee6 <__aeabi_dsub+0x68a>
 8001c34:	000a      	movs	r2, r1
 8001c36:	4302      	orrs	r2, r0
 8001c38:	d000      	beq.n	8001c3c <__aeabi_dsub+0x3e0>
 8001c3a:	e159      	b.n	8001ef0 <__aeabi_dsub+0x694>
 8001c3c:	464a      	mov	r2, r9
 8001c3e:	0759      	lsls	r1, r3, #29
 8001c40:	08d2      	lsrs	r2, r2, #3
 8001c42:	430a      	orrs	r2, r1
 8001c44:	08db      	lsrs	r3, r3, #3
 8001c46:	e786      	b.n	8001b56 <__aeabi_dsub+0x2fa>
 8001c48:	464a      	mov	r2, r9
 8001c4a:	0759      	lsls	r1, r3, #29
 8001c4c:	08d2      	lsrs	r2, r2, #3
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	08db      	lsrs	r3, r3, #3
 8001c52:	e7c1      	b.n	8001bd8 <__aeabi_dsub+0x37c>
 8001c54:	4dba      	ldr	r5, [pc, #744]	; (8001f40 <__aeabi_dsub+0x6e4>)
 8001c56:	42aa      	cmp	r2, r5
 8001c58:	d100      	bne.n	8001c5c <__aeabi_dsub+0x400>
 8001c5a:	e11e      	b.n	8001e9a <__aeabi_dsub+0x63e>
 8001c5c:	2580      	movs	r5, #128	; 0x80
 8001c5e:	042d      	lsls	r5, r5, #16
 8001c60:	432b      	orrs	r3, r5
 8001c62:	4664      	mov	r4, ip
 8001c64:	2c38      	cmp	r4, #56	; 0x38
 8001c66:	dc5d      	bgt.n	8001d24 <__aeabi_dsub+0x4c8>
 8001c68:	2c1f      	cmp	r4, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x412>
 8001c6c:	e0d0      	b.n	8001e10 <__aeabi_dsub+0x5b4>
 8001c6e:	2520      	movs	r5, #32
 8001c70:	4667      	mov	r7, ip
 8001c72:	1b2d      	subs	r5, r5, r4
 8001c74:	464e      	mov	r6, r9
 8001c76:	001c      	movs	r4, r3
 8001c78:	40fe      	lsrs	r6, r7
 8001c7a:	40ac      	lsls	r4, r5
 8001c7c:	4334      	orrs	r4, r6
 8001c7e:	464e      	mov	r6, r9
 8001c80:	40ae      	lsls	r6, r5
 8001c82:	0035      	movs	r5, r6
 8001c84:	40fb      	lsrs	r3, r7
 8001c86:	1e6e      	subs	r6, r5, #1
 8001c88:	41b5      	sbcs	r5, r6
 8001c8a:	1ac9      	subs	r1, r1, r3
 8001c8c:	432c      	orrs	r4, r5
 8001c8e:	e04e      	b.n	8001d2e <__aeabi_dsub+0x4d2>
 8001c90:	464a      	mov	r2, r9
 8001c92:	1a14      	subs	r4, r2, r0
 8001c94:	45a1      	cmp	r9, r4
 8001c96:	4192      	sbcs	r2, r2
 8001c98:	4252      	negs	r2, r2
 8001c9a:	4690      	mov	r8, r2
 8001c9c:	1a5f      	subs	r7, r3, r1
 8001c9e:	003a      	movs	r2, r7
 8001ca0:	4647      	mov	r7, r8
 8001ca2:	1bd2      	subs	r2, r2, r7
 8001ca4:	4690      	mov	r8, r2
 8001ca6:	0212      	lsls	r2, r2, #8
 8001ca8:	d500      	bpl.n	8001cac <__aeabi_dsub+0x450>
 8001caa:	e08b      	b.n	8001dc4 <__aeabi_dsub+0x568>
 8001cac:	4642      	mov	r2, r8
 8001cae:	4322      	orrs	r2, r4
 8001cb0:	d000      	beq.n	8001cb4 <__aeabi_dsub+0x458>
 8001cb2:	e630      	b.n	8001916 <__aeabi_dsub+0xba>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	2500      	movs	r5, #0
 8001cb8:	e74d      	b.n	8001b56 <__aeabi_dsub+0x2fa>
 8001cba:	464a      	mov	r2, r9
 8001cbc:	0759      	lsls	r1, r3, #29
 8001cbe:	08d2      	lsrs	r2, r2, #3
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	08db      	lsrs	r3, r3, #3
 8001cc4:	e744      	b.n	8001b50 <__aeabi_dsub+0x2f4>
 8001cc6:	4642      	mov	r2, r8
 8001cc8:	4b9e      	ldr	r3, [pc, #632]	; (8001f44 <__aeabi_dsub+0x6e8>)
 8001cca:	0861      	lsrs	r1, r4, #1
 8001ccc:	401a      	ands	r2, r3
 8001cce:	0013      	movs	r3, r2
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	4014      	ands	r4, r2
 8001cd4:	430c      	orrs	r4, r1
 8001cd6:	07da      	lsls	r2, r3, #31
 8001cd8:	085b      	lsrs	r3, r3, #1
 8001cda:	4698      	mov	r8, r3
 8001cdc:	4314      	orrs	r4, r2
 8001cde:	e641      	b.n	8001964 <__aeabi_dsub+0x108>
 8001ce0:	001a      	movs	r2, r3
 8001ce2:	3e1f      	subs	r6, #31
 8001ce4:	40f2      	lsrs	r2, r6
 8001ce6:	0016      	movs	r6, r2
 8001ce8:	2920      	cmp	r1, #32
 8001cea:	d003      	beq.n	8001cf4 <__aeabi_dsub+0x498>
 8001cec:	2240      	movs	r2, #64	; 0x40
 8001cee:	1a51      	subs	r1, r2, r1
 8001cf0:	408b      	lsls	r3, r1
 8001cf2:	431c      	orrs	r4, r3
 8001cf4:	1e62      	subs	r2, r4, #1
 8001cf6:	4194      	sbcs	r4, r2
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	4334      	orrs	r4, r6
 8001cfc:	4698      	mov	r8, r3
 8001cfe:	2600      	movs	r6, #0
 8001d00:	e71d      	b.n	8001b3e <__aeabi_dsub+0x2e2>
 8001d02:	000c      	movs	r4, r1
 8001d04:	3a20      	subs	r2, #32
 8001d06:	40d4      	lsrs	r4, r2
 8001d08:	0022      	movs	r2, r4
 8001d0a:	4664      	mov	r4, ip
 8001d0c:	2c20      	cmp	r4, #32
 8001d0e:	d004      	beq.n	8001d1a <__aeabi_dsub+0x4be>
 8001d10:	2740      	movs	r7, #64	; 0x40
 8001d12:	1b3f      	subs	r7, r7, r4
 8001d14:	40b9      	lsls	r1, r7
 8001d16:	4308      	orrs	r0, r1
 8001d18:	4680      	mov	r8, r0
 8001d1a:	4644      	mov	r4, r8
 8001d1c:	1e61      	subs	r1, r4, #1
 8001d1e:	418c      	sbcs	r4, r1
 8001d20:	4322      	orrs	r2, r4
 8001d22:	e5e9      	b.n	80018f8 <__aeabi_dsub+0x9c>
 8001d24:	464c      	mov	r4, r9
 8001d26:	4323      	orrs	r3, r4
 8001d28:	001c      	movs	r4, r3
 8001d2a:	1e63      	subs	r3, r4, #1
 8001d2c:	419c      	sbcs	r4, r3
 8001d2e:	1b04      	subs	r4, r0, r4
 8001d30:	42a0      	cmp	r0, r4
 8001d32:	419b      	sbcs	r3, r3
 8001d34:	425b      	negs	r3, r3
 8001d36:	1acb      	subs	r3, r1, r3
 8001d38:	4698      	mov	r8, r3
 8001d3a:	465d      	mov	r5, fp
 8001d3c:	0016      	movs	r6, r2
 8001d3e:	e5e2      	b.n	8001906 <__aeabi_dsub+0xaa>
 8001d40:	464e      	mov	r6, r9
 8001d42:	431e      	orrs	r6, r3
 8001d44:	d100      	bne.n	8001d48 <__aeabi_dsub+0x4ec>
 8001d46:	e0ae      	b.n	8001ea6 <__aeabi_dsub+0x64a>
 8001d48:	1e66      	subs	r6, r4, #1
 8001d4a:	2c01      	cmp	r4, #1
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dsub+0x4f4>
 8001d4e:	e0fd      	b.n	8001f4c <__aeabi_dsub+0x6f0>
 8001d50:	4f7b      	ldr	r7, [pc, #492]	; (8001f40 <__aeabi_dsub+0x6e4>)
 8001d52:	42bc      	cmp	r4, r7
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x4fc>
 8001d56:	e107      	b.n	8001f68 <__aeabi_dsub+0x70c>
 8001d58:	46b4      	mov	ip, r6
 8001d5a:	e69b      	b.n	8001a94 <__aeabi_dsub+0x238>
 8001d5c:	4664      	mov	r4, ip
 8001d5e:	2220      	movs	r2, #32
 8001d60:	1b12      	subs	r2, r2, r4
 8001d62:	000c      	movs	r4, r1
 8001d64:	4094      	lsls	r4, r2
 8001d66:	0007      	movs	r7, r0
 8001d68:	4090      	lsls	r0, r2
 8001d6a:	46a0      	mov	r8, r4
 8001d6c:	4664      	mov	r4, ip
 8001d6e:	1e42      	subs	r2, r0, #1
 8001d70:	4190      	sbcs	r0, r2
 8001d72:	4662      	mov	r2, ip
 8001d74:	40e7      	lsrs	r7, r4
 8001d76:	4644      	mov	r4, r8
 8001d78:	40d1      	lsrs	r1, r2
 8001d7a:	433c      	orrs	r4, r7
 8001d7c:	4304      	orrs	r4, r0
 8001d7e:	185b      	adds	r3, r3, r1
 8001d80:	e6f3      	b.n	8001b6a <__aeabi_dsub+0x30e>
 8001d82:	4c6f      	ldr	r4, [pc, #444]	; (8001f40 <__aeabi_dsub+0x6e4>)
 8001d84:	42a2      	cmp	r2, r4
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dsub+0x52e>
 8001d88:	e0d5      	b.n	8001f36 <__aeabi_dsub+0x6da>
 8001d8a:	4448      	add	r0, r9
 8001d8c:	185b      	adds	r3, r3, r1
 8001d8e:	4548      	cmp	r0, r9
 8001d90:	4189      	sbcs	r1, r1
 8001d92:	4249      	negs	r1, r1
 8001d94:	185b      	adds	r3, r3, r1
 8001d96:	07dc      	lsls	r4, r3, #31
 8001d98:	0840      	lsrs	r0, r0, #1
 8001d9a:	085b      	lsrs	r3, r3, #1
 8001d9c:	4698      	mov	r8, r3
 8001d9e:	0016      	movs	r6, r2
 8001da0:	4304      	orrs	r4, r0
 8001da2:	e6cc      	b.n	8001b3e <__aeabi_dsub+0x2e2>
 8001da4:	2a00      	cmp	r2, #0
 8001da6:	d000      	beq.n	8001daa <__aeabi_dsub+0x54e>
 8001da8:	e082      	b.n	8001eb0 <__aeabi_dsub+0x654>
 8001daa:	000a      	movs	r2, r1
 8001dac:	4302      	orrs	r2, r0
 8001dae:	d140      	bne.n	8001e32 <__aeabi_dsub+0x5d6>
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	2500      	movs	r5, #0
 8001db4:	031b      	lsls	r3, r3, #12
 8001db6:	e713      	b.n	8001be0 <__aeabi_dsub+0x384>
 8001db8:	074b      	lsls	r3, r1, #29
 8001dba:	08c2      	lsrs	r2, r0, #3
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	465d      	mov	r5, fp
 8001dc0:	08cb      	lsrs	r3, r1, #3
 8001dc2:	e6c5      	b.n	8001b50 <__aeabi_dsub+0x2f4>
 8001dc4:	464a      	mov	r2, r9
 8001dc6:	1a84      	subs	r4, r0, r2
 8001dc8:	42a0      	cmp	r0, r4
 8001dca:	4192      	sbcs	r2, r2
 8001dcc:	1acb      	subs	r3, r1, r3
 8001dce:	4252      	negs	r2, r2
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	4698      	mov	r8, r3
 8001dd4:	465d      	mov	r5, fp
 8001dd6:	e59e      	b.n	8001916 <__aeabi_dsub+0xba>
 8001dd8:	464a      	mov	r2, r9
 8001dda:	0759      	lsls	r1, r3, #29
 8001ddc:	08d2      	lsrs	r2, r2, #3
 8001dde:	430a      	orrs	r2, r1
 8001de0:	08db      	lsrs	r3, r3, #3
 8001de2:	e6f9      	b.n	8001bd8 <__aeabi_dsub+0x37c>
 8001de4:	464a      	mov	r2, r9
 8001de6:	1a14      	subs	r4, r2, r0
 8001de8:	45a1      	cmp	r9, r4
 8001dea:	4192      	sbcs	r2, r2
 8001dec:	1a5b      	subs	r3, r3, r1
 8001dee:	4252      	negs	r2, r2
 8001df0:	1a9b      	subs	r3, r3, r2
 8001df2:	4698      	mov	r8, r3
 8001df4:	2601      	movs	r6, #1
 8001df6:	e586      	b.n	8001906 <__aeabi_dsub+0xaa>
 8001df8:	464a      	mov	r2, r9
 8001dfa:	0759      	lsls	r1, r3, #29
 8001dfc:	08d2      	lsrs	r2, r2, #3
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	08db      	lsrs	r3, r3, #3
 8001e02:	e6a5      	b.n	8001b50 <__aeabi_dsub+0x2f4>
 8001e04:	464c      	mov	r4, r9
 8001e06:	4323      	orrs	r3, r4
 8001e08:	001c      	movs	r4, r3
 8001e0a:	1e63      	subs	r3, r4, #1
 8001e0c:	419c      	sbcs	r4, r3
 8001e0e:	e65b      	b.n	8001ac8 <__aeabi_dsub+0x26c>
 8001e10:	4665      	mov	r5, ip
 8001e12:	001e      	movs	r6, r3
 8001e14:	3d20      	subs	r5, #32
 8001e16:	40ee      	lsrs	r6, r5
 8001e18:	2c20      	cmp	r4, #32
 8001e1a:	d005      	beq.n	8001e28 <__aeabi_dsub+0x5cc>
 8001e1c:	2540      	movs	r5, #64	; 0x40
 8001e1e:	1b2d      	subs	r5, r5, r4
 8001e20:	40ab      	lsls	r3, r5
 8001e22:	464c      	mov	r4, r9
 8001e24:	431c      	orrs	r4, r3
 8001e26:	46a2      	mov	sl, r4
 8001e28:	4654      	mov	r4, sl
 8001e2a:	1e63      	subs	r3, r4, #1
 8001e2c:	419c      	sbcs	r4, r3
 8001e2e:	4334      	orrs	r4, r6
 8001e30:	e77d      	b.n	8001d2e <__aeabi_dsub+0x4d2>
 8001e32:	074b      	lsls	r3, r1, #29
 8001e34:	08c2      	lsrs	r2, r0, #3
 8001e36:	431a      	orrs	r2, r3
 8001e38:	465d      	mov	r5, fp
 8001e3a:	08cb      	lsrs	r3, r1, #3
 8001e3c:	e6cc      	b.n	8001bd8 <__aeabi_dsub+0x37c>
 8001e3e:	000a      	movs	r2, r1
 8001e40:	4302      	orrs	r2, r0
 8001e42:	d100      	bne.n	8001e46 <__aeabi_dsub+0x5ea>
 8001e44:	e736      	b.n	8001cb4 <__aeabi_dsub+0x458>
 8001e46:	074b      	lsls	r3, r1, #29
 8001e48:	08c2      	lsrs	r2, r0, #3
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	465d      	mov	r5, fp
 8001e4e:	08cb      	lsrs	r3, r1, #3
 8001e50:	e681      	b.n	8001b56 <__aeabi_dsub+0x2fa>
 8001e52:	464a      	mov	r2, r9
 8001e54:	1a84      	subs	r4, r0, r2
 8001e56:	42a0      	cmp	r0, r4
 8001e58:	4192      	sbcs	r2, r2
 8001e5a:	1acb      	subs	r3, r1, r3
 8001e5c:	4252      	negs	r2, r2
 8001e5e:	1a9b      	subs	r3, r3, r2
 8001e60:	4698      	mov	r8, r3
 8001e62:	465d      	mov	r5, fp
 8001e64:	2601      	movs	r6, #1
 8001e66:	e54e      	b.n	8001906 <__aeabi_dsub+0xaa>
 8001e68:	074b      	lsls	r3, r1, #29
 8001e6a:	08c2      	lsrs	r2, r0, #3
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	08cb      	lsrs	r3, r1, #3
 8001e70:	e6b2      	b.n	8001bd8 <__aeabi_dsub+0x37c>
 8001e72:	464a      	mov	r2, r9
 8001e74:	1a14      	subs	r4, r2, r0
 8001e76:	45a1      	cmp	r9, r4
 8001e78:	4192      	sbcs	r2, r2
 8001e7a:	1a5f      	subs	r7, r3, r1
 8001e7c:	4252      	negs	r2, r2
 8001e7e:	1aba      	subs	r2, r7, r2
 8001e80:	4690      	mov	r8, r2
 8001e82:	0212      	lsls	r2, r2, #8
 8001e84:	d56b      	bpl.n	8001f5e <__aeabi_dsub+0x702>
 8001e86:	464a      	mov	r2, r9
 8001e88:	1a84      	subs	r4, r0, r2
 8001e8a:	42a0      	cmp	r0, r4
 8001e8c:	4192      	sbcs	r2, r2
 8001e8e:	1acb      	subs	r3, r1, r3
 8001e90:	4252      	negs	r2, r2
 8001e92:	1a9b      	subs	r3, r3, r2
 8001e94:	4698      	mov	r8, r3
 8001e96:	465d      	mov	r5, fp
 8001e98:	e564      	b.n	8001964 <__aeabi_dsub+0x108>
 8001e9a:	074b      	lsls	r3, r1, #29
 8001e9c:	08c2      	lsrs	r2, r0, #3
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	465d      	mov	r5, fp
 8001ea2:	08cb      	lsrs	r3, r1, #3
 8001ea4:	e698      	b.n	8001bd8 <__aeabi_dsub+0x37c>
 8001ea6:	074b      	lsls	r3, r1, #29
 8001ea8:	08c2      	lsrs	r2, r0, #3
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	08cb      	lsrs	r3, r1, #3
 8001eae:	e64f      	b.n	8001b50 <__aeabi_dsub+0x2f4>
 8001eb0:	000a      	movs	r2, r1
 8001eb2:	4302      	orrs	r2, r0
 8001eb4:	d090      	beq.n	8001dd8 <__aeabi_dsub+0x57c>
 8001eb6:	464a      	mov	r2, r9
 8001eb8:	075c      	lsls	r4, r3, #29
 8001eba:	08d2      	lsrs	r2, r2, #3
 8001ebc:	4314      	orrs	r4, r2
 8001ebe:	2280      	movs	r2, #128	; 0x80
 8001ec0:	08db      	lsrs	r3, r3, #3
 8001ec2:	0312      	lsls	r2, r2, #12
 8001ec4:	4213      	tst	r3, r2
 8001ec6:	d008      	beq.n	8001eda <__aeabi_dsub+0x67e>
 8001ec8:	08ce      	lsrs	r6, r1, #3
 8001eca:	4216      	tst	r6, r2
 8001ecc:	d105      	bne.n	8001eda <__aeabi_dsub+0x67e>
 8001ece:	08c0      	lsrs	r0, r0, #3
 8001ed0:	0749      	lsls	r1, r1, #29
 8001ed2:	4308      	orrs	r0, r1
 8001ed4:	0004      	movs	r4, r0
 8001ed6:	465d      	mov	r5, fp
 8001ed8:	0033      	movs	r3, r6
 8001eda:	0f61      	lsrs	r1, r4, #29
 8001edc:	00e2      	lsls	r2, r4, #3
 8001ede:	0749      	lsls	r1, r1, #29
 8001ee0:	08d2      	lsrs	r2, r2, #3
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	e678      	b.n	8001bd8 <__aeabi_dsub+0x37c>
 8001ee6:	074b      	lsls	r3, r1, #29
 8001ee8:	08c2      	lsrs	r2, r0, #3
 8001eea:	431a      	orrs	r2, r3
 8001eec:	08cb      	lsrs	r3, r1, #3
 8001eee:	e632      	b.n	8001b56 <__aeabi_dsub+0x2fa>
 8001ef0:	4448      	add	r0, r9
 8001ef2:	185b      	adds	r3, r3, r1
 8001ef4:	4548      	cmp	r0, r9
 8001ef6:	4192      	sbcs	r2, r2
 8001ef8:	4698      	mov	r8, r3
 8001efa:	4252      	negs	r2, r2
 8001efc:	4490      	add	r8, r2
 8001efe:	4643      	mov	r3, r8
 8001f00:	0004      	movs	r4, r0
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	d400      	bmi.n	8001f08 <__aeabi_dsub+0x6ac>
 8001f06:	e61a      	b.n	8001b3e <__aeabi_dsub+0x2e2>
 8001f08:	4642      	mov	r2, r8
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <__aeabi_dsub+0x6e8>)
 8001f0c:	2601      	movs	r6, #1
 8001f0e:	401a      	ands	r2, r3
 8001f10:	4690      	mov	r8, r2
 8001f12:	e614      	b.n	8001b3e <__aeabi_dsub+0x2e2>
 8001f14:	4666      	mov	r6, ip
 8001f16:	001f      	movs	r7, r3
 8001f18:	3e20      	subs	r6, #32
 8001f1a:	40f7      	lsrs	r7, r6
 8001f1c:	2c20      	cmp	r4, #32
 8001f1e:	d005      	beq.n	8001f2c <__aeabi_dsub+0x6d0>
 8001f20:	2640      	movs	r6, #64	; 0x40
 8001f22:	1b36      	subs	r6, r6, r4
 8001f24:	40b3      	lsls	r3, r6
 8001f26:	464c      	mov	r4, r9
 8001f28:	431c      	orrs	r4, r3
 8001f2a:	46a2      	mov	sl, r4
 8001f2c:	4654      	mov	r4, sl
 8001f2e:	1e63      	subs	r3, r4, #1
 8001f30:	419c      	sbcs	r4, r3
 8001f32:	433c      	orrs	r4, r7
 8001f34:	e5c8      	b.n	8001ac8 <__aeabi_dsub+0x26c>
 8001f36:	0011      	movs	r1, r2
 8001f38:	2300      	movs	r3, #0
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	e532      	b.n	80019a4 <__aeabi_dsub+0x148>
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	000007ff 	.word	0x000007ff
 8001f44:	ff7fffff 	.word	0xff7fffff
 8001f48:	000007fe 	.word	0x000007fe
 8001f4c:	464a      	mov	r2, r9
 8001f4e:	1814      	adds	r4, r2, r0
 8001f50:	4284      	cmp	r4, r0
 8001f52:	4192      	sbcs	r2, r2
 8001f54:	185b      	adds	r3, r3, r1
 8001f56:	4698      	mov	r8, r3
 8001f58:	4252      	negs	r2, r2
 8001f5a:	4490      	add	r8, r2
 8001f5c:	e5e9      	b.n	8001b32 <__aeabi_dsub+0x2d6>
 8001f5e:	4642      	mov	r2, r8
 8001f60:	4322      	orrs	r2, r4
 8001f62:	d100      	bne.n	8001f66 <__aeabi_dsub+0x70a>
 8001f64:	e6a6      	b.n	8001cb4 <__aeabi_dsub+0x458>
 8001f66:	e5ea      	b.n	8001b3e <__aeabi_dsub+0x2e2>
 8001f68:	074b      	lsls	r3, r1, #29
 8001f6a:	08c2      	lsrs	r2, r0, #3
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	08cb      	lsrs	r3, r1, #3
 8001f70:	e632      	b.n	8001bd8 <__aeabi_dsub+0x37c>
 8001f72:	2200      	movs	r2, #0
 8001f74:	4901      	ldr	r1, [pc, #4]	; (8001f7c <__aeabi_dsub+0x720>)
 8001f76:	0013      	movs	r3, r2
 8001f78:	e514      	b.n	80019a4 <__aeabi_dsub+0x148>
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	000007ff 	.word	0x000007ff

08001f80 <__aeabi_dcmpun>:
 8001f80:	b570      	push	{r4, r5, r6, lr}
 8001f82:	0005      	movs	r5, r0
 8001f84:	480c      	ldr	r0, [pc, #48]	; (8001fb8 <__aeabi_dcmpun+0x38>)
 8001f86:	030c      	lsls	r4, r1, #12
 8001f88:	0016      	movs	r6, r2
 8001f8a:	0049      	lsls	r1, r1, #1
 8001f8c:	031a      	lsls	r2, r3, #12
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	0b24      	lsrs	r4, r4, #12
 8001f92:	0d49      	lsrs	r1, r1, #21
 8001f94:	0b12      	lsrs	r2, r2, #12
 8001f96:	0d5b      	lsrs	r3, r3, #21
 8001f98:	4281      	cmp	r1, r0
 8001f9a:	d008      	beq.n	8001fae <__aeabi_dcmpun+0x2e>
 8001f9c:	4906      	ldr	r1, [pc, #24]	; (8001fb8 <__aeabi_dcmpun+0x38>)
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	428b      	cmp	r3, r1
 8001fa2:	d103      	bne.n	8001fac <__aeabi_dcmpun+0x2c>
 8001fa4:	4332      	orrs	r2, r6
 8001fa6:	0010      	movs	r0, r2
 8001fa8:	1e42      	subs	r2, r0, #1
 8001faa:	4190      	sbcs	r0, r2
 8001fac:	bd70      	pop	{r4, r5, r6, pc}
 8001fae:	2001      	movs	r0, #1
 8001fb0:	432c      	orrs	r4, r5
 8001fb2:	d1fb      	bne.n	8001fac <__aeabi_dcmpun+0x2c>
 8001fb4:	e7f2      	b.n	8001f9c <__aeabi_dcmpun+0x1c>
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	000007ff 	.word	0x000007ff

08001fbc <__aeabi_d2iz>:
 8001fbc:	000a      	movs	r2, r1
 8001fbe:	b530      	push	{r4, r5, lr}
 8001fc0:	4c13      	ldr	r4, [pc, #76]	; (8002010 <__aeabi_d2iz+0x54>)
 8001fc2:	0053      	lsls	r3, r2, #1
 8001fc4:	0309      	lsls	r1, r1, #12
 8001fc6:	0005      	movs	r5, r0
 8001fc8:	0b09      	lsrs	r1, r1, #12
 8001fca:	2000      	movs	r0, #0
 8001fcc:	0d5b      	lsrs	r3, r3, #21
 8001fce:	0fd2      	lsrs	r2, r2, #31
 8001fd0:	42a3      	cmp	r3, r4
 8001fd2:	dd04      	ble.n	8001fde <__aeabi_d2iz+0x22>
 8001fd4:	480f      	ldr	r0, [pc, #60]	; (8002014 <__aeabi_d2iz+0x58>)
 8001fd6:	4283      	cmp	r3, r0
 8001fd8:	dd02      	ble.n	8001fe0 <__aeabi_d2iz+0x24>
 8001fda:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <__aeabi_d2iz+0x5c>)
 8001fdc:	18d0      	adds	r0, r2, r3
 8001fde:	bd30      	pop	{r4, r5, pc}
 8001fe0:	2080      	movs	r0, #128	; 0x80
 8001fe2:	0340      	lsls	r0, r0, #13
 8001fe4:	4301      	orrs	r1, r0
 8001fe6:	480d      	ldr	r0, [pc, #52]	; (800201c <__aeabi_d2iz+0x60>)
 8001fe8:	1ac0      	subs	r0, r0, r3
 8001fea:	281f      	cmp	r0, #31
 8001fec:	dd08      	ble.n	8002000 <__aeabi_d2iz+0x44>
 8001fee:	480c      	ldr	r0, [pc, #48]	; (8002020 <__aeabi_d2iz+0x64>)
 8001ff0:	1ac3      	subs	r3, r0, r3
 8001ff2:	40d9      	lsrs	r1, r3
 8001ff4:	000b      	movs	r3, r1
 8001ff6:	4258      	negs	r0, r3
 8001ff8:	2a00      	cmp	r2, #0
 8001ffa:	d1f0      	bne.n	8001fde <__aeabi_d2iz+0x22>
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	e7ee      	b.n	8001fde <__aeabi_d2iz+0x22>
 8002000:	4c08      	ldr	r4, [pc, #32]	; (8002024 <__aeabi_d2iz+0x68>)
 8002002:	40c5      	lsrs	r5, r0
 8002004:	46a4      	mov	ip, r4
 8002006:	4463      	add	r3, ip
 8002008:	4099      	lsls	r1, r3
 800200a:	000b      	movs	r3, r1
 800200c:	432b      	orrs	r3, r5
 800200e:	e7f2      	b.n	8001ff6 <__aeabi_d2iz+0x3a>
 8002010:	000003fe 	.word	0x000003fe
 8002014:	0000041d 	.word	0x0000041d
 8002018:	7fffffff 	.word	0x7fffffff
 800201c:	00000433 	.word	0x00000433
 8002020:	00000413 	.word	0x00000413
 8002024:	fffffbed 	.word	0xfffffbed

08002028 <__aeabi_i2d>:
 8002028:	b570      	push	{r4, r5, r6, lr}
 800202a:	2800      	cmp	r0, #0
 800202c:	d016      	beq.n	800205c <__aeabi_i2d+0x34>
 800202e:	17c3      	asrs	r3, r0, #31
 8002030:	18c5      	adds	r5, r0, r3
 8002032:	405d      	eors	r5, r3
 8002034:	0fc4      	lsrs	r4, r0, #31
 8002036:	0028      	movs	r0, r5
 8002038:	f000 f84c 	bl	80020d4 <__clzsi2>
 800203c:	4a11      	ldr	r2, [pc, #68]	; (8002084 <__aeabi_i2d+0x5c>)
 800203e:	1a12      	subs	r2, r2, r0
 8002040:	280a      	cmp	r0, #10
 8002042:	dc16      	bgt.n	8002072 <__aeabi_i2d+0x4a>
 8002044:	0003      	movs	r3, r0
 8002046:	002e      	movs	r6, r5
 8002048:	3315      	adds	r3, #21
 800204a:	409e      	lsls	r6, r3
 800204c:	230b      	movs	r3, #11
 800204e:	1a18      	subs	r0, r3, r0
 8002050:	40c5      	lsrs	r5, r0
 8002052:	0553      	lsls	r3, r2, #21
 8002054:	032d      	lsls	r5, r5, #12
 8002056:	0b2d      	lsrs	r5, r5, #12
 8002058:	0d5b      	lsrs	r3, r3, #21
 800205a:	e003      	b.n	8002064 <__aeabi_i2d+0x3c>
 800205c:	2400      	movs	r4, #0
 800205e:	2300      	movs	r3, #0
 8002060:	2500      	movs	r5, #0
 8002062:	2600      	movs	r6, #0
 8002064:	051b      	lsls	r3, r3, #20
 8002066:	432b      	orrs	r3, r5
 8002068:	07e4      	lsls	r4, r4, #31
 800206a:	4323      	orrs	r3, r4
 800206c:	0030      	movs	r0, r6
 800206e:	0019      	movs	r1, r3
 8002070:	bd70      	pop	{r4, r5, r6, pc}
 8002072:	380b      	subs	r0, #11
 8002074:	4085      	lsls	r5, r0
 8002076:	0553      	lsls	r3, r2, #21
 8002078:	032d      	lsls	r5, r5, #12
 800207a:	2600      	movs	r6, #0
 800207c:	0b2d      	lsrs	r5, r5, #12
 800207e:	0d5b      	lsrs	r3, r3, #21
 8002080:	e7f0      	b.n	8002064 <__aeabi_i2d+0x3c>
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	0000041e 	.word	0x0000041e

08002088 <__aeabi_ui2d>:
 8002088:	b510      	push	{r4, lr}
 800208a:	1e04      	subs	r4, r0, #0
 800208c:	d010      	beq.n	80020b0 <__aeabi_ui2d+0x28>
 800208e:	f000 f821 	bl	80020d4 <__clzsi2>
 8002092:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <__aeabi_ui2d+0x48>)
 8002094:	1a1b      	subs	r3, r3, r0
 8002096:	280a      	cmp	r0, #10
 8002098:	dc11      	bgt.n	80020be <__aeabi_ui2d+0x36>
 800209a:	220b      	movs	r2, #11
 800209c:	0021      	movs	r1, r4
 800209e:	1a12      	subs	r2, r2, r0
 80020a0:	40d1      	lsrs	r1, r2
 80020a2:	3015      	adds	r0, #21
 80020a4:	030a      	lsls	r2, r1, #12
 80020a6:	055b      	lsls	r3, r3, #21
 80020a8:	4084      	lsls	r4, r0
 80020aa:	0b12      	lsrs	r2, r2, #12
 80020ac:	0d5b      	lsrs	r3, r3, #21
 80020ae:	e001      	b.n	80020b4 <__aeabi_ui2d+0x2c>
 80020b0:	2300      	movs	r3, #0
 80020b2:	2200      	movs	r2, #0
 80020b4:	051b      	lsls	r3, r3, #20
 80020b6:	4313      	orrs	r3, r2
 80020b8:	0020      	movs	r0, r4
 80020ba:	0019      	movs	r1, r3
 80020bc:	bd10      	pop	{r4, pc}
 80020be:	0022      	movs	r2, r4
 80020c0:	380b      	subs	r0, #11
 80020c2:	4082      	lsls	r2, r0
 80020c4:	055b      	lsls	r3, r3, #21
 80020c6:	0312      	lsls	r2, r2, #12
 80020c8:	2400      	movs	r4, #0
 80020ca:	0b12      	lsrs	r2, r2, #12
 80020cc:	0d5b      	lsrs	r3, r3, #21
 80020ce:	e7f1      	b.n	80020b4 <__aeabi_ui2d+0x2c>
 80020d0:	0000041e 	.word	0x0000041e

080020d4 <__clzsi2>:
 80020d4:	211c      	movs	r1, #28
 80020d6:	2301      	movs	r3, #1
 80020d8:	041b      	lsls	r3, r3, #16
 80020da:	4298      	cmp	r0, r3
 80020dc:	d301      	bcc.n	80020e2 <__clzsi2+0xe>
 80020de:	0c00      	lsrs	r0, r0, #16
 80020e0:	3910      	subs	r1, #16
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	4298      	cmp	r0, r3
 80020e6:	d301      	bcc.n	80020ec <__clzsi2+0x18>
 80020e8:	0a00      	lsrs	r0, r0, #8
 80020ea:	3908      	subs	r1, #8
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	4298      	cmp	r0, r3
 80020f0:	d301      	bcc.n	80020f6 <__clzsi2+0x22>
 80020f2:	0900      	lsrs	r0, r0, #4
 80020f4:	3904      	subs	r1, #4
 80020f6:	a202      	add	r2, pc, #8	; (adr r2, 8002100 <__clzsi2+0x2c>)
 80020f8:	5c10      	ldrb	r0, [r2, r0]
 80020fa:	1840      	adds	r0, r0, r1
 80020fc:	4770      	bx	lr
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	02020304 	.word	0x02020304
 8002104:	01010101 	.word	0x01010101
	...

08002110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002114:	f000 fa86 	bl	8002624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002118:	f000 f809 	bl	800212e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800211c:	f000 f8e6 	bl	80022ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002120:	f000 f8b4 	bl	800228c <MX_USART2_UART_Init>
  MX_CRC_Init();
 8002124:	f000 f866 	bl	80021f4 <MX_CRC_Init>
  MX_TIM16_Init();
 8002128:	f000 f888 	bl	800223c <MX_TIM16_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800212c:	e7fe      	b.n	800212c <main+0x1c>

0800212e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800212e:	b590      	push	{r4, r7, lr}
 8002130:	b099      	sub	sp, #100	; 0x64
 8002132:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002134:	242c      	movs	r4, #44	; 0x2c
 8002136:	193b      	adds	r3, r7, r4
 8002138:	0018      	movs	r0, r3
 800213a:	2334      	movs	r3, #52	; 0x34
 800213c:	001a      	movs	r2, r3
 800213e:	2100      	movs	r1, #0
 8002140:	f002 f8fb 	bl	800433a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002144:	231c      	movs	r3, #28
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	0018      	movs	r0, r3
 800214a:	2310      	movs	r3, #16
 800214c:	001a      	movs	r2, r3
 800214e:	2100      	movs	r1, #0
 8002150:	f002 f8f3 	bl	800433a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002154:	003b      	movs	r3, r7
 8002156:	0018      	movs	r0, r3
 8002158:	231c      	movs	r3, #28
 800215a:	001a      	movs	r2, r3
 800215c:	2100      	movs	r1, #0
 800215e:	f002 f8ec 	bl	800433a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002162:	0021      	movs	r1, r4
 8002164:	187b      	adds	r3, r7, r1
 8002166:	2202      	movs	r2, #2
 8002168:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800216a:	187b      	adds	r3, r7, r1
 800216c:	2201      	movs	r2, #1
 800216e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002170:	187b      	adds	r3, r7, r1
 8002172:	2210      	movs	r2, #16
 8002174:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002176:	187b      	adds	r3, r7, r1
 8002178:	2202      	movs	r2, #2
 800217a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800217c:	187b      	adds	r3, r7, r1
 800217e:	2280      	movs	r2, #128	; 0x80
 8002180:	0212      	lsls	r2, r2, #8
 8002182:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002184:	187b      	adds	r3, r7, r1
 8002186:	22a0      	movs	r2, #160	; 0xa0
 8002188:	0392      	lsls	r2, r2, #14
 800218a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 800218c:	187b      	adds	r3, r7, r1
 800218e:	2201      	movs	r2, #1
 8002190:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002192:	187b      	adds	r3, r7, r1
 8002194:	0018      	movs	r0, r3
 8002196:	f000 fdc7 	bl	8002d28 <HAL_RCC_OscConfig>
 800219a:	1e03      	subs	r3, r0, #0
 800219c:	d001      	beq.n	80021a2 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800219e:	f000 f90f 	bl	80023c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021a2:	211c      	movs	r1, #28
 80021a4:	187b      	adds	r3, r7, r1
 80021a6:	2207      	movs	r2, #7
 80021a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021aa:	187b      	adds	r3, r7, r1
 80021ac:	2202      	movs	r2, #2
 80021ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021b0:	187b      	adds	r3, r7, r1
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021b6:	187b      	adds	r3, r7, r1
 80021b8:	2200      	movs	r2, #0
 80021ba:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021bc:	187b      	adds	r3, r7, r1
 80021be:	2101      	movs	r1, #1
 80021c0:	0018      	movs	r0, r3
 80021c2:	f001 f937 	bl	8003434 <HAL_RCC_ClockConfig>
 80021c6:	1e03      	subs	r3, r0, #0
 80021c8:	d001      	beq.n	80021ce <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80021ca:	f000 f8f9 	bl	80023c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021ce:	003b      	movs	r3, r7
 80021d0:	2202      	movs	r2, #2
 80021d2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021d4:	003b      	movs	r3, r7
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021da:	003b      	movs	r3, r7
 80021dc:	0018      	movs	r0, r3
 80021de:	f001 faa3 	bl	8003728 <HAL_RCCEx_PeriphCLKConfig>
 80021e2:	1e03      	subs	r3, r0, #0
 80021e4:	d001      	beq.n	80021ea <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80021e6:	f000 f8eb 	bl	80023c0 <Error_Handler>
  }
}
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	46bd      	mov	sp, r7
 80021ee:	b019      	add	sp, #100	; 0x64
 80021f0:	bd90      	pop	{r4, r7, pc}
	...

080021f4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80021f8:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <MX_CRC_Init+0x40>)
 80021fa:	4a0f      	ldr	r2, [pc, #60]	; (8002238 <MX_CRC_Init+0x44>)
 80021fc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80021fe:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <MX_CRC_Init+0x40>)
 8002200:	2200      	movs	r2, #0
 8002202:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <MX_CRC_Init+0x40>)
 8002206:	2200      	movs	r2, #0
 8002208:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800220a:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <MX_CRC_Init+0x40>)
 800220c:	2200      	movs	r2, #0
 800220e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <MX_CRC_Init+0x40>)
 8002212:	2200      	movs	r2, #0
 8002214:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <MX_CRC_Init+0x40>)
 8002218:	2201      	movs	r2, #1
 800221a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <MX_CRC_Init+0x40>)
 800221e:	0018      	movs	r0, r3
 8002220:	f000 fb18 	bl	8002854 <HAL_CRC_Init>
 8002224:	1e03      	subs	r3, r0, #0
 8002226:	d001      	beq.n	800222c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002228:	f000 f8ca 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	20000204 	.word	0x20000204
 8002238:	40023000 	.word	0x40023000

0800223c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <MX_TIM16_Init+0x44>)
 8002242:	4a10      	ldr	r2, [pc, #64]	; (8002284 <MX_TIM16_Init+0x48>)
 8002244:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002246:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <MX_TIM16_Init+0x44>)
 8002248:	2200      	movs	r2, #0
 800224a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <MX_TIM16_Init+0x44>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <MX_TIM16_Init+0x44>)
 8002254:	4a0c      	ldr	r2, [pc, #48]	; (8002288 <MX_TIM16_Init+0x4c>)
 8002256:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <MX_TIM16_Init+0x44>)
 800225a:	2200      	movs	r2, #0
 800225c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <MX_TIM16_Init+0x44>)
 8002260:	2200      	movs	r2, #0
 8002262:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <MX_TIM16_Init+0x44>)
 8002266:	2200      	movs	r2, #0
 8002268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <MX_TIM16_Init+0x44>)
 800226c:	0018      	movs	r0, r3
 800226e:	f001 fb5b 	bl	8003928 <HAL_TIM_Base_Init>
 8002272:	1e03      	subs	r3, r0, #0
 8002274:	d001      	beq.n	800227a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8002276:	f000 f8a3 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	200002ac 	.word	0x200002ac
 8002284:	40014400 	.word	0x40014400
 8002288:	0000ffff 	.word	0x0000ffff

0800228c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002290:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <MX_USART2_UART_Init+0x58>)
 8002292:	4a15      	ldr	r2, [pc, #84]	; (80022e8 <MX_USART2_UART_Init+0x5c>)
 8002294:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002296:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <MX_USART2_UART_Init+0x58>)
 8002298:	22e1      	movs	r2, #225	; 0xe1
 800229a:	0252      	lsls	r2, r2, #9
 800229c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800229e:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <MX_USART2_UART_Init+0x58>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <MX_USART2_UART_Init+0x58>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <MX_USART2_UART_Init+0x58>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <MX_USART2_UART_Init+0x58>)
 80022b2:	220c      	movs	r2, #12
 80022b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022b6:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <MX_USART2_UART_Init+0x58>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022bc:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <MX_USART2_UART_Init+0x58>)
 80022be:	2200      	movs	r2, #0
 80022c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022c2:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <MX_USART2_UART_Init+0x58>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <MX_USART2_UART_Init+0x58>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <MX_USART2_UART_Init+0x58>)
 80022d0:	0018      	movs	r0, r3
 80022d2:	f001 fbf9 	bl	8003ac8 <HAL_UART_Init>
 80022d6:	1e03      	subs	r3, r0, #0
 80022d8:	d001      	beq.n	80022de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022da:	f000 f871 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000228 	.word	0x20000228
 80022e8:	40004400 	.word	0x40004400

080022ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f2:	240c      	movs	r4, #12
 80022f4:	193b      	adds	r3, r7, r4
 80022f6:	0018      	movs	r0, r3
 80022f8:	2314      	movs	r3, #20
 80022fa:	001a      	movs	r2, r3
 80022fc:	2100      	movs	r1, #0
 80022fe:	f002 f81c 	bl	800433a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002302:	4b2d      	ldr	r3, [pc, #180]	; (80023b8 <MX_GPIO_Init+0xcc>)
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	4b2c      	ldr	r3, [pc, #176]	; (80023b8 <MX_GPIO_Init+0xcc>)
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	0309      	lsls	r1, r1, #12
 800230c:	430a      	orrs	r2, r1
 800230e:	615a      	str	r2, [r3, #20]
 8002310:	4b29      	ldr	r3, [pc, #164]	; (80023b8 <MX_GPIO_Init+0xcc>)
 8002312:	695a      	ldr	r2, [r3, #20]
 8002314:	2380      	movs	r3, #128	; 0x80
 8002316:	031b      	lsls	r3, r3, #12
 8002318:	4013      	ands	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <MX_GPIO_Init+0xcc>)
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	4b25      	ldr	r3, [pc, #148]	; (80023b8 <MX_GPIO_Init+0xcc>)
 8002324:	2180      	movs	r1, #128	; 0x80
 8002326:	03c9      	lsls	r1, r1, #15
 8002328:	430a      	orrs	r2, r1
 800232a:	615a      	str	r2, [r3, #20]
 800232c:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <MX_GPIO_Init+0xcc>)
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	03db      	lsls	r3, r3, #15
 8002334:	4013      	ands	r3, r2
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800233a:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <MX_GPIO_Init+0xcc>)
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <MX_GPIO_Init+0xcc>)
 8002340:	2180      	movs	r1, #128	; 0x80
 8002342:	0289      	lsls	r1, r1, #10
 8002344:	430a      	orrs	r2, r1
 8002346:	615a      	str	r2, [r3, #20]
 8002348:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <MX_GPIO_Init+0xcc>)
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	029b      	lsls	r3, r3, #10
 8002350:	4013      	ands	r3, r2
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002356:	2390      	movs	r3, #144	; 0x90
 8002358:	05db      	lsls	r3, r3, #23
 800235a:	2200      	movs	r2, #0
 800235c:	2120      	movs	r1, #32
 800235e:	0018      	movs	r0, r3
 8002360:	f000 fcc4 	bl	8002cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002364:	193b      	adds	r3, r7, r4
 8002366:	2280      	movs	r2, #128	; 0x80
 8002368:	0192      	lsls	r2, r2, #6
 800236a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800236c:	193b      	adds	r3, r7, r4
 800236e:	2284      	movs	r2, #132	; 0x84
 8002370:	0392      	lsls	r2, r2, #14
 8002372:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	193b      	adds	r3, r7, r4
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800237a:	193b      	adds	r3, r7, r4
 800237c:	4a0f      	ldr	r2, [pc, #60]	; (80023bc <MX_GPIO_Init+0xd0>)
 800237e:	0019      	movs	r1, r3
 8002380:	0010      	movs	r0, r2
 8002382:	f000 fb3b 	bl	80029fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002386:	0021      	movs	r1, r4
 8002388:	187b      	adds	r3, r7, r1
 800238a:	2220      	movs	r2, #32
 800238c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238e:	187b      	adds	r3, r7, r1
 8002390:	2201      	movs	r2, #1
 8002392:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	187b      	adds	r3, r7, r1
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239a:	187b      	adds	r3, r7, r1
 800239c:	2200      	movs	r2, #0
 800239e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80023a0:	187a      	adds	r2, r7, r1
 80023a2:	2390      	movs	r3, #144	; 0x90
 80023a4:	05db      	lsls	r3, r3, #23
 80023a6:	0011      	movs	r1, r2
 80023a8:	0018      	movs	r0, r3
 80023aa:	f000 fb27 	bl	80029fc <HAL_GPIO_Init>

}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b009      	add	sp, #36	; 0x24
 80023b4:	bd90      	pop	{r4, r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	40021000 	.word	0x40021000
 80023bc:	48000800 	.word	0x48000800

080023c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c4:	b672      	cpsid	i
}
 80023c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <Error_Handler+0x8>
	...

080023cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <HAL_MspInit+0x44>)
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <HAL_MspInit+0x44>)
 80023d8:	2101      	movs	r1, #1
 80023da:	430a      	orrs	r2, r1
 80023dc:	619a      	str	r2, [r3, #24]
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <HAL_MspInit+0x44>)
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	2201      	movs	r2, #1
 80023e4:	4013      	ands	r3, r2
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <HAL_MspInit+0x44>)
 80023ec:	69da      	ldr	r2, [r3, #28]
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_MspInit+0x44>)
 80023f0:	2180      	movs	r1, #128	; 0x80
 80023f2:	0549      	lsls	r1, r1, #21
 80023f4:	430a      	orrs	r2, r1
 80023f6:	61da      	str	r2, [r3, #28]
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_MspInit+0x44>)
 80023fa:	69da      	ldr	r2, [r3, #28]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	055b      	lsls	r3, r3, #21
 8002400:	4013      	ands	r3, r2
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	46bd      	mov	sp, r7
 800240a:	b002      	add	sp, #8
 800240c:	bd80      	pop	{r7, pc}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	40021000 	.word	0x40021000

08002414 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a09      	ldr	r2, [pc, #36]	; (8002448 <HAL_CRC_MspInit+0x34>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d10b      	bne.n	800243e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_CRC_MspInit+0x38>)
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <HAL_CRC_MspInit+0x38>)
 800242c:	2140      	movs	r1, #64	; 0x40
 800242e:	430a      	orrs	r2, r1
 8002430:	615a      	str	r2, [r3, #20]
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_CRC_MspInit+0x38>)
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	2240      	movs	r2, #64	; 0x40
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	46bd      	mov	sp, r7
 8002442:	b004      	add	sp, #16
 8002444:	bd80      	pop	{r7, pc}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	40023000 	.word	0x40023000
 800244c:	40021000 	.word	0x40021000

08002450 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <HAL_TIM_Base_MspInit+0x38>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10d      	bne.n	800247e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002462:	4b0a      	ldr	r3, [pc, #40]	; (800248c <HAL_TIM_Base_MspInit+0x3c>)
 8002464:	699a      	ldr	r2, [r3, #24]
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_TIM_Base_MspInit+0x3c>)
 8002468:	2180      	movs	r1, #128	; 0x80
 800246a:	0289      	lsls	r1, r1, #10
 800246c:	430a      	orrs	r2, r1
 800246e:	619a      	str	r2, [r3, #24]
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_TIM_Base_MspInit+0x3c>)
 8002472:	699a      	ldr	r2, [r3, #24]
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	029b      	lsls	r3, r3, #10
 8002478:	4013      	ands	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	46bd      	mov	sp, r7
 8002482:	b004      	add	sp, #16
 8002484:	bd80      	pop	{r7, pc}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	40014400 	.word	0x40014400
 800248c:	40021000 	.word	0x40021000

08002490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b08b      	sub	sp, #44	; 0x2c
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	2414      	movs	r4, #20
 800249a:	193b      	adds	r3, r7, r4
 800249c:	0018      	movs	r0, r3
 800249e:	2314      	movs	r3, #20
 80024a0:	001a      	movs	r2, r3
 80024a2:	2100      	movs	r1, #0
 80024a4:	f001 ff49 	bl	800433a <memset>
  if(huart->Instance==USART2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a1c      	ldr	r2, [pc, #112]	; (8002520 <HAL_UART_MspInit+0x90>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d132      	bne.n	8002518 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024b2:	4b1c      	ldr	r3, [pc, #112]	; (8002524 <HAL_UART_MspInit+0x94>)
 80024b4:	69da      	ldr	r2, [r3, #28]
 80024b6:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <HAL_UART_MspInit+0x94>)
 80024b8:	2180      	movs	r1, #128	; 0x80
 80024ba:	0289      	lsls	r1, r1, #10
 80024bc:	430a      	orrs	r2, r1
 80024be:	61da      	str	r2, [r3, #28]
 80024c0:	4b18      	ldr	r3, [pc, #96]	; (8002524 <HAL_UART_MspInit+0x94>)
 80024c2:	69da      	ldr	r2, [r3, #28]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	029b      	lsls	r3, r3, #10
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ce:	4b15      	ldr	r3, [pc, #84]	; (8002524 <HAL_UART_MspInit+0x94>)
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	4b14      	ldr	r3, [pc, #80]	; (8002524 <HAL_UART_MspInit+0x94>)
 80024d4:	2180      	movs	r1, #128	; 0x80
 80024d6:	0289      	lsls	r1, r1, #10
 80024d8:	430a      	orrs	r2, r1
 80024da:	615a      	str	r2, [r3, #20]
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_UART_MspInit+0x94>)
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	029b      	lsls	r3, r3, #10
 80024e4:	4013      	ands	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024ea:	0021      	movs	r1, r4
 80024ec:	187b      	adds	r3, r7, r1
 80024ee:	220c      	movs	r2, #12
 80024f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f2:	187b      	adds	r3, r7, r1
 80024f4:	2202      	movs	r2, #2
 80024f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	2200      	movs	r2, #0
 8002502:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002504:	187b      	adds	r3, r7, r1
 8002506:	2201      	movs	r2, #1
 8002508:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250a:	187a      	adds	r2, r7, r1
 800250c:	2390      	movs	r3, #144	; 0x90
 800250e:	05db      	lsls	r3, r3, #23
 8002510:	0011      	movs	r1, r2
 8002512:	0018      	movs	r0, r3
 8002514:	f000 fa72 	bl	80029fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002518:	46c0      	nop			; (mov r8, r8)
 800251a:	46bd      	mov	sp, r7
 800251c:	b00b      	add	sp, #44	; 0x2c
 800251e:	bd90      	pop	{r4, r7, pc}
 8002520:	40004400 	.word	0x40004400
 8002524:	40021000 	.word	0x40021000

08002528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800252c:	e7fe      	b.n	800252c <NMI_Handler+0x4>

0800252e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002532:	e7fe      	b.n	8002532 <HardFault_Handler+0x4>

08002534 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002538:	46c0      	nop			; (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800254c:	f000 f8b2 	bl	80026b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002550:	46c0      	nop			; (mov r8, r8)
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002560:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <_sbrk+0x5c>)
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <_sbrk+0x60>)
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <_sbrk+0x64>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002574:	4b11      	ldr	r3, [pc, #68]	; (80025bc <_sbrk+0x64>)
 8002576:	4a12      	ldr	r2, [pc, #72]	; (80025c0 <_sbrk+0x68>)
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <_sbrk+0x64>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	18d3      	adds	r3, r2, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	429a      	cmp	r2, r3
 8002586:	d207      	bcs.n	8002598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002588:	f001 fe9a 	bl	80042c0 <__errno>
 800258c:	0003      	movs	r3, r0
 800258e:	220c      	movs	r2, #12
 8002590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002592:	2301      	movs	r3, #1
 8002594:	425b      	negs	r3, r3
 8002596:	e009      	b.n	80025ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002598:	4b08      	ldr	r3, [pc, #32]	; (80025bc <_sbrk+0x64>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800259e:	4b07      	ldr	r3, [pc, #28]	; (80025bc <_sbrk+0x64>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	18d2      	adds	r2, r2, r3
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <_sbrk+0x64>)
 80025a8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80025aa:	68fb      	ldr	r3, [r7, #12]
}
 80025ac:	0018      	movs	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b006      	add	sp, #24
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20008000 	.word	0x20008000
 80025b8:	00000800 	.word	0x00000800
 80025bc:	200001f8 	.word	0x200001f8
 80025c0:	20000308 	.word	0x20000308

080025c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025d0:	480d      	ldr	r0, [pc, #52]	; (8002608 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025d4:	480d      	ldr	r0, [pc, #52]	; (800260c <LoopForever+0x6>)
  ldr r1, =_edata
 80025d6:	490e      	ldr	r1, [pc, #56]	; (8002610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025d8:	4a0e      	ldr	r2, [pc, #56]	; (8002614 <LoopForever+0xe>)
  movs r3, #0
 80025da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025dc:	e002      	b.n	80025e4 <LoopCopyDataInit>

080025de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025e2:	3304      	adds	r3, #4

080025e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e8:	d3f9      	bcc.n	80025de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ea:	4a0b      	ldr	r2, [pc, #44]	; (8002618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025ec:	4c0b      	ldr	r4, [pc, #44]	; (800261c <LoopForever+0x16>)
  movs r3, #0
 80025ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f0:	e001      	b.n	80025f6 <LoopFillZerobss>

080025f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f4:	3204      	adds	r2, #4

080025f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f8:	d3fb      	bcc.n	80025f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80025fa:	f7ff ffe3 	bl	80025c4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80025fe:	f001 fe65 	bl	80042cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002602:	f7ff fd85 	bl	8002110 <main>

08002606 <LoopForever>:

LoopForever:
    b LoopForever
 8002606:	e7fe      	b.n	8002606 <LoopForever>
  ldr   r0, =_estack
 8002608:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800260c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002610:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002614:	08007374 	.word	0x08007374
  ldr r2, =_sbss
 8002618:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800261c:	20000308 	.word	0x20000308

08002620 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002620:	e7fe      	b.n	8002620 <ADC1_COMP_IRQHandler>
	...

08002624 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002628:	4b07      	ldr	r3, [pc, #28]	; (8002648 <HAL_Init+0x24>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_Init+0x24>)
 800262e:	2110      	movs	r1, #16
 8002630:	430a      	orrs	r2, r1
 8002632:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002634:	2000      	movs	r0, #0
 8002636:	f000 f809 	bl	800264c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800263a:	f7ff fec7 	bl	80023cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	0018      	movs	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	40022000 	.word	0x40022000

0800264c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800264c:	b590      	push	{r4, r7, lr}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002654:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <HAL_InitTick+0x5c>)
 8002656:	681c      	ldr	r4, [r3, #0]
 8002658:	4b14      	ldr	r3, [pc, #80]	; (80026ac <HAL_InitTick+0x60>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	0019      	movs	r1, r3
 800265e:	23fa      	movs	r3, #250	; 0xfa
 8002660:	0098      	lsls	r0, r3, #2
 8002662:	f7fd fd6b 	bl	800013c <__udivsi3>
 8002666:	0003      	movs	r3, r0
 8002668:	0019      	movs	r1, r3
 800266a:	0020      	movs	r0, r4
 800266c:	f7fd fd66 	bl	800013c <__udivsi3>
 8002670:	0003      	movs	r3, r0
 8002672:	0018      	movs	r0, r3
 8002674:	f000 f8e1 	bl	800283a <HAL_SYSTICK_Config>
 8002678:	1e03      	subs	r3, r0, #0
 800267a:	d001      	beq.n	8002680 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e00f      	b.n	80026a0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b03      	cmp	r3, #3
 8002684:	d80b      	bhi.n	800269e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	2301      	movs	r3, #1
 800268a:	425b      	negs	r3, r3
 800268c:	2200      	movs	r2, #0
 800268e:	0018      	movs	r0, r3
 8002690:	f000 f8be 	bl	8002810 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_InitTick+0x64>)
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
}
 80026a0:	0018      	movs	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b003      	add	sp, #12
 80026a6:	bd90      	pop	{r4, r7, pc}
 80026a8:	20000000 	.word	0x20000000
 80026ac:	20000008 	.word	0x20000008
 80026b0:	20000004 	.word	0x20000004

080026b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <HAL_IncTick+0x1c>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	001a      	movs	r2, r3
 80026be:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_IncTick+0x20>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	18d2      	adds	r2, r2, r3
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <HAL_IncTick+0x20>)
 80026c6:	601a      	str	r2, [r3, #0]
}
 80026c8:	46c0      	nop			; (mov r8, r8)
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	20000008 	.word	0x20000008
 80026d4:	200002f4 	.word	0x200002f4

080026d8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  return uwTick;
 80026dc:	4b02      	ldr	r3, [pc, #8]	; (80026e8 <HAL_GetTick+0x10>)
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	0018      	movs	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	200002f4 	.word	0x200002f4

080026ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026ec:	b590      	push	{r4, r7, lr}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	0002      	movs	r2, r0
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	1dfb      	adds	r3, r7, #7
 80026f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80026fa:	1dfb      	adds	r3, r7, #7
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b7f      	cmp	r3, #127	; 0x7f
 8002700:	d828      	bhi.n	8002754 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002702:	4a2f      	ldr	r2, [pc, #188]	; (80027c0 <__NVIC_SetPriority+0xd4>)
 8002704:	1dfb      	adds	r3, r7, #7
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	b25b      	sxtb	r3, r3
 800270a:	089b      	lsrs	r3, r3, #2
 800270c:	33c0      	adds	r3, #192	; 0xc0
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	589b      	ldr	r3, [r3, r2]
 8002712:	1dfa      	adds	r2, r7, #7
 8002714:	7812      	ldrb	r2, [r2, #0]
 8002716:	0011      	movs	r1, r2
 8002718:	2203      	movs	r2, #3
 800271a:	400a      	ands	r2, r1
 800271c:	00d2      	lsls	r2, r2, #3
 800271e:	21ff      	movs	r1, #255	; 0xff
 8002720:	4091      	lsls	r1, r2
 8002722:	000a      	movs	r2, r1
 8002724:	43d2      	mvns	r2, r2
 8002726:	401a      	ands	r2, r3
 8002728:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	019b      	lsls	r3, r3, #6
 800272e:	22ff      	movs	r2, #255	; 0xff
 8002730:	401a      	ands	r2, r3
 8002732:	1dfb      	adds	r3, r7, #7
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	0018      	movs	r0, r3
 8002738:	2303      	movs	r3, #3
 800273a:	4003      	ands	r3, r0
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002740:	481f      	ldr	r0, [pc, #124]	; (80027c0 <__NVIC_SetPriority+0xd4>)
 8002742:	1dfb      	adds	r3, r7, #7
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	b25b      	sxtb	r3, r3
 8002748:	089b      	lsrs	r3, r3, #2
 800274a:	430a      	orrs	r2, r1
 800274c:	33c0      	adds	r3, #192	; 0xc0
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002752:	e031      	b.n	80027b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002754:	4a1b      	ldr	r2, [pc, #108]	; (80027c4 <__NVIC_SetPriority+0xd8>)
 8002756:	1dfb      	adds	r3, r7, #7
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	0019      	movs	r1, r3
 800275c:	230f      	movs	r3, #15
 800275e:	400b      	ands	r3, r1
 8002760:	3b08      	subs	r3, #8
 8002762:	089b      	lsrs	r3, r3, #2
 8002764:	3306      	adds	r3, #6
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	18d3      	adds	r3, r2, r3
 800276a:	3304      	adds	r3, #4
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	1dfa      	adds	r2, r7, #7
 8002770:	7812      	ldrb	r2, [r2, #0]
 8002772:	0011      	movs	r1, r2
 8002774:	2203      	movs	r2, #3
 8002776:	400a      	ands	r2, r1
 8002778:	00d2      	lsls	r2, r2, #3
 800277a:	21ff      	movs	r1, #255	; 0xff
 800277c:	4091      	lsls	r1, r2
 800277e:	000a      	movs	r2, r1
 8002780:	43d2      	mvns	r2, r2
 8002782:	401a      	ands	r2, r3
 8002784:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	019b      	lsls	r3, r3, #6
 800278a:	22ff      	movs	r2, #255	; 0xff
 800278c:	401a      	ands	r2, r3
 800278e:	1dfb      	adds	r3, r7, #7
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	0018      	movs	r0, r3
 8002794:	2303      	movs	r3, #3
 8002796:	4003      	ands	r3, r0
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800279c:	4809      	ldr	r0, [pc, #36]	; (80027c4 <__NVIC_SetPriority+0xd8>)
 800279e:	1dfb      	adds	r3, r7, #7
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	001c      	movs	r4, r3
 80027a4:	230f      	movs	r3, #15
 80027a6:	4023      	ands	r3, r4
 80027a8:	3b08      	subs	r3, #8
 80027aa:	089b      	lsrs	r3, r3, #2
 80027ac:	430a      	orrs	r2, r1
 80027ae:	3306      	adds	r3, #6
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	18c3      	adds	r3, r0, r3
 80027b4:	3304      	adds	r3, #4
 80027b6:	601a      	str	r2, [r3, #0]
}
 80027b8:	46c0      	nop			; (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b003      	add	sp, #12
 80027be:	bd90      	pop	{r4, r7, pc}
 80027c0:	e000e100 	.word	0xe000e100
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	1e5a      	subs	r2, r3, #1
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	045b      	lsls	r3, r3, #17
 80027d8:	429a      	cmp	r2, r3
 80027da:	d301      	bcc.n	80027e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027dc:	2301      	movs	r3, #1
 80027de:	e010      	b.n	8002802 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027e0:	4b0a      	ldr	r3, [pc, #40]	; (800280c <SysTick_Config+0x44>)
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	3a01      	subs	r2, #1
 80027e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e8:	2301      	movs	r3, #1
 80027ea:	425b      	negs	r3, r3
 80027ec:	2103      	movs	r1, #3
 80027ee:	0018      	movs	r0, r3
 80027f0:	f7ff ff7c 	bl	80026ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <SysTick_Config+0x44>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027fa:	4b04      	ldr	r3, [pc, #16]	; (800280c <SysTick_Config+0x44>)
 80027fc:	2207      	movs	r2, #7
 80027fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002800:	2300      	movs	r3, #0
}
 8002802:	0018      	movs	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	b002      	add	sp, #8
 8002808:	bd80      	pop	{r7, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	e000e010 	.word	0xe000e010

08002810 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	210f      	movs	r1, #15
 800281c:	187b      	adds	r3, r7, r1
 800281e:	1c02      	adds	r2, r0, #0
 8002820:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	187b      	adds	r3, r7, r1
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	b25b      	sxtb	r3, r3
 800282a:	0011      	movs	r1, r2
 800282c:	0018      	movs	r0, r3
 800282e:	f7ff ff5d 	bl	80026ec <__NVIC_SetPriority>
}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	46bd      	mov	sp, r7
 8002836:	b004      	add	sp, #16
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	0018      	movs	r0, r3
 8002846:	f7ff ffbf 	bl	80027c8 <SysTick_Config>
 800284a:	0003      	movs	r3, r0
}
 800284c:	0018      	movs	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	b002      	add	sp, #8
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e056      	b.n	8002914 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	7f5b      	ldrb	r3, [r3, #29]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d106      	bne.n	800287e <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	0018      	movs	r0, r3
 800287a:	f7ff fdcb 	bl	8002414 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2202      	movs	r2, #2
 8002882:	775a      	strb	r2, [r3, #29]

#if defined(CRC_POL_POL)
  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	791b      	ldrb	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10c      	bne.n	80028a6 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a22      	ldr	r2, [pc, #136]	; (800291c <HAL_CRC_Init+0xc8>)
 8002892:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2118      	movs	r1, #24
 80028a0:	438a      	bics	r2, r1
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	e00b      	b.n	80028be <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6899      	ldr	r1, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	0018      	movs	r0, r3
 80028b2:	f000 f835 	bl	8002920 <HAL_CRCEx_Polynomial_Set>
 80028b6:	1e03      	subs	r3, r0, #0
 80028b8:	d001      	beq.n	80028be <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e02a      	b.n	8002914 <HAL_CRC_Init+0xc0>
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	795b      	ldrb	r3, [r3, #5]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d105      	bne.n	80028d2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2201      	movs	r2, #1
 80028cc:	4252      	negs	r2, r2
 80028ce:	611a      	str	r2, [r3, #16]
 80028d0:	e004      	b.n	80028dc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6912      	ldr	r2, [r2, #16]
 80028da:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2260      	movs	r2, #96	; 0x60
 80028e4:	4393      	bics	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2280      	movs	r2, #128	; 0x80
 80028fc:	4393      	bics	r3, r2
 80028fe:	0019      	movs	r1, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699a      	ldr	r2, [r3, #24]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	0018      	movs	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	b002      	add	sp, #8
 800291a:	bd80      	pop	{r7, pc}
 800291c:	04c11db7 	.word	0x04c11db7

08002920 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800292c:	2317      	movs	r3, #23
 800292e:	18fb      	adds	r3, r7, r3
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002934:	231f      	movs	r3, #31
 8002936:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1e5a      	subs	r2, r3, #1
 800293e:	613a      	str	r2, [r7, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_CRCEx_Polynomial_Set+0x36>
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	221f      	movs	r2, #31
 8002948:	4013      	ands	r3, r2
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	40da      	lsrs	r2, r3
 800294e:	0013      	movs	r3, r2
 8002950:	2201      	movs	r2, #1
 8002952:	4013      	ands	r3, r2
 8002954:	d0f1      	beq.n	800293a <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b18      	cmp	r3, #24
 800295a:	d00f      	beq.n	800297c <HAL_CRCEx_Polynomial_Set+0x5c>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b18      	cmp	r3, #24
 8002960:	d824      	bhi.n	80029ac <HAL_CRCEx_Polynomial_Set+0x8c>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b10      	cmp	r3, #16
 8002966:	d011      	beq.n	800298c <HAL_CRCEx_Polynomial_Set+0x6c>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b10      	cmp	r3, #16
 800296c:	d81e      	bhi.n	80029ac <HAL_CRCEx_Polynomial_Set+0x8c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d020      	beq.n	80029b6 <HAL_CRCEx_Polynomial_Set+0x96>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b08      	cmp	r3, #8
 8002978:	d010      	beq.n	800299c <HAL_CRCEx_Polynomial_Set+0x7c>
 800297a:	e017      	b.n	80029ac <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	2b06      	cmp	r3, #6
 8002980:	d91b      	bls.n	80029ba <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8002982:	2317      	movs	r3, #23
 8002984:	18fb      	adds	r3, r7, r3
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
      }
      break;
 800298a:	e016      	b.n	80029ba <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2b07      	cmp	r3, #7
 8002990:	d915      	bls.n	80029be <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8002992:	2317      	movs	r3, #23
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	2201      	movs	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
      }
      break;
 800299a:	e010      	b.n	80029be <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	2b0f      	cmp	r3, #15
 80029a0:	d90f      	bls.n	80029c2 <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 80029a2:	2317      	movs	r3, #23
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	2201      	movs	r2, #1
 80029a8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80029aa:	e00a      	b.n	80029c2 <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80029ac:	2317      	movs	r3, #23
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
      break;
 80029b4:	e006      	b.n	80029c4 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	e004      	b.n	80029c4 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	e002      	b.n	80029c4 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	e000      	b.n	80029c4 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80029c2:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 80029c4:	2317      	movs	r3, #23
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10e      	bne.n	80029ec <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2218      	movs	r2, #24
 80029de:	4393      	bics	r3, r2
 80029e0:	0019      	movs	r1, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80029ec:	2317      	movs	r3, #23
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	781b      	ldrb	r3, [r3, #0]
}
 80029f2:	0018      	movs	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b006      	add	sp, #24
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a0a:	e155      	b.n	8002cb8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2101      	movs	r1, #1
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4091      	lsls	r1, r2
 8002a16:	000a      	movs	r2, r1
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d100      	bne.n	8002a24 <HAL_GPIO_Init+0x28>
 8002a22:	e146      	b.n	8002cb2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2203      	movs	r2, #3
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d005      	beq.n	8002a3c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2203      	movs	r2, #3
 8002a36:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d130      	bne.n	8002a9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	0013      	movs	r3, r2
 8002a4c:	43da      	mvns	r2, r3
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4013      	ands	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	0013      	movs	r3, r2
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a72:	2201      	movs	r2, #1
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	409a      	lsls	r2, r3
 8002a78:	0013      	movs	r3, r2
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	091b      	lsrs	r3, r3, #4
 8002a88:	2201      	movs	r2, #1
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	0013      	movs	r3, r2
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d017      	beq.n	8002ada <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	0013      	movs	r3, r2
 8002aba:	43da      	mvns	r2, r3
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	409a      	lsls	r2, r3
 8002acc:	0013      	movs	r3, r2
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2203      	movs	r2, #3
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d123      	bne.n	8002b2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	08da      	lsrs	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3208      	adds	r2, #8
 8002aee:	0092      	lsls	r2, r2, #2
 8002af0:	58d3      	ldr	r3, [r2, r3]
 8002af2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2207      	movs	r2, #7
 8002af8:	4013      	ands	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	220f      	movs	r2, #15
 8002afe:	409a      	lsls	r2, r3
 8002b00:	0013      	movs	r3, r2
 8002b02:	43da      	mvns	r2, r3
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4013      	ands	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2107      	movs	r1, #7
 8002b12:	400b      	ands	r3, r1
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	409a      	lsls	r2, r3
 8002b18:	0013      	movs	r3, r2
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	08da      	lsrs	r2, r3, #3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3208      	adds	r2, #8
 8002b28:	0092      	lsls	r2, r2, #2
 8002b2a:	6939      	ldr	r1, [r7, #16]
 8002b2c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	2203      	movs	r2, #3
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	0013      	movs	r3, r2
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4013      	ands	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	401a      	ands	r2, r3
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	409a      	lsls	r2, r3
 8002b54:	0013      	movs	r3, r2
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	23c0      	movs	r3, #192	; 0xc0
 8002b68:	029b      	lsls	r3, r3, #10
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d100      	bne.n	8002b70 <HAL_GPIO_Init+0x174>
 8002b6e:	e0a0      	b.n	8002cb2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b70:	4b57      	ldr	r3, [pc, #348]	; (8002cd0 <HAL_GPIO_Init+0x2d4>)
 8002b72:	699a      	ldr	r2, [r3, #24]
 8002b74:	4b56      	ldr	r3, [pc, #344]	; (8002cd0 <HAL_GPIO_Init+0x2d4>)
 8002b76:	2101      	movs	r1, #1
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	619a      	str	r2, [r3, #24]
 8002b7c:	4b54      	ldr	r3, [pc, #336]	; (8002cd0 <HAL_GPIO_Init+0x2d4>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	2201      	movs	r2, #1
 8002b82:	4013      	ands	r3, r2
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b88:	4a52      	ldr	r2, [pc, #328]	; (8002cd4 <HAL_GPIO_Init+0x2d8>)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	089b      	lsrs	r3, r3, #2
 8002b8e:	3302      	adds	r3, #2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	589b      	ldr	r3, [r3, r2]
 8002b94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2203      	movs	r2, #3
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	220f      	movs	r2, #15
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	0013      	movs	r3, r2
 8002ba4:	43da      	mvns	r2, r3
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	2390      	movs	r3, #144	; 0x90
 8002bb0:	05db      	lsls	r3, r3, #23
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d019      	beq.n	8002bea <HAL_GPIO_Init+0x1ee>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a47      	ldr	r2, [pc, #284]	; (8002cd8 <HAL_GPIO_Init+0x2dc>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <HAL_GPIO_Init+0x1ea>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a46      	ldr	r2, [pc, #280]	; (8002cdc <HAL_GPIO_Init+0x2e0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00d      	beq.n	8002be2 <HAL_GPIO_Init+0x1e6>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a45      	ldr	r2, [pc, #276]	; (8002ce0 <HAL_GPIO_Init+0x2e4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d007      	beq.n	8002bde <HAL_GPIO_Init+0x1e2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a44      	ldr	r2, [pc, #272]	; (8002ce4 <HAL_GPIO_Init+0x2e8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <HAL_GPIO_Init+0x1de>
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	e008      	b.n	8002bec <HAL_GPIO_Init+0x1f0>
 8002bda:	2305      	movs	r3, #5
 8002bdc:	e006      	b.n	8002bec <HAL_GPIO_Init+0x1f0>
 8002bde:	2303      	movs	r3, #3
 8002be0:	e004      	b.n	8002bec <HAL_GPIO_Init+0x1f0>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e002      	b.n	8002bec <HAL_GPIO_Init+0x1f0>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <HAL_GPIO_Init+0x1f0>
 8002bea:	2300      	movs	r3, #0
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	2103      	movs	r1, #3
 8002bf0:	400a      	ands	r2, r1
 8002bf2:	0092      	lsls	r2, r2, #2
 8002bf4:	4093      	lsls	r3, r2
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bfc:	4935      	ldr	r1, [pc, #212]	; (8002cd4 <HAL_GPIO_Init+0x2d8>)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	089b      	lsrs	r3, r3, #2
 8002c02:	3302      	adds	r3, #2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c0a:	4b37      	ldr	r3, [pc, #220]	; (8002ce8 <HAL_GPIO_Init+0x2ec>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	43da      	mvns	r2, r3
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4013      	ands	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	025b      	lsls	r3, r3, #9
 8002c22:	4013      	ands	r3, r2
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c2e:	4b2e      	ldr	r3, [pc, #184]	; (8002ce8 <HAL_GPIO_Init+0x2ec>)
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002c34:	4b2c      	ldr	r3, [pc, #176]	; (8002ce8 <HAL_GPIO_Init+0x2ec>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	43da      	mvns	r2, r3
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4013      	ands	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	2380      	movs	r3, #128	; 0x80
 8002c4a:	029b      	lsls	r3, r3, #10
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d003      	beq.n	8002c58 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c58:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <HAL_GPIO_Init+0x2ec>)
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c5e:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <HAL_GPIO_Init+0x2ec>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	43da      	mvns	r2, r3
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	035b      	lsls	r3, r3, #13
 8002c76:	4013      	ands	r3, r2
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c82:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_GPIO_Init+0x2ec>)
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c88:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <HAL_GPIO_Init+0x2ec>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	43da      	mvns	r2, r3
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4013      	ands	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	039b      	lsls	r3, r3, #14
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cac:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <HAL_GPIO_Init+0x2ec>)
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	40da      	lsrs	r2, r3
 8002cc0:	1e13      	subs	r3, r2, #0
 8002cc2:	d000      	beq.n	8002cc6 <HAL_GPIO_Init+0x2ca>
 8002cc4:	e6a2      	b.n	8002a0c <HAL_GPIO_Init+0x10>
  } 
}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	46c0      	nop			; (mov r8, r8)
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b006      	add	sp, #24
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40010000 	.word	0x40010000
 8002cd8:	48000400 	.word	0x48000400
 8002cdc:	48000800 	.word	0x48000800
 8002ce0:	48000c00 	.word	0x48000c00
 8002ce4:	48001000 	.word	0x48001000
 8002ce8:	40010400 	.word	0x40010400

08002cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	0008      	movs	r0, r1
 8002cf6:	0011      	movs	r1, r2
 8002cf8:	1cbb      	adds	r3, r7, #2
 8002cfa:	1c02      	adds	r2, r0, #0
 8002cfc:	801a      	strh	r2, [r3, #0]
 8002cfe:	1c7b      	adds	r3, r7, #1
 8002d00:	1c0a      	adds	r2, r1, #0
 8002d02:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d04:	1c7b      	adds	r3, r7, #1
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d004      	beq.n	8002d16 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d0c:	1cbb      	adds	r3, r7, #2
 8002d0e:	881a      	ldrh	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d14:	e003      	b.n	8002d1e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d16:	1cbb      	adds	r3, r7, #2
 8002d18:	881a      	ldrh	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b002      	add	sp, #8
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d102      	bne.n	8002d3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f000 fb76 	bl	8003428 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2201      	movs	r2, #1
 8002d42:	4013      	ands	r3, r2
 8002d44:	d100      	bne.n	8002d48 <HAL_RCC_OscConfig+0x20>
 8002d46:	e08e      	b.n	8002e66 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d48:	4bc5      	ldr	r3, [pc, #788]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	220c      	movs	r2, #12
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d00e      	beq.n	8002d72 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d54:	4bc2      	ldr	r3, [pc, #776]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	220c      	movs	r2, #12
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d117      	bne.n	8002d90 <HAL_RCC_OscConfig+0x68>
 8002d60:	4bbf      	ldr	r3, [pc, #764]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	23c0      	movs	r3, #192	; 0xc0
 8002d66:	025b      	lsls	r3, r3, #9
 8002d68:	401a      	ands	r2, r3
 8002d6a:	2380      	movs	r3, #128	; 0x80
 8002d6c:	025b      	lsls	r3, r3, #9
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d10e      	bne.n	8002d90 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d72:	4bbb      	ldr	r3, [pc, #748]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	029b      	lsls	r3, r3, #10
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d100      	bne.n	8002d80 <HAL_RCC_OscConfig+0x58>
 8002d7e:	e071      	b.n	8002e64 <HAL_RCC_OscConfig+0x13c>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d000      	beq.n	8002d8a <HAL_RCC_OscConfig+0x62>
 8002d88:	e06c      	b.n	8002e64 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f000 fb4c 	bl	8003428 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d107      	bne.n	8002da8 <HAL_RCC_OscConfig+0x80>
 8002d98:	4bb1      	ldr	r3, [pc, #708]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4bb0      	ldr	r3, [pc, #704]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002d9e:	2180      	movs	r1, #128	; 0x80
 8002da0:	0249      	lsls	r1, r1, #9
 8002da2:	430a      	orrs	r2, r1
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	e02f      	b.n	8002e08 <HAL_RCC_OscConfig+0xe0>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10c      	bne.n	8002dca <HAL_RCC_OscConfig+0xa2>
 8002db0:	4bab      	ldr	r3, [pc, #684]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4baa      	ldr	r3, [pc, #680]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002db6:	49ab      	ldr	r1, [pc, #684]	; (8003064 <HAL_RCC_OscConfig+0x33c>)
 8002db8:	400a      	ands	r2, r1
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	4ba8      	ldr	r3, [pc, #672]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4ba7      	ldr	r3, [pc, #668]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002dc2:	49a9      	ldr	r1, [pc, #676]	; (8003068 <HAL_RCC_OscConfig+0x340>)
 8002dc4:	400a      	ands	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	e01e      	b.n	8002e08 <HAL_RCC_OscConfig+0xe0>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b05      	cmp	r3, #5
 8002dd0:	d10e      	bne.n	8002df0 <HAL_RCC_OscConfig+0xc8>
 8002dd2:	4ba3      	ldr	r3, [pc, #652]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	4ba2      	ldr	r3, [pc, #648]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002dd8:	2180      	movs	r1, #128	; 0x80
 8002dda:	02c9      	lsls	r1, r1, #11
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	4b9f      	ldr	r3, [pc, #636]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b9e      	ldr	r3, [pc, #632]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002de6:	2180      	movs	r1, #128	; 0x80
 8002de8:	0249      	lsls	r1, r1, #9
 8002dea:	430a      	orrs	r2, r1
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	e00b      	b.n	8002e08 <HAL_RCC_OscConfig+0xe0>
 8002df0:	4b9b      	ldr	r3, [pc, #620]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b9a      	ldr	r3, [pc, #616]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002df6:	499b      	ldr	r1, [pc, #620]	; (8003064 <HAL_RCC_OscConfig+0x33c>)
 8002df8:	400a      	ands	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	4b98      	ldr	r3, [pc, #608]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b97      	ldr	r3, [pc, #604]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002e02:	4999      	ldr	r1, [pc, #612]	; (8003068 <HAL_RCC_OscConfig+0x340>)
 8002e04:	400a      	ands	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d014      	beq.n	8002e3a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7ff fc62 	bl	80026d8 <HAL_GetTick>
 8002e14:	0003      	movs	r3, r0
 8002e16:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e1a:	f7ff fc5d 	bl	80026d8 <HAL_GetTick>
 8002e1e:	0002      	movs	r2, r0
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b64      	cmp	r3, #100	; 0x64
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e2fd      	b.n	8003428 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2c:	4b8c      	ldr	r3, [pc, #560]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	2380      	movs	r3, #128	; 0x80
 8002e32:	029b      	lsls	r3, r3, #10
 8002e34:	4013      	ands	r3, r2
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0xf2>
 8002e38:	e015      	b.n	8002e66 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3a:	f7ff fc4d 	bl	80026d8 <HAL_GetTick>
 8002e3e:	0003      	movs	r3, r0
 8002e40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e44:	f7ff fc48 	bl	80026d8 <HAL_GetTick>
 8002e48:	0002      	movs	r2, r0
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	; 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e2e8      	b.n	8003428 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	4b82      	ldr	r3, [pc, #520]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	029b      	lsls	r3, r3, #10
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x11c>
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e64:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d100      	bne.n	8002e72 <HAL_RCC_OscConfig+0x14a>
 8002e70:	e06c      	b.n	8002f4c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e72:	4b7b      	ldr	r3, [pc, #492]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	220c      	movs	r2, #12
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d00e      	beq.n	8002e9a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e7c:	4b78      	ldr	r3, [pc, #480]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	220c      	movs	r2, #12
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d11f      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x1a0>
 8002e88:	4b75      	ldr	r3, [pc, #468]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	23c0      	movs	r3, #192	; 0xc0
 8002e8e:	025b      	lsls	r3, r3, #9
 8002e90:	401a      	ands	r2, r3
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d116      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9a:	4b71      	ldr	r3, [pc, #452]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x188>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e2bb      	b.n	8003428 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb0:	4b6b      	ldr	r3, [pc, #428]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	22f8      	movs	r2, #248	; 0xf8
 8002eb6:	4393      	bics	r3, r2
 8002eb8:	0019      	movs	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	00da      	lsls	r2, r3, #3
 8002ec0:	4b67      	ldr	r3, [pc, #412]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec6:	e041      	b.n	8002f4c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d024      	beq.n	8002f1a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed0:	4b63      	ldr	r3, [pc, #396]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4b62      	ldr	r3, [pc, #392]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7ff fbfc 	bl	80026d8 <HAL_GetTick>
 8002ee0:	0003      	movs	r3, r0
 8002ee2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee6:	f7ff fbf7 	bl	80026d8 <HAL_GetTick>
 8002eea:	0002      	movs	r2, r0
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e297      	b.n	8003428 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef8:	4b59      	ldr	r3, [pc, #356]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2202      	movs	r2, #2
 8002efe:	4013      	ands	r3, r2
 8002f00:	d0f1      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f02:	4b57      	ldr	r3, [pc, #348]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	22f8      	movs	r2, #248	; 0xf8
 8002f08:	4393      	bics	r3, r2
 8002f0a:	0019      	movs	r1, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	00da      	lsls	r2, r3, #3
 8002f12:	4b53      	ldr	r3, [pc, #332]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002f14:	430a      	orrs	r2, r1
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	e018      	b.n	8002f4c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1a:	4b51      	ldr	r3, [pc, #324]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	4b50      	ldr	r3, [pc, #320]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002f20:	2101      	movs	r1, #1
 8002f22:	438a      	bics	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f26:	f7ff fbd7 	bl	80026d8 <HAL_GetTick>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f30:	f7ff fbd2 	bl	80026d8 <HAL_GetTick>
 8002f34:	0002      	movs	r2, r0
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e272      	b.n	8003428 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f42:	4b47      	ldr	r3, [pc, #284]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2202      	movs	r2, #2
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d1f1      	bne.n	8002f30 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2208      	movs	r2, #8
 8002f52:	4013      	ands	r3, r2
 8002f54:	d036      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d019      	beq.n	8002f92 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5e:	4b40      	ldr	r3, [pc, #256]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002f60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f62:	4b3f      	ldr	r3, [pc, #252]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002f64:	2101      	movs	r1, #1
 8002f66:	430a      	orrs	r2, r1
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6a:	f7ff fbb5 	bl	80026d8 <HAL_GetTick>
 8002f6e:	0003      	movs	r3, r0
 8002f70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f74:	f7ff fbb0 	bl	80026d8 <HAL_GetTick>
 8002f78:	0002      	movs	r2, r0
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e250      	b.n	8003428 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f86:	4b36      	ldr	r3, [pc, #216]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d0f1      	beq.n	8002f74 <HAL_RCC_OscConfig+0x24c>
 8002f90:	e018      	b.n	8002fc4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f92:	4b33      	ldr	r3, [pc, #204]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002f94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f96:	4b32      	ldr	r3, [pc, #200]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002f98:	2101      	movs	r1, #1
 8002f9a:	438a      	bics	r2, r1
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9e:	f7ff fb9b 	bl	80026d8 <HAL_GetTick>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa8:	f7ff fb96 	bl	80026d8 <HAL_GetTick>
 8002fac:	0002      	movs	r2, r0
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e236      	b.n	8003428 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fba:	4b29      	ldr	r3, [pc, #164]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d1f1      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2204      	movs	r2, #4
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d100      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2a8>
 8002fce:	e0b5      	b.n	800313c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd0:	201f      	movs	r0, #31
 8002fd2:	183b      	adds	r3, r7, r0
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd8:	4b21      	ldr	r3, [pc, #132]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002fda:	69da      	ldr	r2, [r3, #28]
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	055b      	lsls	r3, r3, #21
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d110      	bne.n	8003006 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe4:	4b1e      	ldr	r3, [pc, #120]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002fe6:	69da      	ldr	r2, [r3, #28]
 8002fe8:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002fea:	2180      	movs	r1, #128	; 0x80
 8002fec:	0549      	lsls	r1, r1, #21
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	61da      	str	r2, [r3, #28]
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	055b      	lsls	r3, r3, #21
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003000:	183b      	adds	r3, r7, r0
 8003002:	2201      	movs	r2, #1
 8003004:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003006:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_RCC_OscConfig+0x344>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	4013      	ands	r3, r2
 8003010:	d11a      	bne.n	8003048 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003012:	4b16      	ldr	r3, [pc, #88]	; (800306c <HAL_RCC_OscConfig+0x344>)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <HAL_RCC_OscConfig+0x344>)
 8003018:	2180      	movs	r1, #128	; 0x80
 800301a:	0049      	lsls	r1, r1, #1
 800301c:	430a      	orrs	r2, r1
 800301e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003020:	f7ff fb5a 	bl	80026d8 <HAL_GetTick>
 8003024:	0003      	movs	r3, r0
 8003026:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302a:	f7ff fb55 	bl	80026d8 <HAL_GetTick>
 800302e:	0002      	movs	r2, r0
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b64      	cmp	r3, #100	; 0x64
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e1f5      	b.n	8003428 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_RCC_OscConfig+0x344>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4013      	ands	r3, r2
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d10f      	bne.n	8003070 <HAL_RCC_OscConfig+0x348>
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8003052:	6a1a      	ldr	r2, [r3, #32]
 8003054:	4b02      	ldr	r3, [pc, #8]	; (8003060 <HAL_RCC_OscConfig+0x338>)
 8003056:	2101      	movs	r1, #1
 8003058:	430a      	orrs	r2, r1
 800305a:	621a      	str	r2, [r3, #32]
 800305c:	e036      	b.n	80030cc <HAL_RCC_OscConfig+0x3a4>
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	40021000 	.word	0x40021000
 8003064:	fffeffff 	.word	0xfffeffff
 8003068:	fffbffff 	.word	0xfffbffff
 800306c:	40007000 	.word	0x40007000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10c      	bne.n	8003092 <HAL_RCC_OscConfig+0x36a>
 8003078:	4bca      	ldr	r3, [pc, #808]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 800307a:	6a1a      	ldr	r2, [r3, #32]
 800307c:	4bc9      	ldr	r3, [pc, #804]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 800307e:	2101      	movs	r1, #1
 8003080:	438a      	bics	r2, r1
 8003082:	621a      	str	r2, [r3, #32]
 8003084:	4bc7      	ldr	r3, [pc, #796]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 8003086:	6a1a      	ldr	r2, [r3, #32]
 8003088:	4bc6      	ldr	r3, [pc, #792]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 800308a:	2104      	movs	r1, #4
 800308c:	438a      	bics	r2, r1
 800308e:	621a      	str	r2, [r3, #32]
 8003090:	e01c      	b.n	80030cc <HAL_RCC_OscConfig+0x3a4>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b05      	cmp	r3, #5
 8003098:	d10c      	bne.n	80030b4 <HAL_RCC_OscConfig+0x38c>
 800309a:	4bc2      	ldr	r3, [pc, #776]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 800309c:	6a1a      	ldr	r2, [r3, #32]
 800309e:	4bc1      	ldr	r3, [pc, #772]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 80030a0:	2104      	movs	r1, #4
 80030a2:	430a      	orrs	r2, r1
 80030a4:	621a      	str	r2, [r3, #32]
 80030a6:	4bbf      	ldr	r3, [pc, #764]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 80030a8:	6a1a      	ldr	r2, [r3, #32]
 80030aa:	4bbe      	ldr	r3, [pc, #760]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 80030ac:	2101      	movs	r1, #1
 80030ae:	430a      	orrs	r2, r1
 80030b0:	621a      	str	r2, [r3, #32]
 80030b2:	e00b      	b.n	80030cc <HAL_RCC_OscConfig+0x3a4>
 80030b4:	4bbb      	ldr	r3, [pc, #748]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 80030b6:	6a1a      	ldr	r2, [r3, #32]
 80030b8:	4bba      	ldr	r3, [pc, #744]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 80030ba:	2101      	movs	r1, #1
 80030bc:	438a      	bics	r2, r1
 80030be:	621a      	str	r2, [r3, #32]
 80030c0:	4bb8      	ldr	r3, [pc, #736]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 80030c2:	6a1a      	ldr	r2, [r3, #32]
 80030c4:	4bb7      	ldr	r3, [pc, #732]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 80030c6:	2104      	movs	r1, #4
 80030c8:	438a      	bics	r2, r1
 80030ca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d014      	beq.n	80030fe <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d4:	f7ff fb00 	bl	80026d8 <HAL_GetTick>
 80030d8:	0003      	movs	r3, r0
 80030da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030dc:	e009      	b.n	80030f2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030de:	f7ff fafb 	bl	80026d8 <HAL_GetTick>
 80030e2:	0002      	movs	r2, r0
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	4aaf      	ldr	r2, [pc, #700]	; (80033a8 <HAL_RCC_OscConfig+0x680>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e19a      	b.n	8003428 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f2:	4bac      	ldr	r3, [pc, #688]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	2202      	movs	r2, #2
 80030f8:	4013      	ands	r3, r2
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_OscConfig+0x3b6>
 80030fc:	e013      	b.n	8003126 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fe:	f7ff faeb 	bl	80026d8 <HAL_GetTick>
 8003102:	0003      	movs	r3, r0
 8003104:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003106:	e009      	b.n	800311c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003108:	f7ff fae6 	bl	80026d8 <HAL_GetTick>
 800310c:	0002      	movs	r2, r0
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	4aa5      	ldr	r2, [pc, #660]	; (80033a8 <HAL_RCC_OscConfig+0x680>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e185      	b.n	8003428 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800311c:	4ba1      	ldr	r3, [pc, #644]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	2202      	movs	r2, #2
 8003122:	4013      	ands	r3, r2
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003126:	231f      	movs	r3, #31
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d105      	bne.n	800313c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003130:	4b9c      	ldr	r3, [pc, #624]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	4b9b      	ldr	r3, [pc, #620]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 8003136:	499d      	ldr	r1, [pc, #628]	; (80033ac <HAL_RCC_OscConfig+0x684>)
 8003138:	400a      	ands	r2, r1
 800313a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2210      	movs	r2, #16
 8003142:	4013      	ands	r3, r2
 8003144:	d063      	beq.n	800320e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d12a      	bne.n	80031a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800314e:	4b95      	ldr	r3, [pc, #596]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 8003150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003152:	4b94      	ldr	r3, [pc, #592]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 8003154:	2104      	movs	r1, #4
 8003156:	430a      	orrs	r2, r1
 8003158:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800315a:	4b92      	ldr	r3, [pc, #584]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 800315c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800315e:	4b91      	ldr	r3, [pc, #580]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 8003160:	2101      	movs	r1, #1
 8003162:	430a      	orrs	r2, r1
 8003164:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003166:	f7ff fab7 	bl	80026d8 <HAL_GetTick>
 800316a:	0003      	movs	r3, r0
 800316c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003170:	f7ff fab2 	bl	80026d8 <HAL_GetTick>
 8003174:	0002      	movs	r2, r0
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e152      	b.n	8003428 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003182:	4b88      	ldr	r3, [pc, #544]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 8003184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003186:	2202      	movs	r2, #2
 8003188:	4013      	ands	r3, r2
 800318a:	d0f1      	beq.n	8003170 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800318c:	4b85      	ldr	r3, [pc, #532]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 800318e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003190:	22f8      	movs	r2, #248	; 0xf8
 8003192:	4393      	bics	r3, r2
 8003194:	0019      	movs	r1, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	00da      	lsls	r2, r3, #3
 800319c:	4b81      	ldr	r3, [pc, #516]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 800319e:	430a      	orrs	r2, r1
 80031a0:	635a      	str	r2, [r3, #52]	; 0x34
 80031a2:	e034      	b.n	800320e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	3305      	adds	r3, #5
 80031aa:	d111      	bne.n	80031d0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80031ac:	4b7d      	ldr	r3, [pc, #500]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 80031ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031b0:	4b7c      	ldr	r3, [pc, #496]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 80031b2:	2104      	movs	r1, #4
 80031b4:	438a      	bics	r2, r1
 80031b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80031b8:	4b7a      	ldr	r3, [pc, #488]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 80031ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031bc:	22f8      	movs	r2, #248	; 0xf8
 80031be:	4393      	bics	r3, r2
 80031c0:	0019      	movs	r1, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	00da      	lsls	r2, r3, #3
 80031c8:	4b76      	ldr	r3, [pc, #472]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 80031ca:	430a      	orrs	r2, r1
 80031cc:	635a      	str	r2, [r3, #52]	; 0x34
 80031ce:	e01e      	b.n	800320e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80031d0:	4b74      	ldr	r3, [pc, #464]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 80031d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d4:	4b73      	ldr	r3, [pc, #460]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 80031d6:	2104      	movs	r1, #4
 80031d8:	430a      	orrs	r2, r1
 80031da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80031dc:	4b71      	ldr	r3, [pc, #452]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 80031de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031e0:	4b70      	ldr	r3, [pc, #448]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 80031e2:	2101      	movs	r1, #1
 80031e4:	438a      	bics	r2, r1
 80031e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e8:	f7ff fa76 	bl	80026d8 <HAL_GetTick>
 80031ec:	0003      	movs	r3, r0
 80031ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80031f2:	f7ff fa71 	bl	80026d8 <HAL_GetTick>
 80031f6:	0002      	movs	r2, r0
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e111      	b.n	8003428 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003204:	4b67      	ldr	r3, [pc, #412]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 8003206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003208:	2202      	movs	r2, #2
 800320a:	4013      	ands	r3, r2
 800320c:	d1f1      	bne.n	80031f2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2220      	movs	r2, #32
 8003214:	4013      	ands	r3, r2
 8003216:	d05c      	beq.n	80032d2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003218:	4b62      	ldr	r3, [pc, #392]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	220c      	movs	r2, #12
 800321e:	4013      	ands	r3, r2
 8003220:	2b0c      	cmp	r3, #12
 8003222:	d00e      	beq.n	8003242 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003224:	4b5f      	ldr	r3, [pc, #380]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	220c      	movs	r2, #12
 800322a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800322c:	2b08      	cmp	r3, #8
 800322e:	d114      	bne.n	800325a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003230:	4b5c      	ldr	r3, [pc, #368]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	23c0      	movs	r3, #192	; 0xc0
 8003236:	025b      	lsls	r3, r3, #9
 8003238:	401a      	ands	r2, r3
 800323a:	23c0      	movs	r3, #192	; 0xc0
 800323c:	025b      	lsls	r3, r3, #9
 800323e:	429a      	cmp	r2, r3
 8003240:	d10b      	bne.n	800325a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003242:	4b58      	ldr	r3, [pc, #352]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 8003244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	025b      	lsls	r3, r3, #9
 800324a:	4013      	ands	r3, r2
 800324c:	d040      	beq.n	80032d0 <HAL_RCC_OscConfig+0x5a8>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d03c      	beq.n	80032d0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e0e6      	b.n	8003428 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d01b      	beq.n	800329a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003262:	4b50      	ldr	r3, [pc, #320]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 8003264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003266:	4b4f      	ldr	r3, [pc, #316]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 8003268:	2180      	movs	r1, #128	; 0x80
 800326a:	0249      	lsls	r1, r1, #9
 800326c:	430a      	orrs	r2, r1
 800326e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7ff fa32 	bl	80026d8 <HAL_GetTick>
 8003274:	0003      	movs	r3, r0
 8003276:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800327a:	f7ff fa2d 	bl	80026d8 <HAL_GetTick>
 800327e:	0002      	movs	r2, r0
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e0cd      	b.n	8003428 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800328c:	4b45      	ldr	r3, [pc, #276]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 800328e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	025b      	lsls	r3, r3, #9
 8003294:	4013      	ands	r3, r2
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x552>
 8003298:	e01b      	b.n	80032d2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800329a:	4b42      	ldr	r3, [pc, #264]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 800329c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800329e:	4b41      	ldr	r3, [pc, #260]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 80032a0:	4943      	ldr	r1, [pc, #268]	; (80033b0 <HAL_RCC_OscConfig+0x688>)
 80032a2:	400a      	ands	r2, r1
 80032a4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a6:	f7ff fa17 	bl	80026d8 <HAL_GetTick>
 80032aa:	0003      	movs	r3, r0
 80032ac:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032b0:	f7ff fa12 	bl	80026d8 <HAL_GetTick>
 80032b4:	0002      	movs	r2, r0
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e0b2      	b.n	8003428 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80032c2:	4b38      	ldr	r3, [pc, #224]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 80032c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	025b      	lsls	r3, r3, #9
 80032ca:	4013      	ands	r3, r2
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x588>
 80032ce:	e000      	b.n	80032d2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80032d0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d100      	bne.n	80032dc <HAL_RCC_OscConfig+0x5b4>
 80032da:	e0a4      	b.n	8003426 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032dc:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	220c      	movs	r2, #12
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d100      	bne.n	80032ea <HAL_RCC_OscConfig+0x5c2>
 80032e8:	e078      	b.n	80033dc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d14c      	bne.n	800338c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f2:	4b2c      	ldr	r3, [pc, #176]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4b2b      	ldr	r3, [pc, #172]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 80032f8:	492e      	ldr	r1, [pc, #184]	; (80033b4 <HAL_RCC_OscConfig+0x68c>)
 80032fa:	400a      	ands	r2, r1
 80032fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7ff f9eb 	bl	80026d8 <HAL_GetTick>
 8003302:	0003      	movs	r3, r0
 8003304:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003308:	f7ff f9e6 	bl	80026d8 <HAL_GetTick>
 800330c:	0002      	movs	r2, r0
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e086      	b.n	8003428 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331a:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	049b      	lsls	r3, r3, #18
 8003322:	4013      	ands	r3, r2
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003326:	4b1f      	ldr	r3, [pc, #124]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	220f      	movs	r2, #15
 800332c:	4393      	bics	r3, r2
 800332e:	0019      	movs	r1, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003334:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 8003336:	430a      	orrs	r2, r1
 8003338:	62da      	str	r2, [r3, #44]	; 0x2c
 800333a:	4b1a      	ldr	r3, [pc, #104]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4a1e      	ldr	r2, [pc, #120]	; (80033b8 <HAL_RCC_OscConfig+0x690>)
 8003340:	4013      	ands	r3, r2
 8003342:	0019      	movs	r1, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	431a      	orrs	r2, r3
 800334e:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 8003350:	430a      	orrs	r2, r1
 8003352:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003354:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 800335a:	2180      	movs	r1, #128	; 0x80
 800335c:	0449      	lsls	r1, r1, #17
 800335e:	430a      	orrs	r2, r1
 8003360:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003362:	f7ff f9b9 	bl	80026d8 <HAL_GetTick>
 8003366:	0003      	movs	r3, r0
 8003368:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336c:	f7ff f9b4 	bl	80026d8 <HAL_GetTick>
 8003370:	0002      	movs	r2, r0
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e054      	b.n	8003428 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	049b      	lsls	r3, r3, #18
 8003386:	4013      	ands	r3, r2
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x644>
 800338a:	e04c      	b.n	8003426 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <HAL_RCC_OscConfig+0x67c>)
 8003392:	4908      	ldr	r1, [pc, #32]	; (80033b4 <HAL_RCC_OscConfig+0x68c>)
 8003394:	400a      	ands	r2, r1
 8003396:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7ff f99e 	bl	80026d8 <HAL_GetTick>
 800339c:	0003      	movs	r3, r0
 800339e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a0:	e015      	b.n	80033ce <HAL_RCC_OscConfig+0x6a6>
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	40021000 	.word	0x40021000
 80033a8:	00001388 	.word	0x00001388
 80033ac:	efffffff 	.word	0xefffffff
 80033b0:	fffeffff 	.word	0xfffeffff
 80033b4:	feffffff 	.word	0xfeffffff
 80033b8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033bc:	f7ff f98c 	bl	80026d8 <HAL_GetTick>
 80033c0:	0002      	movs	r2, r0
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e02c      	b.n	8003428 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ce:	4b18      	ldr	r3, [pc, #96]	; (8003430 <HAL_RCC_OscConfig+0x708>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	049b      	lsls	r3, r3, #18
 80033d6:	4013      	ands	r3, r2
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x694>
 80033da:	e024      	b.n	8003426 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e01f      	b.n	8003428 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80033e8:	4b11      	ldr	r3, [pc, #68]	; (8003430 <HAL_RCC_OscConfig+0x708>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80033ee:	4b10      	ldr	r3, [pc, #64]	; (8003430 <HAL_RCC_OscConfig+0x708>)
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	23c0      	movs	r3, #192	; 0xc0
 80033f8:	025b      	lsls	r3, r3, #9
 80033fa:	401a      	ands	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	429a      	cmp	r2, r3
 8003402:	d10e      	bne.n	8003422 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	220f      	movs	r2, #15
 8003408:	401a      	ands	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d107      	bne.n	8003422 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	23f0      	movs	r3, #240	; 0xf0
 8003416:	039b      	lsls	r3, r3, #14
 8003418:	401a      	ands	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800341e:	429a      	cmp	r2, r3
 8003420:	d001      	beq.n	8003426 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	0018      	movs	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	b008      	add	sp, #32
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40021000 	.word	0x40021000

08003434 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0bf      	b.n	80035c8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003448:	4b61      	ldr	r3, [pc, #388]	; (80035d0 <HAL_RCC_ClockConfig+0x19c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2201      	movs	r2, #1
 800344e:	4013      	ands	r3, r2
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d911      	bls.n	800347a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b5e      	ldr	r3, [pc, #376]	; (80035d0 <HAL_RCC_ClockConfig+0x19c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2201      	movs	r2, #1
 800345c:	4393      	bics	r3, r2
 800345e:	0019      	movs	r1, r3
 8003460:	4b5b      	ldr	r3, [pc, #364]	; (80035d0 <HAL_RCC_ClockConfig+0x19c>)
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003468:	4b59      	ldr	r3, [pc, #356]	; (80035d0 <HAL_RCC_ClockConfig+0x19c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2201      	movs	r2, #1
 800346e:	4013      	ands	r3, r2
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d001      	beq.n	800347a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e0a6      	b.n	80035c8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2202      	movs	r2, #2
 8003480:	4013      	ands	r3, r2
 8003482:	d015      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2204      	movs	r2, #4
 800348a:	4013      	ands	r3, r2
 800348c:	d006      	beq.n	800349c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800348e:	4b51      	ldr	r3, [pc, #324]	; (80035d4 <HAL_RCC_ClockConfig+0x1a0>)
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	4b50      	ldr	r3, [pc, #320]	; (80035d4 <HAL_RCC_ClockConfig+0x1a0>)
 8003494:	21e0      	movs	r1, #224	; 0xe0
 8003496:	00c9      	lsls	r1, r1, #3
 8003498:	430a      	orrs	r2, r1
 800349a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800349c:	4b4d      	ldr	r3, [pc, #308]	; (80035d4 <HAL_RCC_ClockConfig+0x1a0>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	22f0      	movs	r2, #240	; 0xf0
 80034a2:	4393      	bics	r3, r2
 80034a4:	0019      	movs	r1, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	4b4a      	ldr	r3, [pc, #296]	; (80035d4 <HAL_RCC_ClockConfig+0x1a0>)
 80034ac:	430a      	orrs	r2, r1
 80034ae:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2201      	movs	r2, #1
 80034b6:	4013      	ands	r3, r2
 80034b8:	d04c      	beq.n	8003554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d107      	bne.n	80034d2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c2:	4b44      	ldr	r3, [pc, #272]	; (80035d4 <HAL_RCC_ClockConfig+0x1a0>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	029b      	lsls	r3, r3, #10
 80034ca:	4013      	ands	r3, r2
 80034cc:	d120      	bne.n	8003510 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e07a      	b.n	80035c8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d107      	bne.n	80034ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034da:	4b3e      	ldr	r3, [pc, #248]	; (80035d4 <HAL_RCC_ClockConfig+0x1a0>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	2380      	movs	r3, #128	; 0x80
 80034e0:	049b      	lsls	r3, r3, #18
 80034e2:	4013      	ands	r3, r2
 80034e4:	d114      	bne.n	8003510 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e06e      	b.n	80035c8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d107      	bne.n	8003502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80034f2:	4b38      	ldr	r3, [pc, #224]	; (80035d4 <HAL_RCC_ClockConfig+0x1a0>)
 80034f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034f6:	2380      	movs	r3, #128	; 0x80
 80034f8:	025b      	lsls	r3, r3, #9
 80034fa:	4013      	ands	r3, r2
 80034fc:	d108      	bne.n	8003510 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e062      	b.n	80035c8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003502:	4b34      	ldr	r3, [pc, #208]	; (80035d4 <HAL_RCC_ClockConfig+0x1a0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2202      	movs	r2, #2
 8003508:	4013      	ands	r3, r2
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e05b      	b.n	80035c8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003510:	4b30      	ldr	r3, [pc, #192]	; (80035d4 <HAL_RCC_ClockConfig+0x1a0>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2203      	movs	r2, #3
 8003516:	4393      	bics	r3, r2
 8003518:	0019      	movs	r1, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	4b2d      	ldr	r3, [pc, #180]	; (80035d4 <HAL_RCC_ClockConfig+0x1a0>)
 8003520:	430a      	orrs	r2, r1
 8003522:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003524:	f7ff f8d8 	bl	80026d8 <HAL_GetTick>
 8003528:	0003      	movs	r3, r0
 800352a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352c:	e009      	b.n	8003542 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800352e:	f7ff f8d3 	bl	80026d8 <HAL_GetTick>
 8003532:	0002      	movs	r2, r0
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	4a27      	ldr	r2, [pc, #156]	; (80035d8 <HAL_RCC_ClockConfig+0x1a4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e042      	b.n	80035c8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003542:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <HAL_RCC_ClockConfig+0x1a0>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	220c      	movs	r2, #12
 8003548:	401a      	ands	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	429a      	cmp	r2, r3
 8003552:	d1ec      	bne.n	800352e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003554:	4b1e      	ldr	r3, [pc, #120]	; (80035d0 <HAL_RCC_ClockConfig+0x19c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2201      	movs	r2, #1
 800355a:	4013      	ands	r3, r2
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d211      	bcs.n	8003586 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003562:	4b1b      	ldr	r3, [pc, #108]	; (80035d0 <HAL_RCC_ClockConfig+0x19c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2201      	movs	r2, #1
 8003568:	4393      	bics	r3, r2
 800356a:	0019      	movs	r1, r3
 800356c:	4b18      	ldr	r3, [pc, #96]	; (80035d0 <HAL_RCC_ClockConfig+0x19c>)
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003574:	4b16      	ldr	r3, [pc, #88]	; (80035d0 <HAL_RCC_ClockConfig+0x19c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2201      	movs	r2, #1
 800357a:	4013      	ands	r3, r2
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d001      	beq.n	8003586 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e020      	b.n	80035c8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2204      	movs	r2, #4
 800358c:	4013      	ands	r3, r2
 800358e:	d009      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003590:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <HAL_RCC_ClockConfig+0x1a0>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	4a11      	ldr	r2, [pc, #68]	; (80035dc <HAL_RCC_ClockConfig+0x1a8>)
 8003596:	4013      	ands	r3, r2
 8003598:	0019      	movs	r1, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <HAL_RCC_ClockConfig+0x1a0>)
 80035a0:	430a      	orrs	r2, r1
 80035a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035a4:	f000 f820 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 80035a8:	0001      	movs	r1, r0
 80035aa:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <HAL_RCC_ClockConfig+0x1a0>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	091b      	lsrs	r3, r3, #4
 80035b0:	220f      	movs	r2, #15
 80035b2:	4013      	ands	r3, r2
 80035b4:	4a0a      	ldr	r2, [pc, #40]	; (80035e0 <HAL_RCC_ClockConfig+0x1ac>)
 80035b6:	5cd3      	ldrb	r3, [r2, r3]
 80035b8:	000a      	movs	r2, r1
 80035ba:	40da      	lsrs	r2, r3
 80035bc:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <HAL_RCC_ClockConfig+0x1b0>)
 80035be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80035c0:	2000      	movs	r0, #0
 80035c2:	f7ff f843 	bl	800264c <HAL_InitTick>
  
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b004      	add	sp, #16
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40022000 	.word	0x40022000
 80035d4:	40021000 	.word	0x40021000
 80035d8:	00001388 	.word	0x00001388
 80035dc:	fffff8ff 	.word	0xfffff8ff
 80035e0:	08006f70 	.word	0x08006f70
 80035e4:	20000000 	.word	0x20000000

080035e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b08f      	sub	sp, #60	; 0x3c
 80035ec:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80035ee:	2314      	movs	r3, #20
 80035f0:	18fb      	adds	r3, r7, r3
 80035f2:	4a38      	ldr	r2, [pc, #224]	; (80036d4 <HAL_RCC_GetSysClockFreq+0xec>)
 80035f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80035f6:	c313      	stmia	r3!, {r0, r1, r4}
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80035fc:	1d3b      	adds	r3, r7, #4
 80035fe:	4a36      	ldr	r2, [pc, #216]	; (80036d8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003600:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003602:	c313      	stmia	r3!, {r0, r1, r4}
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800360c:	2300      	movs	r3, #0
 800360e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003610:	2300      	movs	r3, #0
 8003612:	637b      	str	r3, [r7, #52]	; 0x34
 8003614:	2300      	movs	r3, #0
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800361c:	4b2f      	ldr	r3, [pc, #188]	; (80036dc <HAL_RCC_GetSysClockFreq+0xf4>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003624:	220c      	movs	r2, #12
 8003626:	4013      	ands	r3, r2
 8003628:	2b0c      	cmp	r3, #12
 800362a:	d047      	beq.n	80036bc <HAL_RCC_GetSysClockFreq+0xd4>
 800362c:	d849      	bhi.n	80036c2 <HAL_RCC_GetSysClockFreq+0xda>
 800362e:	2b04      	cmp	r3, #4
 8003630:	d002      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0x50>
 8003632:	2b08      	cmp	r3, #8
 8003634:	d003      	beq.n	800363e <HAL_RCC_GetSysClockFreq+0x56>
 8003636:	e044      	b.n	80036c2 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003638:	4b29      	ldr	r3, [pc, #164]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800363a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800363c:	e044      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	0c9b      	lsrs	r3, r3, #18
 8003642:	220f      	movs	r2, #15
 8003644:	4013      	ands	r3, r2
 8003646:	2214      	movs	r2, #20
 8003648:	18ba      	adds	r2, r7, r2
 800364a:	5cd3      	ldrb	r3, [r2, r3]
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800364e:	4b23      	ldr	r3, [pc, #140]	; (80036dc <HAL_RCC_GetSysClockFreq+0xf4>)
 8003650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003652:	220f      	movs	r2, #15
 8003654:	4013      	ands	r3, r2
 8003656:	1d3a      	adds	r2, r7, #4
 8003658:	5cd3      	ldrb	r3, [r2, r3]
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800365c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800365e:	23c0      	movs	r3, #192	; 0xc0
 8003660:	025b      	lsls	r3, r3, #9
 8003662:	401a      	ands	r2, r3
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	025b      	lsls	r3, r3, #9
 8003668:	429a      	cmp	r2, r3
 800366a:	d109      	bne.n	8003680 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800366c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800366e:	481c      	ldr	r0, [pc, #112]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003670:	f7fc fd64 	bl	800013c <__udivsi3>
 8003674:	0003      	movs	r3, r0
 8003676:	001a      	movs	r2, r3
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	4353      	muls	r3, r2
 800367c:	637b      	str	r3, [r7, #52]	; 0x34
 800367e:	e01a      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003682:	23c0      	movs	r3, #192	; 0xc0
 8003684:	025b      	lsls	r3, r3, #9
 8003686:	401a      	ands	r2, r3
 8003688:	23c0      	movs	r3, #192	; 0xc0
 800368a:	025b      	lsls	r3, r3, #9
 800368c:	429a      	cmp	r2, r3
 800368e:	d109      	bne.n	80036a4 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003692:	4814      	ldr	r0, [pc, #80]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003694:	f7fc fd52 	bl	800013c <__udivsi3>
 8003698:	0003      	movs	r3, r0
 800369a:	001a      	movs	r2, r3
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	4353      	muls	r3, r2
 80036a0:	637b      	str	r3, [r7, #52]	; 0x34
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036a6:	480e      	ldr	r0, [pc, #56]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036a8:	f7fc fd48 	bl	800013c <__udivsi3>
 80036ac:	0003      	movs	r3, r0
 80036ae:	001a      	movs	r2, r3
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	4353      	muls	r3, r2
 80036b4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80036b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80036ba:	e005      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80036bc:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80036be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80036c0:	e002      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036c2:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036c4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80036c6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80036ca:	0018      	movs	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b00f      	add	sp, #60	; 0x3c
 80036d0:	bd90      	pop	{r4, r7, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	08006ed0 	.word	0x08006ed0
 80036d8:	08006ee0 	.word	0x08006ee0
 80036dc:	40021000 	.word	0x40021000
 80036e0:	007a1200 	.word	0x007a1200
 80036e4:	02dc6c00 	.word	0x02dc6c00

080036e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ec:	4b02      	ldr	r3, [pc, #8]	; (80036f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	0018      	movs	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	20000000 	.word	0x20000000

080036fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003700:	f7ff fff2 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003704:	0001      	movs	r1, r0
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	2207      	movs	r2, #7
 800370e:	4013      	ands	r3, r2
 8003710:	4a04      	ldr	r2, [pc, #16]	; (8003724 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003712:	5cd3      	ldrb	r3, [r2, r3]
 8003714:	40d9      	lsrs	r1, r3
 8003716:	000b      	movs	r3, r1
}    
 8003718:	0018      	movs	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	40021000 	.word	0x40021000
 8003724:	08006f80 	.word	0x08006f80

08003728 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	025b      	lsls	r3, r3, #9
 8003740:	4013      	ands	r3, r2
 8003742:	d100      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003744:	e08e      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003746:	2017      	movs	r0, #23
 8003748:	183b      	adds	r3, r7, r0
 800374a:	2200      	movs	r2, #0
 800374c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800374e:	4b6e      	ldr	r3, [pc, #440]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003750:	69da      	ldr	r2, [r3, #28]
 8003752:	2380      	movs	r3, #128	; 0x80
 8003754:	055b      	lsls	r3, r3, #21
 8003756:	4013      	ands	r3, r2
 8003758:	d110      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800375a:	4b6b      	ldr	r3, [pc, #428]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	4b6a      	ldr	r3, [pc, #424]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003760:	2180      	movs	r1, #128	; 0x80
 8003762:	0549      	lsls	r1, r1, #21
 8003764:	430a      	orrs	r2, r1
 8003766:	61da      	str	r2, [r3, #28]
 8003768:	4b67      	ldr	r3, [pc, #412]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	055b      	lsls	r3, r3, #21
 8003770:	4013      	ands	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003776:	183b      	adds	r3, r7, r0
 8003778:	2201      	movs	r2, #1
 800377a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377c:	4b63      	ldr	r3, [pc, #396]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4013      	ands	r3, r2
 8003786:	d11a      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003788:	4b60      	ldr	r3, [pc, #384]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	4b5f      	ldr	r3, [pc, #380]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800378e:	2180      	movs	r1, #128	; 0x80
 8003790:	0049      	lsls	r1, r1, #1
 8003792:	430a      	orrs	r2, r1
 8003794:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003796:	f7fe ff9f 	bl	80026d8 <HAL_GetTick>
 800379a:	0003      	movs	r3, r0
 800379c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379e:	e008      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a0:	f7fe ff9a 	bl	80026d8 <HAL_GetTick>
 80037a4:	0002      	movs	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	; 0x64
 80037ac:	d901      	bls.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e0a6      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b2:	4b56      	ldr	r3, [pc, #344]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	2380      	movs	r3, #128	; 0x80
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4013      	ands	r3, r2
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037be:	4b52      	ldr	r3, [pc, #328]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037c0:	6a1a      	ldr	r2, [r3, #32]
 80037c2:	23c0      	movs	r3, #192	; 0xc0
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4013      	ands	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d034      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	23c0      	movs	r3, #192	; 0xc0
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4013      	ands	r3, r2
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d02c      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037e0:	4b49      	ldr	r3, [pc, #292]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	4a4a      	ldr	r2, [pc, #296]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037ea:	4b47      	ldr	r3, [pc, #284]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037ec:	6a1a      	ldr	r2, [r3, #32]
 80037ee:	4b46      	ldr	r3, [pc, #280]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037f0:	2180      	movs	r1, #128	; 0x80
 80037f2:	0249      	lsls	r1, r1, #9
 80037f4:	430a      	orrs	r2, r1
 80037f6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037f8:	4b43      	ldr	r3, [pc, #268]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037fa:	6a1a      	ldr	r2, [r3, #32]
 80037fc:	4b42      	ldr	r3, [pc, #264]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037fe:	4945      	ldr	r1, [pc, #276]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003800:	400a      	ands	r2, r1
 8003802:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003804:	4b40      	ldr	r3, [pc, #256]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	4013      	ands	r3, r2
 8003810:	d013      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003812:	f7fe ff61 	bl	80026d8 <HAL_GetTick>
 8003816:	0003      	movs	r3, r0
 8003818:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381a:	e009      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381c:	f7fe ff5c 	bl	80026d8 <HAL_GetTick>
 8003820:	0002      	movs	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	4a3c      	ldr	r2, [pc, #240]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d901      	bls.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e067      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003830:	4b35      	ldr	r3, [pc, #212]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	2202      	movs	r2, #2
 8003836:	4013      	ands	r3, r2
 8003838:	d0f0      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800383a:	4b33      	ldr	r3, [pc, #204]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	4a34      	ldr	r2, [pc, #208]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003840:	4013      	ands	r3, r2
 8003842:	0019      	movs	r1, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	4b2f      	ldr	r3, [pc, #188]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800384a:	430a      	orrs	r2, r1
 800384c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800384e:	2317      	movs	r3, #23
 8003850:	18fb      	adds	r3, r7, r3
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d105      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003858:	4b2b      	ldr	r3, [pc, #172]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	4b2a      	ldr	r3, [pc, #168]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800385e:	492f      	ldr	r1, [pc, #188]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003860:	400a      	ands	r2, r1
 8003862:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2201      	movs	r2, #1
 800386a:	4013      	ands	r3, r2
 800386c:	d009      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800386e:	4b26      	ldr	r3, [pc, #152]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	2203      	movs	r2, #3
 8003874:	4393      	bics	r3, r2
 8003876:	0019      	movs	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	4b22      	ldr	r3, [pc, #136]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800387e:	430a      	orrs	r2, r1
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2202      	movs	r2, #2
 8003888:	4013      	ands	r3, r2
 800388a:	d009      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800388c:	4b1e      	ldr	r3, [pc, #120]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	4a23      	ldr	r2, [pc, #140]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003892:	4013      	ands	r3, r2
 8003894:	0019      	movs	r1, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800389c:	430a      	orrs	r2, r1
 800389e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	02db      	lsls	r3, r3, #11
 80038a8:	4013      	ands	r3, r2
 80038aa:	d009      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038ac:	4b16      	ldr	r3, [pc, #88]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b0:	4a1c      	ldr	r2, [pc, #112]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	0019      	movs	r1, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	4b13      	ldr	r3, [pc, #76]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038bc:	430a      	orrs	r2, r1
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2220      	movs	r2, #32
 80038c6:	4013      	ands	r3, r2
 80038c8:	d009      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ca:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	2210      	movs	r2, #16
 80038d0:	4393      	bics	r3, r2
 80038d2:	0019      	movs	r1, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	695a      	ldr	r2, [r3, #20]
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038da:	430a      	orrs	r2, r1
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4013      	ands	r3, r2
 80038e8:	d009      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038ea:	4b07      	ldr	r3, [pc, #28]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	2240      	movs	r2, #64	; 0x40
 80038f0:	4393      	bics	r3, r2
 80038f2:	0019      	movs	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699a      	ldr	r2, [r3, #24]
 80038f8:	4b03      	ldr	r3, [pc, #12]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038fa:	430a      	orrs	r2, r1
 80038fc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	0018      	movs	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	b006      	add	sp, #24
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40021000 	.word	0x40021000
 800390c:	40007000 	.word	0x40007000
 8003910:	fffffcff 	.word	0xfffffcff
 8003914:	fffeffff 	.word	0xfffeffff
 8003918:	00001388 	.word	0x00001388
 800391c:	efffffff 	.word	0xefffffff
 8003920:	fffcffff 	.word	0xfffcffff
 8003924:	fff3ffff 	.word	0xfff3ffff

08003928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e042      	b.n	80039c0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	223d      	movs	r2, #61	; 0x3d
 800393e:	5c9b      	ldrb	r3, [r3, r2]
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d107      	bne.n	8003956 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	223c      	movs	r2, #60	; 0x3c
 800394a:	2100      	movs	r1, #0
 800394c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	0018      	movs	r0, r3
 8003952:	f7fe fd7d 	bl	8002450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	223d      	movs	r2, #61	; 0x3d
 800395a:	2102      	movs	r1, #2
 800395c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3304      	adds	r3, #4
 8003966:	0019      	movs	r1, r3
 8003968:	0010      	movs	r0, r2
 800396a:	f000 f82d 	bl	80039c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2246      	movs	r2, #70	; 0x46
 8003972:	2101      	movs	r1, #1
 8003974:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	223e      	movs	r2, #62	; 0x3e
 800397a:	2101      	movs	r1, #1
 800397c:	5499      	strb	r1, [r3, r2]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	223f      	movs	r2, #63	; 0x3f
 8003982:	2101      	movs	r1, #1
 8003984:	5499      	strb	r1, [r3, r2]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2240      	movs	r2, #64	; 0x40
 800398a:	2101      	movs	r1, #1
 800398c:	5499      	strb	r1, [r3, r2]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2241      	movs	r2, #65	; 0x41
 8003992:	2101      	movs	r1, #1
 8003994:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2242      	movs	r2, #66	; 0x42
 800399a:	2101      	movs	r1, #1
 800399c:	5499      	strb	r1, [r3, r2]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2243      	movs	r2, #67	; 0x43
 80039a2:	2101      	movs	r1, #1
 80039a4:	5499      	strb	r1, [r3, r2]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2244      	movs	r2, #68	; 0x44
 80039aa:	2101      	movs	r1, #1
 80039ac:	5499      	strb	r1, [r3, r2]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2245      	movs	r2, #69	; 0x45
 80039b2:	2101      	movs	r1, #1
 80039b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	223d      	movs	r2, #61	; 0x3d
 80039ba:	2101      	movs	r1, #1
 80039bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b002      	add	sp, #8
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a34      	ldr	r2, [pc, #208]	; (8003aac <TIM_Base_SetConfig+0xe4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d008      	beq.n	80039f2 <TIM_Base_SetConfig+0x2a>
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	2380      	movs	r3, #128	; 0x80
 80039e4:	05db      	lsls	r3, r3, #23
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d003      	beq.n	80039f2 <TIM_Base_SetConfig+0x2a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a30      	ldr	r2, [pc, #192]	; (8003ab0 <TIM_Base_SetConfig+0xe8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d108      	bne.n	8003a04 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2270      	movs	r2, #112	; 0x70
 80039f6:	4393      	bics	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a29      	ldr	r2, [pc, #164]	; (8003aac <TIM_Base_SetConfig+0xe4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d018      	beq.n	8003a3e <TIM_Base_SetConfig+0x76>
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	05db      	lsls	r3, r3, #23
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d013      	beq.n	8003a3e <TIM_Base_SetConfig+0x76>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a25      	ldr	r2, [pc, #148]	; (8003ab0 <TIM_Base_SetConfig+0xe8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00f      	beq.n	8003a3e <TIM_Base_SetConfig+0x76>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a24      	ldr	r2, [pc, #144]	; (8003ab4 <TIM_Base_SetConfig+0xec>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00b      	beq.n	8003a3e <TIM_Base_SetConfig+0x76>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a23      	ldr	r2, [pc, #140]	; (8003ab8 <TIM_Base_SetConfig+0xf0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d007      	beq.n	8003a3e <TIM_Base_SetConfig+0x76>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a22      	ldr	r2, [pc, #136]	; (8003abc <TIM_Base_SetConfig+0xf4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d003      	beq.n	8003a3e <TIM_Base_SetConfig+0x76>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a21      	ldr	r2, [pc, #132]	; (8003ac0 <TIM_Base_SetConfig+0xf8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d108      	bne.n	8003a50 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4a20      	ldr	r2, [pc, #128]	; (8003ac4 <TIM_Base_SetConfig+0xfc>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2280      	movs	r2, #128	; 0x80
 8003a54:	4393      	bics	r3, r2
 8003a56:	001a      	movs	r2, r3
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a0c      	ldr	r2, [pc, #48]	; (8003aac <TIM_Base_SetConfig+0xe4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00b      	beq.n	8003a96 <TIM_Base_SetConfig+0xce>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a0d      	ldr	r2, [pc, #52]	; (8003ab8 <TIM_Base_SetConfig+0xf0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <TIM_Base_SetConfig+0xce>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a0c      	ldr	r2, [pc, #48]	; (8003abc <TIM_Base_SetConfig+0xf4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d003      	beq.n	8003a96 <TIM_Base_SetConfig+0xce>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a0b      	ldr	r2, [pc, #44]	; (8003ac0 <TIM_Base_SetConfig+0xf8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d103      	bne.n	8003a9e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	615a      	str	r2, [r3, #20]
}
 8003aa4:	46c0      	nop			; (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b004      	add	sp, #16
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40012c00 	.word	0x40012c00
 8003ab0:	40000400 	.word	0x40000400
 8003ab4:	40002000 	.word	0x40002000
 8003ab8:	40014000 	.word	0x40014000
 8003abc:	40014400 	.word	0x40014400
 8003ac0:	40014800 	.word	0x40014800
 8003ac4:	fffffcff 	.word	0xfffffcff

08003ac8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e044      	b.n	8003b64 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d107      	bne.n	8003af2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2274      	movs	r2, #116	; 0x74
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	0018      	movs	r0, r3
 8003aee:	f7fe fccf 	bl	8002490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2224      	movs	r2, #36	; 0x24
 8003af6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2101      	movs	r1, #1
 8003b04:	438a      	bics	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f000 f830 	bl	8003b70 <UART_SetConfig>
 8003b10:	0003      	movs	r3, r0
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e024      	b.n	8003b64 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	0018      	movs	r0, r3
 8003b26:	f000 fa0b 	bl	8003f40 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	490d      	ldr	r1, [pc, #52]	; (8003b6c <HAL_UART_Init+0xa4>)
 8003b36:	400a      	ands	r2, r1
 8003b38:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	212a      	movs	r1, #42	; 0x2a
 8003b46:	438a      	bics	r2, r1
 8003b48:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2101      	movs	r1, #1
 8003b56:	430a      	orrs	r2, r1
 8003b58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f000 faa3 	bl	80040a8 <UART_CheckIdleState>
 8003b62:	0003      	movs	r3, r0
}
 8003b64:	0018      	movs	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b002      	add	sp, #8
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	ffffb7ff 	.word	0xffffb7ff

08003b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b78:	231e      	movs	r3, #30
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4abe      	ldr	r2, [pc, #760]	; (8003e98 <UART_SetConfig+0x328>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	0019      	movs	r1, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	4ab9      	ldr	r2, [pc, #740]	; (8003e9c <UART_SetConfig+0x32c>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	0019      	movs	r1, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	4ab0      	ldr	r2, [pc, #704]	; (8003ea0 <UART_SetConfig+0x330>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	0019      	movs	r1, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4aac      	ldr	r2, [pc, #688]	; (8003ea4 <UART_SetConfig+0x334>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d127      	bne.n	8003c46 <UART_SetConfig+0xd6>
 8003bf6:	4bac      	ldr	r3, [pc, #688]	; (8003ea8 <UART_SetConfig+0x338>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d00d      	beq.n	8003c1e <UART_SetConfig+0xae>
 8003c02:	d81b      	bhi.n	8003c3c <UART_SetConfig+0xcc>
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d014      	beq.n	8003c32 <UART_SetConfig+0xc2>
 8003c08:	d818      	bhi.n	8003c3c <UART_SetConfig+0xcc>
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <UART_SetConfig+0xa4>
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d00a      	beq.n	8003c28 <UART_SetConfig+0xb8>
 8003c12:	e013      	b.n	8003c3c <UART_SetConfig+0xcc>
 8003c14:	231f      	movs	r3, #31
 8003c16:	18fb      	adds	r3, r7, r3
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
 8003c1c:	e0bd      	b.n	8003d9a <UART_SetConfig+0x22a>
 8003c1e:	231f      	movs	r3, #31
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	2202      	movs	r2, #2
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	e0b8      	b.n	8003d9a <UART_SetConfig+0x22a>
 8003c28:	231f      	movs	r3, #31
 8003c2a:	18fb      	adds	r3, r7, r3
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	701a      	strb	r2, [r3, #0]
 8003c30:	e0b3      	b.n	8003d9a <UART_SetConfig+0x22a>
 8003c32:	231f      	movs	r3, #31
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	2208      	movs	r2, #8
 8003c38:	701a      	strb	r2, [r3, #0]
 8003c3a:	e0ae      	b.n	8003d9a <UART_SetConfig+0x22a>
 8003c3c:	231f      	movs	r3, #31
 8003c3e:	18fb      	adds	r3, r7, r3
 8003c40:	2210      	movs	r2, #16
 8003c42:	701a      	strb	r2, [r3, #0]
 8003c44:	e0a9      	b.n	8003d9a <UART_SetConfig+0x22a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a98      	ldr	r2, [pc, #608]	; (8003eac <UART_SetConfig+0x33c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d134      	bne.n	8003cba <UART_SetConfig+0x14a>
 8003c50:	4b95      	ldr	r3, [pc, #596]	; (8003ea8 <UART_SetConfig+0x338>)
 8003c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c54:	23c0      	movs	r3, #192	; 0xc0
 8003c56:	029b      	lsls	r3, r3, #10
 8003c58:	4013      	ands	r3, r2
 8003c5a:	22c0      	movs	r2, #192	; 0xc0
 8003c5c:	0292      	lsls	r2, r2, #10
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d017      	beq.n	8003c92 <UART_SetConfig+0x122>
 8003c62:	22c0      	movs	r2, #192	; 0xc0
 8003c64:	0292      	lsls	r2, r2, #10
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d822      	bhi.n	8003cb0 <UART_SetConfig+0x140>
 8003c6a:	2280      	movs	r2, #128	; 0x80
 8003c6c:	0292      	lsls	r2, r2, #10
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d019      	beq.n	8003ca6 <UART_SetConfig+0x136>
 8003c72:	2280      	movs	r2, #128	; 0x80
 8003c74:	0292      	lsls	r2, r2, #10
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d81a      	bhi.n	8003cb0 <UART_SetConfig+0x140>
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d004      	beq.n	8003c88 <UART_SetConfig+0x118>
 8003c7e:	2280      	movs	r2, #128	; 0x80
 8003c80:	0252      	lsls	r2, r2, #9
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d00a      	beq.n	8003c9c <UART_SetConfig+0x12c>
 8003c86:	e013      	b.n	8003cb0 <UART_SetConfig+0x140>
 8003c88:	231f      	movs	r3, #31
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
 8003c90:	e083      	b.n	8003d9a <UART_SetConfig+0x22a>
 8003c92:	231f      	movs	r3, #31
 8003c94:	18fb      	adds	r3, r7, r3
 8003c96:	2202      	movs	r2, #2
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	e07e      	b.n	8003d9a <UART_SetConfig+0x22a>
 8003c9c:	231f      	movs	r3, #31
 8003c9e:	18fb      	adds	r3, r7, r3
 8003ca0:	2204      	movs	r2, #4
 8003ca2:	701a      	strb	r2, [r3, #0]
 8003ca4:	e079      	b.n	8003d9a <UART_SetConfig+0x22a>
 8003ca6:	231f      	movs	r3, #31
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	2208      	movs	r2, #8
 8003cac:	701a      	strb	r2, [r3, #0]
 8003cae:	e074      	b.n	8003d9a <UART_SetConfig+0x22a>
 8003cb0:	231f      	movs	r3, #31
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	2210      	movs	r2, #16
 8003cb6:	701a      	strb	r2, [r3, #0]
 8003cb8:	e06f      	b.n	8003d9a <UART_SetConfig+0x22a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a7c      	ldr	r2, [pc, #496]	; (8003eb0 <UART_SetConfig+0x340>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d134      	bne.n	8003d2e <UART_SetConfig+0x1be>
 8003cc4:	4b78      	ldr	r3, [pc, #480]	; (8003ea8 <UART_SetConfig+0x338>)
 8003cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cc8:	23c0      	movs	r3, #192	; 0xc0
 8003cca:	031b      	lsls	r3, r3, #12
 8003ccc:	4013      	ands	r3, r2
 8003cce:	22c0      	movs	r2, #192	; 0xc0
 8003cd0:	0312      	lsls	r2, r2, #12
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d017      	beq.n	8003d06 <UART_SetConfig+0x196>
 8003cd6:	22c0      	movs	r2, #192	; 0xc0
 8003cd8:	0312      	lsls	r2, r2, #12
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d822      	bhi.n	8003d24 <UART_SetConfig+0x1b4>
 8003cde:	2280      	movs	r2, #128	; 0x80
 8003ce0:	0312      	lsls	r2, r2, #12
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d019      	beq.n	8003d1a <UART_SetConfig+0x1aa>
 8003ce6:	2280      	movs	r2, #128	; 0x80
 8003ce8:	0312      	lsls	r2, r2, #12
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d81a      	bhi.n	8003d24 <UART_SetConfig+0x1b4>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d004      	beq.n	8003cfc <UART_SetConfig+0x18c>
 8003cf2:	2280      	movs	r2, #128	; 0x80
 8003cf4:	02d2      	lsls	r2, r2, #11
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00a      	beq.n	8003d10 <UART_SetConfig+0x1a0>
 8003cfa:	e013      	b.n	8003d24 <UART_SetConfig+0x1b4>
 8003cfc:	231f      	movs	r3, #31
 8003cfe:	18fb      	adds	r3, r7, r3
 8003d00:	2200      	movs	r2, #0
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	e049      	b.n	8003d9a <UART_SetConfig+0x22a>
 8003d06:	231f      	movs	r3, #31
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	e044      	b.n	8003d9a <UART_SetConfig+0x22a>
 8003d10:	231f      	movs	r3, #31
 8003d12:	18fb      	adds	r3, r7, r3
 8003d14:	2204      	movs	r2, #4
 8003d16:	701a      	strb	r2, [r3, #0]
 8003d18:	e03f      	b.n	8003d9a <UART_SetConfig+0x22a>
 8003d1a:	231f      	movs	r3, #31
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	2208      	movs	r2, #8
 8003d20:	701a      	strb	r2, [r3, #0]
 8003d22:	e03a      	b.n	8003d9a <UART_SetConfig+0x22a>
 8003d24:	231f      	movs	r3, #31
 8003d26:	18fb      	adds	r3, r7, r3
 8003d28:	2210      	movs	r2, #16
 8003d2a:	701a      	strb	r2, [r3, #0]
 8003d2c:	e035      	b.n	8003d9a <UART_SetConfig+0x22a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a60      	ldr	r2, [pc, #384]	; (8003eb4 <UART_SetConfig+0x344>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d104      	bne.n	8003d42 <UART_SetConfig+0x1d2>
 8003d38:	231f      	movs	r3, #31
 8003d3a:	18fb      	adds	r3, r7, r3
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	701a      	strb	r2, [r3, #0]
 8003d40:	e02b      	b.n	8003d9a <UART_SetConfig+0x22a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a5c      	ldr	r2, [pc, #368]	; (8003eb8 <UART_SetConfig+0x348>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d104      	bne.n	8003d56 <UART_SetConfig+0x1e6>
 8003d4c:	231f      	movs	r3, #31
 8003d4e:	18fb      	adds	r3, r7, r3
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]
 8003d54:	e021      	b.n	8003d9a <UART_SetConfig+0x22a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a58      	ldr	r2, [pc, #352]	; (8003ebc <UART_SetConfig+0x34c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d104      	bne.n	8003d6a <UART_SetConfig+0x1fa>
 8003d60:	231f      	movs	r3, #31
 8003d62:	18fb      	adds	r3, r7, r3
 8003d64:	2200      	movs	r2, #0
 8003d66:	701a      	strb	r2, [r3, #0]
 8003d68:	e017      	b.n	8003d9a <UART_SetConfig+0x22a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a54      	ldr	r2, [pc, #336]	; (8003ec0 <UART_SetConfig+0x350>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d104      	bne.n	8003d7e <UART_SetConfig+0x20e>
 8003d74:	231f      	movs	r3, #31
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	e00d      	b.n	8003d9a <UART_SetConfig+0x22a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a50      	ldr	r2, [pc, #320]	; (8003ec4 <UART_SetConfig+0x354>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d104      	bne.n	8003d92 <UART_SetConfig+0x222>
 8003d88:	231f      	movs	r3, #31
 8003d8a:	18fb      	adds	r3, r7, r3
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	701a      	strb	r2, [r3, #0]
 8003d90:	e003      	b.n	8003d9a <UART_SetConfig+0x22a>
 8003d92:	231f      	movs	r3, #31
 8003d94:	18fb      	adds	r3, r7, r3
 8003d96:	2210      	movs	r2, #16
 8003d98:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69da      	ldr	r2, [r3, #28]
 8003d9e:	2380      	movs	r3, #128	; 0x80
 8003da0:	021b      	lsls	r3, r3, #8
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d15d      	bne.n	8003e62 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8003da6:	231f      	movs	r3, #31
 8003da8:	18fb      	adds	r3, r7, r3
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d015      	beq.n	8003ddc <UART_SetConfig+0x26c>
 8003db0:	dc18      	bgt.n	8003de4 <UART_SetConfig+0x274>
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d00d      	beq.n	8003dd2 <UART_SetConfig+0x262>
 8003db6:	dc15      	bgt.n	8003de4 <UART_SetConfig+0x274>
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <UART_SetConfig+0x252>
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d005      	beq.n	8003dcc <UART_SetConfig+0x25c>
 8003dc0:	e010      	b.n	8003de4 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc2:	f7ff fc9b 	bl	80036fc <HAL_RCC_GetPCLK1Freq>
 8003dc6:	0003      	movs	r3, r0
 8003dc8:	61bb      	str	r3, [r7, #24]
        break;
 8003dca:	e012      	b.n	8003df2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dcc:	4b3e      	ldr	r3, [pc, #248]	; (8003ec8 <UART_SetConfig+0x358>)
 8003dce:	61bb      	str	r3, [r7, #24]
        break;
 8003dd0:	e00f      	b.n	8003df2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd2:	f7ff fc09 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 8003dd6:	0003      	movs	r3, r0
 8003dd8:	61bb      	str	r3, [r7, #24]
        break;
 8003dda:	e00a      	b.n	8003df2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ddc:	2380      	movs	r3, #128	; 0x80
 8003dde:	021b      	lsls	r3, r3, #8
 8003de0:	61bb      	str	r3, [r7, #24]
        break;
 8003de2:	e006      	b.n	8003df2 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003de8:	231e      	movs	r3, #30
 8003dea:	18fb      	adds	r3, r7, r3
 8003dec:	2201      	movs	r2, #1
 8003dee:	701a      	strb	r2, [r3, #0]
        break;
 8003df0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d100      	bne.n	8003dfa <UART_SetConfig+0x28a>
 8003df8:	e095      	b.n	8003f26 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	005a      	lsls	r2, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	18d2      	adds	r2, r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	0019      	movs	r1, r3
 8003e0c:	0010      	movs	r0, r2
 8003e0e:	f7fc f995 	bl	800013c <__udivsi3>
 8003e12:	0003      	movs	r3, r0
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	2b0f      	cmp	r3, #15
 8003e1c:	d91c      	bls.n	8003e58 <UART_SetConfig+0x2e8>
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	2380      	movs	r3, #128	; 0x80
 8003e22:	025b      	lsls	r3, r3, #9
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d217      	bcs.n	8003e58 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	200e      	movs	r0, #14
 8003e2e:	183b      	adds	r3, r7, r0
 8003e30:	210f      	movs	r1, #15
 8003e32:	438a      	bics	r2, r1
 8003e34:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	085b      	lsrs	r3, r3, #1
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2207      	movs	r2, #7
 8003e3e:	4013      	ands	r3, r2
 8003e40:	b299      	uxth	r1, r3
 8003e42:	183b      	adds	r3, r7, r0
 8003e44:	183a      	adds	r2, r7, r0
 8003e46:	8812      	ldrh	r2, [r2, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	183a      	adds	r2, r7, r0
 8003e52:	8812      	ldrh	r2, [r2, #0]
 8003e54:	60da      	str	r2, [r3, #12]
 8003e56:	e066      	b.n	8003f26 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003e58:	231e      	movs	r3, #30
 8003e5a:	18fb      	adds	r3, r7, r3
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	701a      	strb	r2, [r3, #0]
 8003e60:	e061      	b.n	8003f26 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e62:	231f      	movs	r3, #31
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d02f      	beq.n	8003ecc <UART_SetConfig+0x35c>
 8003e6c:	dc32      	bgt.n	8003ed4 <UART_SetConfig+0x364>
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d00d      	beq.n	8003e8e <UART_SetConfig+0x31e>
 8003e72:	dc2f      	bgt.n	8003ed4 <UART_SetConfig+0x364>
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <UART_SetConfig+0x30e>
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d005      	beq.n	8003e88 <UART_SetConfig+0x318>
 8003e7c:	e02a      	b.n	8003ed4 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e7e:	f7ff fc3d 	bl	80036fc <HAL_RCC_GetPCLK1Freq>
 8003e82:	0003      	movs	r3, r0
 8003e84:	61bb      	str	r3, [r7, #24]
        break;
 8003e86:	e02c      	b.n	8003ee2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e88:	4b0f      	ldr	r3, [pc, #60]	; (8003ec8 <UART_SetConfig+0x358>)
 8003e8a:	61bb      	str	r3, [r7, #24]
        break;
 8003e8c:	e029      	b.n	8003ee2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e8e:	f7ff fbab 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 8003e92:	0003      	movs	r3, r0
 8003e94:	61bb      	str	r3, [r7, #24]
        break;
 8003e96:	e024      	b.n	8003ee2 <UART_SetConfig+0x372>
 8003e98:	efff69f3 	.word	0xefff69f3
 8003e9c:	ffffcfff 	.word	0xffffcfff
 8003ea0:	fffff4ff 	.word	0xfffff4ff
 8003ea4:	40013800 	.word	0x40013800
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	40004400 	.word	0x40004400
 8003eb0:	40004800 	.word	0x40004800
 8003eb4:	40004c00 	.word	0x40004c00
 8003eb8:	40005000 	.word	0x40005000
 8003ebc:	40011400 	.word	0x40011400
 8003ec0:	40011800 	.word	0x40011800
 8003ec4:	40011c00 	.word	0x40011c00
 8003ec8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ecc:	2380      	movs	r3, #128	; 0x80
 8003ece:	021b      	lsls	r3, r3, #8
 8003ed0:	61bb      	str	r3, [r7, #24]
        break;
 8003ed2:	e006      	b.n	8003ee2 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ed8:	231e      	movs	r3, #30
 8003eda:	18fb      	adds	r3, r7, r3
 8003edc:	2201      	movs	r2, #1
 8003ede:	701a      	strb	r2, [r3, #0]
        break;
 8003ee0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01e      	beq.n	8003f26 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	085a      	lsrs	r2, r3, #1
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	18d2      	adds	r2, r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	0019      	movs	r1, r3
 8003ef8:	0010      	movs	r0, r2
 8003efa:	f7fc f91f 	bl	800013c <__udivsi3>
 8003efe:	0003      	movs	r3, r0
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	2b0f      	cmp	r3, #15
 8003f08:	d909      	bls.n	8003f1e <UART_SetConfig+0x3ae>
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	025b      	lsls	r3, r3, #9
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d204      	bcs.n	8003f1e <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	60da      	str	r2, [r3, #12]
 8003f1c:	e003      	b.n	8003f26 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003f1e:	231e      	movs	r3, #30
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	2201      	movs	r2, #1
 8003f24:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f32:	231e      	movs	r3, #30
 8003f34:	18fb      	adds	r3, r7, r3
 8003f36:	781b      	ldrb	r3, [r3, #0]
}
 8003f38:	0018      	movs	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b008      	add	sp, #32
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d00b      	beq.n	8003f6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	4a4a      	ldr	r2, [pc, #296]	; (8004084 <UART_AdvFeatureConfig+0x144>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	0019      	movs	r1, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	2202      	movs	r2, #2
 8003f70:	4013      	ands	r3, r2
 8003f72:	d00b      	beq.n	8003f8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4a43      	ldr	r2, [pc, #268]	; (8004088 <UART_AdvFeatureConfig+0x148>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	0019      	movs	r1, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	2204      	movs	r2, #4
 8003f92:	4013      	ands	r3, r2
 8003f94:	d00b      	beq.n	8003fae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4a3b      	ldr	r2, [pc, #236]	; (800408c <UART_AdvFeatureConfig+0x14c>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	0019      	movs	r1, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	2208      	movs	r2, #8
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d00b      	beq.n	8003fd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4a34      	ldr	r2, [pc, #208]	; (8004090 <UART_AdvFeatureConfig+0x150>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	0019      	movs	r1, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	2210      	movs	r2, #16
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d00b      	beq.n	8003ff2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	4a2c      	ldr	r2, [pc, #176]	; (8004094 <UART_AdvFeatureConfig+0x154>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	0019      	movs	r1, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d00b      	beq.n	8004014 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	4a25      	ldr	r2, [pc, #148]	; (8004098 <UART_AdvFeatureConfig+0x158>)
 8004004:	4013      	ands	r3, r2
 8004006:	0019      	movs	r1, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	2240      	movs	r2, #64	; 0x40
 800401a:	4013      	ands	r3, r2
 800401c:	d01d      	beq.n	800405a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	4a1d      	ldr	r2, [pc, #116]	; (800409c <UART_AdvFeatureConfig+0x15c>)
 8004026:	4013      	ands	r3, r2
 8004028:	0019      	movs	r1, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800403a:	2380      	movs	r3, #128	; 0x80
 800403c:	035b      	lsls	r3, r3, #13
 800403e:	429a      	cmp	r2, r3
 8004040:	d10b      	bne.n	800405a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	4a15      	ldr	r2, [pc, #84]	; (80040a0 <UART_AdvFeatureConfig+0x160>)
 800404a:	4013      	ands	r3, r2
 800404c:	0019      	movs	r1, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	2280      	movs	r2, #128	; 0x80
 8004060:	4013      	ands	r3, r2
 8004062:	d00b      	beq.n	800407c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4a0e      	ldr	r2, [pc, #56]	; (80040a4 <UART_AdvFeatureConfig+0x164>)
 800406c:	4013      	ands	r3, r2
 800406e:	0019      	movs	r1, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	605a      	str	r2, [r3, #4]
  }
}
 800407c:	46c0      	nop			; (mov r8, r8)
 800407e:	46bd      	mov	sp, r7
 8004080:	b002      	add	sp, #8
 8004082:	bd80      	pop	{r7, pc}
 8004084:	fffdffff 	.word	0xfffdffff
 8004088:	fffeffff 	.word	0xfffeffff
 800408c:	fffbffff 	.word	0xfffbffff
 8004090:	ffff7fff 	.word	0xffff7fff
 8004094:	ffffefff 	.word	0xffffefff
 8004098:	ffffdfff 	.word	0xffffdfff
 800409c:	ffefffff 	.word	0xffefffff
 80040a0:	ff9fffff 	.word	0xff9fffff
 80040a4:	fff7ffff 	.word	0xfff7ffff

080040a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2280      	movs	r2, #128	; 0x80
 80040b4:	2100      	movs	r1, #0
 80040b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040b8:	f7fe fb0e 	bl	80026d8 <HAL_GetTick>
 80040bc:	0003      	movs	r3, r0
 80040be:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2208      	movs	r2, #8
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d10c      	bne.n	80040e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2280      	movs	r2, #128	; 0x80
 80040d2:	0391      	lsls	r1, r2, #14
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	4a17      	ldr	r2, [pc, #92]	; (8004134 <UART_CheckIdleState+0x8c>)
 80040d8:	9200      	str	r2, [sp, #0]
 80040da:	2200      	movs	r2, #0
 80040dc:	f000 f82c 	bl	8004138 <UART_WaitOnFlagUntilTimeout>
 80040e0:	1e03      	subs	r3, r0, #0
 80040e2:	d001      	beq.n	80040e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e021      	b.n	800412c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2204      	movs	r2, #4
 80040f0:	4013      	ands	r3, r2
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d10c      	bne.n	8004110 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2280      	movs	r2, #128	; 0x80
 80040fa:	03d1      	lsls	r1, r2, #15
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	4a0d      	ldr	r2, [pc, #52]	; (8004134 <UART_CheckIdleState+0x8c>)
 8004100:	9200      	str	r2, [sp, #0]
 8004102:	2200      	movs	r2, #0
 8004104:	f000 f818 	bl	8004138 <UART_WaitOnFlagUntilTimeout>
 8004108:	1e03      	subs	r3, r0, #0
 800410a:	d001      	beq.n	8004110 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e00d      	b.n	800412c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2274      	movs	r2, #116	; 0x74
 8004126:	2100      	movs	r1, #0
 8004128:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	0018      	movs	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	b004      	add	sp, #16
 8004132:	bd80      	pop	{r7, pc}
 8004134:	01ffffff 	.word	0x01ffffff

08004138 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b094      	sub	sp, #80	; 0x50
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	1dfb      	adds	r3, r7, #7
 8004146:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004148:	e0a3      	b.n	8004292 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800414a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800414c:	3301      	adds	r3, #1
 800414e:	d100      	bne.n	8004152 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004150:	e09f      	b.n	8004292 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004152:	f7fe fac1 	bl	80026d8 <HAL_GetTick>
 8004156:	0002      	movs	r2, r0
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800415e:	429a      	cmp	r2, r3
 8004160:	d302      	bcc.n	8004168 <UART_WaitOnFlagUntilTimeout+0x30>
 8004162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004164:	2b00      	cmp	r3, #0
 8004166:	d13d      	bne.n	80041e4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004168:	f3ef 8310 	mrs	r3, PRIMASK
 800416c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004170:	647b      	str	r3, [r7, #68]	; 0x44
 8004172:	2301      	movs	r3, #1
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004178:	f383 8810 	msr	PRIMASK, r3
}
 800417c:	46c0      	nop			; (mov r8, r8)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	494c      	ldr	r1, [pc, #304]	; (80042bc <UART_WaitOnFlagUntilTimeout+0x184>)
 800418a:	400a      	ands	r2, r1
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004190:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004194:	f383 8810 	msr	PRIMASK, r3
}
 8004198:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800419a:	f3ef 8310 	mrs	r3, PRIMASK
 800419e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80041a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a2:	643b      	str	r3, [r7, #64]	; 0x40
 80041a4:	2301      	movs	r3, #1
 80041a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041aa:	f383 8810 	msr	PRIMASK, r3
}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2101      	movs	r1, #1
 80041bc:	438a      	bics	r2, r1
 80041be:	609a      	str	r2, [r3, #8]
 80041c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c6:	f383 8810 	msr	PRIMASK, r3
}
 80041ca:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2220      	movs	r2, #32
 80041d0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2274      	movs	r2, #116	; 0x74
 80041dc:	2100      	movs	r1, #0
 80041de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e067      	b.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2204      	movs	r2, #4
 80041ec:	4013      	ands	r3, r2
 80041ee:	d050      	beq.n	8004292 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	69da      	ldr	r2, [r3, #28]
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	401a      	ands	r2, r3
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	429a      	cmp	r2, r3
 8004202:	d146      	bne.n	8004292 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2280      	movs	r2, #128	; 0x80
 800420a:	0112      	lsls	r2, r2, #4
 800420c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800420e:	f3ef 8310 	mrs	r3, PRIMASK
 8004212:	613b      	str	r3, [r7, #16]
  return(result);
 8004214:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004216:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004218:	2301      	movs	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f383 8810 	msr	PRIMASK, r3
}
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4923      	ldr	r1, [pc, #140]	; (80042bc <UART_WaitOnFlagUntilTimeout+0x184>)
 8004230:	400a      	ands	r2, r1
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004236:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	f383 8810 	msr	PRIMASK, r3
}
 800423e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004240:	f3ef 8310 	mrs	r3, PRIMASK
 8004244:	61fb      	str	r3, [r7, #28]
  return(result);
 8004246:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004248:	64bb      	str	r3, [r7, #72]	; 0x48
 800424a:	2301      	movs	r3, #1
 800424c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	f383 8810 	msr	PRIMASK, r3
}
 8004254:	46c0      	nop			; (mov r8, r8)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2101      	movs	r1, #1
 8004262:	438a      	bics	r2, r1
 8004264:	609a      	str	r2, [r3, #8]
 8004266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	f383 8810 	msr	PRIMASK, r3
}
 8004270:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2220      	movs	r2, #32
 8004276:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2280      	movs	r2, #128	; 0x80
 8004282:	2120      	movs	r1, #32
 8004284:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2274      	movs	r2, #116	; 0x74
 800428a:	2100      	movs	r1, #0
 800428c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e010      	b.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	4013      	ands	r3, r2
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	425a      	negs	r2, r3
 80042a2:	4153      	adcs	r3, r2
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	001a      	movs	r2, r3
 80042a8:	1dfb      	adds	r3, r7, #7
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d100      	bne.n	80042b2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80042b0:	e74b      	b.n	800414a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	0018      	movs	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	b014      	add	sp, #80	; 0x50
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	fffffe5f 	.word	0xfffffe5f

080042c0 <__errno>:
 80042c0:	4b01      	ldr	r3, [pc, #4]	; (80042c8 <__errno+0x8>)
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	4770      	bx	lr
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	2000000c 	.word	0x2000000c

080042cc <__libc_init_array>:
 80042cc:	b570      	push	{r4, r5, r6, lr}
 80042ce:	2600      	movs	r6, #0
 80042d0:	4d0c      	ldr	r5, [pc, #48]	; (8004304 <__libc_init_array+0x38>)
 80042d2:	4c0d      	ldr	r4, [pc, #52]	; (8004308 <__libc_init_array+0x3c>)
 80042d4:	1b64      	subs	r4, r4, r5
 80042d6:	10a4      	asrs	r4, r4, #2
 80042d8:	42a6      	cmp	r6, r4
 80042da:	d109      	bne.n	80042f0 <__libc_init_array+0x24>
 80042dc:	2600      	movs	r6, #0
 80042de:	f002 fdeb 	bl	8006eb8 <_init>
 80042e2:	4d0a      	ldr	r5, [pc, #40]	; (800430c <__libc_init_array+0x40>)
 80042e4:	4c0a      	ldr	r4, [pc, #40]	; (8004310 <__libc_init_array+0x44>)
 80042e6:	1b64      	subs	r4, r4, r5
 80042e8:	10a4      	asrs	r4, r4, #2
 80042ea:	42a6      	cmp	r6, r4
 80042ec:	d105      	bne.n	80042fa <__libc_init_array+0x2e>
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
 80042f0:	00b3      	lsls	r3, r6, #2
 80042f2:	58eb      	ldr	r3, [r5, r3]
 80042f4:	4798      	blx	r3
 80042f6:	3601      	adds	r6, #1
 80042f8:	e7ee      	b.n	80042d8 <__libc_init_array+0xc>
 80042fa:	00b3      	lsls	r3, r6, #2
 80042fc:	58eb      	ldr	r3, [r5, r3]
 80042fe:	4798      	blx	r3
 8004300:	3601      	adds	r6, #1
 8004302:	e7f2      	b.n	80042ea <__libc_init_array+0x1e>
 8004304:	0800736c 	.word	0x0800736c
 8004308:	0800736c 	.word	0x0800736c
 800430c:	0800736c 	.word	0x0800736c
 8004310:	08007370 	.word	0x08007370

08004314 <malloc>:
 8004314:	b510      	push	{r4, lr}
 8004316:	4b03      	ldr	r3, [pc, #12]	; (8004324 <malloc+0x10>)
 8004318:	0001      	movs	r1, r0
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	f000 f860 	bl	80043e0 <_malloc_r>
 8004320:	bd10      	pop	{r4, pc}
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	2000000c 	.word	0x2000000c

08004328 <memcpy>:
 8004328:	2300      	movs	r3, #0
 800432a:	b510      	push	{r4, lr}
 800432c:	429a      	cmp	r2, r3
 800432e:	d100      	bne.n	8004332 <memcpy+0xa>
 8004330:	bd10      	pop	{r4, pc}
 8004332:	5ccc      	ldrb	r4, [r1, r3]
 8004334:	54c4      	strb	r4, [r0, r3]
 8004336:	3301      	adds	r3, #1
 8004338:	e7f8      	b.n	800432c <memcpy+0x4>

0800433a <memset>:
 800433a:	0003      	movs	r3, r0
 800433c:	1882      	adds	r2, r0, r2
 800433e:	4293      	cmp	r3, r2
 8004340:	d100      	bne.n	8004344 <memset+0xa>
 8004342:	4770      	bx	lr
 8004344:	7019      	strb	r1, [r3, #0]
 8004346:	3301      	adds	r3, #1
 8004348:	e7f9      	b.n	800433e <memset+0x4>
	...

0800434c <_free_r>:
 800434c:	b570      	push	{r4, r5, r6, lr}
 800434e:	0005      	movs	r5, r0
 8004350:	2900      	cmp	r1, #0
 8004352:	d010      	beq.n	8004376 <_free_r+0x2a>
 8004354:	1f0c      	subs	r4, r1, #4
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	da00      	bge.n	800435e <_free_r+0x12>
 800435c:	18e4      	adds	r4, r4, r3
 800435e:	0028      	movs	r0, r5
 8004360:	f001 fbe2 	bl	8005b28 <__malloc_lock>
 8004364:	4a1d      	ldr	r2, [pc, #116]	; (80043dc <_free_r+0x90>)
 8004366:	6813      	ldr	r3, [r2, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d105      	bne.n	8004378 <_free_r+0x2c>
 800436c:	6063      	str	r3, [r4, #4]
 800436e:	6014      	str	r4, [r2, #0]
 8004370:	0028      	movs	r0, r5
 8004372:	f001 fbe1 	bl	8005b38 <__malloc_unlock>
 8004376:	bd70      	pop	{r4, r5, r6, pc}
 8004378:	42a3      	cmp	r3, r4
 800437a:	d908      	bls.n	800438e <_free_r+0x42>
 800437c:	6821      	ldr	r1, [r4, #0]
 800437e:	1860      	adds	r0, r4, r1
 8004380:	4283      	cmp	r3, r0
 8004382:	d1f3      	bne.n	800436c <_free_r+0x20>
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	1841      	adds	r1, r0, r1
 800438a:	6021      	str	r1, [r4, #0]
 800438c:	e7ee      	b.n	800436c <_free_r+0x20>
 800438e:	001a      	movs	r2, r3
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <_free_r+0x4e>
 8004396:	42a3      	cmp	r3, r4
 8004398:	d9f9      	bls.n	800438e <_free_r+0x42>
 800439a:	6811      	ldr	r1, [r2, #0]
 800439c:	1850      	adds	r0, r2, r1
 800439e:	42a0      	cmp	r0, r4
 80043a0:	d10b      	bne.n	80043ba <_free_r+0x6e>
 80043a2:	6820      	ldr	r0, [r4, #0]
 80043a4:	1809      	adds	r1, r1, r0
 80043a6:	1850      	adds	r0, r2, r1
 80043a8:	6011      	str	r1, [r2, #0]
 80043aa:	4283      	cmp	r3, r0
 80043ac:	d1e0      	bne.n	8004370 <_free_r+0x24>
 80043ae:	6818      	ldr	r0, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	1841      	adds	r1, r0, r1
 80043b4:	6011      	str	r1, [r2, #0]
 80043b6:	6053      	str	r3, [r2, #4]
 80043b8:	e7da      	b.n	8004370 <_free_r+0x24>
 80043ba:	42a0      	cmp	r0, r4
 80043bc:	d902      	bls.n	80043c4 <_free_r+0x78>
 80043be:	230c      	movs	r3, #12
 80043c0:	602b      	str	r3, [r5, #0]
 80043c2:	e7d5      	b.n	8004370 <_free_r+0x24>
 80043c4:	6821      	ldr	r1, [r4, #0]
 80043c6:	1860      	adds	r0, r4, r1
 80043c8:	4283      	cmp	r3, r0
 80043ca:	d103      	bne.n	80043d4 <_free_r+0x88>
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	1841      	adds	r1, r0, r1
 80043d2:	6021      	str	r1, [r4, #0]
 80043d4:	6063      	str	r3, [r4, #4]
 80043d6:	6054      	str	r4, [r2, #4]
 80043d8:	e7ca      	b.n	8004370 <_free_r+0x24>
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	200001fc 	.word	0x200001fc

080043e0 <_malloc_r>:
 80043e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e2:	2303      	movs	r3, #3
 80043e4:	1ccd      	adds	r5, r1, #3
 80043e6:	439d      	bics	r5, r3
 80043e8:	3508      	adds	r5, #8
 80043ea:	0006      	movs	r6, r0
 80043ec:	2d0c      	cmp	r5, #12
 80043ee:	d21f      	bcs.n	8004430 <_malloc_r+0x50>
 80043f0:	250c      	movs	r5, #12
 80043f2:	42a9      	cmp	r1, r5
 80043f4:	d81e      	bhi.n	8004434 <_malloc_r+0x54>
 80043f6:	0030      	movs	r0, r6
 80043f8:	f001 fb96 	bl	8005b28 <__malloc_lock>
 80043fc:	4925      	ldr	r1, [pc, #148]	; (8004494 <_malloc_r+0xb4>)
 80043fe:	680a      	ldr	r2, [r1, #0]
 8004400:	0014      	movs	r4, r2
 8004402:	2c00      	cmp	r4, #0
 8004404:	d11a      	bne.n	800443c <_malloc_r+0x5c>
 8004406:	4f24      	ldr	r7, [pc, #144]	; (8004498 <_malloc_r+0xb8>)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d104      	bne.n	8004418 <_malloc_r+0x38>
 800440e:	0021      	movs	r1, r4
 8004410:	0030      	movs	r0, r6
 8004412:	f000 fcbd 	bl	8004d90 <_sbrk_r>
 8004416:	6038      	str	r0, [r7, #0]
 8004418:	0029      	movs	r1, r5
 800441a:	0030      	movs	r0, r6
 800441c:	f000 fcb8 	bl	8004d90 <_sbrk_r>
 8004420:	1c43      	adds	r3, r0, #1
 8004422:	d12b      	bne.n	800447c <_malloc_r+0x9c>
 8004424:	230c      	movs	r3, #12
 8004426:	0030      	movs	r0, r6
 8004428:	6033      	str	r3, [r6, #0]
 800442a:	f001 fb85 	bl	8005b38 <__malloc_unlock>
 800442e:	e003      	b.n	8004438 <_malloc_r+0x58>
 8004430:	2d00      	cmp	r5, #0
 8004432:	dade      	bge.n	80043f2 <_malloc_r+0x12>
 8004434:	230c      	movs	r3, #12
 8004436:	6033      	str	r3, [r6, #0]
 8004438:	2000      	movs	r0, #0
 800443a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	1b5b      	subs	r3, r3, r5
 8004440:	d419      	bmi.n	8004476 <_malloc_r+0x96>
 8004442:	2b0b      	cmp	r3, #11
 8004444:	d903      	bls.n	800444e <_malloc_r+0x6e>
 8004446:	6023      	str	r3, [r4, #0]
 8004448:	18e4      	adds	r4, r4, r3
 800444a:	6025      	str	r5, [r4, #0]
 800444c:	e003      	b.n	8004456 <_malloc_r+0x76>
 800444e:	6863      	ldr	r3, [r4, #4]
 8004450:	42a2      	cmp	r2, r4
 8004452:	d10e      	bne.n	8004472 <_malloc_r+0x92>
 8004454:	600b      	str	r3, [r1, #0]
 8004456:	0030      	movs	r0, r6
 8004458:	f001 fb6e 	bl	8005b38 <__malloc_unlock>
 800445c:	0020      	movs	r0, r4
 800445e:	2207      	movs	r2, #7
 8004460:	300b      	adds	r0, #11
 8004462:	1d23      	adds	r3, r4, #4
 8004464:	4390      	bics	r0, r2
 8004466:	1ac2      	subs	r2, r0, r3
 8004468:	4298      	cmp	r0, r3
 800446a:	d0e6      	beq.n	800443a <_malloc_r+0x5a>
 800446c:	1a1b      	subs	r3, r3, r0
 800446e:	50a3      	str	r3, [r4, r2]
 8004470:	e7e3      	b.n	800443a <_malloc_r+0x5a>
 8004472:	6053      	str	r3, [r2, #4]
 8004474:	e7ef      	b.n	8004456 <_malloc_r+0x76>
 8004476:	0022      	movs	r2, r4
 8004478:	6864      	ldr	r4, [r4, #4]
 800447a:	e7c2      	b.n	8004402 <_malloc_r+0x22>
 800447c:	2303      	movs	r3, #3
 800447e:	1cc4      	adds	r4, r0, #3
 8004480:	439c      	bics	r4, r3
 8004482:	42a0      	cmp	r0, r4
 8004484:	d0e1      	beq.n	800444a <_malloc_r+0x6a>
 8004486:	1a21      	subs	r1, r4, r0
 8004488:	0030      	movs	r0, r6
 800448a:	f000 fc81 	bl	8004d90 <_sbrk_r>
 800448e:	1c43      	adds	r3, r0, #1
 8004490:	d1db      	bne.n	800444a <_malloc_r+0x6a>
 8004492:	e7c7      	b.n	8004424 <_malloc_r+0x44>
 8004494:	200001fc 	.word	0x200001fc
 8004498:	20000200 	.word	0x20000200

0800449c <__cvt>:
 800449c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800449e:	001e      	movs	r6, r3
 80044a0:	2300      	movs	r3, #0
 80044a2:	0014      	movs	r4, r2
 80044a4:	b08b      	sub	sp, #44	; 0x2c
 80044a6:	429e      	cmp	r6, r3
 80044a8:	da04      	bge.n	80044b4 <__cvt+0x18>
 80044aa:	2180      	movs	r1, #128	; 0x80
 80044ac:	0609      	lsls	r1, r1, #24
 80044ae:	1873      	adds	r3, r6, r1
 80044b0:	001e      	movs	r6, r3
 80044b2:	232d      	movs	r3, #45	; 0x2d
 80044b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80044b6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80044b8:	7013      	strb	r3, [r2, #0]
 80044ba:	2320      	movs	r3, #32
 80044bc:	2203      	movs	r2, #3
 80044be:	439f      	bics	r7, r3
 80044c0:	2f46      	cmp	r7, #70	; 0x46
 80044c2:	d007      	beq.n	80044d4 <__cvt+0x38>
 80044c4:	003b      	movs	r3, r7
 80044c6:	3b45      	subs	r3, #69	; 0x45
 80044c8:	4259      	negs	r1, r3
 80044ca:	414b      	adcs	r3, r1
 80044cc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80044ce:	3a01      	subs	r2, #1
 80044d0:	18cb      	adds	r3, r1, r3
 80044d2:	9310      	str	r3, [sp, #64]	; 0x40
 80044d4:	ab09      	add	r3, sp, #36	; 0x24
 80044d6:	9304      	str	r3, [sp, #16]
 80044d8:	ab08      	add	r3, sp, #32
 80044da:	9303      	str	r3, [sp, #12]
 80044dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80044de:	9200      	str	r2, [sp, #0]
 80044e0:	9302      	str	r3, [sp, #8]
 80044e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80044e4:	0022      	movs	r2, r4
 80044e6:	9301      	str	r3, [sp, #4]
 80044e8:	0033      	movs	r3, r6
 80044ea:	f000 fcef 	bl	8004ecc <_dtoa_r>
 80044ee:	0005      	movs	r5, r0
 80044f0:	2f47      	cmp	r7, #71	; 0x47
 80044f2:	d102      	bne.n	80044fa <__cvt+0x5e>
 80044f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80044f6:	07db      	lsls	r3, r3, #31
 80044f8:	d528      	bpl.n	800454c <__cvt+0xb0>
 80044fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80044fc:	18eb      	adds	r3, r5, r3
 80044fe:	9307      	str	r3, [sp, #28]
 8004500:	2f46      	cmp	r7, #70	; 0x46
 8004502:	d114      	bne.n	800452e <__cvt+0x92>
 8004504:	782b      	ldrb	r3, [r5, #0]
 8004506:	2b30      	cmp	r3, #48	; 0x30
 8004508:	d10c      	bne.n	8004524 <__cvt+0x88>
 800450a:	2200      	movs	r2, #0
 800450c:	2300      	movs	r3, #0
 800450e:	0020      	movs	r0, r4
 8004510:	0031      	movs	r1, r6
 8004512:	f7fb ff99 	bl	8000448 <__aeabi_dcmpeq>
 8004516:	2800      	cmp	r0, #0
 8004518:	d104      	bne.n	8004524 <__cvt+0x88>
 800451a:	2301      	movs	r3, #1
 800451c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004526:	9a07      	ldr	r2, [sp, #28]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	18d3      	adds	r3, r2, r3
 800452c:	9307      	str	r3, [sp, #28]
 800452e:	2200      	movs	r2, #0
 8004530:	2300      	movs	r3, #0
 8004532:	0020      	movs	r0, r4
 8004534:	0031      	movs	r1, r6
 8004536:	f7fb ff87 	bl	8000448 <__aeabi_dcmpeq>
 800453a:	2800      	cmp	r0, #0
 800453c:	d001      	beq.n	8004542 <__cvt+0xa6>
 800453e:	9b07      	ldr	r3, [sp, #28]
 8004540:	9309      	str	r3, [sp, #36]	; 0x24
 8004542:	2230      	movs	r2, #48	; 0x30
 8004544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004546:	9907      	ldr	r1, [sp, #28]
 8004548:	428b      	cmp	r3, r1
 800454a:	d306      	bcc.n	800455a <__cvt+0xbe>
 800454c:	0028      	movs	r0, r5
 800454e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004550:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004552:	1b5b      	subs	r3, r3, r5
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	b00b      	add	sp, #44	; 0x2c
 8004558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800455a:	1c59      	adds	r1, r3, #1
 800455c:	9109      	str	r1, [sp, #36]	; 0x24
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	e7f0      	b.n	8004544 <__cvt+0xa8>

08004562 <__exponent>:
 8004562:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004564:	1c83      	adds	r3, r0, #2
 8004566:	b087      	sub	sp, #28
 8004568:	9303      	str	r3, [sp, #12]
 800456a:	0005      	movs	r5, r0
 800456c:	000c      	movs	r4, r1
 800456e:	232b      	movs	r3, #43	; 0x2b
 8004570:	7002      	strb	r2, [r0, #0]
 8004572:	2900      	cmp	r1, #0
 8004574:	da01      	bge.n	800457a <__exponent+0x18>
 8004576:	424c      	negs	r4, r1
 8004578:	3302      	adds	r3, #2
 800457a:	706b      	strb	r3, [r5, #1]
 800457c:	2c09      	cmp	r4, #9
 800457e:	dd31      	ble.n	80045e4 <__exponent+0x82>
 8004580:	270a      	movs	r7, #10
 8004582:	ab04      	add	r3, sp, #16
 8004584:	1dde      	adds	r6, r3, #7
 8004586:	0020      	movs	r0, r4
 8004588:	0039      	movs	r1, r7
 800458a:	9601      	str	r6, [sp, #4]
 800458c:	f7fb ff46 	bl	800041c <__aeabi_idivmod>
 8004590:	3e01      	subs	r6, #1
 8004592:	3130      	adds	r1, #48	; 0x30
 8004594:	0020      	movs	r0, r4
 8004596:	7031      	strb	r1, [r6, #0]
 8004598:	0039      	movs	r1, r7
 800459a:	9402      	str	r4, [sp, #8]
 800459c:	f7fb fe58 	bl	8000250 <__divsi3>
 80045a0:	9b02      	ldr	r3, [sp, #8]
 80045a2:	0004      	movs	r4, r0
 80045a4:	2b63      	cmp	r3, #99	; 0x63
 80045a6:	dcee      	bgt.n	8004586 <__exponent+0x24>
 80045a8:	9b01      	ldr	r3, [sp, #4]
 80045aa:	3430      	adds	r4, #48	; 0x30
 80045ac:	1e9a      	subs	r2, r3, #2
 80045ae:	0013      	movs	r3, r2
 80045b0:	9903      	ldr	r1, [sp, #12]
 80045b2:	7014      	strb	r4, [r2, #0]
 80045b4:	a804      	add	r0, sp, #16
 80045b6:	3007      	adds	r0, #7
 80045b8:	4298      	cmp	r0, r3
 80045ba:	d80e      	bhi.n	80045da <__exponent+0x78>
 80045bc:	ab04      	add	r3, sp, #16
 80045be:	3307      	adds	r3, #7
 80045c0:	2000      	movs	r0, #0
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d804      	bhi.n	80045d0 <__exponent+0x6e>
 80045c6:	ab04      	add	r3, sp, #16
 80045c8:	3009      	adds	r0, #9
 80045ca:	18c0      	adds	r0, r0, r3
 80045cc:	9b01      	ldr	r3, [sp, #4]
 80045ce:	1ac0      	subs	r0, r0, r3
 80045d0:	9b03      	ldr	r3, [sp, #12]
 80045d2:	1818      	adds	r0, r3, r0
 80045d4:	1b40      	subs	r0, r0, r5
 80045d6:	b007      	add	sp, #28
 80045d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045da:	7818      	ldrb	r0, [r3, #0]
 80045dc:	3301      	adds	r3, #1
 80045de:	7008      	strb	r0, [r1, #0]
 80045e0:	3101      	adds	r1, #1
 80045e2:	e7e7      	b.n	80045b4 <__exponent+0x52>
 80045e4:	2330      	movs	r3, #48	; 0x30
 80045e6:	18e4      	adds	r4, r4, r3
 80045e8:	70ab      	strb	r3, [r5, #2]
 80045ea:	1d28      	adds	r0, r5, #4
 80045ec:	70ec      	strb	r4, [r5, #3]
 80045ee:	e7f1      	b.n	80045d4 <__exponent+0x72>

080045f0 <_printf_float>:
 80045f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045f2:	b095      	sub	sp, #84	; 0x54
 80045f4:	000c      	movs	r4, r1
 80045f6:	9208      	str	r2, [sp, #32]
 80045f8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80045fa:	9309      	str	r3, [sp, #36]	; 0x24
 80045fc:	0007      	movs	r7, r0
 80045fe:	f001 fa83 	bl	8005b08 <_localeconv_r>
 8004602:	6803      	ldr	r3, [r0, #0]
 8004604:	0018      	movs	r0, r3
 8004606:	930b      	str	r3, [sp, #44]	; 0x2c
 8004608:	f7fb fd7c 	bl	8000104 <strlen>
 800460c:	2300      	movs	r3, #0
 800460e:	9312      	str	r3, [sp, #72]	; 0x48
 8004610:	7e23      	ldrb	r3, [r4, #24]
 8004612:	2207      	movs	r2, #7
 8004614:	001e      	movs	r6, r3
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	900d      	str	r0, [sp, #52]	; 0x34
 800461a:	930c      	str	r3, [sp, #48]	; 0x30
 800461c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800461e:	682b      	ldr	r3, [r5, #0]
 8004620:	05c9      	lsls	r1, r1, #23
 8004622:	d547      	bpl.n	80046b4 <_printf_float+0xc4>
 8004624:	189b      	adds	r3, r3, r2
 8004626:	4393      	bics	r3, r2
 8004628:	001a      	movs	r2, r3
 800462a:	3208      	adds	r2, #8
 800462c:	602a      	str	r2, [r5, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	64a2      	str	r2, [r4, #72]	; 0x48
 8004634:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004636:	2201      	movs	r2, #1
 8004638:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800463a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800463c:	930a      	str	r3, [sp, #40]	; 0x28
 800463e:	006b      	lsls	r3, r5, #1
 8004640:	085b      	lsrs	r3, r3, #1
 8004642:	930e      	str	r3, [sp, #56]	; 0x38
 8004644:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004646:	4ba8      	ldr	r3, [pc, #672]	; (80048e8 <_printf_float+0x2f8>)
 8004648:	990e      	ldr	r1, [sp, #56]	; 0x38
 800464a:	4252      	negs	r2, r2
 800464c:	f7fd fc98 	bl	8001f80 <__aeabi_dcmpun>
 8004650:	2800      	cmp	r0, #0
 8004652:	d131      	bne.n	80046b8 <_printf_float+0xc8>
 8004654:	2201      	movs	r2, #1
 8004656:	4ba4      	ldr	r3, [pc, #656]	; (80048e8 <_printf_float+0x2f8>)
 8004658:	980a      	ldr	r0, [sp, #40]	; 0x28
 800465a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800465c:	4252      	negs	r2, r2
 800465e:	f7fb ff03 	bl	8000468 <__aeabi_dcmple>
 8004662:	2800      	cmp	r0, #0
 8004664:	d128      	bne.n	80046b8 <_printf_float+0xc8>
 8004666:	2200      	movs	r2, #0
 8004668:	2300      	movs	r3, #0
 800466a:	0029      	movs	r1, r5
 800466c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800466e:	f7fb fef1 	bl	8000454 <__aeabi_dcmplt>
 8004672:	2800      	cmp	r0, #0
 8004674:	d003      	beq.n	800467e <_printf_float+0x8e>
 8004676:	0023      	movs	r3, r4
 8004678:	222d      	movs	r2, #45	; 0x2d
 800467a:	3343      	adds	r3, #67	; 0x43
 800467c:	701a      	strb	r2, [r3, #0]
 800467e:	4d9b      	ldr	r5, [pc, #620]	; (80048ec <_printf_float+0x2fc>)
 8004680:	2e47      	cmp	r6, #71	; 0x47
 8004682:	d900      	bls.n	8004686 <_printf_float+0x96>
 8004684:	4d9a      	ldr	r5, [pc, #616]	; (80048f0 <_printf_float+0x300>)
 8004686:	2303      	movs	r3, #3
 8004688:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800468a:	6123      	str	r3, [r4, #16]
 800468c:	3301      	adds	r3, #1
 800468e:	439a      	bics	r2, r3
 8004690:	2300      	movs	r3, #0
 8004692:	6022      	str	r2, [r4, #0]
 8004694:	930a      	str	r3, [sp, #40]	; 0x28
 8004696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004698:	0021      	movs	r1, r4
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	0038      	movs	r0, r7
 800469e:	9b08      	ldr	r3, [sp, #32]
 80046a0:	aa13      	add	r2, sp, #76	; 0x4c
 80046a2:	f000 f9f3 	bl	8004a8c <_printf_common>
 80046a6:	1c43      	adds	r3, r0, #1
 80046a8:	d000      	beq.n	80046ac <_printf_float+0xbc>
 80046aa:	e09e      	b.n	80047ea <_printf_float+0x1fa>
 80046ac:	2001      	movs	r0, #1
 80046ae:	4240      	negs	r0, r0
 80046b0:	b015      	add	sp, #84	; 0x54
 80046b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046b4:	3307      	adds	r3, #7
 80046b6:	e7b6      	b.n	8004626 <_printf_float+0x36>
 80046b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046ba:	002b      	movs	r3, r5
 80046bc:	0010      	movs	r0, r2
 80046be:	0029      	movs	r1, r5
 80046c0:	f7fd fc5e 	bl	8001f80 <__aeabi_dcmpun>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d00a      	beq.n	80046de <_printf_float+0xee>
 80046c8:	2d00      	cmp	r5, #0
 80046ca:	da03      	bge.n	80046d4 <_printf_float+0xe4>
 80046cc:	0023      	movs	r3, r4
 80046ce:	222d      	movs	r2, #45	; 0x2d
 80046d0:	3343      	adds	r3, #67	; 0x43
 80046d2:	701a      	strb	r2, [r3, #0]
 80046d4:	4d87      	ldr	r5, [pc, #540]	; (80048f4 <_printf_float+0x304>)
 80046d6:	2e47      	cmp	r6, #71	; 0x47
 80046d8:	d9d5      	bls.n	8004686 <_printf_float+0x96>
 80046da:	4d87      	ldr	r5, [pc, #540]	; (80048f8 <_printf_float+0x308>)
 80046dc:	e7d3      	b.n	8004686 <_printf_float+0x96>
 80046de:	2220      	movs	r2, #32
 80046e0:	0031      	movs	r1, r6
 80046e2:	6863      	ldr	r3, [r4, #4]
 80046e4:	4391      	bics	r1, r2
 80046e6:	910e      	str	r1, [sp, #56]	; 0x38
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	d147      	bne.n	800477c <_printf_float+0x18c>
 80046ec:	3307      	adds	r3, #7
 80046ee:	6063      	str	r3, [r4, #4]
 80046f0:	2380      	movs	r3, #128	; 0x80
 80046f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	4313      	orrs	r3, r2
 80046f8:	2200      	movs	r2, #0
 80046fa:	9206      	str	r2, [sp, #24]
 80046fc:	aa12      	add	r2, sp, #72	; 0x48
 80046fe:	9205      	str	r2, [sp, #20]
 8004700:	aa11      	add	r2, sp, #68	; 0x44
 8004702:	9203      	str	r2, [sp, #12]
 8004704:	2223      	movs	r2, #35	; 0x23
 8004706:	a908      	add	r1, sp, #32
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	9301      	str	r3, [sp, #4]
 800470c:	6863      	ldr	r3, [r4, #4]
 800470e:	1852      	adds	r2, r2, r1
 8004710:	9202      	str	r2, [sp, #8]
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	0038      	movs	r0, r7
 8004716:	002b      	movs	r3, r5
 8004718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800471a:	9604      	str	r6, [sp, #16]
 800471c:	f7ff febe 	bl	800449c <__cvt>
 8004720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004722:	0005      	movs	r5, r0
 8004724:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004726:	2b47      	cmp	r3, #71	; 0x47
 8004728:	d108      	bne.n	800473c <_printf_float+0x14c>
 800472a:	1ccb      	adds	r3, r1, #3
 800472c:	db02      	blt.n	8004734 <_printf_float+0x144>
 800472e:	6863      	ldr	r3, [r4, #4]
 8004730:	4299      	cmp	r1, r3
 8004732:	dd46      	ble.n	80047c2 <_printf_float+0x1d2>
 8004734:	0033      	movs	r3, r6
 8004736:	3b02      	subs	r3, #2
 8004738:	b2db      	uxtb	r3, r3
 800473a:	001e      	movs	r6, r3
 800473c:	2e65      	cmp	r6, #101	; 0x65
 800473e:	d824      	bhi.n	800478a <_printf_float+0x19a>
 8004740:	0020      	movs	r0, r4
 8004742:	0032      	movs	r2, r6
 8004744:	3901      	subs	r1, #1
 8004746:	3050      	adds	r0, #80	; 0x50
 8004748:	9111      	str	r1, [sp, #68]	; 0x44
 800474a:	f7ff ff0a 	bl	8004562 <__exponent>
 800474e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004750:	900a      	str	r0, [sp, #40]	; 0x28
 8004752:	1813      	adds	r3, r2, r0
 8004754:	6123      	str	r3, [r4, #16]
 8004756:	2a01      	cmp	r2, #1
 8004758:	dc02      	bgt.n	8004760 <_printf_float+0x170>
 800475a:	6822      	ldr	r2, [r4, #0]
 800475c:	07d2      	lsls	r2, r2, #31
 800475e:	d501      	bpl.n	8004764 <_printf_float+0x174>
 8004760:	3301      	adds	r3, #1
 8004762:	6123      	str	r3, [r4, #16]
 8004764:	2323      	movs	r3, #35	; 0x23
 8004766:	aa08      	add	r2, sp, #32
 8004768:	189b      	adds	r3, r3, r2
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d100      	bne.n	8004772 <_printf_float+0x182>
 8004770:	e791      	b.n	8004696 <_printf_float+0xa6>
 8004772:	0023      	movs	r3, r4
 8004774:	222d      	movs	r2, #45	; 0x2d
 8004776:	3343      	adds	r3, #67	; 0x43
 8004778:	701a      	strb	r2, [r3, #0]
 800477a:	e78c      	b.n	8004696 <_printf_float+0xa6>
 800477c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800477e:	2a47      	cmp	r2, #71	; 0x47
 8004780:	d1b6      	bne.n	80046f0 <_printf_float+0x100>
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1b4      	bne.n	80046f0 <_printf_float+0x100>
 8004786:	3301      	adds	r3, #1
 8004788:	e7b1      	b.n	80046ee <_printf_float+0xfe>
 800478a:	2e66      	cmp	r6, #102	; 0x66
 800478c:	d11b      	bne.n	80047c6 <_printf_float+0x1d6>
 800478e:	6863      	ldr	r3, [r4, #4]
 8004790:	2900      	cmp	r1, #0
 8004792:	dd0d      	ble.n	80047b0 <_printf_float+0x1c0>
 8004794:	6121      	str	r1, [r4, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d102      	bne.n	80047a0 <_printf_float+0x1b0>
 800479a:	6822      	ldr	r2, [r4, #0]
 800479c:	07d2      	lsls	r2, r2, #31
 800479e:	d502      	bpl.n	80047a6 <_printf_float+0x1b6>
 80047a0:	3301      	adds	r3, #1
 80047a2:	1859      	adds	r1, r3, r1
 80047a4:	6121      	str	r1, [r4, #16]
 80047a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047a8:	65a3      	str	r3, [r4, #88]	; 0x58
 80047aa:	2300      	movs	r3, #0
 80047ac:	930a      	str	r3, [sp, #40]	; 0x28
 80047ae:	e7d9      	b.n	8004764 <_printf_float+0x174>
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d103      	bne.n	80047bc <_printf_float+0x1cc>
 80047b4:	2201      	movs	r2, #1
 80047b6:	6821      	ldr	r1, [r4, #0]
 80047b8:	4211      	tst	r1, r2
 80047ba:	d000      	beq.n	80047be <_printf_float+0x1ce>
 80047bc:	1c9a      	adds	r2, r3, #2
 80047be:	6122      	str	r2, [r4, #16]
 80047c0:	e7f1      	b.n	80047a6 <_printf_float+0x1b6>
 80047c2:	2367      	movs	r3, #103	; 0x67
 80047c4:	001e      	movs	r6, r3
 80047c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80047ca:	4293      	cmp	r3, r2
 80047cc:	db06      	blt.n	80047dc <_printf_float+0x1ec>
 80047ce:	6822      	ldr	r2, [r4, #0]
 80047d0:	6123      	str	r3, [r4, #16]
 80047d2:	07d2      	lsls	r2, r2, #31
 80047d4:	d5e7      	bpl.n	80047a6 <_printf_float+0x1b6>
 80047d6:	3301      	adds	r3, #1
 80047d8:	6123      	str	r3, [r4, #16]
 80047da:	e7e4      	b.n	80047a6 <_printf_float+0x1b6>
 80047dc:	2101      	movs	r1, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	dc01      	bgt.n	80047e6 <_printf_float+0x1f6>
 80047e2:	1849      	adds	r1, r1, r1
 80047e4:	1ac9      	subs	r1, r1, r3
 80047e6:	1852      	adds	r2, r2, r1
 80047e8:	e7e9      	b.n	80047be <_printf_float+0x1ce>
 80047ea:	6822      	ldr	r2, [r4, #0]
 80047ec:	0553      	lsls	r3, r2, #21
 80047ee:	d408      	bmi.n	8004802 <_printf_float+0x212>
 80047f0:	6923      	ldr	r3, [r4, #16]
 80047f2:	002a      	movs	r2, r5
 80047f4:	0038      	movs	r0, r7
 80047f6:	9908      	ldr	r1, [sp, #32]
 80047f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80047fa:	47a8      	blx	r5
 80047fc:	1c43      	adds	r3, r0, #1
 80047fe:	d129      	bne.n	8004854 <_printf_float+0x264>
 8004800:	e754      	b.n	80046ac <_printf_float+0xbc>
 8004802:	2e65      	cmp	r6, #101	; 0x65
 8004804:	d800      	bhi.n	8004808 <_printf_float+0x218>
 8004806:	e0ec      	b.n	80049e2 <_printf_float+0x3f2>
 8004808:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800480a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800480c:	2200      	movs	r2, #0
 800480e:	2300      	movs	r3, #0
 8004810:	f7fb fe1a 	bl	8000448 <__aeabi_dcmpeq>
 8004814:	2800      	cmp	r0, #0
 8004816:	d034      	beq.n	8004882 <_printf_float+0x292>
 8004818:	2301      	movs	r3, #1
 800481a:	0038      	movs	r0, r7
 800481c:	4a37      	ldr	r2, [pc, #220]	; (80048fc <_printf_float+0x30c>)
 800481e:	9908      	ldr	r1, [sp, #32]
 8004820:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004822:	47a8      	blx	r5
 8004824:	1c43      	adds	r3, r0, #1
 8004826:	d100      	bne.n	800482a <_printf_float+0x23a>
 8004828:	e740      	b.n	80046ac <_printf_float+0xbc>
 800482a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800482c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800482e:	4293      	cmp	r3, r2
 8004830:	db02      	blt.n	8004838 <_printf_float+0x248>
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	07db      	lsls	r3, r3, #31
 8004836:	d50d      	bpl.n	8004854 <_printf_float+0x264>
 8004838:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800483a:	0038      	movs	r0, r7
 800483c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800483e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004840:	9908      	ldr	r1, [sp, #32]
 8004842:	47a8      	blx	r5
 8004844:	2500      	movs	r5, #0
 8004846:	1c43      	adds	r3, r0, #1
 8004848:	d100      	bne.n	800484c <_printf_float+0x25c>
 800484a:	e72f      	b.n	80046ac <_printf_float+0xbc>
 800484c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800484e:	3b01      	subs	r3, #1
 8004850:	42ab      	cmp	r3, r5
 8004852:	dc0a      	bgt.n	800486a <_printf_float+0x27a>
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	079b      	lsls	r3, r3, #30
 8004858:	d500      	bpl.n	800485c <_printf_float+0x26c>
 800485a:	e114      	b.n	8004a86 <_printf_float+0x496>
 800485c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800485e:	68e0      	ldr	r0, [r4, #12]
 8004860:	4298      	cmp	r0, r3
 8004862:	db00      	blt.n	8004866 <_printf_float+0x276>
 8004864:	e724      	b.n	80046b0 <_printf_float+0xc0>
 8004866:	0018      	movs	r0, r3
 8004868:	e722      	b.n	80046b0 <_printf_float+0xc0>
 800486a:	0022      	movs	r2, r4
 800486c:	2301      	movs	r3, #1
 800486e:	0038      	movs	r0, r7
 8004870:	9908      	ldr	r1, [sp, #32]
 8004872:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004874:	321a      	adds	r2, #26
 8004876:	47b0      	blx	r6
 8004878:	1c43      	adds	r3, r0, #1
 800487a:	d100      	bne.n	800487e <_printf_float+0x28e>
 800487c:	e716      	b.n	80046ac <_printf_float+0xbc>
 800487e:	3501      	adds	r5, #1
 8004880:	e7e4      	b.n	800484c <_printf_float+0x25c>
 8004882:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004884:	2b00      	cmp	r3, #0
 8004886:	dc3b      	bgt.n	8004900 <_printf_float+0x310>
 8004888:	2301      	movs	r3, #1
 800488a:	0038      	movs	r0, r7
 800488c:	4a1b      	ldr	r2, [pc, #108]	; (80048fc <_printf_float+0x30c>)
 800488e:	9908      	ldr	r1, [sp, #32]
 8004890:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004892:	47b0      	blx	r6
 8004894:	1c43      	adds	r3, r0, #1
 8004896:	d100      	bne.n	800489a <_printf_float+0x2aa>
 8004898:	e708      	b.n	80046ac <_printf_float+0xbc>
 800489a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800489c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800489e:	4313      	orrs	r3, r2
 80048a0:	d102      	bne.n	80048a8 <_printf_float+0x2b8>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	07db      	lsls	r3, r3, #31
 80048a6:	d5d5      	bpl.n	8004854 <_printf_float+0x264>
 80048a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048aa:	0038      	movs	r0, r7
 80048ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80048ae:	9908      	ldr	r1, [sp, #32]
 80048b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80048b2:	47b0      	blx	r6
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	d100      	bne.n	80048ba <_printf_float+0x2ca>
 80048b8:	e6f8      	b.n	80046ac <_printf_float+0xbc>
 80048ba:	2300      	movs	r3, #0
 80048bc:	930a      	str	r3, [sp, #40]	; 0x28
 80048be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80048c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048c2:	425b      	negs	r3, r3
 80048c4:	4293      	cmp	r3, r2
 80048c6:	dc01      	bgt.n	80048cc <_printf_float+0x2dc>
 80048c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048ca:	e792      	b.n	80047f2 <_printf_float+0x202>
 80048cc:	0022      	movs	r2, r4
 80048ce:	2301      	movs	r3, #1
 80048d0:	0038      	movs	r0, r7
 80048d2:	9908      	ldr	r1, [sp, #32]
 80048d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80048d6:	321a      	adds	r2, #26
 80048d8:	47b0      	blx	r6
 80048da:	1c43      	adds	r3, r0, #1
 80048dc:	d100      	bne.n	80048e0 <_printf_float+0x2f0>
 80048de:	e6e5      	b.n	80046ac <_printf_float+0xbc>
 80048e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048e2:	3301      	adds	r3, #1
 80048e4:	e7ea      	b.n	80048bc <_printf_float+0x2cc>
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	7fefffff 	.word	0x7fefffff
 80048ec:	08006f8c 	.word	0x08006f8c
 80048f0:	08006f90 	.word	0x08006f90
 80048f4:	08006f94 	.word	0x08006f94
 80048f8:	08006f98 	.word	0x08006f98
 80048fc:	08006f9c 	.word	0x08006f9c
 8004900:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004902:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004904:	920a      	str	r2, [sp, #40]	; 0x28
 8004906:	429a      	cmp	r2, r3
 8004908:	dd00      	ble.n	800490c <_printf_float+0x31c>
 800490a:	930a      	str	r3, [sp, #40]	; 0x28
 800490c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800490e:	2b00      	cmp	r3, #0
 8004910:	dc3d      	bgt.n	800498e <_printf_float+0x39e>
 8004912:	2300      	movs	r3, #0
 8004914:	930e      	str	r3, [sp, #56]	; 0x38
 8004916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004918:	43db      	mvns	r3, r3
 800491a:	17db      	asrs	r3, r3, #31
 800491c:	930f      	str	r3, [sp, #60]	; 0x3c
 800491e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004920:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004922:	930c      	str	r3, [sp, #48]	; 0x30
 8004924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004926:	4013      	ands	r3, r2
 8004928:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800492e:	4293      	cmp	r3, r2
 8004930:	dc36      	bgt.n	80049a0 <_printf_float+0x3b0>
 8004932:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004934:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004936:	4293      	cmp	r3, r2
 8004938:	db40      	blt.n	80049bc <_printf_float+0x3cc>
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	07db      	lsls	r3, r3, #31
 800493e:	d43d      	bmi.n	80049bc <_printf_float+0x3cc>
 8004940:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004944:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	1a52      	subs	r2, r2, r1
 800494a:	920a      	str	r2, [sp, #40]	; 0x28
 800494c:	429a      	cmp	r2, r3
 800494e:	dd00      	ble.n	8004952 <_printf_float+0x362>
 8004950:	930a      	str	r3, [sp, #40]	; 0x28
 8004952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004954:	2b00      	cmp	r3, #0
 8004956:	dc3a      	bgt.n	80049ce <_printf_float+0x3de>
 8004958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800495a:	2500      	movs	r5, #0
 800495c:	43db      	mvns	r3, r3
 800495e:	17db      	asrs	r3, r3, #31
 8004960:	930b      	str	r3, [sp, #44]	; 0x2c
 8004962:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004964:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004966:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004968:	1a9b      	subs	r3, r3, r2
 800496a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800496c:	400a      	ands	r2, r1
 800496e:	1a9b      	subs	r3, r3, r2
 8004970:	42ab      	cmp	r3, r5
 8004972:	dc00      	bgt.n	8004976 <_printf_float+0x386>
 8004974:	e76e      	b.n	8004854 <_printf_float+0x264>
 8004976:	0022      	movs	r2, r4
 8004978:	2301      	movs	r3, #1
 800497a:	0038      	movs	r0, r7
 800497c:	9908      	ldr	r1, [sp, #32]
 800497e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004980:	321a      	adds	r2, #26
 8004982:	47b0      	blx	r6
 8004984:	1c43      	adds	r3, r0, #1
 8004986:	d100      	bne.n	800498a <_printf_float+0x39a>
 8004988:	e690      	b.n	80046ac <_printf_float+0xbc>
 800498a:	3501      	adds	r5, #1
 800498c:	e7e9      	b.n	8004962 <_printf_float+0x372>
 800498e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004990:	002a      	movs	r2, r5
 8004992:	0038      	movs	r0, r7
 8004994:	9908      	ldr	r1, [sp, #32]
 8004996:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004998:	47b0      	blx	r6
 800499a:	1c43      	adds	r3, r0, #1
 800499c:	d1b9      	bne.n	8004912 <_printf_float+0x322>
 800499e:	e685      	b.n	80046ac <_printf_float+0xbc>
 80049a0:	0022      	movs	r2, r4
 80049a2:	2301      	movs	r3, #1
 80049a4:	0038      	movs	r0, r7
 80049a6:	9908      	ldr	r1, [sp, #32]
 80049a8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80049aa:	321a      	adds	r2, #26
 80049ac:	47b0      	blx	r6
 80049ae:	1c43      	adds	r3, r0, #1
 80049b0:	d100      	bne.n	80049b4 <_printf_float+0x3c4>
 80049b2:	e67b      	b.n	80046ac <_printf_float+0xbc>
 80049b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049b6:	3301      	adds	r3, #1
 80049b8:	930e      	str	r3, [sp, #56]	; 0x38
 80049ba:	e7b0      	b.n	800491e <_printf_float+0x32e>
 80049bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049be:	0038      	movs	r0, r7
 80049c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049c2:	9908      	ldr	r1, [sp, #32]
 80049c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80049c6:	47b0      	blx	r6
 80049c8:	1c43      	adds	r3, r0, #1
 80049ca:	d1b9      	bne.n	8004940 <_printf_float+0x350>
 80049cc:	e66e      	b.n	80046ac <_printf_float+0xbc>
 80049ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049d0:	0038      	movs	r0, r7
 80049d2:	18ea      	adds	r2, r5, r3
 80049d4:	9908      	ldr	r1, [sp, #32]
 80049d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80049da:	47a8      	blx	r5
 80049dc:	1c43      	adds	r3, r0, #1
 80049de:	d1bb      	bne.n	8004958 <_printf_float+0x368>
 80049e0:	e664      	b.n	80046ac <_printf_float+0xbc>
 80049e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	dc02      	bgt.n	80049ee <_printf_float+0x3fe>
 80049e8:	2301      	movs	r3, #1
 80049ea:	421a      	tst	r2, r3
 80049ec:	d038      	beq.n	8004a60 <_printf_float+0x470>
 80049ee:	2301      	movs	r3, #1
 80049f0:	002a      	movs	r2, r5
 80049f2:	0038      	movs	r0, r7
 80049f4:	9908      	ldr	r1, [sp, #32]
 80049f6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80049f8:	47b0      	blx	r6
 80049fa:	1c43      	adds	r3, r0, #1
 80049fc:	d100      	bne.n	8004a00 <_printf_float+0x410>
 80049fe:	e655      	b.n	80046ac <_printf_float+0xbc>
 8004a00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a02:	0038      	movs	r0, r7
 8004a04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a06:	9908      	ldr	r1, [sp, #32]
 8004a08:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004a0a:	47b0      	blx	r6
 8004a0c:	1c43      	adds	r3, r0, #1
 8004a0e:	d100      	bne.n	8004a12 <_printf_float+0x422>
 8004a10:	e64c      	b.n	80046ac <_printf_float+0xbc>
 8004a12:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004a14:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004a16:	2200      	movs	r2, #0
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f7fb fd15 	bl	8000448 <__aeabi_dcmpeq>
 8004a1e:	2800      	cmp	r0, #0
 8004a20:	d11c      	bne.n	8004a5c <_printf_float+0x46c>
 8004a22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a24:	1c6a      	adds	r2, r5, #1
 8004a26:	3b01      	subs	r3, #1
 8004a28:	0038      	movs	r0, r7
 8004a2a:	9908      	ldr	r1, [sp, #32]
 8004a2c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004a2e:	47a8      	blx	r5
 8004a30:	1c43      	adds	r3, r0, #1
 8004a32:	d10f      	bne.n	8004a54 <_printf_float+0x464>
 8004a34:	e63a      	b.n	80046ac <_printf_float+0xbc>
 8004a36:	0022      	movs	r2, r4
 8004a38:	2301      	movs	r3, #1
 8004a3a:	0038      	movs	r0, r7
 8004a3c:	9908      	ldr	r1, [sp, #32]
 8004a3e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004a40:	321a      	adds	r2, #26
 8004a42:	47b0      	blx	r6
 8004a44:	1c43      	adds	r3, r0, #1
 8004a46:	d100      	bne.n	8004a4a <_printf_float+0x45a>
 8004a48:	e630      	b.n	80046ac <_printf_float+0xbc>
 8004a4a:	3501      	adds	r5, #1
 8004a4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	42ab      	cmp	r3, r5
 8004a52:	dcf0      	bgt.n	8004a36 <_printf_float+0x446>
 8004a54:	0022      	movs	r2, r4
 8004a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a58:	3250      	adds	r2, #80	; 0x50
 8004a5a:	e6cb      	b.n	80047f4 <_printf_float+0x204>
 8004a5c:	2500      	movs	r5, #0
 8004a5e:	e7f5      	b.n	8004a4c <_printf_float+0x45c>
 8004a60:	002a      	movs	r2, r5
 8004a62:	e7e1      	b.n	8004a28 <_printf_float+0x438>
 8004a64:	0022      	movs	r2, r4
 8004a66:	2301      	movs	r3, #1
 8004a68:	0038      	movs	r0, r7
 8004a6a:	9908      	ldr	r1, [sp, #32]
 8004a6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004a6e:	3219      	adds	r2, #25
 8004a70:	47b0      	blx	r6
 8004a72:	1c43      	adds	r3, r0, #1
 8004a74:	d100      	bne.n	8004a78 <_printf_float+0x488>
 8004a76:	e619      	b.n	80046ac <_printf_float+0xbc>
 8004a78:	3501      	adds	r5, #1
 8004a7a:	68e3      	ldr	r3, [r4, #12]
 8004a7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	42ab      	cmp	r3, r5
 8004a82:	dcef      	bgt.n	8004a64 <_printf_float+0x474>
 8004a84:	e6ea      	b.n	800485c <_printf_float+0x26c>
 8004a86:	2500      	movs	r5, #0
 8004a88:	e7f7      	b.n	8004a7a <_printf_float+0x48a>
 8004a8a:	46c0      	nop			; (mov r8, r8)

08004a8c <_printf_common>:
 8004a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a8e:	0015      	movs	r5, r2
 8004a90:	9301      	str	r3, [sp, #4]
 8004a92:	688a      	ldr	r2, [r1, #8]
 8004a94:	690b      	ldr	r3, [r1, #16]
 8004a96:	000c      	movs	r4, r1
 8004a98:	9000      	str	r0, [sp, #0]
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	da00      	bge.n	8004aa0 <_printf_common+0x14>
 8004a9e:	0013      	movs	r3, r2
 8004aa0:	0022      	movs	r2, r4
 8004aa2:	602b      	str	r3, [r5, #0]
 8004aa4:	3243      	adds	r2, #67	; 0x43
 8004aa6:	7812      	ldrb	r2, [r2, #0]
 8004aa8:	2a00      	cmp	r2, #0
 8004aaa:	d001      	beq.n	8004ab0 <_printf_common+0x24>
 8004aac:	3301      	adds	r3, #1
 8004aae:	602b      	str	r3, [r5, #0]
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	069b      	lsls	r3, r3, #26
 8004ab4:	d502      	bpl.n	8004abc <_printf_common+0x30>
 8004ab6:	682b      	ldr	r3, [r5, #0]
 8004ab8:	3302      	adds	r3, #2
 8004aba:	602b      	str	r3, [r5, #0]
 8004abc:	6822      	ldr	r2, [r4, #0]
 8004abe:	2306      	movs	r3, #6
 8004ac0:	0017      	movs	r7, r2
 8004ac2:	401f      	ands	r7, r3
 8004ac4:	421a      	tst	r2, r3
 8004ac6:	d027      	beq.n	8004b18 <_printf_common+0x8c>
 8004ac8:	0023      	movs	r3, r4
 8004aca:	3343      	adds	r3, #67	; 0x43
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	1e5a      	subs	r2, r3, #1
 8004ad0:	4193      	sbcs	r3, r2
 8004ad2:	6822      	ldr	r2, [r4, #0]
 8004ad4:	0692      	lsls	r2, r2, #26
 8004ad6:	d430      	bmi.n	8004b3a <_printf_common+0xae>
 8004ad8:	0022      	movs	r2, r4
 8004ada:	9901      	ldr	r1, [sp, #4]
 8004adc:	9800      	ldr	r0, [sp, #0]
 8004ade:	9e08      	ldr	r6, [sp, #32]
 8004ae0:	3243      	adds	r2, #67	; 0x43
 8004ae2:	47b0      	blx	r6
 8004ae4:	1c43      	adds	r3, r0, #1
 8004ae6:	d025      	beq.n	8004b34 <_printf_common+0xa8>
 8004ae8:	2306      	movs	r3, #6
 8004aea:	6820      	ldr	r0, [r4, #0]
 8004aec:	682a      	ldr	r2, [r5, #0]
 8004aee:	68e1      	ldr	r1, [r4, #12]
 8004af0:	2500      	movs	r5, #0
 8004af2:	4003      	ands	r3, r0
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d103      	bne.n	8004b00 <_printf_common+0x74>
 8004af8:	1a8d      	subs	r5, r1, r2
 8004afa:	43eb      	mvns	r3, r5
 8004afc:	17db      	asrs	r3, r3, #31
 8004afe:	401d      	ands	r5, r3
 8004b00:	68a3      	ldr	r3, [r4, #8]
 8004b02:	6922      	ldr	r2, [r4, #16]
 8004b04:	4293      	cmp	r3, r2
 8004b06:	dd01      	ble.n	8004b0c <_printf_common+0x80>
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	18ed      	adds	r5, r5, r3
 8004b0c:	2700      	movs	r7, #0
 8004b0e:	42bd      	cmp	r5, r7
 8004b10:	d120      	bne.n	8004b54 <_printf_common+0xc8>
 8004b12:	2000      	movs	r0, #0
 8004b14:	e010      	b.n	8004b38 <_printf_common+0xac>
 8004b16:	3701      	adds	r7, #1
 8004b18:	68e3      	ldr	r3, [r4, #12]
 8004b1a:	682a      	ldr	r2, [r5, #0]
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	42bb      	cmp	r3, r7
 8004b20:	ddd2      	ble.n	8004ac8 <_printf_common+0x3c>
 8004b22:	0022      	movs	r2, r4
 8004b24:	2301      	movs	r3, #1
 8004b26:	9901      	ldr	r1, [sp, #4]
 8004b28:	9800      	ldr	r0, [sp, #0]
 8004b2a:	9e08      	ldr	r6, [sp, #32]
 8004b2c:	3219      	adds	r2, #25
 8004b2e:	47b0      	blx	r6
 8004b30:	1c43      	adds	r3, r0, #1
 8004b32:	d1f0      	bne.n	8004b16 <_printf_common+0x8a>
 8004b34:	2001      	movs	r0, #1
 8004b36:	4240      	negs	r0, r0
 8004b38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b3a:	2030      	movs	r0, #48	; 0x30
 8004b3c:	18e1      	adds	r1, r4, r3
 8004b3e:	3143      	adds	r1, #67	; 0x43
 8004b40:	7008      	strb	r0, [r1, #0]
 8004b42:	0021      	movs	r1, r4
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	3145      	adds	r1, #69	; 0x45
 8004b48:	7809      	ldrb	r1, [r1, #0]
 8004b4a:	18a2      	adds	r2, r4, r2
 8004b4c:	3243      	adds	r2, #67	; 0x43
 8004b4e:	3302      	adds	r3, #2
 8004b50:	7011      	strb	r1, [r2, #0]
 8004b52:	e7c1      	b.n	8004ad8 <_printf_common+0x4c>
 8004b54:	0022      	movs	r2, r4
 8004b56:	2301      	movs	r3, #1
 8004b58:	9901      	ldr	r1, [sp, #4]
 8004b5a:	9800      	ldr	r0, [sp, #0]
 8004b5c:	9e08      	ldr	r6, [sp, #32]
 8004b5e:	321a      	adds	r2, #26
 8004b60:	47b0      	blx	r6
 8004b62:	1c43      	adds	r3, r0, #1
 8004b64:	d0e6      	beq.n	8004b34 <_printf_common+0xa8>
 8004b66:	3701      	adds	r7, #1
 8004b68:	e7d1      	b.n	8004b0e <_printf_common+0x82>
	...

08004b6c <_printf_i>:
 8004b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b6e:	b08b      	sub	sp, #44	; 0x2c
 8004b70:	9206      	str	r2, [sp, #24]
 8004b72:	000a      	movs	r2, r1
 8004b74:	3243      	adds	r2, #67	; 0x43
 8004b76:	9307      	str	r3, [sp, #28]
 8004b78:	9005      	str	r0, [sp, #20]
 8004b7a:	9204      	str	r2, [sp, #16]
 8004b7c:	7e0a      	ldrb	r2, [r1, #24]
 8004b7e:	000c      	movs	r4, r1
 8004b80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004b82:	2a78      	cmp	r2, #120	; 0x78
 8004b84:	d806      	bhi.n	8004b94 <_printf_i+0x28>
 8004b86:	2a62      	cmp	r2, #98	; 0x62
 8004b88:	d808      	bhi.n	8004b9c <_printf_i+0x30>
 8004b8a:	2a00      	cmp	r2, #0
 8004b8c:	d100      	bne.n	8004b90 <_printf_i+0x24>
 8004b8e:	e0c0      	b.n	8004d12 <_printf_i+0x1a6>
 8004b90:	2a58      	cmp	r2, #88	; 0x58
 8004b92:	d052      	beq.n	8004c3a <_printf_i+0xce>
 8004b94:	0026      	movs	r6, r4
 8004b96:	3642      	adds	r6, #66	; 0x42
 8004b98:	7032      	strb	r2, [r6, #0]
 8004b9a:	e022      	b.n	8004be2 <_printf_i+0x76>
 8004b9c:	0010      	movs	r0, r2
 8004b9e:	3863      	subs	r0, #99	; 0x63
 8004ba0:	2815      	cmp	r0, #21
 8004ba2:	d8f7      	bhi.n	8004b94 <_printf_i+0x28>
 8004ba4:	f7fb fac0 	bl	8000128 <__gnu_thumb1_case_shi>
 8004ba8:	001f0016 	.word	0x001f0016
 8004bac:	fff6fff6 	.word	0xfff6fff6
 8004bb0:	fff6fff6 	.word	0xfff6fff6
 8004bb4:	fff6001f 	.word	0xfff6001f
 8004bb8:	fff6fff6 	.word	0xfff6fff6
 8004bbc:	00a8fff6 	.word	0x00a8fff6
 8004bc0:	009a0036 	.word	0x009a0036
 8004bc4:	fff6fff6 	.word	0xfff6fff6
 8004bc8:	fff600b9 	.word	0xfff600b9
 8004bcc:	fff60036 	.word	0xfff60036
 8004bd0:	009efff6 	.word	0x009efff6
 8004bd4:	0026      	movs	r6, r4
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	3642      	adds	r6, #66	; 0x42
 8004bda:	1d11      	adds	r1, r2, #4
 8004bdc:	6019      	str	r1, [r3, #0]
 8004bde:	6813      	ldr	r3, [r2, #0]
 8004be0:	7033      	strb	r3, [r6, #0]
 8004be2:	2301      	movs	r3, #1
 8004be4:	e0a7      	b.n	8004d36 <_printf_i+0x1ca>
 8004be6:	6808      	ldr	r0, [r1, #0]
 8004be8:	6819      	ldr	r1, [r3, #0]
 8004bea:	1d0a      	adds	r2, r1, #4
 8004bec:	0605      	lsls	r5, r0, #24
 8004bee:	d50b      	bpl.n	8004c08 <_printf_i+0x9c>
 8004bf0:	680d      	ldr	r5, [r1, #0]
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	2d00      	cmp	r5, #0
 8004bf6:	da03      	bge.n	8004c00 <_printf_i+0x94>
 8004bf8:	232d      	movs	r3, #45	; 0x2d
 8004bfa:	9a04      	ldr	r2, [sp, #16]
 8004bfc:	426d      	negs	r5, r5
 8004bfe:	7013      	strb	r3, [r2, #0]
 8004c00:	4b61      	ldr	r3, [pc, #388]	; (8004d88 <_printf_i+0x21c>)
 8004c02:	270a      	movs	r7, #10
 8004c04:	9303      	str	r3, [sp, #12]
 8004c06:	e032      	b.n	8004c6e <_printf_i+0x102>
 8004c08:	680d      	ldr	r5, [r1, #0]
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	0641      	lsls	r1, r0, #25
 8004c0e:	d5f1      	bpl.n	8004bf4 <_printf_i+0x88>
 8004c10:	b22d      	sxth	r5, r5
 8004c12:	e7ef      	b.n	8004bf4 <_printf_i+0x88>
 8004c14:	680d      	ldr	r5, [r1, #0]
 8004c16:	6819      	ldr	r1, [r3, #0]
 8004c18:	1d08      	adds	r0, r1, #4
 8004c1a:	6018      	str	r0, [r3, #0]
 8004c1c:	062e      	lsls	r6, r5, #24
 8004c1e:	d501      	bpl.n	8004c24 <_printf_i+0xb8>
 8004c20:	680d      	ldr	r5, [r1, #0]
 8004c22:	e003      	b.n	8004c2c <_printf_i+0xc0>
 8004c24:	066d      	lsls	r5, r5, #25
 8004c26:	d5fb      	bpl.n	8004c20 <_printf_i+0xb4>
 8004c28:	680d      	ldr	r5, [r1, #0]
 8004c2a:	b2ad      	uxth	r5, r5
 8004c2c:	4b56      	ldr	r3, [pc, #344]	; (8004d88 <_printf_i+0x21c>)
 8004c2e:	270a      	movs	r7, #10
 8004c30:	9303      	str	r3, [sp, #12]
 8004c32:	2a6f      	cmp	r2, #111	; 0x6f
 8004c34:	d117      	bne.n	8004c66 <_printf_i+0xfa>
 8004c36:	2708      	movs	r7, #8
 8004c38:	e015      	b.n	8004c66 <_printf_i+0xfa>
 8004c3a:	3145      	adds	r1, #69	; 0x45
 8004c3c:	700a      	strb	r2, [r1, #0]
 8004c3e:	4a52      	ldr	r2, [pc, #328]	; (8004d88 <_printf_i+0x21c>)
 8004c40:	9203      	str	r2, [sp, #12]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	6821      	ldr	r1, [r4, #0]
 8004c46:	ca20      	ldmia	r2!, {r5}
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	0608      	lsls	r0, r1, #24
 8004c4c:	d550      	bpl.n	8004cf0 <_printf_i+0x184>
 8004c4e:	07cb      	lsls	r3, r1, #31
 8004c50:	d502      	bpl.n	8004c58 <_printf_i+0xec>
 8004c52:	2320      	movs	r3, #32
 8004c54:	4319      	orrs	r1, r3
 8004c56:	6021      	str	r1, [r4, #0]
 8004c58:	2710      	movs	r7, #16
 8004c5a:	2d00      	cmp	r5, #0
 8004c5c:	d103      	bne.n	8004c66 <_printf_i+0xfa>
 8004c5e:	2320      	movs	r3, #32
 8004c60:	6822      	ldr	r2, [r4, #0]
 8004c62:	439a      	bics	r2, r3
 8004c64:	6022      	str	r2, [r4, #0]
 8004c66:	0023      	movs	r3, r4
 8004c68:	2200      	movs	r2, #0
 8004c6a:	3343      	adds	r3, #67	; 0x43
 8004c6c:	701a      	strb	r2, [r3, #0]
 8004c6e:	6863      	ldr	r3, [r4, #4]
 8004c70:	60a3      	str	r3, [r4, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	db03      	blt.n	8004c7e <_printf_i+0x112>
 8004c76:	2204      	movs	r2, #4
 8004c78:	6821      	ldr	r1, [r4, #0]
 8004c7a:	4391      	bics	r1, r2
 8004c7c:	6021      	str	r1, [r4, #0]
 8004c7e:	2d00      	cmp	r5, #0
 8004c80:	d102      	bne.n	8004c88 <_printf_i+0x11c>
 8004c82:	9e04      	ldr	r6, [sp, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00c      	beq.n	8004ca2 <_printf_i+0x136>
 8004c88:	9e04      	ldr	r6, [sp, #16]
 8004c8a:	0028      	movs	r0, r5
 8004c8c:	0039      	movs	r1, r7
 8004c8e:	f7fb fadb 	bl	8000248 <__aeabi_uidivmod>
 8004c92:	9b03      	ldr	r3, [sp, #12]
 8004c94:	3e01      	subs	r6, #1
 8004c96:	5c5b      	ldrb	r3, [r3, r1]
 8004c98:	7033      	strb	r3, [r6, #0]
 8004c9a:	002b      	movs	r3, r5
 8004c9c:	0005      	movs	r5, r0
 8004c9e:	429f      	cmp	r7, r3
 8004ca0:	d9f3      	bls.n	8004c8a <_printf_i+0x11e>
 8004ca2:	2f08      	cmp	r7, #8
 8004ca4:	d109      	bne.n	8004cba <_printf_i+0x14e>
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	07db      	lsls	r3, r3, #31
 8004caa:	d506      	bpl.n	8004cba <_printf_i+0x14e>
 8004cac:	6863      	ldr	r3, [r4, #4]
 8004cae:	6922      	ldr	r2, [r4, #16]
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	dc02      	bgt.n	8004cba <_printf_i+0x14e>
 8004cb4:	2330      	movs	r3, #48	; 0x30
 8004cb6:	3e01      	subs	r6, #1
 8004cb8:	7033      	strb	r3, [r6, #0]
 8004cba:	9b04      	ldr	r3, [sp, #16]
 8004cbc:	1b9b      	subs	r3, r3, r6
 8004cbe:	6123      	str	r3, [r4, #16]
 8004cc0:	9b07      	ldr	r3, [sp, #28]
 8004cc2:	0021      	movs	r1, r4
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	9805      	ldr	r0, [sp, #20]
 8004cc8:	9b06      	ldr	r3, [sp, #24]
 8004cca:	aa09      	add	r2, sp, #36	; 0x24
 8004ccc:	f7ff fede 	bl	8004a8c <_printf_common>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d135      	bne.n	8004d40 <_printf_i+0x1d4>
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	4240      	negs	r0, r0
 8004cd8:	b00b      	add	sp, #44	; 0x2c
 8004cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cdc:	2220      	movs	r2, #32
 8004cde:	6809      	ldr	r1, [r1, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	6022      	str	r2, [r4, #0]
 8004ce4:	0022      	movs	r2, r4
 8004ce6:	2178      	movs	r1, #120	; 0x78
 8004ce8:	3245      	adds	r2, #69	; 0x45
 8004cea:	7011      	strb	r1, [r2, #0]
 8004cec:	4a27      	ldr	r2, [pc, #156]	; (8004d8c <_printf_i+0x220>)
 8004cee:	e7a7      	b.n	8004c40 <_printf_i+0xd4>
 8004cf0:	0648      	lsls	r0, r1, #25
 8004cf2:	d5ac      	bpl.n	8004c4e <_printf_i+0xe2>
 8004cf4:	b2ad      	uxth	r5, r5
 8004cf6:	e7aa      	b.n	8004c4e <_printf_i+0xe2>
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	680d      	ldr	r5, [r1, #0]
 8004cfc:	1d10      	adds	r0, r2, #4
 8004cfe:	6949      	ldr	r1, [r1, #20]
 8004d00:	6018      	str	r0, [r3, #0]
 8004d02:	6813      	ldr	r3, [r2, #0]
 8004d04:	062e      	lsls	r6, r5, #24
 8004d06:	d501      	bpl.n	8004d0c <_printf_i+0x1a0>
 8004d08:	6019      	str	r1, [r3, #0]
 8004d0a:	e002      	b.n	8004d12 <_printf_i+0x1a6>
 8004d0c:	066d      	lsls	r5, r5, #25
 8004d0e:	d5fb      	bpl.n	8004d08 <_printf_i+0x19c>
 8004d10:	8019      	strh	r1, [r3, #0]
 8004d12:	2300      	movs	r3, #0
 8004d14:	9e04      	ldr	r6, [sp, #16]
 8004d16:	6123      	str	r3, [r4, #16]
 8004d18:	e7d2      	b.n	8004cc0 <_printf_i+0x154>
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	1d11      	adds	r1, r2, #4
 8004d1e:	6019      	str	r1, [r3, #0]
 8004d20:	6816      	ldr	r6, [r2, #0]
 8004d22:	2100      	movs	r1, #0
 8004d24:	0030      	movs	r0, r6
 8004d26:	6862      	ldr	r2, [r4, #4]
 8004d28:	f000 fef2 	bl	8005b10 <memchr>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d001      	beq.n	8004d34 <_printf_i+0x1c8>
 8004d30:	1b80      	subs	r0, r0, r6
 8004d32:	6060      	str	r0, [r4, #4]
 8004d34:	6863      	ldr	r3, [r4, #4]
 8004d36:	6123      	str	r3, [r4, #16]
 8004d38:	2300      	movs	r3, #0
 8004d3a:	9a04      	ldr	r2, [sp, #16]
 8004d3c:	7013      	strb	r3, [r2, #0]
 8004d3e:	e7bf      	b.n	8004cc0 <_printf_i+0x154>
 8004d40:	6923      	ldr	r3, [r4, #16]
 8004d42:	0032      	movs	r2, r6
 8004d44:	9906      	ldr	r1, [sp, #24]
 8004d46:	9805      	ldr	r0, [sp, #20]
 8004d48:	9d07      	ldr	r5, [sp, #28]
 8004d4a:	47a8      	blx	r5
 8004d4c:	1c43      	adds	r3, r0, #1
 8004d4e:	d0c1      	beq.n	8004cd4 <_printf_i+0x168>
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	079b      	lsls	r3, r3, #30
 8004d54:	d415      	bmi.n	8004d82 <_printf_i+0x216>
 8004d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d58:	68e0      	ldr	r0, [r4, #12]
 8004d5a:	4298      	cmp	r0, r3
 8004d5c:	dabc      	bge.n	8004cd8 <_printf_i+0x16c>
 8004d5e:	0018      	movs	r0, r3
 8004d60:	e7ba      	b.n	8004cd8 <_printf_i+0x16c>
 8004d62:	0022      	movs	r2, r4
 8004d64:	2301      	movs	r3, #1
 8004d66:	9906      	ldr	r1, [sp, #24]
 8004d68:	9805      	ldr	r0, [sp, #20]
 8004d6a:	9e07      	ldr	r6, [sp, #28]
 8004d6c:	3219      	adds	r2, #25
 8004d6e:	47b0      	blx	r6
 8004d70:	1c43      	adds	r3, r0, #1
 8004d72:	d0af      	beq.n	8004cd4 <_printf_i+0x168>
 8004d74:	3501      	adds	r5, #1
 8004d76:	68e3      	ldr	r3, [r4, #12]
 8004d78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d7a:	1a9b      	subs	r3, r3, r2
 8004d7c:	42ab      	cmp	r3, r5
 8004d7e:	dcf0      	bgt.n	8004d62 <_printf_i+0x1f6>
 8004d80:	e7e9      	b.n	8004d56 <_printf_i+0x1ea>
 8004d82:	2500      	movs	r5, #0
 8004d84:	e7f7      	b.n	8004d76 <_printf_i+0x20a>
 8004d86:	46c0      	nop			; (mov r8, r8)
 8004d88:	08006f9e 	.word	0x08006f9e
 8004d8c:	08006faf 	.word	0x08006faf

08004d90 <_sbrk_r>:
 8004d90:	2300      	movs	r3, #0
 8004d92:	b570      	push	{r4, r5, r6, lr}
 8004d94:	4d06      	ldr	r5, [pc, #24]	; (8004db0 <_sbrk_r+0x20>)
 8004d96:	0004      	movs	r4, r0
 8004d98:	0008      	movs	r0, r1
 8004d9a:	602b      	str	r3, [r5, #0]
 8004d9c:	f7fd fbdc 	bl	8002558 <_sbrk>
 8004da0:	1c43      	adds	r3, r0, #1
 8004da2:	d103      	bne.n	8004dac <_sbrk_r+0x1c>
 8004da4:	682b      	ldr	r3, [r5, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d000      	beq.n	8004dac <_sbrk_r+0x1c>
 8004daa:	6023      	str	r3, [r4, #0]
 8004dac:	bd70      	pop	{r4, r5, r6, pc}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	200002f8 	.word	0x200002f8

08004db4 <quorem>:
 8004db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004db6:	0006      	movs	r6, r0
 8004db8:	690d      	ldr	r5, [r1, #16]
 8004dba:	6933      	ldr	r3, [r6, #16]
 8004dbc:	b087      	sub	sp, #28
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	9102      	str	r1, [sp, #8]
 8004dc2:	42ab      	cmp	r3, r5
 8004dc4:	db6b      	blt.n	8004e9e <quorem+0xea>
 8004dc6:	000b      	movs	r3, r1
 8004dc8:	3d01      	subs	r5, #1
 8004dca:	00ac      	lsls	r4, r5, #2
 8004dcc:	3314      	adds	r3, #20
 8004dce:	9305      	str	r3, [sp, #20]
 8004dd0:	191b      	adds	r3, r3, r4
 8004dd2:	9303      	str	r3, [sp, #12]
 8004dd4:	0033      	movs	r3, r6
 8004dd6:	3314      	adds	r3, #20
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	191c      	adds	r4, r3, r4
 8004ddc:	9b03      	ldr	r3, [sp, #12]
 8004dde:	6827      	ldr	r7, [r4, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	0038      	movs	r0, r7
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	3301      	adds	r3, #1
 8004de8:	0019      	movs	r1, r3
 8004dea:	9304      	str	r3, [sp, #16]
 8004dec:	f7fb f9a6 	bl	800013c <__udivsi3>
 8004df0:	9b04      	ldr	r3, [sp, #16]
 8004df2:	9000      	str	r0, [sp, #0]
 8004df4:	429f      	cmp	r7, r3
 8004df6:	d329      	bcc.n	8004e4c <quorem+0x98>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	469c      	mov	ip, r3
 8004dfc:	9801      	ldr	r0, [sp, #4]
 8004dfe:	9f05      	ldr	r7, [sp, #20]
 8004e00:	9304      	str	r3, [sp, #16]
 8004e02:	cf08      	ldmia	r7!, {r3}
 8004e04:	9a00      	ldr	r2, [sp, #0]
 8004e06:	b299      	uxth	r1, r3
 8004e08:	4351      	muls	r1, r2
 8004e0a:	0c1b      	lsrs	r3, r3, #16
 8004e0c:	4353      	muls	r3, r2
 8004e0e:	4461      	add	r1, ip
 8004e10:	0c0a      	lsrs	r2, r1, #16
 8004e12:	189b      	adds	r3, r3, r2
 8004e14:	0c1a      	lsrs	r2, r3, #16
 8004e16:	9305      	str	r3, [sp, #20]
 8004e18:	6803      	ldr	r3, [r0, #0]
 8004e1a:	4694      	mov	ip, r2
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	9b04      	ldr	r3, [sp, #16]
 8004e20:	b289      	uxth	r1, r1
 8004e22:	18d2      	adds	r2, r2, r3
 8004e24:	6803      	ldr	r3, [r0, #0]
 8004e26:	1a52      	subs	r2, r2, r1
 8004e28:	0c19      	lsrs	r1, r3, #16
 8004e2a:	466b      	mov	r3, sp
 8004e2c:	8a9b      	ldrh	r3, [r3, #20]
 8004e2e:	1acb      	subs	r3, r1, r3
 8004e30:	1411      	asrs	r1, r2, #16
 8004e32:	185b      	adds	r3, r3, r1
 8004e34:	1419      	asrs	r1, r3, #16
 8004e36:	b292      	uxth	r2, r2
 8004e38:	041b      	lsls	r3, r3, #16
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	9b03      	ldr	r3, [sp, #12]
 8004e3e:	9104      	str	r1, [sp, #16]
 8004e40:	c004      	stmia	r0!, {r2}
 8004e42:	42bb      	cmp	r3, r7
 8004e44:	d2dd      	bcs.n	8004e02 <quorem+0x4e>
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d02e      	beq.n	8004eaa <quorem+0xf6>
 8004e4c:	0030      	movs	r0, r6
 8004e4e:	9902      	ldr	r1, [sp, #8]
 8004e50:	f001 f900 	bl	8006054 <__mcmp>
 8004e54:	2800      	cmp	r0, #0
 8004e56:	db21      	blt.n	8004e9c <quorem+0xe8>
 8004e58:	0030      	movs	r0, r6
 8004e5a:	2400      	movs	r4, #0
 8004e5c:	9b00      	ldr	r3, [sp, #0]
 8004e5e:	9902      	ldr	r1, [sp, #8]
 8004e60:	3301      	adds	r3, #1
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	3014      	adds	r0, #20
 8004e66:	3114      	adds	r1, #20
 8004e68:	6802      	ldr	r2, [r0, #0]
 8004e6a:	c908      	ldmia	r1!, {r3}
 8004e6c:	b292      	uxth	r2, r2
 8004e6e:	1914      	adds	r4, r2, r4
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	1aa2      	subs	r2, r4, r2
 8004e74:	6804      	ldr	r4, [r0, #0]
 8004e76:	0c1b      	lsrs	r3, r3, #16
 8004e78:	0c24      	lsrs	r4, r4, #16
 8004e7a:	1ae3      	subs	r3, r4, r3
 8004e7c:	1414      	asrs	r4, r2, #16
 8004e7e:	191b      	adds	r3, r3, r4
 8004e80:	141c      	asrs	r4, r3, #16
 8004e82:	b292      	uxth	r2, r2
 8004e84:	041b      	lsls	r3, r3, #16
 8004e86:	4313      	orrs	r3, r2
 8004e88:	c008      	stmia	r0!, {r3}
 8004e8a:	9b03      	ldr	r3, [sp, #12]
 8004e8c:	428b      	cmp	r3, r1
 8004e8e:	d2eb      	bcs.n	8004e68 <quorem+0xb4>
 8004e90:	9a01      	ldr	r2, [sp, #4]
 8004e92:	00ab      	lsls	r3, r5, #2
 8004e94:	18d3      	adds	r3, r2, r3
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	2a00      	cmp	r2, #0
 8004e9a:	d010      	beq.n	8004ebe <quorem+0x10a>
 8004e9c:	9800      	ldr	r0, [sp, #0]
 8004e9e:	b007      	add	sp, #28
 8004ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d104      	bne.n	8004eb2 <quorem+0xfe>
 8004ea8:	3d01      	subs	r5, #1
 8004eaa:	9b01      	ldr	r3, [sp, #4]
 8004eac:	3c04      	subs	r4, #4
 8004eae:	42a3      	cmp	r3, r4
 8004eb0:	d3f7      	bcc.n	8004ea2 <quorem+0xee>
 8004eb2:	6135      	str	r5, [r6, #16]
 8004eb4:	e7ca      	b.n	8004e4c <quorem+0x98>
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	2a00      	cmp	r2, #0
 8004eba:	d104      	bne.n	8004ec6 <quorem+0x112>
 8004ebc:	3d01      	subs	r5, #1
 8004ebe:	9a01      	ldr	r2, [sp, #4]
 8004ec0:	3b04      	subs	r3, #4
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d3f7      	bcc.n	8004eb6 <quorem+0x102>
 8004ec6:	6135      	str	r5, [r6, #16]
 8004ec8:	e7e8      	b.n	8004e9c <quorem+0xe8>
	...

08004ecc <_dtoa_r>:
 8004ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ece:	b09d      	sub	sp, #116	; 0x74
 8004ed0:	9202      	str	r2, [sp, #8]
 8004ed2:	9303      	str	r3, [sp, #12]
 8004ed4:	9b02      	ldr	r3, [sp, #8]
 8004ed6:	9c03      	ldr	r4, [sp, #12]
 8004ed8:	930a      	str	r3, [sp, #40]	; 0x28
 8004eda:	940b      	str	r4, [sp, #44]	; 0x2c
 8004edc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004ede:	0007      	movs	r7, r0
 8004ee0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8004ee2:	2c00      	cmp	r4, #0
 8004ee4:	d10e      	bne.n	8004f04 <_dtoa_r+0x38>
 8004ee6:	2010      	movs	r0, #16
 8004ee8:	f7ff fa14 	bl	8004314 <malloc>
 8004eec:	1e02      	subs	r2, r0, #0
 8004eee:	6278      	str	r0, [r7, #36]	; 0x24
 8004ef0:	d104      	bne.n	8004efc <_dtoa_r+0x30>
 8004ef2:	21ea      	movs	r1, #234	; 0xea
 8004ef4:	4bc0      	ldr	r3, [pc, #768]	; (80051f8 <_dtoa_r+0x32c>)
 8004ef6:	48c1      	ldr	r0, [pc, #772]	; (80051fc <_dtoa_r+0x330>)
 8004ef8:	f001 f9d2 	bl	80062a0 <__assert_func>
 8004efc:	6044      	str	r4, [r0, #4]
 8004efe:	6084      	str	r4, [r0, #8]
 8004f00:	6004      	str	r4, [r0, #0]
 8004f02:	60c4      	str	r4, [r0, #12]
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	6819      	ldr	r1, [r3, #0]
 8004f08:	2900      	cmp	r1, #0
 8004f0a:	d00a      	beq.n	8004f22 <_dtoa_r+0x56>
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	2301      	movs	r3, #1
 8004f10:	4093      	lsls	r3, r2
 8004f12:	604a      	str	r2, [r1, #4]
 8004f14:	608b      	str	r3, [r1, #8]
 8004f16:	0038      	movs	r0, r7
 8004f18:	f000 fe5a 	bl	8005bd0 <_Bfree>
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	9b03      	ldr	r3, [sp, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	da21      	bge.n	8004f6c <_dtoa_r+0xa0>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	602b      	str	r3, [r5, #0]
 8004f2c:	9b03      	ldr	r3, [sp, #12]
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	085b      	lsrs	r3, r3, #1
 8004f32:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f34:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004f36:	4bb2      	ldr	r3, [pc, #712]	; (8005200 <_dtoa_r+0x334>)
 8004f38:	002a      	movs	r2, r5
 8004f3a:	9318      	str	r3, [sp, #96]	; 0x60
 8004f3c:	401a      	ands	r2, r3
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d117      	bne.n	8004f72 <_dtoa_r+0xa6>
 8004f42:	4bb0      	ldr	r3, [pc, #704]	; (8005204 <_dtoa_r+0x338>)
 8004f44:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f46:	0328      	lsls	r0, r5, #12
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	9b02      	ldr	r3, [sp, #8]
 8004f4c:	0b00      	lsrs	r0, r0, #12
 8004f4e:	4318      	orrs	r0, r3
 8004f50:	d101      	bne.n	8004f56 <_dtoa_r+0x8a>
 8004f52:	f000 fdc3 	bl	8005adc <_dtoa_r+0xc10>
 8004f56:	48ac      	ldr	r0, [pc, #688]	; (8005208 <_dtoa_r+0x33c>)
 8004f58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f5a:	9005      	str	r0, [sp, #20]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <_dtoa_r+0x9a>
 8004f60:	4baa      	ldr	r3, [pc, #680]	; (800520c <_dtoa_r+0x340>)
 8004f62:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	9805      	ldr	r0, [sp, #20]
 8004f68:	b01d      	add	sp, #116	; 0x74
 8004f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	602b      	str	r3, [r5, #0]
 8004f70:	e7e0      	b.n	8004f34 <_dtoa_r+0x68>
 8004f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f74:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004f76:	9312      	str	r3, [sp, #72]	; 0x48
 8004f78:	9413      	str	r4, [sp, #76]	; 0x4c
 8004f7a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004f7c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004f7e:	2200      	movs	r2, #0
 8004f80:	2300      	movs	r3, #0
 8004f82:	f7fb fa61 	bl	8000448 <__aeabi_dcmpeq>
 8004f86:	1e04      	subs	r4, r0, #0
 8004f88:	d00b      	beq.n	8004fa2 <_dtoa_r+0xd6>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	4b9f      	ldr	r3, [pc, #636]	; (8005210 <_dtoa_r+0x344>)
 8004f92:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004f94:	9305      	str	r3, [sp, #20]
 8004f96:	2a00      	cmp	r2, #0
 8004f98:	d0e5      	beq.n	8004f66 <_dtoa_r+0x9a>
 8004f9a:	4a9e      	ldr	r2, [pc, #632]	; (8005214 <_dtoa_r+0x348>)
 8004f9c:	9926      	ldr	r1, [sp, #152]	; 0x98
 8004f9e:	600a      	str	r2, [r1, #0]
 8004fa0:	e7e1      	b.n	8004f66 <_dtoa_r+0x9a>
 8004fa2:	ab1a      	add	r3, sp, #104	; 0x68
 8004fa4:	9301      	str	r3, [sp, #4]
 8004fa6:	ab1b      	add	r3, sp, #108	; 0x6c
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	0038      	movs	r0, r7
 8004fac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004fae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004fb0:	f001 f904 	bl	80061bc <__d2b>
 8004fb4:	006e      	lsls	r6, r5, #1
 8004fb6:	9004      	str	r0, [sp, #16]
 8004fb8:	0d76      	lsrs	r6, r6, #21
 8004fba:	d100      	bne.n	8004fbe <_dtoa_r+0xf2>
 8004fbc:	e07c      	b.n	80050b8 <_dtoa_r+0x1ec>
 8004fbe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004fc0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004fc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004fc4:	4a94      	ldr	r2, [pc, #592]	; (8005218 <_dtoa_r+0x34c>)
 8004fc6:	031b      	lsls	r3, r3, #12
 8004fc8:	0b1b      	lsrs	r3, r3, #12
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	0011      	movs	r1, r2
 8004fce:	4b93      	ldr	r3, [pc, #588]	; (800521c <_dtoa_r+0x350>)
 8004fd0:	9416      	str	r4, [sp, #88]	; 0x58
 8004fd2:	18f6      	adds	r6, r6, r3
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	4b92      	ldr	r3, [pc, #584]	; (8005220 <_dtoa_r+0x354>)
 8004fd8:	f7fc fc40 	bl	800185c <__aeabi_dsub>
 8004fdc:	4a91      	ldr	r2, [pc, #580]	; (8005224 <_dtoa_r+0x358>)
 8004fde:	4b92      	ldr	r3, [pc, #584]	; (8005228 <_dtoa_r+0x35c>)
 8004fe0:	f7fc f9d0 	bl	8001384 <__aeabi_dmul>
 8004fe4:	4a91      	ldr	r2, [pc, #580]	; (800522c <_dtoa_r+0x360>)
 8004fe6:	4b92      	ldr	r3, [pc, #584]	; (8005230 <_dtoa_r+0x364>)
 8004fe8:	f7fb fa5c 	bl	80004a4 <__aeabi_dadd>
 8004fec:	0004      	movs	r4, r0
 8004fee:	0030      	movs	r0, r6
 8004ff0:	000d      	movs	r5, r1
 8004ff2:	f7fd f819 	bl	8002028 <__aeabi_i2d>
 8004ff6:	4a8f      	ldr	r2, [pc, #572]	; (8005234 <_dtoa_r+0x368>)
 8004ff8:	4b8f      	ldr	r3, [pc, #572]	; (8005238 <_dtoa_r+0x36c>)
 8004ffa:	f7fc f9c3 	bl	8001384 <__aeabi_dmul>
 8004ffe:	0002      	movs	r2, r0
 8005000:	000b      	movs	r3, r1
 8005002:	0020      	movs	r0, r4
 8005004:	0029      	movs	r1, r5
 8005006:	f7fb fa4d 	bl	80004a4 <__aeabi_dadd>
 800500a:	0004      	movs	r4, r0
 800500c:	000d      	movs	r5, r1
 800500e:	f7fc ffd5 	bl	8001fbc <__aeabi_d2iz>
 8005012:	2200      	movs	r2, #0
 8005014:	9002      	str	r0, [sp, #8]
 8005016:	2300      	movs	r3, #0
 8005018:	0020      	movs	r0, r4
 800501a:	0029      	movs	r1, r5
 800501c:	f7fb fa1a 	bl	8000454 <__aeabi_dcmplt>
 8005020:	2800      	cmp	r0, #0
 8005022:	d00b      	beq.n	800503c <_dtoa_r+0x170>
 8005024:	9802      	ldr	r0, [sp, #8]
 8005026:	f7fc ffff 	bl	8002028 <__aeabi_i2d>
 800502a:	002b      	movs	r3, r5
 800502c:	0022      	movs	r2, r4
 800502e:	f7fb fa0b 	bl	8000448 <__aeabi_dcmpeq>
 8005032:	4243      	negs	r3, r0
 8005034:	4158      	adcs	r0, r3
 8005036:	9b02      	ldr	r3, [sp, #8]
 8005038:	1a1b      	subs	r3, r3, r0
 800503a:	9302      	str	r3, [sp, #8]
 800503c:	2301      	movs	r3, #1
 800503e:	9315      	str	r3, [sp, #84]	; 0x54
 8005040:	9b02      	ldr	r3, [sp, #8]
 8005042:	2b16      	cmp	r3, #22
 8005044:	d80f      	bhi.n	8005066 <_dtoa_r+0x19a>
 8005046:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005048:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800504a:	00da      	lsls	r2, r3, #3
 800504c:	4b7b      	ldr	r3, [pc, #492]	; (800523c <_dtoa_r+0x370>)
 800504e:	189b      	adds	r3, r3, r2
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f7fb f9fe 	bl	8000454 <__aeabi_dcmplt>
 8005058:	2800      	cmp	r0, #0
 800505a:	d049      	beq.n	80050f0 <_dtoa_r+0x224>
 800505c:	9b02      	ldr	r3, [sp, #8]
 800505e:	3b01      	subs	r3, #1
 8005060:	9302      	str	r3, [sp, #8]
 8005062:	2300      	movs	r3, #0
 8005064:	9315      	str	r3, [sp, #84]	; 0x54
 8005066:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005068:	1b9e      	subs	r6, r3, r6
 800506a:	2300      	movs	r3, #0
 800506c:	9308      	str	r3, [sp, #32]
 800506e:	0033      	movs	r3, r6
 8005070:	3b01      	subs	r3, #1
 8005072:	930d      	str	r3, [sp, #52]	; 0x34
 8005074:	d504      	bpl.n	8005080 <_dtoa_r+0x1b4>
 8005076:	2301      	movs	r3, #1
 8005078:	1b9b      	subs	r3, r3, r6
 800507a:	9308      	str	r3, [sp, #32]
 800507c:	2300      	movs	r3, #0
 800507e:	930d      	str	r3, [sp, #52]	; 0x34
 8005080:	9b02      	ldr	r3, [sp, #8]
 8005082:	2b00      	cmp	r3, #0
 8005084:	db36      	blt.n	80050f4 <_dtoa_r+0x228>
 8005086:	9a02      	ldr	r2, [sp, #8]
 8005088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800508a:	4694      	mov	ip, r2
 800508c:	4463      	add	r3, ip
 800508e:	930d      	str	r3, [sp, #52]	; 0x34
 8005090:	2300      	movs	r3, #0
 8005092:	9214      	str	r2, [sp, #80]	; 0x50
 8005094:	930e      	str	r3, [sp, #56]	; 0x38
 8005096:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005098:	2401      	movs	r4, #1
 800509a:	2b09      	cmp	r3, #9
 800509c:	d862      	bhi.n	8005164 <_dtoa_r+0x298>
 800509e:	2b05      	cmp	r3, #5
 80050a0:	dd02      	ble.n	80050a8 <_dtoa_r+0x1dc>
 80050a2:	2400      	movs	r4, #0
 80050a4:	3b04      	subs	r3, #4
 80050a6:	9322      	str	r3, [sp, #136]	; 0x88
 80050a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050aa:	1e98      	subs	r0, r3, #2
 80050ac:	2803      	cmp	r0, #3
 80050ae:	d862      	bhi.n	8005176 <_dtoa_r+0x2aa>
 80050b0:	f7fb f830 	bl	8000114 <__gnu_thumb1_case_uqi>
 80050b4:	56343629 	.word	0x56343629
 80050b8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80050ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80050bc:	189e      	adds	r6, r3, r2
 80050be:	4b60      	ldr	r3, [pc, #384]	; (8005240 <_dtoa_r+0x374>)
 80050c0:	18f2      	adds	r2, r6, r3
 80050c2:	2a20      	cmp	r2, #32
 80050c4:	dd0f      	ble.n	80050e6 <_dtoa_r+0x21a>
 80050c6:	2340      	movs	r3, #64	; 0x40
 80050c8:	1a9b      	subs	r3, r3, r2
 80050ca:	409d      	lsls	r5, r3
 80050cc:	4b5d      	ldr	r3, [pc, #372]	; (8005244 <_dtoa_r+0x378>)
 80050ce:	9802      	ldr	r0, [sp, #8]
 80050d0:	18f3      	adds	r3, r6, r3
 80050d2:	40d8      	lsrs	r0, r3
 80050d4:	4328      	orrs	r0, r5
 80050d6:	f7fc ffd7 	bl	8002088 <__aeabi_ui2d>
 80050da:	2301      	movs	r3, #1
 80050dc:	4c5a      	ldr	r4, [pc, #360]	; (8005248 <_dtoa_r+0x37c>)
 80050de:	3e01      	subs	r6, #1
 80050e0:	1909      	adds	r1, r1, r4
 80050e2:	9316      	str	r3, [sp, #88]	; 0x58
 80050e4:	e776      	b.n	8004fd4 <_dtoa_r+0x108>
 80050e6:	2320      	movs	r3, #32
 80050e8:	9802      	ldr	r0, [sp, #8]
 80050ea:	1a9b      	subs	r3, r3, r2
 80050ec:	4098      	lsls	r0, r3
 80050ee:	e7f2      	b.n	80050d6 <_dtoa_r+0x20a>
 80050f0:	9015      	str	r0, [sp, #84]	; 0x54
 80050f2:	e7b8      	b.n	8005066 <_dtoa_r+0x19a>
 80050f4:	9b08      	ldr	r3, [sp, #32]
 80050f6:	9a02      	ldr	r2, [sp, #8]
 80050f8:	1a9b      	subs	r3, r3, r2
 80050fa:	9308      	str	r3, [sp, #32]
 80050fc:	4253      	negs	r3, r2
 80050fe:	930e      	str	r3, [sp, #56]	; 0x38
 8005100:	2300      	movs	r3, #0
 8005102:	9314      	str	r3, [sp, #80]	; 0x50
 8005104:	e7c7      	b.n	8005096 <_dtoa_r+0x1ca>
 8005106:	2300      	movs	r3, #0
 8005108:	930f      	str	r3, [sp, #60]	; 0x3c
 800510a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800510c:	2b00      	cmp	r3, #0
 800510e:	dc36      	bgt.n	800517e <_dtoa_r+0x2b2>
 8005110:	2301      	movs	r3, #1
 8005112:	001a      	movs	r2, r3
 8005114:	930c      	str	r3, [sp, #48]	; 0x30
 8005116:	9306      	str	r3, [sp, #24]
 8005118:	9223      	str	r2, [sp, #140]	; 0x8c
 800511a:	e00d      	b.n	8005138 <_dtoa_r+0x26c>
 800511c:	2301      	movs	r3, #1
 800511e:	e7f3      	b.n	8005108 <_dtoa_r+0x23c>
 8005120:	2300      	movs	r3, #0
 8005122:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005124:	930f      	str	r3, [sp, #60]	; 0x3c
 8005126:	4694      	mov	ip, r2
 8005128:	9b02      	ldr	r3, [sp, #8]
 800512a:	4463      	add	r3, ip
 800512c:	930c      	str	r3, [sp, #48]	; 0x30
 800512e:	3301      	adds	r3, #1
 8005130:	9306      	str	r3, [sp, #24]
 8005132:	2b00      	cmp	r3, #0
 8005134:	dc00      	bgt.n	8005138 <_dtoa_r+0x26c>
 8005136:	2301      	movs	r3, #1
 8005138:	2200      	movs	r2, #0
 800513a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800513c:	6042      	str	r2, [r0, #4]
 800513e:	3204      	adds	r2, #4
 8005140:	0015      	movs	r5, r2
 8005142:	3514      	adds	r5, #20
 8005144:	6841      	ldr	r1, [r0, #4]
 8005146:	429d      	cmp	r5, r3
 8005148:	d91d      	bls.n	8005186 <_dtoa_r+0x2ba>
 800514a:	0038      	movs	r0, r7
 800514c:	f000 fcfc 	bl	8005b48 <_Balloc>
 8005150:	9005      	str	r0, [sp, #20]
 8005152:	2800      	cmp	r0, #0
 8005154:	d11b      	bne.n	800518e <_dtoa_r+0x2c2>
 8005156:	21d5      	movs	r1, #213	; 0xd5
 8005158:	0002      	movs	r2, r0
 800515a:	4b3c      	ldr	r3, [pc, #240]	; (800524c <_dtoa_r+0x380>)
 800515c:	0049      	lsls	r1, r1, #1
 800515e:	e6ca      	b.n	8004ef6 <_dtoa_r+0x2a>
 8005160:	2301      	movs	r3, #1
 8005162:	e7de      	b.n	8005122 <_dtoa_r+0x256>
 8005164:	2300      	movs	r3, #0
 8005166:	940f      	str	r4, [sp, #60]	; 0x3c
 8005168:	9322      	str	r3, [sp, #136]	; 0x88
 800516a:	3b01      	subs	r3, #1
 800516c:	930c      	str	r3, [sp, #48]	; 0x30
 800516e:	9306      	str	r3, [sp, #24]
 8005170:	2200      	movs	r2, #0
 8005172:	3313      	adds	r3, #19
 8005174:	e7d0      	b.n	8005118 <_dtoa_r+0x24c>
 8005176:	2301      	movs	r3, #1
 8005178:	930f      	str	r3, [sp, #60]	; 0x3c
 800517a:	3b02      	subs	r3, #2
 800517c:	e7f6      	b.n	800516c <_dtoa_r+0x2a0>
 800517e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005180:	930c      	str	r3, [sp, #48]	; 0x30
 8005182:	9306      	str	r3, [sp, #24]
 8005184:	e7d8      	b.n	8005138 <_dtoa_r+0x26c>
 8005186:	3101      	adds	r1, #1
 8005188:	6041      	str	r1, [r0, #4]
 800518a:	0052      	lsls	r2, r2, #1
 800518c:	e7d8      	b.n	8005140 <_dtoa_r+0x274>
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	9a05      	ldr	r2, [sp, #20]
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	9b06      	ldr	r3, [sp, #24]
 8005196:	2b0e      	cmp	r3, #14
 8005198:	d900      	bls.n	800519c <_dtoa_r+0x2d0>
 800519a:	e0eb      	b.n	8005374 <_dtoa_r+0x4a8>
 800519c:	2c00      	cmp	r4, #0
 800519e:	d100      	bne.n	80051a2 <_dtoa_r+0x2d6>
 80051a0:	e0e8      	b.n	8005374 <_dtoa_r+0x4a8>
 80051a2:	9b02      	ldr	r3, [sp, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	dd68      	ble.n	800527a <_dtoa_r+0x3ae>
 80051a8:	001a      	movs	r2, r3
 80051aa:	210f      	movs	r1, #15
 80051ac:	4b23      	ldr	r3, [pc, #140]	; (800523c <_dtoa_r+0x370>)
 80051ae:	400a      	ands	r2, r1
 80051b0:	00d2      	lsls	r2, r2, #3
 80051b2:	189b      	adds	r3, r3, r2
 80051b4:	681d      	ldr	r5, [r3, #0]
 80051b6:	685e      	ldr	r6, [r3, #4]
 80051b8:	9b02      	ldr	r3, [sp, #8]
 80051ba:	111c      	asrs	r4, r3, #4
 80051bc:	2302      	movs	r3, #2
 80051be:	9310      	str	r3, [sp, #64]	; 0x40
 80051c0:	9b02      	ldr	r3, [sp, #8]
 80051c2:	05db      	lsls	r3, r3, #23
 80051c4:	d50b      	bpl.n	80051de <_dtoa_r+0x312>
 80051c6:	4b22      	ldr	r3, [pc, #136]	; (8005250 <_dtoa_r+0x384>)
 80051c8:	400c      	ands	r4, r1
 80051ca:	6a1a      	ldr	r2, [r3, #32]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	9812      	ldr	r0, [sp, #72]	; 0x48
 80051d0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80051d2:	f7fb fcd1 	bl	8000b78 <__aeabi_ddiv>
 80051d6:	2303      	movs	r3, #3
 80051d8:	900a      	str	r0, [sp, #40]	; 0x28
 80051da:	910b      	str	r1, [sp, #44]	; 0x2c
 80051dc:	9310      	str	r3, [sp, #64]	; 0x40
 80051de:	4b1c      	ldr	r3, [pc, #112]	; (8005250 <_dtoa_r+0x384>)
 80051e0:	9307      	str	r3, [sp, #28]
 80051e2:	2c00      	cmp	r4, #0
 80051e4:	d136      	bne.n	8005254 <_dtoa_r+0x388>
 80051e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80051e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051ea:	002a      	movs	r2, r5
 80051ec:	0033      	movs	r3, r6
 80051ee:	f7fb fcc3 	bl	8000b78 <__aeabi_ddiv>
 80051f2:	900a      	str	r0, [sp, #40]	; 0x28
 80051f4:	910b      	str	r1, [sp, #44]	; 0x2c
 80051f6:	e05c      	b.n	80052b2 <_dtoa_r+0x3e6>
 80051f8:	08006fcd 	.word	0x08006fcd
 80051fc:	08006fe4 	.word	0x08006fe4
 8005200:	7ff00000 	.word	0x7ff00000
 8005204:	0000270f 	.word	0x0000270f
 8005208:	08006fc9 	.word	0x08006fc9
 800520c:	08006fcc 	.word	0x08006fcc
 8005210:	08006f9c 	.word	0x08006f9c
 8005214:	08006f9d 	.word	0x08006f9d
 8005218:	3ff00000 	.word	0x3ff00000
 800521c:	fffffc01 	.word	0xfffffc01
 8005220:	3ff80000 	.word	0x3ff80000
 8005224:	636f4361 	.word	0x636f4361
 8005228:	3fd287a7 	.word	0x3fd287a7
 800522c:	8b60c8b3 	.word	0x8b60c8b3
 8005230:	3fc68a28 	.word	0x3fc68a28
 8005234:	509f79fb 	.word	0x509f79fb
 8005238:	3fd34413 	.word	0x3fd34413
 800523c:	080070e0 	.word	0x080070e0
 8005240:	00000432 	.word	0x00000432
 8005244:	00000412 	.word	0x00000412
 8005248:	fe100000 	.word	0xfe100000
 800524c:	08007043 	.word	0x08007043
 8005250:	080070b8 	.word	0x080070b8
 8005254:	2301      	movs	r3, #1
 8005256:	421c      	tst	r4, r3
 8005258:	d00b      	beq.n	8005272 <_dtoa_r+0x3a6>
 800525a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800525c:	0028      	movs	r0, r5
 800525e:	3301      	adds	r3, #1
 8005260:	9310      	str	r3, [sp, #64]	; 0x40
 8005262:	9b07      	ldr	r3, [sp, #28]
 8005264:	0031      	movs	r1, r6
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f7fc f88b 	bl	8001384 <__aeabi_dmul>
 800526e:	0005      	movs	r5, r0
 8005270:	000e      	movs	r6, r1
 8005272:	9b07      	ldr	r3, [sp, #28]
 8005274:	1064      	asrs	r4, r4, #1
 8005276:	3308      	adds	r3, #8
 8005278:	e7b2      	b.n	80051e0 <_dtoa_r+0x314>
 800527a:	2302      	movs	r3, #2
 800527c:	9310      	str	r3, [sp, #64]	; 0x40
 800527e:	9b02      	ldr	r3, [sp, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d016      	beq.n	80052b2 <_dtoa_r+0x3e6>
 8005284:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005286:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005288:	425c      	negs	r4, r3
 800528a:	230f      	movs	r3, #15
 800528c:	4ab5      	ldr	r2, [pc, #724]	; (8005564 <_dtoa_r+0x698>)
 800528e:	4023      	ands	r3, r4
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	18d3      	adds	r3, r2, r3
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f7fc f874 	bl	8001384 <__aeabi_dmul>
 800529c:	2601      	movs	r6, #1
 800529e:	2300      	movs	r3, #0
 80052a0:	900a      	str	r0, [sp, #40]	; 0x28
 80052a2:	910b      	str	r1, [sp, #44]	; 0x2c
 80052a4:	4db0      	ldr	r5, [pc, #704]	; (8005568 <_dtoa_r+0x69c>)
 80052a6:	1124      	asrs	r4, r4, #4
 80052a8:	2c00      	cmp	r4, #0
 80052aa:	d000      	beq.n	80052ae <_dtoa_r+0x3e2>
 80052ac:	e094      	b.n	80053d8 <_dtoa_r+0x50c>
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d19f      	bne.n	80051f2 <_dtoa_r+0x326>
 80052b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d100      	bne.n	80052ba <_dtoa_r+0x3ee>
 80052b8:	e09b      	b.n	80053f2 <_dtoa_r+0x526>
 80052ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80052bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80052be:	2200      	movs	r2, #0
 80052c0:	0020      	movs	r0, r4
 80052c2:	0029      	movs	r1, r5
 80052c4:	4ba9      	ldr	r3, [pc, #676]	; (800556c <_dtoa_r+0x6a0>)
 80052c6:	f7fb f8c5 	bl	8000454 <__aeabi_dcmplt>
 80052ca:	2800      	cmp	r0, #0
 80052cc:	d100      	bne.n	80052d0 <_dtoa_r+0x404>
 80052ce:	e090      	b.n	80053f2 <_dtoa_r+0x526>
 80052d0:	9b06      	ldr	r3, [sp, #24]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d100      	bne.n	80052d8 <_dtoa_r+0x40c>
 80052d6:	e08c      	b.n	80053f2 <_dtoa_r+0x526>
 80052d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052da:	2b00      	cmp	r3, #0
 80052dc:	dd46      	ble.n	800536c <_dtoa_r+0x4a0>
 80052de:	9b02      	ldr	r3, [sp, #8]
 80052e0:	2200      	movs	r2, #0
 80052e2:	0020      	movs	r0, r4
 80052e4:	0029      	movs	r1, r5
 80052e6:	1e5e      	subs	r6, r3, #1
 80052e8:	4ba1      	ldr	r3, [pc, #644]	; (8005570 <_dtoa_r+0x6a4>)
 80052ea:	f7fc f84b 	bl	8001384 <__aeabi_dmul>
 80052ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80052f0:	900a      	str	r0, [sp, #40]	; 0x28
 80052f2:	910b      	str	r1, [sp, #44]	; 0x2c
 80052f4:	3301      	adds	r3, #1
 80052f6:	9310      	str	r3, [sp, #64]	; 0x40
 80052f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052fa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80052fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80052fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005300:	9307      	str	r3, [sp, #28]
 8005302:	f7fc fe91 	bl	8002028 <__aeabi_i2d>
 8005306:	0022      	movs	r2, r4
 8005308:	002b      	movs	r3, r5
 800530a:	f7fc f83b 	bl	8001384 <__aeabi_dmul>
 800530e:	2200      	movs	r2, #0
 8005310:	4b98      	ldr	r3, [pc, #608]	; (8005574 <_dtoa_r+0x6a8>)
 8005312:	f7fb f8c7 	bl	80004a4 <__aeabi_dadd>
 8005316:	9010      	str	r0, [sp, #64]	; 0x40
 8005318:	9111      	str	r1, [sp, #68]	; 0x44
 800531a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800531c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800531e:	920a      	str	r2, [sp, #40]	; 0x28
 8005320:	930b      	str	r3, [sp, #44]	; 0x2c
 8005322:	4a95      	ldr	r2, [pc, #596]	; (8005578 <_dtoa_r+0x6ac>)
 8005324:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005326:	4694      	mov	ip, r2
 8005328:	4463      	add	r3, ip
 800532a:	9317      	str	r3, [sp, #92]	; 0x5c
 800532c:	930b      	str	r3, [sp, #44]	; 0x2c
 800532e:	9b07      	ldr	r3, [sp, #28]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d161      	bne.n	80053f8 <_dtoa_r+0x52c>
 8005334:	2200      	movs	r2, #0
 8005336:	0020      	movs	r0, r4
 8005338:	0029      	movs	r1, r5
 800533a:	4b90      	ldr	r3, [pc, #576]	; (800557c <_dtoa_r+0x6b0>)
 800533c:	f7fc fa8e 	bl	800185c <__aeabi_dsub>
 8005340:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005342:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005344:	0004      	movs	r4, r0
 8005346:	000d      	movs	r5, r1
 8005348:	f7fb f898 	bl	800047c <__aeabi_dcmpgt>
 800534c:	2800      	cmp	r0, #0
 800534e:	d000      	beq.n	8005352 <_dtoa_r+0x486>
 8005350:	e2b5      	b.n	80058be <_dtoa_r+0x9f2>
 8005352:	488b      	ldr	r0, [pc, #556]	; (8005580 <_dtoa_r+0x6b4>)
 8005354:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005356:	4684      	mov	ip, r0
 8005358:	4461      	add	r1, ip
 800535a:	000b      	movs	r3, r1
 800535c:	0020      	movs	r0, r4
 800535e:	0029      	movs	r1, r5
 8005360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005362:	f7fb f877 	bl	8000454 <__aeabi_dcmplt>
 8005366:	2800      	cmp	r0, #0
 8005368:	d000      	beq.n	800536c <_dtoa_r+0x4a0>
 800536a:	e2a5      	b.n	80058b8 <_dtoa_r+0x9ec>
 800536c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800536e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005370:	930a      	str	r3, [sp, #40]	; 0x28
 8005372:	940b      	str	r4, [sp, #44]	; 0x2c
 8005374:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005376:	2b00      	cmp	r3, #0
 8005378:	da00      	bge.n	800537c <_dtoa_r+0x4b0>
 800537a:	e171      	b.n	8005660 <_dtoa_r+0x794>
 800537c:	9a02      	ldr	r2, [sp, #8]
 800537e:	2a0e      	cmp	r2, #14
 8005380:	dd00      	ble.n	8005384 <_dtoa_r+0x4b8>
 8005382:	e16d      	b.n	8005660 <_dtoa_r+0x794>
 8005384:	4b77      	ldr	r3, [pc, #476]	; (8005564 <_dtoa_r+0x698>)
 8005386:	00d2      	lsls	r2, r2, #3
 8005388:	189b      	adds	r3, r3, r2
 800538a:	685c      	ldr	r4, [r3, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	9308      	str	r3, [sp, #32]
 8005390:	9409      	str	r4, [sp, #36]	; 0x24
 8005392:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005394:	2b00      	cmp	r3, #0
 8005396:	db00      	blt.n	800539a <_dtoa_r+0x4ce>
 8005398:	e0f6      	b.n	8005588 <_dtoa_r+0x6bc>
 800539a:	9b06      	ldr	r3, [sp, #24]
 800539c:	2b00      	cmp	r3, #0
 800539e:	dd00      	ble.n	80053a2 <_dtoa_r+0x4d6>
 80053a0:	e0f2      	b.n	8005588 <_dtoa_r+0x6bc>
 80053a2:	d000      	beq.n	80053a6 <_dtoa_r+0x4da>
 80053a4:	e288      	b.n	80058b8 <_dtoa_r+0x9ec>
 80053a6:	9808      	ldr	r0, [sp, #32]
 80053a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053aa:	2200      	movs	r2, #0
 80053ac:	4b73      	ldr	r3, [pc, #460]	; (800557c <_dtoa_r+0x6b0>)
 80053ae:	f7fb ffe9 	bl	8001384 <__aeabi_dmul>
 80053b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053b6:	f7fb f86b 	bl	8000490 <__aeabi_dcmpge>
 80053ba:	9e06      	ldr	r6, [sp, #24]
 80053bc:	0035      	movs	r5, r6
 80053be:	2800      	cmp	r0, #0
 80053c0:	d000      	beq.n	80053c4 <_dtoa_r+0x4f8>
 80053c2:	e25f      	b.n	8005884 <_dtoa_r+0x9b8>
 80053c4:	9b05      	ldr	r3, [sp, #20]
 80053c6:	9a05      	ldr	r2, [sp, #20]
 80053c8:	3301      	adds	r3, #1
 80053ca:	9307      	str	r3, [sp, #28]
 80053cc:	2331      	movs	r3, #49	; 0x31
 80053ce:	7013      	strb	r3, [r2, #0]
 80053d0:	9b02      	ldr	r3, [sp, #8]
 80053d2:	3301      	adds	r3, #1
 80053d4:	9302      	str	r3, [sp, #8]
 80053d6:	e25a      	b.n	800588e <_dtoa_r+0x9c2>
 80053d8:	4234      	tst	r4, r6
 80053da:	d007      	beq.n	80053ec <_dtoa_r+0x520>
 80053dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80053de:	3301      	adds	r3, #1
 80053e0:	9310      	str	r3, [sp, #64]	; 0x40
 80053e2:	682a      	ldr	r2, [r5, #0]
 80053e4:	686b      	ldr	r3, [r5, #4]
 80053e6:	f7fb ffcd 	bl	8001384 <__aeabi_dmul>
 80053ea:	0033      	movs	r3, r6
 80053ec:	1064      	asrs	r4, r4, #1
 80053ee:	3508      	adds	r5, #8
 80053f0:	e75a      	b.n	80052a8 <_dtoa_r+0x3dc>
 80053f2:	9e02      	ldr	r6, [sp, #8]
 80053f4:	9b06      	ldr	r3, [sp, #24]
 80053f6:	e780      	b.n	80052fa <_dtoa_r+0x42e>
 80053f8:	9b07      	ldr	r3, [sp, #28]
 80053fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80053fc:	1e5a      	subs	r2, r3, #1
 80053fe:	4b59      	ldr	r3, [pc, #356]	; (8005564 <_dtoa_r+0x698>)
 8005400:	00d2      	lsls	r2, r2, #3
 8005402:	189b      	adds	r3, r3, r2
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2900      	cmp	r1, #0
 800540a:	d051      	beq.n	80054b0 <_dtoa_r+0x5e4>
 800540c:	2000      	movs	r0, #0
 800540e:	495d      	ldr	r1, [pc, #372]	; (8005584 <_dtoa_r+0x6b8>)
 8005410:	f7fb fbb2 	bl	8000b78 <__aeabi_ddiv>
 8005414:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005418:	f7fc fa20 	bl	800185c <__aeabi_dsub>
 800541c:	9a05      	ldr	r2, [sp, #20]
 800541e:	9b05      	ldr	r3, [sp, #20]
 8005420:	4694      	mov	ip, r2
 8005422:	9310      	str	r3, [sp, #64]	; 0x40
 8005424:	9b07      	ldr	r3, [sp, #28]
 8005426:	900a      	str	r0, [sp, #40]	; 0x28
 8005428:	910b      	str	r1, [sp, #44]	; 0x2c
 800542a:	4463      	add	r3, ip
 800542c:	9319      	str	r3, [sp, #100]	; 0x64
 800542e:	0029      	movs	r1, r5
 8005430:	0020      	movs	r0, r4
 8005432:	f7fc fdc3 	bl	8001fbc <__aeabi_d2iz>
 8005436:	9017      	str	r0, [sp, #92]	; 0x5c
 8005438:	f7fc fdf6 	bl	8002028 <__aeabi_i2d>
 800543c:	0002      	movs	r2, r0
 800543e:	000b      	movs	r3, r1
 8005440:	0020      	movs	r0, r4
 8005442:	0029      	movs	r1, r5
 8005444:	f7fc fa0a 	bl	800185c <__aeabi_dsub>
 8005448:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800544a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800544c:	3301      	adds	r3, #1
 800544e:	9307      	str	r3, [sp, #28]
 8005450:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005452:	0004      	movs	r4, r0
 8005454:	3330      	adds	r3, #48	; 0x30
 8005456:	7013      	strb	r3, [r2, #0]
 8005458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800545a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800545c:	000d      	movs	r5, r1
 800545e:	f7fa fff9 	bl	8000454 <__aeabi_dcmplt>
 8005462:	2800      	cmp	r0, #0
 8005464:	d175      	bne.n	8005552 <_dtoa_r+0x686>
 8005466:	0022      	movs	r2, r4
 8005468:	002b      	movs	r3, r5
 800546a:	2000      	movs	r0, #0
 800546c:	493f      	ldr	r1, [pc, #252]	; (800556c <_dtoa_r+0x6a0>)
 800546e:	f7fc f9f5 	bl	800185c <__aeabi_dsub>
 8005472:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005476:	f7fa ffed 	bl	8000454 <__aeabi_dcmplt>
 800547a:	2800      	cmp	r0, #0
 800547c:	d000      	beq.n	8005480 <_dtoa_r+0x5b4>
 800547e:	e0d1      	b.n	8005624 <_dtoa_r+0x758>
 8005480:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005482:	9a07      	ldr	r2, [sp, #28]
 8005484:	4293      	cmp	r3, r2
 8005486:	d100      	bne.n	800548a <_dtoa_r+0x5be>
 8005488:	e770      	b.n	800536c <_dtoa_r+0x4a0>
 800548a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800548c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800548e:	2200      	movs	r2, #0
 8005490:	4b37      	ldr	r3, [pc, #220]	; (8005570 <_dtoa_r+0x6a4>)
 8005492:	f7fb ff77 	bl	8001384 <__aeabi_dmul>
 8005496:	4b36      	ldr	r3, [pc, #216]	; (8005570 <_dtoa_r+0x6a4>)
 8005498:	900a      	str	r0, [sp, #40]	; 0x28
 800549a:	910b      	str	r1, [sp, #44]	; 0x2c
 800549c:	2200      	movs	r2, #0
 800549e:	0020      	movs	r0, r4
 80054a0:	0029      	movs	r1, r5
 80054a2:	f7fb ff6f 	bl	8001384 <__aeabi_dmul>
 80054a6:	9b07      	ldr	r3, [sp, #28]
 80054a8:	0004      	movs	r4, r0
 80054aa:	000d      	movs	r5, r1
 80054ac:	9310      	str	r3, [sp, #64]	; 0x40
 80054ae:	e7be      	b.n	800542e <_dtoa_r+0x562>
 80054b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80054b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054b4:	f7fb ff66 	bl	8001384 <__aeabi_dmul>
 80054b8:	9a05      	ldr	r2, [sp, #20]
 80054ba:	9b05      	ldr	r3, [sp, #20]
 80054bc:	4694      	mov	ip, r2
 80054be:	930a      	str	r3, [sp, #40]	; 0x28
 80054c0:	9b07      	ldr	r3, [sp, #28]
 80054c2:	9010      	str	r0, [sp, #64]	; 0x40
 80054c4:	9111      	str	r1, [sp, #68]	; 0x44
 80054c6:	4463      	add	r3, ip
 80054c8:	9319      	str	r3, [sp, #100]	; 0x64
 80054ca:	0029      	movs	r1, r5
 80054cc:	0020      	movs	r0, r4
 80054ce:	f7fc fd75 	bl	8001fbc <__aeabi_d2iz>
 80054d2:	9017      	str	r0, [sp, #92]	; 0x5c
 80054d4:	f7fc fda8 	bl	8002028 <__aeabi_i2d>
 80054d8:	0002      	movs	r2, r0
 80054da:	000b      	movs	r3, r1
 80054dc:	0020      	movs	r0, r4
 80054de:	0029      	movs	r1, r5
 80054e0:	f7fc f9bc 	bl	800185c <__aeabi_dsub>
 80054e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80054e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054e8:	3330      	adds	r3, #48	; 0x30
 80054ea:	7013      	strb	r3, [r2, #0]
 80054ec:	0013      	movs	r3, r2
 80054ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80054f0:	3301      	adds	r3, #1
 80054f2:	0004      	movs	r4, r0
 80054f4:	000d      	movs	r5, r1
 80054f6:	930a      	str	r3, [sp, #40]	; 0x28
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d12c      	bne.n	8005556 <_dtoa_r+0x68a>
 80054fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80054fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005500:	9a05      	ldr	r2, [sp, #20]
 8005502:	9b07      	ldr	r3, [sp, #28]
 8005504:	4694      	mov	ip, r2
 8005506:	4463      	add	r3, ip
 8005508:	2200      	movs	r2, #0
 800550a:	9307      	str	r3, [sp, #28]
 800550c:	4b1d      	ldr	r3, [pc, #116]	; (8005584 <_dtoa_r+0x6b8>)
 800550e:	f7fa ffc9 	bl	80004a4 <__aeabi_dadd>
 8005512:	0002      	movs	r2, r0
 8005514:	000b      	movs	r3, r1
 8005516:	0020      	movs	r0, r4
 8005518:	0029      	movs	r1, r5
 800551a:	f7fa ffaf 	bl	800047c <__aeabi_dcmpgt>
 800551e:	2800      	cmp	r0, #0
 8005520:	d000      	beq.n	8005524 <_dtoa_r+0x658>
 8005522:	e07f      	b.n	8005624 <_dtoa_r+0x758>
 8005524:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005526:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005528:	2000      	movs	r0, #0
 800552a:	4916      	ldr	r1, [pc, #88]	; (8005584 <_dtoa_r+0x6b8>)
 800552c:	f7fc f996 	bl	800185c <__aeabi_dsub>
 8005530:	0002      	movs	r2, r0
 8005532:	000b      	movs	r3, r1
 8005534:	0020      	movs	r0, r4
 8005536:	0029      	movs	r1, r5
 8005538:	f7fa ff8c 	bl	8000454 <__aeabi_dcmplt>
 800553c:	2800      	cmp	r0, #0
 800553e:	d100      	bne.n	8005542 <_dtoa_r+0x676>
 8005540:	e714      	b.n	800536c <_dtoa_r+0x4a0>
 8005542:	9b07      	ldr	r3, [sp, #28]
 8005544:	001a      	movs	r2, r3
 8005546:	3a01      	subs	r2, #1
 8005548:	9207      	str	r2, [sp, #28]
 800554a:	7812      	ldrb	r2, [r2, #0]
 800554c:	2a30      	cmp	r2, #48	; 0x30
 800554e:	d0f8      	beq.n	8005542 <_dtoa_r+0x676>
 8005550:	9307      	str	r3, [sp, #28]
 8005552:	9602      	str	r6, [sp, #8]
 8005554:	e054      	b.n	8005600 <_dtoa_r+0x734>
 8005556:	2200      	movs	r2, #0
 8005558:	4b05      	ldr	r3, [pc, #20]	; (8005570 <_dtoa_r+0x6a4>)
 800555a:	f7fb ff13 	bl	8001384 <__aeabi_dmul>
 800555e:	0004      	movs	r4, r0
 8005560:	000d      	movs	r5, r1
 8005562:	e7b2      	b.n	80054ca <_dtoa_r+0x5fe>
 8005564:	080070e0 	.word	0x080070e0
 8005568:	080070b8 	.word	0x080070b8
 800556c:	3ff00000 	.word	0x3ff00000
 8005570:	40240000 	.word	0x40240000
 8005574:	401c0000 	.word	0x401c0000
 8005578:	fcc00000 	.word	0xfcc00000
 800557c:	40140000 	.word	0x40140000
 8005580:	7cc00000 	.word	0x7cc00000
 8005584:	3fe00000 	.word	0x3fe00000
 8005588:	9b06      	ldr	r3, [sp, #24]
 800558a:	9e05      	ldr	r6, [sp, #20]
 800558c:	3b01      	subs	r3, #1
 800558e:	199b      	adds	r3, r3, r6
 8005590:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005592:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005594:	930a      	str	r3, [sp, #40]	; 0x28
 8005596:	9a08      	ldr	r2, [sp, #32]
 8005598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800559a:	0020      	movs	r0, r4
 800559c:	0029      	movs	r1, r5
 800559e:	f7fb faeb 	bl	8000b78 <__aeabi_ddiv>
 80055a2:	f7fc fd0b 	bl	8001fbc <__aeabi_d2iz>
 80055a6:	9006      	str	r0, [sp, #24]
 80055a8:	f7fc fd3e 	bl	8002028 <__aeabi_i2d>
 80055ac:	9a08      	ldr	r2, [sp, #32]
 80055ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055b0:	f7fb fee8 	bl	8001384 <__aeabi_dmul>
 80055b4:	0002      	movs	r2, r0
 80055b6:	000b      	movs	r3, r1
 80055b8:	0020      	movs	r0, r4
 80055ba:	0029      	movs	r1, r5
 80055bc:	f7fc f94e 	bl	800185c <__aeabi_dsub>
 80055c0:	0033      	movs	r3, r6
 80055c2:	9a06      	ldr	r2, [sp, #24]
 80055c4:	3601      	adds	r6, #1
 80055c6:	3230      	adds	r2, #48	; 0x30
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055cc:	9607      	str	r6, [sp, #28]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d139      	bne.n	8005646 <_dtoa_r+0x77a>
 80055d2:	0002      	movs	r2, r0
 80055d4:	000b      	movs	r3, r1
 80055d6:	f7fa ff65 	bl	80004a4 <__aeabi_dadd>
 80055da:	9a08      	ldr	r2, [sp, #32]
 80055dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055de:	0004      	movs	r4, r0
 80055e0:	000d      	movs	r5, r1
 80055e2:	f7fa ff4b 	bl	800047c <__aeabi_dcmpgt>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	d11b      	bne.n	8005622 <_dtoa_r+0x756>
 80055ea:	9a08      	ldr	r2, [sp, #32]
 80055ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ee:	0020      	movs	r0, r4
 80055f0:	0029      	movs	r1, r5
 80055f2:	f7fa ff29 	bl	8000448 <__aeabi_dcmpeq>
 80055f6:	2800      	cmp	r0, #0
 80055f8:	d002      	beq.n	8005600 <_dtoa_r+0x734>
 80055fa:	9b06      	ldr	r3, [sp, #24]
 80055fc:	07db      	lsls	r3, r3, #31
 80055fe:	d410      	bmi.n	8005622 <_dtoa_r+0x756>
 8005600:	0038      	movs	r0, r7
 8005602:	9904      	ldr	r1, [sp, #16]
 8005604:	f000 fae4 	bl	8005bd0 <_Bfree>
 8005608:	2300      	movs	r3, #0
 800560a:	9a07      	ldr	r2, [sp, #28]
 800560c:	9802      	ldr	r0, [sp, #8]
 800560e:	7013      	strb	r3, [r2, #0]
 8005610:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005612:	3001      	adds	r0, #1
 8005614:	6018      	str	r0, [r3, #0]
 8005616:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005618:	2b00      	cmp	r3, #0
 800561a:	d100      	bne.n	800561e <_dtoa_r+0x752>
 800561c:	e4a3      	b.n	8004f66 <_dtoa_r+0x9a>
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	e4a1      	b.n	8004f66 <_dtoa_r+0x9a>
 8005622:	9e02      	ldr	r6, [sp, #8]
 8005624:	9b07      	ldr	r3, [sp, #28]
 8005626:	9307      	str	r3, [sp, #28]
 8005628:	3b01      	subs	r3, #1
 800562a:	781a      	ldrb	r2, [r3, #0]
 800562c:	2a39      	cmp	r2, #57	; 0x39
 800562e:	d106      	bne.n	800563e <_dtoa_r+0x772>
 8005630:	9a05      	ldr	r2, [sp, #20]
 8005632:	429a      	cmp	r2, r3
 8005634:	d1f7      	bne.n	8005626 <_dtoa_r+0x75a>
 8005636:	2230      	movs	r2, #48	; 0x30
 8005638:	9905      	ldr	r1, [sp, #20]
 800563a:	3601      	adds	r6, #1
 800563c:	700a      	strb	r2, [r1, #0]
 800563e:	781a      	ldrb	r2, [r3, #0]
 8005640:	3201      	adds	r2, #1
 8005642:	701a      	strb	r2, [r3, #0]
 8005644:	e785      	b.n	8005552 <_dtoa_r+0x686>
 8005646:	2200      	movs	r2, #0
 8005648:	4bad      	ldr	r3, [pc, #692]	; (8005900 <_dtoa_r+0xa34>)
 800564a:	f7fb fe9b 	bl	8001384 <__aeabi_dmul>
 800564e:	2200      	movs	r2, #0
 8005650:	2300      	movs	r3, #0
 8005652:	0004      	movs	r4, r0
 8005654:	000d      	movs	r5, r1
 8005656:	f7fa fef7 	bl	8000448 <__aeabi_dcmpeq>
 800565a:	2800      	cmp	r0, #0
 800565c:	d09b      	beq.n	8005596 <_dtoa_r+0x6ca>
 800565e:	e7cf      	b.n	8005600 <_dtoa_r+0x734>
 8005660:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005662:	2a00      	cmp	r2, #0
 8005664:	d100      	bne.n	8005668 <_dtoa_r+0x79c>
 8005666:	e082      	b.n	800576e <_dtoa_r+0x8a2>
 8005668:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800566a:	2a01      	cmp	r2, #1
 800566c:	dc66      	bgt.n	800573c <_dtoa_r+0x870>
 800566e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005670:	2a00      	cmp	r2, #0
 8005672:	d05f      	beq.n	8005734 <_dtoa_r+0x868>
 8005674:	4aa3      	ldr	r2, [pc, #652]	; (8005904 <_dtoa_r+0xa38>)
 8005676:	189b      	adds	r3, r3, r2
 8005678:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800567a:	9c08      	ldr	r4, [sp, #32]
 800567c:	9a08      	ldr	r2, [sp, #32]
 800567e:	2101      	movs	r1, #1
 8005680:	18d2      	adds	r2, r2, r3
 8005682:	9208      	str	r2, [sp, #32]
 8005684:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005686:	0038      	movs	r0, r7
 8005688:	18d3      	adds	r3, r2, r3
 800568a:	930d      	str	r3, [sp, #52]	; 0x34
 800568c:	f000 fb50 	bl	8005d30 <__i2b>
 8005690:	0005      	movs	r5, r0
 8005692:	2c00      	cmp	r4, #0
 8005694:	dd0e      	ble.n	80056b4 <_dtoa_r+0x7e8>
 8005696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005698:	2b00      	cmp	r3, #0
 800569a:	dd0b      	ble.n	80056b4 <_dtoa_r+0x7e8>
 800569c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800569e:	0023      	movs	r3, r4
 80056a0:	4294      	cmp	r4, r2
 80056a2:	dd00      	ble.n	80056a6 <_dtoa_r+0x7da>
 80056a4:	0013      	movs	r3, r2
 80056a6:	9a08      	ldr	r2, [sp, #32]
 80056a8:	1ae4      	subs	r4, r4, r3
 80056aa:	1ad2      	subs	r2, r2, r3
 80056ac:	9208      	str	r2, [sp, #32]
 80056ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	930d      	str	r3, [sp, #52]	; 0x34
 80056b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d01f      	beq.n	80056fa <_dtoa_r+0x82e>
 80056ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d05a      	beq.n	8005776 <_dtoa_r+0x8aa>
 80056c0:	2e00      	cmp	r6, #0
 80056c2:	dd11      	ble.n	80056e8 <_dtoa_r+0x81c>
 80056c4:	0029      	movs	r1, r5
 80056c6:	0032      	movs	r2, r6
 80056c8:	0038      	movs	r0, r7
 80056ca:	f000 fbf7 	bl	8005ebc <__pow5mult>
 80056ce:	9a04      	ldr	r2, [sp, #16]
 80056d0:	0001      	movs	r1, r0
 80056d2:	0005      	movs	r5, r0
 80056d4:	0038      	movs	r0, r7
 80056d6:	f000 fb41 	bl	8005d5c <__multiply>
 80056da:	9904      	ldr	r1, [sp, #16]
 80056dc:	9007      	str	r0, [sp, #28]
 80056de:	0038      	movs	r0, r7
 80056e0:	f000 fa76 	bl	8005bd0 <_Bfree>
 80056e4:	9b07      	ldr	r3, [sp, #28]
 80056e6:	9304      	str	r3, [sp, #16]
 80056e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056ea:	1b9a      	subs	r2, r3, r6
 80056ec:	42b3      	cmp	r3, r6
 80056ee:	d004      	beq.n	80056fa <_dtoa_r+0x82e>
 80056f0:	0038      	movs	r0, r7
 80056f2:	9904      	ldr	r1, [sp, #16]
 80056f4:	f000 fbe2 	bl	8005ebc <__pow5mult>
 80056f8:	9004      	str	r0, [sp, #16]
 80056fa:	2101      	movs	r1, #1
 80056fc:	0038      	movs	r0, r7
 80056fe:	f000 fb17 	bl	8005d30 <__i2b>
 8005702:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005704:	0006      	movs	r6, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	dd37      	ble.n	800577a <_dtoa_r+0x8ae>
 800570a:	001a      	movs	r2, r3
 800570c:	0001      	movs	r1, r0
 800570e:	0038      	movs	r0, r7
 8005710:	f000 fbd4 	bl	8005ebc <__pow5mult>
 8005714:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005716:	0006      	movs	r6, r0
 8005718:	2b01      	cmp	r3, #1
 800571a:	dd33      	ble.n	8005784 <_dtoa_r+0x8b8>
 800571c:	2300      	movs	r3, #0
 800571e:	9307      	str	r3, [sp, #28]
 8005720:	6933      	ldr	r3, [r6, #16]
 8005722:	3303      	adds	r3, #3
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	18f3      	adds	r3, r6, r3
 8005728:	6858      	ldr	r0, [r3, #4]
 800572a:	f000 fab9 	bl	8005ca0 <__hi0bits>
 800572e:	2320      	movs	r3, #32
 8005730:	1a18      	subs	r0, r3, r0
 8005732:	e03f      	b.n	80057b4 <_dtoa_r+0x8e8>
 8005734:	2336      	movs	r3, #54	; 0x36
 8005736:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005738:	1a9b      	subs	r3, r3, r2
 800573a:	e79d      	b.n	8005678 <_dtoa_r+0x7ac>
 800573c:	9b06      	ldr	r3, [sp, #24]
 800573e:	1e5e      	subs	r6, r3, #1
 8005740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005742:	42b3      	cmp	r3, r6
 8005744:	db08      	blt.n	8005758 <_dtoa_r+0x88c>
 8005746:	1b9e      	subs	r6, r3, r6
 8005748:	9b06      	ldr	r3, [sp, #24]
 800574a:	2b00      	cmp	r3, #0
 800574c:	da0c      	bge.n	8005768 <_dtoa_r+0x89c>
 800574e:	9b08      	ldr	r3, [sp, #32]
 8005750:	9a06      	ldr	r2, [sp, #24]
 8005752:	1a9c      	subs	r4, r3, r2
 8005754:	2300      	movs	r3, #0
 8005756:	e791      	b.n	800567c <_dtoa_r+0x7b0>
 8005758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800575a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800575c:	1af3      	subs	r3, r6, r3
 800575e:	18d3      	adds	r3, r2, r3
 8005760:	960e      	str	r6, [sp, #56]	; 0x38
 8005762:	9314      	str	r3, [sp, #80]	; 0x50
 8005764:	2600      	movs	r6, #0
 8005766:	e7ef      	b.n	8005748 <_dtoa_r+0x87c>
 8005768:	9c08      	ldr	r4, [sp, #32]
 800576a:	9b06      	ldr	r3, [sp, #24]
 800576c:	e786      	b.n	800567c <_dtoa_r+0x7b0>
 800576e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005770:	9c08      	ldr	r4, [sp, #32]
 8005772:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005774:	e78d      	b.n	8005692 <_dtoa_r+0x7c6>
 8005776:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005778:	e7ba      	b.n	80056f0 <_dtoa_r+0x824>
 800577a:	2300      	movs	r3, #0
 800577c:	9307      	str	r3, [sp, #28]
 800577e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005780:	2b01      	cmp	r3, #1
 8005782:	dc13      	bgt.n	80057ac <_dtoa_r+0x8e0>
 8005784:	2300      	movs	r3, #0
 8005786:	9307      	str	r3, [sp, #28]
 8005788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10e      	bne.n	80057ac <_dtoa_r+0x8e0>
 800578e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005790:	031b      	lsls	r3, r3, #12
 8005792:	d10b      	bne.n	80057ac <_dtoa_r+0x8e0>
 8005794:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005796:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005798:	4213      	tst	r3, r2
 800579a:	d007      	beq.n	80057ac <_dtoa_r+0x8e0>
 800579c:	9b08      	ldr	r3, [sp, #32]
 800579e:	3301      	adds	r3, #1
 80057a0:	9308      	str	r3, [sp, #32]
 80057a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057a4:	3301      	adds	r3, #1
 80057a6:	930d      	str	r3, [sp, #52]	; 0x34
 80057a8:	2301      	movs	r3, #1
 80057aa:	9307      	str	r3, [sp, #28]
 80057ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80057ae:	2001      	movs	r0, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1b5      	bne.n	8005720 <_dtoa_r+0x854>
 80057b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057b6:	221f      	movs	r2, #31
 80057b8:	1818      	adds	r0, r3, r0
 80057ba:	0003      	movs	r3, r0
 80057bc:	4013      	ands	r3, r2
 80057be:	4210      	tst	r0, r2
 80057c0:	d046      	beq.n	8005850 <_dtoa_r+0x984>
 80057c2:	3201      	adds	r2, #1
 80057c4:	1ad2      	subs	r2, r2, r3
 80057c6:	2a04      	cmp	r2, #4
 80057c8:	dd3f      	ble.n	800584a <_dtoa_r+0x97e>
 80057ca:	221c      	movs	r2, #28
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	9a08      	ldr	r2, [sp, #32]
 80057d0:	18e4      	adds	r4, r4, r3
 80057d2:	18d2      	adds	r2, r2, r3
 80057d4:	9208      	str	r2, [sp, #32]
 80057d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80057d8:	18d3      	adds	r3, r2, r3
 80057da:	930d      	str	r3, [sp, #52]	; 0x34
 80057dc:	9b08      	ldr	r3, [sp, #32]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	dd05      	ble.n	80057ee <_dtoa_r+0x922>
 80057e2:	001a      	movs	r2, r3
 80057e4:	0038      	movs	r0, r7
 80057e6:	9904      	ldr	r1, [sp, #16]
 80057e8:	f000 fbc4 	bl	8005f74 <__lshift>
 80057ec:	9004      	str	r0, [sp, #16]
 80057ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	dd05      	ble.n	8005800 <_dtoa_r+0x934>
 80057f4:	0031      	movs	r1, r6
 80057f6:	001a      	movs	r2, r3
 80057f8:	0038      	movs	r0, r7
 80057fa:	f000 fbbb 	bl	8005f74 <__lshift>
 80057fe:	0006      	movs	r6, r0
 8005800:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005802:	2b00      	cmp	r3, #0
 8005804:	d026      	beq.n	8005854 <_dtoa_r+0x988>
 8005806:	0031      	movs	r1, r6
 8005808:	9804      	ldr	r0, [sp, #16]
 800580a:	f000 fc23 	bl	8006054 <__mcmp>
 800580e:	2800      	cmp	r0, #0
 8005810:	da20      	bge.n	8005854 <_dtoa_r+0x988>
 8005812:	9b02      	ldr	r3, [sp, #8]
 8005814:	220a      	movs	r2, #10
 8005816:	3b01      	subs	r3, #1
 8005818:	9302      	str	r3, [sp, #8]
 800581a:	0038      	movs	r0, r7
 800581c:	2300      	movs	r3, #0
 800581e:	9904      	ldr	r1, [sp, #16]
 8005820:	f000 f9fa 	bl	8005c18 <__multadd>
 8005824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005826:	9004      	str	r0, [sp, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d100      	bne.n	800582e <_dtoa_r+0x962>
 800582c:	e160      	b.n	8005af0 <_dtoa_r+0xc24>
 800582e:	2300      	movs	r3, #0
 8005830:	0029      	movs	r1, r5
 8005832:	220a      	movs	r2, #10
 8005834:	0038      	movs	r0, r7
 8005836:	f000 f9ef 	bl	8005c18 <__multadd>
 800583a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800583c:	0005      	movs	r5, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	dc47      	bgt.n	80058d2 <_dtoa_r+0xa06>
 8005842:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005844:	2b02      	cmp	r3, #2
 8005846:	dc0d      	bgt.n	8005864 <_dtoa_r+0x998>
 8005848:	e043      	b.n	80058d2 <_dtoa_r+0xa06>
 800584a:	2a04      	cmp	r2, #4
 800584c:	d0c6      	beq.n	80057dc <_dtoa_r+0x910>
 800584e:	0013      	movs	r3, r2
 8005850:	331c      	adds	r3, #28
 8005852:	e7bc      	b.n	80057ce <_dtoa_r+0x902>
 8005854:	9b06      	ldr	r3, [sp, #24]
 8005856:	2b00      	cmp	r3, #0
 8005858:	dc35      	bgt.n	80058c6 <_dtoa_r+0x9fa>
 800585a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800585c:	2b02      	cmp	r3, #2
 800585e:	dd32      	ble.n	80058c6 <_dtoa_r+0x9fa>
 8005860:	9b06      	ldr	r3, [sp, #24]
 8005862:	930c      	str	r3, [sp, #48]	; 0x30
 8005864:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10c      	bne.n	8005884 <_dtoa_r+0x9b8>
 800586a:	0031      	movs	r1, r6
 800586c:	2205      	movs	r2, #5
 800586e:	0038      	movs	r0, r7
 8005870:	f000 f9d2 	bl	8005c18 <__multadd>
 8005874:	0006      	movs	r6, r0
 8005876:	0001      	movs	r1, r0
 8005878:	9804      	ldr	r0, [sp, #16]
 800587a:	f000 fbeb 	bl	8006054 <__mcmp>
 800587e:	2800      	cmp	r0, #0
 8005880:	dd00      	ble.n	8005884 <_dtoa_r+0x9b8>
 8005882:	e59f      	b.n	80053c4 <_dtoa_r+0x4f8>
 8005884:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005886:	43db      	mvns	r3, r3
 8005888:	9302      	str	r3, [sp, #8]
 800588a:	9b05      	ldr	r3, [sp, #20]
 800588c:	9307      	str	r3, [sp, #28]
 800588e:	2400      	movs	r4, #0
 8005890:	0031      	movs	r1, r6
 8005892:	0038      	movs	r0, r7
 8005894:	f000 f99c 	bl	8005bd0 <_Bfree>
 8005898:	2d00      	cmp	r5, #0
 800589a:	d100      	bne.n	800589e <_dtoa_r+0x9d2>
 800589c:	e6b0      	b.n	8005600 <_dtoa_r+0x734>
 800589e:	2c00      	cmp	r4, #0
 80058a0:	d005      	beq.n	80058ae <_dtoa_r+0x9e2>
 80058a2:	42ac      	cmp	r4, r5
 80058a4:	d003      	beq.n	80058ae <_dtoa_r+0x9e2>
 80058a6:	0021      	movs	r1, r4
 80058a8:	0038      	movs	r0, r7
 80058aa:	f000 f991 	bl	8005bd0 <_Bfree>
 80058ae:	0029      	movs	r1, r5
 80058b0:	0038      	movs	r0, r7
 80058b2:	f000 f98d 	bl	8005bd0 <_Bfree>
 80058b6:	e6a3      	b.n	8005600 <_dtoa_r+0x734>
 80058b8:	2600      	movs	r6, #0
 80058ba:	0035      	movs	r5, r6
 80058bc:	e7e2      	b.n	8005884 <_dtoa_r+0x9b8>
 80058be:	9602      	str	r6, [sp, #8]
 80058c0:	9e07      	ldr	r6, [sp, #28]
 80058c2:	0035      	movs	r5, r6
 80058c4:	e57e      	b.n	80053c4 <_dtoa_r+0x4f8>
 80058c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d100      	bne.n	80058ce <_dtoa_r+0xa02>
 80058cc:	e0c8      	b.n	8005a60 <_dtoa_r+0xb94>
 80058ce:	9b06      	ldr	r3, [sp, #24]
 80058d0:	930c      	str	r3, [sp, #48]	; 0x30
 80058d2:	2c00      	cmp	r4, #0
 80058d4:	dd05      	ble.n	80058e2 <_dtoa_r+0xa16>
 80058d6:	0029      	movs	r1, r5
 80058d8:	0022      	movs	r2, r4
 80058da:	0038      	movs	r0, r7
 80058dc:	f000 fb4a 	bl	8005f74 <__lshift>
 80058e0:	0005      	movs	r5, r0
 80058e2:	9b07      	ldr	r3, [sp, #28]
 80058e4:	0028      	movs	r0, r5
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d01f      	beq.n	800592a <_dtoa_r+0xa5e>
 80058ea:	0038      	movs	r0, r7
 80058ec:	6869      	ldr	r1, [r5, #4]
 80058ee:	f000 f92b 	bl	8005b48 <_Balloc>
 80058f2:	1e04      	subs	r4, r0, #0
 80058f4:	d10c      	bne.n	8005910 <_dtoa_r+0xa44>
 80058f6:	0002      	movs	r2, r0
 80058f8:	4b03      	ldr	r3, [pc, #12]	; (8005908 <_dtoa_r+0xa3c>)
 80058fa:	4904      	ldr	r1, [pc, #16]	; (800590c <_dtoa_r+0xa40>)
 80058fc:	f7ff fafb 	bl	8004ef6 <_dtoa_r+0x2a>
 8005900:	40240000 	.word	0x40240000
 8005904:	00000433 	.word	0x00000433
 8005908:	08007043 	.word	0x08007043
 800590c:	000002ea 	.word	0x000002ea
 8005910:	0029      	movs	r1, r5
 8005912:	692b      	ldr	r3, [r5, #16]
 8005914:	310c      	adds	r1, #12
 8005916:	1c9a      	adds	r2, r3, #2
 8005918:	0092      	lsls	r2, r2, #2
 800591a:	300c      	adds	r0, #12
 800591c:	f7fe fd04 	bl	8004328 <memcpy>
 8005920:	2201      	movs	r2, #1
 8005922:	0021      	movs	r1, r4
 8005924:	0038      	movs	r0, r7
 8005926:	f000 fb25 	bl	8005f74 <__lshift>
 800592a:	002c      	movs	r4, r5
 800592c:	0005      	movs	r5, r0
 800592e:	9b05      	ldr	r3, [sp, #20]
 8005930:	9308      	str	r3, [sp, #32]
 8005932:	0031      	movs	r1, r6
 8005934:	9804      	ldr	r0, [sp, #16]
 8005936:	f7ff fa3d 	bl	8004db4 <quorem>
 800593a:	0003      	movs	r3, r0
 800593c:	0021      	movs	r1, r4
 800593e:	3330      	adds	r3, #48	; 0x30
 8005940:	900e      	str	r0, [sp, #56]	; 0x38
 8005942:	9804      	ldr	r0, [sp, #16]
 8005944:	9306      	str	r3, [sp, #24]
 8005946:	f000 fb85 	bl	8006054 <__mcmp>
 800594a:	002a      	movs	r2, r5
 800594c:	900f      	str	r0, [sp, #60]	; 0x3c
 800594e:	0031      	movs	r1, r6
 8005950:	0038      	movs	r0, r7
 8005952:	f000 fb9b 	bl	800608c <__mdiff>
 8005956:	68c3      	ldr	r3, [r0, #12]
 8005958:	9007      	str	r0, [sp, #28]
 800595a:	9310      	str	r3, [sp, #64]	; 0x40
 800595c:	2301      	movs	r3, #1
 800595e:	930d      	str	r3, [sp, #52]	; 0x34
 8005960:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005962:	2b00      	cmp	r3, #0
 8005964:	d104      	bne.n	8005970 <_dtoa_r+0xaa4>
 8005966:	0001      	movs	r1, r0
 8005968:	9804      	ldr	r0, [sp, #16]
 800596a:	f000 fb73 	bl	8006054 <__mcmp>
 800596e:	900d      	str	r0, [sp, #52]	; 0x34
 8005970:	0038      	movs	r0, r7
 8005972:	9907      	ldr	r1, [sp, #28]
 8005974:	f000 f92c 	bl	8005bd0 <_Bfree>
 8005978:	2301      	movs	r3, #1
 800597a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800597c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800597e:	4018      	ands	r0, r3
 8005980:	9b08      	ldr	r3, [sp, #32]
 8005982:	3301      	adds	r3, #1
 8005984:	9307      	str	r3, [sp, #28]
 8005986:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005988:	4313      	orrs	r3, r2
 800598a:	4303      	orrs	r3, r0
 800598c:	d10c      	bne.n	80059a8 <_dtoa_r+0xadc>
 800598e:	9b06      	ldr	r3, [sp, #24]
 8005990:	2b39      	cmp	r3, #57	; 0x39
 8005992:	d025      	beq.n	80059e0 <_dtoa_r+0xb14>
 8005994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005996:	2b00      	cmp	r3, #0
 8005998:	dd02      	ble.n	80059a0 <_dtoa_r+0xad4>
 800599a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800599c:	3331      	adds	r3, #49	; 0x31
 800599e:	9306      	str	r3, [sp, #24]
 80059a0:	9b08      	ldr	r3, [sp, #32]
 80059a2:	9a06      	ldr	r2, [sp, #24]
 80059a4:	701a      	strb	r2, [r3, #0]
 80059a6:	e773      	b.n	8005890 <_dtoa_r+0x9c4>
 80059a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	db03      	blt.n	80059b6 <_dtoa_r+0xaea>
 80059ae:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80059b0:	4313      	orrs	r3, r2
 80059b2:	4303      	orrs	r3, r0
 80059b4:	d11f      	bne.n	80059f6 <_dtoa_r+0xb2a>
 80059b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	ddf1      	ble.n	80059a0 <_dtoa_r+0xad4>
 80059bc:	9904      	ldr	r1, [sp, #16]
 80059be:	2201      	movs	r2, #1
 80059c0:	0038      	movs	r0, r7
 80059c2:	f000 fad7 	bl	8005f74 <__lshift>
 80059c6:	0031      	movs	r1, r6
 80059c8:	9004      	str	r0, [sp, #16]
 80059ca:	f000 fb43 	bl	8006054 <__mcmp>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	dc03      	bgt.n	80059da <_dtoa_r+0xb0e>
 80059d2:	d1e5      	bne.n	80059a0 <_dtoa_r+0xad4>
 80059d4:	9b06      	ldr	r3, [sp, #24]
 80059d6:	07db      	lsls	r3, r3, #31
 80059d8:	d5e2      	bpl.n	80059a0 <_dtoa_r+0xad4>
 80059da:	9b06      	ldr	r3, [sp, #24]
 80059dc:	2b39      	cmp	r3, #57	; 0x39
 80059de:	d1dc      	bne.n	800599a <_dtoa_r+0xace>
 80059e0:	2339      	movs	r3, #57	; 0x39
 80059e2:	9a08      	ldr	r2, [sp, #32]
 80059e4:	7013      	strb	r3, [r2, #0]
 80059e6:	9b07      	ldr	r3, [sp, #28]
 80059e8:	9307      	str	r3, [sp, #28]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	781a      	ldrb	r2, [r3, #0]
 80059ee:	2a39      	cmp	r2, #57	; 0x39
 80059f0:	d06c      	beq.n	8005acc <_dtoa_r+0xc00>
 80059f2:	3201      	adds	r2, #1
 80059f4:	e7d6      	b.n	80059a4 <_dtoa_r+0xad8>
 80059f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	dd07      	ble.n	8005a0c <_dtoa_r+0xb40>
 80059fc:	9b06      	ldr	r3, [sp, #24]
 80059fe:	2b39      	cmp	r3, #57	; 0x39
 8005a00:	d0ee      	beq.n	80059e0 <_dtoa_r+0xb14>
 8005a02:	9b06      	ldr	r3, [sp, #24]
 8005a04:	9a08      	ldr	r2, [sp, #32]
 8005a06:	3301      	adds	r3, #1
 8005a08:	7013      	strb	r3, [r2, #0]
 8005a0a:	e741      	b.n	8005890 <_dtoa_r+0x9c4>
 8005a0c:	9b08      	ldr	r3, [sp, #32]
 8005a0e:	9a06      	ldr	r2, [sp, #24]
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	2301      	movs	r3, #1
 8005a14:	9a05      	ldr	r2, [sp, #20]
 8005a16:	1a9b      	subs	r3, r3, r2
 8005a18:	9a08      	ldr	r2, [sp, #32]
 8005a1a:	189b      	adds	r3, r3, r2
 8005a1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d03e      	beq.n	8005aa0 <_dtoa_r+0xbd4>
 8005a22:	2300      	movs	r3, #0
 8005a24:	220a      	movs	r2, #10
 8005a26:	9904      	ldr	r1, [sp, #16]
 8005a28:	0038      	movs	r0, r7
 8005a2a:	f000 f8f5 	bl	8005c18 <__multadd>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	9004      	str	r0, [sp, #16]
 8005a32:	220a      	movs	r2, #10
 8005a34:	0021      	movs	r1, r4
 8005a36:	0038      	movs	r0, r7
 8005a38:	42ac      	cmp	r4, r5
 8005a3a:	d106      	bne.n	8005a4a <_dtoa_r+0xb7e>
 8005a3c:	f000 f8ec 	bl	8005c18 <__multadd>
 8005a40:	0004      	movs	r4, r0
 8005a42:	0005      	movs	r5, r0
 8005a44:	9b07      	ldr	r3, [sp, #28]
 8005a46:	9308      	str	r3, [sp, #32]
 8005a48:	e773      	b.n	8005932 <_dtoa_r+0xa66>
 8005a4a:	f000 f8e5 	bl	8005c18 <__multadd>
 8005a4e:	0029      	movs	r1, r5
 8005a50:	0004      	movs	r4, r0
 8005a52:	2300      	movs	r3, #0
 8005a54:	220a      	movs	r2, #10
 8005a56:	0038      	movs	r0, r7
 8005a58:	f000 f8de 	bl	8005c18 <__multadd>
 8005a5c:	0005      	movs	r5, r0
 8005a5e:	e7f1      	b.n	8005a44 <_dtoa_r+0xb78>
 8005a60:	9b06      	ldr	r3, [sp, #24]
 8005a62:	930c      	str	r3, [sp, #48]	; 0x30
 8005a64:	2400      	movs	r4, #0
 8005a66:	0031      	movs	r1, r6
 8005a68:	9804      	ldr	r0, [sp, #16]
 8005a6a:	f7ff f9a3 	bl	8004db4 <quorem>
 8005a6e:	9b05      	ldr	r3, [sp, #20]
 8005a70:	3030      	adds	r0, #48	; 0x30
 8005a72:	5518      	strb	r0, [r3, r4]
 8005a74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a76:	3401      	adds	r4, #1
 8005a78:	9006      	str	r0, [sp, #24]
 8005a7a:	42a3      	cmp	r3, r4
 8005a7c:	dd07      	ble.n	8005a8e <_dtoa_r+0xbc2>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	220a      	movs	r2, #10
 8005a82:	0038      	movs	r0, r7
 8005a84:	9904      	ldr	r1, [sp, #16]
 8005a86:	f000 f8c7 	bl	8005c18 <__multadd>
 8005a8a:	9004      	str	r0, [sp, #16]
 8005a8c:	e7eb      	b.n	8005a66 <_dtoa_r+0xb9a>
 8005a8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a90:	2001      	movs	r0, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	dd00      	ble.n	8005a98 <_dtoa_r+0xbcc>
 8005a96:	0018      	movs	r0, r3
 8005a98:	2400      	movs	r4, #0
 8005a9a:	9b05      	ldr	r3, [sp, #20]
 8005a9c:	181b      	adds	r3, r3, r0
 8005a9e:	9307      	str	r3, [sp, #28]
 8005aa0:	9904      	ldr	r1, [sp, #16]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	0038      	movs	r0, r7
 8005aa6:	f000 fa65 	bl	8005f74 <__lshift>
 8005aaa:	0031      	movs	r1, r6
 8005aac:	9004      	str	r0, [sp, #16]
 8005aae:	f000 fad1 	bl	8006054 <__mcmp>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	dc97      	bgt.n	80059e6 <_dtoa_r+0xb1a>
 8005ab6:	d102      	bne.n	8005abe <_dtoa_r+0xbf2>
 8005ab8:	9b06      	ldr	r3, [sp, #24]
 8005aba:	07db      	lsls	r3, r3, #31
 8005abc:	d493      	bmi.n	80059e6 <_dtoa_r+0xb1a>
 8005abe:	9b07      	ldr	r3, [sp, #28]
 8005ac0:	9307      	str	r3, [sp, #28]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	781a      	ldrb	r2, [r3, #0]
 8005ac6:	2a30      	cmp	r2, #48	; 0x30
 8005ac8:	d0fa      	beq.n	8005ac0 <_dtoa_r+0xbf4>
 8005aca:	e6e1      	b.n	8005890 <_dtoa_r+0x9c4>
 8005acc:	9a05      	ldr	r2, [sp, #20]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d18a      	bne.n	80059e8 <_dtoa_r+0xb1c>
 8005ad2:	9b02      	ldr	r3, [sp, #8]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	9302      	str	r3, [sp, #8]
 8005ad8:	2331      	movs	r3, #49	; 0x31
 8005ada:	e795      	b.n	8005a08 <_dtoa_r+0xb3c>
 8005adc:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <_dtoa_r+0xc34>)
 8005ade:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005ae0:	9305      	str	r3, [sp, #20]
 8005ae2:	4b08      	ldr	r3, [pc, #32]	; (8005b04 <_dtoa_r+0xc38>)
 8005ae4:	2a00      	cmp	r2, #0
 8005ae6:	d001      	beq.n	8005aec <_dtoa_r+0xc20>
 8005ae8:	f7ff fa3b 	bl	8004f62 <_dtoa_r+0x96>
 8005aec:	f7ff fa3b 	bl	8004f66 <_dtoa_r+0x9a>
 8005af0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	dcb6      	bgt.n	8005a64 <_dtoa_r+0xb98>
 8005af6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	dd00      	ble.n	8005afe <_dtoa_r+0xc32>
 8005afc:	e6b2      	b.n	8005864 <_dtoa_r+0x998>
 8005afe:	e7b1      	b.n	8005a64 <_dtoa_r+0xb98>
 8005b00:	08006fc0 	.word	0x08006fc0
 8005b04:	08006fc8 	.word	0x08006fc8

08005b08 <_localeconv_r>:
 8005b08:	4800      	ldr	r0, [pc, #0]	; (8005b0c <_localeconv_r+0x4>)
 8005b0a:	4770      	bx	lr
 8005b0c:	20000160 	.word	0x20000160

08005b10 <memchr>:
 8005b10:	b2c9      	uxtb	r1, r1
 8005b12:	1882      	adds	r2, r0, r2
 8005b14:	4290      	cmp	r0, r2
 8005b16:	d101      	bne.n	8005b1c <memchr+0xc>
 8005b18:	2000      	movs	r0, #0
 8005b1a:	4770      	bx	lr
 8005b1c:	7803      	ldrb	r3, [r0, #0]
 8005b1e:	428b      	cmp	r3, r1
 8005b20:	d0fb      	beq.n	8005b1a <memchr+0xa>
 8005b22:	3001      	adds	r0, #1
 8005b24:	e7f6      	b.n	8005b14 <memchr+0x4>
	...

08005b28 <__malloc_lock>:
 8005b28:	b510      	push	{r4, lr}
 8005b2a:	4802      	ldr	r0, [pc, #8]	; (8005b34 <__malloc_lock+0xc>)
 8005b2c:	f000 fbe7 	bl	80062fe <__retarget_lock_acquire_recursive>
 8005b30:	bd10      	pop	{r4, pc}
 8005b32:	46c0      	nop			; (mov r8, r8)
 8005b34:	20000300 	.word	0x20000300

08005b38 <__malloc_unlock>:
 8005b38:	b510      	push	{r4, lr}
 8005b3a:	4802      	ldr	r0, [pc, #8]	; (8005b44 <__malloc_unlock+0xc>)
 8005b3c:	f000 fbe0 	bl	8006300 <__retarget_lock_release_recursive>
 8005b40:	bd10      	pop	{r4, pc}
 8005b42:	46c0      	nop			; (mov r8, r8)
 8005b44:	20000300 	.word	0x20000300

08005b48 <_Balloc>:
 8005b48:	b570      	push	{r4, r5, r6, lr}
 8005b4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005b4c:	0006      	movs	r6, r0
 8005b4e:	000c      	movs	r4, r1
 8005b50:	2d00      	cmp	r5, #0
 8005b52:	d10e      	bne.n	8005b72 <_Balloc+0x2a>
 8005b54:	2010      	movs	r0, #16
 8005b56:	f7fe fbdd 	bl	8004314 <malloc>
 8005b5a:	1e02      	subs	r2, r0, #0
 8005b5c:	6270      	str	r0, [r6, #36]	; 0x24
 8005b5e:	d104      	bne.n	8005b6a <_Balloc+0x22>
 8005b60:	2166      	movs	r1, #102	; 0x66
 8005b62:	4b19      	ldr	r3, [pc, #100]	; (8005bc8 <_Balloc+0x80>)
 8005b64:	4819      	ldr	r0, [pc, #100]	; (8005bcc <_Balloc+0x84>)
 8005b66:	f000 fb9b 	bl	80062a0 <__assert_func>
 8005b6a:	6045      	str	r5, [r0, #4]
 8005b6c:	6085      	str	r5, [r0, #8]
 8005b6e:	6005      	str	r5, [r0, #0]
 8005b70:	60c5      	str	r5, [r0, #12]
 8005b72:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8005b74:	68eb      	ldr	r3, [r5, #12]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d013      	beq.n	8005ba2 <_Balloc+0x5a>
 8005b7a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005b7c:	00a2      	lsls	r2, r4, #2
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	189b      	adds	r3, r3, r2
 8005b82:	6818      	ldr	r0, [r3, #0]
 8005b84:	2800      	cmp	r0, #0
 8005b86:	d118      	bne.n	8005bba <_Balloc+0x72>
 8005b88:	2101      	movs	r1, #1
 8005b8a:	000d      	movs	r5, r1
 8005b8c:	40a5      	lsls	r5, r4
 8005b8e:	1d6a      	adds	r2, r5, #5
 8005b90:	0030      	movs	r0, r6
 8005b92:	0092      	lsls	r2, r2, #2
 8005b94:	f000 fb76 	bl	8006284 <_calloc_r>
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	d00c      	beq.n	8005bb6 <_Balloc+0x6e>
 8005b9c:	6044      	str	r4, [r0, #4]
 8005b9e:	6085      	str	r5, [r0, #8]
 8005ba0:	e00d      	b.n	8005bbe <_Balloc+0x76>
 8005ba2:	2221      	movs	r2, #33	; 0x21
 8005ba4:	2104      	movs	r1, #4
 8005ba6:	0030      	movs	r0, r6
 8005ba8:	f000 fb6c 	bl	8006284 <_calloc_r>
 8005bac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005bae:	60e8      	str	r0, [r5, #12]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1e1      	bne.n	8005b7a <_Balloc+0x32>
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	bd70      	pop	{r4, r5, r6, pc}
 8005bba:	6802      	ldr	r2, [r0, #0]
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	6103      	str	r3, [r0, #16]
 8005bc2:	60c3      	str	r3, [r0, #12]
 8005bc4:	e7f8      	b.n	8005bb8 <_Balloc+0x70>
 8005bc6:	46c0      	nop			; (mov r8, r8)
 8005bc8:	08006fcd 	.word	0x08006fcd
 8005bcc:	08007054 	.word	0x08007054

08005bd0 <_Bfree>:
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005bd4:	0005      	movs	r5, r0
 8005bd6:	000c      	movs	r4, r1
 8005bd8:	2e00      	cmp	r6, #0
 8005bda:	d10e      	bne.n	8005bfa <_Bfree+0x2a>
 8005bdc:	2010      	movs	r0, #16
 8005bde:	f7fe fb99 	bl	8004314 <malloc>
 8005be2:	1e02      	subs	r2, r0, #0
 8005be4:	6268      	str	r0, [r5, #36]	; 0x24
 8005be6:	d104      	bne.n	8005bf2 <_Bfree+0x22>
 8005be8:	218a      	movs	r1, #138	; 0x8a
 8005bea:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <_Bfree+0x40>)
 8005bec:	4809      	ldr	r0, [pc, #36]	; (8005c14 <_Bfree+0x44>)
 8005bee:	f000 fb57 	bl	80062a0 <__assert_func>
 8005bf2:	6046      	str	r6, [r0, #4]
 8005bf4:	6086      	str	r6, [r0, #8]
 8005bf6:	6006      	str	r6, [r0, #0]
 8005bf8:	60c6      	str	r6, [r0, #12]
 8005bfa:	2c00      	cmp	r4, #0
 8005bfc:	d007      	beq.n	8005c0e <_Bfree+0x3e>
 8005bfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c00:	6862      	ldr	r2, [r4, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	0092      	lsls	r2, r2, #2
 8005c06:	189b      	adds	r3, r3, r2
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	6022      	str	r2, [r4, #0]
 8005c0c:	601c      	str	r4, [r3, #0]
 8005c0e:	bd70      	pop	{r4, r5, r6, pc}
 8005c10:	08006fcd 	.word	0x08006fcd
 8005c14:	08007054 	.word	0x08007054

08005c18 <__multadd>:
 8005c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c1a:	000e      	movs	r6, r1
 8005c1c:	9001      	str	r0, [sp, #4]
 8005c1e:	000c      	movs	r4, r1
 8005c20:	001d      	movs	r5, r3
 8005c22:	2000      	movs	r0, #0
 8005c24:	690f      	ldr	r7, [r1, #16]
 8005c26:	3614      	adds	r6, #20
 8005c28:	6833      	ldr	r3, [r6, #0]
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	b299      	uxth	r1, r3
 8005c2e:	4351      	muls	r1, r2
 8005c30:	0c1b      	lsrs	r3, r3, #16
 8005c32:	4353      	muls	r3, r2
 8005c34:	1949      	adds	r1, r1, r5
 8005c36:	0c0d      	lsrs	r5, r1, #16
 8005c38:	195b      	adds	r3, r3, r5
 8005c3a:	0c1d      	lsrs	r5, r3, #16
 8005c3c:	b289      	uxth	r1, r1
 8005c3e:	041b      	lsls	r3, r3, #16
 8005c40:	185b      	adds	r3, r3, r1
 8005c42:	c608      	stmia	r6!, {r3}
 8005c44:	4287      	cmp	r7, r0
 8005c46:	dcef      	bgt.n	8005c28 <__multadd+0x10>
 8005c48:	2d00      	cmp	r5, #0
 8005c4a:	d022      	beq.n	8005c92 <__multadd+0x7a>
 8005c4c:	68a3      	ldr	r3, [r4, #8]
 8005c4e:	42bb      	cmp	r3, r7
 8005c50:	dc19      	bgt.n	8005c86 <__multadd+0x6e>
 8005c52:	6863      	ldr	r3, [r4, #4]
 8005c54:	9801      	ldr	r0, [sp, #4]
 8005c56:	1c59      	adds	r1, r3, #1
 8005c58:	f7ff ff76 	bl	8005b48 <_Balloc>
 8005c5c:	1e06      	subs	r6, r0, #0
 8005c5e:	d105      	bne.n	8005c6c <__multadd+0x54>
 8005c60:	0002      	movs	r2, r0
 8005c62:	21b5      	movs	r1, #181	; 0xb5
 8005c64:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <__multadd+0x80>)
 8005c66:	480d      	ldr	r0, [pc, #52]	; (8005c9c <__multadd+0x84>)
 8005c68:	f000 fb1a 	bl	80062a0 <__assert_func>
 8005c6c:	0021      	movs	r1, r4
 8005c6e:	6923      	ldr	r3, [r4, #16]
 8005c70:	310c      	adds	r1, #12
 8005c72:	1c9a      	adds	r2, r3, #2
 8005c74:	0092      	lsls	r2, r2, #2
 8005c76:	300c      	adds	r0, #12
 8005c78:	f7fe fb56 	bl	8004328 <memcpy>
 8005c7c:	0021      	movs	r1, r4
 8005c7e:	9801      	ldr	r0, [sp, #4]
 8005c80:	f7ff ffa6 	bl	8005bd0 <_Bfree>
 8005c84:	0034      	movs	r4, r6
 8005c86:	1d3b      	adds	r3, r7, #4
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	18e3      	adds	r3, r4, r3
 8005c8c:	605d      	str	r5, [r3, #4]
 8005c8e:	1c7b      	adds	r3, r7, #1
 8005c90:	6123      	str	r3, [r4, #16]
 8005c92:	0020      	movs	r0, r4
 8005c94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	08007043 	.word	0x08007043
 8005c9c:	08007054 	.word	0x08007054

08005ca0 <__hi0bits>:
 8005ca0:	0003      	movs	r3, r0
 8005ca2:	0c02      	lsrs	r2, r0, #16
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	4282      	cmp	r2, r0
 8005ca8:	d101      	bne.n	8005cae <__hi0bits+0xe>
 8005caa:	041b      	lsls	r3, r3, #16
 8005cac:	3010      	adds	r0, #16
 8005cae:	0e1a      	lsrs	r2, r3, #24
 8005cb0:	d101      	bne.n	8005cb6 <__hi0bits+0x16>
 8005cb2:	3008      	adds	r0, #8
 8005cb4:	021b      	lsls	r3, r3, #8
 8005cb6:	0f1a      	lsrs	r2, r3, #28
 8005cb8:	d101      	bne.n	8005cbe <__hi0bits+0x1e>
 8005cba:	3004      	adds	r0, #4
 8005cbc:	011b      	lsls	r3, r3, #4
 8005cbe:	0f9a      	lsrs	r2, r3, #30
 8005cc0:	d101      	bne.n	8005cc6 <__hi0bits+0x26>
 8005cc2:	3002      	adds	r0, #2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	db03      	blt.n	8005cd2 <__hi0bits+0x32>
 8005cca:	3001      	adds	r0, #1
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	d400      	bmi.n	8005cd2 <__hi0bits+0x32>
 8005cd0:	2020      	movs	r0, #32
 8005cd2:	4770      	bx	lr

08005cd4 <__lo0bits>:
 8005cd4:	6803      	ldr	r3, [r0, #0]
 8005cd6:	0002      	movs	r2, r0
 8005cd8:	2107      	movs	r1, #7
 8005cda:	0018      	movs	r0, r3
 8005cdc:	4008      	ands	r0, r1
 8005cde:	420b      	tst	r3, r1
 8005ce0:	d00d      	beq.n	8005cfe <__lo0bits+0x2a>
 8005ce2:	3906      	subs	r1, #6
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	420b      	tst	r3, r1
 8005ce8:	d105      	bne.n	8005cf6 <__lo0bits+0x22>
 8005cea:	3002      	adds	r0, #2
 8005cec:	4203      	tst	r3, r0
 8005cee:	d003      	beq.n	8005cf8 <__lo0bits+0x24>
 8005cf0:	40cb      	lsrs	r3, r1
 8005cf2:	0008      	movs	r0, r1
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	4770      	bx	lr
 8005cf8:	089b      	lsrs	r3, r3, #2
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	e7fb      	b.n	8005cf6 <__lo0bits+0x22>
 8005cfe:	b299      	uxth	r1, r3
 8005d00:	2900      	cmp	r1, #0
 8005d02:	d101      	bne.n	8005d08 <__lo0bits+0x34>
 8005d04:	2010      	movs	r0, #16
 8005d06:	0c1b      	lsrs	r3, r3, #16
 8005d08:	b2d9      	uxtb	r1, r3
 8005d0a:	2900      	cmp	r1, #0
 8005d0c:	d101      	bne.n	8005d12 <__lo0bits+0x3e>
 8005d0e:	3008      	adds	r0, #8
 8005d10:	0a1b      	lsrs	r3, r3, #8
 8005d12:	0719      	lsls	r1, r3, #28
 8005d14:	d101      	bne.n	8005d1a <__lo0bits+0x46>
 8005d16:	3004      	adds	r0, #4
 8005d18:	091b      	lsrs	r3, r3, #4
 8005d1a:	0799      	lsls	r1, r3, #30
 8005d1c:	d101      	bne.n	8005d22 <__lo0bits+0x4e>
 8005d1e:	3002      	adds	r0, #2
 8005d20:	089b      	lsrs	r3, r3, #2
 8005d22:	07d9      	lsls	r1, r3, #31
 8005d24:	d4e9      	bmi.n	8005cfa <__lo0bits+0x26>
 8005d26:	3001      	adds	r0, #1
 8005d28:	085b      	lsrs	r3, r3, #1
 8005d2a:	d1e6      	bne.n	8005cfa <__lo0bits+0x26>
 8005d2c:	2020      	movs	r0, #32
 8005d2e:	e7e2      	b.n	8005cf6 <__lo0bits+0x22>

08005d30 <__i2b>:
 8005d30:	b510      	push	{r4, lr}
 8005d32:	000c      	movs	r4, r1
 8005d34:	2101      	movs	r1, #1
 8005d36:	f7ff ff07 	bl	8005b48 <_Balloc>
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d106      	bne.n	8005d4c <__i2b+0x1c>
 8005d3e:	21a0      	movs	r1, #160	; 0xa0
 8005d40:	0002      	movs	r2, r0
 8005d42:	4b04      	ldr	r3, [pc, #16]	; (8005d54 <__i2b+0x24>)
 8005d44:	4804      	ldr	r0, [pc, #16]	; (8005d58 <__i2b+0x28>)
 8005d46:	0049      	lsls	r1, r1, #1
 8005d48:	f000 faaa 	bl	80062a0 <__assert_func>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	6144      	str	r4, [r0, #20]
 8005d50:	6103      	str	r3, [r0, #16]
 8005d52:	bd10      	pop	{r4, pc}
 8005d54:	08007043 	.word	0x08007043
 8005d58:	08007054 	.word	0x08007054

08005d5c <__multiply>:
 8005d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d5e:	690b      	ldr	r3, [r1, #16]
 8005d60:	0014      	movs	r4, r2
 8005d62:	6912      	ldr	r2, [r2, #16]
 8005d64:	000d      	movs	r5, r1
 8005d66:	b089      	sub	sp, #36	; 0x24
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	da01      	bge.n	8005d70 <__multiply+0x14>
 8005d6c:	0025      	movs	r5, r4
 8005d6e:	000c      	movs	r4, r1
 8005d70:	692f      	ldr	r7, [r5, #16]
 8005d72:	6926      	ldr	r6, [r4, #16]
 8005d74:	6869      	ldr	r1, [r5, #4]
 8005d76:	19bb      	adds	r3, r7, r6
 8005d78:	9302      	str	r3, [sp, #8]
 8005d7a:	68ab      	ldr	r3, [r5, #8]
 8005d7c:	19ba      	adds	r2, r7, r6
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	da00      	bge.n	8005d84 <__multiply+0x28>
 8005d82:	3101      	adds	r1, #1
 8005d84:	f7ff fee0 	bl	8005b48 <_Balloc>
 8005d88:	9001      	str	r0, [sp, #4]
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	d106      	bne.n	8005d9c <__multiply+0x40>
 8005d8e:	215e      	movs	r1, #94	; 0x5e
 8005d90:	0002      	movs	r2, r0
 8005d92:	4b48      	ldr	r3, [pc, #288]	; (8005eb4 <__multiply+0x158>)
 8005d94:	4848      	ldr	r0, [pc, #288]	; (8005eb8 <__multiply+0x15c>)
 8005d96:	31ff      	adds	r1, #255	; 0xff
 8005d98:	f000 fa82 	bl	80062a0 <__assert_func>
 8005d9c:	9b01      	ldr	r3, [sp, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	3314      	adds	r3, #20
 8005da2:	469c      	mov	ip, r3
 8005da4:	19bb      	adds	r3, r7, r6
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4463      	add	r3, ip
 8005daa:	9303      	str	r3, [sp, #12]
 8005dac:	4663      	mov	r3, ip
 8005dae:	9903      	ldr	r1, [sp, #12]
 8005db0:	428b      	cmp	r3, r1
 8005db2:	d32c      	bcc.n	8005e0e <__multiply+0xb2>
 8005db4:	002b      	movs	r3, r5
 8005db6:	0022      	movs	r2, r4
 8005db8:	3314      	adds	r3, #20
 8005dba:	00bf      	lsls	r7, r7, #2
 8005dbc:	3214      	adds	r2, #20
 8005dbe:	9306      	str	r3, [sp, #24]
 8005dc0:	00b6      	lsls	r6, r6, #2
 8005dc2:	19db      	adds	r3, r3, r7
 8005dc4:	9304      	str	r3, [sp, #16]
 8005dc6:	1993      	adds	r3, r2, r6
 8005dc8:	9307      	str	r3, [sp, #28]
 8005dca:	2304      	movs	r3, #4
 8005dcc:	9305      	str	r3, [sp, #20]
 8005dce:	002b      	movs	r3, r5
 8005dd0:	9904      	ldr	r1, [sp, #16]
 8005dd2:	3315      	adds	r3, #21
 8005dd4:	9200      	str	r2, [sp, #0]
 8005dd6:	4299      	cmp	r1, r3
 8005dd8:	d305      	bcc.n	8005de6 <__multiply+0x8a>
 8005dda:	1b4b      	subs	r3, r1, r5
 8005ddc:	3b15      	subs	r3, #21
 8005dde:	089b      	lsrs	r3, r3, #2
 8005de0:	3301      	adds	r3, #1
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	9305      	str	r3, [sp, #20]
 8005de6:	9b07      	ldr	r3, [sp, #28]
 8005de8:	9a00      	ldr	r2, [sp, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d311      	bcc.n	8005e12 <__multiply+0xb6>
 8005dee:	9b02      	ldr	r3, [sp, #8]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	dd06      	ble.n	8005e02 <__multiply+0xa6>
 8005df4:	9b03      	ldr	r3, [sp, #12]
 8005df6:	3b04      	subs	r3, #4
 8005df8:	9303      	str	r3, [sp, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d054      	beq.n	8005eac <__multiply+0x150>
 8005e02:	9b01      	ldr	r3, [sp, #4]
 8005e04:	9a02      	ldr	r2, [sp, #8]
 8005e06:	0018      	movs	r0, r3
 8005e08:	611a      	str	r2, [r3, #16]
 8005e0a:	b009      	add	sp, #36	; 0x24
 8005e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e0e:	c304      	stmia	r3!, {r2}
 8005e10:	e7cd      	b.n	8005dae <__multiply+0x52>
 8005e12:	9b00      	ldr	r3, [sp, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	b298      	uxth	r0, r3
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d01c      	beq.n	8005e56 <__multiply+0xfa>
 8005e1c:	4667      	mov	r7, ip
 8005e1e:	2400      	movs	r4, #0
 8005e20:	9e06      	ldr	r6, [sp, #24]
 8005e22:	ce02      	ldmia	r6!, {r1}
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	b28b      	uxth	r3, r1
 8005e28:	4343      	muls	r3, r0
 8005e2a:	0c09      	lsrs	r1, r1, #16
 8005e2c:	4341      	muls	r1, r0
 8005e2e:	b292      	uxth	r2, r2
 8005e30:	189b      	adds	r3, r3, r2
 8005e32:	191b      	adds	r3, r3, r4
 8005e34:	000c      	movs	r4, r1
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	0c11      	lsrs	r1, r2, #16
 8005e3a:	1861      	adds	r1, r4, r1
 8005e3c:	0c1c      	lsrs	r4, r3, #16
 8005e3e:	1909      	adds	r1, r1, r4
 8005e40:	0c0c      	lsrs	r4, r1, #16
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	0409      	lsls	r1, r1, #16
 8005e46:	430b      	orrs	r3, r1
 8005e48:	c708      	stmia	r7!, {r3}
 8005e4a:	9b04      	ldr	r3, [sp, #16]
 8005e4c:	42b3      	cmp	r3, r6
 8005e4e:	d8e8      	bhi.n	8005e22 <__multiply+0xc6>
 8005e50:	4663      	mov	r3, ip
 8005e52:	9a05      	ldr	r2, [sp, #20]
 8005e54:	509c      	str	r4, [r3, r2]
 8005e56:	9b00      	ldr	r3, [sp, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	0c1e      	lsrs	r6, r3, #16
 8005e5c:	d020      	beq.n	8005ea0 <__multiply+0x144>
 8005e5e:	4663      	mov	r3, ip
 8005e60:	002c      	movs	r4, r5
 8005e62:	4660      	mov	r0, ip
 8005e64:	2700      	movs	r7, #0
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3414      	adds	r4, #20
 8005e6a:	6822      	ldr	r2, [r4, #0]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	b291      	uxth	r1, r2
 8005e70:	4371      	muls	r1, r6
 8005e72:	6802      	ldr	r2, [r0, #0]
 8005e74:	0c12      	lsrs	r2, r2, #16
 8005e76:	1889      	adds	r1, r1, r2
 8005e78:	19cf      	adds	r7, r1, r7
 8005e7a:	0439      	lsls	r1, r7, #16
 8005e7c:	430b      	orrs	r3, r1
 8005e7e:	6003      	str	r3, [r0, #0]
 8005e80:	cc02      	ldmia	r4!, {r1}
 8005e82:	6843      	ldr	r3, [r0, #4]
 8005e84:	0c09      	lsrs	r1, r1, #16
 8005e86:	4371      	muls	r1, r6
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	0c3f      	lsrs	r7, r7, #16
 8005e8c:	18cb      	adds	r3, r1, r3
 8005e8e:	9a04      	ldr	r2, [sp, #16]
 8005e90:	19db      	adds	r3, r3, r7
 8005e92:	0c1f      	lsrs	r7, r3, #16
 8005e94:	3004      	adds	r0, #4
 8005e96:	42a2      	cmp	r2, r4
 8005e98:	d8e7      	bhi.n	8005e6a <__multiply+0x10e>
 8005e9a:	4662      	mov	r2, ip
 8005e9c:	9905      	ldr	r1, [sp, #20]
 8005e9e:	5053      	str	r3, [r2, r1]
 8005ea0:	9b00      	ldr	r3, [sp, #0]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	2304      	movs	r3, #4
 8005ea8:	449c      	add	ip, r3
 8005eaa:	e79c      	b.n	8005de6 <__multiply+0x8a>
 8005eac:	9b02      	ldr	r3, [sp, #8]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	9302      	str	r3, [sp, #8]
 8005eb2:	e79c      	b.n	8005dee <__multiply+0x92>
 8005eb4:	08007043 	.word	0x08007043
 8005eb8:	08007054 	.word	0x08007054

08005ebc <__pow5mult>:
 8005ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	0015      	movs	r5, r2
 8005ec2:	0007      	movs	r7, r0
 8005ec4:	000e      	movs	r6, r1
 8005ec6:	401a      	ands	r2, r3
 8005ec8:	421d      	tst	r5, r3
 8005eca:	d008      	beq.n	8005ede <__pow5mult+0x22>
 8005ecc:	4925      	ldr	r1, [pc, #148]	; (8005f64 <__pow5mult+0xa8>)
 8005ece:	3a01      	subs	r2, #1
 8005ed0:	0092      	lsls	r2, r2, #2
 8005ed2:	5852      	ldr	r2, [r2, r1]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	0031      	movs	r1, r6
 8005ed8:	f7ff fe9e 	bl	8005c18 <__multadd>
 8005edc:	0006      	movs	r6, r0
 8005ede:	10ad      	asrs	r5, r5, #2
 8005ee0:	d03d      	beq.n	8005f5e <__pow5mult+0xa2>
 8005ee2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005ee4:	2c00      	cmp	r4, #0
 8005ee6:	d10f      	bne.n	8005f08 <__pow5mult+0x4c>
 8005ee8:	2010      	movs	r0, #16
 8005eea:	f7fe fa13 	bl	8004314 <malloc>
 8005eee:	1e02      	subs	r2, r0, #0
 8005ef0:	6278      	str	r0, [r7, #36]	; 0x24
 8005ef2:	d105      	bne.n	8005f00 <__pow5mult+0x44>
 8005ef4:	21d7      	movs	r1, #215	; 0xd7
 8005ef6:	4b1c      	ldr	r3, [pc, #112]	; (8005f68 <__pow5mult+0xac>)
 8005ef8:	481c      	ldr	r0, [pc, #112]	; (8005f6c <__pow5mult+0xb0>)
 8005efa:	0049      	lsls	r1, r1, #1
 8005efc:	f000 f9d0 	bl	80062a0 <__assert_func>
 8005f00:	6044      	str	r4, [r0, #4]
 8005f02:	6084      	str	r4, [r0, #8]
 8005f04:	6004      	str	r4, [r0, #0]
 8005f06:	60c4      	str	r4, [r0, #12]
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	689c      	ldr	r4, [r3, #8]
 8005f0c:	9301      	str	r3, [sp, #4]
 8005f0e:	2c00      	cmp	r4, #0
 8005f10:	d108      	bne.n	8005f24 <__pow5mult+0x68>
 8005f12:	0038      	movs	r0, r7
 8005f14:	4916      	ldr	r1, [pc, #88]	; (8005f70 <__pow5mult+0xb4>)
 8005f16:	f7ff ff0b 	bl	8005d30 <__i2b>
 8005f1a:	9b01      	ldr	r3, [sp, #4]
 8005f1c:	0004      	movs	r4, r0
 8005f1e:	6098      	str	r0, [r3, #8]
 8005f20:	2300      	movs	r3, #0
 8005f22:	6003      	str	r3, [r0, #0]
 8005f24:	2301      	movs	r3, #1
 8005f26:	421d      	tst	r5, r3
 8005f28:	d00a      	beq.n	8005f40 <__pow5mult+0x84>
 8005f2a:	0031      	movs	r1, r6
 8005f2c:	0022      	movs	r2, r4
 8005f2e:	0038      	movs	r0, r7
 8005f30:	f7ff ff14 	bl	8005d5c <__multiply>
 8005f34:	0031      	movs	r1, r6
 8005f36:	9001      	str	r0, [sp, #4]
 8005f38:	0038      	movs	r0, r7
 8005f3a:	f7ff fe49 	bl	8005bd0 <_Bfree>
 8005f3e:	9e01      	ldr	r6, [sp, #4]
 8005f40:	106d      	asrs	r5, r5, #1
 8005f42:	d00c      	beq.n	8005f5e <__pow5mult+0xa2>
 8005f44:	6820      	ldr	r0, [r4, #0]
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d107      	bne.n	8005f5a <__pow5mult+0x9e>
 8005f4a:	0022      	movs	r2, r4
 8005f4c:	0021      	movs	r1, r4
 8005f4e:	0038      	movs	r0, r7
 8005f50:	f7ff ff04 	bl	8005d5c <__multiply>
 8005f54:	2300      	movs	r3, #0
 8005f56:	6020      	str	r0, [r4, #0]
 8005f58:	6003      	str	r3, [r0, #0]
 8005f5a:	0004      	movs	r4, r0
 8005f5c:	e7e2      	b.n	8005f24 <__pow5mult+0x68>
 8005f5e:	0030      	movs	r0, r6
 8005f60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	080071a8 	.word	0x080071a8
 8005f68:	08006fcd 	.word	0x08006fcd
 8005f6c:	08007054 	.word	0x08007054
 8005f70:	00000271 	.word	0x00000271

08005f74 <__lshift>:
 8005f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f76:	000c      	movs	r4, r1
 8005f78:	0017      	movs	r7, r2
 8005f7a:	6923      	ldr	r3, [r4, #16]
 8005f7c:	1155      	asrs	r5, r2, #5
 8005f7e:	b087      	sub	sp, #28
 8005f80:	18eb      	adds	r3, r5, r3
 8005f82:	9302      	str	r3, [sp, #8]
 8005f84:	3301      	adds	r3, #1
 8005f86:	9301      	str	r3, [sp, #4]
 8005f88:	6849      	ldr	r1, [r1, #4]
 8005f8a:	68a3      	ldr	r3, [r4, #8]
 8005f8c:	9004      	str	r0, [sp, #16]
 8005f8e:	9a01      	ldr	r2, [sp, #4]
 8005f90:	4293      	cmp	r3, r2
 8005f92:	db11      	blt.n	8005fb8 <__lshift+0x44>
 8005f94:	9804      	ldr	r0, [sp, #16]
 8005f96:	f7ff fdd7 	bl	8005b48 <_Balloc>
 8005f9a:	0002      	movs	r2, r0
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	3214      	adds	r2, #20
 8005fa0:	0006      	movs	r6, r0
 8005fa2:	0011      	movs	r1, r2
 8005fa4:	9203      	str	r2, [sp, #12]
 8005fa6:	4298      	cmp	r0, r3
 8005fa8:	d10d      	bne.n	8005fc6 <__lshift+0x52>
 8005faa:	21da      	movs	r1, #218	; 0xda
 8005fac:	0002      	movs	r2, r0
 8005fae:	4b27      	ldr	r3, [pc, #156]	; (800604c <__lshift+0xd8>)
 8005fb0:	4827      	ldr	r0, [pc, #156]	; (8006050 <__lshift+0xdc>)
 8005fb2:	31ff      	adds	r1, #255	; 0xff
 8005fb4:	f000 f974 	bl	80062a0 <__assert_func>
 8005fb8:	3101      	adds	r1, #1
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	e7e7      	b.n	8005f8e <__lshift+0x1a>
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	0098      	lsls	r0, r3, #2
 8005fc2:	500a      	str	r2, [r1, r0]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	42ab      	cmp	r3, r5
 8005fc8:	dbf9      	blt.n	8005fbe <__lshift+0x4a>
 8005fca:	43eb      	mvns	r3, r5
 8005fcc:	17db      	asrs	r3, r3, #31
 8005fce:	401d      	ands	r5, r3
 8005fd0:	9b03      	ldr	r3, [sp, #12]
 8005fd2:	00ad      	lsls	r5, r5, #2
 8005fd4:	211f      	movs	r1, #31
 8005fd6:	0038      	movs	r0, r7
 8005fd8:	195d      	adds	r5, r3, r5
 8005fda:	0023      	movs	r3, r4
 8005fdc:	6922      	ldr	r2, [r4, #16]
 8005fde:	3314      	adds	r3, #20
 8005fe0:	0092      	lsls	r2, r2, #2
 8005fe2:	4008      	ands	r0, r1
 8005fe4:	4684      	mov	ip, r0
 8005fe6:	189a      	adds	r2, r3, r2
 8005fe8:	420f      	tst	r7, r1
 8005fea:	d02a      	beq.n	8006042 <__lshift+0xce>
 8005fec:	3101      	adds	r1, #1
 8005fee:	1a09      	subs	r1, r1, r0
 8005ff0:	9105      	str	r1, [sp, #20]
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	9503      	str	r5, [sp, #12]
 8005ff6:	4667      	mov	r7, ip
 8005ff8:	6818      	ldr	r0, [r3, #0]
 8005ffa:	40b8      	lsls	r0, r7
 8005ffc:	4301      	orrs	r1, r0
 8005ffe:	9803      	ldr	r0, [sp, #12]
 8006000:	c002      	stmia	r0!, {r1}
 8006002:	cb02      	ldmia	r3!, {r1}
 8006004:	9003      	str	r0, [sp, #12]
 8006006:	9805      	ldr	r0, [sp, #20]
 8006008:	40c1      	lsrs	r1, r0
 800600a:	429a      	cmp	r2, r3
 800600c:	d8f3      	bhi.n	8005ff6 <__lshift+0x82>
 800600e:	0020      	movs	r0, r4
 8006010:	3015      	adds	r0, #21
 8006012:	2304      	movs	r3, #4
 8006014:	4282      	cmp	r2, r0
 8006016:	d304      	bcc.n	8006022 <__lshift+0xae>
 8006018:	1b13      	subs	r3, r2, r4
 800601a:	3b15      	subs	r3, #21
 800601c:	089b      	lsrs	r3, r3, #2
 800601e:	3301      	adds	r3, #1
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	50e9      	str	r1, [r5, r3]
 8006024:	2900      	cmp	r1, #0
 8006026:	d002      	beq.n	800602e <__lshift+0xba>
 8006028:	9b02      	ldr	r3, [sp, #8]
 800602a:	3302      	adds	r3, #2
 800602c:	9301      	str	r3, [sp, #4]
 800602e:	9b01      	ldr	r3, [sp, #4]
 8006030:	9804      	ldr	r0, [sp, #16]
 8006032:	3b01      	subs	r3, #1
 8006034:	0021      	movs	r1, r4
 8006036:	6133      	str	r3, [r6, #16]
 8006038:	f7ff fdca 	bl	8005bd0 <_Bfree>
 800603c:	0030      	movs	r0, r6
 800603e:	b007      	add	sp, #28
 8006040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006042:	cb02      	ldmia	r3!, {r1}
 8006044:	c502      	stmia	r5!, {r1}
 8006046:	429a      	cmp	r2, r3
 8006048:	d8fb      	bhi.n	8006042 <__lshift+0xce>
 800604a:	e7f0      	b.n	800602e <__lshift+0xba>
 800604c:	08007043 	.word	0x08007043
 8006050:	08007054 	.word	0x08007054

08006054 <__mcmp>:
 8006054:	6902      	ldr	r2, [r0, #16]
 8006056:	690b      	ldr	r3, [r1, #16]
 8006058:	b530      	push	{r4, r5, lr}
 800605a:	0004      	movs	r4, r0
 800605c:	1ad0      	subs	r0, r2, r3
 800605e:	429a      	cmp	r2, r3
 8006060:	d10d      	bne.n	800607e <__mcmp+0x2a>
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	3414      	adds	r4, #20
 8006066:	3114      	adds	r1, #20
 8006068:	18e2      	adds	r2, r4, r3
 800606a:	18c9      	adds	r1, r1, r3
 800606c:	3a04      	subs	r2, #4
 800606e:	3904      	subs	r1, #4
 8006070:	6815      	ldr	r5, [r2, #0]
 8006072:	680b      	ldr	r3, [r1, #0]
 8006074:	429d      	cmp	r5, r3
 8006076:	d003      	beq.n	8006080 <__mcmp+0x2c>
 8006078:	2001      	movs	r0, #1
 800607a:	429d      	cmp	r5, r3
 800607c:	d303      	bcc.n	8006086 <__mcmp+0x32>
 800607e:	bd30      	pop	{r4, r5, pc}
 8006080:	4294      	cmp	r4, r2
 8006082:	d3f3      	bcc.n	800606c <__mcmp+0x18>
 8006084:	e7fb      	b.n	800607e <__mcmp+0x2a>
 8006086:	4240      	negs	r0, r0
 8006088:	e7f9      	b.n	800607e <__mcmp+0x2a>
	...

0800608c <__mdiff>:
 800608c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800608e:	000e      	movs	r6, r1
 8006090:	0007      	movs	r7, r0
 8006092:	0011      	movs	r1, r2
 8006094:	0030      	movs	r0, r6
 8006096:	b087      	sub	sp, #28
 8006098:	0014      	movs	r4, r2
 800609a:	f7ff ffdb 	bl	8006054 <__mcmp>
 800609e:	1e05      	subs	r5, r0, #0
 80060a0:	d110      	bne.n	80060c4 <__mdiff+0x38>
 80060a2:	0001      	movs	r1, r0
 80060a4:	0038      	movs	r0, r7
 80060a6:	f7ff fd4f 	bl	8005b48 <_Balloc>
 80060aa:	1e02      	subs	r2, r0, #0
 80060ac:	d104      	bne.n	80060b8 <__mdiff+0x2c>
 80060ae:	4b40      	ldr	r3, [pc, #256]	; (80061b0 <__mdiff+0x124>)
 80060b0:	4940      	ldr	r1, [pc, #256]	; (80061b4 <__mdiff+0x128>)
 80060b2:	4841      	ldr	r0, [pc, #260]	; (80061b8 <__mdiff+0x12c>)
 80060b4:	f000 f8f4 	bl	80062a0 <__assert_func>
 80060b8:	2301      	movs	r3, #1
 80060ba:	6145      	str	r5, [r0, #20]
 80060bc:	6103      	str	r3, [r0, #16]
 80060be:	0010      	movs	r0, r2
 80060c0:	b007      	add	sp, #28
 80060c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060c4:	2301      	movs	r3, #1
 80060c6:	9301      	str	r3, [sp, #4]
 80060c8:	2800      	cmp	r0, #0
 80060ca:	db04      	blt.n	80060d6 <__mdiff+0x4a>
 80060cc:	0023      	movs	r3, r4
 80060ce:	0034      	movs	r4, r6
 80060d0:	001e      	movs	r6, r3
 80060d2:	2300      	movs	r3, #0
 80060d4:	9301      	str	r3, [sp, #4]
 80060d6:	0038      	movs	r0, r7
 80060d8:	6861      	ldr	r1, [r4, #4]
 80060da:	f7ff fd35 	bl	8005b48 <_Balloc>
 80060de:	1e02      	subs	r2, r0, #0
 80060e0:	d103      	bne.n	80060ea <__mdiff+0x5e>
 80060e2:	2190      	movs	r1, #144	; 0x90
 80060e4:	4b32      	ldr	r3, [pc, #200]	; (80061b0 <__mdiff+0x124>)
 80060e6:	0089      	lsls	r1, r1, #2
 80060e8:	e7e3      	b.n	80060b2 <__mdiff+0x26>
 80060ea:	9b01      	ldr	r3, [sp, #4]
 80060ec:	2700      	movs	r7, #0
 80060ee:	60c3      	str	r3, [r0, #12]
 80060f0:	6920      	ldr	r0, [r4, #16]
 80060f2:	3414      	adds	r4, #20
 80060f4:	9401      	str	r4, [sp, #4]
 80060f6:	9b01      	ldr	r3, [sp, #4]
 80060f8:	0084      	lsls	r4, r0, #2
 80060fa:	191b      	adds	r3, r3, r4
 80060fc:	0034      	movs	r4, r6
 80060fe:	9302      	str	r3, [sp, #8]
 8006100:	6933      	ldr	r3, [r6, #16]
 8006102:	3414      	adds	r4, #20
 8006104:	0099      	lsls	r1, r3, #2
 8006106:	1863      	adds	r3, r4, r1
 8006108:	9303      	str	r3, [sp, #12]
 800610a:	0013      	movs	r3, r2
 800610c:	3314      	adds	r3, #20
 800610e:	469c      	mov	ip, r3
 8006110:	9305      	str	r3, [sp, #20]
 8006112:	9b01      	ldr	r3, [sp, #4]
 8006114:	9304      	str	r3, [sp, #16]
 8006116:	9b04      	ldr	r3, [sp, #16]
 8006118:	cc02      	ldmia	r4!, {r1}
 800611a:	cb20      	ldmia	r3!, {r5}
 800611c:	9304      	str	r3, [sp, #16]
 800611e:	b2ab      	uxth	r3, r5
 8006120:	19df      	adds	r7, r3, r7
 8006122:	b28b      	uxth	r3, r1
 8006124:	1afb      	subs	r3, r7, r3
 8006126:	0c2d      	lsrs	r5, r5, #16
 8006128:	0c09      	lsrs	r1, r1, #16
 800612a:	1a69      	subs	r1, r5, r1
 800612c:	141d      	asrs	r5, r3, #16
 800612e:	1949      	adds	r1, r1, r5
 8006130:	140f      	asrs	r7, r1, #16
 8006132:	b29b      	uxth	r3, r3
 8006134:	0409      	lsls	r1, r1, #16
 8006136:	430b      	orrs	r3, r1
 8006138:	4661      	mov	r1, ip
 800613a:	c108      	stmia	r1!, {r3}
 800613c:	9b03      	ldr	r3, [sp, #12]
 800613e:	468c      	mov	ip, r1
 8006140:	42a3      	cmp	r3, r4
 8006142:	d8e8      	bhi.n	8006116 <__mdiff+0x8a>
 8006144:	0031      	movs	r1, r6
 8006146:	9c03      	ldr	r4, [sp, #12]
 8006148:	3115      	adds	r1, #21
 800614a:	2304      	movs	r3, #4
 800614c:	428c      	cmp	r4, r1
 800614e:	d304      	bcc.n	800615a <__mdiff+0xce>
 8006150:	1ba3      	subs	r3, r4, r6
 8006152:	3b15      	subs	r3, #21
 8006154:	089b      	lsrs	r3, r3, #2
 8006156:	3301      	adds	r3, #1
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	9901      	ldr	r1, [sp, #4]
 800615c:	18cc      	adds	r4, r1, r3
 800615e:	9905      	ldr	r1, [sp, #20]
 8006160:	0026      	movs	r6, r4
 8006162:	18cb      	adds	r3, r1, r3
 8006164:	469c      	mov	ip, r3
 8006166:	9902      	ldr	r1, [sp, #8]
 8006168:	428e      	cmp	r6, r1
 800616a:	d310      	bcc.n	800618e <__mdiff+0x102>
 800616c:	9e02      	ldr	r6, [sp, #8]
 800616e:	1ee5      	subs	r5, r4, #3
 8006170:	2100      	movs	r1, #0
 8006172:	42ae      	cmp	r6, r5
 8006174:	d304      	bcc.n	8006180 <__mdiff+0xf4>
 8006176:	0031      	movs	r1, r6
 8006178:	3103      	adds	r1, #3
 800617a:	1b09      	subs	r1, r1, r4
 800617c:	0889      	lsrs	r1, r1, #2
 800617e:	0089      	lsls	r1, r1, #2
 8006180:	185b      	adds	r3, r3, r1
 8006182:	3b04      	subs	r3, #4
 8006184:	6819      	ldr	r1, [r3, #0]
 8006186:	2900      	cmp	r1, #0
 8006188:	d00f      	beq.n	80061aa <__mdiff+0x11e>
 800618a:	6110      	str	r0, [r2, #16]
 800618c:	e797      	b.n	80060be <__mdiff+0x32>
 800618e:	ce02      	ldmia	r6!, {r1}
 8006190:	b28d      	uxth	r5, r1
 8006192:	19ed      	adds	r5, r5, r7
 8006194:	0c0f      	lsrs	r7, r1, #16
 8006196:	1429      	asrs	r1, r5, #16
 8006198:	1879      	adds	r1, r7, r1
 800619a:	140f      	asrs	r7, r1, #16
 800619c:	b2ad      	uxth	r5, r5
 800619e:	0409      	lsls	r1, r1, #16
 80061a0:	430d      	orrs	r5, r1
 80061a2:	4661      	mov	r1, ip
 80061a4:	c120      	stmia	r1!, {r5}
 80061a6:	468c      	mov	ip, r1
 80061a8:	e7dd      	b.n	8006166 <__mdiff+0xda>
 80061aa:	3801      	subs	r0, #1
 80061ac:	e7e9      	b.n	8006182 <__mdiff+0xf6>
 80061ae:	46c0      	nop			; (mov r8, r8)
 80061b0:	08007043 	.word	0x08007043
 80061b4:	00000232 	.word	0x00000232
 80061b8:	08007054 	.word	0x08007054

080061bc <__d2b>:
 80061bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061be:	2101      	movs	r1, #1
 80061c0:	0014      	movs	r4, r2
 80061c2:	001e      	movs	r6, r3
 80061c4:	9f08      	ldr	r7, [sp, #32]
 80061c6:	f7ff fcbf 	bl	8005b48 <_Balloc>
 80061ca:	1e05      	subs	r5, r0, #0
 80061cc:	d105      	bne.n	80061da <__d2b+0x1e>
 80061ce:	0002      	movs	r2, r0
 80061d0:	4b26      	ldr	r3, [pc, #152]	; (800626c <__d2b+0xb0>)
 80061d2:	4927      	ldr	r1, [pc, #156]	; (8006270 <__d2b+0xb4>)
 80061d4:	4827      	ldr	r0, [pc, #156]	; (8006274 <__d2b+0xb8>)
 80061d6:	f000 f863 	bl	80062a0 <__assert_func>
 80061da:	0333      	lsls	r3, r6, #12
 80061dc:	0076      	lsls	r6, r6, #1
 80061de:	0b1b      	lsrs	r3, r3, #12
 80061e0:	0d76      	lsrs	r6, r6, #21
 80061e2:	d124      	bne.n	800622e <__d2b+0x72>
 80061e4:	9301      	str	r3, [sp, #4]
 80061e6:	2c00      	cmp	r4, #0
 80061e8:	d027      	beq.n	800623a <__d2b+0x7e>
 80061ea:	4668      	mov	r0, sp
 80061ec:	9400      	str	r4, [sp, #0]
 80061ee:	f7ff fd71 	bl	8005cd4 <__lo0bits>
 80061f2:	9c00      	ldr	r4, [sp, #0]
 80061f4:	2800      	cmp	r0, #0
 80061f6:	d01e      	beq.n	8006236 <__d2b+0x7a>
 80061f8:	9b01      	ldr	r3, [sp, #4]
 80061fa:	2120      	movs	r1, #32
 80061fc:	001a      	movs	r2, r3
 80061fe:	1a09      	subs	r1, r1, r0
 8006200:	408a      	lsls	r2, r1
 8006202:	40c3      	lsrs	r3, r0
 8006204:	4322      	orrs	r2, r4
 8006206:	616a      	str	r2, [r5, #20]
 8006208:	9301      	str	r3, [sp, #4]
 800620a:	9c01      	ldr	r4, [sp, #4]
 800620c:	61ac      	str	r4, [r5, #24]
 800620e:	1e63      	subs	r3, r4, #1
 8006210:	419c      	sbcs	r4, r3
 8006212:	3401      	adds	r4, #1
 8006214:	612c      	str	r4, [r5, #16]
 8006216:	2e00      	cmp	r6, #0
 8006218:	d018      	beq.n	800624c <__d2b+0x90>
 800621a:	4b17      	ldr	r3, [pc, #92]	; (8006278 <__d2b+0xbc>)
 800621c:	18f6      	adds	r6, r6, r3
 800621e:	2335      	movs	r3, #53	; 0x35
 8006220:	1836      	adds	r6, r6, r0
 8006222:	1a18      	subs	r0, r3, r0
 8006224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006226:	603e      	str	r6, [r7, #0]
 8006228:	6018      	str	r0, [r3, #0]
 800622a:	0028      	movs	r0, r5
 800622c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800622e:	2280      	movs	r2, #128	; 0x80
 8006230:	0352      	lsls	r2, r2, #13
 8006232:	4313      	orrs	r3, r2
 8006234:	e7d6      	b.n	80061e4 <__d2b+0x28>
 8006236:	616c      	str	r4, [r5, #20]
 8006238:	e7e7      	b.n	800620a <__d2b+0x4e>
 800623a:	a801      	add	r0, sp, #4
 800623c:	f7ff fd4a 	bl	8005cd4 <__lo0bits>
 8006240:	2401      	movs	r4, #1
 8006242:	9b01      	ldr	r3, [sp, #4]
 8006244:	612c      	str	r4, [r5, #16]
 8006246:	616b      	str	r3, [r5, #20]
 8006248:	3020      	adds	r0, #32
 800624a:	e7e4      	b.n	8006216 <__d2b+0x5a>
 800624c:	4b0b      	ldr	r3, [pc, #44]	; (800627c <__d2b+0xc0>)
 800624e:	18c0      	adds	r0, r0, r3
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <__d2b+0xc4>)
 8006252:	6038      	str	r0, [r7, #0]
 8006254:	18e3      	adds	r3, r4, r3
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	18eb      	adds	r3, r5, r3
 800625a:	6958      	ldr	r0, [r3, #20]
 800625c:	f7ff fd20 	bl	8005ca0 <__hi0bits>
 8006260:	0164      	lsls	r4, r4, #5
 8006262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006264:	1a24      	subs	r4, r4, r0
 8006266:	601c      	str	r4, [r3, #0]
 8006268:	e7df      	b.n	800622a <__d2b+0x6e>
 800626a:	46c0      	nop			; (mov r8, r8)
 800626c:	08007043 	.word	0x08007043
 8006270:	0000030a 	.word	0x0000030a
 8006274:	08007054 	.word	0x08007054
 8006278:	fffffbcd 	.word	0xfffffbcd
 800627c:	fffffbce 	.word	0xfffffbce
 8006280:	3fffffff 	.word	0x3fffffff

08006284 <_calloc_r>:
 8006284:	434a      	muls	r2, r1
 8006286:	b570      	push	{r4, r5, r6, lr}
 8006288:	0011      	movs	r1, r2
 800628a:	0015      	movs	r5, r2
 800628c:	f7fe f8a8 	bl	80043e0 <_malloc_r>
 8006290:	1e04      	subs	r4, r0, #0
 8006292:	d003      	beq.n	800629c <_calloc_r+0x18>
 8006294:	002a      	movs	r2, r5
 8006296:	2100      	movs	r1, #0
 8006298:	f7fe f84f 	bl	800433a <memset>
 800629c:	0020      	movs	r0, r4
 800629e:	bd70      	pop	{r4, r5, r6, pc}

080062a0 <__assert_func>:
 80062a0:	b530      	push	{r4, r5, lr}
 80062a2:	0014      	movs	r4, r2
 80062a4:	001a      	movs	r2, r3
 80062a6:	4b09      	ldr	r3, [pc, #36]	; (80062cc <__assert_func+0x2c>)
 80062a8:	0005      	movs	r5, r0
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	b085      	sub	sp, #20
 80062ae:	68d8      	ldr	r0, [r3, #12]
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <__assert_func+0x30>)
 80062b2:	2c00      	cmp	r4, #0
 80062b4:	d101      	bne.n	80062ba <__assert_func+0x1a>
 80062b6:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <__assert_func+0x34>)
 80062b8:	001c      	movs	r4, r3
 80062ba:	9301      	str	r3, [sp, #4]
 80062bc:	9100      	str	r1, [sp, #0]
 80062be:	002b      	movs	r3, r5
 80062c0:	4905      	ldr	r1, [pc, #20]	; (80062d8 <__assert_func+0x38>)
 80062c2:	9402      	str	r4, [sp, #8]
 80062c4:	f000 f80a 	bl	80062dc <fiprintf>
 80062c8:	f000 fa6a 	bl	80067a0 <abort>
 80062cc:	2000000c 	.word	0x2000000c
 80062d0:	080071b4 	.word	0x080071b4
 80062d4:	080071ef 	.word	0x080071ef
 80062d8:	080071c1 	.word	0x080071c1

080062dc <fiprintf>:
 80062dc:	b40e      	push	{r1, r2, r3}
 80062de:	b503      	push	{r0, r1, lr}
 80062e0:	0001      	movs	r1, r0
 80062e2:	ab03      	add	r3, sp, #12
 80062e4:	4804      	ldr	r0, [pc, #16]	; (80062f8 <fiprintf+0x1c>)
 80062e6:	cb04      	ldmia	r3!, {r2}
 80062e8:	6800      	ldr	r0, [r0, #0]
 80062ea:	9301      	str	r3, [sp, #4]
 80062ec:	f000 f842 	bl	8006374 <_vfiprintf_r>
 80062f0:	b002      	add	sp, #8
 80062f2:	bc08      	pop	{r3}
 80062f4:	b003      	add	sp, #12
 80062f6:	4718      	bx	r3
 80062f8:	2000000c 	.word	0x2000000c

080062fc <__retarget_lock_init_recursive>:
 80062fc:	4770      	bx	lr

080062fe <__retarget_lock_acquire_recursive>:
 80062fe:	4770      	bx	lr

08006300 <__retarget_lock_release_recursive>:
 8006300:	4770      	bx	lr

08006302 <__ascii_mbtowc>:
 8006302:	b082      	sub	sp, #8
 8006304:	2900      	cmp	r1, #0
 8006306:	d100      	bne.n	800630a <__ascii_mbtowc+0x8>
 8006308:	a901      	add	r1, sp, #4
 800630a:	1e10      	subs	r0, r2, #0
 800630c:	d006      	beq.n	800631c <__ascii_mbtowc+0x1a>
 800630e:	2b00      	cmp	r3, #0
 8006310:	d006      	beq.n	8006320 <__ascii_mbtowc+0x1e>
 8006312:	7813      	ldrb	r3, [r2, #0]
 8006314:	600b      	str	r3, [r1, #0]
 8006316:	7810      	ldrb	r0, [r2, #0]
 8006318:	1e43      	subs	r3, r0, #1
 800631a:	4198      	sbcs	r0, r3
 800631c:	b002      	add	sp, #8
 800631e:	4770      	bx	lr
 8006320:	2002      	movs	r0, #2
 8006322:	4240      	negs	r0, r0
 8006324:	e7fa      	b.n	800631c <__ascii_mbtowc+0x1a>

08006326 <__sfputc_r>:
 8006326:	6893      	ldr	r3, [r2, #8]
 8006328:	b510      	push	{r4, lr}
 800632a:	3b01      	subs	r3, #1
 800632c:	6093      	str	r3, [r2, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	da04      	bge.n	800633c <__sfputc_r+0x16>
 8006332:	6994      	ldr	r4, [r2, #24]
 8006334:	42a3      	cmp	r3, r4
 8006336:	db07      	blt.n	8006348 <__sfputc_r+0x22>
 8006338:	290a      	cmp	r1, #10
 800633a:	d005      	beq.n	8006348 <__sfputc_r+0x22>
 800633c:	6813      	ldr	r3, [r2, #0]
 800633e:	1c58      	adds	r0, r3, #1
 8006340:	6010      	str	r0, [r2, #0]
 8006342:	7019      	strb	r1, [r3, #0]
 8006344:	0008      	movs	r0, r1
 8006346:	bd10      	pop	{r4, pc}
 8006348:	f000 f94e 	bl	80065e8 <__swbuf_r>
 800634c:	0001      	movs	r1, r0
 800634e:	e7f9      	b.n	8006344 <__sfputc_r+0x1e>

08006350 <__sfputs_r>:
 8006350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006352:	0006      	movs	r6, r0
 8006354:	000f      	movs	r7, r1
 8006356:	0014      	movs	r4, r2
 8006358:	18d5      	adds	r5, r2, r3
 800635a:	42ac      	cmp	r4, r5
 800635c:	d101      	bne.n	8006362 <__sfputs_r+0x12>
 800635e:	2000      	movs	r0, #0
 8006360:	e007      	b.n	8006372 <__sfputs_r+0x22>
 8006362:	7821      	ldrb	r1, [r4, #0]
 8006364:	003a      	movs	r2, r7
 8006366:	0030      	movs	r0, r6
 8006368:	f7ff ffdd 	bl	8006326 <__sfputc_r>
 800636c:	3401      	adds	r4, #1
 800636e:	1c43      	adds	r3, r0, #1
 8006370:	d1f3      	bne.n	800635a <__sfputs_r+0xa>
 8006372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006374 <_vfiprintf_r>:
 8006374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006376:	b0a1      	sub	sp, #132	; 0x84
 8006378:	0006      	movs	r6, r0
 800637a:	000c      	movs	r4, r1
 800637c:	001f      	movs	r7, r3
 800637e:	9203      	str	r2, [sp, #12]
 8006380:	2800      	cmp	r0, #0
 8006382:	d004      	beq.n	800638e <_vfiprintf_r+0x1a>
 8006384:	6983      	ldr	r3, [r0, #24]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <_vfiprintf_r+0x1a>
 800638a:	f000 fb3f 	bl	8006a0c <__sinit>
 800638e:	4b8e      	ldr	r3, [pc, #568]	; (80065c8 <_vfiprintf_r+0x254>)
 8006390:	429c      	cmp	r4, r3
 8006392:	d11c      	bne.n	80063ce <_vfiprintf_r+0x5a>
 8006394:	6874      	ldr	r4, [r6, #4]
 8006396:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006398:	07db      	lsls	r3, r3, #31
 800639a:	d405      	bmi.n	80063a8 <_vfiprintf_r+0x34>
 800639c:	89a3      	ldrh	r3, [r4, #12]
 800639e:	059b      	lsls	r3, r3, #22
 80063a0:	d402      	bmi.n	80063a8 <_vfiprintf_r+0x34>
 80063a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063a4:	f7ff ffab 	bl	80062fe <__retarget_lock_acquire_recursive>
 80063a8:	89a3      	ldrh	r3, [r4, #12]
 80063aa:	071b      	lsls	r3, r3, #28
 80063ac:	d502      	bpl.n	80063b4 <_vfiprintf_r+0x40>
 80063ae:	6923      	ldr	r3, [r4, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d11d      	bne.n	80063f0 <_vfiprintf_r+0x7c>
 80063b4:	0021      	movs	r1, r4
 80063b6:	0030      	movs	r0, r6
 80063b8:	f000 f97a 	bl	80066b0 <__swsetup_r>
 80063bc:	2800      	cmp	r0, #0
 80063be:	d017      	beq.n	80063f0 <_vfiprintf_r+0x7c>
 80063c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063c2:	07db      	lsls	r3, r3, #31
 80063c4:	d50d      	bpl.n	80063e2 <_vfiprintf_r+0x6e>
 80063c6:	2001      	movs	r0, #1
 80063c8:	4240      	negs	r0, r0
 80063ca:	b021      	add	sp, #132	; 0x84
 80063cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ce:	4b7f      	ldr	r3, [pc, #508]	; (80065cc <_vfiprintf_r+0x258>)
 80063d0:	429c      	cmp	r4, r3
 80063d2:	d101      	bne.n	80063d8 <_vfiprintf_r+0x64>
 80063d4:	68b4      	ldr	r4, [r6, #8]
 80063d6:	e7de      	b.n	8006396 <_vfiprintf_r+0x22>
 80063d8:	4b7d      	ldr	r3, [pc, #500]	; (80065d0 <_vfiprintf_r+0x25c>)
 80063da:	429c      	cmp	r4, r3
 80063dc:	d1db      	bne.n	8006396 <_vfiprintf_r+0x22>
 80063de:	68f4      	ldr	r4, [r6, #12]
 80063e0:	e7d9      	b.n	8006396 <_vfiprintf_r+0x22>
 80063e2:	89a3      	ldrh	r3, [r4, #12]
 80063e4:	059b      	lsls	r3, r3, #22
 80063e6:	d4ee      	bmi.n	80063c6 <_vfiprintf_r+0x52>
 80063e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063ea:	f7ff ff89 	bl	8006300 <__retarget_lock_release_recursive>
 80063ee:	e7ea      	b.n	80063c6 <_vfiprintf_r+0x52>
 80063f0:	2300      	movs	r3, #0
 80063f2:	ad08      	add	r5, sp, #32
 80063f4:	616b      	str	r3, [r5, #20]
 80063f6:	3320      	adds	r3, #32
 80063f8:	766b      	strb	r3, [r5, #25]
 80063fa:	3310      	adds	r3, #16
 80063fc:	76ab      	strb	r3, [r5, #26]
 80063fe:	9707      	str	r7, [sp, #28]
 8006400:	9f03      	ldr	r7, [sp, #12]
 8006402:	783b      	ldrb	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <_vfiprintf_r+0x98>
 8006408:	2b25      	cmp	r3, #37	; 0x25
 800640a:	d14e      	bne.n	80064aa <_vfiprintf_r+0x136>
 800640c:	9b03      	ldr	r3, [sp, #12]
 800640e:	1afb      	subs	r3, r7, r3
 8006410:	9305      	str	r3, [sp, #20]
 8006412:	9b03      	ldr	r3, [sp, #12]
 8006414:	429f      	cmp	r7, r3
 8006416:	d00d      	beq.n	8006434 <_vfiprintf_r+0xc0>
 8006418:	9b05      	ldr	r3, [sp, #20]
 800641a:	0021      	movs	r1, r4
 800641c:	0030      	movs	r0, r6
 800641e:	9a03      	ldr	r2, [sp, #12]
 8006420:	f7ff ff96 	bl	8006350 <__sfputs_r>
 8006424:	1c43      	adds	r3, r0, #1
 8006426:	d100      	bne.n	800642a <_vfiprintf_r+0xb6>
 8006428:	e0b5      	b.n	8006596 <_vfiprintf_r+0x222>
 800642a:	696a      	ldr	r2, [r5, #20]
 800642c:	9b05      	ldr	r3, [sp, #20]
 800642e:	4694      	mov	ip, r2
 8006430:	4463      	add	r3, ip
 8006432:	616b      	str	r3, [r5, #20]
 8006434:	783b      	ldrb	r3, [r7, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d100      	bne.n	800643c <_vfiprintf_r+0xc8>
 800643a:	e0ac      	b.n	8006596 <_vfiprintf_r+0x222>
 800643c:	2201      	movs	r2, #1
 800643e:	1c7b      	adds	r3, r7, #1
 8006440:	9303      	str	r3, [sp, #12]
 8006442:	2300      	movs	r3, #0
 8006444:	4252      	negs	r2, r2
 8006446:	606a      	str	r2, [r5, #4]
 8006448:	a904      	add	r1, sp, #16
 800644a:	3254      	adds	r2, #84	; 0x54
 800644c:	1852      	adds	r2, r2, r1
 800644e:	602b      	str	r3, [r5, #0]
 8006450:	60eb      	str	r3, [r5, #12]
 8006452:	60ab      	str	r3, [r5, #8]
 8006454:	7013      	strb	r3, [r2, #0]
 8006456:	65ab      	str	r3, [r5, #88]	; 0x58
 8006458:	9b03      	ldr	r3, [sp, #12]
 800645a:	2205      	movs	r2, #5
 800645c:	7819      	ldrb	r1, [r3, #0]
 800645e:	485d      	ldr	r0, [pc, #372]	; (80065d4 <_vfiprintf_r+0x260>)
 8006460:	f7ff fb56 	bl	8005b10 <memchr>
 8006464:	9b03      	ldr	r3, [sp, #12]
 8006466:	1c5f      	adds	r7, r3, #1
 8006468:	2800      	cmp	r0, #0
 800646a:	d120      	bne.n	80064ae <_vfiprintf_r+0x13a>
 800646c:	682a      	ldr	r2, [r5, #0]
 800646e:	06d3      	lsls	r3, r2, #27
 8006470:	d504      	bpl.n	800647c <_vfiprintf_r+0x108>
 8006472:	2353      	movs	r3, #83	; 0x53
 8006474:	a904      	add	r1, sp, #16
 8006476:	185b      	adds	r3, r3, r1
 8006478:	2120      	movs	r1, #32
 800647a:	7019      	strb	r1, [r3, #0]
 800647c:	0713      	lsls	r3, r2, #28
 800647e:	d504      	bpl.n	800648a <_vfiprintf_r+0x116>
 8006480:	2353      	movs	r3, #83	; 0x53
 8006482:	a904      	add	r1, sp, #16
 8006484:	185b      	adds	r3, r3, r1
 8006486:	212b      	movs	r1, #43	; 0x2b
 8006488:	7019      	strb	r1, [r3, #0]
 800648a:	9b03      	ldr	r3, [sp, #12]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	2b2a      	cmp	r3, #42	; 0x2a
 8006490:	d016      	beq.n	80064c0 <_vfiprintf_r+0x14c>
 8006492:	2100      	movs	r1, #0
 8006494:	68eb      	ldr	r3, [r5, #12]
 8006496:	9f03      	ldr	r7, [sp, #12]
 8006498:	783a      	ldrb	r2, [r7, #0]
 800649a:	1c78      	adds	r0, r7, #1
 800649c:	3a30      	subs	r2, #48	; 0x30
 800649e:	4684      	mov	ip, r0
 80064a0:	2a09      	cmp	r2, #9
 80064a2:	d94f      	bls.n	8006544 <_vfiprintf_r+0x1d0>
 80064a4:	2900      	cmp	r1, #0
 80064a6:	d111      	bne.n	80064cc <_vfiprintf_r+0x158>
 80064a8:	e017      	b.n	80064da <_vfiprintf_r+0x166>
 80064aa:	3701      	adds	r7, #1
 80064ac:	e7a9      	b.n	8006402 <_vfiprintf_r+0x8e>
 80064ae:	4b49      	ldr	r3, [pc, #292]	; (80065d4 <_vfiprintf_r+0x260>)
 80064b0:	682a      	ldr	r2, [r5, #0]
 80064b2:	1ac0      	subs	r0, r0, r3
 80064b4:	2301      	movs	r3, #1
 80064b6:	4083      	lsls	r3, r0
 80064b8:	4313      	orrs	r3, r2
 80064ba:	602b      	str	r3, [r5, #0]
 80064bc:	9703      	str	r7, [sp, #12]
 80064be:	e7cb      	b.n	8006458 <_vfiprintf_r+0xe4>
 80064c0:	9b07      	ldr	r3, [sp, #28]
 80064c2:	1d19      	adds	r1, r3, #4
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	9107      	str	r1, [sp, #28]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	db01      	blt.n	80064d0 <_vfiprintf_r+0x15c>
 80064cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80064ce:	e004      	b.n	80064da <_vfiprintf_r+0x166>
 80064d0:	425b      	negs	r3, r3
 80064d2:	60eb      	str	r3, [r5, #12]
 80064d4:	2302      	movs	r3, #2
 80064d6:	4313      	orrs	r3, r2
 80064d8:	602b      	str	r3, [r5, #0]
 80064da:	783b      	ldrb	r3, [r7, #0]
 80064dc:	2b2e      	cmp	r3, #46	; 0x2e
 80064de:	d10a      	bne.n	80064f6 <_vfiprintf_r+0x182>
 80064e0:	787b      	ldrb	r3, [r7, #1]
 80064e2:	2b2a      	cmp	r3, #42	; 0x2a
 80064e4:	d137      	bne.n	8006556 <_vfiprintf_r+0x1e2>
 80064e6:	9b07      	ldr	r3, [sp, #28]
 80064e8:	3702      	adds	r7, #2
 80064ea:	1d1a      	adds	r2, r3, #4
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	9207      	str	r2, [sp, #28]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	db2d      	blt.n	8006550 <_vfiprintf_r+0x1dc>
 80064f4:	9309      	str	r3, [sp, #36]	; 0x24
 80064f6:	2203      	movs	r2, #3
 80064f8:	7839      	ldrb	r1, [r7, #0]
 80064fa:	4837      	ldr	r0, [pc, #220]	; (80065d8 <_vfiprintf_r+0x264>)
 80064fc:	f7ff fb08 	bl	8005b10 <memchr>
 8006500:	2800      	cmp	r0, #0
 8006502:	d007      	beq.n	8006514 <_vfiprintf_r+0x1a0>
 8006504:	4b34      	ldr	r3, [pc, #208]	; (80065d8 <_vfiprintf_r+0x264>)
 8006506:	682a      	ldr	r2, [r5, #0]
 8006508:	1ac0      	subs	r0, r0, r3
 800650a:	2340      	movs	r3, #64	; 0x40
 800650c:	4083      	lsls	r3, r0
 800650e:	4313      	orrs	r3, r2
 8006510:	3701      	adds	r7, #1
 8006512:	602b      	str	r3, [r5, #0]
 8006514:	7839      	ldrb	r1, [r7, #0]
 8006516:	1c7b      	adds	r3, r7, #1
 8006518:	2206      	movs	r2, #6
 800651a:	4830      	ldr	r0, [pc, #192]	; (80065dc <_vfiprintf_r+0x268>)
 800651c:	9303      	str	r3, [sp, #12]
 800651e:	7629      	strb	r1, [r5, #24]
 8006520:	f7ff faf6 	bl	8005b10 <memchr>
 8006524:	2800      	cmp	r0, #0
 8006526:	d045      	beq.n	80065b4 <_vfiprintf_r+0x240>
 8006528:	4b2d      	ldr	r3, [pc, #180]	; (80065e0 <_vfiprintf_r+0x26c>)
 800652a:	2b00      	cmp	r3, #0
 800652c:	d127      	bne.n	800657e <_vfiprintf_r+0x20a>
 800652e:	2207      	movs	r2, #7
 8006530:	9b07      	ldr	r3, [sp, #28]
 8006532:	3307      	adds	r3, #7
 8006534:	4393      	bics	r3, r2
 8006536:	3308      	adds	r3, #8
 8006538:	9307      	str	r3, [sp, #28]
 800653a:	696b      	ldr	r3, [r5, #20]
 800653c:	9a04      	ldr	r2, [sp, #16]
 800653e:	189b      	adds	r3, r3, r2
 8006540:	616b      	str	r3, [r5, #20]
 8006542:	e75d      	b.n	8006400 <_vfiprintf_r+0x8c>
 8006544:	210a      	movs	r1, #10
 8006546:	434b      	muls	r3, r1
 8006548:	4667      	mov	r7, ip
 800654a:	189b      	adds	r3, r3, r2
 800654c:	3909      	subs	r1, #9
 800654e:	e7a3      	b.n	8006498 <_vfiprintf_r+0x124>
 8006550:	2301      	movs	r3, #1
 8006552:	425b      	negs	r3, r3
 8006554:	e7ce      	b.n	80064f4 <_vfiprintf_r+0x180>
 8006556:	2300      	movs	r3, #0
 8006558:	001a      	movs	r2, r3
 800655a:	3701      	adds	r7, #1
 800655c:	606b      	str	r3, [r5, #4]
 800655e:	7839      	ldrb	r1, [r7, #0]
 8006560:	1c78      	adds	r0, r7, #1
 8006562:	3930      	subs	r1, #48	; 0x30
 8006564:	4684      	mov	ip, r0
 8006566:	2909      	cmp	r1, #9
 8006568:	d903      	bls.n	8006572 <_vfiprintf_r+0x1fe>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d0c3      	beq.n	80064f6 <_vfiprintf_r+0x182>
 800656e:	9209      	str	r2, [sp, #36]	; 0x24
 8006570:	e7c1      	b.n	80064f6 <_vfiprintf_r+0x182>
 8006572:	230a      	movs	r3, #10
 8006574:	435a      	muls	r2, r3
 8006576:	4667      	mov	r7, ip
 8006578:	1852      	adds	r2, r2, r1
 800657a:	3b09      	subs	r3, #9
 800657c:	e7ef      	b.n	800655e <_vfiprintf_r+0x1ea>
 800657e:	ab07      	add	r3, sp, #28
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	0022      	movs	r2, r4
 8006584:	0029      	movs	r1, r5
 8006586:	0030      	movs	r0, r6
 8006588:	4b16      	ldr	r3, [pc, #88]	; (80065e4 <_vfiprintf_r+0x270>)
 800658a:	f7fe f831 	bl	80045f0 <_printf_float>
 800658e:	9004      	str	r0, [sp, #16]
 8006590:	9b04      	ldr	r3, [sp, #16]
 8006592:	3301      	adds	r3, #1
 8006594:	d1d1      	bne.n	800653a <_vfiprintf_r+0x1c6>
 8006596:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006598:	07db      	lsls	r3, r3, #31
 800659a:	d405      	bmi.n	80065a8 <_vfiprintf_r+0x234>
 800659c:	89a3      	ldrh	r3, [r4, #12]
 800659e:	059b      	lsls	r3, r3, #22
 80065a0:	d402      	bmi.n	80065a8 <_vfiprintf_r+0x234>
 80065a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065a4:	f7ff feac 	bl	8006300 <__retarget_lock_release_recursive>
 80065a8:	89a3      	ldrh	r3, [r4, #12]
 80065aa:	065b      	lsls	r3, r3, #25
 80065ac:	d500      	bpl.n	80065b0 <_vfiprintf_r+0x23c>
 80065ae:	e70a      	b.n	80063c6 <_vfiprintf_r+0x52>
 80065b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80065b2:	e70a      	b.n	80063ca <_vfiprintf_r+0x56>
 80065b4:	ab07      	add	r3, sp, #28
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	0022      	movs	r2, r4
 80065ba:	0029      	movs	r1, r5
 80065bc:	0030      	movs	r0, r6
 80065be:	4b09      	ldr	r3, [pc, #36]	; (80065e4 <_vfiprintf_r+0x270>)
 80065c0:	f7fe fad4 	bl	8004b6c <_printf_i>
 80065c4:	e7e3      	b.n	800658e <_vfiprintf_r+0x21a>
 80065c6:	46c0      	nop			; (mov r8, r8)
 80065c8:	0800732c 	.word	0x0800732c
 80065cc:	0800734c 	.word	0x0800734c
 80065d0:	0800730c 	.word	0x0800730c
 80065d4:	080071fa 	.word	0x080071fa
 80065d8:	08007200 	.word	0x08007200
 80065dc:	08007204 	.word	0x08007204
 80065e0:	080045f1 	.word	0x080045f1
 80065e4:	08006351 	.word	0x08006351

080065e8 <__swbuf_r>:
 80065e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ea:	0005      	movs	r5, r0
 80065ec:	000e      	movs	r6, r1
 80065ee:	0014      	movs	r4, r2
 80065f0:	2800      	cmp	r0, #0
 80065f2:	d004      	beq.n	80065fe <__swbuf_r+0x16>
 80065f4:	6983      	ldr	r3, [r0, #24]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <__swbuf_r+0x16>
 80065fa:	f000 fa07 	bl	8006a0c <__sinit>
 80065fe:	4b22      	ldr	r3, [pc, #136]	; (8006688 <__swbuf_r+0xa0>)
 8006600:	429c      	cmp	r4, r3
 8006602:	d12e      	bne.n	8006662 <__swbuf_r+0x7a>
 8006604:	686c      	ldr	r4, [r5, #4]
 8006606:	69a3      	ldr	r3, [r4, #24]
 8006608:	60a3      	str	r3, [r4, #8]
 800660a:	89a3      	ldrh	r3, [r4, #12]
 800660c:	071b      	lsls	r3, r3, #28
 800660e:	d532      	bpl.n	8006676 <__swbuf_r+0x8e>
 8006610:	6923      	ldr	r3, [r4, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d02f      	beq.n	8006676 <__swbuf_r+0x8e>
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	6922      	ldr	r2, [r4, #16]
 800661a:	b2f7      	uxtb	r7, r6
 800661c:	1a98      	subs	r0, r3, r2
 800661e:	6963      	ldr	r3, [r4, #20]
 8006620:	b2f6      	uxtb	r6, r6
 8006622:	4283      	cmp	r3, r0
 8006624:	dc05      	bgt.n	8006632 <__swbuf_r+0x4a>
 8006626:	0021      	movs	r1, r4
 8006628:	0028      	movs	r0, r5
 800662a:	f000 f94d 	bl	80068c8 <_fflush_r>
 800662e:	2800      	cmp	r0, #0
 8006630:	d127      	bne.n	8006682 <__swbuf_r+0x9a>
 8006632:	68a3      	ldr	r3, [r4, #8]
 8006634:	3001      	adds	r0, #1
 8006636:	3b01      	subs	r3, #1
 8006638:	60a3      	str	r3, [r4, #8]
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	6022      	str	r2, [r4, #0]
 8006640:	701f      	strb	r7, [r3, #0]
 8006642:	6963      	ldr	r3, [r4, #20]
 8006644:	4283      	cmp	r3, r0
 8006646:	d004      	beq.n	8006652 <__swbuf_r+0x6a>
 8006648:	89a3      	ldrh	r3, [r4, #12]
 800664a:	07db      	lsls	r3, r3, #31
 800664c:	d507      	bpl.n	800665e <__swbuf_r+0x76>
 800664e:	2e0a      	cmp	r6, #10
 8006650:	d105      	bne.n	800665e <__swbuf_r+0x76>
 8006652:	0021      	movs	r1, r4
 8006654:	0028      	movs	r0, r5
 8006656:	f000 f937 	bl	80068c8 <_fflush_r>
 800665a:	2800      	cmp	r0, #0
 800665c:	d111      	bne.n	8006682 <__swbuf_r+0x9a>
 800665e:	0030      	movs	r0, r6
 8006660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006662:	4b0a      	ldr	r3, [pc, #40]	; (800668c <__swbuf_r+0xa4>)
 8006664:	429c      	cmp	r4, r3
 8006666:	d101      	bne.n	800666c <__swbuf_r+0x84>
 8006668:	68ac      	ldr	r4, [r5, #8]
 800666a:	e7cc      	b.n	8006606 <__swbuf_r+0x1e>
 800666c:	4b08      	ldr	r3, [pc, #32]	; (8006690 <__swbuf_r+0xa8>)
 800666e:	429c      	cmp	r4, r3
 8006670:	d1c9      	bne.n	8006606 <__swbuf_r+0x1e>
 8006672:	68ec      	ldr	r4, [r5, #12]
 8006674:	e7c7      	b.n	8006606 <__swbuf_r+0x1e>
 8006676:	0021      	movs	r1, r4
 8006678:	0028      	movs	r0, r5
 800667a:	f000 f819 	bl	80066b0 <__swsetup_r>
 800667e:	2800      	cmp	r0, #0
 8006680:	d0c9      	beq.n	8006616 <__swbuf_r+0x2e>
 8006682:	2601      	movs	r6, #1
 8006684:	4276      	negs	r6, r6
 8006686:	e7ea      	b.n	800665e <__swbuf_r+0x76>
 8006688:	0800732c 	.word	0x0800732c
 800668c:	0800734c 	.word	0x0800734c
 8006690:	0800730c 	.word	0x0800730c

08006694 <__ascii_wctomb>:
 8006694:	0003      	movs	r3, r0
 8006696:	1e08      	subs	r0, r1, #0
 8006698:	d005      	beq.n	80066a6 <__ascii_wctomb+0x12>
 800669a:	2aff      	cmp	r2, #255	; 0xff
 800669c:	d904      	bls.n	80066a8 <__ascii_wctomb+0x14>
 800669e:	228a      	movs	r2, #138	; 0x8a
 80066a0:	2001      	movs	r0, #1
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	4240      	negs	r0, r0
 80066a6:	4770      	bx	lr
 80066a8:	2001      	movs	r0, #1
 80066aa:	700a      	strb	r2, [r1, #0]
 80066ac:	e7fb      	b.n	80066a6 <__ascii_wctomb+0x12>
	...

080066b0 <__swsetup_r>:
 80066b0:	4b37      	ldr	r3, [pc, #220]	; (8006790 <__swsetup_r+0xe0>)
 80066b2:	b570      	push	{r4, r5, r6, lr}
 80066b4:	681d      	ldr	r5, [r3, #0]
 80066b6:	0006      	movs	r6, r0
 80066b8:	000c      	movs	r4, r1
 80066ba:	2d00      	cmp	r5, #0
 80066bc:	d005      	beq.n	80066ca <__swsetup_r+0x1a>
 80066be:	69ab      	ldr	r3, [r5, #24]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d102      	bne.n	80066ca <__swsetup_r+0x1a>
 80066c4:	0028      	movs	r0, r5
 80066c6:	f000 f9a1 	bl	8006a0c <__sinit>
 80066ca:	4b32      	ldr	r3, [pc, #200]	; (8006794 <__swsetup_r+0xe4>)
 80066cc:	429c      	cmp	r4, r3
 80066ce:	d10f      	bne.n	80066f0 <__swsetup_r+0x40>
 80066d0:	686c      	ldr	r4, [r5, #4]
 80066d2:	230c      	movs	r3, #12
 80066d4:	5ee2      	ldrsh	r2, [r4, r3]
 80066d6:	b293      	uxth	r3, r2
 80066d8:	0711      	lsls	r1, r2, #28
 80066da:	d42d      	bmi.n	8006738 <__swsetup_r+0x88>
 80066dc:	06d9      	lsls	r1, r3, #27
 80066de:	d411      	bmi.n	8006704 <__swsetup_r+0x54>
 80066e0:	2309      	movs	r3, #9
 80066e2:	2001      	movs	r0, #1
 80066e4:	6033      	str	r3, [r6, #0]
 80066e6:	3337      	adds	r3, #55	; 0x37
 80066e8:	4313      	orrs	r3, r2
 80066ea:	81a3      	strh	r3, [r4, #12]
 80066ec:	4240      	negs	r0, r0
 80066ee:	bd70      	pop	{r4, r5, r6, pc}
 80066f0:	4b29      	ldr	r3, [pc, #164]	; (8006798 <__swsetup_r+0xe8>)
 80066f2:	429c      	cmp	r4, r3
 80066f4:	d101      	bne.n	80066fa <__swsetup_r+0x4a>
 80066f6:	68ac      	ldr	r4, [r5, #8]
 80066f8:	e7eb      	b.n	80066d2 <__swsetup_r+0x22>
 80066fa:	4b28      	ldr	r3, [pc, #160]	; (800679c <__swsetup_r+0xec>)
 80066fc:	429c      	cmp	r4, r3
 80066fe:	d1e8      	bne.n	80066d2 <__swsetup_r+0x22>
 8006700:	68ec      	ldr	r4, [r5, #12]
 8006702:	e7e6      	b.n	80066d2 <__swsetup_r+0x22>
 8006704:	075b      	lsls	r3, r3, #29
 8006706:	d513      	bpl.n	8006730 <__swsetup_r+0x80>
 8006708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800670a:	2900      	cmp	r1, #0
 800670c:	d008      	beq.n	8006720 <__swsetup_r+0x70>
 800670e:	0023      	movs	r3, r4
 8006710:	3344      	adds	r3, #68	; 0x44
 8006712:	4299      	cmp	r1, r3
 8006714:	d002      	beq.n	800671c <__swsetup_r+0x6c>
 8006716:	0030      	movs	r0, r6
 8006718:	f7fd fe18 	bl	800434c <_free_r>
 800671c:	2300      	movs	r3, #0
 800671e:	6363      	str	r3, [r4, #52]	; 0x34
 8006720:	2224      	movs	r2, #36	; 0x24
 8006722:	89a3      	ldrh	r3, [r4, #12]
 8006724:	4393      	bics	r3, r2
 8006726:	81a3      	strh	r3, [r4, #12]
 8006728:	2300      	movs	r3, #0
 800672a:	6063      	str	r3, [r4, #4]
 800672c:	6923      	ldr	r3, [r4, #16]
 800672e:	6023      	str	r3, [r4, #0]
 8006730:	2308      	movs	r3, #8
 8006732:	89a2      	ldrh	r2, [r4, #12]
 8006734:	4313      	orrs	r3, r2
 8006736:	81a3      	strh	r3, [r4, #12]
 8006738:	6923      	ldr	r3, [r4, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10b      	bne.n	8006756 <__swsetup_r+0xa6>
 800673e:	21a0      	movs	r1, #160	; 0xa0
 8006740:	2280      	movs	r2, #128	; 0x80
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	0089      	lsls	r1, r1, #2
 8006746:	0092      	lsls	r2, r2, #2
 8006748:	400b      	ands	r3, r1
 800674a:	4293      	cmp	r3, r2
 800674c:	d003      	beq.n	8006756 <__swsetup_r+0xa6>
 800674e:	0021      	movs	r1, r4
 8006750:	0030      	movs	r0, r6
 8006752:	f000 fa23 	bl	8006b9c <__smakebuf_r>
 8006756:	220c      	movs	r2, #12
 8006758:	5ea3      	ldrsh	r3, [r4, r2]
 800675a:	2001      	movs	r0, #1
 800675c:	001a      	movs	r2, r3
 800675e:	b299      	uxth	r1, r3
 8006760:	4002      	ands	r2, r0
 8006762:	4203      	tst	r3, r0
 8006764:	d00f      	beq.n	8006786 <__swsetup_r+0xd6>
 8006766:	2200      	movs	r2, #0
 8006768:	60a2      	str	r2, [r4, #8]
 800676a:	6962      	ldr	r2, [r4, #20]
 800676c:	4252      	negs	r2, r2
 800676e:	61a2      	str	r2, [r4, #24]
 8006770:	2000      	movs	r0, #0
 8006772:	6922      	ldr	r2, [r4, #16]
 8006774:	4282      	cmp	r2, r0
 8006776:	d1ba      	bne.n	80066ee <__swsetup_r+0x3e>
 8006778:	060a      	lsls	r2, r1, #24
 800677a:	d5b8      	bpl.n	80066ee <__swsetup_r+0x3e>
 800677c:	2240      	movs	r2, #64	; 0x40
 800677e:	4313      	orrs	r3, r2
 8006780:	81a3      	strh	r3, [r4, #12]
 8006782:	3801      	subs	r0, #1
 8006784:	e7b3      	b.n	80066ee <__swsetup_r+0x3e>
 8006786:	0788      	lsls	r0, r1, #30
 8006788:	d400      	bmi.n	800678c <__swsetup_r+0xdc>
 800678a:	6962      	ldr	r2, [r4, #20]
 800678c:	60a2      	str	r2, [r4, #8]
 800678e:	e7ef      	b.n	8006770 <__swsetup_r+0xc0>
 8006790:	2000000c 	.word	0x2000000c
 8006794:	0800732c 	.word	0x0800732c
 8006798:	0800734c 	.word	0x0800734c
 800679c:	0800730c 	.word	0x0800730c

080067a0 <abort>:
 80067a0:	2006      	movs	r0, #6
 80067a2:	b510      	push	{r4, lr}
 80067a4:	f000 fa68 	bl	8006c78 <raise>
 80067a8:	2001      	movs	r0, #1
 80067aa:	f000 fb83 	bl	8006eb4 <_exit>
	...

080067b0 <__sflush_r>:
 80067b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067b2:	898b      	ldrh	r3, [r1, #12]
 80067b4:	0005      	movs	r5, r0
 80067b6:	000c      	movs	r4, r1
 80067b8:	071a      	lsls	r2, r3, #28
 80067ba:	d45f      	bmi.n	800687c <__sflush_r+0xcc>
 80067bc:	684a      	ldr	r2, [r1, #4]
 80067be:	2a00      	cmp	r2, #0
 80067c0:	dc04      	bgt.n	80067cc <__sflush_r+0x1c>
 80067c2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80067c4:	2a00      	cmp	r2, #0
 80067c6:	dc01      	bgt.n	80067cc <__sflush_r+0x1c>
 80067c8:	2000      	movs	r0, #0
 80067ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80067cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80067ce:	2f00      	cmp	r7, #0
 80067d0:	d0fa      	beq.n	80067c8 <__sflush_r+0x18>
 80067d2:	2200      	movs	r2, #0
 80067d4:	2180      	movs	r1, #128	; 0x80
 80067d6:	682e      	ldr	r6, [r5, #0]
 80067d8:	602a      	str	r2, [r5, #0]
 80067da:	001a      	movs	r2, r3
 80067dc:	0149      	lsls	r1, r1, #5
 80067de:	400a      	ands	r2, r1
 80067e0:	420b      	tst	r3, r1
 80067e2:	d034      	beq.n	800684e <__sflush_r+0x9e>
 80067e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	075b      	lsls	r3, r3, #29
 80067ea:	d506      	bpl.n	80067fa <__sflush_r+0x4a>
 80067ec:	6863      	ldr	r3, [r4, #4]
 80067ee:	1ac0      	subs	r0, r0, r3
 80067f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <__sflush_r+0x4a>
 80067f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067f8:	1ac0      	subs	r0, r0, r3
 80067fa:	0002      	movs	r2, r0
 80067fc:	6a21      	ldr	r1, [r4, #32]
 80067fe:	2300      	movs	r3, #0
 8006800:	0028      	movs	r0, r5
 8006802:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006804:	47b8      	blx	r7
 8006806:	89a1      	ldrh	r1, [r4, #12]
 8006808:	1c43      	adds	r3, r0, #1
 800680a:	d106      	bne.n	800681a <__sflush_r+0x6a>
 800680c:	682b      	ldr	r3, [r5, #0]
 800680e:	2b1d      	cmp	r3, #29
 8006810:	d831      	bhi.n	8006876 <__sflush_r+0xc6>
 8006812:	4a2c      	ldr	r2, [pc, #176]	; (80068c4 <__sflush_r+0x114>)
 8006814:	40da      	lsrs	r2, r3
 8006816:	07d3      	lsls	r3, r2, #31
 8006818:	d52d      	bpl.n	8006876 <__sflush_r+0xc6>
 800681a:	2300      	movs	r3, #0
 800681c:	6063      	str	r3, [r4, #4]
 800681e:	6923      	ldr	r3, [r4, #16]
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	04cb      	lsls	r3, r1, #19
 8006824:	d505      	bpl.n	8006832 <__sflush_r+0x82>
 8006826:	1c43      	adds	r3, r0, #1
 8006828:	d102      	bne.n	8006830 <__sflush_r+0x80>
 800682a:	682b      	ldr	r3, [r5, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d100      	bne.n	8006832 <__sflush_r+0x82>
 8006830:	6560      	str	r0, [r4, #84]	; 0x54
 8006832:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006834:	602e      	str	r6, [r5, #0]
 8006836:	2900      	cmp	r1, #0
 8006838:	d0c6      	beq.n	80067c8 <__sflush_r+0x18>
 800683a:	0023      	movs	r3, r4
 800683c:	3344      	adds	r3, #68	; 0x44
 800683e:	4299      	cmp	r1, r3
 8006840:	d002      	beq.n	8006848 <__sflush_r+0x98>
 8006842:	0028      	movs	r0, r5
 8006844:	f7fd fd82 	bl	800434c <_free_r>
 8006848:	2000      	movs	r0, #0
 800684a:	6360      	str	r0, [r4, #52]	; 0x34
 800684c:	e7bd      	b.n	80067ca <__sflush_r+0x1a>
 800684e:	2301      	movs	r3, #1
 8006850:	0028      	movs	r0, r5
 8006852:	6a21      	ldr	r1, [r4, #32]
 8006854:	47b8      	blx	r7
 8006856:	1c43      	adds	r3, r0, #1
 8006858:	d1c5      	bne.n	80067e6 <__sflush_r+0x36>
 800685a:	682b      	ldr	r3, [r5, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0c2      	beq.n	80067e6 <__sflush_r+0x36>
 8006860:	2b1d      	cmp	r3, #29
 8006862:	d001      	beq.n	8006868 <__sflush_r+0xb8>
 8006864:	2b16      	cmp	r3, #22
 8006866:	d101      	bne.n	800686c <__sflush_r+0xbc>
 8006868:	602e      	str	r6, [r5, #0]
 800686a:	e7ad      	b.n	80067c8 <__sflush_r+0x18>
 800686c:	2340      	movs	r3, #64	; 0x40
 800686e:	89a2      	ldrh	r2, [r4, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	81a3      	strh	r3, [r4, #12]
 8006874:	e7a9      	b.n	80067ca <__sflush_r+0x1a>
 8006876:	2340      	movs	r3, #64	; 0x40
 8006878:	430b      	orrs	r3, r1
 800687a:	e7fa      	b.n	8006872 <__sflush_r+0xc2>
 800687c:	690f      	ldr	r7, [r1, #16]
 800687e:	2f00      	cmp	r7, #0
 8006880:	d0a2      	beq.n	80067c8 <__sflush_r+0x18>
 8006882:	680a      	ldr	r2, [r1, #0]
 8006884:	600f      	str	r7, [r1, #0]
 8006886:	1bd2      	subs	r2, r2, r7
 8006888:	9201      	str	r2, [sp, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	079b      	lsls	r3, r3, #30
 800688e:	d100      	bne.n	8006892 <__sflush_r+0xe2>
 8006890:	694a      	ldr	r2, [r1, #20]
 8006892:	60a2      	str	r2, [r4, #8]
 8006894:	9b01      	ldr	r3, [sp, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	dc00      	bgt.n	800689c <__sflush_r+0xec>
 800689a:	e795      	b.n	80067c8 <__sflush_r+0x18>
 800689c:	003a      	movs	r2, r7
 800689e:	0028      	movs	r0, r5
 80068a0:	9b01      	ldr	r3, [sp, #4]
 80068a2:	6a21      	ldr	r1, [r4, #32]
 80068a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068a6:	47b0      	blx	r6
 80068a8:	2800      	cmp	r0, #0
 80068aa:	dc06      	bgt.n	80068ba <__sflush_r+0x10a>
 80068ac:	2340      	movs	r3, #64	; 0x40
 80068ae:	2001      	movs	r0, #1
 80068b0:	89a2      	ldrh	r2, [r4, #12]
 80068b2:	4240      	negs	r0, r0
 80068b4:	4313      	orrs	r3, r2
 80068b6:	81a3      	strh	r3, [r4, #12]
 80068b8:	e787      	b.n	80067ca <__sflush_r+0x1a>
 80068ba:	9b01      	ldr	r3, [sp, #4]
 80068bc:	183f      	adds	r7, r7, r0
 80068be:	1a1b      	subs	r3, r3, r0
 80068c0:	9301      	str	r3, [sp, #4]
 80068c2:	e7e7      	b.n	8006894 <__sflush_r+0xe4>
 80068c4:	20400001 	.word	0x20400001

080068c8 <_fflush_r>:
 80068c8:	690b      	ldr	r3, [r1, #16]
 80068ca:	b570      	push	{r4, r5, r6, lr}
 80068cc:	0005      	movs	r5, r0
 80068ce:	000c      	movs	r4, r1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d102      	bne.n	80068da <_fflush_r+0x12>
 80068d4:	2500      	movs	r5, #0
 80068d6:	0028      	movs	r0, r5
 80068d8:	bd70      	pop	{r4, r5, r6, pc}
 80068da:	2800      	cmp	r0, #0
 80068dc:	d004      	beq.n	80068e8 <_fflush_r+0x20>
 80068de:	6983      	ldr	r3, [r0, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <_fflush_r+0x20>
 80068e4:	f000 f892 	bl	8006a0c <__sinit>
 80068e8:	4b14      	ldr	r3, [pc, #80]	; (800693c <_fflush_r+0x74>)
 80068ea:	429c      	cmp	r4, r3
 80068ec:	d11b      	bne.n	8006926 <_fflush_r+0x5e>
 80068ee:	686c      	ldr	r4, [r5, #4]
 80068f0:	220c      	movs	r2, #12
 80068f2:	5ea3      	ldrsh	r3, [r4, r2]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0ed      	beq.n	80068d4 <_fflush_r+0xc>
 80068f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068fa:	07d2      	lsls	r2, r2, #31
 80068fc:	d404      	bmi.n	8006908 <_fflush_r+0x40>
 80068fe:	059b      	lsls	r3, r3, #22
 8006900:	d402      	bmi.n	8006908 <_fflush_r+0x40>
 8006902:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006904:	f7ff fcfb 	bl	80062fe <__retarget_lock_acquire_recursive>
 8006908:	0028      	movs	r0, r5
 800690a:	0021      	movs	r1, r4
 800690c:	f7ff ff50 	bl	80067b0 <__sflush_r>
 8006910:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006912:	0005      	movs	r5, r0
 8006914:	07db      	lsls	r3, r3, #31
 8006916:	d4de      	bmi.n	80068d6 <_fflush_r+0xe>
 8006918:	89a3      	ldrh	r3, [r4, #12]
 800691a:	059b      	lsls	r3, r3, #22
 800691c:	d4db      	bmi.n	80068d6 <_fflush_r+0xe>
 800691e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006920:	f7ff fcee 	bl	8006300 <__retarget_lock_release_recursive>
 8006924:	e7d7      	b.n	80068d6 <_fflush_r+0xe>
 8006926:	4b06      	ldr	r3, [pc, #24]	; (8006940 <_fflush_r+0x78>)
 8006928:	429c      	cmp	r4, r3
 800692a:	d101      	bne.n	8006930 <_fflush_r+0x68>
 800692c:	68ac      	ldr	r4, [r5, #8]
 800692e:	e7df      	b.n	80068f0 <_fflush_r+0x28>
 8006930:	4b04      	ldr	r3, [pc, #16]	; (8006944 <_fflush_r+0x7c>)
 8006932:	429c      	cmp	r4, r3
 8006934:	d1dc      	bne.n	80068f0 <_fflush_r+0x28>
 8006936:	68ec      	ldr	r4, [r5, #12]
 8006938:	e7da      	b.n	80068f0 <_fflush_r+0x28>
 800693a:	46c0      	nop			; (mov r8, r8)
 800693c:	0800732c 	.word	0x0800732c
 8006940:	0800734c 	.word	0x0800734c
 8006944:	0800730c 	.word	0x0800730c

08006948 <std>:
 8006948:	2300      	movs	r3, #0
 800694a:	b510      	push	{r4, lr}
 800694c:	0004      	movs	r4, r0
 800694e:	6003      	str	r3, [r0, #0]
 8006950:	6043      	str	r3, [r0, #4]
 8006952:	6083      	str	r3, [r0, #8]
 8006954:	8181      	strh	r1, [r0, #12]
 8006956:	6643      	str	r3, [r0, #100]	; 0x64
 8006958:	0019      	movs	r1, r3
 800695a:	81c2      	strh	r2, [r0, #14]
 800695c:	6103      	str	r3, [r0, #16]
 800695e:	6143      	str	r3, [r0, #20]
 8006960:	6183      	str	r3, [r0, #24]
 8006962:	2208      	movs	r2, #8
 8006964:	305c      	adds	r0, #92	; 0x5c
 8006966:	f7fd fce8 	bl	800433a <memset>
 800696a:	4b05      	ldr	r3, [pc, #20]	; (8006980 <std+0x38>)
 800696c:	6263      	str	r3, [r4, #36]	; 0x24
 800696e:	4b05      	ldr	r3, [pc, #20]	; (8006984 <std+0x3c>)
 8006970:	6224      	str	r4, [r4, #32]
 8006972:	62a3      	str	r3, [r4, #40]	; 0x28
 8006974:	4b04      	ldr	r3, [pc, #16]	; (8006988 <std+0x40>)
 8006976:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006978:	4b04      	ldr	r3, [pc, #16]	; (800698c <std+0x44>)
 800697a:	6323      	str	r3, [r4, #48]	; 0x30
 800697c:	bd10      	pop	{r4, pc}
 800697e:	46c0      	nop			; (mov r8, r8)
 8006980:	08006cb9 	.word	0x08006cb9
 8006984:	08006ce1 	.word	0x08006ce1
 8006988:	08006d19 	.word	0x08006d19
 800698c:	08006d45 	.word	0x08006d45

08006990 <_cleanup_r>:
 8006990:	b510      	push	{r4, lr}
 8006992:	4902      	ldr	r1, [pc, #8]	; (800699c <_cleanup_r+0xc>)
 8006994:	f000 f8ba 	bl	8006b0c <_fwalk_reent>
 8006998:	bd10      	pop	{r4, pc}
 800699a:	46c0      	nop			; (mov r8, r8)
 800699c:	080068c9 	.word	0x080068c9

080069a0 <__sfmoreglue>:
 80069a0:	b570      	push	{r4, r5, r6, lr}
 80069a2:	2568      	movs	r5, #104	; 0x68
 80069a4:	1e4a      	subs	r2, r1, #1
 80069a6:	4355      	muls	r5, r2
 80069a8:	000e      	movs	r6, r1
 80069aa:	0029      	movs	r1, r5
 80069ac:	3174      	adds	r1, #116	; 0x74
 80069ae:	f7fd fd17 	bl	80043e0 <_malloc_r>
 80069b2:	1e04      	subs	r4, r0, #0
 80069b4:	d008      	beq.n	80069c8 <__sfmoreglue+0x28>
 80069b6:	2100      	movs	r1, #0
 80069b8:	002a      	movs	r2, r5
 80069ba:	6001      	str	r1, [r0, #0]
 80069bc:	6046      	str	r6, [r0, #4]
 80069be:	300c      	adds	r0, #12
 80069c0:	60a0      	str	r0, [r4, #8]
 80069c2:	3268      	adds	r2, #104	; 0x68
 80069c4:	f7fd fcb9 	bl	800433a <memset>
 80069c8:	0020      	movs	r0, r4
 80069ca:	bd70      	pop	{r4, r5, r6, pc}

080069cc <__sfp_lock_acquire>:
 80069cc:	b510      	push	{r4, lr}
 80069ce:	4802      	ldr	r0, [pc, #8]	; (80069d8 <__sfp_lock_acquire+0xc>)
 80069d0:	f7ff fc95 	bl	80062fe <__retarget_lock_acquire_recursive>
 80069d4:	bd10      	pop	{r4, pc}
 80069d6:	46c0      	nop			; (mov r8, r8)
 80069d8:	20000304 	.word	0x20000304

080069dc <__sfp_lock_release>:
 80069dc:	b510      	push	{r4, lr}
 80069de:	4802      	ldr	r0, [pc, #8]	; (80069e8 <__sfp_lock_release+0xc>)
 80069e0:	f7ff fc8e 	bl	8006300 <__retarget_lock_release_recursive>
 80069e4:	bd10      	pop	{r4, pc}
 80069e6:	46c0      	nop			; (mov r8, r8)
 80069e8:	20000304 	.word	0x20000304

080069ec <__sinit_lock_acquire>:
 80069ec:	b510      	push	{r4, lr}
 80069ee:	4802      	ldr	r0, [pc, #8]	; (80069f8 <__sinit_lock_acquire+0xc>)
 80069f0:	f7ff fc85 	bl	80062fe <__retarget_lock_acquire_recursive>
 80069f4:	bd10      	pop	{r4, pc}
 80069f6:	46c0      	nop			; (mov r8, r8)
 80069f8:	200002ff 	.word	0x200002ff

080069fc <__sinit_lock_release>:
 80069fc:	b510      	push	{r4, lr}
 80069fe:	4802      	ldr	r0, [pc, #8]	; (8006a08 <__sinit_lock_release+0xc>)
 8006a00:	f7ff fc7e 	bl	8006300 <__retarget_lock_release_recursive>
 8006a04:	bd10      	pop	{r4, pc}
 8006a06:	46c0      	nop			; (mov r8, r8)
 8006a08:	200002ff 	.word	0x200002ff

08006a0c <__sinit>:
 8006a0c:	b513      	push	{r0, r1, r4, lr}
 8006a0e:	0004      	movs	r4, r0
 8006a10:	f7ff ffec 	bl	80069ec <__sinit_lock_acquire>
 8006a14:	69a3      	ldr	r3, [r4, #24]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <__sinit+0x14>
 8006a1a:	f7ff ffef 	bl	80069fc <__sinit_lock_release>
 8006a1e:	bd13      	pop	{r0, r1, r4, pc}
 8006a20:	64a3      	str	r3, [r4, #72]	; 0x48
 8006a22:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006a24:	6523      	str	r3, [r4, #80]	; 0x50
 8006a26:	4b13      	ldr	r3, [pc, #76]	; (8006a74 <__sinit+0x68>)
 8006a28:	4a13      	ldr	r2, [pc, #76]	; (8006a78 <__sinit+0x6c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a2e:	9301      	str	r3, [sp, #4]
 8006a30:	42a3      	cmp	r3, r4
 8006a32:	d101      	bne.n	8006a38 <__sinit+0x2c>
 8006a34:	2301      	movs	r3, #1
 8006a36:	61a3      	str	r3, [r4, #24]
 8006a38:	0020      	movs	r0, r4
 8006a3a:	f000 f81f 	bl	8006a7c <__sfp>
 8006a3e:	6060      	str	r0, [r4, #4]
 8006a40:	0020      	movs	r0, r4
 8006a42:	f000 f81b 	bl	8006a7c <__sfp>
 8006a46:	60a0      	str	r0, [r4, #8]
 8006a48:	0020      	movs	r0, r4
 8006a4a:	f000 f817 	bl	8006a7c <__sfp>
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2104      	movs	r1, #4
 8006a52:	60e0      	str	r0, [r4, #12]
 8006a54:	6860      	ldr	r0, [r4, #4]
 8006a56:	f7ff ff77 	bl	8006948 <std>
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	2109      	movs	r1, #9
 8006a5e:	68a0      	ldr	r0, [r4, #8]
 8006a60:	f7ff ff72 	bl	8006948 <std>
 8006a64:	2202      	movs	r2, #2
 8006a66:	2112      	movs	r1, #18
 8006a68:	68e0      	ldr	r0, [r4, #12]
 8006a6a:	f7ff ff6d 	bl	8006948 <std>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	61a3      	str	r3, [r4, #24]
 8006a72:	e7d2      	b.n	8006a1a <__sinit+0xe>
 8006a74:	08006f88 	.word	0x08006f88
 8006a78:	08006991 	.word	0x08006991

08006a7c <__sfp>:
 8006a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7e:	0007      	movs	r7, r0
 8006a80:	f7ff ffa4 	bl	80069cc <__sfp_lock_acquire>
 8006a84:	4b1f      	ldr	r3, [pc, #124]	; (8006b04 <__sfp+0x88>)
 8006a86:	681e      	ldr	r6, [r3, #0]
 8006a88:	69b3      	ldr	r3, [r6, #24]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d102      	bne.n	8006a94 <__sfp+0x18>
 8006a8e:	0030      	movs	r0, r6
 8006a90:	f7ff ffbc 	bl	8006a0c <__sinit>
 8006a94:	3648      	adds	r6, #72	; 0x48
 8006a96:	68b4      	ldr	r4, [r6, #8]
 8006a98:	6873      	ldr	r3, [r6, #4]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	d504      	bpl.n	8006aa8 <__sfp+0x2c>
 8006a9e:	6833      	ldr	r3, [r6, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d022      	beq.n	8006aea <__sfp+0x6e>
 8006aa4:	6836      	ldr	r6, [r6, #0]
 8006aa6:	e7f6      	b.n	8006a96 <__sfp+0x1a>
 8006aa8:	220c      	movs	r2, #12
 8006aaa:	5ea5      	ldrsh	r5, [r4, r2]
 8006aac:	2d00      	cmp	r5, #0
 8006aae:	d11a      	bne.n	8006ae6 <__sfp+0x6a>
 8006ab0:	0020      	movs	r0, r4
 8006ab2:	4b15      	ldr	r3, [pc, #84]	; (8006b08 <__sfp+0x8c>)
 8006ab4:	3058      	adds	r0, #88	; 0x58
 8006ab6:	60e3      	str	r3, [r4, #12]
 8006ab8:	6665      	str	r5, [r4, #100]	; 0x64
 8006aba:	f7ff fc1f 	bl	80062fc <__retarget_lock_init_recursive>
 8006abe:	f7ff ff8d 	bl	80069dc <__sfp_lock_release>
 8006ac2:	0020      	movs	r0, r4
 8006ac4:	2208      	movs	r2, #8
 8006ac6:	0029      	movs	r1, r5
 8006ac8:	6025      	str	r5, [r4, #0]
 8006aca:	60a5      	str	r5, [r4, #8]
 8006acc:	6065      	str	r5, [r4, #4]
 8006ace:	6125      	str	r5, [r4, #16]
 8006ad0:	6165      	str	r5, [r4, #20]
 8006ad2:	61a5      	str	r5, [r4, #24]
 8006ad4:	305c      	adds	r0, #92	; 0x5c
 8006ad6:	f7fd fc30 	bl	800433a <memset>
 8006ada:	6365      	str	r5, [r4, #52]	; 0x34
 8006adc:	63a5      	str	r5, [r4, #56]	; 0x38
 8006ade:	64a5      	str	r5, [r4, #72]	; 0x48
 8006ae0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006ae2:	0020      	movs	r0, r4
 8006ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ae6:	3468      	adds	r4, #104	; 0x68
 8006ae8:	e7d7      	b.n	8006a9a <__sfp+0x1e>
 8006aea:	2104      	movs	r1, #4
 8006aec:	0038      	movs	r0, r7
 8006aee:	f7ff ff57 	bl	80069a0 <__sfmoreglue>
 8006af2:	1e04      	subs	r4, r0, #0
 8006af4:	6030      	str	r0, [r6, #0]
 8006af6:	d1d5      	bne.n	8006aa4 <__sfp+0x28>
 8006af8:	f7ff ff70 	bl	80069dc <__sfp_lock_release>
 8006afc:	230c      	movs	r3, #12
 8006afe:	603b      	str	r3, [r7, #0]
 8006b00:	e7ef      	b.n	8006ae2 <__sfp+0x66>
 8006b02:	46c0      	nop			; (mov r8, r8)
 8006b04:	08006f88 	.word	0x08006f88
 8006b08:	ffff0001 	.word	0xffff0001

08006b0c <_fwalk_reent>:
 8006b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b0e:	0004      	movs	r4, r0
 8006b10:	0006      	movs	r6, r0
 8006b12:	2700      	movs	r7, #0
 8006b14:	9101      	str	r1, [sp, #4]
 8006b16:	3448      	adds	r4, #72	; 0x48
 8006b18:	6863      	ldr	r3, [r4, #4]
 8006b1a:	68a5      	ldr	r5, [r4, #8]
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	9b00      	ldr	r3, [sp, #0]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	d504      	bpl.n	8006b30 <_fwalk_reent+0x24>
 8006b26:	6824      	ldr	r4, [r4, #0]
 8006b28:	2c00      	cmp	r4, #0
 8006b2a:	d1f5      	bne.n	8006b18 <_fwalk_reent+0xc>
 8006b2c:	0038      	movs	r0, r7
 8006b2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b30:	89ab      	ldrh	r3, [r5, #12]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d908      	bls.n	8006b48 <_fwalk_reent+0x3c>
 8006b36:	220e      	movs	r2, #14
 8006b38:	5eab      	ldrsh	r3, [r5, r2]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	d004      	beq.n	8006b48 <_fwalk_reent+0x3c>
 8006b3e:	0029      	movs	r1, r5
 8006b40:	0030      	movs	r0, r6
 8006b42:	9b01      	ldr	r3, [sp, #4]
 8006b44:	4798      	blx	r3
 8006b46:	4307      	orrs	r7, r0
 8006b48:	3568      	adds	r5, #104	; 0x68
 8006b4a:	e7e8      	b.n	8006b1e <_fwalk_reent+0x12>

08006b4c <__swhatbuf_r>:
 8006b4c:	b570      	push	{r4, r5, r6, lr}
 8006b4e:	000e      	movs	r6, r1
 8006b50:	001d      	movs	r5, r3
 8006b52:	230e      	movs	r3, #14
 8006b54:	5ec9      	ldrsh	r1, [r1, r3]
 8006b56:	0014      	movs	r4, r2
 8006b58:	b096      	sub	sp, #88	; 0x58
 8006b5a:	2900      	cmp	r1, #0
 8006b5c:	da07      	bge.n	8006b6e <__swhatbuf_r+0x22>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	602b      	str	r3, [r5, #0]
 8006b62:	89b3      	ldrh	r3, [r6, #12]
 8006b64:	061b      	lsls	r3, r3, #24
 8006b66:	d411      	bmi.n	8006b8c <__swhatbuf_r+0x40>
 8006b68:	2380      	movs	r3, #128	; 0x80
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	e00f      	b.n	8006b8e <__swhatbuf_r+0x42>
 8006b6e:	466a      	mov	r2, sp
 8006b70:	f000 f914 	bl	8006d9c <_fstat_r>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	dbf2      	blt.n	8006b5e <__swhatbuf_r+0x12>
 8006b78:	23f0      	movs	r3, #240	; 0xf0
 8006b7a:	9901      	ldr	r1, [sp, #4]
 8006b7c:	021b      	lsls	r3, r3, #8
 8006b7e:	4019      	ands	r1, r3
 8006b80:	4b05      	ldr	r3, [pc, #20]	; (8006b98 <__swhatbuf_r+0x4c>)
 8006b82:	18c9      	adds	r1, r1, r3
 8006b84:	424b      	negs	r3, r1
 8006b86:	4159      	adcs	r1, r3
 8006b88:	6029      	str	r1, [r5, #0]
 8006b8a:	e7ed      	b.n	8006b68 <__swhatbuf_r+0x1c>
 8006b8c:	2340      	movs	r3, #64	; 0x40
 8006b8e:	2000      	movs	r0, #0
 8006b90:	6023      	str	r3, [r4, #0]
 8006b92:	b016      	add	sp, #88	; 0x58
 8006b94:	bd70      	pop	{r4, r5, r6, pc}
 8006b96:	46c0      	nop			; (mov r8, r8)
 8006b98:	ffffe000 	.word	0xffffe000

08006b9c <__smakebuf_r>:
 8006b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b9e:	2602      	movs	r6, #2
 8006ba0:	898b      	ldrh	r3, [r1, #12]
 8006ba2:	0005      	movs	r5, r0
 8006ba4:	000c      	movs	r4, r1
 8006ba6:	4233      	tst	r3, r6
 8006ba8:	d006      	beq.n	8006bb8 <__smakebuf_r+0x1c>
 8006baa:	0023      	movs	r3, r4
 8006bac:	3347      	adds	r3, #71	; 0x47
 8006bae:	6023      	str	r3, [r4, #0]
 8006bb0:	6123      	str	r3, [r4, #16]
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	6163      	str	r3, [r4, #20]
 8006bb6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006bb8:	466a      	mov	r2, sp
 8006bba:	ab01      	add	r3, sp, #4
 8006bbc:	f7ff ffc6 	bl	8006b4c <__swhatbuf_r>
 8006bc0:	9900      	ldr	r1, [sp, #0]
 8006bc2:	0007      	movs	r7, r0
 8006bc4:	0028      	movs	r0, r5
 8006bc6:	f7fd fc0b 	bl	80043e0 <_malloc_r>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d108      	bne.n	8006be0 <__smakebuf_r+0x44>
 8006bce:	220c      	movs	r2, #12
 8006bd0:	5ea3      	ldrsh	r3, [r4, r2]
 8006bd2:	059a      	lsls	r2, r3, #22
 8006bd4:	d4ef      	bmi.n	8006bb6 <__smakebuf_r+0x1a>
 8006bd6:	2203      	movs	r2, #3
 8006bd8:	4393      	bics	r3, r2
 8006bda:	431e      	orrs	r6, r3
 8006bdc:	81a6      	strh	r6, [r4, #12]
 8006bde:	e7e4      	b.n	8006baa <__smakebuf_r+0xe>
 8006be0:	4b0f      	ldr	r3, [pc, #60]	; (8006c20 <__smakebuf_r+0x84>)
 8006be2:	62ab      	str	r3, [r5, #40]	; 0x28
 8006be4:	2380      	movs	r3, #128	; 0x80
 8006be6:	89a2      	ldrh	r2, [r4, #12]
 8006be8:	6020      	str	r0, [r4, #0]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	81a3      	strh	r3, [r4, #12]
 8006bee:	9b00      	ldr	r3, [sp, #0]
 8006bf0:	6120      	str	r0, [r4, #16]
 8006bf2:	6163      	str	r3, [r4, #20]
 8006bf4:	9b01      	ldr	r3, [sp, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00d      	beq.n	8006c16 <__smakebuf_r+0x7a>
 8006bfa:	0028      	movs	r0, r5
 8006bfc:	230e      	movs	r3, #14
 8006bfe:	5ee1      	ldrsh	r1, [r4, r3]
 8006c00:	f000 f8de 	bl	8006dc0 <_isatty_r>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d006      	beq.n	8006c16 <__smakebuf_r+0x7a>
 8006c08:	2203      	movs	r2, #3
 8006c0a:	89a3      	ldrh	r3, [r4, #12]
 8006c0c:	4393      	bics	r3, r2
 8006c0e:	001a      	movs	r2, r3
 8006c10:	2301      	movs	r3, #1
 8006c12:	4313      	orrs	r3, r2
 8006c14:	81a3      	strh	r3, [r4, #12]
 8006c16:	89a0      	ldrh	r0, [r4, #12]
 8006c18:	4307      	orrs	r7, r0
 8006c1a:	81a7      	strh	r7, [r4, #12]
 8006c1c:	e7cb      	b.n	8006bb6 <__smakebuf_r+0x1a>
 8006c1e:	46c0      	nop			; (mov r8, r8)
 8006c20:	08006991 	.word	0x08006991

08006c24 <_raise_r>:
 8006c24:	b570      	push	{r4, r5, r6, lr}
 8006c26:	0004      	movs	r4, r0
 8006c28:	000d      	movs	r5, r1
 8006c2a:	291f      	cmp	r1, #31
 8006c2c:	d904      	bls.n	8006c38 <_raise_r+0x14>
 8006c2e:	2316      	movs	r3, #22
 8006c30:	6003      	str	r3, [r0, #0]
 8006c32:	2001      	movs	r0, #1
 8006c34:	4240      	negs	r0, r0
 8006c36:	bd70      	pop	{r4, r5, r6, pc}
 8006c38:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d004      	beq.n	8006c48 <_raise_r+0x24>
 8006c3e:	008a      	lsls	r2, r1, #2
 8006c40:	189b      	adds	r3, r3, r2
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	2a00      	cmp	r2, #0
 8006c46:	d108      	bne.n	8006c5a <_raise_r+0x36>
 8006c48:	0020      	movs	r0, r4
 8006c4a:	f000 f831 	bl	8006cb0 <_getpid_r>
 8006c4e:	002a      	movs	r2, r5
 8006c50:	0001      	movs	r1, r0
 8006c52:	0020      	movs	r0, r4
 8006c54:	f000 f81a 	bl	8006c8c <_kill_r>
 8006c58:	e7ed      	b.n	8006c36 <_raise_r+0x12>
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	2a01      	cmp	r2, #1
 8006c5e:	d0ea      	beq.n	8006c36 <_raise_r+0x12>
 8006c60:	1c51      	adds	r1, r2, #1
 8006c62:	d103      	bne.n	8006c6c <_raise_r+0x48>
 8006c64:	2316      	movs	r3, #22
 8006c66:	3001      	adds	r0, #1
 8006c68:	6023      	str	r3, [r4, #0]
 8006c6a:	e7e4      	b.n	8006c36 <_raise_r+0x12>
 8006c6c:	2400      	movs	r4, #0
 8006c6e:	0028      	movs	r0, r5
 8006c70:	601c      	str	r4, [r3, #0]
 8006c72:	4790      	blx	r2
 8006c74:	0020      	movs	r0, r4
 8006c76:	e7de      	b.n	8006c36 <_raise_r+0x12>

08006c78 <raise>:
 8006c78:	b510      	push	{r4, lr}
 8006c7a:	4b03      	ldr	r3, [pc, #12]	; (8006c88 <raise+0x10>)
 8006c7c:	0001      	movs	r1, r0
 8006c7e:	6818      	ldr	r0, [r3, #0]
 8006c80:	f7ff ffd0 	bl	8006c24 <_raise_r>
 8006c84:	bd10      	pop	{r4, pc}
 8006c86:	46c0      	nop			; (mov r8, r8)
 8006c88:	2000000c 	.word	0x2000000c

08006c8c <_kill_r>:
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	b570      	push	{r4, r5, r6, lr}
 8006c90:	4d06      	ldr	r5, [pc, #24]	; (8006cac <_kill_r+0x20>)
 8006c92:	0004      	movs	r4, r0
 8006c94:	0008      	movs	r0, r1
 8006c96:	0011      	movs	r1, r2
 8006c98:	602b      	str	r3, [r5, #0]
 8006c9a:	f000 f8eb 	bl	8006e74 <_kill>
 8006c9e:	1c43      	adds	r3, r0, #1
 8006ca0:	d103      	bne.n	8006caa <_kill_r+0x1e>
 8006ca2:	682b      	ldr	r3, [r5, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d000      	beq.n	8006caa <_kill_r+0x1e>
 8006ca8:	6023      	str	r3, [r4, #0]
 8006caa:	bd70      	pop	{r4, r5, r6, pc}
 8006cac:	200002f8 	.word	0x200002f8

08006cb0 <_getpid_r>:
 8006cb0:	b510      	push	{r4, lr}
 8006cb2:	f000 f8cf 	bl	8006e54 <_getpid>
 8006cb6:	bd10      	pop	{r4, pc}

08006cb8 <__sread>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	000c      	movs	r4, r1
 8006cbc:	250e      	movs	r5, #14
 8006cbe:	5f49      	ldrsh	r1, [r1, r5]
 8006cc0:	f000 f8a4 	bl	8006e0c <_read_r>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	db03      	blt.n	8006cd0 <__sread+0x18>
 8006cc8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006cca:	181b      	adds	r3, r3, r0
 8006ccc:	6563      	str	r3, [r4, #84]	; 0x54
 8006cce:	bd70      	pop	{r4, r5, r6, pc}
 8006cd0:	89a3      	ldrh	r3, [r4, #12]
 8006cd2:	4a02      	ldr	r2, [pc, #8]	; (8006cdc <__sread+0x24>)
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	81a3      	strh	r3, [r4, #12]
 8006cd8:	e7f9      	b.n	8006cce <__sread+0x16>
 8006cda:	46c0      	nop			; (mov r8, r8)
 8006cdc:	ffffefff 	.word	0xffffefff

08006ce0 <__swrite>:
 8006ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce2:	001f      	movs	r7, r3
 8006ce4:	898b      	ldrh	r3, [r1, #12]
 8006ce6:	0005      	movs	r5, r0
 8006ce8:	000c      	movs	r4, r1
 8006cea:	0016      	movs	r6, r2
 8006cec:	05db      	lsls	r3, r3, #23
 8006cee:	d505      	bpl.n	8006cfc <__swrite+0x1c>
 8006cf0:	230e      	movs	r3, #14
 8006cf2:	5ec9      	ldrsh	r1, [r1, r3]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	f000 f874 	bl	8006de4 <_lseek_r>
 8006cfc:	89a3      	ldrh	r3, [r4, #12]
 8006cfe:	4a05      	ldr	r2, [pc, #20]	; (8006d14 <__swrite+0x34>)
 8006d00:	0028      	movs	r0, r5
 8006d02:	4013      	ands	r3, r2
 8006d04:	81a3      	strh	r3, [r4, #12]
 8006d06:	0032      	movs	r2, r6
 8006d08:	230e      	movs	r3, #14
 8006d0a:	5ee1      	ldrsh	r1, [r4, r3]
 8006d0c:	003b      	movs	r3, r7
 8006d0e:	f000 f81f 	bl	8006d50 <_write_r>
 8006d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d14:	ffffefff 	.word	0xffffefff

08006d18 <__sseek>:
 8006d18:	b570      	push	{r4, r5, r6, lr}
 8006d1a:	000c      	movs	r4, r1
 8006d1c:	250e      	movs	r5, #14
 8006d1e:	5f49      	ldrsh	r1, [r1, r5]
 8006d20:	f000 f860 	bl	8006de4 <_lseek_r>
 8006d24:	89a3      	ldrh	r3, [r4, #12]
 8006d26:	1c42      	adds	r2, r0, #1
 8006d28:	d103      	bne.n	8006d32 <__sseek+0x1a>
 8006d2a:	4a05      	ldr	r2, [pc, #20]	; (8006d40 <__sseek+0x28>)
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	81a3      	strh	r3, [r4, #12]
 8006d30:	bd70      	pop	{r4, r5, r6, pc}
 8006d32:	2280      	movs	r2, #128	; 0x80
 8006d34:	0152      	lsls	r2, r2, #5
 8006d36:	4313      	orrs	r3, r2
 8006d38:	81a3      	strh	r3, [r4, #12]
 8006d3a:	6560      	str	r0, [r4, #84]	; 0x54
 8006d3c:	e7f8      	b.n	8006d30 <__sseek+0x18>
 8006d3e:	46c0      	nop			; (mov r8, r8)
 8006d40:	ffffefff 	.word	0xffffefff

08006d44 <__sclose>:
 8006d44:	b510      	push	{r4, lr}
 8006d46:	230e      	movs	r3, #14
 8006d48:	5ec9      	ldrsh	r1, [r1, r3]
 8006d4a:	f000 f815 	bl	8006d78 <_close_r>
 8006d4e:	bd10      	pop	{r4, pc}

08006d50 <_write_r>:
 8006d50:	b570      	push	{r4, r5, r6, lr}
 8006d52:	0004      	movs	r4, r0
 8006d54:	0008      	movs	r0, r1
 8006d56:	0011      	movs	r1, r2
 8006d58:	001a      	movs	r2, r3
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	4d05      	ldr	r5, [pc, #20]	; (8006d74 <_write_r+0x24>)
 8006d5e:	602b      	str	r3, [r5, #0]
 8006d60:	f000 f8a0 	bl	8006ea4 <_write>
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	d103      	bne.n	8006d70 <_write_r+0x20>
 8006d68:	682b      	ldr	r3, [r5, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d000      	beq.n	8006d70 <_write_r+0x20>
 8006d6e:	6023      	str	r3, [r4, #0]
 8006d70:	bd70      	pop	{r4, r5, r6, pc}
 8006d72:	46c0      	nop			; (mov r8, r8)
 8006d74:	200002f8 	.word	0x200002f8

08006d78 <_close_r>:
 8006d78:	2300      	movs	r3, #0
 8006d7a:	b570      	push	{r4, r5, r6, lr}
 8006d7c:	4d06      	ldr	r5, [pc, #24]	; (8006d98 <_close_r+0x20>)
 8006d7e:	0004      	movs	r4, r0
 8006d80:	0008      	movs	r0, r1
 8006d82:	602b      	str	r3, [r5, #0]
 8006d84:	f000 f856 	bl	8006e34 <_close>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d103      	bne.n	8006d94 <_close_r+0x1c>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d000      	beq.n	8006d94 <_close_r+0x1c>
 8006d92:	6023      	str	r3, [r4, #0]
 8006d94:	bd70      	pop	{r4, r5, r6, pc}
 8006d96:	46c0      	nop			; (mov r8, r8)
 8006d98:	200002f8 	.word	0x200002f8

08006d9c <_fstat_r>:
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	b570      	push	{r4, r5, r6, lr}
 8006da0:	4d06      	ldr	r5, [pc, #24]	; (8006dbc <_fstat_r+0x20>)
 8006da2:	0004      	movs	r4, r0
 8006da4:	0008      	movs	r0, r1
 8006da6:	0011      	movs	r1, r2
 8006da8:	602b      	str	r3, [r5, #0]
 8006daa:	f000 f84b 	bl	8006e44 <_fstat>
 8006dae:	1c43      	adds	r3, r0, #1
 8006db0:	d103      	bne.n	8006dba <_fstat_r+0x1e>
 8006db2:	682b      	ldr	r3, [r5, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d000      	beq.n	8006dba <_fstat_r+0x1e>
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	bd70      	pop	{r4, r5, r6, pc}
 8006dbc:	200002f8 	.word	0x200002f8

08006dc0 <_isatty_r>:
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	b570      	push	{r4, r5, r6, lr}
 8006dc4:	4d06      	ldr	r5, [pc, #24]	; (8006de0 <_isatty_r+0x20>)
 8006dc6:	0004      	movs	r4, r0
 8006dc8:	0008      	movs	r0, r1
 8006dca:	602b      	str	r3, [r5, #0]
 8006dcc:	f000 f84a 	bl	8006e64 <_isatty>
 8006dd0:	1c43      	adds	r3, r0, #1
 8006dd2:	d103      	bne.n	8006ddc <_isatty_r+0x1c>
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d000      	beq.n	8006ddc <_isatty_r+0x1c>
 8006dda:	6023      	str	r3, [r4, #0]
 8006ddc:	bd70      	pop	{r4, r5, r6, pc}
 8006dde:	46c0      	nop			; (mov r8, r8)
 8006de0:	200002f8 	.word	0x200002f8

08006de4 <_lseek_r>:
 8006de4:	b570      	push	{r4, r5, r6, lr}
 8006de6:	0004      	movs	r4, r0
 8006de8:	0008      	movs	r0, r1
 8006dea:	0011      	movs	r1, r2
 8006dec:	001a      	movs	r2, r3
 8006dee:	2300      	movs	r3, #0
 8006df0:	4d05      	ldr	r5, [pc, #20]	; (8006e08 <_lseek_r+0x24>)
 8006df2:	602b      	str	r3, [r5, #0]
 8006df4:	f000 f846 	bl	8006e84 <_lseek>
 8006df8:	1c43      	adds	r3, r0, #1
 8006dfa:	d103      	bne.n	8006e04 <_lseek_r+0x20>
 8006dfc:	682b      	ldr	r3, [r5, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d000      	beq.n	8006e04 <_lseek_r+0x20>
 8006e02:	6023      	str	r3, [r4, #0]
 8006e04:	bd70      	pop	{r4, r5, r6, pc}
 8006e06:	46c0      	nop			; (mov r8, r8)
 8006e08:	200002f8 	.word	0x200002f8

08006e0c <_read_r>:
 8006e0c:	b570      	push	{r4, r5, r6, lr}
 8006e0e:	0004      	movs	r4, r0
 8006e10:	0008      	movs	r0, r1
 8006e12:	0011      	movs	r1, r2
 8006e14:	001a      	movs	r2, r3
 8006e16:	2300      	movs	r3, #0
 8006e18:	4d05      	ldr	r5, [pc, #20]	; (8006e30 <_read_r+0x24>)
 8006e1a:	602b      	str	r3, [r5, #0]
 8006e1c:	f000 f83a 	bl	8006e94 <_read>
 8006e20:	1c43      	adds	r3, r0, #1
 8006e22:	d103      	bne.n	8006e2c <_read_r+0x20>
 8006e24:	682b      	ldr	r3, [r5, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d000      	beq.n	8006e2c <_read_r+0x20>
 8006e2a:	6023      	str	r3, [r4, #0]
 8006e2c:	bd70      	pop	{r4, r5, r6, pc}
 8006e2e:	46c0      	nop			; (mov r8, r8)
 8006e30:	200002f8 	.word	0x200002f8

08006e34 <_close>:
 8006e34:	2258      	movs	r2, #88	; 0x58
 8006e36:	2001      	movs	r0, #1
 8006e38:	4b01      	ldr	r3, [pc, #4]	; (8006e40 <_close+0xc>)
 8006e3a:	4240      	negs	r0, r0
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	4770      	bx	lr
 8006e40:	200002f8 	.word	0x200002f8

08006e44 <_fstat>:
 8006e44:	2258      	movs	r2, #88	; 0x58
 8006e46:	2001      	movs	r0, #1
 8006e48:	4b01      	ldr	r3, [pc, #4]	; (8006e50 <_fstat+0xc>)
 8006e4a:	4240      	negs	r0, r0
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	4770      	bx	lr
 8006e50:	200002f8 	.word	0x200002f8

08006e54 <_getpid>:
 8006e54:	2258      	movs	r2, #88	; 0x58
 8006e56:	2001      	movs	r0, #1
 8006e58:	4b01      	ldr	r3, [pc, #4]	; (8006e60 <_getpid+0xc>)
 8006e5a:	4240      	negs	r0, r0
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	4770      	bx	lr
 8006e60:	200002f8 	.word	0x200002f8

08006e64 <_isatty>:
 8006e64:	2258      	movs	r2, #88	; 0x58
 8006e66:	4b02      	ldr	r3, [pc, #8]	; (8006e70 <_isatty+0xc>)
 8006e68:	2000      	movs	r0, #0
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	4770      	bx	lr
 8006e6e:	46c0      	nop			; (mov r8, r8)
 8006e70:	200002f8 	.word	0x200002f8

08006e74 <_kill>:
 8006e74:	2258      	movs	r2, #88	; 0x58
 8006e76:	2001      	movs	r0, #1
 8006e78:	4b01      	ldr	r3, [pc, #4]	; (8006e80 <_kill+0xc>)
 8006e7a:	4240      	negs	r0, r0
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	4770      	bx	lr
 8006e80:	200002f8 	.word	0x200002f8

08006e84 <_lseek>:
 8006e84:	2258      	movs	r2, #88	; 0x58
 8006e86:	2001      	movs	r0, #1
 8006e88:	4b01      	ldr	r3, [pc, #4]	; (8006e90 <_lseek+0xc>)
 8006e8a:	4240      	negs	r0, r0
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	4770      	bx	lr
 8006e90:	200002f8 	.word	0x200002f8

08006e94 <_read>:
 8006e94:	2258      	movs	r2, #88	; 0x58
 8006e96:	2001      	movs	r0, #1
 8006e98:	4b01      	ldr	r3, [pc, #4]	; (8006ea0 <_read+0xc>)
 8006e9a:	4240      	negs	r0, r0
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	4770      	bx	lr
 8006ea0:	200002f8 	.word	0x200002f8

08006ea4 <_write>:
 8006ea4:	2258      	movs	r2, #88	; 0x58
 8006ea6:	2001      	movs	r0, #1
 8006ea8:	4b01      	ldr	r3, [pc, #4]	; (8006eb0 <_write+0xc>)
 8006eaa:	4240      	negs	r0, r0
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	4770      	bx	lr
 8006eb0:	200002f8 	.word	0x200002f8

08006eb4 <_exit>:
 8006eb4:	e7fe      	b.n	8006eb4 <_exit>
	...

08006eb8 <_init>:
 8006eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eba:	46c0      	nop			; (mov r8, r8)
 8006ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ebe:	bc08      	pop	{r3}
 8006ec0:	469e      	mov	lr, r3
 8006ec2:	4770      	bx	lr

08006ec4 <_fini>:
 8006ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec6:	46c0      	nop			; (mov r8, r8)
 8006ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eca:	bc08      	pop	{r3}
 8006ecc:	469e      	mov	lr, r3
 8006ece:	4770      	bx	lr
