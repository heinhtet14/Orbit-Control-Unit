
stm32f091rc-adc-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027a0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800285c  0800285c  0001285c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002894  08002894  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002894  08002894  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002894  08002894  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002894  08002894  00012894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002898  08002898  00012898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800289c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  080028a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080028a8  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3ef  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018db  00000000  00000000  0002a423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0002bd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000718  00000000  00000000  0002c4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae33  00000000  00000000  0002cbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a448  00000000  00000000  000479fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3509  00000000  00000000  00051e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f534c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a30  00000000  00000000  000f53a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002844 	.word	0x08002844

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002844 	.word	0x08002844

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fabc 	bl	800079c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f809 	bl	800023a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f91a 	bl	8000460 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800022c:	f000 f8ca 	bl	80003c4 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000230:	f000 f8f8 	bl	8000424 <MX_DMA_Init>
  MX_ADC_Init();
 8000234:	f000 f86a 	bl	800030c <MX_ADC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000238:	e7fe      	b.n	8000238 <main+0x1c>

0800023a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023a:	b590      	push	{r4, r7, lr}
 800023c:	b099      	sub	sp, #100	; 0x64
 800023e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000240:	242c      	movs	r4, #44	; 0x2c
 8000242:	193b      	adds	r3, r7, r4
 8000244:	0018      	movs	r0, r3
 8000246:	2334      	movs	r3, #52	; 0x34
 8000248:	001a      	movs	r2, r3
 800024a:	2100      	movs	r1, #0
 800024c:	f002 faf2 	bl	8002834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	231c      	movs	r3, #28
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	0018      	movs	r0, r3
 8000256:	2310      	movs	r3, #16
 8000258:	001a      	movs	r2, r3
 800025a:	2100      	movs	r1, #0
 800025c:	f002 faea 	bl	8002834 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000260:	003b      	movs	r3, r7
 8000262:	0018      	movs	r0, r3
 8000264:	231c      	movs	r3, #28
 8000266:	001a      	movs	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f002 fae3 	bl	8002834 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800026e:	0021      	movs	r1, r4
 8000270:	187b      	adds	r3, r7, r1
 8000272:	2212      	movs	r2, #18
 8000274:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000276:	187b      	adds	r3, r7, r1
 8000278:	2201      	movs	r2, #1
 800027a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800027c:	187b      	adds	r3, r7, r1
 800027e:	2201      	movs	r2, #1
 8000280:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000282:	187b      	adds	r3, r7, r1
 8000284:	2210      	movs	r2, #16
 8000286:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000288:	187b      	adds	r3, r7, r1
 800028a:	2210      	movs	r2, #16
 800028c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2202      	movs	r2, #2
 8000292:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2280      	movs	r2, #128	; 0x80
 8000298:	0212      	lsls	r2, r2, #8
 800029a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	22a0      	movs	r2, #160	; 0xa0
 80002a0:	0392      	lsls	r2, r2, #14
 80002a2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2201      	movs	r2, #1
 80002a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	0018      	movs	r0, r3
 80002ae:	f001 f8a1 	bl	80013f4 <HAL_RCC_OscConfig>
 80002b2:	1e03      	subs	r3, r0, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x80>
  {
    Error_Handler();
 80002b6:	f000 f921 	bl	80004fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	211c      	movs	r1, #28
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2207      	movs	r2, #7
 80002c0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2202      	movs	r2, #2
 80002c6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2200      	movs	r2, #0
 80002d2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2101      	movs	r1, #1
 80002d8:	0018      	movs	r0, r3
 80002da:	f001 fc11 	bl	8001b00 <HAL_RCC_ClockConfig>
 80002de:	1e03      	subs	r3, r0, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002e2:	f000 f90b 	bl	80004fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002e6:	003b      	movs	r3, r7
 80002e8:	2202      	movs	r2, #2
 80002ea:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002ec:	003b      	movs	r3, r7
 80002ee:	2200      	movs	r2, #0
 80002f0:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f2:	003b      	movs	r3, r7
 80002f4:	0018      	movs	r0, r3
 80002f6:	f001 fd7d 	bl	8001df4 <HAL_RCCEx_PeriphCLKConfig>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80002fe:	f000 f8fd 	bl	80004fc <Error_Handler>
  }
}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	46bd      	mov	sp, r7
 8000306:	b019      	add	sp, #100	; 0x64
 8000308:	bd90      	pop	{r4, r7, pc}
	...

0800030c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	0018      	movs	r0, r3
 8000316:	230c      	movs	r3, #12
 8000318:	001a      	movs	r2, r3
 800031a:	2100      	movs	r1, #0
 800031c:	f002 fa8a 	bl	8002834 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000320:	4b26      	ldr	r3, [pc, #152]	; (80003bc <MX_ADC_Init+0xb0>)
 8000322:	4a27      	ldr	r2, [pc, #156]	; (80003c0 <MX_ADC_Init+0xb4>)
 8000324:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000326:	4b25      	ldr	r3, [pc, #148]	; (80003bc <MX_ADC_Init+0xb0>)
 8000328:	2200      	movs	r2, #0
 800032a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800032c:	4b23      	ldr	r3, [pc, #140]	; (80003bc <MX_ADC_Init+0xb0>)
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000332:	4b22      	ldr	r3, [pc, #136]	; (80003bc <MX_ADC_Init+0xb0>)
 8000334:	2200      	movs	r2, #0
 8000336:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000338:	4b20      	ldr	r3, [pc, #128]	; (80003bc <MX_ADC_Init+0xb0>)
 800033a:	2201      	movs	r2, #1
 800033c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800033e:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <MX_ADC_Init+0xb0>)
 8000340:	2204      	movs	r2, #4
 8000342:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000344:	4b1d      	ldr	r3, [pc, #116]	; (80003bc <MX_ADC_Init+0xb0>)
 8000346:	2200      	movs	r2, #0
 8000348:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800034a:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <MX_ADC_Init+0xb0>)
 800034c:	2200      	movs	r2, #0
 800034e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000350:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_ADC_Init+0xb0>)
 8000352:	2200      	movs	r2, #0
 8000354:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000356:	4b19      	ldr	r3, [pc, #100]	; (80003bc <MX_ADC_Init+0xb0>)
 8000358:	2200      	movs	r2, #0
 800035a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800035c:	4b17      	ldr	r3, [pc, #92]	; (80003bc <MX_ADC_Init+0xb0>)
 800035e:	22c2      	movs	r2, #194	; 0xc2
 8000360:	32ff      	adds	r2, #255	; 0xff
 8000362:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000364:	4b15      	ldr	r3, [pc, #84]	; (80003bc <MX_ADC_Init+0xb0>)
 8000366:	2200      	movs	r2, #0
 8000368:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800036a:	4b14      	ldr	r3, [pc, #80]	; (80003bc <MX_ADC_Init+0xb0>)
 800036c:	2224      	movs	r2, #36	; 0x24
 800036e:	2100      	movs	r1, #0
 8000370:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000372:	4b12      	ldr	r3, [pc, #72]	; (80003bc <MX_ADC_Init+0xb0>)
 8000374:	2201      	movs	r2, #1
 8000376:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000378:	4b10      	ldr	r3, [pc, #64]	; (80003bc <MX_ADC_Init+0xb0>)
 800037a:	0018      	movs	r0, r3
 800037c:	f000 fa72 	bl	8000864 <HAL_ADC_Init>
 8000380:	1e03      	subs	r3, r0, #0
 8000382:	d001      	beq.n	8000388 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000384:	f000 f8ba 	bl	80004fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	2280      	movs	r2, #128	; 0x80
 8000392:	0152      	lsls	r2, r2, #5
 8000394:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2280      	movs	r2, #128	; 0x80
 800039a:	0552      	lsls	r2, r2, #21
 800039c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800039e:	1d3a      	adds	r2, r7, #4
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <MX_ADC_Init+0xb0>)
 80003a2:	0011      	movs	r1, r2
 80003a4:	0018      	movs	r0, r3
 80003a6:	f000 fb9d 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003ae:	f000 f8a5 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b004      	add	sp, #16
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	200000f0 	.word	0x200000f0
 80003c0:	40012400 	.word	0x40012400

080003c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003ca:	4a15      	ldr	r2, [pc, #84]	; (8000420 <MX_USART2_UART_Init+0x5c>)
 80003cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003ce:	4b13      	ldr	r3, [pc, #76]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003d0:	22e1      	movs	r2, #225	; 0xe1
 80003d2:	0252      	lsls	r2, r2, #9
 80003d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003d6:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003ea:	220c      	movs	r2, #12
 80003ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <MX_USART2_UART_Init+0x58>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_USART2_UART_Init+0x58>)
 8000402:	2200      	movs	r2, #0
 8000404:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000406:	4b05      	ldr	r3, [pc, #20]	; (800041c <MX_USART2_UART_Init+0x58>)
 8000408:	0018      	movs	r0, r3
 800040a:	f001 fdf3 	bl	8001ff4 <HAL_UART_Init>
 800040e:	1e03      	subs	r3, r0, #0
 8000410:	d001      	beq.n	8000416 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000412:	f000 f873 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	2000006c 	.word	0x2000006c
 8000420:	40004400 	.word	0x40004400

08000424 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <MX_DMA_Init+0x38>)
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <MX_DMA_Init+0x38>)
 8000430:	2101      	movs	r1, #1
 8000432:	430a      	orrs	r2, r1
 8000434:	615a      	str	r2, [r3, #20]
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <MX_DMA_Init+0x38>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	2201      	movs	r2, #1
 800043c:	4013      	ands	r3, r2
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch4_7_DMA2_Ch3_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, 0, 0);
 8000442:	2200      	movs	r2, #0
 8000444:	2100      	movs	r1, #0
 8000446:	200b      	movs	r0, #11
 8000448:	f000 fd06 	bl	8000e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 800044c:	200b      	movs	r0, #11
 800044e:	f000 fd18 	bl	8000e82 <HAL_NVIC_EnableIRQ>

}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	46bd      	mov	sp, r7
 8000456:	b002      	add	sp, #8
 8000458:	bd80      	pop	{r7, pc}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	40021000 	.word	0x40021000

08000460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b089      	sub	sp, #36	; 0x24
 8000464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000466:	240c      	movs	r4, #12
 8000468:	193b      	adds	r3, r7, r4
 800046a:	0018      	movs	r0, r3
 800046c:	2314      	movs	r3, #20
 800046e:	001a      	movs	r2, r3
 8000470:	2100      	movs	r1, #0
 8000472:	f002 f9df 	bl	8002834 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000476:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <MX_GPIO_Init+0x94>)
 8000478:	695a      	ldr	r2, [r3, #20]
 800047a:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <MX_GPIO_Init+0x94>)
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	0309      	lsls	r1, r1, #12
 8000480:	430a      	orrs	r2, r1
 8000482:	615a      	str	r2, [r3, #20]
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <MX_GPIO_Init+0x94>)
 8000486:	695a      	ldr	r2, [r3, #20]
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	031b      	lsls	r3, r3, #12
 800048c:	4013      	ands	r3, r2
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000492:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <MX_GPIO_Init+0x94>)
 8000494:	695a      	ldr	r2, [r3, #20]
 8000496:	4b17      	ldr	r3, [pc, #92]	; (80004f4 <MX_GPIO_Init+0x94>)
 8000498:	2180      	movs	r1, #128	; 0x80
 800049a:	03c9      	lsls	r1, r1, #15
 800049c:	430a      	orrs	r2, r1
 800049e:	615a      	str	r2, [r3, #20]
 80004a0:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <MX_GPIO_Init+0x94>)
 80004a2:	695a      	ldr	r2, [r3, #20]
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	03db      	lsls	r3, r3, #15
 80004a8:	4013      	ands	r3, r2
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ae:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <MX_GPIO_Init+0x94>)
 80004b0:	695a      	ldr	r2, [r3, #20]
 80004b2:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <MX_GPIO_Init+0x94>)
 80004b4:	2180      	movs	r1, #128	; 0x80
 80004b6:	0289      	lsls	r1, r1, #10
 80004b8:	430a      	orrs	r2, r1
 80004ba:	615a      	str	r2, [r3, #20]
 80004bc:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <MX_GPIO_Init+0x94>)
 80004be:	695a      	ldr	r2, [r3, #20]
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	029b      	lsls	r3, r3, #10
 80004c4:	4013      	ands	r3, r2
 80004c6:	603b      	str	r3, [r7, #0]
 80004c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	2280      	movs	r2, #128	; 0x80
 80004ce:	0192      	lsls	r2, r2, #6
 80004d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	2284      	movs	r2, #132	; 0x84
 80004d6:	0392      	lsls	r2, r2, #14
 80004d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <MX_GPIO_Init+0x98>)
 80004e4:	0019      	movs	r1, r3
 80004e6:	0010      	movs	r0, r2
 80004e8:	f000 fe0c 	bl	8001104 <HAL_GPIO_Init>

}
 80004ec:	46c0      	nop			; (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	b009      	add	sp, #36	; 0x24
 80004f2:	bd90      	pop	{r4, r7, pc}
 80004f4:	40021000 	.word	0x40021000
 80004f8:	48000800 	.word	0x48000800

080004fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000500:	b672      	cpsid	i
}
 8000502:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000504:	e7fe      	b.n	8000504 <Error_Handler+0x8>
	...

08000508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <HAL_MspInit+0x44>)
 8000510:	699a      	ldr	r2, [r3, #24]
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <HAL_MspInit+0x44>)
 8000514:	2101      	movs	r1, #1
 8000516:	430a      	orrs	r2, r1
 8000518:	619a      	str	r2, [r3, #24]
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <HAL_MspInit+0x44>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	2201      	movs	r2, #1
 8000520:	4013      	ands	r3, r2
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <HAL_MspInit+0x44>)
 8000528:	69da      	ldr	r2, [r3, #28]
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <HAL_MspInit+0x44>)
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	0549      	lsls	r1, r1, #21
 8000530:	430a      	orrs	r2, r1
 8000532:	61da      	str	r2, [r3, #28]
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <HAL_MspInit+0x44>)
 8000536:	69da      	ldr	r2, [r3, #28]
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	055b      	lsls	r3, r3, #21
 800053c:	4013      	ands	r3, r2
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	b002      	add	sp, #8
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	40021000 	.word	0x40021000

08000550 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b08b      	sub	sp, #44	; 0x2c
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	2414      	movs	r4, #20
 800055a:	193b      	adds	r3, r7, r4
 800055c:	0018      	movs	r0, r3
 800055e:	2314      	movs	r3, #20
 8000560:	001a      	movs	r2, r3
 8000562:	2100      	movs	r1, #0
 8000564:	f002 f966 	bl	8002834 <memset>
  if(hadc->Instance==ADC1)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <HAL_ADC_MspInit+0x84>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d12b      	bne.n	80005ca <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000572:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <HAL_ADC_MspInit+0x88>)
 8000574:	699a      	ldr	r2, [r3, #24]
 8000576:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <HAL_ADC_MspInit+0x88>)
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	0089      	lsls	r1, r1, #2
 800057c:	430a      	orrs	r2, r1
 800057e:	619a      	str	r2, [r3, #24]
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <HAL_ADC_MspInit+0x88>)
 8000582:	699a      	ldr	r2, [r3, #24]
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	4013      	ands	r3, r2
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <HAL_ADC_MspInit+0x88>)
 8000590:	695a      	ldr	r2, [r3, #20]
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <HAL_ADC_MspInit+0x88>)
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	0289      	lsls	r1, r1, #10
 8000598:	430a      	orrs	r2, r1
 800059a:	615a      	str	r2, [r3, #20]
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <HAL_ADC_MspInit+0x88>)
 800059e:	695a      	ldr	r2, [r3, #20]
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	029b      	lsls	r3, r3, #10
 80005a4:	4013      	ands	r3, r2
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005aa:	193b      	adds	r3, r7, r4
 80005ac:	2201      	movs	r2, #1
 80005ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	2203      	movs	r2, #3
 80005b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	193a      	adds	r2, r7, r4
 80005be:	2390      	movs	r3, #144	; 0x90
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	0011      	movs	r1, r2
 80005c4:	0018      	movs	r0, r3
 80005c6:	f000 fd9d 	bl	8001104 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b00b      	add	sp, #44	; 0x2c
 80005d0:	bd90      	pop	{r4, r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	40012400 	.word	0x40012400
 80005d8:	40021000 	.word	0x40021000

080005dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b08b      	sub	sp, #44	; 0x2c
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	2414      	movs	r4, #20
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	0018      	movs	r0, r3
 80005ea:	2314      	movs	r3, #20
 80005ec:	001a      	movs	r2, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	f002 f920 	bl	8002834 <memset>
  if(huart->Instance==USART2)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a38      	ldr	r2, [pc, #224]	; (80006dc <HAL_UART_MspInit+0x100>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d169      	bne.n	80006d2 <HAL_UART_MspInit+0xf6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005fe:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <HAL_UART_MspInit+0x104>)
 8000600:	69da      	ldr	r2, [r3, #28]
 8000602:	4b37      	ldr	r3, [pc, #220]	; (80006e0 <HAL_UART_MspInit+0x104>)
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	0289      	lsls	r1, r1, #10
 8000608:	430a      	orrs	r2, r1
 800060a:	61da      	str	r2, [r3, #28]
 800060c:	4b34      	ldr	r3, [pc, #208]	; (80006e0 <HAL_UART_MspInit+0x104>)
 800060e:	69da      	ldr	r2, [r3, #28]
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	029b      	lsls	r3, r3, #10
 8000614:	4013      	ands	r3, r2
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <HAL_UART_MspInit+0x104>)
 800061c:	695a      	ldr	r2, [r3, #20]
 800061e:	4b30      	ldr	r3, [pc, #192]	; (80006e0 <HAL_UART_MspInit+0x104>)
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	0289      	lsls	r1, r1, #10
 8000624:	430a      	orrs	r2, r1
 8000626:	615a      	str	r2, [r3, #20]
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <HAL_UART_MspInit+0x104>)
 800062a:	695a      	ldr	r2, [r3, #20]
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	029b      	lsls	r3, r3, #10
 8000630:	4013      	ands	r3, r2
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000636:	0021      	movs	r1, r4
 8000638:	187b      	adds	r3, r7, r1
 800063a:	220c      	movs	r2, #12
 800063c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2202      	movs	r2, #2
 8000642:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2201      	movs	r2, #1
 8000654:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000656:	187a      	adds	r2, r7, r1
 8000658:	2390      	movs	r3, #144	; 0x90
 800065a:	05db      	lsls	r3, r3, #23
 800065c:	0011      	movs	r1, r2
 800065e:	0018      	movs	r0, r3
 8000660:	f000 fd50 	bl	8001104 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <HAL_UART_MspInit+0x108>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <HAL_UART_MspInit+0x10c>)
 8000668:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <HAL_UART_MspInit+0x108>)
 800066c:	2210      	movs	r2, #16
 800066e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <HAL_UART_MspInit+0x108>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <HAL_UART_MspInit+0x108>)
 8000678:	2280      	movs	r2, #128	; 0x80
 800067a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <HAL_UART_MspInit+0x108>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <HAL_UART_MspInit+0x108>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000688:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <HAL_UART_MspInit+0x108>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <HAL_UART_MspInit+0x108>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <HAL_UART_MspInit+0x108>)
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fc10 	bl	8000ebc <HAL_DMA_Init>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80006a0:	f7ff ff2c 	bl	80004fc <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);
 80006a4:	4a11      	ldr	r2, [pc, #68]	; (80006ec <HAL_UART_MspInit+0x110>)
 80006a6:	23a8      	movs	r3, #168	; 0xa8
 80006a8:	58d3      	ldr	r3, [r2, r3]
 80006aa:	4910      	ldr	r1, [pc, #64]	; (80006ec <HAL_UART_MspInit+0x110>)
 80006ac:	4a10      	ldr	r2, [pc, #64]	; (80006f0 <HAL_UART_MspInit+0x114>)
 80006ae:	4013      	ands	r3, r2
 80006b0:	22a8      	movs	r2, #168	; 0xa8
 80006b2:	508b      	str	r3, [r1, r2]
 80006b4:	4a0d      	ldr	r2, [pc, #52]	; (80006ec <HAL_UART_MspInit+0x110>)
 80006b6:	23a8      	movs	r3, #168	; 0xa8
 80006b8:	58d3      	ldr	r3, [r2, r3]
 80006ba:	490c      	ldr	r1, [pc, #48]	; (80006ec <HAL_UART_MspInit+0x110>)
 80006bc:	2290      	movs	r2, #144	; 0x90
 80006be:	0512      	lsls	r2, r2, #20
 80006c0:	4313      	orrs	r3, r2
 80006c2:	22a8      	movs	r2, #168	; 0xa8
 80006c4:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a06      	ldr	r2, [pc, #24]	; (80006e4 <HAL_UART_MspInit+0x108>)
 80006ca:	66da      	str	r2, [r3, #108]	; 0x6c
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <HAL_UART_MspInit+0x108>)
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b00b      	add	sp, #44	; 0x2c
 80006d8:	bd90      	pop	{r4, r7, pc}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	40004400 	.word	0x40004400
 80006e0:	40021000 	.word	0x40021000
 80006e4:	20000028 	.word	0x20000028
 80006e8:	40020080 	.word	0x40020080
 80006ec:	40020000 	.word	0x40020000
 80006f0:	f0ffffff 	.word	0xf0ffffff

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <NMI_Handler+0x4>

080006fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <HardFault_Handler+0x4>

08000700 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000718:	f000 f888 	bl	800082c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x14>)
 800072a:	0018      	movs	r0, r3
 800072c:	f000 fc0e 	bl	8000f4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	20000028 	.word	0x20000028

0800073c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800074a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <LoopForever+0x6>)
  ldr r1, =_edata
 800074e:	490e      	ldr	r1, [pc, #56]	; (8000788 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000750:	4a0e      	ldr	r2, [pc, #56]	; (800078c <LoopForever+0xe>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000754:	e002      	b.n	800075c <LoopCopyDataInit>

08000756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075a:	3304      	adds	r3, #4

0800075c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800075c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000760:	d3f9      	bcc.n	8000756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000764:	4c0b      	ldr	r4, [pc, #44]	; (8000794 <LoopForever+0x16>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000768:	e001      	b.n	800076e <LoopFillZerobss>

0800076a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800076c:	3204      	adds	r2, #4

0800076e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000770:	d3fb      	bcc.n	800076a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000772:	f7ff ffe3 	bl	800073c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000776:	f002 f839 	bl	80027ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077a:	f7ff fd4f 	bl	800021c <main>

0800077e <LoopForever>:

LoopForever:
    b LoopForever
 800077e:	e7fe      	b.n	800077e <LoopForever>
  ldr   r0, =_estack
 8000780:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800078c:	0800289c 	.word	0x0800289c
  ldr r2, =_sbss
 8000790:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000794:	20000134 	.word	0x20000134

08000798 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC1_COMP_IRQHandler>
	...

0800079c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <HAL_Init+0x24>)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_Init+0x24>)
 80007a6:	2110      	movs	r1, #16
 80007a8:	430a      	orrs	r2, r1
 80007aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007ac:	2000      	movs	r0, #0
 80007ae:	f000 f809 	bl	80007c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b2:	f7ff fea9 	bl	8000508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b6:	2300      	movs	r3, #0
}
 80007b8:	0018      	movs	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	40022000 	.word	0x40022000

080007c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <HAL_InitTick+0x5c>)
 80007ce:	681c      	ldr	r4, [r3, #0]
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <HAL_InitTick+0x60>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	0019      	movs	r1, r3
 80007d6:	23fa      	movs	r3, #250	; 0xfa
 80007d8:	0098      	lsls	r0, r3, #2
 80007da:	f7ff fc93 	bl	8000104 <__udivsi3>
 80007de:	0003      	movs	r3, r0
 80007e0:	0019      	movs	r1, r3
 80007e2:	0020      	movs	r0, r4
 80007e4:	f7ff fc8e 	bl	8000104 <__udivsi3>
 80007e8:	0003      	movs	r3, r0
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 fb59 	bl	8000ea2 <HAL_SYSTICK_Config>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007f4:	2301      	movs	r3, #1
 80007f6:	e00f      	b.n	8000818 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b03      	cmp	r3, #3
 80007fc:	d80b      	bhi.n	8000816 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	2301      	movs	r3, #1
 8000802:	425b      	negs	r3, r3
 8000804:	2200      	movs	r2, #0
 8000806:	0018      	movs	r0, r3
 8000808:	f000 fb26 	bl	8000e58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_InitTick+0x64>)
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000812:	2300      	movs	r3, #0
 8000814:	e000      	b.n	8000818 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
}
 8000818:	0018      	movs	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	b003      	add	sp, #12
 800081e:	bd90      	pop	{r4, r7, pc}
 8000820:	20000000 	.word	0x20000000
 8000824:	20000008 	.word	0x20000008
 8000828:	20000004 	.word	0x20000004

0800082c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_IncTick+0x1c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	001a      	movs	r2, r3
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_IncTick+0x20>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	18d2      	adds	r2, r2, r3
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <HAL_IncTick+0x20>)
 800083e:	601a      	str	r2, [r3, #0]
}
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	20000008 	.word	0x20000008
 800084c:	20000130 	.word	0x20000130

08000850 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  return uwTick;
 8000854:	4b02      	ldr	r3, [pc, #8]	; (8000860 <HAL_GetTick+0x10>)
 8000856:	681b      	ldr	r3, [r3, #0]
}
 8000858:	0018      	movs	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	20000130 	.word	0x20000130

08000864 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800086c:	230f      	movs	r3, #15
 800086e:	18fb      	adds	r3, r7, r3
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d101      	bne.n	8000882 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800087e:	2301      	movs	r3, #1
 8000880:	e125      	b.n	8000ace <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000886:	2b00      	cmp	r3, #0
 8000888:	d10a      	bne.n	80008a0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2200      	movs	r2, #0
 800088e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2234      	movs	r2, #52	; 0x34
 8000894:	2100      	movs	r1, #0
 8000896:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	0018      	movs	r0, r3
 800089c:	f7ff fe58 	bl	8000550 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008a4:	2210      	movs	r2, #16
 80008a6:	4013      	ands	r3, r2
 80008a8:	d000      	beq.n	80008ac <HAL_ADC_Init+0x48>
 80008aa:	e103      	b.n	8000ab4 <HAL_ADC_Init+0x250>
 80008ac:	230f      	movs	r3, #15
 80008ae:	18fb      	adds	r3, r7, r3
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d000      	beq.n	80008b8 <HAL_ADC_Init+0x54>
 80008b6:	e0fd      	b.n	8000ab4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	2204      	movs	r2, #4
 80008c0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80008c2:	d000      	beq.n	80008c6 <HAL_ADC_Init+0x62>
 80008c4:	e0f6      	b.n	8000ab4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008ca:	4a83      	ldr	r2, [pc, #524]	; (8000ad8 <HAL_ADC_Init+0x274>)
 80008cc:	4013      	ands	r3, r2
 80008ce:	2202      	movs	r2, #2
 80008d0:	431a      	orrs	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	2203      	movs	r2, #3
 80008de:	4013      	ands	r3, r2
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d112      	bne.n	800090a <HAL_ADC_Init+0xa6>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2201      	movs	r2, #1
 80008ec:	4013      	ands	r3, r2
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d009      	beq.n	8000906 <HAL_ADC_Init+0xa2>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	68da      	ldr	r2, [r3, #12]
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	021b      	lsls	r3, r3, #8
 80008fc:	401a      	ands	r2, r3
 80008fe:	2380      	movs	r3, #128	; 0x80
 8000900:	021b      	lsls	r3, r3, #8
 8000902:	429a      	cmp	r2, r3
 8000904:	d101      	bne.n	800090a <HAL_ADC_Init+0xa6>
 8000906:	2301      	movs	r3, #1
 8000908:	e000      	b.n	800090c <HAL_ADC_Init+0xa8>
 800090a:	2300      	movs	r3, #0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d116      	bne.n	800093e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	2218      	movs	r2, #24
 8000918:	4393      	bics	r3, r2
 800091a:	0019      	movs	r1, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	689a      	ldr	r2, [r3, #8]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	430a      	orrs	r2, r1
 8000926:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	691b      	ldr	r3, [r3, #16]
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	0899      	lsrs	r1, r3, #2
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	685a      	ldr	r2, [r3, #4]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	430a      	orrs	r2, r1
 800093c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	68da      	ldr	r2, [r3, #12]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4964      	ldr	r1, [pc, #400]	; (8000adc <HAL_ADC_Init+0x278>)
 800094a:	400a      	ands	r2, r1
 800094c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7e1b      	ldrb	r3, [r3, #24]
 8000952:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	7e5b      	ldrb	r3, [r3, #25]
 8000958:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800095a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	7e9b      	ldrb	r3, [r3, #26]
 8000960:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000962:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000968:	2b01      	cmp	r3, #1
 800096a:	d002      	beq.n	8000972 <HAL_ADC_Init+0x10e>
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	015b      	lsls	r3, r3, #5
 8000970:	e000      	b.n	8000974 <HAL_ADC_Init+0x110>
 8000972:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000974:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800097a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	691b      	ldr	r3, [r3, #16]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d101      	bne.n	8000988 <HAL_ADC_Init+0x124>
 8000984:	2304      	movs	r3, #4
 8000986:	e000      	b.n	800098a <HAL_ADC_Init+0x126>
 8000988:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800098a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2124      	movs	r1, #36	; 0x24
 8000990:	5c5b      	ldrb	r3, [r3, r1]
 8000992:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000994:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	4313      	orrs	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	7edb      	ldrb	r3, [r3, #27]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d115      	bne.n	80009d0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	7e9b      	ldrb	r3, [r3, #26]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d105      	bne.n	80009b8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	2280      	movs	r2, #128	; 0x80
 80009b0:	0252      	lsls	r2, r2, #9
 80009b2:	4313      	orrs	r3, r2
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	e00b      	b.n	80009d0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009bc:	2220      	movs	r2, #32
 80009be:	431a      	orrs	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009c8:	2201      	movs	r2, #1
 80009ca:	431a      	orrs	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	69da      	ldr	r2, [r3, #28]
 80009d4:	23c2      	movs	r3, #194	; 0xc2
 80009d6:	33ff      	adds	r3, #255	; 0xff
 80009d8:	429a      	cmp	r2, r3
 80009da:	d007      	beq.n	80009ec <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80009e4:	4313      	orrs	r3, r2
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	68d9      	ldr	r1, [r3, #12]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	430a      	orrs	r2, r1
 80009fa:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	055b      	lsls	r3, r3, #21
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d01b      	beq.n	8000a40 <HAL_ADC_Init+0x1dc>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d017      	beq.n	8000a40 <HAL_ADC_Init+0x1dc>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d013      	beq.n	8000a40 <HAL_ADC_Init+0x1dc>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1c:	2b03      	cmp	r3, #3
 8000a1e:	d00f      	beq.n	8000a40 <HAL_ADC_Init+0x1dc>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	d00b      	beq.n	8000a40 <HAL_ADC_Init+0x1dc>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2c:	2b05      	cmp	r3, #5
 8000a2e:	d007      	beq.n	8000a40 <HAL_ADC_Init+0x1dc>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a34:	2b06      	cmp	r3, #6
 8000a36:	d003      	beq.n	8000a40 <HAL_ADC_Init+0x1dc>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a3c:	2b07      	cmp	r3, #7
 8000a3e:	d112      	bne.n	8000a66 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	695a      	ldr	r2, [r3, #20]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2107      	movs	r1, #7
 8000a4c:	438a      	bics	r2, r1
 8000a4e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6959      	ldr	r1, [r3, #20]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5a:	2207      	movs	r2, #7
 8000a5c:	401a      	ands	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	430a      	orrs	r2, r1
 8000a64:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <HAL_ADC_Init+0x27c>)
 8000a6e:	4013      	ands	r3, r2
 8000a70:	68ba      	ldr	r2, [r7, #8]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d10b      	bne.n	8000a8e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a80:	2203      	movs	r2, #3
 8000a82:	4393      	bics	r3, r2
 8000a84:	2201      	movs	r2, #1
 8000a86:	431a      	orrs	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000a8c:	e01c      	b.n	8000ac8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a92:	2212      	movs	r2, #18
 8000a94:	4393      	bics	r3, r2
 8000a96:	2210      	movs	r2, #16
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	431a      	orrs	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000aaa:	230f      	movs	r3, #15
 8000aac:	18fb      	adds	r3, r7, r3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000ab2:	e009      	b.n	8000ac8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ab8:	2210      	movs	r2, #16
 8000aba:	431a      	orrs	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ac8:	230f      	movs	r3, #15
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	781b      	ldrb	r3, [r3, #0]
}
 8000ace:	0018      	movs	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b004      	add	sp, #16
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	fffffefd 	.word	0xfffffefd
 8000adc:	fffe0219 	.word	0xfffe0219
 8000ae0:	833fffe7 	.word	0x833fffe7

08000ae4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000aee:	230f      	movs	r3, #15
 8000af0:	18fb      	adds	r3, r7, r3
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000afe:	2380      	movs	r3, #128	; 0x80
 8000b00:	055b      	lsls	r3, r3, #21
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d011      	beq.n	8000b2a <HAL_ADC_ConfigChannel+0x46>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d00d      	beq.n	8000b2a <HAL_ADC_ConfigChannel+0x46>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d009      	beq.n	8000b2a <HAL_ADC_ConfigChannel+0x46>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	d005      	beq.n	8000b2a <HAL_ADC_ConfigChannel+0x46>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	d001      	beq.n	8000b2a <HAL_ADC_ConfigChannel+0x46>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2234      	movs	r2, #52	; 0x34
 8000b2e:	5c9b      	ldrb	r3, [r3, r2]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d101      	bne.n	8000b38 <HAL_ADC_ConfigChannel+0x54>
 8000b34:	2302      	movs	r3, #2
 8000b36:	e0d0      	b.n	8000cda <HAL_ADC_ConfigChannel+0x1f6>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2234      	movs	r2, #52	; 0x34
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	2204      	movs	r2, #4
 8000b48:	4013      	ands	r3, r2
 8000b4a:	d000      	beq.n	8000b4e <HAL_ADC_ConfigChannel+0x6a>
 8000b4c:	e0b4      	b.n	8000cb8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	4a64      	ldr	r2, [pc, #400]	; (8000ce4 <HAL_ADC_ConfigChannel+0x200>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d100      	bne.n	8000b5a <HAL_ADC_ConfigChannel+0x76>
 8000b58:	e082      	b.n	8000c60 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2201      	movs	r2, #1
 8000b66:	409a      	lsls	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	055b      	lsls	r3, r3, #21
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d037      	beq.n	8000bec <HAL_ADC_ConfigChannel+0x108>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d033      	beq.n	8000bec <HAL_ADC_ConfigChannel+0x108>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d02f      	beq.n	8000bec <HAL_ADC_ConfigChannel+0x108>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d02b      	beq.n	8000bec <HAL_ADC_ConfigChannel+0x108>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b98:	2b04      	cmp	r3, #4
 8000b9a:	d027      	beq.n	8000bec <HAL_ADC_ConfigChannel+0x108>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba0:	2b05      	cmp	r3, #5
 8000ba2:	d023      	beq.n	8000bec <HAL_ADC_ConfigChannel+0x108>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba8:	2b06      	cmp	r3, #6
 8000baa:	d01f      	beq.n	8000bec <HAL_ADC_ConfigChannel+0x108>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb0:	2b07      	cmp	r3, #7
 8000bb2:	d01b      	beq.n	8000bec <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	689a      	ldr	r2, [r3, #8]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	2107      	movs	r1, #7
 8000bc0:	400b      	ands	r3, r1
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d012      	beq.n	8000bec <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	695a      	ldr	r2, [r3, #20]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2107      	movs	r1, #7
 8000bd2:	438a      	bics	r2, r1
 8000bd4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	6959      	ldr	r1, [r3, #20]
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	2207      	movs	r2, #7
 8000be2:	401a      	ands	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	430a      	orrs	r2, r1
 8000bea:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b10      	cmp	r3, #16
 8000bf2:	d007      	beq.n	8000c04 <HAL_ADC_ConfigChannel+0x120>
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b11      	cmp	r3, #17
 8000bfa:	d003      	beq.n	8000c04 <HAL_ADC_ConfigChannel+0x120>
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b12      	cmp	r3, #18
 8000c02:	d163      	bne.n	8000ccc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000c04:	4b38      	ldr	r3, [pc, #224]	; (8000ce8 <HAL_ADC_ConfigChannel+0x204>)
 8000c06:	6819      	ldr	r1, [r3, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b10      	cmp	r3, #16
 8000c0e:	d009      	beq.n	8000c24 <HAL_ADC_ConfigChannel+0x140>
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b11      	cmp	r3, #17
 8000c16:	d102      	bne.n	8000c1e <HAL_ADC_ConfigChannel+0x13a>
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	03db      	lsls	r3, r3, #15
 8000c1c:	e004      	b.n	8000c28 <HAL_ADC_ConfigChannel+0x144>
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	045b      	lsls	r3, r3, #17
 8000c22:	e001      	b.n	8000c28 <HAL_ADC_ConfigChannel+0x144>
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	041b      	lsls	r3, r3, #16
 8000c28:	4a2f      	ldr	r2, [pc, #188]	; (8000ce8 <HAL_ADC_ConfigChannel+0x204>)
 8000c2a:	430b      	orrs	r3, r1
 8000c2c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b10      	cmp	r3, #16
 8000c34:	d14a      	bne.n	8000ccc <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c36:	4b2d      	ldr	r3, [pc, #180]	; (8000cec <HAL_ADC_ConfigChannel+0x208>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	492d      	ldr	r1, [pc, #180]	; (8000cf0 <HAL_ADC_ConfigChannel+0x20c>)
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff fa61 	bl	8000104 <__udivsi3>
 8000c42:	0003      	movs	r3, r0
 8000c44:	001a      	movs	r2, r3
 8000c46:	0013      	movs	r3, r2
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	189b      	adds	r3, r3, r2
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c50:	e002      	b.n	8000c58 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	3b01      	subs	r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f9      	bne.n	8000c52 <HAL_ADC_ConfigChannel+0x16e>
 8000c5e:	e035      	b.n	8000ccc <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	4099      	lsls	r1, r3
 8000c6e:	000b      	movs	r3, r1
 8000c70:	43d9      	mvns	r1, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	400a      	ands	r2, r1
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b10      	cmp	r3, #16
 8000c80:	d007      	beq.n	8000c92 <HAL_ADC_ConfigChannel+0x1ae>
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b11      	cmp	r3, #17
 8000c88:	d003      	beq.n	8000c92 <HAL_ADC_ConfigChannel+0x1ae>
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b12      	cmp	r3, #18
 8000c90:	d11c      	bne.n	8000ccc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_ADC_ConfigChannel+0x204>)
 8000c94:	6819      	ldr	r1, [r3, #0]
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b10      	cmp	r3, #16
 8000c9c:	d007      	beq.n	8000cae <HAL_ADC_ConfigChannel+0x1ca>
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b11      	cmp	r3, #17
 8000ca4:	d101      	bne.n	8000caa <HAL_ADC_ConfigChannel+0x1c6>
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <HAL_ADC_ConfigChannel+0x210>)
 8000ca8:	e002      	b.n	8000cb0 <HAL_ADC_ConfigChannel+0x1cc>
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <HAL_ADC_ConfigChannel+0x214>)
 8000cac:	e000      	b.n	8000cb0 <HAL_ADC_ConfigChannel+0x1cc>
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <HAL_ADC_ConfigChannel+0x218>)
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <HAL_ADC_ConfigChannel+0x204>)
 8000cb2:	400b      	ands	r3, r1
 8000cb4:	6013      	str	r3, [r2, #0]
 8000cb6:	e009      	b.n	8000ccc <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cbc:	2220      	movs	r2, #32
 8000cbe:	431a      	orrs	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	2201      	movs	r2, #1
 8000cca:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2234      	movs	r2, #52	; 0x34
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	781b      	ldrb	r3, [r3, #0]
}
 8000cda:	0018      	movs	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b004      	add	sp, #16
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	00001001 	.word	0x00001001
 8000ce8:	40012708 	.word	0x40012708
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	000f4240 	.word	0x000f4240
 8000cf4:	ffbfffff 	.word	0xffbfffff
 8000cf8:	feffffff 	.word	0xfeffffff
 8000cfc:	ff7fffff 	.word	0xff7fffff

08000d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	0002      	movs	r2, r0
 8000d08:	1dfb      	adds	r3, r7, #7
 8000d0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	1dfb      	adds	r3, r7, #7
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b7f      	cmp	r3, #127	; 0x7f
 8000d12:	d809      	bhi.n	8000d28 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	001a      	movs	r2, r3
 8000d1a:	231f      	movs	r3, #31
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <__NVIC_EnableIRQ+0x30>)
 8000d20:	2101      	movs	r1, #1
 8000d22:	4091      	lsls	r1, r2
 8000d24:	000a      	movs	r2, r1
 8000d26:	601a      	str	r2, [r3, #0]
  }
}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b002      	add	sp, #8
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	0002      	movs	r2, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b7f      	cmp	r3, #127	; 0x7f
 8000d48:	d828      	bhi.n	8000d9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d4a:	4a2f      	ldr	r2, [pc, #188]	; (8000e08 <__NVIC_SetPriority+0xd4>)
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b25b      	sxtb	r3, r3
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	33c0      	adds	r3, #192	; 0xc0
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	589b      	ldr	r3, [r3, r2]
 8000d5a:	1dfa      	adds	r2, r7, #7
 8000d5c:	7812      	ldrb	r2, [r2, #0]
 8000d5e:	0011      	movs	r1, r2
 8000d60:	2203      	movs	r2, #3
 8000d62:	400a      	ands	r2, r1
 8000d64:	00d2      	lsls	r2, r2, #3
 8000d66:	21ff      	movs	r1, #255	; 0xff
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	000a      	movs	r2, r1
 8000d6c:	43d2      	mvns	r2, r2
 8000d6e:	401a      	ands	r2, r3
 8000d70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	019b      	lsls	r3, r3, #6
 8000d76:	22ff      	movs	r2, #255	; 0xff
 8000d78:	401a      	ands	r2, r3
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	0018      	movs	r0, r3
 8000d80:	2303      	movs	r3, #3
 8000d82:	4003      	ands	r3, r0
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d88:	481f      	ldr	r0, [pc, #124]	; (8000e08 <__NVIC_SetPriority+0xd4>)
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	430a      	orrs	r2, r1
 8000d94:	33c0      	adds	r3, #192	; 0xc0
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d9a:	e031      	b.n	8000e00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d9c:	4a1b      	ldr	r2, [pc, #108]	; (8000e0c <__NVIC_SetPriority+0xd8>)
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	0019      	movs	r1, r3
 8000da4:	230f      	movs	r3, #15
 8000da6:	400b      	ands	r3, r1
 8000da8:	3b08      	subs	r3, #8
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	3306      	adds	r3, #6
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	18d3      	adds	r3, r2, r3
 8000db2:	3304      	adds	r3, #4
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	1dfa      	adds	r2, r7, #7
 8000db8:	7812      	ldrb	r2, [r2, #0]
 8000dba:	0011      	movs	r1, r2
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	400a      	ands	r2, r1
 8000dc0:	00d2      	lsls	r2, r2, #3
 8000dc2:	21ff      	movs	r1, #255	; 0xff
 8000dc4:	4091      	lsls	r1, r2
 8000dc6:	000a      	movs	r2, r1
 8000dc8:	43d2      	mvns	r2, r2
 8000dca:	401a      	ands	r2, r3
 8000dcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	019b      	lsls	r3, r3, #6
 8000dd2:	22ff      	movs	r2, #255	; 0xff
 8000dd4:	401a      	ands	r2, r3
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	0018      	movs	r0, r3
 8000ddc:	2303      	movs	r3, #3
 8000dde:	4003      	ands	r3, r0
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de4:	4809      	ldr	r0, [pc, #36]	; (8000e0c <__NVIC_SetPriority+0xd8>)
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	001c      	movs	r4, r3
 8000dec:	230f      	movs	r3, #15
 8000dee:	4023      	ands	r3, r4
 8000df0:	3b08      	subs	r3, #8
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	430a      	orrs	r2, r1
 8000df6:	3306      	adds	r3, #6
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	18c3      	adds	r3, r0, r3
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	601a      	str	r2, [r3, #0]
}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b003      	add	sp, #12
 8000e06:	bd90      	pop	{r4, r7, pc}
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	1e5a      	subs	r2, r3, #1
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	045b      	lsls	r3, r3, #17
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d301      	bcc.n	8000e28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e24:	2301      	movs	r3, #1
 8000e26:	e010      	b.n	8000e4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <SysTick_Config+0x44>)
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	3a01      	subs	r2, #1
 8000e2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e30:	2301      	movs	r3, #1
 8000e32:	425b      	negs	r3, r3
 8000e34:	2103      	movs	r1, #3
 8000e36:	0018      	movs	r0, r3
 8000e38:	f7ff ff7c 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <SysTick_Config+0x44>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <SysTick_Config+0x44>)
 8000e44:	2207      	movs	r2, #7
 8000e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b002      	add	sp, #8
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	e000e010 	.word	0xe000e010

08000e58 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
 8000e62:	210f      	movs	r1, #15
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	1c02      	adds	r2, r0, #0
 8000e68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	0011      	movs	r1, r2
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff ff5d 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b004      	add	sp, #16
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	0002      	movs	r2, r0
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	0018      	movs	r0, r3
 8000e96:	f7ff ff33 	bl	8000d00 <__NVIC_EnableIRQ>
}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b002      	add	sp, #8
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff ffaf 	bl	8000e10 <SysTick_Config>
 8000eb2:	0003      	movs	r3, r0
}
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b002      	add	sp, #8
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e036      	b.n	8000f40 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2221      	movs	r2, #33	; 0x21
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4a18      	ldr	r2, [pc, #96]	; (8000f48 <HAL_DMA_Init+0x8c>)
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000efe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	0018      	movs	r0, r3
 8000f24:	f000 f8b4 	bl	8001090 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2221      	movs	r2, #33	; 0x21
 8000f32:	2101      	movs	r1, #1
 8000f34:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2220      	movs	r2, #32
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
}  
 8000f40:	0018      	movs	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b004      	add	sp, #16
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	ffffc00f 	.word	0xffffc00f

08000f4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	2204      	movs	r2, #4
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	0013      	movs	r3, r2
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	4013      	ands	r3, r2
 8000f72:	d024      	beq.n	8000fbe <HAL_DMA_IRQHandler+0x72>
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	2204      	movs	r2, #4
 8000f78:	4013      	ands	r3, r2
 8000f7a:	d020      	beq.n	8000fbe <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2220      	movs	r2, #32
 8000f84:	4013      	ands	r3, r2
 8000f86:	d107      	bne.n	8000f98 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2104      	movs	r1, #4
 8000f94:	438a      	bics	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa0:	2104      	movs	r1, #4
 8000fa2:	4091      	lsls	r1, r2
 8000fa4:	000a      	movs	r2, r1
 8000fa6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d100      	bne.n	8000fb2 <HAL_DMA_IRQHandler+0x66>
 8000fb0:	e06a      	b.n	8001088 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	0010      	movs	r0, r2
 8000fba:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000fbc:	e064      	b.n	8001088 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	409a      	lsls	r2, r3
 8000fc6:	0013      	movs	r3, r2
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d02b      	beq.n	8001026 <HAL_DMA_IRQHandler+0xda>
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	d027      	beq.n	8001026 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2220      	movs	r2, #32
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d10b      	bne.n	8000ffa <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	210a      	movs	r1, #10
 8000fee:	438a      	bics	r2, r1
 8000ff0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2221      	movs	r2, #33	; 0x21
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001002:	2102      	movs	r1, #2
 8001004:	4091      	lsls	r1, r2
 8001006:	000a      	movs	r2, r1
 8001008:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2220      	movs	r2, #32
 800100e:	2100      	movs	r1, #0
 8001010:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001016:	2b00      	cmp	r3, #0
 8001018:	d036      	beq.n	8001088 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	0010      	movs	r0, r2
 8001022:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001024:	e030      	b.n	8001088 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	2208      	movs	r2, #8
 800102c:	409a      	lsls	r2, r3
 800102e:	0013      	movs	r3, r2
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	4013      	ands	r3, r2
 8001034:	d028      	beq.n	8001088 <HAL_DMA_IRQHandler+0x13c>
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	2208      	movs	r2, #8
 800103a:	4013      	ands	r3, r2
 800103c:	d024      	beq.n	8001088 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	210e      	movs	r1, #14
 800104a:	438a      	bics	r2, r1
 800104c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001056:	2101      	movs	r1, #1
 8001058:	4091      	lsls	r1, r2
 800105a:	000a      	movs	r2, r1
 800105c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2221      	movs	r2, #33	; 0x21
 8001068:	2101      	movs	r1, #1
 800106a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2220      	movs	r2, #32
 8001070:	2100      	movs	r1, #0
 8001072:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	0010      	movs	r0, r2
 8001084:	4798      	blx	r3
    }
   }
}  
 8001086:	e7ff      	b.n	8001088 <HAL_DMA_IRQHandler+0x13c>
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	b004      	add	sp, #16
 800108e:	bd80      	pop	{r7, pc}

08001090 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	001a      	movs	r2, r3
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <DMA_CalcBaseAndBitshift+0x60>)
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d810      	bhi.n	80010c6 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <DMA_CalcBaseAndBitshift+0x64>)
 80010aa:	4694      	mov	ip, r2
 80010ac:	4463      	add	r3, ip
 80010ae:	2114      	movs	r1, #20
 80010b0:	0018      	movs	r0, r3
 80010b2:	f7ff f827 	bl	8000104 <__udivsi3>
 80010b6:	0003      	movs	r3, r0
 80010b8:	009a      	lsls	r2, r3, #2
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <DMA_CalcBaseAndBitshift+0x68>)
 80010c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80010c4:	e00f      	b.n	80010e6 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a0c      	ldr	r2, [pc, #48]	; (80010fc <DMA_CalcBaseAndBitshift+0x6c>)
 80010cc:	4694      	mov	ip, r2
 80010ce:	4463      	add	r3, ip
 80010d0:	2114      	movs	r1, #20
 80010d2:	0018      	movs	r0, r3
 80010d4:	f7ff f816 	bl	8000104 <__udivsi3>
 80010d8:	0003      	movs	r3, r0
 80010da:	009a      	lsls	r2, r3, #2
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a07      	ldr	r2, [pc, #28]	; (8001100 <DMA_CalcBaseAndBitshift+0x70>)
 80010e4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b002      	add	sp, #8
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	40020407 	.word	0x40020407
 80010f4:	bffdfff8 	.word	0xbffdfff8
 80010f8:	40020000 	.word	0x40020000
 80010fc:	bffdfbf8 	.word	0xbffdfbf8
 8001100:	40020400 	.word	0x40020400

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001112:	e155      	b.n	80013c0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2101      	movs	r1, #1
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	4091      	lsls	r1, r2
 800111e:	000a      	movs	r2, r1
 8001120:	4013      	ands	r3, r2
 8001122:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d100      	bne.n	800112c <HAL_GPIO_Init+0x28>
 800112a:	e146      	b.n	80013ba <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2203      	movs	r2, #3
 8001132:	4013      	ands	r3, r2
 8001134:	2b01      	cmp	r3, #1
 8001136:	d005      	beq.n	8001144 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2203      	movs	r2, #3
 800113e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001140:	2b02      	cmp	r3, #2
 8001142:	d130      	bne.n	80011a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	409a      	lsls	r2, r3
 8001152:	0013      	movs	r3, r2
 8001154:	43da      	mvns	r2, r3
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	68da      	ldr	r2, [r3, #12]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	409a      	lsls	r2, r3
 8001166:	0013      	movs	r3, r2
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800117a:	2201      	movs	r2, #1
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
 8001180:	0013      	movs	r3, r2
 8001182:	43da      	mvns	r2, r3
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	091b      	lsrs	r3, r3, #4
 8001190:	2201      	movs	r2, #1
 8001192:	401a      	ands	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	409a      	lsls	r2, r3
 8001198:	0013      	movs	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2203      	movs	r2, #3
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d017      	beq.n	80011e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	2203      	movs	r2, #3
 80011be:	409a      	lsls	r2, r3
 80011c0:	0013      	movs	r3, r2
 80011c2:	43da      	mvns	r2, r3
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	409a      	lsls	r2, r3
 80011d4:	0013      	movs	r3, r2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2203      	movs	r2, #3
 80011e8:	4013      	ands	r3, r2
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d123      	bne.n	8001236 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	58d3      	ldr	r3, [r2, r3]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	2207      	movs	r2, #7
 8001200:	4013      	ands	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	409a      	lsls	r2, r3
 8001208:	0013      	movs	r3, r2
 800120a:	43da      	mvns	r2, r3
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	691a      	ldr	r2, [r3, #16]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	2107      	movs	r1, #7
 800121a:	400b      	ands	r3, r1
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	409a      	lsls	r2, r3
 8001220:	0013      	movs	r3, r2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	08da      	lsrs	r2, r3, #3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3208      	adds	r2, #8
 8001230:	0092      	lsls	r2, r2, #2
 8001232:	6939      	ldr	r1, [r7, #16]
 8001234:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	409a      	lsls	r2, r3
 8001244:	0013      	movs	r3, r2
 8001246:	43da      	mvns	r2, r3
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2203      	movs	r2, #3
 8001254:	401a      	ands	r2, r3
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	409a      	lsls	r2, r3
 800125c:	0013      	movs	r3, r2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	23c0      	movs	r3, #192	; 0xc0
 8001270:	029b      	lsls	r3, r3, #10
 8001272:	4013      	ands	r3, r2
 8001274:	d100      	bne.n	8001278 <HAL_GPIO_Init+0x174>
 8001276:	e0a0      	b.n	80013ba <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001278:	4b57      	ldr	r3, [pc, #348]	; (80013d8 <HAL_GPIO_Init+0x2d4>)
 800127a:	699a      	ldr	r2, [r3, #24]
 800127c:	4b56      	ldr	r3, [pc, #344]	; (80013d8 <HAL_GPIO_Init+0x2d4>)
 800127e:	2101      	movs	r1, #1
 8001280:	430a      	orrs	r2, r1
 8001282:	619a      	str	r2, [r3, #24]
 8001284:	4b54      	ldr	r3, [pc, #336]	; (80013d8 <HAL_GPIO_Init+0x2d4>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	2201      	movs	r2, #1
 800128a:	4013      	ands	r3, r2
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001290:	4a52      	ldr	r2, [pc, #328]	; (80013dc <HAL_GPIO_Init+0x2d8>)
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	589b      	ldr	r3, [r3, r2]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	2203      	movs	r2, #3
 80012a2:	4013      	ands	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	409a      	lsls	r2, r3
 80012aa:	0013      	movs	r3, r2
 80012ac:	43da      	mvns	r2, r3
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	2390      	movs	r3, #144	; 0x90
 80012b8:	05db      	lsls	r3, r3, #23
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d019      	beq.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a47      	ldr	r2, [pc, #284]	; (80013e0 <HAL_GPIO_Init+0x2dc>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d013      	beq.n	80012ee <HAL_GPIO_Init+0x1ea>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a46      	ldr	r2, [pc, #280]	; (80013e4 <HAL_GPIO_Init+0x2e0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d00d      	beq.n	80012ea <HAL_GPIO_Init+0x1e6>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a45      	ldr	r2, [pc, #276]	; (80013e8 <HAL_GPIO_Init+0x2e4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d007      	beq.n	80012e6 <HAL_GPIO_Init+0x1e2>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a44      	ldr	r2, [pc, #272]	; (80013ec <HAL_GPIO_Init+0x2e8>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d101      	bne.n	80012e2 <HAL_GPIO_Init+0x1de>
 80012de:	2304      	movs	r3, #4
 80012e0:	e008      	b.n	80012f4 <HAL_GPIO_Init+0x1f0>
 80012e2:	2305      	movs	r3, #5
 80012e4:	e006      	b.n	80012f4 <HAL_GPIO_Init+0x1f0>
 80012e6:	2303      	movs	r3, #3
 80012e8:	e004      	b.n	80012f4 <HAL_GPIO_Init+0x1f0>
 80012ea:	2302      	movs	r3, #2
 80012ec:	e002      	b.n	80012f4 <HAL_GPIO_Init+0x1f0>
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <HAL_GPIO_Init+0x1f0>
 80012f2:	2300      	movs	r3, #0
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	2103      	movs	r1, #3
 80012f8:	400a      	ands	r2, r1
 80012fa:	0092      	lsls	r2, r2, #2
 80012fc:	4093      	lsls	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001304:	4935      	ldr	r1, [pc, #212]	; (80013dc <HAL_GPIO_Init+0x2d8>)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	3302      	adds	r3, #2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001312:	4b37      	ldr	r3, [pc, #220]	; (80013f0 <HAL_GPIO_Init+0x2ec>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	43da      	mvns	r2, r3
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	025b      	lsls	r3, r3, #9
 800132a:	4013      	ands	r3, r2
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4313      	orrs	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001336:	4b2e      	ldr	r3, [pc, #184]	; (80013f0 <HAL_GPIO_Init+0x2ec>)
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800133c:	4b2c      	ldr	r3, [pc, #176]	; (80013f0 <HAL_GPIO_Init+0x2ec>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	43da      	mvns	r2, r3
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	029b      	lsls	r3, r3, #10
 8001354:	4013      	ands	r3, r2
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001360:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <HAL_GPIO_Init+0x2ec>)
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001366:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <HAL_GPIO_Init+0x2ec>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	43da      	mvns	r2, r3
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	2380      	movs	r3, #128	; 0x80
 800137c:	035b      	lsls	r3, r3, #13
 800137e:	4013      	ands	r3, r2
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_GPIO_Init+0x2ec>)
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <HAL_GPIO_Init+0x2ec>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	43da      	mvns	r2, r3
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	039b      	lsls	r3, r3, #14
 80013a8:	4013      	ands	r3, r2
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <HAL_GPIO_Init+0x2ec>)
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	3301      	adds	r3, #1
 80013be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	40da      	lsrs	r2, r3
 80013c8:	1e13      	subs	r3, r2, #0
 80013ca:	d000      	beq.n	80013ce <HAL_GPIO_Init+0x2ca>
 80013cc:	e6a2      	b.n	8001114 <HAL_GPIO_Init+0x10>
  } 
}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	46c0      	nop			; (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b006      	add	sp, #24
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010000 	.word	0x40010000
 80013e0:	48000400 	.word	0x48000400
 80013e4:	48000800 	.word	0x48000800
 80013e8:	48000c00 	.word	0x48000c00
 80013ec:	48001000 	.word	0x48001000
 80013f0:	40010400 	.word	0x40010400

080013f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d102      	bne.n	8001408 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	f000 fb76 	bl	8001af4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2201      	movs	r2, #1
 800140e:	4013      	ands	r3, r2
 8001410:	d100      	bne.n	8001414 <HAL_RCC_OscConfig+0x20>
 8001412:	e08e      	b.n	8001532 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001414:	4bc5      	ldr	r3, [pc, #788]	; (800172c <HAL_RCC_OscConfig+0x338>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	220c      	movs	r2, #12
 800141a:	4013      	ands	r3, r2
 800141c:	2b04      	cmp	r3, #4
 800141e:	d00e      	beq.n	800143e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001420:	4bc2      	ldr	r3, [pc, #776]	; (800172c <HAL_RCC_OscConfig+0x338>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	220c      	movs	r2, #12
 8001426:	4013      	ands	r3, r2
 8001428:	2b08      	cmp	r3, #8
 800142a:	d117      	bne.n	800145c <HAL_RCC_OscConfig+0x68>
 800142c:	4bbf      	ldr	r3, [pc, #764]	; (800172c <HAL_RCC_OscConfig+0x338>)
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	23c0      	movs	r3, #192	; 0xc0
 8001432:	025b      	lsls	r3, r3, #9
 8001434:	401a      	ands	r2, r3
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	025b      	lsls	r3, r3, #9
 800143a:	429a      	cmp	r2, r3
 800143c:	d10e      	bne.n	800145c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143e:	4bbb      	ldr	r3, [pc, #748]	; (800172c <HAL_RCC_OscConfig+0x338>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	029b      	lsls	r3, r3, #10
 8001446:	4013      	ands	r3, r2
 8001448:	d100      	bne.n	800144c <HAL_RCC_OscConfig+0x58>
 800144a:	e071      	b.n	8001530 <HAL_RCC_OscConfig+0x13c>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d000      	beq.n	8001456 <HAL_RCC_OscConfig+0x62>
 8001454:	e06c      	b.n	8001530 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	f000 fb4c 	bl	8001af4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d107      	bne.n	8001474 <HAL_RCC_OscConfig+0x80>
 8001464:	4bb1      	ldr	r3, [pc, #708]	; (800172c <HAL_RCC_OscConfig+0x338>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4bb0      	ldr	r3, [pc, #704]	; (800172c <HAL_RCC_OscConfig+0x338>)
 800146a:	2180      	movs	r1, #128	; 0x80
 800146c:	0249      	lsls	r1, r1, #9
 800146e:	430a      	orrs	r2, r1
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	e02f      	b.n	80014d4 <HAL_RCC_OscConfig+0xe0>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10c      	bne.n	8001496 <HAL_RCC_OscConfig+0xa2>
 800147c:	4bab      	ldr	r3, [pc, #684]	; (800172c <HAL_RCC_OscConfig+0x338>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4baa      	ldr	r3, [pc, #680]	; (800172c <HAL_RCC_OscConfig+0x338>)
 8001482:	49ab      	ldr	r1, [pc, #684]	; (8001730 <HAL_RCC_OscConfig+0x33c>)
 8001484:	400a      	ands	r2, r1
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	4ba8      	ldr	r3, [pc, #672]	; (800172c <HAL_RCC_OscConfig+0x338>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4ba7      	ldr	r3, [pc, #668]	; (800172c <HAL_RCC_OscConfig+0x338>)
 800148e:	49a9      	ldr	r1, [pc, #676]	; (8001734 <HAL_RCC_OscConfig+0x340>)
 8001490:	400a      	ands	r2, r1
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	e01e      	b.n	80014d4 <HAL_RCC_OscConfig+0xe0>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b05      	cmp	r3, #5
 800149c:	d10e      	bne.n	80014bc <HAL_RCC_OscConfig+0xc8>
 800149e:	4ba3      	ldr	r3, [pc, #652]	; (800172c <HAL_RCC_OscConfig+0x338>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4ba2      	ldr	r3, [pc, #648]	; (800172c <HAL_RCC_OscConfig+0x338>)
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	02c9      	lsls	r1, r1, #11
 80014a8:	430a      	orrs	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	4b9f      	ldr	r3, [pc, #636]	; (800172c <HAL_RCC_OscConfig+0x338>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b9e      	ldr	r3, [pc, #632]	; (800172c <HAL_RCC_OscConfig+0x338>)
 80014b2:	2180      	movs	r1, #128	; 0x80
 80014b4:	0249      	lsls	r1, r1, #9
 80014b6:	430a      	orrs	r2, r1
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	e00b      	b.n	80014d4 <HAL_RCC_OscConfig+0xe0>
 80014bc:	4b9b      	ldr	r3, [pc, #620]	; (800172c <HAL_RCC_OscConfig+0x338>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b9a      	ldr	r3, [pc, #616]	; (800172c <HAL_RCC_OscConfig+0x338>)
 80014c2:	499b      	ldr	r1, [pc, #620]	; (8001730 <HAL_RCC_OscConfig+0x33c>)
 80014c4:	400a      	ands	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	4b98      	ldr	r3, [pc, #608]	; (800172c <HAL_RCC_OscConfig+0x338>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b97      	ldr	r3, [pc, #604]	; (800172c <HAL_RCC_OscConfig+0x338>)
 80014ce:	4999      	ldr	r1, [pc, #612]	; (8001734 <HAL_RCC_OscConfig+0x340>)
 80014d0:	400a      	ands	r2, r1
 80014d2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d014      	beq.n	8001506 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff f9b8 	bl	8000850 <HAL_GetTick>
 80014e0:	0003      	movs	r3, r0
 80014e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e6:	f7ff f9b3 	bl	8000850 <HAL_GetTick>
 80014ea:	0002      	movs	r2, r0
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b64      	cmp	r3, #100	; 0x64
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e2fd      	b.n	8001af4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f8:	4b8c      	ldr	r3, [pc, #560]	; (800172c <HAL_RCC_OscConfig+0x338>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	029b      	lsls	r3, r3, #10
 8001500:	4013      	ands	r3, r2
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0xf2>
 8001504:	e015      	b.n	8001532 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001506:	f7ff f9a3 	bl	8000850 <HAL_GetTick>
 800150a:	0003      	movs	r3, r0
 800150c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff f99e 	bl	8000850 <HAL_GetTick>
 8001514:	0002      	movs	r2, r0
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	; 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e2e8      	b.n	8001af4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001522:	4b82      	ldr	r3, [pc, #520]	; (800172c <HAL_RCC_OscConfig+0x338>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	029b      	lsls	r3, r3, #10
 800152a:	4013      	ands	r3, r2
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x11c>
 800152e:	e000      	b.n	8001532 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001530:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2202      	movs	r2, #2
 8001538:	4013      	ands	r3, r2
 800153a:	d100      	bne.n	800153e <HAL_RCC_OscConfig+0x14a>
 800153c:	e06c      	b.n	8001618 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800153e:	4b7b      	ldr	r3, [pc, #492]	; (800172c <HAL_RCC_OscConfig+0x338>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	220c      	movs	r2, #12
 8001544:	4013      	ands	r3, r2
 8001546:	d00e      	beq.n	8001566 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001548:	4b78      	ldr	r3, [pc, #480]	; (800172c <HAL_RCC_OscConfig+0x338>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	220c      	movs	r2, #12
 800154e:	4013      	ands	r3, r2
 8001550:	2b08      	cmp	r3, #8
 8001552:	d11f      	bne.n	8001594 <HAL_RCC_OscConfig+0x1a0>
 8001554:	4b75      	ldr	r3, [pc, #468]	; (800172c <HAL_RCC_OscConfig+0x338>)
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	23c0      	movs	r3, #192	; 0xc0
 800155a:	025b      	lsls	r3, r3, #9
 800155c:	401a      	ands	r2, r3
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	429a      	cmp	r2, r3
 8001564:	d116      	bne.n	8001594 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001566:	4b71      	ldr	r3, [pc, #452]	; (800172c <HAL_RCC_OscConfig+0x338>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2202      	movs	r2, #2
 800156c:	4013      	ands	r3, r2
 800156e:	d005      	beq.n	800157c <HAL_RCC_OscConfig+0x188>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d001      	beq.n	800157c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e2bb      	b.n	8001af4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157c:	4b6b      	ldr	r3, [pc, #428]	; (800172c <HAL_RCC_OscConfig+0x338>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	22f8      	movs	r2, #248	; 0xf8
 8001582:	4393      	bics	r3, r2
 8001584:	0019      	movs	r1, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	00da      	lsls	r2, r3, #3
 800158c:	4b67      	ldr	r3, [pc, #412]	; (800172c <HAL_RCC_OscConfig+0x338>)
 800158e:	430a      	orrs	r2, r1
 8001590:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001592:	e041      	b.n	8001618 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d024      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800159c:	4b63      	ldr	r3, [pc, #396]	; (800172c <HAL_RCC_OscConfig+0x338>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b62      	ldr	r3, [pc, #392]	; (800172c <HAL_RCC_OscConfig+0x338>)
 80015a2:	2101      	movs	r1, #1
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff f952 	bl	8000850 <HAL_GetTick>
 80015ac:	0003      	movs	r3, r0
 80015ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b2:	f7ff f94d 	bl	8000850 <HAL_GetTick>
 80015b6:	0002      	movs	r2, r0
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e297      	b.n	8001af4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c4:	4b59      	ldr	r3, [pc, #356]	; (800172c <HAL_RCC_OscConfig+0x338>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2202      	movs	r2, #2
 80015ca:	4013      	ands	r3, r2
 80015cc:	d0f1      	beq.n	80015b2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ce:	4b57      	ldr	r3, [pc, #348]	; (800172c <HAL_RCC_OscConfig+0x338>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	22f8      	movs	r2, #248	; 0xf8
 80015d4:	4393      	bics	r3, r2
 80015d6:	0019      	movs	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	00da      	lsls	r2, r3, #3
 80015de:	4b53      	ldr	r3, [pc, #332]	; (800172c <HAL_RCC_OscConfig+0x338>)
 80015e0:	430a      	orrs	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	e018      	b.n	8001618 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e6:	4b51      	ldr	r3, [pc, #324]	; (800172c <HAL_RCC_OscConfig+0x338>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4b50      	ldr	r3, [pc, #320]	; (800172c <HAL_RCC_OscConfig+0x338>)
 80015ec:	2101      	movs	r1, #1
 80015ee:	438a      	bics	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f2:	f7ff f92d 	bl	8000850 <HAL_GetTick>
 80015f6:	0003      	movs	r3, r0
 80015f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015fc:	f7ff f928 	bl	8000850 <HAL_GetTick>
 8001600:	0002      	movs	r2, r0
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e272      	b.n	8001af4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160e:	4b47      	ldr	r3, [pc, #284]	; (800172c <HAL_RCC_OscConfig+0x338>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2202      	movs	r2, #2
 8001614:	4013      	ands	r3, r2
 8001616:	d1f1      	bne.n	80015fc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2208      	movs	r2, #8
 800161e:	4013      	ands	r3, r2
 8001620:	d036      	beq.n	8001690 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d019      	beq.n	800165e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162a:	4b40      	ldr	r3, [pc, #256]	; (800172c <HAL_RCC_OscConfig+0x338>)
 800162c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800162e:	4b3f      	ldr	r3, [pc, #252]	; (800172c <HAL_RCC_OscConfig+0x338>)
 8001630:	2101      	movs	r1, #1
 8001632:	430a      	orrs	r2, r1
 8001634:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001636:	f7ff f90b 	bl	8000850 <HAL_GetTick>
 800163a:	0003      	movs	r3, r0
 800163c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001640:	f7ff f906 	bl	8000850 <HAL_GetTick>
 8001644:	0002      	movs	r2, r0
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e250      	b.n	8001af4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001652:	4b36      	ldr	r3, [pc, #216]	; (800172c <HAL_RCC_OscConfig+0x338>)
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	2202      	movs	r2, #2
 8001658:	4013      	ands	r3, r2
 800165a:	d0f1      	beq.n	8001640 <HAL_RCC_OscConfig+0x24c>
 800165c:	e018      	b.n	8001690 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165e:	4b33      	ldr	r3, [pc, #204]	; (800172c <HAL_RCC_OscConfig+0x338>)
 8001660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001662:	4b32      	ldr	r3, [pc, #200]	; (800172c <HAL_RCC_OscConfig+0x338>)
 8001664:	2101      	movs	r1, #1
 8001666:	438a      	bics	r2, r1
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166a:	f7ff f8f1 	bl	8000850 <HAL_GetTick>
 800166e:	0003      	movs	r3, r0
 8001670:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001674:	f7ff f8ec 	bl	8000850 <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e236      	b.n	8001af4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001686:	4b29      	ldr	r3, [pc, #164]	; (800172c <HAL_RCC_OscConfig+0x338>)
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	2202      	movs	r2, #2
 800168c:	4013      	ands	r3, r2
 800168e:	d1f1      	bne.n	8001674 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2204      	movs	r2, #4
 8001696:	4013      	ands	r3, r2
 8001698:	d100      	bne.n	800169c <HAL_RCC_OscConfig+0x2a8>
 800169a:	e0b5      	b.n	8001808 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800169c:	201f      	movs	r0, #31
 800169e:	183b      	adds	r3, r7, r0
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016a4:	4b21      	ldr	r3, [pc, #132]	; (800172c <HAL_RCC_OscConfig+0x338>)
 80016a6:	69da      	ldr	r2, [r3, #28]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	055b      	lsls	r3, r3, #21
 80016ac:	4013      	ands	r3, r2
 80016ae:	d110      	bne.n	80016d2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b0:	4b1e      	ldr	r3, [pc, #120]	; (800172c <HAL_RCC_OscConfig+0x338>)
 80016b2:	69da      	ldr	r2, [r3, #28]
 80016b4:	4b1d      	ldr	r3, [pc, #116]	; (800172c <HAL_RCC_OscConfig+0x338>)
 80016b6:	2180      	movs	r1, #128	; 0x80
 80016b8:	0549      	lsls	r1, r1, #21
 80016ba:	430a      	orrs	r2, r1
 80016bc:	61da      	str	r2, [r3, #28]
 80016be:	4b1b      	ldr	r3, [pc, #108]	; (800172c <HAL_RCC_OscConfig+0x338>)
 80016c0:	69da      	ldr	r2, [r3, #28]
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	055b      	lsls	r3, r3, #21
 80016c6:	4013      	ands	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016cc:	183b      	adds	r3, r7, r0
 80016ce:	2201      	movs	r2, #1
 80016d0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d2:	4b19      	ldr	r3, [pc, #100]	; (8001738 <HAL_RCC_OscConfig+0x344>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4013      	ands	r3, r2
 80016dc:	d11a      	bne.n	8001714 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016de:	4b16      	ldr	r3, [pc, #88]	; (8001738 <HAL_RCC_OscConfig+0x344>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_RCC_OscConfig+0x344>)
 80016e4:	2180      	movs	r1, #128	; 0x80
 80016e6:	0049      	lsls	r1, r1, #1
 80016e8:	430a      	orrs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ec:	f7ff f8b0 	bl	8000850 <HAL_GetTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f6:	f7ff f8ab 	bl	8000850 <HAL_GetTick>
 80016fa:	0002      	movs	r2, r0
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b64      	cmp	r3, #100	; 0x64
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e1f5      	b.n	8001af4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <HAL_RCC_OscConfig+0x344>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4013      	ands	r3, r2
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d10f      	bne.n	800173c <HAL_RCC_OscConfig+0x348>
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <HAL_RCC_OscConfig+0x338>)
 800171e:	6a1a      	ldr	r2, [r3, #32]
 8001720:	4b02      	ldr	r3, [pc, #8]	; (800172c <HAL_RCC_OscConfig+0x338>)
 8001722:	2101      	movs	r1, #1
 8001724:	430a      	orrs	r2, r1
 8001726:	621a      	str	r2, [r3, #32]
 8001728:	e036      	b.n	8001798 <HAL_RCC_OscConfig+0x3a4>
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	40021000 	.word	0x40021000
 8001730:	fffeffff 	.word	0xfffeffff
 8001734:	fffbffff 	.word	0xfffbffff
 8001738:	40007000 	.word	0x40007000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10c      	bne.n	800175e <HAL_RCC_OscConfig+0x36a>
 8001744:	4bca      	ldr	r3, [pc, #808]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001746:	6a1a      	ldr	r2, [r3, #32]
 8001748:	4bc9      	ldr	r3, [pc, #804]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 800174a:	2101      	movs	r1, #1
 800174c:	438a      	bics	r2, r1
 800174e:	621a      	str	r2, [r3, #32]
 8001750:	4bc7      	ldr	r3, [pc, #796]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001752:	6a1a      	ldr	r2, [r3, #32]
 8001754:	4bc6      	ldr	r3, [pc, #792]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001756:	2104      	movs	r1, #4
 8001758:	438a      	bics	r2, r1
 800175a:	621a      	str	r2, [r3, #32]
 800175c:	e01c      	b.n	8001798 <HAL_RCC_OscConfig+0x3a4>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b05      	cmp	r3, #5
 8001764:	d10c      	bne.n	8001780 <HAL_RCC_OscConfig+0x38c>
 8001766:	4bc2      	ldr	r3, [pc, #776]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001768:	6a1a      	ldr	r2, [r3, #32]
 800176a:	4bc1      	ldr	r3, [pc, #772]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 800176c:	2104      	movs	r1, #4
 800176e:	430a      	orrs	r2, r1
 8001770:	621a      	str	r2, [r3, #32]
 8001772:	4bbf      	ldr	r3, [pc, #764]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001774:	6a1a      	ldr	r2, [r3, #32]
 8001776:	4bbe      	ldr	r3, [pc, #760]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001778:	2101      	movs	r1, #1
 800177a:	430a      	orrs	r2, r1
 800177c:	621a      	str	r2, [r3, #32]
 800177e:	e00b      	b.n	8001798 <HAL_RCC_OscConfig+0x3a4>
 8001780:	4bbb      	ldr	r3, [pc, #748]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001782:	6a1a      	ldr	r2, [r3, #32]
 8001784:	4bba      	ldr	r3, [pc, #744]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001786:	2101      	movs	r1, #1
 8001788:	438a      	bics	r2, r1
 800178a:	621a      	str	r2, [r3, #32]
 800178c:	4bb8      	ldr	r3, [pc, #736]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 800178e:	6a1a      	ldr	r2, [r3, #32]
 8001790:	4bb7      	ldr	r3, [pc, #732]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001792:	2104      	movs	r1, #4
 8001794:	438a      	bics	r2, r1
 8001796:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d014      	beq.n	80017ca <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a0:	f7ff f856 	bl	8000850 <HAL_GetTick>
 80017a4:	0003      	movs	r3, r0
 80017a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a8:	e009      	b.n	80017be <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017aa:	f7ff f851 	bl	8000850 <HAL_GetTick>
 80017ae:	0002      	movs	r2, r0
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	4aaf      	ldr	r2, [pc, #700]	; (8001a74 <HAL_RCC_OscConfig+0x680>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e19a      	b.n	8001af4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017be:	4bac      	ldr	r3, [pc, #688]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	2202      	movs	r2, #2
 80017c4:	4013      	ands	r3, r2
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x3b6>
 80017c8:	e013      	b.n	80017f2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ca:	f7ff f841 	bl	8000850 <HAL_GetTick>
 80017ce:	0003      	movs	r3, r0
 80017d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d2:	e009      	b.n	80017e8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d4:	f7ff f83c 	bl	8000850 <HAL_GetTick>
 80017d8:	0002      	movs	r2, r0
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	4aa5      	ldr	r2, [pc, #660]	; (8001a74 <HAL_RCC_OscConfig+0x680>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e185      	b.n	8001af4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e8:	4ba1      	ldr	r3, [pc, #644]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	2202      	movs	r2, #2
 80017ee:	4013      	ands	r3, r2
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017f2:	231f      	movs	r3, #31
 80017f4:	18fb      	adds	r3, r7, r3
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d105      	bne.n	8001808 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017fc:	4b9c      	ldr	r3, [pc, #624]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 80017fe:	69da      	ldr	r2, [r3, #28]
 8001800:	4b9b      	ldr	r3, [pc, #620]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001802:	499d      	ldr	r1, [pc, #628]	; (8001a78 <HAL_RCC_OscConfig+0x684>)
 8001804:	400a      	ands	r2, r1
 8001806:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2210      	movs	r2, #16
 800180e:	4013      	ands	r3, r2
 8001810:	d063      	beq.n	80018da <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d12a      	bne.n	8001870 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800181a:	4b95      	ldr	r3, [pc, #596]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 800181c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800181e:	4b94      	ldr	r3, [pc, #592]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001820:	2104      	movs	r1, #4
 8001822:	430a      	orrs	r2, r1
 8001824:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001826:	4b92      	ldr	r3, [pc, #584]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800182a:	4b91      	ldr	r3, [pc, #580]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 800182c:	2101      	movs	r1, #1
 800182e:	430a      	orrs	r2, r1
 8001830:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001832:	f7ff f80d 	bl	8000850 <HAL_GetTick>
 8001836:	0003      	movs	r3, r0
 8001838:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800183c:	f7ff f808 	bl	8000850 <HAL_GetTick>
 8001840:	0002      	movs	r2, r0
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e152      	b.n	8001af4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800184e:	4b88      	ldr	r3, [pc, #544]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001852:	2202      	movs	r2, #2
 8001854:	4013      	ands	r3, r2
 8001856:	d0f1      	beq.n	800183c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001858:	4b85      	ldr	r3, [pc, #532]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 800185a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185c:	22f8      	movs	r2, #248	; 0xf8
 800185e:	4393      	bics	r3, r2
 8001860:	0019      	movs	r1, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	00da      	lsls	r2, r3, #3
 8001868:	4b81      	ldr	r3, [pc, #516]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 800186a:	430a      	orrs	r2, r1
 800186c:	635a      	str	r2, [r3, #52]	; 0x34
 800186e:	e034      	b.n	80018da <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	3305      	adds	r3, #5
 8001876:	d111      	bne.n	800189c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001878:	4b7d      	ldr	r3, [pc, #500]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 800187a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800187c:	4b7c      	ldr	r3, [pc, #496]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 800187e:	2104      	movs	r1, #4
 8001880:	438a      	bics	r2, r1
 8001882:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001884:	4b7a      	ldr	r3, [pc, #488]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001888:	22f8      	movs	r2, #248	; 0xf8
 800188a:	4393      	bics	r3, r2
 800188c:	0019      	movs	r1, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	00da      	lsls	r2, r3, #3
 8001894:	4b76      	ldr	r3, [pc, #472]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001896:	430a      	orrs	r2, r1
 8001898:	635a      	str	r2, [r3, #52]	; 0x34
 800189a:	e01e      	b.n	80018da <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800189c:	4b74      	ldr	r3, [pc, #464]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 800189e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018a0:	4b73      	ldr	r3, [pc, #460]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 80018a2:	2104      	movs	r1, #4
 80018a4:	430a      	orrs	r2, r1
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80018a8:	4b71      	ldr	r3, [pc, #452]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 80018aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ac:	4b70      	ldr	r3, [pc, #448]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 80018ae:	2101      	movs	r1, #1
 80018b0:	438a      	bics	r2, r1
 80018b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b4:	f7fe ffcc 	bl	8000850 <HAL_GetTick>
 80018b8:	0003      	movs	r3, r0
 80018ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018be:	f7fe ffc7 	bl	8000850 <HAL_GetTick>
 80018c2:	0002      	movs	r2, r0
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e111      	b.n	8001af4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018d0:	4b67      	ldr	r3, [pc, #412]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 80018d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d4:	2202      	movs	r2, #2
 80018d6:	4013      	ands	r3, r2
 80018d8:	d1f1      	bne.n	80018be <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2220      	movs	r2, #32
 80018e0:	4013      	ands	r3, r2
 80018e2:	d05c      	beq.n	800199e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80018e4:	4b62      	ldr	r3, [pc, #392]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	220c      	movs	r2, #12
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b0c      	cmp	r3, #12
 80018ee:	d00e      	beq.n	800190e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80018f0:	4b5f      	ldr	r3, [pc, #380]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	220c      	movs	r2, #12
 80018f6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d114      	bne.n	8001926 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80018fc:	4b5c      	ldr	r3, [pc, #368]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	23c0      	movs	r3, #192	; 0xc0
 8001902:	025b      	lsls	r3, r3, #9
 8001904:	401a      	ands	r2, r3
 8001906:	23c0      	movs	r3, #192	; 0xc0
 8001908:	025b      	lsls	r3, r3, #9
 800190a:	429a      	cmp	r2, r3
 800190c:	d10b      	bne.n	8001926 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800190e:	4b58      	ldr	r3, [pc, #352]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	025b      	lsls	r3, r3, #9
 8001916:	4013      	ands	r3, r2
 8001918:	d040      	beq.n	800199c <HAL_RCC_OscConfig+0x5a8>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d03c      	beq.n	800199c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e0e6      	b.n	8001af4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d01b      	beq.n	8001966 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800192e:	4b50      	ldr	r3, [pc, #320]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001932:	4b4f      	ldr	r3, [pc, #316]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001934:	2180      	movs	r1, #128	; 0x80
 8001936:	0249      	lsls	r1, r1, #9
 8001938:	430a      	orrs	r2, r1
 800193a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7fe ff88 	bl	8000850 <HAL_GetTick>
 8001940:	0003      	movs	r3, r0
 8001942:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001946:	f7fe ff83 	bl	8000850 <HAL_GetTick>
 800194a:	0002      	movs	r2, r0
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e0cd      	b.n	8001af4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001958:	4b45      	ldr	r3, [pc, #276]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 800195a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	025b      	lsls	r3, r3, #9
 8001960:	4013      	ands	r3, r2
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x552>
 8001964:	e01b      	b.n	800199e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001966:	4b42      	ldr	r3, [pc, #264]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800196a:	4b41      	ldr	r3, [pc, #260]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 800196c:	4943      	ldr	r1, [pc, #268]	; (8001a7c <HAL_RCC_OscConfig+0x688>)
 800196e:	400a      	ands	r2, r1
 8001970:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001972:	f7fe ff6d 	bl	8000850 <HAL_GetTick>
 8001976:	0003      	movs	r3, r0
 8001978:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800197c:	f7fe ff68 	bl	8000850 <HAL_GetTick>
 8001980:	0002      	movs	r2, r0
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e0b2      	b.n	8001af4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800198e:	4b38      	ldr	r3, [pc, #224]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	025b      	lsls	r3, r3, #9
 8001996:	4013      	ands	r3, r2
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x588>
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800199c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d100      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5b4>
 80019a6:	e0a4      	b.n	8001af2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a8:	4b31      	ldr	r3, [pc, #196]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	220c      	movs	r2, #12
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d100      	bne.n	80019b6 <HAL_RCC_OscConfig+0x5c2>
 80019b4:	e078      	b.n	8001aa8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d14c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019be:	4b2c      	ldr	r3, [pc, #176]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 80019c4:	492e      	ldr	r1, [pc, #184]	; (8001a80 <HAL_RCC_OscConfig+0x68c>)
 80019c6:	400a      	ands	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7fe ff41 	bl	8000850 <HAL_GetTick>
 80019ce:	0003      	movs	r3, r0
 80019d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d4:	f7fe ff3c 	bl	8000850 <HAL_GetTick>
 80019d8:	0002      	movs	r2, r0
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e086      	b.n	8001af4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e6:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	049b      	lsls	r3, r3, #18
 80019ee:	4013      	ands	r3, r2
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f2:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	220f      	movs	r2, #15
 80019f8:	4393      	bics	r3, r2
 80019fa:	0019      	movs	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001a02:	430a      	orrs	r2, r1
 8001a04:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a06:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4a1e      	ldr	r2, [pc, #120]	; (8001a84 <HAL_RCC_OscConfig+0x690>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	0019      	movs	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001a26:	2180      	movs	r1, #128	; 0x80
 8001a28:	0449      	lsls	r1, r1, #17
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7fe ff0f 	bl	8000850 <HAL_GetTick>
 8001a32:	0003      	movs	r3, r0
 8001a34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a38:	f7fe ff0a 	bl	8000850 <HAL_GetTick>
 8001a3c:	0002      	movs	r2, r0
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e054      	b.n	8001af4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	049b      	lsls	r3, r3, #18
 8001a52:	4013      	ands	r3, r2
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x644>
 8001a56:	e04c      	b.n	8001af2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <HAL_RCC_OscConfig+0x67c>)
 8001a5e:	4908      	ldr	r1, [pc, #32]	; (8001a80 <HAL_RCC_OscConfig+0x68c>)
 8001a60:	400a      	ands	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7fe fef4 	bl	8000850 <HAL_GetTick>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6c:	e015      	b.n	8001a9a <HAL_RCC_OscConfig+0x6a6>
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	40021000 	.word	0x40021000
 8001a74:	00001388 	.word	0x00001388
 8001a78:	efffffff 	.word	0xefffffff
 8001a7c:	fffeffff 	.word	0xfffeffff
 8001a80:	feffffff 	.word	0xfeffffff
 8001a84:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a88:	f7fe fee2 	bl	8000850 <HAL_GetTick>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e02c      	b.n	8001af4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9a:	4b18      	ldr	r3, [pc, #96]	; (8001afc <HAL_RCC_OscConfig+0x708>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	049b      	lsls	r3, r3, #18
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x694>
 8001aa6:	e024      	b.n	8001af2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e01f      	b.n	8001af4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <HAL_RCC_OscConfig+0x708>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_RCC_OscConfig+0x708>)
 8001abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abe:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	23c0      	movs	r3, #192	; 0xc0
 8001ac4:	025b      	lsls	r3, r3, #9
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d10e      	bne.n	8001aee <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	220f      	movs	r2, #15
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d107      	bne.n	8001aee <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	23f0      	movs	r3, #240	; 0xf0
 8001ae2:	039b      	lsls	r3, r3, #14
 8001ae4:	401a      	ands	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b008      	add	sp, #32
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40021000 	.word	0x40021000

08001b00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0bf      	b.n	8001c94 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b14:	4b61      	ldr	r3, [pc, #388]	; (8001c9c <HAL_RCC_ClockConfig+0x19c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d911      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b22:	4b5e      	ldr	r3, [pc, #376]	; (8001c9c <HAL_RCC_ClockConfig+0x19c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2201      	movs	r2, #1
 8001b28:	4393      	bics	r3, r2
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	4b5b      	ldr	r3, [pc, #364]	; (8001c9c <HAL_RCC_ClockConfig+0x19c>)
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b34:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <HAL_RCC_ClockConfig+0x19c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d001      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e0a6      	b.n	8001c94 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d015      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2204      	movs	r2, #4
 8001b56:	4013      	ands	r3, r2
 8001b58:	d006      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b5a:	4b51      	ldr	r3, [pc, #324]	; (8001ca0 <HAL_RCC_ClockConfig+0x1a0>)
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	4b50      	ldr	r3, [pc, #320]	; (8001ca0 <HAL_RCC_ClockConfig+0x1a0>)
 8001b60:	21e0      	movs	r1, #224	; 0xe0
 8001b62:	00c9      	lsls	r1, r1, #3
 8001b64:	430a      	orrs	r2, r1
 8001b66:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b68:	4b4d      	ldr	r3, [pc, #308]	; (8001ca0 <HAL_RCC_ClockConfig+0x1a0>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	22f0      	movs	r2, #240	; 0xf0
 8001b6e:	4393      	bics	r3, r2
 8001b70:	0019      	movs	r1, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	4b4a      	ldr	r3, [pc, #296]	; (8001ca0 <HAL_RCC_ClockConfig+0x1a0>)
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2201      	movs	r2, #1
 8001b82:	4013      	ands	r3, r2
 8001b84:	d04c      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	4b44      	ldr	r3, [pc, #272]	; (8001ca0 <HAL_RCC_ClockConfig+0x1a0>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	029b      	lsls	r3, r3, #10
 8001b96:	4013      	ands	r3, r2
 8001b98:	d120      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e07a      	b.n	8001c94 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba6:	4b3e      	ldr	r3, [pc, #248]	; (8001ca0 <HAL_RCC_ClockConfig+0x1a0>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	049b      	lsls	r3, r3, #18
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d114      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e06e      	b.n	8001c94 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d107      	bne.n	8001bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001bbe:	4b38      	ldr	r3, [pc, #224]	; (8001ca0 <HAL_RCC_ClockConfig+0x1a0>)
 8001bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	025b      	lsls	r3, r3, #9
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d108      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e062      	b.n	8001c94 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bce:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <HAL_RCC_ClockConfig+0x1a0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e05b      	b.n	8001c94 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bdc:	4b30      	ldr	r3, [pc, #192]	; (8001ca0 <HAL_RCC_ClockConfig+0x1a0>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2203      	movs	r2, #3
 8001be2:	4393      	bics	r3, r2
 8001be4:	0019      	movs	r1, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <HAL_RCC_ClockConfig+0x1a0>)
 8001bec:	430a      	orrs	r2, r1
 8001bee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bf0:	f7fe fe2e 	bl	8000850 <HAL_GetTick>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf8:	e009      	b.n	8001c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfa:	f7fe fe29 	bl	8000850 <HAL_GetTick>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	4a27      	ldr	r2, [pc, #156]	; (8001ca4 <HAL_RCC_ClockConfig+0x1a4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e042      	b.n	8001c94 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0e:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <HAL_RCC_ClockConfig+0x1a0>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	220c      	movs	r2, #12
 8001c14:	401a      	ands	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d1ec      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c20:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <HAL_RCC_ClockConfig+0x19c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2201      	movs	r2, #1
 8001c26:	4013      	ands	r3, r2
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d211      	bcs.n	8001c52 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <HAL_RCC_ClockConfig+0x19c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2201      	movs	r2, #1
 8001c34:	4393      	bics	r3, r2
 8001c36:	0019      	movs	r1, r3
 8001c38:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <HAL_RCC_ClockConfig+0x19c>)
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c40:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <HAL_RCC_ClockConfig+0x19c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2201      	movs	r2, #1
 8001c46:	4013      	ands	r3, r2
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d001      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e020      	b.n	8001c94 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2204      	movs	r2, #4
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d009      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <HAL_RCC_ClockConfig+0x1a0>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4a11      	ldr	r2, [pc, #68]	; (8001ca8 <HAL_RCC_ClockConfig+0x1a8>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	0019      	movs	r1, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <HAL_RCC_ClockConfig+0x1a0>)
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c70:	f000 f820 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8001c74:	0001      	movs	r1, r0
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <HAL_RCC_ClockConfig+0x1a0>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	091b      	lsrs	r3, r3, #4
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	4013      	ands	r3, r2
 8001c80:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <HAL_RCC_ClockConfig+0x1ac>)
 8001c82:	5cd3      	ldrb	r3, [r2, r3]
 8001c84:	000a      	movs	r2, r1
 8001c86:	40da      	lsrs	r2, r3
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f7fe fd99 	bl	80007c4 <HAL_InitTick>
  
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	0018      	movs	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b004      	add	sp, #16
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40022000 	.word	0x40022000
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	00001388 	.word	0x00001388
 8001ca8:	fffff8ff 	.word	0xfffff8ff
 8001cac:	0800287c 	.word	0x0800287c
 8001cb0:	20000000 	.word	0x20000000

08001cb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b08f      	sub	sp, #60	; 0x3c
 8001cb8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001cba:	2314      	movs	r3, #20
 8001cbc:	18fb      	adds	r3, r7, r3
 8001cbe:	4a38      	ldr	r2, [pc, #224]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xec>)
 8001cc0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001cc2:	c313      	stmia	r3!, {r0, r1, r4}
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	4a36      	ldr	r2, [pc, #216]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001ccc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001cce:	c313      	stmia	r3!, {r0, r1, r4}
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cdc:	2300      	movs	r3, #0
 8001cde:	637b      	str	r3, [r7, #52]	; 0x34
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001ce8:	4b2f      	ldr	r3, [pc, #188]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf0:	220c      	movs	r2, #12
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b0c      	cmp	r3, #12
 8001cf6:	d047      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0xd4>
 8001cf8:	d849      	bhi.n	8001d8e <HAL_RCC_GetSysClockFreq+0xda>
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d002      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0x50>
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d003      	beq.n	8001d0a <HAL_RCC_GetSysClockFreq+0x56>
 8001d02:	e044      	b.n	8001d8e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d04:	4b29      	ldr	r3, [pc, #164]	; (8001dac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d08:	e044      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0c:	0c9b      	lsrs	r3, r3, #18
 8001d0e:	220f      	movs	r2, #15
 8001d10:	4013      	ands	r3, r2
 8001d12:	2214      	movs	r2, #20
 8001d14:	18ba      	adds	r2, r7, r2
 8001d16:	5cd3      	ldrb	r3, [r2, r3]
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d1a:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	220f      	movs	r2, #15
 8001d20:	4013      	ands	r3, r2
 8001d22:	1d3a      	adds	r2, r7, #4
 8001d24:	5cd3      	ldrb	r3, [r2, r3]
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d2a:	23c0      	movs	r3, #192	; 0xc0
 8001d2c:	025b      	lsls	r3, r3, #9
 8001d2e:	401a      	ands	r2, r3
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	025b      	lsls	r3, r3, #9
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d109      	bne.n	8001d4c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d3a:	481c      	ldr	r0, [pc, #112]	; (8001dac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d3c:	f7fe f9e2 	bl	8000104 <__udivsi3>
 8001d40:	0003      	movs	r3, r0
 8001d42:	001a      	movs	r2, r3
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	4353      	muls	r3, r2
 8001d48:	637b      	str	r3, [r7, #52]	; 0x34
 8001d4a:	e01a      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d4e:	23c0      	movs	r3, #192	; 0xc0
 8001d50:	025b      	lsls	r3, r3, #9
 8001d52:	401a      	ands	r2, r3
 8001d54:	23c0      	movs	r3, #192	; 0xc0
 8001d56:	025b      	lsls	r3, r3, #9
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d109      	bne.n	8001d70 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d5e:	4814      	ldr	r0, [pc, #80]	; (8001db0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d60:	f7fe f9d0 	bl	8000104 <__udivsi3>
 8001d64:	0003      	movs	r3, r0
 8001d66:	001a      	movs	r2, r3
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	4353      	muls	r3, r2
 8001d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d72:	480e      	ldr	r0, [pc, #56]	; (8001dac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d74:	f7fe f9c6 	bl	8000104 <__udivsi3>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	001a      	movs	r2, r3
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	4353      	muls	r3, r2
 8001d80:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d84:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d86:	e005      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d8c:	e002      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d90:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d92:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d96:	0018      	movs	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	b00f      	add	sp, #60	; 0x3c
 8001d9c:	bd90      	pop	{r4, r7, pc}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	0800285c 	.word	0x0800285c
 8001da4:	0800286c 	.word	0x0800286c
 8001da8:	40021000 	.word	0x40021000
 8001dac:	007a1200 	.word	0x007a1200
 8001db0:	02dc6c00 	.word	0x02dc6c00

08001db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db8:	4b02      	ldr	r3, [pc, #8]	; (8001dc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	20000000 	.word	0x20000000

08001dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001dcc:	f7ff fff2 	bl	8001db4 <HAL_RCC_GetHCLKFreq>
 8001dd0:	0001      	movs	r1, r0
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	0a1b      	lsrs	r3, r3, #8
 8001dd8:	2207      	movs	r2, #7
 8001dda:	4013      	ands	r3, r2
 8001ddc:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dde:	5cd3      	ldrb	r3, [r2, r3]
 8001de0:	40d9      	lsrs	r1, r3
 8001de2:	000b      	movs	r3, r1
}    
 8001de4:	0018      	movs	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	40021000 	.word	0x40021000
 8001df0:	0800288c 	.word	0x0800288c

08001df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	025b      	lsls	r3, r3, #9
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d100      	bne.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e10:	e08e      	b.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e12:	2017      	movs	r0, #23
 8001e14:	183b      	adds	r3, r7, r0
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e1a:	4b6e      	ldr	r3, [pc, #440]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e1c:	69da      	ldr	r2, [r3, #28]
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	055b      	lsls	r3, r3, #21
 8001e22:	4013      	ands	r3, r2
 8001e24:	d110      	bne.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	4b6b      	ldr	r3, [pc, #428]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e28:	69da      	ldr	r2, [r3, #28]
 8001e2a:	4b6a      	ldr	r3, [pc, #424]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e2c:	2180      	movs	r1, #128	; 0x80
 8001e2e:	0549      	lsls	r1, r1, #21
 8001e30:	430a      	orrs	r2, r1
 8001e32:	61da      	str	r2, [r3, #28]
 8001e34:	4b67      	ldr	r3, [pc, #412]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e36:	69da      	ldr	r2, [r3, #28]
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	055b      	lsls	r3, r3, #21
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e42:	183b      	adds	r3, r7, r0
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e48:	4b63      	ldr	r3, [pc, #396]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4013      	ands	r3, r2
 8001e52:	d11a      	bne.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e54:	4b60      	ldr	r3, [pc, #384]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b5f      	ldr	r3, [pc, #380]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e5a:	2180      	movs	r1, #128	; 0x80
 8001e5c:	0049      	lsls	r1, r1, #1
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e62:	f7fe fcf5 	bl	8000850 <HAL_GetTick>
 8001e66:	0003      	movs	r3, r0
 8001e68:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6a:	e008      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6c:	f7fe fcf0 	bl	8000850 <HAL_GetTick>
 8001e70:	0002      	movs	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	; 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e0a6      	b.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7e:	4b56      	ldr	r3, [pc, #344]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4013      	ands	r3, r2
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e8a:	4b52      	ldr	r3, [pc, #328]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e8c:	6a1a      	ldr	r2, [r3, #32]
 8001e8e:	23c0      	movs	r3, #192	; 0xc0
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4013      	ands	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d034      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	23c0      	movs	r3, #192	; 0xc0
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d02c      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001eac:	4b49      	ldr	r3, [pc, #292]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	4a4a      	ldr	r2, [pc, #296]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eb6:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001eb8:	6a1a      	ldr	r2, [r3, #32]
 8001eba:	4b46      	ldr	r3, [pc, #280]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ebc:	2180      	movs	r1, #128	; 0x80
 8001ebe:	0249      	lsls	r1, r1, #9
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ec4:	4b43      	ldr	r3, [pc, #268]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ec6:	6a1a      	ldr	r2, [r3, #32]
 8001ec8:	4b42      	ldr	r3, [pc, #264]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001eca:	4945      	ldr	r1, [pc, #276]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001ecc:	400a      	ands	r2, r1
 8001ece:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ed0:	4b40      	ldr	r3, [pc, #256]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4013      	ands	r3, r2
 8001edc:	d013      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7fe fcb7 	bl	8000850 <HAL_GetTick>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee6:	e009      	b.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee8:	f7fe fcb2 	bl	8000850 <HAL_GetTick>
 8001eec:	0002      	movs	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	4a3c      	ldr	r2, [pc, #240]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e067      	b.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efc:	4b35      	ldr	r3, [pc, #212]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	2202      	movs	r2, #2
 8001f02:	4013      	ands	r3, r2
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f06:	4b33      	ldr	r3, [pc, #204]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4a34      	ldr	r2, [pc, #208]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	0019      	movs	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	4b2f      	ldr	r3, [pc, #188]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f16:	430a      	orrs	r2, r1
 8001f18:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f1a:	2317      	movs	r3, #23
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d105      	bne.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f24:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f26:	69da      	ldr	r2, [r3, #28]
 8001f28:	4b2a      	ldr	r3, [pc, #168]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f2a:	492f      	ldr	r1, [pc, #188]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2201      	movs	r2, #1
 8001f36:	4013      	ands	r3, r2
 8001f38:	d009      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f3a:	4b26      	ldr	r3, [pc, #152]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	2203      	movs	r2, #3
 8001f40:	4393      	bics	r3, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2202      	movs	r2, #2
 8001f54:	4013      	ands	r3, r2
 8001f56:	d009      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f58:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5c:	4a23      	ldr	r2, [pc, #140]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	0019      	movs	r1, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	02db      	lsls	r3, r3, #11
 8001f74:	4013      	ands	r3, r2
 8001f76:	d009      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f78:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	4a1c      	ldr	r2, [pc, #112]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2220      	movs	r2, #32
 8001f92:	4013      	ands	r3, r2
 8001f94:	d009      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f96:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	4393      	bics	r3, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d009      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fb6:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	2240      	movs	r2, #64	; 0x40
 8001fbc:	4393      	bics	r3, r2
 8001fbe:	0019      	movs	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699a      	ldr	r2, [r3, #24]
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b006      	add	sp, #24
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40007000 	.word	0x40007000
 8001fdc:	fffffcff 	.word	0xfffffcff
 8001fe0:	fffeffff 	.word	0xfffeffff
 8001fe4:	00001388 	.word	0x00001388
 8001fe8:	efffffff 	.word	0xefffffff
 8001fec:	fffcffff 	.word	0xfffcffff
 8001ff0:	fff3ffff 	.word	0xfff3ffff

08001ff4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e044      	b.n	8002090 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800200a:	2b00      	cmp	r3, #0
 800200c:	d107      	bne.n	800201e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2274      	movs	r2, #116	; 0x74
 8002012:	2100      	movs	r1, #0
 8002014:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	0018      	movs	r0, r3
 800201a:	f7fe fadf 	bl	80005dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2224      	movs	r2, #36	; 0x24
 8002022:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2101      	movs	r1, #1
 8002030:	438a      	bics	r2, r1
 8002032:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	0018      	movs	r0, r3
 8002038:	f000 f830 	bl	800209c <UART_SetConfig>
 800203c:	0003      	movs	r3, r0
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e024      	b.n	8002090 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	0018      	movs	r0, r3
 8002052:	f000 fa0b 	bl	800246c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	490d      	ldr	r1, [pc, #52]	; (8002098 <HAL_UART_Init+0xa4>)
 8002062:	400a      	ands	r2, r1
 8002064:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	212a      	movs	r1, #42	; 0x2a
 8002072:	438a      	bics	r2, r1
 8002074:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2101      	movs	r1, #1
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	0018      	movs	r0, r3
 800208a:	f000 faa3 	bl	80025d4 <UART_CheckIdleState>
 800208e:	0003      	movs	r3, r0
}
 8002090:	0018      	movs	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	b002      	add	sp, #8
 8002096:	bd80      	pop	{r7, pc}
 8002098:	ffffb7ff 	.word	0xffffb7ff

0800209c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020a4:	231e      	movs	r3, #30
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4abe      	ldr	r2, [pc, #760]	; (80023c4 <UART_SetConfig+0x328>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	0019      	movs	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4ab9      	ldr	r2, [pc, #740]	; (80023c8 <UART_SetConfig+0x32c>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	0019      	movs	r1, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	4313      	orrs	r3, r2
 8002100:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	4ab0      	ldr	r2, [pc, #704]	; (80023cc <UART_SetConfig+0x330>)
 800210a:	4013      	ands	r3, r2
 800210c:	0019      	movs	r1, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	430a      	orrs	r2, r1
 8002116:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4aac      	ldr	r2, [pc, #688]	; (80023d0 <UART_SetConfig+0x334>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d127      	bne.n	8002172 <UART_SetConfig+0xd6>
 8002122:	4bac      	ldr	r3, [pc, #688]	; (80023d4 <UART_SetConfig+0x338>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	2203      	movs	r2, #3
 8002128:	4013      	ands	r3, r2
 800212a:	2b03      	cmp	r3, #3
 800212c:	d00d      	beq.n	800214a <UART_SetConfig+0xae>
 800212e:	d81b      	bhi.n	8002168 <UART_SetConfig+0xcc>
 8002130:	2b02      	cmp	r3, #2
 8002132:	d014      	beq.n	800215e <UART_SetConfig+0xc2>
 8002134:	d818      	bhi.n	8002168 <UART_SetConfig+0xcc>
 8002136:	2b00      	cmp	r3, #0
 8002138:	d002      	beq.n	8002140 <UART_SetConfig+0xa4>
 800213a:	2b01      	cmp	r3, #1
 800213c:	d00a      	beq.n	8002154 <UART_SetConfig+0xb8>
 800213e:	e013      	b.n	8002168 <UART_SetConfig+0xcc>
 8002140:	231f      	movs	r3, #31
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
 8002148:	e0bd      	b.n	80022c6 <UART_SetConfig+0x22a>
 800214a:	231f      	movs	r3, #31
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	2202      	movs	r2, #2
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	e0b8      	b.n	80022c6 <UART_SetConfig+0x22a>
 8002154:	231f      	movs	r3, #31
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	2204      	movs	r2, #4
 800215a:	701a      	strb	r2, [r3, #0]
 800215c:	e0b3      	b.n	80022c6 <UART_SetConfig+0x22a>
 800215e:	231f      	movs	r3, #31
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	2208      	movs	r2, #8
 8002164:	701a      	strb	r2, [r3, #0]
 8002166:	e0ae      	b.n	80022c6 <UART_SetConfig+0x22a>
 8002168:	231f      	movs	r3, #31
 800216a:	18fb      	adds	r3, r7, r3
 800216c:	2210      	movs	r2, #16
 800216e:	701a      	strb	r2, [r3, #0]
 8002170:	e0a9      	b.n	80022c6 <UART_SetConfig+0x22a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a98      	ldr	r2, [pc, #608]	; (80023d8 <UART_SetConfig+0x33c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d134      	bne.n	80021e6 <UART_SetConfig+0x14a>
 800217c:	4b95      	ldr	r3, [pc, #596]	; (80023d4 <UART_SetConfig+0x338>)
 800217e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002180:	23c0      	movs	r3, #192	; 0xc0
 8002182:	029b      	lsls	r3, r3, #10
 8002184:	4013      	ands	r3, r2
 8002186:	22c0      	movs	r2, #192	; 0xc0
 8002188:	0292      	lsls	r2, r2, #10
 800218a:	4293      	cmp	r3, r2
 800218c:	d017      	beq.n	80021be <UART_SetConfig+0x122>
 800218e:	22c0      	movs	r2, #192	; 0xc0
 8002190:	0292      	lsls	r2, r2, #10
 8002192:	4293      	cmp	r3, r2
 8002194:	d822      	bhi.n	80021dc <UART_SetConfig+0x140>
 8002196:	2280      	movs	r2, #128	; 0x80
 8002198:	0292      	lsls	r2, r2, #10
 800219a:	4293      	cmp	r3, r2
 800219c:	d019      	beq.n	80021d2 <UART_SetConfig+0x136>
 800219e:	2280      	movs	r2, #128	; 0x80
 80021a0:	0292      	lsls	r2, r2, #10
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d81a      	bhi.n	80021dc <UART_SetConfig+0x140>
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d004      	beq.n	80021b4 <UART_SetConfig+0x118>
 80021aa:	2280      	movs	r2, #128	; 0x80
 80021ac:	0252      	lsls	r2, r2, #9
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00a      	beq.n	80021c8 <UART_SetConfig+0x12c>
 80021b2:	e013      	b.n	80021dc <UART_SetConfig+0x140>
 80021b4:	231f      	movs	r3, #31
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
 80021bc:	e083      	b.n	80022c6 <UART_SetConfig+0x22a>
 80021be:	231f      	movs	r3, #31
 80021c0:	18fb      	adds	r3, r7, r3
 80021c2:	2202      	movs	r2, #2
 80021c4:	701a      	strb	r2, [r3, #0]
 80021c6:	e07e      	b.n	80022c6 <UART_SetConfig+0x22a>
 80021c8:	231f      	movs	r3, #31
 80021ca:	18fb      	adds	r3, r7, r3
 80021cc:	2204      	movs	r2, #4
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	e079      	b.n	80022c6 <UART_SetConfig+0x22a>
 80021d2:	231f      	movs	r3, #31
 80021d4:	18fb      	adds	r3, r7, r3
 80021d6:	2208      	movs	r2, #8
 80021d8:	701a      	strb	r2, [r3, #0]
 80021da:	e074      	b.n	80022c6 <UART_SetConfig+0x22a>
 80021dc:	231f      	movs	r3, #31
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	2210      	movs	r2, #16
 80021e2:	701a      	strb	r2, [r3, #0]
 80021e4:	e06f      	b.n	80022c6 <UART_SetConfig+0x22a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a7c      	ldr	r2, [pc, #496]	; (80023dc <UART_SetConfig+0x340>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d134      	bne.n	800225a <UART_SetConfig+0x1be>
 80021f0:	4b78      	ldr	r3, [pc, #480]	; (80023d4 <UART_SetConfig+0x338>)
 80021f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021f4:	23c0      	movs	r3, #192	; 0xc0
 80021f6:	031b      	lsls	r3, r3, #12
 80021f8:	4013      	ands	r3, r2
 80021fa:	22c0      	movs	r2, #192	; 0xc0
 80021fc:	0312      	lsls	r2, r2, #12
 80021fe:	4293      	cmp	r3, r2
 8002200:	d017      	beq.n	8002232 <UART_SetConfig+0x196>
 8002202:	22c0      	movs	r2, #192	; 0xc0
 8002204:	0312      	lsls	r2, r2, #12
 8002206:	4293      	cmp	r3, r2
 8002208:	d822      	bhi.n	8002250 <UART_SetConfig+0x1b4>
 800220a:	2280      	movs	r2, #128	; 0x80
 800220c:	0312      	lsls	r2, r2, #12
 800220e:	4293      	cmp	r3, r2
 8002210:	d019      	beq.n	8002246 <UART_SetConfig+0x1aa>
 8002212:	2280      	movs	r2, #128	; 0x80
 8002214:	0312      	lsls	r2, r2, #12
 8002216:	4293      	cmp	r3, r2
 8002218:	d81a      	bhi.n	8002250 <UART_SetConfig+0x1b4>
 800221a:	2b00      	cmp	r3, #0
 800221c:	d004      	beq.n	8002228 <UART_SetConfig+0x18c>
 800221e:	2280      	movs	r2, #128	; 0x80
 8002220:	02d2      	lsls	r2, r2, #11
 8002222:	4293      	cmp	r3, r2
 8002224:	d00a      	beq.n	800223c <UART_SetConfig+0x1a0>
 8002226:	e013      	b.n	8002250 <UART_SetConfig+0x1b4>
 8002228:	231f      	movs	r3, #31
 800222a:	18fb      	adds	r3, r7, r3
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	e049      	b.n	80022c6 <UART_SetConfig+0x22a>
 8002232:	231f      	movs	r3, #31
 8002234:	18fb      	adds	r3, r7, r3
 8002236:	2202      	movs	r2, #2
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	e044      	b.n	80022c6 <UART_SetConfig+0x22a>
 800223c:	231f      	movs	r3, #31
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	2204      	movs	r2, #4
 8002242:	701a      	strb	r2, [r3, #0]
 8002244:	e03f      	b.n	80022c6 <UART_SetConfig+0x22a>
 8002246:	231f      	movs	r3, #31
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	2208      	movs	r2, #8
 800224c:	701a      	strb	r2, [r3, #0]
 800224e:	e03a      	b.n	80022c6 <UART_SetConfig+0x22a>
 8002250:	231f      	movs	r3, #31
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	2210      	movs	r2, #16
 8002256:	701a      	strb	r2, [r3, #0]
 8002258:	e035      	b.n	80022c6 <UART_SetConfig+0x22a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a60      	ldr	r2, [pc, #384]	; (80023e0 <UART_SetConfig+0x344>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d104      	bne.n	800226e <UART_SetConfig+0x1d2>
 8002264:	231f      	movs	r3, #31
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	e02b      	b.n	80022c6 <UART_SetConfig+0x22a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a5c      	ldr	r2, [pc, #368]	; (80023e4 <UART_SetConfig+0x348>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d104      	bne.n	8002282 <UART_SetConfig+0x1e6>
 8002278:	231f      	movs	r3, #31
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e021      	b.n	80022c6 <UART_SetConfig+0x22a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a58      	ldr	r2, [pc, #352]	; (80023e8 <UART_SetConfig+0x34c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d104      	bne.n	8002296 <UART_SetConfig+0x1fa>
 800228c:	231f      	movs	r3, #31
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
 8002294:	e017      	b.n	80022c6 <UART_SetConfig+0x22a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a54      	ldr	r2, [pc, #336]	; (80023ec <UART_SetConfig+0x350>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d104      	bne.n	80022aa <UART_SetConfig+0x20e>
 80022a0:	231f      	movs	r3, #31
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
 80022a8:	e00d      	b.n	80022c6 <UART_SetConfig+0x22a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a50      	ldr	r2, [pc, #320]	; (80023f0 <UART_SetConfig+0x354>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d104      	bne.n	80022be <UART_SetConfig+0x222>
 80022b4:	231f      	movs	r3, #31
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
 80022bc:	e003      	b.n	80022c6 <UART_SetConfig+0x22a>
 80022be:	231f      	movs	r3, #31
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	2210      	movs	r2, #16
 80022c4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69da      	ldr	r2, [r3, #28]
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	021b      	lsls	r3, r3, #8
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d15d      	bne.n	800238e <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 80022d2:	231f      	movs	r3, #31
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d015      	beq.n	8002308 <UART_SetConfig+0x26c>
 80022dc:	dc18      	bgt.n	8002310 <UART_SetConfig+0x274>
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d00d      	beq.n	80022fe <UART_SetConfig+0x262>
 80022e2:	dc15      	bgt.n	8002310 <UART_SetConfig+0x274>
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <UART_SetConfig+0x252>
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d005      	beq.n	80022f8 <UART_SetConfig+0x25c>
 80022ec:	e010      	b.n	8002310 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022ee:	f7ff fd6b 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 80022f2:	0003      	movs	r3, r0
 80022f4:	61bb      	str	r3, [r7, #24]
        break;
 80022f6:	e012      	b.n	800231e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022f8:	4b3e      	ldr	r3, [pc, #248]	; (80023f4 <UART_SetConfig+0x358>)
 80022fa:	61bb      	str	r3, [r7, #24]
        break;
 80022fc:	e00f      	b.n	800231e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022fe:	f7ff fcd9 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8002302:	0003      	movs	r3, r0
 8002304:	61bb      	str	r3, [r7, #24]
        break;
 8002306:	e00a      	b.n	800231e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	61bb      	str	r3, [r7, #24]
        break;
 800230e:	e006      	b.n	800231e <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002314:	231e      	movs	r3, #30
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
        break;
 800231c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d100      	bne.n	8002326 <UART_SetConfig+0x28a>
 8002324:	e095      	b.n	8002452 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	005a      	lsls	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	085b      	lsrs	r3, r3, #1
 8002330:	18d2      	adds	r2, r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	0019      	movs	r1, r3
 8002338:	0010      	movs	r0, r2
 800233a:	f7fd fee3 	bl	8000104 <__udivsi3>
 800233e:	0003      	movs	r3, r0
 8002340:	b29b      	uxth	r3, r3
 8002342:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	2b0f      	cmp	r3, #15
 8002348:	d91c      	bls.n	8002384 <UART_SetConfig+0x2e8>
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	025b      	lsls	r3, r3, #9
 8002350:	429a      	cmp	r2, r3
 8002352:	d217      	bcs.n	8002384 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	b29a      	uxth	r2, r3
 8002358:	200e      	movs	r0, #14
 800235a:	183b      	adds	r3, r7, r0
 800235c:	210f      	movs	r1, #15
 800235e:	438a      	bics	r2, r1
 8002360:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	085b      	lsrs	r3, r3, #1
 8002366:	b29b      	uxth	r3, r3
 8002368:	2207      	movs	r2, #7
 800236a:	4013      	ands	r3, r2
 800236c:	b299      	uxth	r1, r3
 800236e:	183b      	adds	r3, r7, r0
 8002370:	183a      	adds	r2, r7, r0
 8002372:	8812      	ldrh	r2, [r2, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	183a      	adds	r2, r7, r0
 800237e:	8812      	ldrh	r2, [r2, #0]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	e066      	b.n	8002452 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002384:	231e      	movs	r3, #30
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]
 800238c:	e061      	b.n	8002452 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800238e:	231f      	movs	r3, #31
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b08      	cmp	r3, #8
 8002396:	d02f      	beq.n	80023f8 <UART_SetConfig+0x35c>
 8002398:	dc32      	bgt.n	8002400 <UART_SetConfig+0x364>
 800239a:	2b04      	cmp	r3, #4
 800239c:	d00d      	beq.n	80023ba <UART_SetConfig+0x31e>
 800239e:	dc2f      	bgt.n	8002400 <UART_SetConfig+0x364>
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <UART_SetConfig+0x30e>
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d005      	beq.n	80023b4 <UART_SetConfig+0x318>
 80023a8:	e02a      	b.n	8002400 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023aa:	f7ff fd0d 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 80023ae:	0003      	movs	r3, r0
 80023b0:	61bb      	str	r3, [r7, #24]
        break;
 80023b2:	e02c      	b.n	800240e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023b4:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <UART_SetConfig+0x358>)
 80023b6:	61bb      	str	r3, [r7, #24]
        break;
 80023b8:	e029      	b.n	800240e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023ba:	f7ff fc7b 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 80023be:	0003      	movs	r3, r0
 80023c0:	61bb      	str	r3, [r7, #24]
        break;
 80023c2:	e024      	b.n	800240e <UART_SetConfig+0x372>
 80023c4:	efff69f3 	.word	0xefff69f3
 80023c8:	ffffcfff 	.word	0xffffcfff
 80023cc:	fffff4ff 	.word	0xfffff4ff
 80023d0:	40013800 	.word	0x40013800
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40004400 	.word	0x40004400
 80023dc:	40004800 	.word	0x40004800
 80023e0:	40004c00 	.word	0x40004c00
 80023e4:	40005000 	.word	0x40005000
 80023e8:	40011400 	.word	0x40011400
 80023ec:	40011800 	.word	0x40011800
 80023f0:	40011c00 	.word	0x40011c00
 80023f4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	61bb      	str	r3, [r7, #24]
        break;
 80023fe:	e006      	b.n	800240e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8002400:	2300      	movs	r3, #0
 8002402:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002404:	231e      	movs	r3, #30
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
        break;
 800240c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01e      	beq.n	8002452 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	085a      	lsrs	r2, r3, #1
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	18d2      	adds	r2, r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	0019      	movs	r1, r3
 8002424:	0010      	movs	r0, r2
 8002426:	f7fd fe6d 	bl	8000104 <__udivsi3>
 800242a:	0003      	movs	r3, r0
 800242c:	b29b      	uxth	r3, r3
 800242e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	2b0f      	cmp	r3, #15
 8002434:	d909      	bls.n	800244a <UART_SetConfig+0x3ae>
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	025b      	lsls	r3, r3, #9
 800243c:	429a      	cmp	r2, r3
 800243e:	d204      	bcs.n	800244a <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	60da      	str	r2, [r3, #12]
 8002448:	e003      	b.n	8002452 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800244a:	231e      	movs	r3, #30
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	2201      	movs	r2, #1
 8002450:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800245e:	231e      	movs	r3, #30
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	781b      	ldrb	r3, [r3, #0]
}
 8002464:	0018      	movs	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	b008      	add	sp, #32
 800246a:	bd80      	pop	{r7, pc}

0800246c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	2201      	movs	r2, #1
 800247a:	4013      	ands	r3, r2
 800247c:	d00b      	beq.n	8002496 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4a4a      	ldr	r2, [pc, #296]	; (80025b0 <UART_AdvFeatureConfig+0x144>)
 8002486:	4013      	ands	r3, r2
 8002488:	0019      	movs	r1, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	2202      	movs	r2, #2
 800249c:	4013      	ands	r3, r2
 800249e:	d00b      	beq.n	80024b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4a43      	ldr	r2, [pc, #268]	; (80025b4 <UART_AdvFeatureConfig+0x148>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	0019      	movs	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	2204      	movs	r2, #4
 80024be:	4013      	ands	r3, r2
 80024c0:	d00b      	beq.n	80024da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4a3b      	ldr	r2, [pc, #236]	; (80025b8 <UART_AdvFeatureConfig+0x14c>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	0019      	movs	r1, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	2208      	movs	r2, #8
 80024e0:	4013      	ands	r3, r2
 80024e2:	d00b      	beq.n	80024fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	4a34      	ldr	r2, [pc, #208]	; (80025bc <UART_AdvFeatureConfig+0x150>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	0019      	movs	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	2210      	movs	r2, #16
 8002502:	4013      	ands	r3, r2
 8002504:	d00b      	beq.n	800251e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4a2c      	ldr	r2, [pc, #176]	; (80025c0 <UART_AdvFeatureConfig+0x154>)
 800250e:	4013      	ands	r3, r2
 8002510:	0019      	movs	r1, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	2220      	movs	r2, #32
 8002524:	4013      	ands	r3, r2
 8002526:	d00b      	beq.n	8002540 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	4a25      	ldr	r2, [pc, #148]	; (80025c4 <UART_AdvFeatureConfig+0x158>)
 8002530:	4013      	ands	r3, r2
 8002532:	0019      	movs	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	2240      	movs	r2, #64	; 0x40
 8002546:	4013      	ands	r3, r2
 8002548:	d01d      	beq.n	8002586 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4a1d      	ldr	r2, [pc, #116]	; (80025c8 <UART_AdvFeatureConfig+0x15c>)
 8002552:	4013      	ands	r3, r2
 8002554:	0019      	movs	r1, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	035b      	lsls	r3, r3, #13
 800256a:	429a      	cmp	r2, r3
 800256c:	d10b      	bne.n	8002586 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	4a15      	ldr	r2, [pc, #84]	; (80025cc <UART_AdvFeatureConfig+0x160>)
 8002576:	4013      	ands	r3, r2
 8002578:	0019      	movs	r1, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	4013      	ands	r3, r2
 800258e:	d00b      	beq.n	80025a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <UART_AdvFeatureConfig+0x164>)
 8002598:	4013      	ands	r3, r2
 800259a:	0019      	movs	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	605a      	str	r2, [r3, #4]
  }
}
 80025a8:	46c0      	nop			; (mov r8, r8)
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b002      	add	sp, #8
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	fffdffff 	.word	0xfffdffff
 80025b4:	fffeffff 	.word	0xfffeffff
 80025b8:	fffbffff 	.word	0xfffbffff
 80025bc:	ffff7fff 	.word	0xffff7fff
 80025c0:	ffffefff 	.word	0xffffefff
 80025c4:	ffffdfff 	.word	0xffffdfff
 80025c8:	ffefffff 	.word	0xffefffff
 80025cc:	ff9fffff 	.word	0xff9fffff
 80025d0:	fff7ffff 	.word	0xfff7ffff

080025d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2280      	movs	r2, #128	; 0x80
 80025e0:	2100      	movs	r1, #0
 80025e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80025e4:	f7fe f934 	bl	8000850 <HAL_GetTick>
 80025e8:	0003      	movs	r3, r0
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2208      	movs	r2, #8
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d10c      	bne.n	8002614 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2280      	movs	r2, #128	; 0x80
 80025fe:	0391      	lsls	r1, r2, #14
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4a17      	ldr	r2, [pc, #92]	; (8002660 <UART_CheckIdleState+0x8c>)
 8002604:	9200      	str	r2, [sp, #0]
 8002606:	2200      	movs	r2, #0
 8002608:	f000 f82c 	bl	8002664 <UART_WaitOnFlagUntilTimeout>
 800260c:	1e03      	subs	r3, r0, #0
 800260e:	d001      	beq.n	8002614 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e021      	b.n	8002658 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2204      	movs	r2, #4
 800261c:	4013      	ands	r3, r2
 800261e:	2b04      	cmp	r3, #4
 8002620:	d10c      	bne.n	800263c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2280      	movs	r2, #128	; 0x80
 8002626:	03d1      	lsls	r1, r2, #15
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	4a0d      	ldr	r2, [pc, #52]	; (8002660 <UART_CheckIdleState+0x8c>)
 800262c:	9200      	str	r2, [sp, #0]
 800262e:	2200      	movs	r2, #0
 8002630:	f000 f818 	bl	8002664 <UART_WaitOnFlagUntilTimeout>
 8002634:	1e03      	subs	r3, r0, #0
 8002636:	d001      	beq.n	800263c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e00d      	b.n	8002658 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2220      	movs	r2, #32
 8002646:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2274      	movs	r2, #116	; 0x74
 8002652:	2100      	movs	r1, #0
 8002654:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	0018      	movs	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	b004      	add	sp, #16
 800265e:	bd80      	pop	{r7, pc}
 8002660:	01ffffff 	.word	0x01ffffff

08002664 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b094      	sub	sp, #80	; 0x50
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	1dfb      	adds	r3, r7, #7
 8002672:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002674:	e0a3      	b.n	80027be <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002676:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002678:	3301      	adds	r3, #1
 800267a:	d100      	bne.n	800267e <UART_WaitOnFlagUntilTimeout+0x1a>
 800267c:	e09f      	b.n	80027be <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267e:	f7fe f8e7 	bl	8000850 <HAL_GetTick>
 8002682:	0002      	movs	r2, r0
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800268a:	429a      	cmp	r2, r3
 800268c:	d302      	bcc.n	8002694 <UART_WaitOnFlagUntilTimeout+0x30>
 800268e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002690:	2b00      	cmp	r3, #0
 8002692:	d13d      	bne.n	8002710 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002694:	f3ef 8310 	mrs	r3, PRIMASK
 8002698:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800269c:	647b      	str	r3, [r7, #68]	; 0x44
 800269e:	2301      	movs	r3, #1
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a4:	f383 8810 	msr	PRIMASK, r3
}
 80026a8:	46c0      	nop			; (mov r8, r8)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	494c      	ldr	r1, [pc, #304]	; (80027e8 <UART_WaitOnFlagUntilTimeout+0x184>)
 80026b6:	400a      	ands	r2, r1
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	f383 8810 	msr	PRIMASK, r3
}
 80026c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026c6:	f3ef 8310 	mrs	r3, PRIMASK
 80026ca:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80026cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ce:	643b      	str	r3, [r7, #64]	; 0x40
 80026d0:	2301      	movs	r3, #1
 80026d2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d6:	f383 8810 	msr	PRIMASK, r3
}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2101      	movs	r1, #1
 80026e8:	438a      	bics	r2, r1
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026f2:	f383 8810 	msr	PRIMASK, r3
}
 80026f6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2220      	movs	r2, #32
 80026fc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2220      	movs	r2, #32
 8002702:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2274      	movs	r2, #116	; 0x74
 8002708:	2100      	movs	r1, #0
 800270a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e067      	b.n	80027e0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2204      	movs	r2, #4
 8002718:	4013      	ands	r3, r2
 800271a:	d050      	beq.n	80027be <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	69da      	ldr	r2, [r3, #28]
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	401a      	ands	r2, r3
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	429a      	cmp	r2, r3
 800272e:	d146      	bne.n	80027be <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2280      	movs	r2, #128	; 0x80
 8002736:	0112      	lsls	r2, r2, #4
 8002738:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800273a:	f3ef 8310 	mrs	r3, PRIMASK
 800273e:	613b      	str	r3, [r7, #16]
  return(result);
 8002740:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002744:	2301      	movs	r3, #1
 8002746:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f383 8810 	msr	PRIMASK, r3
}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4923      	ldr	r1, [pc, #140]	; (80027e8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800275c:	400a      	ands	r2, r1
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002762:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	f383 8810 	msr	PRIMASK, r3
}
 800276a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800276c:	f3ef 8310 	mrs	r3, PRIMASK
 8002770:	61fb      	str	r3, [r7, #28]
  return(result);
 8002772:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002774:	64bb      	str	r3, [r7, #72]	; 0x48
 8002776:	2301      	movs	r3, #1
 8002778:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	f383 8810 	msr	PRIMASK, r3
}
 8002780:	46c0      	nop			; (mov r8, r8)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2101      	movs	r1, #1
 800278e:	438a      	bics	r2, r1
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	f383 8810 	msr	PRIMASK, r3
}
 800279c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2220      	movs	r2, #32
 80027a2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2220      	movs	r2, #32
 80027a8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2280      	movs	r2, #128	; 0x80
 80027ae:	2120      	movs	r1, #32
 80027b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2274      	movs	r2, #116	; 0x74
 80027b6:	2100      	movs	r1, #0
 80027b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e010      	b.n	80027e0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	4013      	ands	r3, r2
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	425a      	negs	r2, r3
 80027ce:	4153      	adcs	r3, r2
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	001a      	movs	r2, r3
 80027d4:	1dfb      	adds	r3, r7, #7
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d100      	bne.n	80027de <UART_WaitOnFlagUntilTimeout+0x17a>
 80027dc:	e74b      	b.n	8002676 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	0018      	movs	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b014      	add	sp, #80	; 0x50
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	fffffe5f 	.word	0xfffffe5f

080027ec <__libc_init_array>:
 80027ec:	b570      	push	{r4, r5, r6, lr}
 80027ee:	2600      	movs	r6, #0
 80027f0:	4d0c      	ldr	r5, [pc, #48]	; (8002824 <__libc_init_array+0x38>)
 80027f2:	4c0d      	ldr	r4, [pc, #52]	; (8002828 <__libc_init_array+0x3c>)
 80027f4:	1b64      	subs	r4, r4, r5
 80027f6:	10a4      	asrs	r4, r4, #2
 80027f8:	42a6      	cmp	r6, r4
 80027fa:	d109      	bne.n	8002810 <__libc_init_array+0x24>
 80027fc:	2600      	movs	r6, #0
 80027fe:	f000 f821 	bl	8002844 <_init>
 8002802:	4d0a      	ldr	r5, [pc, #40]	; (800282c <__libc_init_array+0x40>)
 8002804:	4c0a      	ldr	r4, [pc, #40]	; (8002830 <__libc_init_array+0x44>)
 8002806:	1b64      	subs	r4, r4, r5
 8002808:	10a4      	asrs	r4, r4, #2
 800280a:	42a6      	cmp	r6, r4
 800280c:	d105      	bne.n	800281a <__libc_init_array+0x2e>
 800280e:	bd70      	pop	{r4, r5, r6, pc}
 8002810:	00b3      	lsls	r3, r6, #2
 8002812:	58eb      	ldr	r3, [r5, r3]
 8002814:	4798      	blx	r3
 8002816:	3601      	adds	r6, #1
 8002818:	e7ee      	b.n	80027f8 <__libc_init_array+0xc>
 800281a:	00b3      	lsls	r3, r6, #2
 800281c:	58eb      	ldr	r3, [r5, r3]
 800281e:	4798      	blx	r3
 8002820:	3601      	adds	r6, #1
 8002822:	e7f2      	b.n	800280a <__libc_init_array+0x1e>
 8002824:	08002894 	.word	0x08002894
 8002828:	08002894 	.word	0x08002894
 800282c:	08002894 	.word	0x08002894
 8002830:	08002898 	.word	0x08002898

08002834 <memset>:
 8002834:	0003      	movs	r3, r0
 8002836:	1882      	adds	r2, r0, r2
 8002838:	4293      	cmp	r3, r2
 800283a:	d100      	bne.n	800283e <memset+0xa>
 800283c:	4770      	bx	lr
 800283e:	7019      	strb	r1, [r3, #0]
 8002840:	3301      	adds	r3, #1
 8002842:	e7f9      	b.n	8002838 <memset+0x4>

08002844 <_init>:
 8002844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800284a:	bc08      	pop	{r3}
 800284c:	469e      	mov	lr, r3
 800284e:	4770      	bx	lr

08002850 <_fini>:
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002856:	bc08      	pop	{r3}
 8002858:	469e      	mov	lr, r3
 800285a:	4770      	bx	lr
