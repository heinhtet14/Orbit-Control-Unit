
omega_test_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b18  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  08009bd8  08009bd8  00019bd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a144  0800a144  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a144  0800a144  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a144  0800a144  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a144  0800a144  0001a144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a148  0800a148  0001a148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a14c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  200001e8  0800a334  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  0800a334  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdd3  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d9a  00000000  00000000  0002bfe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  0002dd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000730  00000000  00000000  0002e568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc30  00000000  00000000  0002ec98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a976  00000000  00000000  0004a8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a293c  00000000  00000000  0005523e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7b7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f88  00000000  00000000  000f7bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e8 	.word	0x200001e8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009bbc 	.word	0x08009bbc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001ec 	.word	0x200001ec
 8000100:	08009bbc 	.word	0x08009bbc

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f000 ffa3 	bl	8001384 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 feed 	bl	8001228 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ff95 	bl	8001384 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 ff8b 	bl	8001384 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff0f 	bl	80012a0 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ff05 	bl	80012a0 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_d2uiz>:
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	2200      	movs	r2, #0
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <__aeabi_d2uiz+0x38>)
 80004aa:	0004      	movs	r4, r0
 80004ac:	000d      	movs	r5, r1
 80004ae:	f7ff ffef 	bl	8000490 <__aeabi_dcmpge>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d104      	bne.n	80004c0 <__aeabi_d2uiz+0x1c>
 80004b6:	0020      	movs	r0, r4
 80004b8:	0029      	movs	r1, r5
 80004ba:	f001 fdef 	bl	800209c <__aeabi_d2iz>
 80004be:	bd70      	pop	{r4, r5, r6, pc}
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <__aeabi_d2uiz+0x38>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	0020      	movs	r0, r4
 80004c6:	0029      	movs	r1, r5
 80004c8:	f001 fa38 	bl	800193c <__aeabi_dsub>
 80004cc:	f001 fde6 	bl	800209c <__aeabi_d2iz>
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	061b      	lsls	r3, r3, #24
 80004d4:	469c      	mov	ip, r3
 80004d6:	4460      	add	r0, ip
 80004d8:	e7f1      	b.n	80004be <__aeabi_d2uiz+0x1a>
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	41e00000 	.word	0x41e00000

080004e0 <__aeabi_d2lz>:
 80004e0:	b570      	push	{r4, r5, r6, lr}
 80004e2:	0005      	movs	r5, r0
 80004e4:	000c      	movs	r4, r1
 80004e6:	2200      	movs	r2, #0
 80004e8:	2300      	movs	r3, #0
 80004ea:	0028      	movs	r0, r5
 80004ec:	0021      	movs	r1, r4
 80004ee:	f7ff ffb1 	bl	8000454 <__aeabi_dcmplt>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d108      	bne.n	8000508 <__aeabi_d2lz+0x28>
 80004f6:	0028      	movs	r0, r5
 80004f8:	0021      	movs	r1, r4
 80004fa:	f000 f80f 	bl	800051c <__aeabi_d2ulz>
 80004fe:	0002      	movs	r2, r0
 8000500:	000b      	movs	r3, r1
 8000502:	0010      	movs	r0, r2
 8000504:	0019      	movs	r1, r3
 8000506:	bd70      	pop	{r4, r5, r6, pc}
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	061b      	lsls	r3, r3, #24
 800050c:	18e1      	adds	r1, r4, r3
 800050e:	0028      	movs	r0, r5
 8000510:	f000 f804 	bl	800051c <__aeabi_d2ulz>
 8000514:	2300      	movs	r3, #0
 8000516:	4242      	negs	r2, r0
 8000518:	418b      	sbcs	r3, r1
 800051a:	e7f2      	b.n	8000502 <__aeabi_d2lz+0x22>

0800051c <__aeabi_d2ulz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <__aeabi_d2ulz+0x34>)
 8000522:	000d      	movs	r5, r1
 8000524:	0004      	movs	r4, r0
 8000526:	f000 ff9d 	bl	8001464 <__aeabi_dmul>
 800052a:	f7ff ffbb 	bl	80004a4 <__aeabi_d2uiz>
 800052e:	0006      	movs	r6, r0
 8000530:	f001 fe1a 	bl	8002168 <__aeabi_ui2d>
 8000534:	2200      	movs	r2, #0
 8000536:	4b07      	ldr	r3, [pc, #28]	; (8000554 <__aeabi_d2ulz+0x38>)
 8000538:	f000 ff94 	bl	8001464 <__aeabi_dmul>
 800053c:	0002      	movs	r2, r0
 800053e:	000b      	movs	r3, r1
 8000540:	0020      	movs	r0, r4
 8000542:	0029      	movs	r1, r5
 8000544:	f001 f9fa 	bl	800193c <__aeabi_dsub>
 8000548:	f7ff ffac 	bl	80004a4 <__aeabi_d2uiz>
 800054c:	0031      	movs	r1, r6
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	3df00000 	.word	0x3df00000
 8000554:	41f00000 	.word	0x41f00000

08000558 <__aeabi_l2d>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0006      	movs	r6, r0
 800055c:	0008      	movs	r0, r1
 800055e:	f001 fdd3 	bl	8002108 <__aeabi_i2d>
 8000562:	2200      	movs	r2, #0
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <__aeabi_l2d+0x28>)
 8000566:	f000 ff7d 	bl	8001464 <__aeabi_dmul>
 800056a:	000d      	movs	r5, r1
 800056c:	0004      	movs	r4, r0
 800056e:	0030      	movs	r0, r6
 8000570:	f001 fdfa 	bl	8002168 <__aeabi_ui2d>
 8000574:	002b      	movs	r3, r5
 8000576:	0022      	movs	r2, r4
 8000578:	f000 f804 	bl	8000584 <__aeabi_dadd>
 800057c:	bd70      	pop	{r4, r5, r6, pc}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	41f00000 	.word	0x41f00000

08000584 <__aeabi_dadd>:
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	464f      	mov	r7, r9
 8000588:	46d6      	mov	lr, sl
 800058a:	4646      	mov	r6, r8
 800058c:	000d      	movs	r5, r1
 800058e:	0001      	movs	r1, r0
 8000590:	0018      	movs	r0, r3
 8000592:	b5c0      	push	{r6, r7, lr}
 8000594:	0017      	movs	r7, r2
 8000596:	032b      	lsls	r3, r5, #12
 8000598:	0a5a      	lsrs	r2, r3, #9
 800059a:	0f4b      	lsrs	r3, r1, #29
 800059c:	4313      	orrs	r3, r2
 800059e:	00ca      	lsls	r2, r1, #3
 80005a0:	4691      	mov	r9, r2
 80005a2:	0302      	lsls	r2, r0, #12
 80005a4:	006e      	lsls	r6, r5, #1
 80005a6:	0041      	lsls	r1, r0, #1
 80005a8:	0a52      	lsrs	r2, r2, #9
 80005aa:	0fec      	lsrs	r4, r5, #31
 80005ac:	0f7d      	lsrs	r5, r7, #29
 80005ae:	4315      	orrs	r5, r2
 80005b0:	0d76      	lsrs	r6, r6, #21
 80005b2:	0d49      	lsrs	r1, r1, #21
 80005b4:	0fc0      	lsrs	r0, r0, #31
 80005b6:	4682      	mov	sl, r0
 80005b8:	46ac      	mov	ip, r5
 80005ba:	00ff      	lsls	r7, r7, #3
 80005bc:	1a72      	subs	r2, r6, r1
 80005be:	4284      	cmp	r4, r0
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x40>
 80005c2:	e098      	b.n	80006f6 <__aeabi_dadd+0x172>
 80005c4:	2a00      	cmp	r2, #0
 80005c6:	dc00      	bgt.n	80005ca <__aeabi_dadd+0x46>
 80005c8:	e081      	b.n	80006ce <__aeabi_dadd+0x14a>
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d100      	bne.n	80005d0 <__aeabi_dadd+0x4c>
 80005ce:	e0b6      	b.n	800073e <__aeabi_dadd+0x1ba>
 80005d0:	49c9      	ldr	r1, [pc, #804]	; (80008f8 <__aeabi_dadd+0x374>)
 80005d2:	428e      	cmp	r6, r1
 80005d4:	d100      	bne.n	80005d8 <__aeabi_dadd+0x54>
 80005d6:	e172      	b.n	80008be <__aeabi_dadd+0x33a>
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	0028      	movs	r0, r5
 80005dc:	0409      	lsls	r1, r1, #16
 80005de:	4308      	orrs	r0, r1
 80005e0:	4684      	mov	ip, r0
 80005e2:	2a38      	cmp	r2, #56	; 0x38
 80005e4:	dd00      	ble.n	80005e8 <__aeabi_dadd+0x64>
 80005e6:	e15e      	b.n	80008a6 <__aeabi_dadd+0x322>
 80005e8:	2a1f      	cmp	r2, #31
 80005ea:	dd00      	ble.n	80005ee <__aeabi_dadd+0x6a>
 80005ec:	e1ee      	b.n	80009cc <__aeabi_dadd+0x448>
 80005ee:	2020      	movs	r0, #32
 80005f0:	0039      	movs	r1, r7
 80005f2:	4665      	mov	r5, ip
 80005f4:	1a80      	subs	r0, r0, r2
 80005f6:	4087      	lsls	r7, r0
 80005f8:	40d1      	lsrs	r1, r2
 80005fa:	4085      	lsls	r5, r0
 80005fc:	430d      	orrs	r5, r1
 80005fe:	0039      	movs	r1, r7
 8000600:	1e4f      	subs	r7, r1, #1
 8000602:	41b9      	sbcs	r1, r7
 8000604:	4667      	mov	r7, ip
 8000606:	40d7      	lsrs	r7, r2
 8000608:	4329      	orrs	r1, r5
 800060a:	1bdb      	subs	r3, r3, r7
 800060c:	464a      	mov	r2, r9
 800060e:	1a55      	subs	r5, r2, r1
 8000610:	45a9      	cmp	r9, r5
 8000612:	4189      	sbcs	r1, r1
 8000614:	4249      	negs	r1, r1
 8000616:	1a5b      	subs	r3, r3, r1
 8000618:	4698      	mov	r8, r3
 800061a:	4643      	mov	r3, r8
 800061c:	021b      	lsls	r3, r3, #8
 800061e:	d400      	bmi.n	8000622 <__aeabi_dadd+0x9e>
 8000620:	e0cc      	b.n	80007bc <__aeabi_dadd+0x238>
 8000622:	4643      	mov	r3, r8
 8000624:	025b      	lsls	r3, r3, #9
 8000626:	0a5b      	lsrs	r3, r3, #9
 8000628:	4698      	mov	r8, r3
 800062a:	4643      	mov	r3, r8
 800062c:	2b00      	cmp	r3, #0
 800062e:	d100      	bne.n	8000632 <__aeabi_dadd+0xae>
 8000630:	e12c      	b.n	800088c <__aeabi_dadd+0x308>
 8000632:	4640      	mov	r0, r8
 8000634:	f001 fe46 	bl	80022c4 <__clzsi2>
 8000638:	0001      	movs	r1, r0
 800063a:	3908      	subs	r1, #8
 800063c:	2220      	movs	r2, #32
 800063e:	0028      	movs	r0, r5
 8000640:	4643      	mov	r3, r8
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	408b      	lsls	r3, r1
 8000646:	40d0      	lsrs	r0, r2
 8000648:	408d      	lsls	r5, r1
 800064a:	4303      	orrs	r3, r0
 800064c:	428e      	cmp	r6, r1
 800064e:	dd00      	ble.n	8000652 <__aeabi_dadd+0xce>
 8000650:	e117      	b.n	8000882 <__aeabi_dadd+0x2fe>
 8000652:	1b8e      	subs	r6, r1, r6
 8000654:	1c72      	adds	r2, r6, #1
 8000656:	2a1f      	cmp	r2, #31
 8000658:	dd00      	ble.n	800065c <__aeabi_dadd+0xd8>
 800065a:	e1a7      	b.n	80009ac <__aeabi_dadd+0x428>
 800065c:	2120      	movs	r1, #32
 800065e:	0018      	movs	r0, r3
 8000660:	002e      	movs	r6, r5
 8000662:	1a89      	subs	r1, r1, r2
 8000664:	408d      	lsls	r5, r1
 8000666:	4088      	lsls	r0, r1
 8000668:	40d6      	lsrs	r6, r2
 800066a:	40d3      	lsrs	r3, r2
 800066c:	1e69      	subs	r1, r5, #1
 800066e:	418d      	sbcs	r5, r1
 8000670:	4330      	orrs	r0, r6
 8000672:	4698      	mov	r8, r3
 8000674:	2600      	movs	r6, #0
 8000676:	4305      	orrs	r5, r0
 8000678:	076b      	lsls	r3, r5, #29
 800067a:	d009      	beq.n	8000690 <__aeabi_dadd+0x10c>
 800067c:	230f      	movs	r3, #15
 800067e:	402b      	ands	r3, r5
 8000680:	2b04      	cmp	r3, #4
 8000682:	d005      	beq.n	8000690 <__aeabi_dadd+0x10c>
 8000684:	1d2b      	adds	r3, r5, #4
 8000686:	42ab      	cmp	r3, r5
 8000688:	41ad      	sbcs	r5, r5
 800068a:	426d      	negs	r5, r5
 800068c:	44a8      	add	r8, r5
 800068e:	001d      	movs	r5, r3
 8000690:	4643      	mov	r3, r8
 8000692:	021b      	lsls	r3, r3, #8
 8000694:	d400      	bmi.n	8000698 <__aeabi_dadd+0x114>
 8000696:	e094      	b.n	80007c2 <__aeabi_dadd+0x23e>
 8000698:	4b97      	ldr	r3, [pc, #604]	; (80008f8 <__aeabi_dadd+0x374>)
 800069a:	1c72      	adds	r2, r6, #1
 800069c:	429a      	cmp	r2, r3
 800069e:	d100      	bne.n	80006a2 <__aeabi_dadd+0x11e>
 80006a0:	e09d      	b.n	80007de <__aeabi_dadd+0x25a>
 80006a2:	4641      	mov	r1, r8
 80006a4:	4b95      	ldr	r3, [pc, #596]	; (80008fc <__aeabi_dadd+0x378>)
 80006a6:	08ed      	lsrs	r5, r5, #3
 80006a8:	4019      	ands	r1, r3
 80006aa:	000b      	movs	r3, r1
 80006ac:	0552      	lsls	r2, r2, #21
 80006ae:	0749      	lsls	r1, r1, #29
 80006b0:	025b      	lsls	r3, r3, #9
 80006b2:	4329      	orrs	r1, r5
 80006b4:	0b1b      	lsrs	r3, r3, #12
 80006b6:	0d52      	lsrs	r2, r2, #21
 80006b8:	0512      	lsls	r2, r2, #20
 80006ba:	4313      	orrs	r3, r2
 80006bc:	07e4      	lsls	r4, r4, #31
 80006be:	4323      	orrs	r3, r4
 80006c0:	0008      	movs	r0, r1
 80006c2:	0019      	movs	r1, r3
 80006c4:	bce0      	pop	{r5, r6, r7}
 80006c6:	46ba      	mov	sl, r7
 80006c8:	46b1      	mov	r9, r6
 80006ca:	46a8      	mov	r8, r5
 80006cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ce:	2a00      	cmp	r2, #0
 80006d0:	d043      	beq.n	800075a <__aeabi_dadd+0x1d6>
 80006d2:	1b8a      	subs	r2, r1, r6
 80006d4:	2e00      	cmp	r6, #0
 80006d6:	d000      	beq.n	80006da <__aeabi_dadd+0x156>
 80006d8:	e12a      	b.n	8000930 <__aeabi_dadd+0x3ac>
 80006da:	464c      	mov	r4, r9
 80006dc:	431c      	orrs	r4, r3
 80006de:	d100      	bne.n	80006e2 <__aeabi_dadd+0x15e>
 80006e0:	e1d1      	b.n	8000a86 <__aeabi_dadd+0x502>
 80006e2:	1e54      	subs	r4, r2, #1
 80006e4:	2a01      	cmp	r2, #1
 80006e6:	d100      	bne.n	80006ea <__aeabi_dadd+0x166>
 80006e8:	e21f      	b.n	8000b2a <__aeabi_dadd+0x5a6>
 80006ea:	4d83      	ldr	r5, [pc, #524]	; (80008f8 <__aeabi_dadd+0x374>)
 80006ec:	42aa      	cmp	r2, r5
 80006ee:	d100      	bne.n	80006f2 <__aeabi_dadd+0x16e>
 80006f0:	e272      	b.n	8000bd8 <__aeabi_dadd+0x654>
 80006f2:	0022      	movs	r2, r4
 80006f4:	e123      	b.n	800093e <__aeabi_dadd+0x3ba>
 80006f6:	2a00      	cmp	r2, #0
 80006f8:	dc00      	bgt.n	80006fc <__aeabi_dadd+0x178>
 80006fa:	e098      	b.n	800082e <__aeabi_dadd+0x2aa>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	d042      	beq.n	8000786 <__aeabi_dadd+0x202>
 8000700:	497d      	ldr	r1, [pc, #500]	; (80008f8 <__aeabi_dadd+0x374>)
 8000702:	428e      	cmp	r6, r1
 8000704:	d100      	bne.n	8000708 <__aeabi_dadd+0x184>
 8000706:	e0da      	b.n	80008be <__aeabi_dadd+0x33a>
 8000708:	2180      	movs	r1, #128	; 0x80
 800070a:	0028      	movs	r0, r5
 800070c:	0409      	lsls	r1, r1, #16
 800070e:	4308      	orrs	r0, r1
 8000710:	4684      	mov	ip, r0
 8000712:	2a38      	cmp	r2, #56	; 0x38
 8000714:	dd00      	ble.n	8000718 <__aeabi_dadd+0x194>
 8000716:	e129      	b.n	800096c <__aeabi_dadd+0x3e8>
 8000718:	2a1f      	cmp	r2, #31
 800071a:	dc00      	bgt.n	800071e <__aeabi_dadd+0x19a>
 800071c:	e187      	b.n	8000a2e <__aeabi_dadd+0x4aa>
 800071e:	0011      	movs	r1, r2
 8000720:	4665      	mov	r5, ip
 8000722:	3920      	subs	r1, #32
 8000724:	40cd      	lsrs	r5, r1
 8000726:	2a20      	cmp	r2, #32
 8000728:	d004      	beq.n	8000734 <__aeabi_dadd+0x1b0>
 800072a:	2040      	movs	r0, #64	; 0x40
 800072c:	4661      	mov	r1, ip
 800072e:	1a82      	subs	r2, r0, r2
 8000730:	4091      	lsls	r1, r2
 8000732:	430f      	orrs	r7, r1
 8000734:	0039      	movs	r1, r7
 8000736:	1e4f      	subs	r7, r1, #1
 8000738:	41b9      	sbcs	r1, r7
 800073a:	430d      	orrs	r5, r1
 800073c:	e11b      	b.n	8000976 <__aeabi_dadd+0x3f2>
 800073e:	0029      	movs	r1, r5
 8000740:	4339      	orrs	r1, r7
 8000742:	d100      	bne.n	8000746 <__aeabi_dadd+0x1c2>
 8000744:	e0b5      	b.n	80008b2 <__aeabi_dadd+0x32e>
 8000746:	1e51      	subs	r1, r2, #1
 8000748:	2a01      	cmp	r2, #1
 800074a:	d100      	bne.n	800074e <__aeabi_dadd+0x1ca>
 800074c:	e1ab      	b.n	8000aa6 <__aeabi_dadd+0x522>
 800074e:	486a      	ldr	r0, [pc, #424]	; (80008f8 <__aeabi_dadd+0x374>)
 8000750:	4282      	cmp	r2, r0
 8000752:	d100      	bne.n	8000756 <__aeabi_dadd+0x1d2>
 8000754:	e1b2      	b.n	8000abc <__aeabi_dadd+0x538>
 8000756:	000a      	movs	r2, r1
 8000758:	e743      	b.n	80005e2 <__aeabi_dadd+0x5e>
 800075a:	4969      	ldr	r1, [pc, #420]	; (8000900 <__aeabi_dadd+0x37c>)
 800075c:	1c75      	adds	r5, r6, #1
 800075e:	420d      	tst	r5, r1
 8000760:	d000      	beq.n	8000764 <__aeabi_dadd+0x1e0>
 8000762:	e0cf      	b.n	8000904 <__aeabi_dadd+0x380>
 8000764:	2e00      	cmp	r6, #0
 8000766:	d000      	beq.n	800076a <__aeabi_dadd+0x1e6>
 8000768:	e193      	b.n	8000a92 <__aeabi_dadd+0x50e>
 800076a:	4649      	mov	r1, r9
 800076c:	4319      	orrs	r1, r3
 800076e:	d100      	bne.n	8000772 <__aeabi_dadd+0x1ee>
 8000770:	e1d1      	b.n	8000b16 <__aeabi_dadd+0x592>
 8000772:	4661      	mov	r1, ip
 8000774:	4339      	orrs	r1, r7
 8000776:	d000      	beq.n	800077a <__aeabi_dadd+0x1f6>
 8000778:	e1e3      	b.n	8000b42 <__aeabi_dadd+0x5be>
 800077a:	4649      	mov	r1, r9
 800077c:	0758      	lsls	r0, r3, #29
 800077e:	08c9      	lsrs	r1, r1, #3
 8000780:	4301      	orrs	r1, r0
 8000782:	08db      	lsrs	r3, r3, #3
 8000784:	e026      	b.n	80007d4 <__aeabi_dadd+0x250>
 8000786:	0029      	movs	r1, r5
 8000788:	4339      	orrs	r1, r7
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0x20a>
 800078c:	e091      	b.n	80008b2 <__aeabi_dadd+0x32e>
 800078e:	1e51      	subs	r1, r2, #1
 8000790:	2a01      	cmp	r2, #1
 8000792:	d005      	beq.n	80007a0 <__aeabi_dadd+0x21c>
 8000794:	4858      	ldr	r0, [pc, #352]	; (80008f8 <__aeabi_dadd+0x374>)
 8000796:	4282      	cmp	r2, r0
 8000798:	d100      	bne.n	800079c <__aeabi_dadd+0x218>
 800079a:	e18f      	b.n	8000abc <__aeabi_dadd+0x538>
 800079c:	000a      	movs	r2, r1
 800079e:	e7b8      	b.n	8000712 <__aeabi_dadd+0x18e>
 80007a0:	003d      	movs	r5, r7
 80007a2:	444d      	add	r5, r9
 80007a4:	454d      	cmp	r5, r9
 80007a6:	4189      	sbcs	r1, r1
 80007a8:	4463      	add	r3, ip
 80007aa:	4698      	mov	r8, r3
 80007ac:	4249      	negs	r1, r1
 80007ae:	4488      	add	r8, r1
 80007b0:	4643      	mov	r3, r8
 80007b2:	2602      	movs	r6, #2
 80007b4:	021b      	lsls	r3, r3, #8
 80007b6:	d500      	bpl.n	80007ba <__aeabi_dadd+0x236>
 80007b8:	e0eb      	b.n	8000992 <__aeabi_dadd+0x40e>
 80007ba:	3e01      	subs	r6, #1
 80007bc:	076b      	lsls	r3, r5, #29
 80007be:	d000      	beq.n	80007c2 <__aeabi_dadd+0x23e>
 80007c0:	e75c      	b.n	800067c <__aeabi_dadd+0xf8>
 80007c2:	4643      	mov	r3, r8
 80007c4:	08e9      	lsrs	r1, r5, #3
 80007c6:	075a      	lsls	r2, r3, #29
 80007c8:	4311      	orrs	r1, r2
 80007ca:	0032      	movs	r2, r6
 80007cc:	08db      	lsrs	r3, r3, #3
 80007ce:	484a      	ldr	r0, [pc, #296]	; (80008f8 <__aeabi_dadd+0x374>)
 80007d0:	4282      	cmp	r2, r0
 80007d2:	d021      	beq.n	8000818 <__aeabi_dadd+0x294>
 80007d4:	031b      	lsls	r3, r3, #12
 80007d6:	0552      	lsls	r2, r2, #21
 80007d8:	0b1b      	lsrs	r3, r3, #12
 80007da:	0d52      	lsrs	r2, r2, #21
 80007dc:	e76c      	b.n	80006b8 <__aeabi_dadd+0x134>
 80007de:	2300      	movs	r3, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	e769      	b.n	80006b8 <__aeabi_dadd+0x134>
 80007e4:	002a      	movs	r2, r5
 80007e6:	433a      	orrs	r2, r7
 80007e8:	d069      	beq.n	80008be <__aeabi_dadd+0x33a>
 80007ea:	464a      	mov	r2, r9
 80007ec:	0758      	lsls	r0, r3, #29
 80007ee:	08d1      	lsrs	r1, r2, #3
 80007f0:	08da      	lsrs	r2, r3, #3
 80007f2:	2380      	movs	r3, #128	; 0x80
 80007f4:	031b      	lsls	r3, r3, #12
 80007f6:	4308      	orrs	r0, r1
 80007f8:	421a      	tst	r2, r3
 80007fa:	d007      	beq.n	800080c <__aeabi_dadd+0x288>
 80007fc:	0029      	movs	r1, r5
 80007fe:	08ed      	lsrs	r5, r5, #3
 8000800:	421d      	tst	r5, r3
 8000802:	d103      	bne.n	800080c <__aeabi_dadd+0x288>
 8000804:	002a      	movs	r2, r5
 8000806:	08ff      	lsrs	r7, r7, #3
 8000808:	0748      	lsls	r0, r1, #29
 800080a:	4338      	orrs	r0, r7
 800080c:	0f43      	lsrs	r3, r0, #29
 800080e:	00c1      	lsls	r1, r0, #3
 8000810:	075b      	lsls	r3, r3, #29
 8000812:	08c9      	lsrs	r1, r1, #3
 8000814:	4319      	orrs	r1, r3
 8000816:	0013      	movs	r3, r2
 8000818:	000a      	movs	r2, r1
 800081a:	431a      	orrs	r2, r3
 800081c:	d100      	bne.n	8000820 <__aeabi_dadd+0x29c>
 800081e:	e213      	b.n	8000c48 <__aeabi_dadd+0x6c4>
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	0312      	lsls	r2, r2, #12
 8000824:	4313      	orrs	r3, r2
 8000826:	031b      	lsls	r3, r3, #12
 8000828:	4a33      	ldr	r2, [pc, #204]	; (80008f8 <__aeabi_dadd+0x374>)
 800082a:	0b1b      	lsrs	r3, r3, #12
 800082c:	e744      	b.n	80006b8 <__aeabi_dadd+0x134>
 800082e:	2a00      	cmp	r2, #0
 8000830:	d04b      	beq.n	80008ca <__aeabi_dadd+0x346>
 8000832:	1b8a      	subs	r2, r1, r6
 8000834:	2e00      	cmp	r6, #0
 8000836:	d100      	bne.n	800083a <__aeabi_dadd+0x2b6>
 8000838:	e0e7      	b.n	8000a0a <__aeabi_dadd+0x486>
 800083a:	482f      	ldr	r0, [pc, #188]	; (80008f8 <__aeabi_dadd+0x374>)
 800083c:	4281      	cmp	r1, r0
 800083e:	d100      	bne.n	8000842 <__aeabi_dadd+0x2be>
 8000840:	e195      	b.n	8000b6e <__aeabi_dadd+0x5ea>
 8000842:	2080      	movs	r0, #128	; 0x80
 8000844:	0400      	lsls	r0, r0, #16
 8000846:	4303      	orrs	r3, r0
 8000848:	2a38      	cmp	r2, #56	; 0x38
 800084a:	dd00      	ble.n	800084e <__aeabi_dadd+0x2ca>
 800084c:	e143      	b.n	8000ad6 <__aeabi_dadd+0x552>
 800084e:	2a1f      	cmp	r2, #31
 8000850:	dd00      	ble.n	8000854 <__aeabi_dadd+0x2d0>
 8000852:	e1db      	b.n	8000c0c <__aeabi_dadd+0x688>
 8000854:	2020      	movs	r0, #32
 8000856:	001d      	movs	r5, r3
 8000858:	464e      	mov	r6, r9
 800085a:	1a80      	subs	r0, r0, r2
 800085c:	4085      	lsls	r5, r0
 800085e:	40d6      	lsrs	r6, r2
 8000860:	4335      	orrs	r5, r6
 8000862:	464e      	mov	r6, r9
 8000864:	4086      	lsls	r6, r0
 8000866:	0030      	movs	r0, r6
 8000868:	40d3      	lsrs	r3, r2
 800086a:	1e46      	subs	r6, r0, #1
 800086c:	41b0      	sbcs	r0, r6
 800086e:	449c      	add	ip, r3
 8000870:	4305      	orrs	r5, r0
 8000872:	19ed      	adds	r5, r5, r7
 8000874:	42bd      	cmp	r5, r7
 8000876:	419b      	sbcs	r3, r3
 8000878:	425b      	negs	r3, r3
 800087a:	4463      	add	r3, ip
 800087c:	4698      	mov	r8, r3
 800087e:	000e      	movs	r6, r1
 8000880:	e07f      	b.n	8000982 <__aeabi_dadd+0x3fe>
 8000882:	4a1e      	ldr	r2, [pc, #120]	; (80008fc <__aeabi_dadd+0x378>)
 8000884:	1a76      	subs	r6, r6, r1
 8000886:	4013      	ands	r3, r2
 8000888:	4698      	mov	r8, r3
 800088a:	e6f5      	b.n	8000678 <__aeabi_dadd+0xf4>
 800088c:	0028      	movs	r0, r5
 800088e:	f001 fd19 	bl	80022c4 <__clzsi2>
 8000892:	0001      	movs	r1, r0
 8000894:	3118      	adds	r1, #24
 8000896:	291f      	cmp	r1, #31
 8000898:	dc00      	bgt.n	800089c <__aeabi_dadd+0x318>
 800089a:	e6cf      	b.n	800063c <__aeabi_dadd+0xb8>
 800089c:	002b      	movs	r3, r5
 800089e:	3808      	subs	r0, #8
 80008a0:	4083      	lsls	r3, r0
 80008a2:	2500      	movs	r5, #0
 80008a4:	e6d2      	b.n	800064c <__aeabi_dadd+0xc8>
 80008a6:	4662      	mov	r2, ip
 80008a8:	433a      	orrs	r2, r7
 80008aa:	0011      	movs	r1, r2
 80008ac:	1e4f      	subs	r7, r1, #1
 80008ae:	41b9      	sbcs	r1, r7
 80008b0:	e6ac      	b.n	800060c <__aeabi_dadd+0x88>
 80008b2:	4649      	mov	r1, r9
 80008b4:	0758      	lsls	r0, r3, #29
 80008b6:	08c9      	lsrs	r1, r1, #3
 80008b8:	4301      	orrs	r1, r0
 80008ba:	08db      	lsrs	r3, r3, #3
 80008bc:	e787      	b.n	80007ce <__aeabi_dadd+0x24a>
 80008be:	4649      	mov	r1, r9
 80008c0:	075a      	lsls	r2, r3, #29
 80008c2:	08c9      	lsrs	r1, r1, #3
 80008c4:	4311      	orrs	r1, r2
 80008c6:	08db      	lsrs	r3, r3, #3
 80008c8:	e7a6      	b.n	8000818 <__aeabi_dadd+0x294>
 80008ca:	490d      	ldr	r1, [pc, #52]	; (8000900 <__aeabi_dadd+0x37c>)
 80008cc:	1c70      	adds	r0, r6, #1
 80008ce:	4208      	tst	r0, r1
 80008d0:	d000      	beq.n	80008d4 <__aeabi_dadd+0x350>
 80008d2:	e0bb      	b.n	8000a4c <__aeabi_dadd+0x4c8>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d000      	beq.n	80008da <__aeabi_dadd+0x356>
 80008d8:	e114      	b.n	8000b04 <__aeabi_dadd+0x580>
 80008da:	4649      	mov	r1, r9
 80008dc:	4319      	orrs	r1, r3
 80008de:	d100      	bne.n	80008e2 <__aeabi_dadd+0x35e>
 80008e0:	e175      	b.n	8000bce <__aeabi_dadd+0x64a>
 80008e2:	0029      	movs	r1, r5
 80008e4:	4339      	orrs	r1, r7
 80008e6:	d000      	beq.n	80008ea <__aeabi_dadd+0x366>
 80008e8:	e17e      	b.n	8000be8 <__aeabi_dadd+0x664>
 80008ea:	4649      	mov	r1, r9
 80008ec:	0758      	lsls	r0, r3, #29
 80008ee:	08c9      	lsrs	r1, r1, #3
 80008f0:	4301      	orrs	r1, r0
 80008f2:	08db      	lsrs	r3, r3, #3
 80008f4:	e76e      	b.n	80007d4 <__aeabi_dadd+0x250>
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	000007ff 	.word	0x000007ff
 80008fc:	ff7fffff 	.word	0xff7fffff
 8000900:	000007fe 	.word	0x000007fe
 8000904:	4649      	mov	r1, r9
 8000906:	1bcd      	subs	r5, r1, r7
 8000908:	4661      	mov	r1, ip
 800090a:	1a58      	subs	r0, r3, r1
 800090c:	45a9      	cmp	r9, r5
 800090e:	4189      	sbcs	r1, r1
 8000910:	4249      	negs	r1, r1
 8000912:	4688      	mov	r8, r1
 8000914:	0001      	movs	r1, r0
 8000916:	4640      	mov	r0, r8
 8000918:	1a09      	subs	r1, r1, r0
 800091a:	4688      	mov	r8, r1
 800091c:	0209      	lsls	r1, r1, #8
 800091e:	d500      	bpl.n	8000922 <__aeabi_dadd+0x39e>
 8000920:	e0a6      	b.n	8000a70 <__aeabi_dadd+0x4ec>
 8000922:	4641      	mov	r1, r8
 8000924:	4329      	orrs	r1, r5
 8000926:	d000      	beq.n	800092a <__aeabi_dadd+0x3a6>
 8000928:	e67f      	b.n	800062a <__aeabi_dadd+0xa6>
 800092a:	2300      	movs	r3, #0
 800092c:	2400      	movs	r4, #0
 800092e:	e751      	b.n	80007d4 <__aeabi_dadd+0x250>
 8000930:	4cc7      	ldr	r4, [pc, #796]	; (8000c50 <__aeabi_dadd+0x6cc>)
 8000932:	42a1      	cmp	r1, r4
 8000934:	d100      	bne.n	8000938 <__aeabi_dadd+0x3b4>
 8000936:	e0c7      	b.n	8000ac8 <__aeabi_dadd+0x544>
 8000938:	2480      	movs	r4, #128	; 0x80
 800093a:	0424      	lsls	r4, r4, #16
 800093c:	4323      	orrs	r3, r4
 800093e:	2a38      	cmp	r2, #56	; 0x38
 8000940:	dc54      	bgt.n	80009ec <__aeabi_dadd+0x468>
 8000942:	2a1f      	cmp	r2, #31
 8000944:	dd00      	ble.n	8000948 <__aeabi_dadd+0x3c4>
 8000946:	e0cc      	b.n	8000ae2 <__aeabi_dadd+0x55e>
 8000948:	2420      	movs	r4, #32
 800094a:	4648      	mov	r0, r9
 800094c:	1aa4      	subs	r4, r4, r2
 800094e:	001d      	movs	r5, r3
 8000950:	464e      	mov	r6, r9
 8000952:	40a0      	lsls	r0, r4
 8000954:	40d6      	lsrs	r6, r2
 8000956:	40a5      	lsls	r5, r4
 8000958:	0004      	movs	r4, r0
 800095a:	40d3      	lsrs	r3, r2
 800095c:	4662      	mov	r2, ip
 800095e:	4335      	orrs	r5, r6
 8000960:	1e66      	subs	r6, r4, #1
 8000962:	41b4      	sbcs	r4, r6
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	469c      	mov	ip, r3
 8000968:	4325      	orrs	r5, r4
 800096a:	e044      	b.n	80009f6 <__aeabi_dadd+0x472>
 800096c:	4662      	mov	r2, ip
 800096e:	433a      	orrs	r2, r7
 8000970:	0015      	movs	r5, r2
 8000972:	1e6f      	subs	r7, r5, #1
 8000974:	41bd      	sbcs	r5, r7
 8000976:	444d      	add	r5, r9
 8000978:	454d      	cmp	r5, r9
 800097a:	4189      	sbcs	r1, r1
 800097c:	4249      	negs	r1, r1
 800097e:	4688      	mov	r8, r1
 8000980:	4498      	add	r8, r3
 8000982:	4643      	mov	r3, r8
 8000984:	021b      	lsls	r3, r3, #8
 8000986:	d400      	bmi.n	800098a <__aeabi_dadd+0x406>
 8000988:	e718      	b.n	80007bc <__aeabi_dadd+0x238>
 800098a:	4bb1      	ldr	r3, [pc, #708]	; (8000c50 <__aeabi_dadd+0x6cc>)
 800098c:	3601      	adds	r6, #1
 800098e:	429e      	cmp	r6, r3
 8000990:	d049      	beq.n	8000a26 <__aeabi_dadd+0x4a2>
 8000992:	4642      	mov	r2, r8
 8000994:	4baf      	ldr	r3, [pc, #700]	; (8000c54 <__aeabi_dadd+0x6d0>)
 8000996:	2101      	movs	r1, #1
 8000998:	401a      	ands	r2, r3
 800099a:	0013      	movs	r3, r2
 800099c:	086a      	lsrs	r2, r5, #1
 800099e:	400d      	ands	r5, r1
 80009a0:	4315      	orrs	r5, r2
 80009a2:	07d9      	lsls	r1, r3, #31
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	4698      	mov	r8, r3
 80009a8:	430d      	orrs	r5, r1
 80009aa:	e665      	b.n	8000678 <__aeabi_dadd+0xf4>
 80009ac:	0018      	movs	r0, r3
 80009ae:	3e1f      	subs	r6, #31
 80009b0:	40f0      	lsrs	r0, r6
 80009b2:	2a20      	cmp	r2, #32
 80009b4:	d003      	beq.n	80009be <__aeabi_dadd+0x43a>
 80009b6:	2140      	movs	r1, #64	; 0x40
 80009b8:	1a8a      	subs	r2, r1, r2
 80009ba:	4093      	lsls	r3, r2
 80009bc:	431d      	orrs	r5, r3
 80009be:	1e69      	subs	r1, r5, #1
 80009c0:	418d      	sbcs	r5, r1
 80009c2:	2300      	movs	r3, #0
 80009c4:	2600      	movs	r6, #0
 80009c6:	4698      	mov	r8, r3
 80009c8:	4305      	orrs	r5, r0
 80009ca:	e6f7      	b.n	80007bc <__aeabi_dadd+0x238>
 80009cc:	0011      	movs	r1, r2
 80009ce:	4665      	mov	r5, ip
 80009d0:	3920      	subs	r1, #32
 80009d2:	40cd      	lsrs	r5, r1
 80009d4:	2a20      	cmp	r2, #32
 80009d6:	d004      	beq.n	80009e2 <__aeabi_dadd+0x45e>
 80009d8:	2040      	movs	r0, #64	; 0x40
 80009da:	4661      	mov	r1, ip
 80009dc:	1a82      	subs	r2, r0, r2
 80009de:	4091      	lsls	r1, r2
 80009e0:	430f      	orrs	r7, r1
 80009e2:	0039      	movs	r1, r7
 80009e4:	1e4f      	subs	r7, r1, #1
 80009e6:	41b9      	sbcs	r1, r7
 80009e8:	4329      	orrs	r1, r5
 80009ea:	e60f      	b.n	800060c <__aeabi_dadd+0x88>
 80009ec:	464a      	mov	r2, r9
 80009ee:	4313      	orrs	r3, r2
 80009f0:	001d      	movs	r5, r3
 80009f2:	1e6b      	subs	r3, r5, #1
 80009f4:	419d      	sbcs	r5, r3
 80009f6:	1b7d      	subs	r5, r7, r5
 80009f8:	42af      	cmp	r7, r5
 80009fa:	419b      	sbcs	r3, r3
 80009fc:	4662      	mov	r2, ip
 80009fe:	425b      	negs	r3, r3
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	4698      	mov	r8, r3
 8000a04:	4654      	mov	r4, sl
 8000a06:	000e      	movs	r6, r1
 8000a08:	e607      	b.n	800061a <__aeabi_dadd+0x96>
 8000a0a:	4648      	mov	r0, r9
 8000a0c:	4318      	orrs	r0, r3
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_dadd+0x48e>
 8000a10:	e0b3      	b.n	8000b7a <__aeabi_dadd+0x5f6>
 8000a12:	1e50      	subs	r0, r2, #1
 8000a14:	2a01      	cmp	r2, #1
 8000a16:	d100      	bne.n	8000a1a <__aeabi_dadd+0x496>
 8000a18:	e10d      	b.n	8000c36 <__aeabi_dadd+0x6b2>
 8000a1a:	4d8d      	ldr	r5, [pc, #564]	; (8000c50 <__aeabi_dadd+0x6cc>)
 8000a1c:	42aa      	cmp	r2, r5
 8000a1e:	d100      	bne.n	8000a22 <__aeabi_dadd+0x49e>
 8000a20:	e0a5      	b.n	8000b6e <__aeabi_dadd+0x5ea>
 8000a22:	0002      	movs	r2, r0
 8000a24:	e710      	b.n	8000848 <__aeabi_dadd+0x2c4>
 8000a26:	0032      	movs	r2, r6
 8000a28:	2300      	movs	r3, #0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	e644      	b.n	80006b8 <__aeabi_dadd+0x134>
 8000a2e:	2120      	movs	r1, #32
 8000a30:	0038      	movs	r0, r7
 8000a32:	1a89      	subs	r1, r1, r2
 8000a34:	4665      	mov	r5, ip
 8000a36:	408f      	lsls	r7, r1
 8000a38:	408d      	lsls	r5, r1
 8000a3a:	40d0      	lsrs	r0, r2
 8000a3c:	1e79      	subs	r1, r7, #1
 8000a3e:	418f      	sbcs	r7, r1
 8000a40:	4305      	orrs	r5, r0
 8000a42:	433d      	orrs	r5, r7
 8000a44:	4667      	mov	r7, ip
 8000a46:	40d7      	lsrs	r7, r2
 8000a48:	19db      	adds	r3, r3, r7
 8000a4a:	e794      	b.n	8000976 <__aeabi_dadd+0x3f2>
 8000a4c:	4a80      	ldr	r2, [pc, #512]	; (8000c50 <__aeabi_dadd+0x6cc>)
 8000a4e:	4290      	cmp	r0, r2
 8000a50:	d100      	bne.n	8000a54 <__aeabi_dadd+0x4d0>
 8000a52:	e0ec      	b.n	8000c2e <__aeabi_dadd+0x6aa>
 8000a54:	0039      	movs	r1, r7
 8000a56:	4449      	add	r1, r9
 8000a58:	4549      	cmp	r1, r9
 8000a5a:	4192      	sbcs	r2, r2
 8000a5c:	4463      	add	r3, ip
 8000a5e:	4252      	negs	r2, r2
 8000a60:	189b      	adds	r3, r3, r2
 8000a62:	07dd      	lsls	r5, r3, #31
 8000a64:	0849      	lsrs	r1, r1, #1
 8000a66:	085b      	lsrs	r3, r3, #1
 8000a68:	4698      	mov	r8, r3
 8000a6a:	0006      	movs	r6, r0
 8000a6c:	430d      	orrs	r5, r1
 8000a6e:	e6a5      	b.n	80007bc <__aeabi_dadd+0x238>
 8000a70:	464a      	mov	r2, r9
 8000a72:	1abd      	subs	r5, r7, r2
 8000a74:	42af      	cmp	r7, r5
 8000a76:	4189      	sbcs	r1, r1
 8000a78:	4662      	mov	r2, ip
 8000a7a:	4249      	negs	r1, r1
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	1a5b      	subs	r3, r3, r1
 8000a80:	4698      	mov	r8, r3
 8000a82:	4654      	mov	r4, sl
 8000a84:	e5d1      	b.n	800062a <__aeabi_dadd+0xa6>
 8000a86:	076c      	lsls	r4, r5, #29
 8000a88:	08f9      	lsrs	r1, r7, #3
 8000a8a:	4321      	orrs	r1, r4
 8000a8c:	08eb      	lsrs	r3, r5, #3
 8000a8e:	0004      	movs	r4, r0
 8000a90:	e69d      	b.n	80007ce <__aeabi_dadd+0x24a>
 8000a92:	464a      	mov	r2, r9
 8000a94:	431a      	orrs	r2, r3
 8000a96:	d175      	bne.n	8000b84 <__aeabi_dadd+0x600>
 8000a98:	4661      	mov	r1, ip
 8000a9a:	4339      	orrs	r1, r7
 8000a9c:	d114      	bne.n	8000ac8 <__aeabi_dadd+0x544>
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	2400      	movs	r4, #0
 8000aa2:	031b      	lsls	r3, r3, #12
 8000aa4:	e6bc      	b.n	8000820 <__aeabi_dadd+0x29c>
 8000aa6:	464a      	mov	r2, r9
 8000aa8:	1bd5      	subs	r5, r2, r7
 8000aaa:	45a9      	cmp	r9, r5
 8000aac:	4189      	sbcs	r1, r1
 8000aae:	4662      	mov	r2, ip
 8000ab0:	4249      	negs	r1, r1
 8000ab2:	1a9b      	subs	r3, r3, r2
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	4698      	mov	r8, r3
 8000ab8:	2601      	movs	r6, #1
 8000aba:	e5ae      	b.n	800061a <__aeabi_dadd+0x96>
 8000abc:	464a      	mov	r2, r9
 8000abe:	08d1      	lsrs	r1, r2, #3
 8000ac0:	075a      	lsls	r2, r3, #29
 8000ac2:	4311      	orrs	r1, r2
 8000ac4:	08db      	lsrs	r3, r3, #3
 8000ac6:	e6a7      	b.n	8000818 <__aeabi_dadd+0x294>
 8000ac8:	4663      	mov	r3, ip
 8000aca:	08f9      	lsrs	r1, r7, #3
 8000acc:	075a      	lsls	r2, r3, #29
 8000ace:	4654      	mov	r4, sl
 8000ad0:	4311      	orrs	r1, r2
 8000ad2:	08db      	lsrs	r3, r3, #3
 8000ad4:	e6a0      	b.n	8000818 <__aeabi_dadd+0x294>
 8000ad6:	464a      	mov	r2, r9
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	001d      	movs	r5, r3
 8000adc:	1e6b      	subs	r3, r5, #1
 8000ade:	419d      	sbcs	r5, r3
 8000ae0:	e6c7      	b.n	8000872 <__aeabi_dadd+0x2ee>
 8000ae2:	0014      	movs	r4, r2
 8000ae4:	001e      	movs	r6, r3
 8000ae6:	3c20      	subs	r4, #32
 8000ae8:	40e6      	lsrs	r6, r4
 8000aea:	2a20      	cmp	r2, #32
 8000aec:	d005      	beq.n	8000afa <__aeabi_dadd+0x576>
 8000aee:	2440      	movs	r4, #64	; 0x40
 8000af0:	1aa2      	subs	r2, r4, r2
 8000af2:	4093      	lsls	r3, r2
 8000af4:	464a      	mov	r2, r9
 8000af6:	431a      	orrs	r2, r3
 8000af8:	4691      	mov	r9, r2
 8000afa:	464d      	mov	r5, r9
 8000afc:	1e6b      	subs	r3, r5, #1
 8000afe:	419d      	sbcs	r5, r3
 8000b00:	4335      	orrs	r5, r6
 8000b02:	e778      	b.n	80009f6 <__aeabi_dadd+0x472>
 8000b04:	464a      	mov	r2, r9
 8000b06:	431a      	orrs	r2, r3
 8000b08:	d000      	beq.n	8000b0c <__aeabi_dadd+0x588>
 8000b0a:	e66b      	b.n	80007e4 <__aeabi_dadd+0x260>
 8000b0c:	076b      	lsls	r3, r5, #29
 8000b0e:	08f9      	lsrs	r1, r7, #3
 8000b10:	4319      	orrs	r1, r3
 8000b12:	08eb      	lsrs	r3, r5, #3
 8000b14:	e680      	b.n	8000818 <__aeabi_dadd+0x294>
 8000b16:	4661      	mov	r1, ip
 8000b18:	4339      	orrs	r1, r7
 8000b1a:	d054      	beq.n	8000bc6 <__aeabi_dadd+0x642>
 8000b1c:	4663      	mov	r3, ip
 8000b1e:	08f9      	lsrs	r1, r7, #3
 8000b20:	075c      	lsls	r4, r3, #29
 8000b22:	4321      	orrs	r1, r4
 8000b24:	08db      	lsrs	r3, r3, #3
 8000b26:	0004      	movs	r4, r0
 8000b28:	e654      	b.n	80007d4 <__aeabi_dadd+0x250>
 8000b2a:	464a      	mov	r2, r9
 8000b2c:	1abd      	subs	r5, r7, r2
 8000b2e:	42af      	cmp	r7, r5
 8000b30:	4189      	sbcs	r1, r1
 8000b32:	4662      	mov	r2, ip
 8000b34:	4249      	negs	r1, r1
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	1a5b      	subs	r3, r3, r1
 8000b3a:	4698      	mov	r8, r3
 8000b3c:	0004      	movs	r4, r0
 8000b3e:	2601      	movs	r6, #1
 8000b40:	e56b      	b.n	800061a <__aeabi_dadd+0x96>
 8000b42:	464a      	mov	r2, r9
 8000b44:	1bd5      	subs	r5, r2, r7
 8000b46:	45a9      	cmp	r9, r5
 8000b48:	4189      	sbcs	r1, r1
 8000b4a:	4662      	mov	r2, ip
 8000b4c:	4249      	negs	r1, r1
 8000b4e:	1a9a      	subs	r2, r3, r2
 8000b50:	1a52      	subs	r2, r2, r1
 8000b52:	4690      	mov	r8, r2
 8000b54:	0212      	lsls	r2, r2, #8
 8000b56:	d532      	bpl.n	8000bbe <__aeabi_dadd+0x63a>
 8000b58:	464a      	mov	r2, r9
 8000b5a:	1abd      	subs	r5, r7, r2
 8000b5c:	42af      	cmp	r7, r5
 8000b5e:	4189      	sbcs	r1, r1
 8000b60:	4662      	mov	r2, ip
 8000b62:	4249      	negs	r1, r1
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	1a5b      	subs	r3, r3, r1
 8000b68:	4698      	mov	r8, r3
 8000b6a:	0004      	movs	r4, r0
 8000b6c:	e584      	b.n	8000678 <__aeabi_dadd+0xf4>
 8000b6e:	4663      	mov	r3, ip
 8000b70:	08f9      	lsrs	r1, r7, #3
 8000b72:	075a      	lsls	r2, r3, #29
 8000b74:	4311      	orrs	r1, r2
 8000b76:	08db      	lsrs	r3, r3, #3
 8000b78:	e64e      	b.n	8000818 <__aeabi_dadd+0x294>
 8000b7a:	08f9      	lsrs	r1, r7, #3
 8000b7c:	0768      	lsls	r0, r5, #29
 8000b7e:	4301      	orrs	r1, r0
 8000b80:	08eb      	lsrs	r3, r5, #3
 8000b82:	e624      	b.n	80007ce <__aeabi_dadd+0x24a>
 8000b84:	4662      	mov	r2, ip
 8000b86:	433a      	orrs	r2, r7
 8000b88:	d100      	bne.n	8000b8c <__aeabi_dadd+0x608>
 8000b8a:	e698      	b.n	80008be <__aeabi_dadd+0x33a>
 8000b8c:	464a      	mov	r2, r9
 8000b8e:	08d1      	lsrs	r1, r2, #3
 8000b90:	075a      	lsls	r2, r3, #29
 8000b92:	4311      	orrs	r1, r2
 8000b94:	08da      	lsrs	r2, r3, #3
 8000b96:	2380      	movs	r3, #128	; 0x80
 8000b98:	031b      	lsls	r3, r3, #12
 8000b9a:	421a      	tst	r2, r3
 8000b9c:	d008      	beq.n	8000bb0 <__aeabi_dadd+0x62c>
 8000b9e:	4660      	mov	r0, ip
 8000ba0:	08c5      	lsrs	r5, r0, #3
 8000ba2:	421d      	tst	r5, r3
 8000ba4:	d104      	bne.n	8000bb0 <__aeabi_dadd+0x62c>
 8000ba6:	4654      	mov	r4, sl
 8000ba8:	002a      	movs	r2, r5
 8000baa:	08f9      	lsrs	r1, r7, #3
 8000bac:	0743      	lsls	r3, r0, #29
 8000bae:	4319      	orrs	r1, r3
 8000bb0:	0f4b      	lsrs	r3, r1, #29
 8000bb2:	00c9      	lsls	r1, r1, #3
 8000bb4:	075b      	lsls	r3, r3, #29
 8000bb6:	08c9      	lsrs	r1, r1, #3
 8000bb8:	4319      	orrs	r1, r3
 8000bba:	0013      	movs	r3, r2
 8000bbc:	e62c      	b.n	8000818 <__aeabi_dadd+0x294>
 8000bbe:	4641      	mov	r1, r8
 8000bc0:	4329      	orrs	r1, r5
 8000bc2:	d000      	beq.n	8000bc6 <__aeabi_dadd+0x642>
 8000bc4:	e5fa      	b.n	80007bc <__aeabi_dadd+0x238>
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	000a      	movs	r2, r1
 8000bca:	2400      	movs	r4, #0
 8000bcc:	e602      	b.n	80007d4 <__aeabi_dadd+0x250>
 8000bce:	076b      	lsls	r3, r5, #29
 8000bd0:	08f9      	lsrs	r1, r7, #3
 8000bd2:	4319      	orrs	r1, r3
 8000bd4:	08eb      	lsrs	r3, r5, #3
 8000bd6:	e5fd      	b.n	80007d4 <__aeabi_dadd+0x250>
 8000bd8:	4663      	mov	r3, ip
 8000bda:	08f9      	lsrs	r1, r7, #3
 8000bdc:	075b      	lsls	r3, r3, #29
 8000bde:	4319      	orrs	r1, r3
 8000be0:	4663      	mov	r3, ip
 8000be2:	0004      	movs	r4, r0
 8000be4:	08db      	lsrs	r3, r3, #3
 8000be6:	e617      	b.n	8000818 <__aeabi_dadd+0x294>
 8000be8:	003d      	movs	r5, r7
 8000bea:	444d      	add	r5, r9
 8000bec:	4463      	add	r3, ip
 8000bee:	454d      	cmp	r5, r9
 8000bf0:	4189      	sbcs	r1, r1
 8000bf2:	4698      	mov	r8, r3
 8000bf4:	4249      	negs	r1, r1
 8000bf6:	4488      	add	r8, r1
 8000bf8:	4643      	mov	r3, r8
 8000bfa:	021b      	lsls	r3, r3, #8
 8000bfc:	d400      	bmi.n	8000c00 <__aeabi_dadd+0x67c>
 8000bfe:	e5dd      	b.n	80007bc <__aeabi_dadd+0x238>
 8000c00:	4642      	mov	r2, r8
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <__aeabi_dadd+0x6d0>)
 8000c04:	2601      	movs	r6, #1
 8000c06:	401a      	ands	r2, r3
 8000c08:	4690      	mov	r8, r2
 8000c0a:	e5d7      	b.n	80007bc <__aeabi_dadd+0x238>
 8000c0c:	0010      	movs	r0, r2
 8000c0e:	001e      	movs	r6, r3
 8000c10:	3820      	subs	r0, #32
 8000c12:	40c6      	lsrs	r6, r0
 8000c14:	2a20      	cmp	r2, #32
 8000c16:	d005      	beq.n	8000c24 <__aeabi_dadd+0x6a0>
 8000c18:	2040      	movs	r0, #64	; 0x40
 8000c1a:	1a82      	subs	r2, r0, r2
 8000c1c:	4093      	lsls	r3, r2
 8000c1e:	464a      	mov	r2, r9
 8000c20:	431a      	orrs	r2, r3
 8000c22:	4691      	mov	r9, r2
 8000c24:	464d      	mov	r5, r9
 8000c26:	1e6b      	subs	r3, r5, #1
 8000c28:	419d      	sbcs	r5, r3
 8000c2a:	4335      	orrs	r5, r6
 8000c2c:	e621      	b.n	8000872 <__aeabi_dadd+0x2ee>
 8000c2e:	0002      	movs	r2, r0
 8000c30:	2300      	movs	r3, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	e540      	b.n	80006b8 <__aeabi_dadd+0x134>
 8000c36:	464a      	mov	r2, r9
 8000c38:	19d5      	adds	r5, r2, r7
 8000c3a:	42bd      	cmp	r5, r7
 8000c3c:	4189      	sbcs	r1, r1
 8000c3e:	4463      	add	r3, ip
 8000c40:	4698      	mov	r8, r3
 8000c42:	4249      	negs	r1, r1
 8000c44:	4488      	add	r8, r1
 8000c46:	e5b3      	b.n	80007b0 <__aeabi_dadd+0x22c>
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4a01      	ldr	r2, [pc, #4]	; (8000c50 <__aeabi_dadd+0x6cc>)
 8000c4c:	000b      	movs	r3, r1
 8000c4e:	e533      	b.n	80006b8 <__aeabi_dadd+0x134>
 8000c50:	000007ff 	.word	0x000007ff
 8000c54:	ff7fffff 	.word	0xff7fffff

08000c58 <__aeabi_ddiv>:
 8000c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5a:	4657      	mov	r7, sl
 8000c5c:	464e      	mov	r6, r9
 8000c5e:	4645      	mov	r5, r8
 8000c60:	46de      	mov	lr, fp
 8000c62:	b5e0      	push	{r5, r6, r7, lr}
 8000c64:	4681      	mov	r9, r0
 8000c66:	0005      	movs	r5, r0
 8000c68:	030c      	lsls	r4, r1, #12
 8000c6a:	0048      	lsls	r0, r1, #1
 8000c6c:	4692      	mov	sl, r2
 8000c6e:	001f      	movs	r7, r3
 8000c70:	b085      	sub	sp, #20
 8000c72:	0b24      	lsrs	r4, r4, #12
 8000c74:	0d40      	lsrs	r0, r0, #21
 8000c76:	0fce      	lsrs	r6, r1, #31
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	d059      	beq.n	8000d30 <__aeabi_ddiv+0xd8>
 8000c7c:	4b87      	ldr	r3, [pc, #540]	; (8000e9c <__aeabi_ddiv+0x244>)
 8000c7e:	4298      	cmp	r0, r3
 8000c80:	d100      	bne.n	8000c84 <__aeabi_ddiv+0x2c>
 8000c82:	e098      	b.n	8000db6 <__aeabi_ddiv+0x15e>
 8000c84:	0f6b      	lsrs	r3, r5, #29
 8000c86:	00e4      	lsls	r4, r4, #3
 8000c88:	431c      	orrs	r4, r3
 8000c8a:	2380      	movs	r3, #128	; 0x80
 8000c8c:	041b      	lsls	r3, r3, #16
 8000c8e:	4323      	orrs	r3, r4
 8000c90:	4698      	mov	r8, r3
 8000c92:	4b83      	ldr	r3, [pc, #524]	; (8000ea0 <__aeabi_ddiv+0x248>)
 8000c94:	00ed      	lsls	r5, r5, #3
 8000c96:	469b      	mov	fp, r3
 8000c98:	2300      	movs	r3, #0
 8000c9a:	4699      	mov	r9, r3
 8000c9c:	4483      	add	fp, r0
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	033c      	lsls	r4, r7, #12
 8000ca2:	007b      	lsls	r3, r7, #1
 8000ca4:	4650      	mov	r0, sl
 8000ca6:	0b24      	lsrs	r4, r4, #12
 8000ca8:	0d5b      	lsrs	r3, r3, #21
 8000caa:	0fff      	lsrs	r7, r7, #31
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d067      	beq.n	8000d80 <__aeabi_ddiv+0x128>
 8000cb0:	4a7a      	ldr	r2, [pc, #488]	; (8000e9c <__aeabi_ddiv+0x244>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d018      	beq.n	8000ce8 <__aeabi_ddiv+0x90>
 8000cb6:	497a      	ldr	r1, [pc, #488]	; (8000ea0 <__aeabi_ddiv+0x248>)
 8000cb8:	0f42      	lsrs	r2, r0, #29
 8000cba:	468c      	mov	ip, r1
 8000cbc:	00e4      	lsls	r4, r4, #3
 8000cbe:	4659      	mov	r1, fp
 8000cc0:	4314      	orrs	r4, r2
 8000cc2:	2280      	movs	r2, #128	; 0x80
 8000cc4:	4463      	add	r3, ip
 8000cc6:	0412      	lsls	r2, r2, #16
 8000cc8:	1acb      	subs	r3, r1, r3
 8000cca:	4314      	orrs	r4, r2
 8000ccc:	469b      	mov	fp, r3
 8000cce:	00c2      	lsls	r2, r0, #3
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	0033      	movs	r3, r6
 8000cd4:	407b      	eors	r3, r7
 8000cd6:	469a      	mov	sl, r3
 8000cd8:	464b      	mov	r3, r9
 8000cda:	2b0f      	cmp	r3, #15
 8000cdc:	d900      	bls.n	8000ce0 <__aeabi_ddiv+0x88>
 8000cde:	e0ef      	b.n	8000ec0 <__aeabi_ddiv+0x268>
 8000ce0:	4970      	ldr	r1, [pc, #448]	; (8000ea4 <__aeabi_ddiv+0x24c>)
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	58cb      	ldr	r3, [r1, r3]
 8000ce6:	469f      	mov	pc, r3
 8000ce8:	4b6f      	ldr	r3, [pc, #444]	; (8000ea8 <__aeabi_ddiv+0x250>)
 8000cea:	4652      	mov	r2, sl
 8000cec:	469c      	mov	ip, r3
 8000cee:	4322      	orrs	r2, r4
 8000cf0:	44e3      	add	fp, ip
 8000cf2:	2a00      	cmp	r2, #0
 8000cf4:	d000      	beq.n	8000cf8 <__aeabi_ddiv+0xa0>
 8000cf6:	e095      	b.n	8000e24 <__aeabi_ddiv+0x1cc>
 8000cf8:	4649      	mov	r1, r9
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	4689      	mov	r9, r1
 8000d00:	2400      	movs	r4, #0
 8000d02:	2002      	movs	r0, #2
 8000d04:	e7e5      	b.n	8000cd2 <__aeabi_ddiv+0x7a>
 8000d06:	2300      	movs	r3, #0
 8000d08:	2400      	movs	r4, #0
 8000d0a:	2500      	movs	r5, #0
 8000d0c:	4652      	mov	r2, sl
 8000d0e:	051b      	lsls	r3, r3, #20
 8000d10:	4323      	orrs	r3, r4
 8000d12:	07d2      	lsls	r2, r2, #31
 8000d14:	4313      	orrs	r3, r2
 8000d16:	0028      	movs	r0, r5
 8000d18:	0019      	movs	r1, r3
 8000d1a:	b005      	add	sp, #20
 8000d1c:	bcf0      	pop	{r4, r5, r6, r7}
 8000d1e:	46bb      	mov	fp, r7
 8000d20:	46b2      	mov	sl, r6
 8000d22:	46a9      	mov	r9, r5
 8000d24:	46a0      	mov	r8, r4
 8000d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d28:	2400      	movs	r4, #0
 8000d2a:	2500      	movs	r5, #0
 8000d2c:	4b5b      	ldr	r3, [pc, #364]	; (8000e9c <__aeabi_ddiv+0x244>)
 8000d2e:	e7ed      	b.n	8000d0c <__aeabi_ddiv+0xb4>
 8000d30:	464b      	mov	r3, r9
 8000d32:	4323      	orrs	r3, r4
 8000d34:	4698      	mov	r8, r3
 8000d36:	d100      	bne.n	8000d3a <__aeabi_ddiv+0xe2>
 8000d38:	e089      	b.n	8000e4e <__aeabi_ddiv+0x1f6>
 8000d3a:	2c00      	cmp	r4, #0
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_ddiv+0xe8>
 8000d3e:	e1e0      	b.n	8001102 <__aeabi_ddiv+0x4aa>
 8000d40:	0020      	movs	r0, r4
 8000d42:	f001 fabf 	bl	80022c4 <__clzsi2>
 8000d46:	0001      	movs	r1, r0
 8000d48:	0002      	movs	r2, r0
 8000d4a:	390b      	subs	r1, #11
 8000d4c:	231d      	movs	r3, #29
 8000d4e:	1a5b      	subs	r3, r3, r1
 8000d50:	4649      	mov	r1, r9
 8000d52:	0010      	movs	r0, r2
 8000d54:	40d9      	lsrs	r1, r3
 8000d56:	3808      	subs	r0, #8
 8000d58:	4084      	lsls	r4, r0
 8000d5a:	000b      	movs	r3, r1
 8000d5c:	464d      	mov	r5, r9
 8000d5e:	4323      	orrs	r3, r4
 8000d60:	4698      	mov	r8, r3
 8000d62:	4085      	lsls	r5, r0
 8000d64:	4851      	ldr	r0, [pc, #324]	; (8000eac <__aeabi_ddiv+0x254>)
 8000d66:	033c      	lsls	r4, r7, #12
 8000d68:	1a83      	subs	r3, r0, r2
 8000d6a:	469b      	mov	fp, r3
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4699      	mov	r9, r3
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	007b      	lsls	r3, r7, #1
 8000d74:	4650      	mov	r0, sl
 8000d76:	0b24      	lsrs	r4, r4, #12
 8000d78:	0d5b      	lsrs	r3, r3, #21
 8000d7a:	0fff      	lsrs	r7, r7, #31
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d197      	bne.n	8000cb0 <__aeabi_ddiv+0x58>
 8000d80:	4652      	mov	r2, sl
 8000d82:	4322      	orrs	r2, r4
 8000d84:	d055      	beq.n	8000e32 <__aeabi_ddiv+0x1da>
 8000d86:	2c00      	cmp	r4, #0
 8000d88:	d100      	bne.n	8000d8c <__aeabi_ddiv+0x134>
 8000d8a:	e1ca      	b.n	8001122 <__aeabi_ddiv+0x4ca>
 8000d8c:	0020      	movs	r0, r4
 8000d8e:	f001 fa99 	bl	80022c4 <__clzsi2>
 8000d92:	0002      	movs	r2, r0
 8000d94:	3a0b      	subs	r2, #11
 8000d96:	231d      	movs	r3, #29
 8000d98:	0001      	movs	r1, r0
 8000d9a:	1a9b      	subs	r3, r3, r2
 8000d9c:	4652      	mov	r2, sl
 8000d9e:	3908      	subs	r1, #8
 8000da0:	40da      	lsrs	r2, r3
 8000da2:	408c      	lsls	r4, r1
 8000da4:	4314      	orrs	r4, r2
 8000da6:	4652      	mov	r2, sl
 8000da8:	408a      	lsls	r2, r1
 8000daa:	4b41      	ldr	r3, [pc, #260]	; (8000eb0 <__aeabi_ddiv+0x258>)
 8000dac:	4458      	add	r0, fp
 8000dae:	469b      	mov	fp, r3
 8000db0:	4483      	add	fp, r0
 8000db2:	2000      	movs	r0, #0
 8000db4:	e78d      	b.n	8000cd2 <__aeabi_ddiv+0x7a>
 8000db6:	464b      	mov	r3, r9
 8000db8:	4323      	orrs	r3, r4
 8000dba:	4698      	mov	r8, r3
 8000dbc:	d140      	bne.n	8000e40 <__aeabi_ddiv+0x1e8>
 8000dbe:	2308      	movs	r3, #8
 8000dc0:	4699      	mov	r9, r3
 8000dc2:	3b06      	subs	r3, #6
 8000dc4:	2500      	movs	r5, #0
 8000dc6:	4683      	mov	fp, r0
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	e769      	b.n	8000ca0 <__aeabi_ddiv+0x48>
 8000dcc:	46b2      	mov	sl, r6
 8000dce:	9b00      	ldr	r3, [sp, #0]
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d0a9      	beq.n	8000d28 <__aeabi_ddiv+0xd0>
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	d100      	bne.n	8000dda <__aeabi_ddiv+0x182>
 8000dd8:	e211      	b.n	80011fe <__aeabi_ddiv+0x5a6>
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d093      	beq.n	8000d06 <__aeabi_ddiv+0xae>
 8000dde:	4a35      	ldr	r2, [pc, #212]	; (8000eb4 <__aeabi_ddiv+0x25c>)
 8000de0:	445a      	add	r2, fp
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	dc00      	bgt.n	8000de8 <__aeabi_ddiv+0x190>
 8000de6:	e13c      	b.n	8001062 <__aeabi_ddiv+0x40a>
 8000de8:	076b      	lsls	r3, r5, #29
 8000dea:	d000      	beq.n	8000dee <__aeabi_ddiv+0x196>
 8000dec:	e1a7      	b.n	800113e <__aeabi_ddiv+0x4e6>
 8000dee:	08ed      	lsrs	r5, r5, #3
 8000df0:	4643      	mov	r3, r8
 8000df2:	01db      	lsls	r3, r3, #7
 8000df4:	d506      	bpl.n	8000e04 <__aeabi_ddiv+0x1ac>
 8000df6:	4642      	mov	r2, r8
 8000df8:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <__aeabi_ddiv+0x260>)
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	4690      	mov	r8, r2
 8000dfe:	2280      	movs	r2, #128	; 0x80
 8000e00:	00d2      	lsls	r2, r2, #3
 8000e02:	445a      	add	r2, fp
 8000e04:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <__aeabi_ddiv+0x264>)
 8000e06:	429a      	cmp	r2, r3
 8000e08:	dc8e      	bgt.n	8000d28 <__aeabi_ddiv+0xd0>
 8000e0a:	4643      	mov	r3, r8
 8000e0c:	0552      	lsls	r2, r2, #21
 8000e0e:	0758      	lsls	r0, r3, #29
 8000e10:	025c      	lsls	r4, r3, #9
 8000e12:	4305      	orrs	r5, r0
 8000e14:	0b24      	lsrs	r4, r4, #12
 8000e16:	0d53      	lsrs	r3, r2, #21
 8000e18:	e778      	b.n	8000d0c <__aeabi_ddiv+0xb4>
 8000e1a:	46ba      	mov	sl, r7
 8000e1c:	46a0      	mov	r8, r4
 8000e1e:	0015      	movs	r5, r2
 8000e20:	9000      	str	r0, [sp, #0]
 8000e22:	e7d4      	b.n	8000dce <__aeabi_ddiv+0x176>
 8000e24:	464a      	mov	r2, r9
 8000e26:	2303      	movs	r3, #3
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	4691      	mov	r9, r2
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	4652      	mov	r2, sl
 8000e30:	e74f      	b.n	8000cd2 <__aeabi_ddiv+0x7a>
 8000e32:	4649      	mov	r1, r9
 8000e34:	2301      	movs	r3, #1
 8000e36:	4319      	orrs	r1, r3
 8000e38:	4689      	mov	r9, r1
 8000e3a:	2400      	movs	r4, #0
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	e748      	b.n	8000cd2 <__aeabi_ddiv+0x7a>
 8000e40:	230c      	movs	r3, #12
 8000e42:	4699      	mov	r9, r3
 8000e44:	3b09      	subs	r3, #9
 8000e46:	46a0      	mov	r8, r4
 8000e48:	4683      	mov	fp, r0
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	e728      	b.n	8000ca0 <__aeabi_ddiv+0x48>
 8000e4e:	2304      	movs	r3, #4
 8000e50:	4699      	mov	r9, r3
 8000e52:	2300      	movs	r3, #0
 8000e54:	469b      	mov	fp, r3
 8000e56:	3301      	adds	r3, #1
 8000e58:	2500      	movs	r5, #0
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	e720      	b.n	8000ca0 <__aeabi_ddiv+0x48>
 8000e5e:	2300      	movs	r3, #0
 8000e60:	2480      	movs	r4, #128	; 0x80
 8000e62:	469a      	mov	sl, r3
 8000e64:	2500      	movs	r5, #0
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <__aeabi_ddiv+0x244>)
 8000e68:	0324      	lsls	r4, r4, #12
 8000e6a:	e74f      	b.n	8000d0c <__aeabi_ddiv+0xb4>
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	4641      	mov	r1, r8
 8000e70:	031b      	lsls	r3, r3, #12
 8000e72:	4219      	tst	r1, r3
 8000e74:	d008      	beq.n	8000e88 <__aeabi_ddiv+0x230>
 8000e76:	421c      	tst	r4, r3
 8000e78:	d106      	bne.n	8000e88 <__aeabi_ddiv+0x230>
 8000e7a:	431c      	orrs	r4, r3
 8000e7c:	0324      	lsls	r4, r4, #12
 8000e7e:	46ba      	mov	sl, r7
 8000e80:	0015      	movs	r5, r2
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <__aeabi_ddiv+0x244>)
 8000e84:	0b24      	lsrs	r4, r4, #12
 8000e86:	e741      	b.n	8000d0c <__aeabi_ddiv+0xb4>
 8000e88:	2480      	movs	r4, #128	; 0x80
 8000e8a:	4643      	mov	r3, r8
 8000e8c:	0324      	lsls	r4, r4, #12
 8000e8e:	431c      	orrs	r4, r3
 8000e90:	0324      	lsls	r4, r4, #12
 8000e92:	46b2      	mov	sl, r6
 8000e94:	4b01      	ldr	r3, [pc, #4]	; (8000e9c <__aeabi_ddiv+0x244>)
 8000e96:	0b24      	lsrs	r4, r4, #12
 8000e98:	e738      	b.n	8000d0c <__aeabi_ddiv+0xb4>
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	000007ff 	.word	0x000007ff
 8000ea0:	fffffc01 	.word	0xfffffc01
 8000ea4:	08009bf8 	.word	0x08009bf8
 8000ea8:	fffff801 	.word	0xfffff801
 8000eac:	fffffc0d 	.word	0xfffffc0d
 8000eb0:	000003f3 	.word	0x000003f3
 8000eb4:	000003ff 	.word	0x000003ff
 8000eb8:	feffffff 	.word	0xfeffffff
 8000ebc:	000007fe 	.word	0x000007fe
 8000ec0:	4544      	cmp	r4, r8
 8000ec2:	d200      	bcs.n	8000ec6 <__aeabi_ddiv+0x26e>
 8000ec4:	e116      	b.n	80010f4 <__aeabi_ddiv+0x49c>
 8000ec6:	d100      	bne.n	8000eca <__aeabi_ddiv+0x272>
 8000ec8:	e111      	b.n	80010ee <__aeabi_ddiv+0x496>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	425b      	negs	r3, r3
 8000ece:	469c      	mov	ip, r3
 8000ed0:	002e      	movs	r6, r5
 8000ed2:	4640      	mov	r0, r8
 8000ed4:	2500      	movs	r5, #0
 8000ed6:	44e3      	add	fp, ip
 8000ed8:	0223      	lsls	r3, r4, #8
 8000eda:	0e14      	lsrs	r4, r2, #24
 8000edc:	431c      	orrs	r4, r3
 8000ede:	0c1b      	lsrs	r3, r3, #16
 8000ee0:	4699      	mov	r9, r3
 8000ee2:	0423      	lsls	r3, r4, #16
 8000ee4:	0c1f      	lsrs	r7, r3, #16
 8000ee6:	0212      	lsls	r2, r2, #8
 8000ee8:	4649      	mov	r1, r9
 8000eea:	9200      	str	r2, [sp, #0]
 8000eec:	9701      	str	r7, [sp, #4]
 8000eee:	f7ff f9ab 	bl	8000248 <__aeabi_uidivmod>
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	437a      	muls	r2, r7
 8000ef6:	040b      	lsls	r3, r1, #16
 8000ef8:	0c31      	lsrs	r1, r6, #16
 8000efa:	4680      	mov	r8, r0
 8000efc:	4319      	orrs	r1, r3
 8000efe:	428a      	cmp	r2, r1
 8000f00:	d90b      	bls.n	8000f1a <__aeabi_ddiv+0x2c2>
 8000f02:	2301      	movs	r3, #1
 8000f04:	425b      	negs	r3, r3
 8000f06:	469c      	mov	ip, r3
 8000f08:	1909      	adds	r1, r1, r4
 8000f0a:	44e0      	add	r8, ip
 8000f0c:	428c      	cmp	r4, r1
 8000f0e:	d804      	bhi.n	8000f1a <__aeabi_ddiv+0x2c2>
 8000f10:	428a      	cmp	r2, r1
 8000f12:	d902      	bls.n	8000f1a <__aeabi_ddiv+0x2c2>
 8000f14:	1e83      	subs	r3, r0, #2
 8000f16:	4698      	mov	r8, r3
 8000f18:	1909      	adds	r1, r1, r4
 8000f1a:	1a88      	subs	r0, r1, r2
 8000f1c:	4649      	mov	r1, r9
 8000f1e:	f7ff f993 	bl	8000248 <__aeabi_uidivmod>
 8000f22:	0409      	lsls	r1, r1, #16
 8000f24:	468c      	mov	ip, r1
 8000f26:	0431      	lsls	r1, r6, #16
 8000f28:	4666      	mov	r6, ip
 8000f2a:	9a01      	ldr	r2, [sp, #4]
 8000f2c:	0c09      	lsrs	r1, r1, #16
 8000f2e:	4342      	muls	r2, r0
 8000f30:	0003      	movs	r3, r0
 8000f32:	4331      	orrs	r1, r6
 8000f34:	428a      	cmp	r2, r1
 8000f36:	d904      	bls.n	8000f42 <__aeabi_ddiv+0x2ea>
 8000f38:	1909      	adds	r1, r1, r4
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	428c      	cmp	r4, r1
 8000f3e:	d800      	bhi.n	8000f42 <__aeabi_ddiv+0x2ea>
 8000f40:	e111      	b.n	8001166 <__aeabi_ddiv+0x50e>
 8000f42:	1a89      	subs	r1, r1, r2
 8000f44:	4642      	mov	r2, r8
 8000f46:	9e00      	ldr	r6, [sp, #0]
 8000f48:	0412      	lsls	r2, r2, #16
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	0c33      	lsrs	r3, r6, #16
 8000f4e:	001f      	movs	r7, r3
 8000f50:	0c10      	lsrs	r0, r2, #16
 8000f52:	4690      	mov	r8, r2
 8000f54:	9302      	str	r3, [sp, #8]
 8000f56:	0413      	lsls	r3, r2, #16
 8000f58:	0432      	lsls	r2, r6, #16
 8000f5a:	0c16      	lsrs	r6, r2, #16
 8000f5c:	0032      	movs	r2, r6
 8000f5e:	0c1b      	lsrs	r3, r3, #16
 8000f60:	435a      	muls	r2, r3
 8000f62:	9603      	str	r6, [sp, #12]
 8000f64:	437b      	muls	r3, r7
 8000f66:	4346      	muls	r6, r0
 8000f68:	4378      	muls	r0, r7
 8000f6a:	0c17      	lsrs	r7, r2, #16
 8000f6c:	46bc      	mov	ip, r7
 8000f6e:	199b      	adds	r3, r3, r6
 8000f70:	4463      	add	r3, ip
 8000f72:	429e      	cmp	r6, r3
 8000f74:	d903      	bls.n	8000f7e <__aeabi_ddiv+0x326>
 8000f76:	2680      	movs	r6, #128	; 0x80
 8000f78:	0276      	lsls	r6, r6, #9
 8000f7a:	46b4      	mov	ip, r6
 8000f7c:	4460      	add	r0, ip
 8000f7e:	0c1e      	lsrs	r6, r3, #16
 8000f80:	1830      	adds	r0, r6, r0
 8000f82:	0416      	lsls	r6, r2, #16
 8000f84:	041b      	lsls	r3, r3, #16
 8000f86:	0c36      	lsrs	r6, r6, #16
 8000f88:	199e      	adds	r6, r3, r6
 8000f8a:	4281      	cmp	r1, r0
 8000f8c:	d200      	bcs.n	8000f90 <__aeabi_ddiv+0x338>
 8000f8e:	e09c      	b.n	80010ca <__aeabi_ddiv+0x472>
 8000f90:	d100      	bne.n	8000f94 <__aeabi_ddiv+0x33c>
 8000f92:	e097      	b.n	80010c4 <__aeabi_ddiv+0x46c>
 8000f94:	1bae      	subs	r6, r5, r6
 8000f96:	1a09      	subs	r1, r1, r0
 8000f98:	42b5      	cmp	r5, r6
 8000f9a:	4180      	sbcs	r0, r0
 8000f9c:	4240      	negs	r0, r0
 8000f9e:	1a08      	subs	r0, r1, r0
 8000fa0:	4284      	cmp	r4, r0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_ddiv+0x34e>
 8000fa4:	e111      	b.n	80011ca <__aeabi_ddiv+0x572>
 8000fa6:	4649      	mov	r1, r9
 8000fa8:	f7ff f94e 	bl	8000248 <__aeabi_uidivmod>
 8000fac:	9a01      	ldr	r2, [sp, #4]
 8000fae:	040b      	lsls	r3, r1, #16
 8000fb0:	4342      	muls	r2, r0
 8000fb2:	0c31      	lsrs	r1, r6, #16
 8000fb4:	0005      	movs	r5, r0
 8000fb6:	4319      	orrs	r1, r3
 8000fb8:	428a      	cmp	r2, r1
 8000fba:	d907      	bls.n	8000fcc <__aeabi_ddiv+0x374>
 8000fbc:	1909      	adds	r1, r1, r4
 8000fbe:	3d01      	subs	r5, #1
 8000fc0:	428c      	cmp	r4, r1
 8000fc2:	d803      	bhi.n	8000fcc <__aeabi_ddiv+0x374>
 8000fc4:	428a      	cmp	r2, r1
 8000fc6:	d901      	bls.n	8000fcc <__aeabi_ddiv+0x374>
 8000fc8:	1e85      	subs	r5, r0, #2
 8000fca:	1909      	adds	r1, r1, r4
 8000fcc:	1a88      	subs	r0, r1, r2
 8000fce:	4649      	mov	r1, r9
 8000fd0:	f7ff f93a 	bl	8000248 <__aeabi_uidivmod>
 8000fd4:	0409      	lsls	r1, r1, #16
 8000fd6:	468c      	mov	ip, r1
 8000fd8:	0431      	lsls	r1, r6, #16
 8000fda:	4666      	mov	r6, ip
 8000fdc:	9a01      	ldr	r2, [sp, #4]
 8000fde:	0c09      	lsrs	r1, r1, #16
 8000fe0:	4342      	muls	r2, r0
 8000fe2:	0003      	movs	r3, r0
 8000fe4:	4331      	orrs	r1, r6
 8000fe6:	428a      	cmp	r2, r1
 8000fe8:	d907      	bls.n	8000ffa <__aeabi_ddiv+0x3a2>
 8000fea:	1909      	adds	r1, r1, r4
 8000fec:	3b01      	subs	r3, #1
 8000fee:	428c      	cmp	r4, r1
 8000ff0:	d803      	bhi.n	8000ffa <__aeabi_ddiv+0x3a2>
 8000ff2:	428a      	cmp	r2, r1
 8000ff4:	d901      	bls.n	8000ffa <__aeabi_ddiv+0x3a2>
 8000ff6:	1e83      	subs	r3, r0, #2
 8000ff8:	1909      	adds	r1, r1, r4
 8000ffa:	9e03      	ldr	r6, [sp, #12]
 8000ffc:	1a89      	subs	r1, r1, r2
 8000ffe:	0032      	movs	r2, r6
 8001000:	042d      	lsls	r5, r5, #16
 8001002:	431d      	orrs	r5, r3
 8001004:	9f02      	ldr	r7, [sp, #8]
 8001006:	042b      	lsls	r3, r5, #16
 8001008:	0c1b      	lsrs	r3, r3, #16
 800100a:	435a      	muls	r2, r3
 800100c:	437b      	muls	r3, r7
 800100e:	469c      	mov	ip, r3
 8001010:	0c28      	lsrs	r0, r5, #16
 8001012:	4346      	muls	r6, r0
 8001014:	0c13      	lsrs	r3, r2, #16
 8001016:	44b4      	add	ip, r6
 8001018:	4463      	add	r3, ip
 800101a:	4378      	muls	r0, r7
 800101c:	429e      	cmp	r6, r3
 800101e:	d903      	bls.n	8001028 <__aeabi_ddiv+0x3d0>
 8001020:	2680      	movs	r6, #128	; 0x80
 8001022:	0276      	lsls	r6, r6, #9
 8001024:	46b4      	mov	ip, r6
 8001026:	4460      	add	r0, ip
 8001028:	0c1e      	lsrs	r6, r3, #16
 800102a:	0412      	lsls	r2, r2, #16
 800102c:	041b      	lsls	r3, r3, #16
 800102e:	0c12      	lsrs	r2, r2, #16
 8001030:	1830      	adds	r0, r6, r0
 8001032:	189b      	adds	r3, r3, r2
 8001034:	4281      	cmp	r1, r0
 8001036:	d306      	bcc.n	8001046 <__aeabi_ddiv+0x3ee>
 8001038:	d002      	beq.n	8001040 <__aeabi_ddiv+0x3e8>
 800103a:	2301      	movs	r3, #1
 800103c:	431d      	orrs	r5, r3
 800103e:	e6ce      	b.n	8000dde <__aeabi_ddiv+0x186>
 8001040:	2b00      	cmp	r3, #0
 8001042:	d100      	bne.n	8001046 <__aeabi_ddiv+0x3ee>
 8001044:	e6cb      	b.n	8000dde <__aeabi_ddiv+0x186>
 8001046:	1861      	adds	r1, r4, r1
 8001048:	1e6e      	subs	r6, r5, #1
 800104a:	42a1      	cmp	r1, r4
 800104c:	d200      	bcs.n	8001050 <__aeabi_ddiv+0x3f8>
 800104e:	e0a4      	b.n	800119a <__aeabi_ddiv+0x542>
 8001050:	4281      	cmp	r1, r0
 8001052:	d200      	bcs.n	8001056 <__aeabi_ddiv+0x3fe>
 8001054:	e0c9      	b.n	80011ea <__aeabi_ddiv+0x592>
 8001056:	d100      	bne.n	800105a <__aeabi_ddiv+0x402>
 8001058:	e0d9      	b.n	800120e <__aeabi_ddiv+0x5b6>
 800105a:	0035      	movs	r5, r6
 800105c:	e7ed      	b.n	800103a <__aeabi_ddiv+0x3e2>
 800105e:	2501      	movs	r5, #1
 8001060:	426d      	negs	r5, r5
 8001062:	2101      	movs	r1, #1
 8001064:	1a89      	subs	r1, r1, r2
 8001066:	2938      	cmp	r1, #56	; 0x38
 8001068:	dd00      	ble.n	800106c <__aeabi_ddiv+0x414>
 800106a:	e64c      	b.n	8000d06 <__aeabi_ddiv+0xae>
 800106c:	291f      	cmp	r1, #31
 800106e:	dc00      	bgt.n	8001072 <__aeabi_ddiv+0x41a>
 8001070:	e07f      	b.n	8001172 <__aeabi_ddiv+0x51a>
 8001072:	231f      	movs	r3, #31
 8001074:	425b      	negs	r3, r3
 8001076:	1a9a      	subs	r2, r3, r2
 8001078:	4643      	mov	r3, r8
 800107a:	40d3      	lsrs	r3, r2
 800107c:	2920      	cmp	r1, #32
 800107e:	d004      	beq.n	800108a <__aeabi_ddiv+0x432>
 8001080:	4644      	mov	r4, r8
 8001082:	4a65      	ldr	r2, [pc, #404]	; (8001218 <__aeabi_ddiv+0x5c0>)
 8001084:	445a      	add	r2, fp
 8001086:	4094      	lsls	r4, r2
 8001088:	4325      	orrs	r5, r4
 800108a:	1e6a      	subs	r2, r5, #1
 800108c:	4195      	sbcs	r5, r2
 800108e:	2207      	movs	r2, #7
 8001090:	432b      	orrs	r3, r5
 8001092:	0015      	movs	r5, r2
 8001094:	2400      	movs	r4, #0
 8001096:	401d      	ands	r5, r3
 8001098:	421a      	tst	r2, r3
 800109a:	d100      	bne.n	800109e <__aeabi_ddiv+0x446>
 800109c:	e0a1      	b.n	80011e2 <__aeabi_ddiv+0x58a>
 800109e:	220f      	movs	r2, #15
 80010a0:	2400      	movs	r4, #0
 80010a2:	401a      	ands	r2, r3
 80010a4:	2a04      	cmp	r2, #4
 80010a6:	d100      	bne.n	80010aa <__aeabi_ddiv+0x452>
 80010a8:	e098      	b.n	80011dc <__aeabi_ddiv+0x584>
 80010aa:	1d1a      	adds	r2, r3, #4
 80010ac:	429a      	cmp	r2, r3
 80010ae:	419b      	sbcs	r3, r3
 80010b0:	425b      	negs	r3, r3
 80010b2:	18e4      	adds	r4, r4, r3
 80010b4:	0013      	movs	r3, r2
 80010b6:	0222      	lsls	r2, r4, #8
 80010b8:	d400      	bmi.n	80010bc <__aeabi_ddiv+0x464>
 80010ba:	e08f      	b.n	80011dc <__aeabi_ddiv+0x584>
 80010bc:	2301      	movs	r3, #1
 80010be:	2400      	movs	r4, #0
 80010c0:	2500      	movs	r5, #0
 80010c2:	e623      	b.n	8000d0c <__aeabi_ddiv+0xb4>
 80010c4:	42b5      	cmp	r5, r6
 80010c6:	d300      	bcc.n	80010ca <__aeabi_ddiv+0x472>
 80010c8:	e764      	b.n	8000f94 <__aeabi_ddiv+0x33c>
 80010ca:	4643      	mov	r3, r8
 80010cc:	1e5a      	subs	r2, r3, #1
 80010ce:	9b00      	ldr	r3, [sp, #0]
 80010d0:	469c      	mov	ip, r3
 80010d2:	4465      	add	r5, ip
 80010d4:	001f      	movs	r7, r3
 80010d6:	429d      	cmp	r5, r3
 80010d8:	419b      	sbcs	r3, r3
 80010da:	425b      	negs	r3, r3
 80010dc:	191b      	adds	r3, r3, r4
 80010de:	18c9      	adds	r1, r1, r3
 80010e0:	428c      	cmp	r4, r1
 80010e2:	d23a      	bcs.n	800115a <__aeabi_ddiv+0x502>
 80010e4:	4288      	cmp	r0, r1
 80010e6:	d863      	bhi.n	80011b0 <__aeabi_ddiv+0x558>
 80010e8:	d060      	beq.n	80011ac <__aeabi_ddiv+0x554>
 80010ea:	4690      	mov	r8, r2
 80010ec:	e752      	b.n	8000f94 <__aeabi_ddiv+0x33c>
 80010ee:	42aa      	cmp	r2, r5
 80010f0:	d900      	bls.n	80010f4 <__aeabi_ddiv+0x49c>
 80010f2:	e6ea      	b.n	8000eca <__aeabi_ddiv+0x272>
 80010f4:	4643      	mov	r3, r8
 80010f6:	07de      	lsls	r6, r3, #31
 80010f8:	0858      	lsrs	r0, r3, #1
 80010fa:	086b      	lsrs	r3, r5, #1
 80010fc:	431e      	orrs	r6, r3
 80010fe:	07ed      	lsls	r5, r5, #31
 8001100:	e6ea      	b.n	8000ed8 <__aeabi_ddiv+0x280>
 8001102:	4648      	mov	r0, r9
 8001104:	f001 f8de 	bl	80022c4 <__clzsi2>
 8001108:	0001      	movs	r1, r0
 800110a:	0002      	movs	r2, r0
 800110c:	3115      	adds	r1, #21
 800110e:	3220      	adds	r2, #32
 8001110:	291c      	cmp	r1, #28
 8001112:	dc00      	bgt.n	8001116 <__aeabi_ddiv+0x4be>
 8001114:	e61a      	b.n	8000d4c <__aeabi_ddiv+0xf4>
 8001116:	464b      	mov	r3, r9
 8001118:	3808      	subs	r0, #8
 800111a:	4083      	lsls	r3, r0
 800111c:	2500      	movs	r5, #0
 800111e:	4698      	mov	r8, r3
 8001120:	e620      	b.n	8000d64 <__aeabi_ddiv+0x10c>
 8001122:	f001 f8cf 	bl	80022c4 <__clzsi2>
 8001126:	0003      	movs	r3, r0
 8001128:	001a      	movs	r2, r3
 800112a:	3215      	adds	r2, #21
 800112c:	3020      	adds	r0, #32
 800112e:	2a1c      	cmp	r2, #28
 8001130:	dc00      	bgt.n	8001134 <__aeabi_ddiv+0x4dc>
 8001132:	e630      	b.n	8000d96 <__aeabi_ddiv+0x13e>
 8001134:	4654      	mov	r4, sl
 8001136:	3b08      	subs	r3, #8
 8001138:	2200      	movs	r2, #0
 800113a:	409c      	lsls	r4, r3
 800113c:	e635      	b.n	8000daa <__aeabi_ddiv+0x152>
 800113e:	230f      	movs	r3, #15
 8001140:	402b      	ands	r3, r5
 8001142:	2b04      	cmp	r3, #4
 8001144:	d100      	bne.n	8001148 <__aeabi_ddiv+0x4f0>
 8001146:	e652      	b.n	8000dee <__aeabi_ddiv+0x196>
 8001148:	2305      	movs	r3, #5
 800114a:	425b      	negs	r3, r3
 800114c:	42ab      	cmp	r3, r5
 800114e:	419b      	sbcs	r3, r3
 8001150:	3504      	adds	r5, #4
 8001152:	425b      	negs	r3, r3
 8001154:	08ed      	lsrs	r5, r5, #3
 8001156:	4498      	add	r8, r3
 8001158:	e64a      	b.n	8000df0 <__aeabi_ddiv+0x198>
 800115a:	428c      	cmp	r4, r1
 800115c:	d1c5      	bne.n	80010ea <__aeabi_ddiv+0x492>
 800115e:	42af      	cmp	r7, r5
 8001160:	d9c0      	bls.n	80010e4 <__aeabi_ddiv+0x48c>
 8001162:	4690      	mov	r8, r2
 8001164:	e716      	b.n	8000f94 <__aeabi_ddiv+0x33c>
 8001166:	428a      	cmp	r2, r1
 8001168:	d800      	bhi.n	800116c <__aeabi_ddiv+0x514>
 800116a:	e6ea      	b.n	8000f42 <__aeabi_ddiv+0x2ea>
 800116c:	1e83      	subs	r3, r0, #2
 800116e:	1909      	adds	r1, r1, r4
 8001170:	e6e7      	b.n	8000f42 <__aeabi_ddiv+0x2ea>
 8001172:	4a2a      	ldr	r2, [pc, #168]	; (800121c <__aeabi_ddiv+0x5c4>)
 8001174:	0028      	movs	r0, r5
 8001176:	445a      	add	r2, fp
 8001178:	4643      	mov	r3, r8
 800117a:	4095      	lsls	r5, r2
 800117c:	4093      	lsls	r3, r2
 800117e:	40c8      	lsrs	r0, r1
 8001180:	1e6a      	subs	r2, r5, #1
 8001182:	4195      	sbcs	r5, r2
 8001184:	4644      	mov	r4, r8
 8001186:	4303      	orrs	r3, r0
 8001188:	432b      	orrs	r3, r5
 800118a:	40cc      	lsrs	r4, r1
 800118c:	075a      	lsls	r2, r3, #29
 800118e:	d092      	beq.n	80010b6 <__aeabi_ddiv+0x45e>
 8001190:	220f      	movs	r2, #15
 8001192:	401a      	ands	r2, r3
 8001194:	2a04      	cmp	r2, #4
 8001196:	d188      	bne.n	80010aa <__aeabi_ddiv+0x452>
 8001198:	e78d      	b.n	80010b6 <__aeabi_ddiv+0x45e>
 800119a:	0035      	movs	r5, r6
 800119c:	4281      	cmp	r1, r0
 800119e:	d000      	beq.n	80011a2 <__aeabi_ddiv+0x54a>
 80011a0:	e74b      	b.n	800103a <__aeabi_ddiv+0x3e2>
 80011a2:	9a00      	ldr	r2, [sp, #0]
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d000      	beq.n	80011aa <__aeabi_ddiv+0x552>
 80011a8:	e747      	b.n	800103a <__aeabi_ddiv+0x3e2>
 80011aa:	e618      	b.n	8000dde <__aeabi_ddiv+0x186>
 80011ac:	42ae      	cmp	r6, r5
 80011ae:	d99c      	bls.n	80010ea <__aeabi_ddiv+0x492>
 80011b0:	2302      	movs	r3, #2
 80011b2:	425b      	negs	r3, r3
 80011b4:	469c      	mov	ip, r3
 80011b6:	9b00      	ldr	r3, [sp, #0]
 80011b8:	44e0      	add	r8, ip
 80011ba:	469c      	mov	ip, r3
 80011bc:	4465      	add	r5, ip
 80011be:	429d      	cmp	r5, r3
 80011c0:	419b      	sbcs	r3, r3
 80011c2:	425b      	negs	r3, r3
 80011c4:	191b      	adds	r3, r3, r4
 80011c6:	18c9      	adds	r1, r1, r3
 80011c8:	e6e4      	b.n	8000f94 <__aeabi_ddiv+0x33c>
 80011ca:	4a15      	ldr	r2, [pc, #84]	; (8001220 <__aeabi_ddiv+0x5c8>)
 80011cc:	445a      	add	r2, fp
 80011ce:	2a00      	cmp	r2, #0
 80011d0:	dc00      	bgt.n	80011d4 <__aeabi_ddiv+0x57c>
 80011d2:	e744      	b.n	800105e <__aeabi_ddiv+0x406>
 80011d4:	2301      	movs	r3, #1
 80011d6:	2500      	movs	r5, #0
 80011d8:	4498      	add	r8, r3
 80011da:	e609      	b.n	8000df0 <__aeabi_ddiv+0x198>
 80011dc:	0765      	lsls	r5, r4, #29
 80011de:	0264      	lsls	r4, r4, #9
 80011e0:	0b24      	lsrs	r4, r4, #12
 80011e2:	08db      	lsrs	r3, r3, #3
 80011e4:	431d      	orrs	r5, r3
 80011e6:	2300      	movs	r3, #0
 80011e8:	e590      	b.n	8000d0c <__aeabi_ddiv+0xb4>
 80011ea:	9e00      	ldr	r6, [sp, #0]
 80011ec:	3d02      	subs	r5, #2
 80011ee:	0072      	lsls	r2, r6, #1
 80011f0:	42b2      	cmp	r2, r6
 80011f2:	41bf      	sbcs	r7, r7
 80011f4:	427f      	negs	r7, r7
 80011f6:	193c      	adds	r4, r7, r4
 80011f8:	1909      	adds	r1, r1, r4
 80011fa:	9200      	str	r2, [sp, #0]
 80011fc:	e7ce      	b.n	800119c <__aeabi_ddiv+0x544>
 80011fe:	2480      	movs	r4, #128	; 0x80
 8001200:	4643      	mov	r3, r8
 8001202:	0324      	lsls	r4, r4, #12
 8001204:	431c      	orrs	r4, r3
 8001206:	0324      	lsls	r4, r4, #12
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <__aeabi_ddiv+0x5cc>)
 800120a:	0b24      	lsrs	r4, r4, #12
 800120c:	e57e      	b.n	8000d0c <__aeabi_ddiv+0xb4>
 800120e:	9a00      	ldr	r2, [sp, #0]
 8001210:	429a      	cmp	r2, r3
 8001212:	d3ea      	bcc.n	80011ea <__aeabi_ddiv+0x592>
 8001214:	0035      	movs	r5, r6
 8001216:	e7c4      	b.n	80011a2 <__aeabi_ddiv+0x54a>
 8001218:	0000043e 	.word	0x0000043e
 800121c:	0000041e 	.word	0x0000041e
 8001220:	000003ff 	.word	0x000003ff
 8001224:	000007ff 	.word	0x000007ff

08001228 <__eqdf2>:
 8001228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122a:	464f      	mov	r7, r9
 800122c:	4646      	mov	r6, r8
 800122e:	46d6      	mov	lr, sl
 8001230:	4694      	mov	ip, r2
 8001232:	4691      	mov	r9, r2
 8001234:	031a      	lsls	r2, r3, #12
 8001236:	0b12      	lsrs	r2, r2, #12
 8001238:	4d18      	ldr	r5, [pc, #96]	; (800129c <__eqdf2+0x74>)
 800123a:	b5c0      	push	{r6, r7, lr}
 800123c:	004c      	lsls	r4, r1, #1
 800123e:	030f      	lsls	r7, r1, #12
 8001240:	4692      	mov	sl, r2
 8001242:	005a      	lsls	r2, r3, #1
 8001244:	0006      	movs	r6, r0
 8001246:	4680      	mov	r8, r0
 8001248:	0b3f      	lsrs	r7, r7, #12
 800124a:	2001      	movs	r0, #1
 800124c:	0d64      	lsrs	r4, r4, #21
 800124e:	0fc9      	lsrs	r1, r1, #31
 8001250:	0d52      	lsrs	r2, r2, #21
 8001252:	0fdb      	lsrs	r3, r3, #31
 8001254:	42ac      	cmp	r4, r5
 8001256:	d00a      	beq.n	800126e <__eqdf2+0x46>
 8001258:	42aa      	cmp	r2, r5
 800125a:	d003      	beq.n	8001264 <__eqdf2+0x3c>
 800125c:	4294      	cmp	r4, r2
 800125e:	d101      	bne.n	8001264 <__eqdf2+0x3c>
 8001260:	4557      	cmp	r7, sl
 8001262:	d00d      	beq.n	8001280 <__eqdf2+0x58>
 8001264:	bce0      	pop	{r5, r6, r7}
 8001266:	46ba      	mov	sl, r7
 8001268:	46b1      	mov	r9, r6
 800126a:	46a8      	mov	r8, r5
 800126c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800126e:	003d      	movs	r5, r7
 8001270:	4335      	orrs	r5, r6
 8001272:	d1f7      	bne.n	8001264 <__eqdf2+0x3c>
 8001274:	42a2      	cmp	r2, r4
 8001276:	d1f5      	bne.n	8001264 <__eqdf2+0x3c>
 8001278:	4652      	mov	r2, sl
 800127a:	4665      	mov	r5, ip
 800127c:	432a      	orrs	r2, r5
 800127e:	d1f1      	bne.n	8001264 <__eqdf2+0x3c>
 8001280:	2001      	movs	r0, #1
 8001282:	45c8      	cmp	r8, r9
 8001284:	d1ee      	bne.n	8001264 <__eqdf2+0x3c>
 8001286:	4299      	cmp	r1, r3
 8001288:	d006      	beq.n	8001298 <__eqdf2+0x70>
 800128a:	2c00      	cmp	r4, #0
 800128c:	d1ea      	bne.n	8001264 <__eqdf2+0x3c>
 800128e:	433e      	orrs	r6, r7
 8001290:	0030      	movs	r0, r6
 8001292:	1e46      	subs	r6, r0, #1
 8001294:	41b0      	sbcs	r0, r6
 8001296:	e7e5      	b.n	8001264 <__eqdf2+0x3c>
 8001298:	2000      	movs	r0, #0
 800129a:	e7e3      	b.n	8001264 <__eqdf2+0x3c>
 800129c:	000007ff 	.word	0x000007ff

080012a0 <__gedf2>:
 80012a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a2:	464e      	mov	r6, r9
 80012a4:	4645      	mov	r5, r8
 80012a6:	4657      	mov	r7, sl
 80012a8:	46de      	mov	lr, fp
 80012aa:	0004      	movs	r4, r0
 80012ac:	0018      	movs	r0, r3
 80012ae:	b5e0      	push	{r5, r6, r7, lr}
 80012b0:	0016      	movs	r6, r2
 80012b2:	031b      	lsls	r3, r3, #12
 80012b4:	0b1b      	lsrs	r3, r3, #12
 80012b6:	4d32      	ldr	r5, [pc, #200]	; (8001380 <__gedf2+0xe0>)
 80012b8:	030f      	lsls	r7, r1, #12
 80012ba:	004a      	lsls	r2, r1, #1
 80012bc:	4699      	mov	r9, r3
 80012be:	0043      	lsls	r3, r0, #1
 80012c0:	46a4      	mov	ip, r4
 80012c2:	46b0      	mov	r8, r6
 80012c4:	0b3f      	lsrs	r7, r7, #12
 80012c6:	0d52      	lsrs	r2, r2, #21
 80012c8:	0fc9      	lsrs	r1, r1, #31
 80012ca:	0d5b      	lsrs	r3, r3, #21
 80012cc:	0fc0      	lsrs	r0, r0, #31
 80012ce:	42aa      	cmp	r2, r5
 80012d0:	d029      	beq.n	8001326 <__gedf2+0x86>
 80012d2:	42ab      	cmp	r3, r5
 80012d4:	d018      	beq.n	8001308 <__gedf2+0x68>
 80012d6:	2a00      	cmp	r2, #0
 80012d8:	d12a      	bne.n	8001330 <__gedf2+0x90>
 80012da:	433c      	orrs	r4, r7
 80012dc:	46a3      	mov	fp, r4
 80012de:	4265      	negs	r5, r4
 80012e0:	4165      	adcs	r5, r4
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d102      	bne.n	80012ec <__gedf2+0x4c>
 80012e6:	464c      	mov	r4, r9
 80012e8:	4326      	orrs	r6, r4
 80012ea:	d027      	beq.n	800133c <__gedf2+0x9c>
 80012ec:	2d00      	cmp	r5, #0
 80012ee:	d115      	bne.n	800131c <__gedf2+0x7c>
 80012f0:	4281      	cmp	r1, r0
 80012f2:	d028      	beq.n	8001346 <__gedf2+0xa6>
 80012f4:	2002      	movs	r0, #2
 80012f6:	3901      	subs	r1, #1
 80012f8:	4008      	ands	r0, r1
 80012fa:	3801      	subs	r0, #1
 80012fc:	bcf0      	pop	{r4, r5, r6, r7}
 80012fe:	46bb      	mov	fp, r7
 8001300:	46b2      	mov	sl, r6
 8001302:	46a9      	mov	r9, r5
 8001304:	46a0      	mov	r8, r4
 8001306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001308:	464d      	mov	r5, r9
 800130a:	432e      	orrs	r6, r5
 800130c:	d12f      	bne.n	800136e <__gedf2+0xce>
 800130e:	2a00      	cmp	r2, #0
 8001310:	d1ee      	bne.n	80012f0 <__gedf2+0x50>
 8001312:	433c      	orrs	r4, r7
 8001314:	4265      	negs	r5, r4
 8001316:	4165      	adcs	r5, r4
 8001318:	2d00      	cmp	r5, #0
 800131a:	d0e9      	beq.n	80012f0 <__gedf2+0x50>
 800131c:	2800      	cmp	r0, #0
 800131e:	d1ed      	bne.n	80012fc <__gedf2+0x5c>
 8001320:	2001      	movs	r0, #1
 8001322:	4240      	negs	r0, r0
 8001324:	e7ea      	b.n	80012fc <__gedf2+0x5c>
 8001326:	003d      	movs	r5, r7
 8001328:	4325      	orrs	r5, r4
 800132a:	d120      	bne.n	800136e <__gedf2+0xce>
 800132c:	4293      	cmp	r3, r2
 800132e:	d0eb      	beq.n	8001308 <__gedf2+0x68>
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1dd      	bne.n	80012f0 <__gedf2+0x50>
 8001334:	464c      	mov	r4, r9
 8001336:	4326      	orrs	r6, r4
 8001338:	d1da      	bne.n	80012f0 <__gedf2+0x50>
 800133a:	e7db      	b.n	80012f4 <__gedf2+0x54>
 800133c:	465b      	mov	r3, fp
 800133e:	2000      	movs	r0, #0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0db      	beq.n	80012fc <__gedf2+0x5c>
 8001344:	e7d6      	b.n	80012f4 <__gedf2+0x54>
 8001346:	429a      	cmp	r2, r3
 8001348:	dc0a      	bgt.n	8001360 <__gedf2+0xc0>
 800134a:	dbe7      	blt.n	800131c <__gedf2+0x7c>
 800134c:	454f      	cmp	r7, r9
 800134e:	d8d1      	bhi.n	80012f4 <__gedf2+0x54>
 8001350:	d010      	beq.n	8001374 <__gedf2+0xd4>
 8001352:	2000      	movs	r0, #0
 8001354:	454f      	cmp	r7, r9
 8001356:	d2d1      	bcs.n	80012fc <__gedf2+0x5c>
 8001358:	2900      	cmp	r1, #0
 800135a:	d0e1      	beq.n	8001320 <__gedf2+0x80>
 800135c:	0008      	movs	r0, r1
 800135e:	e7cd      	b.n	80012fc <__gedf2+0x5c>
 8001360:	4243      	negs	r3, r0
 8001362:	4158      	adcs	r0, r3
 8001364:	2302      	movs	r3, #2
 8001366:	4240      	negs	r0, r0
 8001368:	4018      	ands	r0, r3
 800136a:	3801      	subs	r0, #1
 800136c:	e7c6      	b.n	80012fc <__gedf2+0x5c>
 800136e:	2002      	movs	r0, #2
 8001370:	4240      	negs	r0, r0
 8001372:	e7c3      	b.n	80012fc <__gedf2+0x5c>
 8001374:	45c4      	cmp	ip, r8
 8001376:	d8bd      	bhi.n	80012f4 <__gedf2+0x54>
 8001378:	2000      	movs	r0, #0
 800137a:	45c4      	cmp	ip, r8
 800137c:	d2be      	bcs.n	80012fc <__gedf2+0x5c>
 800137e:	e7eb      	b.n	8001358 <__gedf2+0xb8>
 8001380:	000007ff 	.word	0x000007ff

08001384 <__ledf2>:
 8001384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001386:	464e      	mov	r6, r9
 8001388:	4645      	mov	r5, r8
 800138a:	4657      	mov	r7, sl
 800138c:	46de      	mov	lr, fp
 800138e:	0004      	movs	r4, r0
 8001390:	0018      	movs	r0, r3
 8001392:	b5e0      	push	{r5, r6, r7, lr}
 8001394:	0016      	movs	r6, r2
 8001396:	031b      	lsls	r3, r3, #12
 8001398:	0b1b      	lsrs	r3, r3, #12
 800139a:	4d31      	ldr	r5, [pc, #196]	; (8001460 <__ledf2+0xdc>)
 800139c:	030f      	lsls	r7, r1, #12
 800139e:	004a      	lsls	r2, r1, #1
 80013a0:	4699      	mov	r9, r3
 80013a2:	0043      	lsls	r3, r0, #1
 80013a4:	46a4      	mov	ip, r4
 80013a6:	46b0      	mov	r8, r6
 80013a8:	0b3f      	lsrs	r7, r7, #12
 80013aa:	0d52      	lsrs	r2, r2, #21
 80013ac:	0fc9      	lsrs	r1, r1, #31
 80013ae:	0d5b      	lsrs	r3, r3, #21
 80013b0:	0fc0      	lsrs	r0, r0, #31
 80013b2:	42aa      	cmp	r2, r5
 80013b4:	d011      	beq.n	80013da <__ledf2+0x56>
 80013b6:	42ab      	cmp	r3, r5
 80013b8:	d014      	beq.n	80013e4 <__ledf2+0x60>
 80013ba:	2a00      	cmp	r2, #0
 80013bc:	d12f      	bne.n	800141e <__ledf2+0x9a>
 80013be:	433c      	orrs	r4, r7
 80013c0:	46a3      	mov	fp, r4
 80013c2:	4265      	negs	r5, r4
 80013c4:	4165      	adcs	r5, r4
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d114      	bne.n	80013f4 <__ledf2+0x70>
 80013ca:	464c      	mov	r4, r9
 80013cc:	4326      	orrs	r6, r4
 80013ce:	d111      	bne.n	80013f4 <__ledf2+0x70>
 80013d0:	465b      	mov	r3, fp
 80013d2:	2000      	movs	r0, #0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d017      	beq.n	8001408 <__ledf2+0x84>
 80013d8:	e010      	b.n	80013fc <__ledf2+0x78>
 80013da:	003d      	movs	r5, r7
 80013dc:	4325      	orrs	r5, r4
 80013de:	d112      	bne.n	8001406 <__ledf2+0x82>
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d11c      	bne.n	800141e <__ledf2+0x9a>
 80013e4:	464d      	mov	r5, r9
 80013e6:	432e      	orrs	r6, r5
 80013e8:	d10d      	bne.n	8001406 <__ledf2+0x82>
 80013ea:	2a00      	cmp	r2, #0
 80013ec:	d104      	bne.n	80013f8 <__ledf2+0x74>
 80013ee:	433c      	orrs	r4, r7
 80013f0:	4265      	negs	r5, r4
 80013f2:	4165      	adcs	r5, r4
 80013f4:	2d00      	cmp	r5, #0
 80013f6:	d10d      	bne.n	8001414 <__ledf2+0x90>
 80013f8:	4281      	cmp	r1, r0
 80013fa:	d016      	beq.n	800142a <__ledf2+0xa6>
 80013fc:	2002      	movs	r0, #2
 80013fe:	3901      	subs	r1, #1
 8001400:	4008      	ands	r0, r1
 8001402:	3801      	subs	r0, #1
 8001404:	e000      	b.n	8001408 <__ledf2+0x84>
 8001406:	2002      	movs	r0, #2
 8001408:	bcf0      	pop	{r4, r5, r6, r7}
 800140a:	46bb      	mov	fp, r7
 800140c:	46b2      	mov	sl, r6
 800140e:	46a9      	mov	r9, r5
 8001410:	46a0      	mov	r8, r4
 8001412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001414:	2800      	cmp	r0, #0
 8001416:	d1f7      	bne.n	8001408 <__ledf2+0x84>
 8001418:	2001      	movs	r0, #1
 800141a:	4240      	negs	r0, r0
 800141c:	e7f4      	b.n	8001408 <__ledf2+0x84>
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1ea      	bne.n	80013f8 <__ledf2+0x74>
 8001422:	464c      	mov	r4, r9
 8001424:	4326      	orrs	r6, r4
 8001426:	d1e7      	bne.n	80013f8 <__ledf2+0x74>
 8001428:	e7e8      	b.n	80013fc <__ledf2+0x78>
 800142a:	429a      	cmp	r2, r3
 800142c:	dd06      	ble.n	800143c <__ledf2+0xb8>
 800142e:	4243      	negs	r3, r0
 8001430:	4158      	adcs	r0, r3
 8001432:	2302      	movs	r3, #2
 8001434:	4240      	negs	r0, r0
 8001436:	4018      	ands	r0, r3
 8001438:	3801      	subs	r0, #1
 800143a:	e7e5      	b.n	8001408 <__ledf2+0x84>
 800143c:	429a      	cmp	r2, r3
 800143e:	dbe9      	blt.n	8001414 <__ledf2+0x90>
 8001440:	454f      	cmp	r7, r9
 8001442:	d8db      	bhi.n	80013fc <__ledf2+0x78>
 8001444:	d006      	beq.n	8001454 <__ledf2+0xd0>
 8001446:	2000      	movs	r0, #0
 8001448:	454f      	cmp	r7, r9
 800144a:	d2dd      	bcs.n	8001408 <__ledf2+0x84>
 800144c:	2900      	cmp	r1, #0
 800144e:	d0e3      	beq.n	8001418 <__ledf2+0x94>
 8001450:	0008      	movs	r0, r1
 8001452:	e7d9      	b.n	8001408 <__ledf2+0x84>
 8001454:	45c4      	cmp	ip, r8
 8001456:	d8d1      	bhi.n	80013fc <__ledf2+0x78>
 8001458:	2000      	movs	r0, #0
 800145a:	45c4      	cmp	ip, r8
 800145c:	d2d4      	bcs.n	8001408 <__ledf2+0x84>
 800145e:	e7f5      	b.n	800144c <__ledf2+0xc8>
 8001460:	000007ff 	.word	0x000007ff

08001464 <__aeabi_dmul>:
 8001464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001466:	4657      	mov	r7, sl
 8001468:	464e      	mov	r6, r9
 800146a:	4645      	mov	r5, r8
 800146c:	46de      	mov	lr, fp
 800146e:	b5e0      	push	{r5, r6, r7, lr}
 8001470:	4698      	mov	r8, r3
 8001472:	030c      	lsls	r4, r1, #12
 8001474:	004b      	lsls	r3, r1, #1
 8001476:	0006      	movs	r6, r0
 8001478:	4692      	mov	sl, r2
 800147a:	b087      	sub	sp, #28
 800147c:	0b24      	lsrs	r4, r4, #12
 800147e:	0d5b      	lsrs	r3, r3, #21
 8001480:	0fcf      	lsrs	r7, r1, #31
 8001482:	2b00      	cmp	r3, #0
 8001484:	d06c      	beq.n	8001560 <__aeabi_dmul+0xfc>
 8001486:	4add      	ldr	r2, [pc, #884]	; (80017fc <__aeabi_dmul+0x398>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d100      	bne.n	800148e <__aeabi_dmul+0x2a>
 800148c:	e086      	b.n	800159c <__aeabi_dmul+0x138>
 800148e:	0f42      	lsrs	r2, r0, #29
 8001490:	00e4      	lsls	r4, r4, #3
 8001492:	4314      	orrs	r4, r2
 8001494:	2280      	movs	r2, #128	; 0x80
 8001496:	0412      	lsls	r2, r2, #16
 8001498:	4314      	orrs	r4, r2
 800149a:	4ad9      	ldr	r2, [pc, #868]	; (8001800 <__aeabi_dmul+0x39c>)
 800149c:	00c5      	lsls	r5, r0, #3
 800149e:	4694      	mov	ip, r2
 80014a0:	4463      	add	r3, ip
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2300      	movs	r3, #0
 80014a6:	4699      	mov	r9, r3
 80014a8:	469b      	mov	fp, r3
 80014aa:	4643      	mov	r3, r8
 80014ac:	4642      	mov	r2, r8
 80014ae:	031e      	lsls	r6, r3, #12
 80014b0:	0fd2      	lsrs	r2, r2, #31
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4650      	mov	r0, sl
 80014b6:	4690      	mov	r8, r2
 80014b8:	0b36      	lsrs	r6, r6, #12
 80014ba:	0d5b      	lsrs	r3, r3, #21
 80014bc:	d100      	bne.n	80014c0 <__aeabi_dmul+0x5c>
 80014be:	e078      	b.n	80015b2 <__aeabi_dmul+0x14e>
 80014c0:	4ace      	ldr	r2, [pc, #824]	; (80017fc <__aeabi_dmul+0x398>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d01d      	beq.n	8001502 <__aeabi_dmul+0x9e>
 80014c6:	49ce      	ldr	r1, [pc, #824]	; (8001800 <__aeabi_dmul+0x39c>)
 80014c8:	0f42      	lsrs	r2, r0, #29
 80014ca:	468c      	mov	ip, r1
 80014cc:	9900      	ldr	r1, [sp, #0]
 80014ce:	4463      	add	r3, ip
 80014d0:	00f6      	lsls	r6, r6, #3
 80014d2:	468c      	mov	ip, r1
 80014d4:	4316      	orrs	r6, r2
 80014d6:	2280      	movs	r2, #128	; 0x80
 80014d8:	449c      	add	ip, r3
 80014da:	0412      	lsls	r2, r2, #16
 80014dc:	4663      	mov	r3, ip
 80014de:	4316      	orrs	r6, r2
 80014e0:	00c2      	lsls	r2, r0, #3
 80014e2:	2000      	movs	r0, #0
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	9900      	ldr	r1, [sp, #0]
 80014e8:	4643      	mov	r3, r8
 80014ea:	3101      	adds	r1, #1
 80014ec:	468c      	mov	ip, r1
 80014ee:	4649      	mov	r1, r9
 80014f0:	407b      	eors	r3, r7
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	290f      	cmp	r1, #15
 80014f6:	d900      	bls.n	80014fa <__aeabi_dmul+0x96>
 80014f8:	e07e      	b.n	80015f8 <__aeabi_dmul+0x194>
 80014fa:	4bc2      	ldr	r3, [pc, #776]	; (8001804 <__aeabi_dmul+0x3a0>)
 80014fc:	0089      	lsls	r1, r1, #2
 80014fe:	5859      	ldr	r1, [r3, r1]
 8001500:	468f      	mov	pc, r1
 8001502:	4652      	mov	r2, sl
 8001504:	9b00      	ldr	r3, [sp, #0]
 8001506:	4332      	orrs	r2, r6
 8001508:	d000      	beq.n	800150c <__aeabi_dmul+0xa8>
 800150a:	e156      	b.n	80017ba <__aeabi_dmul+0x356>
 800150c:	49bb      	ldr	r1, [pc, #748]	; (80017fc <__aeabi_dmul+0x398>)
 800150e:	2600      	movs	r6, #0
 8001510:	468c      	mov	ip, r1
 8001512:	4463      	add	r3, ip
 8001514:	4649      	mov	r1, r9
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2302      	movs	r3, #2
 800151a:	4319      	orrs	r1, r3
 800151c:	4689      	mov	r9, r1
 800151e:	2002      	movs	r0, #2
 8001520:	e7e1      	b.n	80014e6 <__aeabi_dmul+0x82>
 8001522:	4643      	mov	r3, r8
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	0034      	movs	r4, r6
 8001528:	0015      	movs	r5, r2
 800152a:	4683      	mov	fp, r0
 800152c:	465b      	mov	r3, fp
 800152e:	2b02      	cmp	r3, #2
 8001530:	d05e      	beq.n	80015f0 <__aeabi_dmul+0x18c>
 8001532:	2b03      	cmp	r3, #3
 8001534:	d100      	bne.n	8001538 <__aeabi_dmul+0xd4>
 8001536:	e1f3      	b.n	8001920 <__aeabi_dmul+0x4bc>
 8001538:	2b01      	cmp	r3, #1
 800153a:	d000      	beq.n	800153e <__aeabi_dmul+0xda>
 800153c:	e118      	b.n	8001770 <__aeabi_dmul+0x30c>
 800153e:	2200      	movs	r2, #0
 8001540:	2400      	movs	r4, #0
 8001542:	2500      	movs	r5, #0
 8001544:	9b01      	ldr	r3, [sp, #4]
 8001546:	0512      	lsls	r2, r2, #20
 8001548:	4322      	orrs	r2, r4
 800154a:	07db      	lsls	r3, r3, #31
 800154c:	431a      	orrs	r2, r3
 800154e:	0028      	movs	r0, r5
 8001550:	0011      	movs	r1, r2
 8001552:	b007      	add	sp, #28
 8001554:	bcf0      	pop	{r4, r5, r6, r7}
 8001556:	46bb      	mov	fp, r7
 8001558:	46b2      	mov	sl, r6
 800155a:	46a9      	mov	r9, r5
 800155c:	46a0      	mov	r8, r4
 800155e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001560:	0025      	movs	r5, r4
 8001562:	4305      	orrs	r5, r0
 8001564:	d100      	bne.n	8001568 <__aeabi_dmul+0x104>
 8001566:	e141      	b.n	80017ec <__aeabi_dmul+0x388>
 8001568:	2c00      	cmp	r4, #0
 800156a:	d100      	bne.n	800156e <__aeabi_dmul+0x10a>
 800156c:	e1ad      	b.n	80018ca <__aeabi_dmul+0x466>
 800156e:	0020      	movs	r0, r4
 8001570:	f000 fea8 	bl	80022c4 <__clzsi2>
 8001574:	0001      	movs	r1, r0
 8001576:	0002      	movs	r2, r0
 8001578:	390b      	subs	r1, #11
 800157a:	231d      	movs	r3, #29
 800157c:	0010      	movs	r0, r2
 800157e:	1a5b      	subs	r3, r3, r1
 8001580:	0031      	movs	r1, r6
 8001582:	0035      	movs	r5, r6
 8001584:	3808      	subs	r0, #8
 8001586:	4084      	lsls	r4, r0
 8001588:	40d9      	lsrs	r1, r3
 800158a:	4085      	lsls	r5, r0
 800158c:	430c      	orrs	r4, r1
 800158e:	489e      	ldr	r0, [pc, #632]	; (8001808 <__aeabi_dmul+0x3a4>)
 8001590:	1a83      	subs	r3, r0, r2
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2300      	movs	r3, #0
 8001596:	4699      	mov	r9, r3
 8001598:	469b      	mov	fp, r3
 800159a:	e786      	b.n	80014aa <__aeabi_dmul+0x46>
 800159c:	0005      	movs	r5, r0
 800159e:	4325      	orrs	r5, r4
 80015a0:	d000      	beq.n	80015a4 <__aeabi_dmul+0x140>
 80015a2:	e11c      	b.n	80017de <__aeabi_dmul+0x37a>
 80015a4:	2208      	movs	r2, #8
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2302      	movs	r3, #2
 80015aa:	2400      	movs	r4, #0
 80015ac:	4691      	mov	r9, r2
 80015ae:	469b      	mov	fp, r3
 80015b0:	e77b      	b.n	80014aa <__aeabi_dmul+0x46>
 80015b2:	4652      	mov	r2, sl
 80015b4:	4332      	orrs	r2, r6
 80015b6:	d100      	bne.n	80015ba <__aeabi_dmul+0x156>
 80015b8:	e10a      	b.n	80017d0 <__aeabi_dmul+0x36c>
 80015ba:	2e00      	cmp	r6, #0
 80015bc:	d100      	bne.n	80015c0 <__aeabi_dmul+0x15c>
 80015be:	e176      	b.n	80018ae <__aeabi_dmul+0x44a>
 80015c0:	0030      	movs	r0, r6
 80015c2:	f000 fe7f 	bl	80022c4 <__clzsi2>
 80015c6:	0002      	movs	r2, r0
 80015c8:	3a0b      	subs	r2, #11
 80015ca:	231d      	movs	r3, #29
 80015cc:	0001      	movs	r1, r0
 80015ce:	1a9b      	subs	r3, r3, r2
 80015d0:	4652      	mov	r2, sl
 80015d2:	3908      	subs	r1, #8
 80015d4:	40da      	lsrs	r2, r3
 80015d6:	408e      	lsls	r6, r1
 80015d8:	4316      	orrs	r6, r2
 80015da:	4652      	mov	r2, sl
 80015dc:	408a      	lsls	r2, r1
 80015de:	9b00      	ldr	r3, [sp, #0]
 80015e0:	4989      	ldr	r1, [pc, #548]	; (8001808 <__aeabi_dmul+0x3a4>)
 80015e2:	1a18      	subs	r0, r3, r0
 80015e4:	0003      	movs	r3, r0
 80015e6:	468c      	mov	ip, r1
 80015e8:	4463      	add	r3, ip
 80015ea:	2000      	movs	r0, #0
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	e77a      	b.n	80014e6 <__aeabi_dmul+0x82>
 80015f0:	2400      	movs	r4, #0
 80015f2:	2500      	movs	r5, #0
 80015f4:	4a81      	ldr	r2, [pc, #516]	; (80017fc <__aeabi_dmul+0x398>)
 80015f6:	e7a5      	b.n	8001544 <__aeabi_dmul+0xe0>
 80015f8:	0c2f      	lsrs	r7, r5, #16
 80015fa:	042d      	lsls	r5, r5, #16
 80015fc:	0c2d      	lsrs	r5, r5, #16
 80015fe:	002b      	movs	r3, r5
 8001600:	0c11      	lsrs	r1, r2, #16
 8001602:	0412      	lsls	r2, r2, #16
 8001604:	0c12      	lsrs	r2, r2, #16
 8001606:	4353      	muls	r3, r2
 8001608:	4698      	mov	r8, r3
 800160a:	0013      	movs	r3, r2
 800160c:	0028      	movs	r0, r5
 800160e:	437b      	muls	r3, r7
 8001610:	4699      	mov	r9, r3
 8001612:	4348      	muls	r0, r1
 8001614:	4448      	add	r0, r9
 8001616:	4683      	mov	fp, r0
 8001618:	4640      	mov	r0, r8
 800161a:	000b      	movs	r3, r1
 800161c:	0c00      	lsrs	r0, r0, #16
 800161e:	4682      	mov	sl, r0
 8001620:	4658      	mov	r0, fp
 8001622:	437b      	muls	r3, r7
 8001624:	4450      	add	r0, sl
 8001626:	9302      	str	r3, [sp, #8]
 8001628:	4581      	cmp	r9, r0
 800162a:	d906      	bls.n	800163a <__aeabi_dmul+0x1d6>
 800162c:	469a      	mov	sl, r3
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	025b      	lsls	r3, r3, #9
 8001632:	4699      	mov	r9, r3
 8001634:	44ca      	add	sl, r9
 8001636:	4653      	mov	r3, sl
 8001638:	9302      	str	r3, [sp, #8]
 800163a:	0c03      	lsrs	r3, r0, #16
 800163c:	469b      	mov	fp, r3
 800163e:	4643      	mov	r3, r8
 8001640:	041b      	lsls	r3, r3, #16
 8001642:	0400      	lsls	r0, r0, #16
 8001644:	0c1b      	lsrs	r3, r3, #16
 8001646:	4698      	mov	r8, r3
 8001648:	0003      	movs	r3, r0
 800164a:	4443      	add	r3, r8
 800164c:	9304      	str	r3, [sp, #16]
 800164e:	0c33      	lsrs	r3, r6, #16
 8001650:	4699      	mov	r9, r3
 8001652:	002b      	movs	r3, r5
 8001654:	0436      	lsls	r6, r6, #16
 8001656:	0c36      	lsrs	r6, r6, #16
 8001658:	4373      	muls	r3, r6
 800165a:	4698      	mov	r8, r3
 800165c:	0033      	movs	r3, r6
 800165e:	437b      	muls	r3, r7
 8001660:	469a      	mov	sl, r3
 8001662:	464b      	mov	r3, r9
 8001664:	435d      	muls	r5, r3
 8001666:	435f      	muls	r7, r3
 8001668:	4643      	mov	r3, r8
 800166a:	4455      	add	r5, sl
 800166c:	0c18      	lsrs	r0, r3, #16
 800166e:	1940      	adds	r0, r0, r5
 8001670:	4582      	cmp	sl, r0
 8001672:	d903      	bls.n	800167c <__aeabi_dmul+0x218>
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	025b      	lsls	r3, r3, #9
 8001678:	469a      	mov	sl, r3
 800167a:	4457      	add	r7, sl
 800167c:	0c05      	lsrs	r5, r0, #16
 800167e:	19eb      	adds	r3, r5, r7
 8001680:	9305      	str	r3, [sp, #20]
 8001682:	4643      	mov	r3, r8
 8001684:	041d      	lsls	r5, r3, #16
 8001686:	0c2d      	lsrs	r5, r5, #16
 8001688:	0400      	lsls	r0, r0, #16
 800168a:	1940      	adds	r0, r0, r5
 800168c:	0c25      	lsrs	r5, r4, #16
 800168e:	0424      	lsls	r4, r4, #16
 8001690:	0c24      	lsrs	r4, r4, #16
 8001692:	0027      	movs	r7, r4
 8001694:	4357      	muls	r7, r2
 8001696:	436a      	muls	r2, r5
 8001698:	4690      	mov	r8, r2
 800169a:	002a      	movs	r2, r5
 800169c:	0c3b      	lsrs	r3, r7, #16
 800169e:	469a      	mov	sl, r3
 80016a0:	434a      	muls	r2, r1
 80016a2:	4361      	muls	r1, r4
 80016a4:	4441      	add	r1, r8
 80016a6:	4451      	add	r1, sl
 80016a8:	4483      	add	fp, r0
 80016aa:	4588      	cmp	r8, r1
 80016ac:	d903      	bls.n	80016b6 <__aeabi_dmul+0x252>
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	025b      	lsls	r3, r3, #9
 80016b2:	4698      	mov	r8, r3
 80016b4:	4442      	add	r2, r8
 80016b6:	043f      	lsls	r7, r7, #16
 80016b8:	0c0b      	lsrs	r3, r1, #16
 80016ba:	0c3f      	lsrs	r7, r7, #16
 80016bc:	0409      	lsls	r1, r1, #16
 80016be:	19c9      	adds	r1, r1, r7
 80016c0:	0027      	movs	r7, r4
 80016c2:	4698      	mov	r8, r3
 80016c4:	464b      	mov	r3, r9
 80016c6:	4377      	muls	r7, r6
 80016c8:	435c      	muls	r4, r3
 80016ca:	436e      	muls	r6, r5
 80016cc:	435d      	muls	r5, r3
 80016ce:	0c3b      	lsrs	r3, r7, #16
 80016d0:	4699      	mov	r9, r3
 80016d2:	19a4      	adds	r4, r4, r6
 80016d4:	444c      	add	r4, r9
 80016d6:	4442      	add	r2, r8
 80016d8:	9503      	str	r5, [sp, #12]
 80016da:	42a6      	cmp	r6, r4
 80016dc:	d904      	bls.n	80016e8 <__aeabi_dmul+0x284>
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	025b      	lsls	r3, r3, #9
 80016e2:	4698      	mov	r8, r3
 80016e4:	4445      	add	r5, r8
 80016e6:	9503      	str	r5, [sp, #12]
 80016e8:	9b02      	ldr	r3, [sp, #8]
 80016ea:	043f      	lsls	r7, r7, #16
 80016ec:	445b      	add	r3, fp
 80016ee:	001e      	movs	r6, r3
 80016f0:	4283      	cmp	r3, r0
 80016f2:	4180      	sbcs	r0, r0
 80016f4:	0423      	lsls	r3, r4, #16
 80016f6:	4698      	mov	r8, r3
 80016f8:	9b05      	ldr	r3, [sp, #20]
 80016fa:	0c3f      	lsrs	r7, r7, #16
 80016fc:	4447      	add	r7, r8
 80016fe:	4698      	mov	r8, r3
 8001700:	1876      	adds	r6, r6, r1
 8001702:	428e      	cmp	r6, r1
 8001704:	4189      	sbcs	r1, r1
 8001706:	4447      	add	r7, r8
 8001708:	4240      	negs	r0, r0
 800170a:	183d      	adds	r5, r7, r0
 800170c:	46a8      	mov	r8, r5
 800170e:	4693      	mov	fp, r2
 8001710:	4249      	negs	r1, r1
 8001712:	468a      	mov	sl, r1
 8001714:	44c3      	add	fp, r8
 8001716:	429f      	cmp	r7, r3
 8001718:	41bf      	sbcs	r7, r7
 800171a:	4580      	cmp	r8, r0
 800171c:	4180      	sbcs	r0, r0
 800171e:	9b03      	ldr	r3, [sp, #12]
 8001720:	44da      	add	sl, fp
 8001722:	4698      	mov	r8, r3
 8001724:	4653      	mov	r3, sl
 8001726:	4240      	negs	r0, r0
 8001728:	427f      	negs	r7, r7
 800172a:	4307      	orrs	r7, r0
 800172c:	0c24      	lsrs	r4, r4, #16
 800172e:	4593      	cmp	fp, r2
 8001730:	4192      	sbcs	r2, r2
 8001732:	458a      	cmp	sl, r1
 8001734:	4189      	sbcs	r1, r1
 8001736:	193f      	adds	r7, r7, r4
 8001738:	0ddc      	lsrs	r4, r3, #23
 800173a:	9b04      	ldr	r3, [sp, #16]
 800173c:	0275      	lsls	r5, r6, #9
 800173e:	431d      	orrs	r5, r3
 8001740:	1e68      	subs	r0, r5, #1
 8001742:	4185      	sbcs	r5, r0
 8001744:	4653      	mov	r3, sl
 8001746:	4252      	negs	r2, r2
 8001748:	4249      	negs	r1, r1
 800174a:	430a      	orrs	r2, r1
 800174c:	18bf      	adds	r7, r7, r2
 800174e:	4447      	add	r7, r8
 8001750:	0df6      	lsrs	r6, r6, #23
 8001752:	027f      	lsls	r7, r7, #9
 8001754:	4335      	orrs	r5, r6
 8001756:	025a      	lsls	r2, r3, #9
 8001758:	433c      	orrs	r4, r7
 800175a:	4315      	orrs	r5, r2
 800175c:	01fb      	lsls	r3, r7, #7
 800175e:	d400      	bmi.n	8001762 <__aeabi_dmul+0x2fe>
 8001760:	e0c1      	b.n	80018e6 <__aeabi_dmul+0x482>
 8001762:	2101      	movs	r1, #1
 8001764:	086a      	lsrs	r2, r5, #1
 8001766:	400d      	ands	r5, r1
 8001768:	4315      	orrs	r5, r2
 800176a:	07e2      	lsls	r2, r4, #31
 800176c:	4315      	orrs	r5, r2
 800176e:	0864      	lsrs	r4, r4, #1
 8001770:	4926      	ldr	r1, [pc, #152]	; (800180c <__aeabi_dmul+0x3a8>)
 8001772:	4461      	add	r1, ip
 8001774:	2900      	cmp	r1, #0
 8001776:	dd56      	ble.n	8001826 <__aeabi_dmul+0x3c2>
 8001778:	076b      	lsls	r3, r5, #29
 800177a:	d009      	beq.n	8001790 <__aeabi_dmul+0x32c>
 800177c:	220f      	movs	r2, #15
 800177e:	402a      	ands	r2, r5
 8001780:	2a04      	cmp	r2, #4
 8001782:	d005      	beq.n	8001790 <__aeabi_dmul+0x32c>
 8001784:	1d2a      	adds	r2, r5, #4
 8001786:	42aa      	cmp	r2, r5
 8001788:	41ad      	sbcs	r5, r5
 800178a:	426d      	negs	r5, r5
 800178c:	1964      	adds	r4, r4, r5
 800178e:	0015      	movs	r5, r2
 8001790:	01e3      	lsls	r3, r4, #7
 8001792:	d504      	bpl.n	800179e <__aeabi_dmul+0x33a>
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <__aeabi_dmul+0x3ac>)
 8001798:	00c9      	lsls	r1, r1, #3
 800179a:	4014      	ands	r4, r2
 800179c:	4461      	add	r1, ip
 800179e:	4a1d      	ldr	r2, [pc, #116]	; (8001814 <__aeabi_dmul+0x3b0>)
 80017a0:	4291      	cmp	r1, r2
 80017a2:	dd00      	ble.n	80017a6 <__aeabi_dmul+0x342>
 80017a4:	e724      	b.n	80015f0 <__aeabi_dmul+0x18c>
 80017a6:	0762      	lsls	r2, r4, #29
 80017a8:	08ed      	lsrs	r5, r5, #3
 80017aa:	0264      	lsls	r4, r4, #9
 80017ac:	0549      	lsls	r1, r1, #21
 80017ae:	4315      	orrs	r5, r2
 80017b0:	0b24      	lsrs	r4, r4, #12
 80017b2:	0d4a      	lsrs	r2, r1, #21
 80017b4:	e6c6      	b.n	8001544 <__aeabi_dmul+0xe0>
 80017b6:	9701      	str	r7, [sp, #4]
 80017b8:	e6b8      	b.n	800152c <__aeabi_dmul+0xc8>
 80017ba:	4a10      	ldr	r2, [pc, #64]	; (80017fc <__aeabi_dmul+0x398>)
 80017bc:	2003      	movs	r0, #3
 80017be:	4694      	mov	ip, r2
 80017c0:	4463      	add	r3, ip
 80017c2:	464a      	mov	r2, r9
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2303      	movs	r3, #3
 80017c8:	431a      	orrs	r2, r3
 80017ca:	4691      	mov	r9, r2
 80017cc:	4652      	mov	r2, sl
 80017ce:	e68a      	b.n	80014e6 <__aeabi_dmul+0x82>
 80017d0:	4649      	mov	r1, r9
 80017d2:	2301      	movs	r3, #1
 80017d4:	4319      	orrs	r1, r3
 80017d6:	4689      	mov	r9, r1
 80017d8:	2600      	movs	r6, #0
 80017da:	2001      	movs	r0, #1
 80017dc:	e683      	b.n	80014e6 <__aeabi_dmul+0x82>
 80017de:	220c      	movs	r2, #12
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2303      	movs	r3, #3
 80017e4:	0005      	movs	r5, r0
 80017e6:	4691      	mov	r9, r2
 80017e8:	469b      	mov	fp, r3
 80017ea:	e65e      	b.n	80014aa <__aeabi_dmul+0x46>
 80017ec:	2304      	movs	r3, #4
 80017ee:	4699      	mov	r9, r3
 80017f0:	2300      	movs	r3, #0
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	3301      	adds	r3, #1
 80017f6:	2400      	movs	r4, #0
 80017f8:	469b      	mov	fp, r3
 80017fa:	e656      	b.n	80014aa <__aeabi_dmul+0x46>
 80017fc:	000007ff 	.word	0x000007ff
 8001800:	fffffc01 	.word	0xfffffc01
 8001804:	08009c38 	.word	0x08009c38
 8001808:	fffffc0d 	.word	0xfffffc0d
 800180c:	000003ff 	.word	0x000003ff
 8001810:	feffffff 	.word	0xfeffffff
 8001814:	000007fe 	.word	0x000007fe
 8001818:	2300      	movs	r3, #0
 800181a:	2480      	movs	r4, #128	; 0x80
 800181c:	2500      	movs	r5, #0
 800181e:	4a44      	ldr	r2, [pc, #272]	; (8001930 <__aeabi_dmul+0x4cc>)
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	0324      	lsls	r4, r4, #12
 8001824:	e68e      	b.n	8001544 <__aeabi_dmul+0xe0>
 8001826:	2001      	movs	r0, #1
 8001828:	1a40      	subs	r0, r0, r1
 800182a:	2838      	cmp	r0, #56	; 0x38
 800182c:	dd00      	ble.n	8001830 <__aeabi_dmul+0x3cc>
 800182e:	e686      	b.n	800153e <__aeabi_dmul+0xda>
 8001830:	281f      	cmp	r0, #31
 8001832:	dd5b      	ble.n	80018ec <__aeabi_dmul+0x488>
 8001834:	221f      	movs	r2, #31
 8001836:	0023      	movs	r3, r4
 8001838:	4252      	negs	r2, r2
 800183a:	1a51      	subs	r1, r2, r1
 800183c:	40cb      	lsrs	r3, r1
 800183e:	0019      	movs	r1, r3
 8001840:	2820      	cmp	r0, #32
 8001842:	d003      	beq.n	800184c <__aeabi_dmul+0x3e8>
 8001844:	4a3b      	ldr	r2, [pc, #236]	; (8001934 <__aeabi_dmul+0x4d0>)
 8001846:	4462      	add	r2, ip
 8001848:	4094      	lsls	r4, r2
 800184a:	4325      	orrs	r5, r4
 800184c:	1e6a      	subs	r2, r5, #1
 800184e:	4195      	sbcs	r5, r2
 8001850:	002a      	movs	r2, r5
 8001852:	430a      	orrs	r2, r1
 8001854:	2107      	movs	r1, #7
 8001856:	000d      	movs	r5, r1
 8001858:	2400      	movs	r4, #0
 800185a:	4015      	ands	r5, r2
 800185c:	4211      	tst	r1, r2
 800185e:	d05b      	beq.n	8001918 <__aeabi_dmul+0x4b4>
 8001860:	210f      	movs	r1, #15
 8001862:	2400      	movs	r4, #0
 8001864:	4011      	ands	r1, r2
 8001866:	2904      	cmp	r1, #4
 8001868:	d053      	beq.n	8001912 <__aeabi_dmul+0x4ae>
 800186a:	1d11      	adds	r1, r2, #4
 800186c:	4291      	cmp	r1, r2
 800186e:	4192      	sbcs	r2, r2
 8001870:	4252      	negs	r2, r2
 8001872:	18a4      	adds	r4, r4, r2
 8001874:	000a      	movs	r2, r1
 8001876:	0223      	lsls	r3, r4, #8
 8001878:	d54b      	bpl.n	8001912 <__aeabi_dmul+0x4ae>
 800187a:	2201      	movs	r2, #1
 800187c:	2400      	movs	r4, #0
 800187e:	2500      	movs	r5, #0
 8001880:	e660      	b.n	8001544 <__aeabi_dmul+0xe0>
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	031b      	lsls	r3, r3, #12
 8001886:	421c      	tst	r4, r3
 8001888:	d009      	beq.n	800189e <__aeabi_dmul+0x43a>
 800188a:	421e      	tst	r6, r3
 800188c:	d107      	bne.n	800189e <__aeabi_dmul+0x43a>
 800188e:	4333      	orrs	r3, r6
 8001890:	031c      	lsls	r4, r3, #12
 8001892:	4643      	mov	r3, r8
 8001894:	0015      	movs	r5, r2
 8001896:	0b24      	lsrs	r4, r4, #12
 8001898:	4a25      	ldr	r2, [pc, #148]	; (8001930 <__aeabi_dmul+0x4cc>)
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	e652      	b.n	8001544 <__aeabi_dmul+0xe0>
 800189e:	2280      	movs	r2, #128	; 0x80
 80018a0:	0312      	lsls	r2, r2, #12
 80018a2:	4314      	orrs	r4, r2
 80018a4:	0324      	lsls	r4, r4, #12
 80018a6:	4a22      	ldr	r2, [pc, #136]	; (8001930 <__aeabi_dmul+0x4cc>)
 80018a8:	0b24      	lsrs	r4, r4, #12
 80018aa:	9701      	str	r7, [sp, #4]
 80018ac:	e64a      	b.n	8001544 <__aeabi_dmul+0xe0>
 80018ae:	f000 fd09 	bl	80022c4 <__clzsi2>
 80018b2:	0003      	movs	r3, r0
 80018b4:	001a      	movs	r2, r3
 80018b6:	3215      	adds	r2, #21
 80018b8:	3020      	adds	r0, #32
 80018ba:	2a1c      	cmp	r2, #28
 80018bc:	dc00      	bgt.n	80018c0 <__aeabi_dmul+0x45c>
 80018be:	e684      	b.n	80015ca <__aeabi_dmul+0x166>
 80018c0:	4656      	mov	r6, sl
 80018c2:	3b08      	subs	r3, #8
 80018c4:	2200      	movs	r2, #0
 80018c6:	409e      	lsls	r6, r3
 80018c8:	e689      	b.n	80015de <__aeabi_dmul+0x17a>
 80018ca:	f000 fcfb 	bl	80022c4 <__clzsi2>
 80018ce:	0001      	movs	r1, r0
 80018d0:	0002      	movs	r2, r0
 80018d2:	3115      	adds	r1, #21
 80018d4:	3220      	adds	r2, #32
 80018d6:	291c      	cmp	r1, #28
 80018d8:	dc00      	bgt.n	80018dc <__aeabi_dmul+0x478>
 80018da:	e64e      	b.n	800157a <__aeabi_dmul+0x116>
 80018dc:	0034      	movs	r4, r6
 80018de:	3808      	subs	r0, #8
 80018e0:	2500      	movs	r5, #0
 80018e2:	4084      	lsls	r4, r0
 80018e4:	e653      	b.n	800158e <__aeabi_dmul+0x12a>
 80018e6:	9b00      	ldr	r3, [sp, #0]
 80018e8:	469c      	mov	ip, r3
 80018ea:	e741      	b.n	8001770 <__aeabi_dmul+0x30c>
 80018ec:	4912      	ldr	r1, [pc, #72]	; (8001938 <__aeabi_dmul+0x4d4>)
 80018ee:	0022      	movs	r2, r4
 80018f0:	4461      	add	r1, ip
 80018f2:	002e      	movs	r6, r5
 80018f4:	408d      	lsls	r5, r1
 80018f6:	408a      	lsls	r2, r1
 80018f8:	40c6      	lsrs	r6, r0
 80018fa:	1e69      	subs	r1, r5, #1
 80018fc:	418d      	sbcs	r5, r1
 80018fe:	4332      	orrs	r2, r6
 8001900:	432a      	orrs	r2, r5
 8001902:	40c4      	lsrs	r4, r0
 8001904:	0753      	lsls	r3, r2, #29
 8001906:	d0b6      	beq.n	8001876 <__aeabi_dmul+0x412>
 8001908:	210f      	movs	r1, #15
 800190a:	4011      	ands	r1, r2
 800190c:	2904      	cmp	r1, #4
 800190e:	d1ac      	bne.n	800186a <__aeabi_dmul+0x406>
 8001910:	e7b1      	b.n	8001876 <__aeabi_dmul+0x412>
 8001912:	0765      	lsls	r5, r4, #29
 8001914:	0264      	lsls	r4, r4, #9
 8001916:	0b24      	lsrs	r4, r4, #12
 8001918:	08d2      	lsrs	r2, r2, #3
 800191a:	4315      	orrs	r5, r2
 800191c:	2200      	movs	r2, #0
 800191e:	e611      	b.n	8001544 <__aeabi_dmul+0xe0>
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	0312      	lsls	r2, r2, #12
 8001924:	4314      	orrs	r4, r2
 8001926:	0324      	lsls	r4, r4, #12
 8001928:	4a01      	ldr	r2, [pc, #4]	; (8001930 <__aeabi_dmul+0x4cc>)
 800192a:	0b24      	lsrs	r4, r4, #12
 800192c:	e60a      	b.n	8001544 <__aeabi_dmul+0xe0>
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	000007ff 	.word	0x000007ff
 8001934:	0000043e 	.word	0x0000043e
 8001938:	0000041e 	.word	0x0000041e

0800193c <__aeabi_dsub>:
 800193c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800193e:	4657      	mov	r7, sl
 8001940:	464e      	mov	r6, r9
 8001942:	4645      	mov	r5, r8
 8001944:	46de      	mov	lr, fp
 8001946:	0004      	movs	r4, r0
 8001948:	b5e0      	push	{r5, r6, r7, lr}
 800194a:	001f      	movs	r7, r3
 800194c:	0010      	movs	r0, r2
 800194e:	030b      	lsls	r3, r1, #12
 8001950:	0f62      	lsrs	r2, r4, #29
 8001952:	004e      	lsls	r6, r1, #1
 8001954:	0fcd      	lsrs	r5, r1, #31
 8001956:	0a5b      	lsrs	r3, r3, #9
 8001958:	0339      	lsls	r1, r7, #12
 800195a:	4313      	orrs	r3, r2
 800195c:	0a49      	lsrs	r1, r1, #9
 800195e:	00e2      	lsls	r2, r4, #3
 8001960:	0f44      	lsrs	r4, r0, #29
 8001962:	4321      	orrs	r1, r4
 8001964:	4cc2      	ldr	r4, [pc, #776]	; (8001c70 <__aeabi_dsub+0x334>)
 8001966:	4691      	mov	r9, r2
 8001968:	4692      	mov	sl, r2
 800196a:	00c0      	lsls	r0, r0, #3
 800196c:	007a      	lsls	r2, r7, #1
 800196e:	4680      	mov	r8, r0
 8001970:	0d76      	lsrs	r6, r6, #21
 8001972:	0d52      	lsrs	r2, r2, #21
 8001974:	0fff      	lsrs	r7, r7, #31
 8001976:	42a2      	cmp	r2, r4
 8001978:	d100      	bne.n	800197c <__aeabi_dsub+0x40>
 800197a:	e0b4      	b.n	8001ae6 <__aeabi_dsub+0x1aa>
 800197c:	2401      	movs	r4, #1
 800197e:	4067      	eors	r7, r4
 8001980:	46bb      	mov	fp, r7
 8001982:	42bd      	cmp	r5, r7
 8001984:	d100      	bne.n	8001988 <__aeabi_dsub+0x4c>
 8001986:	e088      	b.n	8001a9a <__aeabi_dsub+0x15e>
 8001988:	1ab4      	subs	r4, r6, r2
 800198a:	46a4      	mov	ip, r4
 800198c:	2c00      	cmp	r4, #0
 800198e:	dc00      	bgt.n	8001992 <__aeabi_dsub+0x56>
 8001990:	e0b2      	b.n	8001af8 <__aeabi_dsub+0x1bc>
 8001992:	2a00      	cmp	r2, #0
 8001994:	d100      	bne.n	8001998 <__aeabi_dsub+0x5c>
 8001996:	e0c5      	b.n	8001b24 <__aeabi_dsub+0x1e8>
 8001998:	4ab5      	ldr	r2, [pc, #724]	; (8001c70 <__aeabi_dsub+0x334>)
 800199a:	4296      	cmp	r6, r2
 800199c:	d100      	bne.n	80019a0 <__aeabi_dsub+0x64>
 800199e:	e28b      	b.n	8001eb8 <__aeabi_dsub+0x57c>
 80019a0:	2280      	movs	r2, #128	; 0x80
 80019a2:	0412      	lsls	r2, r2, #16
 80019a4:	4311      	orrs	r1, r2
 80019a6:	4662      	mov	r2, ip
 80019a8:	2a38      	cmp	r2, #56	; 0x38
 80019aa:	dd00      	ble.n	80019ae <__aeabi_dsub+0x72>
 80019ac:	e1a1      	b.n	8001cf2 <__aeabi_dsub+0x3b6>
 80019ae:	2a1f      	cmp	r2, #31
 80019b0:	dd00      	ble.n	80019b4 <__aeabi_dsub+0x78>
 80019b2:	e216      	b.n	8001de2 <__aeabi_dsub+0x4a6>
 80019b4:	2720      	movs	r7, #32
 80019b6:	000c      	movs	r4, r1
 80019b8:	1abf      	subs	r7, r7, r2
 80019ba:	40bc      	lsls	r4, r7
 80019bc:	0002      	movs	r2, r0
 80019be:	46a0      	mov	r8, r4
 80019c0:	4664      	mov	r4, ip
 80019c2:	40b8      	lsls	r0, r7
 80019c4:	40e2      	lsrs	r2, r4
 80019c6:	4644      	mov	r4, r8
 80019c8:	4314      	orrs	r4, r2
 80019ca:	0002      	movs	r2, r0
 80019cc:	1e50      	subs	r0, r2, #1
 80019ce:	4182      	sbcs	r2, r0
 80019d0:	4660      	mov	r0, ip
 80019d2:	40c1      	lsrs	r1, r0
 80019d4:	4322      	orrs	r2, r4
 80019d6:	1a5b      	subs	r3, r3, r1
 80019d8:	4649      	mov	r1, r9
 80019da:	1a8c      	subs	r4, r1, r2
 80019dc:	45a1      	cmp	r9, r4
 80019de:	4192      	sbcs	r2, r2
 80019e0:	4252      	negs	r2, r2
 80019e2:	1a9b      	subs	r3, r3, r2
 80019e4:	4698      	mov	r8, r3
 80019e6:	4643      	mov	r3, r8
 80019e8:	021b      	lsls	r3, r3, #8
 80019ea:	d400      	bmi.n	80019ee <__aeabi_dsub+0xb2>
 80019ec:	e117      	b.n	8001c1e <__aeabi_dsub+0x2e2>
 80019ee:	4643      	mov	r3, r8
 80019f0:	025b      	lsls	r3, r3, #9
 80019f2:	0a5b      	lsrs	r3, r3, #9
 80019f4:	4698      	mov	r8, r3
 80019f6:	4643      	mov	r3, r8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d100      	bne.n	80019fe <__aeabi_dsub+0xc2>
 80019fc:	e16c      	b.n	8001cd8 <__aeabi_dsub+0x39c>
 80019fe:	4640      	mov	r0, r8
 8001a00:	f000 fc60 	bl	80022c4 <__clzsi2>
 8001a04:	0002      	movs	r2, r0
 8001a06:	3a08      	subs	r2, #8
 8001a08:	2120      	movs	r1, #32
 8001a0a:	0020      	movs	r0, r4
 8001a0c:	4643      	mov	r3, r8
 8001a0e:	1a89      	subs	r1, r1, r2
 8001a10:	4093      	lsls	r3, r2
 8001a12:	40c8      	lsrs	r0, r1
 8001a14:	4094      	lsls	r4, r2
 8001a16:	4303      	orrs	r3, r0
 8001a18:	4296      	cmp	r6, r2
 8001a1a:	dd00      	ble.n	8001a1e <__aeabi_dsub+0xe2>
 8001a1c:	e157      	b.n	8001cce <__aeabi_dsub+0x392>
 8001a1e:	1b96      	subs	r6, r2, r6
 8001a20:	1c71      	adds	r1, r6, #1
 8001a22:	291f      	cmp	r1, #31
 8001a24:	dd00      	ble.n	8001a28 <__aeabi_dsub+0xec>
 8001a26:	e1cb      	b.n	8001dc0 <__aeabi_dsub+0x484>
 8001a28:	2220      	movs	r2, #32
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	0026      	movs	r6, r4
 8001a2e:	1a52      	subs	r2, r2, r1
 8001a30:	4094      	lsls	r4, r2
 8001a32:	4090      	lsls	r0, r2
 8001a34:	40ce      	lsrs	r6, r1
 8001a36:	40cb      	lsrs	r3, r1
 8001a38:	1e62      	subs	r2, r4, #1
 8001a3a:	4194      	sbcs	r4, r2
 8001a3c:	4330      	orrs	r0, r6
 8001a3e:	4698      	mov	r8, r3
 8001a40:	2600      	movs	r6, #0
 8001a42:	4304      	orrs	r4, r0
 8001a44:	0763      	lsls	r3, r4, #29
 8001a46:	d009      	beq.n	8001a5c <__aeabi_dsub+0x120>
 8001a48:	230f      	movs	r3, #15
 8001a4a:	4023      	ands	r3, r4
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d005      	beq.n	8001a5c <__aeabi_dsub+0x120>
 8001a50:	1d23      	adds	r3, r4, #4
 8001a52:	42a3      	cmp	r3, r4
 8001a54:	41a4      	sbcs	r4, r4
 8001a56:	4264      	negs	r4, r4
 8001a58:	44a0      	add	r8, r4
 8001a5a:	001c      	movs	r4, r3
 8001a5c:	4643      	mov	r3, r8
 8001a5e:	021b      	lsls	r3, r3, #8
 8001a60:	d400      	bmi.n	8001a64 <__aeabi_dsub+0x128>
 8001a62:	e0df      	b.n	8001c24 <__aeabi_dsub+0x2e8>
 8001a64:	4b82      	ldr	r3, [pc, #520]	; (8001c70 <__aeabi_dsub+0x334>)
 8001a66:	3601      	adds	r6, #1
 8001a68:	429e      	cmp	r6, r3
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dsub+0x132>
 8001a6c:	e0fb      	b.n	8001c66 <__aeabi_dsub+0x32a>
 8001a6e:	4642      	mov	r2, r8
 8001a70:	4b80      	ldr	r3, [pc, #512]	; (8001c74 <__aeabi_dsub+0x338>)
 8001a72:	08e4      	lsrs	r4, r4, #3
 8001a74:	401a      	ands	r2, r3
 8001a76:	0013      	movs	r3, r2
 8001a78:	0571      	lsls	r1, r6, #21
 8001a7a:	0752      	lsls	r2, r2, #29
 8001a7c:	025b      	lsls	r3, r3, #9
 8001a7e:	4322      	orrs	r2, r4
 8001a80:	0b1b      	lsrs	r3, r3, #12
 8001a82:	0d49      	lsrs	r1, r1, #21
 8001a84:	0509      	lsls	r1, r1, #20
 8001a86:	07ed      	lsls	r5, r5, #31
 8001a88:	4319      	orrs	r1, r3
 8001a8a:	4329      	orrs	r1, r5
 8001a8c:	0010      	movs	r0, r2
 8001a8e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a90:	46bb      	mov	fp, r7
 8001a92:	46b2      	mov	sl, r6
 8001a94:	46a9      	mov	r9, r5
 8001a96:	46a0      	mov	r8, r4
 8001a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a9a:	1ab4      	subs	r4, r6, r2
 8001a9c:	46a4      	mov	ip, r4
 8001a9e:	2c00      	cmp	r4, #0
 8001aa0:	dd58      	ble.n	8001b54 <__aeabi_dsub+0x218>
 8001aa2:	2a00      	cmp	r2, #0
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dsub+0x16c>
 8001aa6:	e09e      	b.n	8001be6 <__aeabi_dsub+0x2aa>
 8001aa8:	4a71      	ldr	r2, [pc, #452]	; (8001c70 <__aeabi_dsub+0x334>)
 8001aaa:	4296      	cmp	r6, r2
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dsub+0x174>
 8001aae:	e13b      	b.n	8001d28 <__aeabi_dsub+0x3ec>
 8001ab0:	2280      	movs	r2, #128	; 0x80
 8001ab2:	0412      	lsls	r2, r2, #16
 8001ab4:	4311      	orrs	r1, r2
 8001ab6:	4662      	mov	r2, ip
 8001ab8:	2a38      	cmp	r2, #56	; 0x38
 8001aba:	dd00      	ble.n	8001abe <__aeabi_dsub+0x182>
 8001abc:	e0c1      	b.n	8001c42 <__aeabi_dsub+0x306>
 8001abe:	2a1f      	cmp	r2, #31
 8001ac0:	dc00      	bgt.n	8001ac4 <__aeabi_dsub+0x188>
 8001ac2:	e1bb      	b.n	8001e3c <__aeabi_dsub+0x500>
 8001ac4:	000c      	movs	r4, r1
 8001ac6:	3a20      	subs	r2, #32
 8001ac8:	40d4      	lsrs	r4, r2
 8001aca:	0022      	movs	r2, r4
 8001acc:	4664      	mov	r4, ip
 8001ace:	2c20      	cmp	r4, #32
 8001ad0:	d004      	beq.n	8001adc <__aeabi_dsub+0x1a0>
 8001ad2:	2740      	movs	r7, #64	; 0x40
 8001ad4:	1b3f      	subs	r7, r7, r4
 8001ad6:	40b9      	lsls	r1, r7
 8001ad8:	4308      	orrs	r0, r1
 8001ada:	4680      	mov	r8, r0
 8001adc:	4644      	mov	r4, r8
 8001ade:	1e61      	subs	r1, r4, #1
 8001ae0:	418c      	sbcs	r4, r1
 8001ae2:	4314      	orrs	r4, r2
 8001ae4:	e0b1      	b.n	8001c4a <__aeabi_dsub+0x30e>
 8001ae6:	000c      	movs	r4, r1
 8001ae8:	4304      	orrs	r4, r0
 8001aea:	d02a      	beq.n	8001b42 <__aeabi_dsub+0x206>
 8001aec:	46bb      	mov	fp, r7
 8001aee:	42bd      	cmp	r5, r7
 8001af0:	d02d      	beq.n	8001b4e <__aeabi_dsub+0x212>
 8001af2:	4c61      	ldr	r4, [pc, #388]	; (8001c78 <__aeabi_dsub+0x33c>)
 8001af4:	46a4      	mov	ip, r4
 8001af6:	44b4      	add	ip, r6
 8001af8:	4664      	mov	r4, ip
 8001afa:	2c00      	cmp	r4, #0
 8001afc:	d05c      	beq.n	8001bb8 <__aeabi_dsub+0x27c>
 8001afe:	1b94      	subs	r4, r2, r6
 8001b00:	46a4      	mov	ip, r4
 8001b02:	2e00      	cmp	r6, #0
 8001b04:	d000      	beq.n	8001b08 <__aeabi_dsub+0x1cc>
 8001b06:	e115      	b.n	8001d34 <__aeabi_dsub+0x3f8>
 8001b08:	464d      	mov	r5, r9
 8001b0a:	431d      	orrs	r5, r3
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_dsub+0x1d4>
 8001b0e:	e1c3      	b.n	8001e98 <__aeabi_dsub+0x55c>
 8001b10:	1e65      	subs	r5, r4, #1
 8001b12:	2c01      	cmp	r4, #1
 8001b14:	d100      	bne.n	8001b18 <__aeabi_dsub+0x1dc>
 8001b16:	e20c      	b.n	8001f32 <__aeabi_dsub+0x5f6>
 8001b18:	4e55      	ldr	r6, [pc, #340]	; (8001c70 <__aeabi_dsub+0x334>)
 8001b1a:	42b4      	cmp	r4, r6
 8001b1c:	d100      	bne.n	8001b20 <__aeabi_dsub+0x1e4>
 8001b1e:	e1f8      	b.n	8001f12 <__aeabi_dsub+0x5d6>
 8001b20:	46ac      	mov	ip, r5
 8001b22:	e10e      	b.n	8001d42 <__aeabi_dsub+0x406>
 8001b24:	000a      	movs	r2, r1
 8001b26:	4302      	orrs	r2, r0
 8001b28:	d100      	bne.n	8001b2c <__aeabi_dsub+0x1f0>
 8001b2a:	e136      	b.n	8001d9a <__aeabi_dsub+0x45e>
 8001b2c:	0022      	movs	r2, r4
 8001b2e:	3a01      	subs	r2, #1
 8001b30:	2c01      	cmp	r4, #1
 8001b32:	d100      	bne.n	8001b36 <__aeabi_dsub+0x1fa>
 8001b34:	e1c6      	b.n	8001ec4 <__aeabi_dsub+0x588>
 8001b36:	4c4e      	ldr	r4, [pc, #312]	; (8001c70 <__aeabi_dsub+0x334>)
 8001b38:	45a4      	cmp	ip, r4
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_dsub+0x202>
 8001b3c:	e0f4      	b.n	8001d28 <__aeabi_dsub+0x3ec>
 8001b3e:	4694      	mov	ip, r2
 8001b40:	e731      	b.n	80019a6 <__aeabi_dsub+0x6a>
 8001b42:	2401      	movs	r4, #1
 8001b44:	4067      	eors	r7, r4
 8001b46:	46bb      	mov	fp, r7
 8001b48:	42bd      	cmp	r5, r7
 8001b4a:	d000      	beq.n	8001b4e <__aeabi_dsub+0x212>
 8001b4c:	e71c      	b.n	8001988 <__aeabi_dsub+0x4c>
 8001b4e:	4c4a      	ldr	r4, [pc, #296]	; (8001c78 <__aeabi_dsub+0x33c>)
 8001b50:	46a4      	mov	ip, r4
 8001b52:	44b4      	add	ip, r6
 8001b54:	4664      	mov	r4, ip
 8001b56:	2c00      	cmp	r4, #0
 8001b58:	d100      	bne.n	8001b5c <__aeabi_dsub+0x220>
 8001b5a:	e0cf      	b.n	8001cfc <__aeabi_dsub+0x3c0>
 8001b5c:	1b94      	subs	r4, r2, r6
 8001b5e:	46a4      	mov	ip, r4
 8001b60:	2e00      	cmp	r6, #0
 8001b62:	d100      	bne.n	8001b66 <__aeabi_dsub+0x22a>
 8001b64:	e15c      	b.n	8001e20 <__aeabi_dsub+0x4e4>
 8001b66:	4e42      	ldr	r6, [pc, #264]	; (8001c70 <__aeabi_dsub+0x334>)
 8001b68:	42b2      	cmp	r2, r6
 8001b6a:	d100      	bne.n	8001b6e <__aeabi_dsub+0x232>
 8001b6c:	e1ec      	b.n	8001f48 <__aeabi_dsub+0x60c>
 8001b6e:	2680      	movs	r6, #128	; 0x80
 8001b70:	0436      	lsls	r6, r6, #16
 8001b72:	4333      	orrs	r3, r6
 8001b74:	4664      	mov	r4, ip
 8001b76:	2c38      	cmp	r4, #56	; 0x38
 8001b78:	dd00      	ble.n	8001b7c <__aeabi_dsub+0x240>
 8001b7a:	e1b3      	b.n	8001ee4 <__aeabi_dsub+0x5a8>
 8001b7c:	2c1f      	cmp	r4, #31
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dsub+0x246>
 8001b80:	e238      	b.n	8001ff4 <__aeabi_dsub+0x6b8>
 8001b82:	2620      	movs	r6, #32
 8001b84:	1b36      	subs	r6, r6, r4
 8001b86:	001c      	movs	r4, r3
 8001b88:	40b4      	lsls	r4, r6
 8001b8a:	464f      	mov	r7, r9
 8001b8c:	46a0      	mov	r8, r4
 8001b8e:	4664      	mov	r4, ip
 8001b90:	40e7      	lsrs	r7, r4
 8001b92:	4644      	mov	r4, r8
 8001b94:	433c      	orrs	r4, r7
 8001b96:	464f      	mov	r7, r9
 8001b98:	40b7      	lsls	r7, r6
 8001b9a:	003e      	movs	r6, r7
 8001b9c:	1e77      	subs	r7, r6, #1
 8001b9e:	41be      	sbcs	r6, r7
 8001ba0:	4334      	orrs	r4, r6
 8001ba2:	4666      	mov	r6, ip
 8001ba4:	40f3      	lsrs	r3, r6
 8001ba6:	18c9      	adds	r1, r1, r3
 8001ba8:	1824      	adds	r4, r4, r0
 8001baa:	4284      	cmp	r4, r0
 8001bac:	419b      	sbcs	r3, r3
 8001bae:	425b      	negs	r3, r3
 8001bb0:	4698      	mov	r8, r3
 8001bb2:	0016      	movs	r6, r2
 8001bb4:	4488      	add	r8, r1
 8001bb6:	e04e      	b.n	8001c56 <__aeabi_dsub+0x31a>
 8001bb8:	4a30      	ldr	r2, [pc, #192]	; (8001c7c <__aeabi_dsub+0x340>)
 8001bba:	1c74      	adds	r4, r6, #1
 8001bbc:	4214      	tst	r4, r2
 8001bbe:	d000      	beq.n	8001bc2 <__aeabi_dsub+0x286>
 8001bc0:	e0d6      	b.n	8001d70 <__aeabi_dsub+0x434>
 8001bc2:	464a      	mov	r2, r9
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	2e00      	cmp	r6, #0
 8001bc8:	d000      	beq.n	8001bcc <__aeabi_dsub+0x290>
 8001bca:	e15b      	b.n	8001e84 <__aeabi_dsub+0x548>
 8001bcc:	2a00      	cmp	r2, #0
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_dsub+0x296>
 8001bd0:	e1a5      	b.n	8001f1e <__aeabi_dsub+0x5e2>
 8001bd2:	000a      	movs	r2, r1
 8001bd4:	4302      	orrs	r2, r0
 8001bd6:	d000      	beq.n	8001bda <__aeabi_dsub+0x29e>
 8001bd8:	e1bb      	b.n	8001f52 <__aeabi_dsub+0x616>
 8001bda:	464a      	mov	r2, r9
 8001bdc:	0759      	lsls	r1, r3, #29
 8001bde:	08d2      	lsrs	r2, r2, #3
 8001be0:	430a      	orrs	r2, r1
 8001be2:	08db      	lsrs	r3, r3, #3
 8001be4:	e027      	b.n	8001c36 <__aeabi_dsub+0x2fa>
 8001be6:	000a      	movs	r2, r1
 8001be8:	4302      	orrs	r2, r0
 8001bea:	d100      	bne.n	8001bee <__aeabi_dsub+0x2b2>
 8001bec:	e174      	b.n	8001ed8 <__aeabi_dsub+0x59c>
 8001bee:	0022      	movs	r2, r4
 8001bf0:	3a01      	subs	r2, #1
 8001bf2:	2c01      	cmp	r4, #1
 8001bf4:	d005      	beq.n	8001c02 <__aeabi_dsub+0x2c6>
 8001bf6:	4c1e      	ldr	r4, [pc, #120]	; (8001c70 <__aeabi_dsub+0x334>)
 8001bf8:	45a4      	cmp	ip, r4
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dsub+0x2c2>
 8001bfc:	e094      	b.n	8001d28 <__aeabi_dsub+0x3ec>
 8001bfe:	4694      	mov	ip, r2
 8001c00:	e759      	b.n	8001ab6 <__aeabi_dsub+0x17a>
 8001c02:	4448      	add	r0, r9
 8001c04:	4548      	cmp	r0, r9
 8001c06:	4192      	sbcs	r2, r2
 8001c08:	185b      	adds	r3, r3, r1
 8001c0a:	4698      	mov	r8, r3
 8001c0c:	0004      	movs	r4, r0
 8001c0e:	4252      	negs	r2, r2
 8001c10:	4490      	add	r8, r2
 8001c12:	4643      	mov	r3, r8
 8001c14:	2602      	movs	r6, #2
 8001c16:	021b      	lsls	r3, r3, #8
 8001c18:	d500      	bpl.n	8001c1c <__aeabi_dsub+0x2e0>
 8001c1a:	e0c4      	b.n	8001da6 <__aeabi_dsub+0x46a>
 8001c1c:	3e01      	subs	r6, #1
 8001c1e:	0763      	lsls	r3, r4, #29
 8001c20:	d000      	beq.n	8001c24 <__aeabi_dsub+0x2e8>
 8001c22:	e711      	b.n	8001a48 <__aeabi_dsub+0x10c>
 8001c24:	4643      	mov	r3, r8
 8001c26:	46b4      	mov	ip, r6
 8001c28:	0759      	lsls	r1, r3, #29
 8001c2a:	08e2      	lsrs	r2, r4, #3
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	08db      	lsrs	r3, r3, #3
 8001c30:	490f      	ldr	r1, [pc, #60]	; (8001c70 <__aeabi_dsub+0x334>)
 8001c32:	458c      	cmp	ip, r1
 8001c34:	d040      	beq.n	8001cb8 <__aeabi_dsub+0x37c>
 8001c36:	4661      	mov	r1, ip
 8001c38:	031b      	lsls	r3, r3, #12
 8001c3a:	0549      	lsls	r1, r1, #21
 8001c3c:	0b1b      	lsrs	r3, r3, #12
 8001c3e:	0d49      	lsrs	r1, r1, #21
 8001c40:	e720      	b.n	8001a84 <__aeabi_dsub+0x148>
 8001c42:	4301      	orrs	r1, r0
 8001c44:	000c      	movs	r4, r1
 8001c46:	1e61      	subs	r1, r4, #1
 8001c48:	418c      	sbcs	r4, r1
 8001c4a:	444c      	add	r4, r9
 8001c4c:	454c      	cmp	r4, r9
 8001c4e:	4192      	sbcs	r2, r2
 8001c50:	4252      	negs	r2, r2
 8001c52:	4690      	mov	r8, r2
 8001c54:	4498      	add	r8, r3
 8001c56:	4643      	mov	r3, r8
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	d5e0      	bpl.n	8001c1e <__aeabi_dsub+0x2e2>
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <__aeabi_dsub+0x334>)
 8001c5e:	3601      	adds	r6, #1
 8001c60:	429e      	cmp	r6, r3
 8001c62:	d000      	beq.n	8001c66 <__aeabi_dsub+0x32a>
 8001c64:	e09f      	b.n	8001da6 <__aeabi_dsub+0x46a>
 8001c66:	0031      	movs	r1, r6
 8001c68:	2300      	movs	r3, #0
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	e70a      	b.n	8001a84 <__aeabi_dsub+0x148>
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	000007ff 	.word	0x000007ff
 8001c74:	ff7fffff 	.word	0xff7fffff
 8001c78:	fffff801 	.word	0xfffff801
 8001c7c:	000007fe 	.word	0x000007fe
 8001c80:	2a00      	cmp	r2, #0
 8001c82:	d100      	bne.n	8001c86 <__aeabi_dsub+0x34a>
 8001c84:	e160      	b.n	8001f48 <__aeabi_dsub+0x60c>
 8001c86:	000a      	movs	r2, r1
 8001c88:	4302      	orrs	r2, r0
 8001c8a:	d04d      	beq.n	8001d28 <__aeabi_dsub+0x3ec>
 8001c8c:	464a      	mov	r2, r9
 8001c8e:	075c      	lsls	r4, r3, #29
 8001c90:	08d2      	lsrs	r2, r2, #3
 8001c92:	4322      	orrs	r2, r4
 8001c94:	2480      	movs	r4, #128	; 0x80
 8001c96:	08db      	lsrs	r3, r3, #3
 8001c98:	0324      	lsls	r4, r4, #12
 8001c9a:	4223      	tst	r3, r4
 8001c9c:	d007      	beq.n	8001cae <__aeabi_dsub+0x372>
 8001c9e:	08ce      	lsrs	r6, r1, #3
 8001ca0:	4226      	tst	r6, r4
 8001ca2:	d104      	bne.n	8001cae <__aeabi_dsub+0x372>
 8001ca4:	465d      	mov	r5, fp
 8001ca6:	0033      	movs	r3, r6
 8001ca8:	08c2      	lsrs	r2, r0, #3
 8001caa:	0749      	lsls	r1, r1, #29
 8001cac:	430a      	orrs	r2, r1
 8001cae:	0f51      	lsrs	r1, r2, #29
 8001cb0:	00d2      	lsls	r2, r2, #3
 8001cb2:	08d2      	lsrs	r2, r2, #3
 8001cb4:	0749      	lsls	r1, r1, #29
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	0011      	movs	r1, r2
 8001cba:	4319      	orrs	r1, r3
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x384>
 8001cbe:	e1c8      	b.n	8002052 <__aeabi_dsub+0x716>
 8001cc0:	2180      	movs	r1, #128	; 0x80
 8001cc2:	0309      	lsls	r1, r1, #12
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	031b      	lsls	r3, r3, #12
 8001cc8:	49d5      	ldr	r1, [pc, #852]	; (8002020 <__aeabi_dsub+0x6e4>)
 8001cca:	0b1b      	lsrs	r3, r3, #12
 8001ccc:	e6da      	b.n	8001a84 <__aeabi_dsub+0x148>
 8001cce:	49d5      	ldr	r1, [pc, #852]	; (8002024 <__aeabi_dsub+0x6e8>)
 8001cd0:	1ab6      	subs	r6, r6, r2
 8001cd2:	400b      	ands	r3, r1
 8001cd4:	4698      	mov	r8, r3
 8001cd6:	e6b5      	b.n	8001a44 <__aeabi_dsub+0x108>
 8001cd8:	0020      	movs	r0, r4
 8001cda:	f000 faf3 	bl	80022c4 <__clzsi2>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	3218      	adds	r2, #24
 8001ce2:	2a1f      	cmp	r2, #31
 8001ce4:	dc00      	bgt.n	8001ce8 <__aeabi_dsub+0x3ac>
 8001ce6:	e68f      	b.n	8001a08 <__aeabi_dsub+0xcc>
 8001ce8:	0023      	movs	r3, r4
 8001cea:	3808      	subs	r0, #8
 8001cec:	4083      	lsls	r3, r0
 8001cee:	2400      	movs	r4, #0
 8001cf0:	e692      	b.n	8001a18 <__aeabi_dsub+0xdc>
 8001cf2:	4308      	orrs	r0, r1
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	1e50      	subs	r0, r2, #1
 8001cf8:	4182      	sbcs	r2, r0
 8001cfa:	e66d      	b.n	80019d8 <__aeabi_dsub+0x9c>
 8001cfc:	4cca      	ldr	r4, [pc, #808]	; (8002028 <__aeabi_dsub+0x6ec>)
 8001cfe:	1c72      	adds	r2, r6, #1
 8001d00:	4222      	tst	r2, r4
 8001d02:	d000      	beq.n	8001d06 <__aeabi_dsub+0x3ca>
 8001d04:	e0ad      	b.n	8001e62 <__aeabi_dsub+0x526>
 8001d06:	464a      	mov	r2, r9
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	2e00      	cmp	r6, #0
 8001d0c:	d1b8      	bne.n	8001c80 <__aeabi_dsub+0x344>
 8001d0e:	2a00      	cmp	r2, #0
 8001d10:	d100      	bne.n	8001d14 <__aeabi_dsub+0x3d8>
 8001d12:	e158      	b.n	8001fc6 <__aeabi_dsub+0x68a>
 8001d14:	000a      	movs	r2, r1
 8001d16:	4302      	orrs	r2, r0
 8001d18:	d000      	beq.n	8001d1c <__aeabi_dsub+0x3e0>
 8001d1a:	e159      	b.n	8001fd0 <__aeabi_dsub+0x694>
 8001d1c:	464a      	mov	r2, r9
 8001d1e:	0759      	lsls	r1, r3, #29
 8001d20:	08d2      	lsrs	r2, r2, #3
 8001d22:	430a      	orrs	r2, r1
 8001d24:	08db      	lsrs	r3, r3, #3
 8001d26:	e786      	b.n	8001c36 <__aeabi_dsub+0x2fa>
 8001d28:	464a      	mov	r2, r9
 8001d2a:	0759      	lsls	r1, r3, #29
 8001d2c:	08d2      	lsrs	r2, r2, #3
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08db      	lsrs	r3, r3, #3
 8001d32:	e7c1      	b.n	8001cb8 <__aeabi_dsub+0x37c>
 8001d34:	4dba      	ldr	r5, [pc, #744]	; (8002020 <__aeabi_dsub+0x6e4>)
 8001d36:	42aa      	cmp	r2, r5
 8001d38:	d100      	bne.n	8001d3c <__aeabi_dsub+0x400>
 8001d3a:	e11e      	b.n	8001f7a <__aeabi_dsub+0x63e>
 8001d3c:	2580      	movs	r5, #128	; 0x80
 8001d3e:	042d      	lsls	r5, r5, #16
 8001d40:	432b      	orrs	r3, r5
 8001d42:	4664      	mov	r4, ip
 8001d44:	2c38      	cmp	r4, #56	; 0x38
 8001d46:	dc5d      	bgt.n	8001e04 <__aeabi_dsub+0x4c8>
 8001d48:	2c1f      	cmp	r4, #31
 8001d4a:	dd00      	ble.n	8001d4e <__aeabi_dsub+0x412>
 8001d4c:	e0d0      	b.n	8001ef0 <__aeabi_dsub+0x5b4>
 8001d4e:	2520      	movs	r5, #32
 8001d50:	4667      	mov	r7, ip
 8001d52:	1b2d      	subs	r5, r5, r4
 8001d54:	464e      	mov	r6, r9
 8001d56:	001c      	movs	r4, r3
 8001d58:	40fe      	lsrs	r6, r7
 8001d5a:	40ac      	lsls	r4, r5
 8001d5c:	4334      	orrs	r4, r6
 8001d5e:	464e      	mov	r6, r9
 8001d60:	40ae      	lsls	r6, r5
 8001d62:	0035      	movs	r5, r6
 8001d64:	40fb      	lsrs	r3, r7
 8001d66:	1e6e      	subs	r6, r5, #1
 8001d68:	41b5      	sbcs	r5, r6
 8001d6a:	1ac9      	subs	r1, r1, r3
 8001d6c:	432c      	orrs	r4, r5
 8001d6e:	e04e      	b.n	8001e0e <__aeabi_dsub+0x4d2>
 8001d70:	464a      	mov	r2, r9
 8001d72:	1a14      	subs	r4, r2, r0
 8001d74:	45a1      	cmp	r9, r4
 8001d76:	4192      	sbcs	r2, r2
 8001d78:	4252      	negs	r2, r2
 8001d7a:	4690      	mov	r8, r2
 8001d7c:	1a5f      	subs	r7, r3, r1
 8001d7e:	003a      	movs	r2, r7
 8001d80:	4647      	mov	r7, r8
 8001d82:	1bd2      	subs	r2, r2, r7
 8001d84:	4690      	mov	r8, r2
 8001d86:	0212      	lsls	r2, r2, #8
 8001d88:	d500      	bpl.n	8001d8c <__aeabi_dsub+0x450>
 8001d8a:	e08b      	b.n	8001ea4 <__aeabi_dsub+0x568>
 8001d8c:	4642      	mov	r2, r8
 8001d8e:	4322      	orrs	r2, r4
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dsub+0x458>
 8001d92:	e630      	b.n	80019f6 <__aeabi_dsub+0xba>
 8001d94:	2300      	movs	r3, #0
 8001d96:	2500      	movs	r5, #0
 8001d98:	e74d      	b.n	8001c36 <__aeabi_dsub+0x2fa>
 8001d9a:	464a      	mov	r2, r9
 8001d9c:	0759      	lsls	r1, r3, #29
 8001d9e:	08d2      	lsrs	r2, r2, #3
 8001da0:	430a      	orrs	r2, r1
 8001da2:	08db      	lsrs	r3, r3, #3
 8001da4:	e744      	b.n	8001c30 <__aeabi_dsub+0x2f4>
 8001da6:	4642      	mov	r2, r8
 8001da8:	4b9e      	ldr	r3, [pc, #632]	; (8002024 <__aeabi_dsub+0x6e8>)
 8001daa:	0861      	lsrs	r1, r4, #1
 8001dac:	401a      	ands	r2, r3
 8001dae:	0013      	movs	r3, r2
 8001db0:	2201      	movs	r2, #1
 8001db2:	4014      	ands	r4, r2
 8001db4:	430c      	orrs	r4, r1
 8001db6:	07da      	lsls	r2, r3, #31
 8001db8:	085b      	lsrs	r3, r3, #1
 8001dba:	4698      	mov	r8, r3
 8001dbc:	4314      	orrs	r4, r2
 8001dbe:	e641      	b.n	8001a44 <__aeabi_dsub+0x108>
 8001dc0:	001a      	movs	r2, r3
 8001dc2:	3e1f      	subs	r6, #31
 8001dc4:	40f2      	lsrs	r2, r6
 8001dc6:	0016      	movs	r6, r2
 8001dc8:	2920      	cmp	r1, #32
 8001dca:	d003      	beq.n	8001dd4 <__aeabi_dsub+0x498>
 8001dcc:	2240      	movs	r2, #64	; 0x40
 8001dce:	1a51      	subs	r1, r2, r1
 8001dd0:	408b      	lsls	r3, r1
 8001dd2:	431c      	orrs	r4, r3
 8001dd4:	1e62      	subs	r2, r4, #1
 8001dd6:	4194      	sbcs	r4, r2
 8001dd8:	2300      	movs	r3, #0
 8001dda:	4334      	orrs	r4, r6
 8001ddc:	4698      	mov	r8, r3
 8001dde:	2600      	movs	r6, #0
 8001de0:	e71d      	b.n	8001c1e <__aeabi_dsub+0x2e2>
 8001de2:	000c      	movs	r4, r1
 8001de4:	3a20      	subs	r2, #32
 8001de6:	40d4      	lsrs	r4, r2
 8001de8:	0022      	movs	r2, r4
 8001dea:	4664      	mov	r4, ip
 8001dec:	2c20      	cmp	r4, #32
 8001dee:	d004      	beq.n	8001dfa <__aeabi_dsub+0x4be>
 8001df0:	2740      	movs	r7, #64	; 0x40
 8001df2:	1b3f      	subs	r7, r7, r4
 8001df4:	40b9      	lsls	r1, r7
 8001df6:	4308      	orrs	r0, r1
 8001df8:	4680      	mov	r8, r0
 8001dfa:	4644      	mov	r4, r8
 8001dfc:	1e61      	subs	r1, r4, #1
 8001dfe:	418c      	sbcs	r4, r1
 8001e00:	4322      	orrs	r2, r4
 8001e02:	e5e9      	b.n	80019d8 <__aeabi_dsub+0x9c>
 8001e04:	464c      	mov	r4, r9
 8001e06:	4323      	orrs	r3, r4
 8001e08:	001c      	movs	r4, r3
 8001e0a:	1e63      	subs	r3, r4, #1
 8001e0c:	419c      	sbcs	r4, r3
 8001e0e:	1b04      	subs	r4, r0, r4
 8001e10:	42a0      	cmp	r0, r4
 8001e12:	419b      	sbcs	r3, r3
 8001e14:	425b      	negs	r3, r3
 8001e16:	1acb      	subs	r3, r1, r3
 8001e18:	4698      	mov	r8, r3
 8001e1a:	465d      	mov	r5, fp
 8001e1c:	0016      	movs	r6, r2
 8001e1e:	e5e2      	b.n	80019e6 <__aeabi_dsub+0xaa>
 8001e20:	464e      	mov	r6, r9
 8001e22:	431e      	orrs	r6, r3
 8001e24:	d100      	bne.n	8001e28 <__aeabi_dsub+0x4ec>
 8001e26:	e0ae      	b.n	8001f86 <__aeabi_dsub+0x64a>
 8001e28:	1e66      	subs	r6, r4, #1
 8001e2a:	2c01      	cmp	r4, #1
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x4f4>
 8001e2e:	e0fd      	b.n	800202c <__aeabi_dsub+0x6f0>
 8001e30:	4f7b      	ldr	r7, [pc, #492]	; (8002020 <__aeabi_dsub+0x6e4>)
 8001e32:	42bc      	cmp	r4, r7
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x4fc>
 8001e36:	e107      	b.n	8002048 <__aeabi_dsub+0x70c>
 8001e38:	46b4      	mov	ip, r6
 8001e3a:	e69b      	b.n	8001b74 <__aeabi_dsub+0x238>
 8001e3c:	4664      	mov	r4, ip
 8001e3e:	2220      	movs	r2, #32
 8001e40:	1b12      	subs	r2, r2, r4
 8001e42:	000c      	movs	r4, r1
 8001e44:	4094      	lsls	r4, r2
 8001e46:	0007      	movs	r7, r0
 8001e48:	4090      	lsls	r0, r2
 8001e4a:	46a0      	mov	r8, r4
 8001e4c:	4664      	mov	r4, ip
 8001e4e:	1e42      	subs	r2, r0, #1
 8001e50:	4190      	sbcs	r0, r2
 8001e52:	4662      	mov	r2, ip
 8001e54:	40e7      	lsrs	r7, r4
 8001e56:	4644      	mov	r4, r8
 8001e58:	40d1      	lsrs	r1, r2
 8001e5a:	433c      	orrs	r4, r7
 8001e5c:	4304      	orrs	r4, r0
 8001e5e:	185b      	adds	r3, r3, r1
 8001e60:	e6f3      	b.n	8001c4a <__aeabi_dsub+0x30e>
 8001e62:	4c6f      	ldr	r4, [pc, #444]	; (8002020 <__aeabi_dsub+0x6e4>)
 8001e64:	42a2      	cmp	r2, r4
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x52e>
 8001e68:	e0d5      	b.n	8002016 <__aeabi_dsub+0x6da>
 8001e6a:	4448      	add	r0, r9
 8001e6c:	185b      	adds	r3, r3, r1
 8001e6e:	4548      	cmp	r0, r9
 8001e70:	4189      	sbcs	r1, r1
 8001e72:	4249      	negs	r1, r1
 8001e74:	185b      	adds	r3, r3, r1
 8001e76:	07dc      	lsls	r4, r3, #31
 8001e78:	0840      	lsrs	r0, r0, #1
 8001e7a:	085b      	lsrs	r3, r3, #1
 8001e7c:	4698      	mov	r8, r3
 8001e7e:	0016      	movs	r6, r2
 8001e80:	4304      	orrs	r4, r0
 8001e82:	e6cc      	b.n	8001c1e <__aeabi_dsub+0x2e2>
 8001e84:	2a00      	cmp	r2, #0
 8001e86:	d000      	beq.n	8001e8a <__aeabi_dsub+0x54e>
 8001e88:	e082      	b.n	8001f90 <__aeabi_dsub+0x654>
 8001e8a:	000a      	movs	r2, r1
 8001e8c:	4302      	orrs	r2, r0
 8001e8e:	d140      	bne.n	8001f12 <__aeabi_dsub+0x5d6>
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	2500      	movs	r5, #0
 8001e94:	031b      	lsls	r3, r3, #12
 8001e96:	e713      	b.n	8001cc0 <__aeabi_dsub+0x384>
 8001e98:	074b      	lsls	r3, r1, #29
 8001e9a:	08c2      	lsrs	r2, r0, #3
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	465d      	mov	r5, fp
 8001ea0:	08cb      	lsrs	r3, r1, #3
 8001ea2:	e6c5      	b.n	8001c30 <__aeabi_dsub+0x2f4>
 8001ea4:	464a      	mov	r2, r9
 8001ea6:	1a84      	subs	r4, r0, r2
 8001ea8:	42a0      	cmp	r0, r4
 8001eaa:	4192      	sbcs	r2, r2
 8001eac:	1acb      	subs	r3, r1, r3
 8001eae:	4252      	negs	r2, r2
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	4698      	mov	r8, r3
 8001eb4:	465d      	mov	r5, fp
 8001eb6:	e59e      	b.n	80019f6 <__aeabi_dsub+0xba>
 8001eb8:	464a      	mov	r2, r9
 8001eba:	0759      	lsls	r1, r3, #29
 8001ebc:	08d2      	lsrs	r2, r2, #3
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	08db      	lsrs	r3, r3, #3
 8001ec2:	e6f9      	b.n	8001cb8 <__aeabi_dsub+0x37c>
 8001ec4:	464a      	mov	r2, r9
 8001ec6:	1a14      	subs	r4, r2, r0
 8001ec8:	45a1      	cmp	r9, r4
 8001eca:	4192      	sbcs	r2, r2
 8001ecc:	1a5b      	subs	r3, r3, r1
 8001ece:	4252      	negs	r2, r2
 8001ed0:	1a9b      	subs	r3, r3, r2
 8001ed2:	4698      	mov	r8, r3
 8001ed4:	2601      	movs	r6, #1
 8001ed6:	e586      	b.n	80019e6 <__aeabi_dsub+0xaa>
 8001ed8:	464a      	mov	r2, r9
 8001eda:	0759      	lsls	r1, r3, #29
 8001edc:	08d2      	lsrs	r2, r2, #3
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	08db      	lsrs	r3, r3, #3
 8001ee2:	e6a5      	b.n	8001c30 <__aeabi_dsub+0x2f4>
 8001ee4:	464c      	mov	r4, r9
 8001ee6:	4323      	orrs	r3, r4
 8001ee8:	001c      	movs	r4, r3
 8001eea:	1e63      	subs	r3, r4, #1
 8001eec:	419c      	sbcs	r4, r3
 8001eee:	e65b      	b.n	8001ba8 <__aeabi_dsub+0x26c>
 8001ef0:	4665      	mov	r5, ip
 8001ef2:	001e      	movs	r6, r3
 8001ef4:	3d20      	subs	r5, #32
 8001ef6:	40ee      	lsrs	r6, r5
 8001ef8:	2c20      	cmp	r4, #32
 8001efa:	d005      	beq.n	8001f08 <__aeabi_dsub+0x5cc>
 8001efc:	2540      	movs	r5, #64	; 0x40
 8001efe:	1b2d      	subs	r5, r5, r4
 8001f00:	40ab      	lsls	r3, r5
 8001f02:	464c      	mov	r4, r9
 8001f04:	431c      	orrs	r4, r3
 8001f06:	46a2      	mov	sl, r4
 8001f08:	4654      	mov	r4, sl
 8001f0a:	1e63      	subs	r3, r4, #1
 8001f0c:	419c      	sbcs	r4, r3
 8001f0e:	4334      	orrs	r4, r6
 8001f10:	e77d      	b.n	8001e0e <__aeabi_dsub+0x4d2>
 8001f12:	074b      	lsls	r3, r1, #29
 8001f14:	08c2      	lsrs	r2, r0, #3
 8001f16:	431a      	orrs	r2, r3
 8001f18:	465d      	mov	r5, fp
 8001f1a:	08cb      	lsrs	r3, r1, #3
 8001f1c:	e6cc      	b.n	8001cb8 <__aeabi_dsub+0x37c>
 8001f1e:	000a      	movs	r2, r1
 8001f20:	4302      	orrs	r2, r0
 8001f22:	d100      	bne.n	8001f26 <__aeabi_dsub+0x5ea>
 8001f24:	e736      	b.n	8001d94 <__aeabi_dsub+0x458>
 8001f26:	074b      	lsls	r3, r1, #29
 8001f28:	08c2      	lsrs	r2, r0, #3
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	465d      	mov	r5, fp
 8001f2e:	08cb      	lsrs	r3, r1, #3
 8001f30:	e681      	b.n	8001c36 <__aeabi_dsub+0x2fa>
 8001f32:	464a      	mov	r2, r9
 8001f34:	1a84      	subs	r4, r0, r2
 8001f36:	42a0      	cmp	r0, r4
 8001f38:	4192      	sbcs	r2, r2
 8001f3a:	1acb      	subs	r3, r1, r3
 8001f3c:	4252      	negs	r2, r2
 8001f3e:	1a9b      	subs	r3, r3, r2
 8001f40:	4698      	mov	r8, r3
 8001f42:	465d      	mov	r5, fp
 8001f44:	2601      	movs	r6, #1
 8001f46:	e54e      	b.n	80019e6 <__aeabi_dsub+0xaa>
 8001f48:	074b      	lsls	r3, r1, #29
 8001f4a:	08c2      	lsrs	r2, r0, #3
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	08cb      	lsrs	r3, r1, #3
 8001f50:	e6b2      	b.n	8001cb8 <__aeabi_dsub+0x37c>
 8001f52:	464a      	mov	r2, r9
 8001f54:	1a14      	subs	r4, r2, r0
 8001f56:	45a1      	cmp	r9, r4
 8001f58:	4192      	sbcs	r2, r2
 8001f5a:	1a5f      	subs	r7, r3, r1
 8001f5c:	4252      	negs	r2, r2
 8001f5e:	1aba      	subs	r2, r7, r2
 8001f60:	4690      	mov	r8, r2
 8001f62:	0212      	lsls	r2, r2, #8
 8001f64:	d56b      	bpl.n	800203e <__aeabi_dsub+0x702>
 8001f66:	464a      	mov	r2, r9
 8001f68:	1a84      	subs	r4, r0, r2
 8001f6a:	42a0      	cmp	r0, r4
 8001f6c:	4192      	sbcs	r2, r2
 8001f6e:	1acb      	subs	r3, r1, r3
 8001f70:	4252      	negs	r2, r2
 8001f72:	1a9b      	subs	r3, r3, r2
 8001f74:	4698      	mov	r8, r3
 8001f76:	465d      	mov	r5, fp
 8001f78:	e564      	b.n	8001a44 <__aeabi_dsub+0x108>
 8001f7a:	074b      	lsls	r3, r1, #29
 8001f7c:	08c2      	lsrs	r2, r0, #3
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	465d      	mov	r5, fp
 8001f82:	08cb      	lsrs	r3, r1, #3
 8001f84:	e698      	b.n	8001cb8 <__aeabi_dsub+0x37c>
 8001f86:	074b      	lsls	r3, r1, #29
 8001f88:	08c2      	lsrs	r2, r0, #3
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	08cb      	lsrs	r3, r1, #3
 8001f8e:	e64f      	b.n	8001c30 <__aeabi_dsub+0x2f4>
 8001f90:	000a      	movs	r2, r1
 8001f92:	4302      	orrs	r2, r0
 8001f94:	d090      	beq.n	8001eb8 <__aeabi_dsub+0x57c>
 8001f96:	464a      	mov	r2, r9
 8001f98:	075c      	lsls	r4, r3, #29
 8001f9a:	08d2      	lsrs	r2, r2, #3
 8001f9c:	4314      	orrs	r4, r2
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	08db      	lsrs	r3, r3, #3
 8001fa2:	0312      	lsls	r2, r2, #12
 8001fa4:	4213      	tst	r3, r2
 8001fa6:	d008      	beq.n	8001fba <__aeabi_dsub+0x67e>
 8001fa8:	08ce      	lsrs	r6, r1, #3
 8001faa:	4216      	tst	r6, r2
 8001fac:	d105      	bne.n	8001fba <__aeabi_dsub+0x67e>
 8001fae:	08c0      	lsrs	r0, r0, #3
 8001fb0:	0749      	lsls	r1, r1, #29
 8001fb2:	4308      	orrs	r0, r1
 8001fb4:	0004      	movs	r4, r0
 8001fb6:	465d      	mov	r5, fp
 8001fb8:	0033      	movs	r3, r6
 8001fba:	0f61      	lsrs	r1, r4, #29
 8001fbc:	00e2      	lsls	r2, r4, #3
 8001fbe:	0749      	lsls	r1, r1, #29
 8001fc0:	08d2      	lsrs	r2, r2, #3
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	e678      	b.n	8001cb8 <__aeabi_dsub+0x37c>
 8001fc6:	074b      	lsls	r3, r1, #29
 8001fc8:	08c2      	lsrs	r2, r0, #3
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	08cb      	lsrs	r3, r1, #3
 8001fce:	e632      	b.n	8001c36 <__aeabi_dsub+0x2fa>
 8001fd0:	4448      	add	r0, r9
 8001fd2:	185b      	adds	r3, r3, r1
 8001fd4:	4548      	cmp	r0, r9
 8001fd6:	4192      	sbcs	r2, r2
 8001fd8:	4698      	mov	r8, r3
 8001fda:	4252      	negs	r2, r2
 8001fdc:	4490      	add	r8, r2
 8001fde:	4643      	mov	r3, r8
 8001fe0:	0004      	movs	r4, r0
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	d400      	bmi.n	8001fe8 <__aeabi_dsub+0x6ac>
 8001fe6:	e61a      	b.n	8001c1e <__aeabi_dsub+0x2e2>
 8001fe8:	4642      	mov	r2, r8
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <__aeabi_dsub+0x6e8>)
 8001fec:	2601      	movs	r6, #1
 8001fee:	401a      	ands	r2, r3
 8001ff0:	4690      	mov	r8, r2
 8001ff2:	e614      	b.n	8001c1e <__aeabi_dsub+0x2e2>
 8001ff4:	4666      	mov	r6, ip
 8001ff6:	001f      	movs	r7, r3
 8001ff8:	3e20      	subs	r6, #32
 8001ffa:	40f7      	lsrs	r7, r6
 8001ffc:	2c20      	cmp	r4, #32
 8001ffe:	d005      	beq.n	800200c <__aeabi_dsub+0x6d0>
 8002000:	2640      	movs	r6, #64	; 0x40
 8002002:	1b36      	subs	r6, r6, r4
 8002004:	40b3      	lsls	r3, r6
 8002006:	464c      	mov	r4, r9
 8002008:	431c      	orrs	r4, r3
 800200a:	46a2      	mov	sl, r4
 800200c:	4654      	mov	r4, sl
 800200e:	1e63      	subs	r3, r4, #1
 8002010:	419c      	sbcs	r4, r3
 8002012:	433c      	orrs	r4, r7
 8002014:	e5c8      	b.n	8001ba8 <__aeabi_dsub+0x26c>
 8002016:	0011      	movs	r1, r2
 8002018:	2300      	movs	r3, #0
 800201a:	2200      	movs	r2, #0
 800201c:	e532      	b.n	8001a84 <__aeabi_dsub+0x148>
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	000007ff 	.word	0x000007ff
 8002024:	ff7fffff 	.word	0xff7fffff
 8002028:	000007fe 	.word	0x000007fe
 800202c:	464a      	mov	r2, r9
 800202e:	1814      	adds	r4, r2, r0
 8002030:	4284      	cmp	r4, r0
 8002032:	4192      	sbcs	r2, r2
 8002034:	185b      	adds	r3, r3, r1
 8002036:	4698      	mov	r8, r3
 8002038:	4252      	negs	r2, r2
 800203a:	4490      	add	r8, r2
 800203c:	e5e9      	b.n	8001c12 <__aeabi_dsub+0x2d6>
 800203e:	4642      	mov	r2, r8
 8002040:	4322      	orrs	r2, r4
 8002042:	d100      	bne.n	8002046 <__aeabi_dsub+0x70a>
 8002044:	e6a6      	b.n	8001d94 <__aeabi_dsub+0x458>
 8002046:	e5ea      	b.n	8001c1e <__aeabi_dsub+0x2e2>
 8002048:	074b      	lsls	r3, r1, #29
 800204a:	08c2      	lsrs	r2, r0, #3
 800204c:	431a      	orrs	r2, r3
 800204e:	08cb      	lsrs	r3, r1, #3
 8002050:	e632      	b.n	8001cb8 <__aeabi_dsub+0x37c>
 8002052:	2200      	movs	r2, #0
 8002054:	4901      	ldr	r1, [pc, #4]	; (800205c <__aeabi_dsub+0x720>)
 8002056:	0013      	movs	r3, r2
 8002058:	e514      	b.n	8001a84 <__aeabi_dsub+0x148>
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	000007ff 	.word	0x000007ff

08002060 <__aeabi_dcmpun>:
 8002060:	b570      	push	{r4, r5, r6, lr}
 8002062:	0005      	movs	r5, r0
 8002064:	480c      	ldr	r0, [pc, #48]	; (8002098 <__aeabi_dcmpun+0x38>)
 8002066:	030c      	lsls	r4, r1, #12
 8002068:	0016      	movs	r6, r2
 800206a:	0049      	lsls	r1, r1, #1
 800206c:	031a      	lsls	r2, r3, #12
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	0b24      	lsrs	r4, r4, #12
 8002072:	0d49      	lsrs	r1, r1, #21
 8002074:	0b12      	lsrs	r2, r2, #12
 8002076:	0d5b      	lsrs	r3, r3, #21
 8002078:	4281      	cmp	r1, r0
 800207a:	d008      	beq.n	800208e <__aeabi_dcmpun+0x2e>
 800207c:	4906      	ldr	r1, [pc, #24]	; (8002098 <__aeabi_dcmpun+0x38>)
 800207e:	2000      	movs	r0, #0
 8002080:	428b      	cmp	r3, r1
 8002082:	d103      	bne.n	800208c <__aeabi_dcmpun+0x2c>
 8002084:	4332      	orrs	r2, r6
 8002086:	0010      	movs	r0, r2
 8002088:	1e42      	subs	r2, r0, #1
 800208a:	4190      	sbcs	r0, r2
 800208c:	bd70      	pop	{r4, r5, r6, pc}
 800208e:	2001      	movs	r0, #1
 8002090:	432c      	orrs	r4, r5
 8002092:	d1fb      	bne.n	800208c <__aeabi_dcmpun+0x2c>
 8002094:	e7f2      	b.n	800207c <__aeabi_dcmpun+0x1c>
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	000007ff 	.word	0x000007ff

0800209c <__aeabi_d2iz>:
 800209c:	000a      	movs	r2, r1
 800209e:	b530      	push	{r4, r5, lr}
 80020a0:	4c13      	ldr	r4, [pc, #76]	; (80020f0 <__aeabi_d2iz+0x54>)
 80020a2:	0053      	lsls	r3, r2, #1
 80020a4:	0309      	lsls	r1, r1, #12
 80020a6:	0005      	movs	r5, r0
 80020a8:	0b09      	lsrs	r1, r1, #12
 80020aa:	2000      	movs	r0, #0
 80020ac:	0d5b      	lsrs	r3, r3, #21
 80020ae:	0fd2      	lsrs	r2, r2, #31
 80020b0:	42a3      	cmp	r3, r4
 80020b2:	dd04      	ble.n	80020be <__aeabi_d2iz+0x22>
 80020b4:	480f      	ldr	r0, [pc, #60]	; (80020f4 <__aeabi_d2iz+0x58>)
 80020b6:	4283      	cmp	r3, r0
 80020b8:	dd02      	ble.n	80020c0 <__aeabi_d2iz+0x24>
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <__aeabi_d2iz+0x5c>)
 80020bc:	18d0      	adds	r0, r2, r3
 80020be:	bd30      	pop	{r4, r5, pc}
 80020c0:	2080      	movs	r0, #128	; 0x80
 80020c2:	0340      	lsls	r0, r0, #13
 80020c4:	4301      	orrs	r1, r0
 80020c6:	480d      	ldr	r0, [pc, #52]	; (80020fc <__aeabi_d2iz+0x60>)
 80020c8:	1ac0      	subs	r0, r0, r3
 80020ca:	281f      	cmp	r0, #31
 80020cc:	dd08      	ble.n	80020e0 <__aeabi_d2iz+0x44>
 80020ce:	480c      	ldr	r0, [pc, #48]	; (8002100 <__aeabi_d2iz+0x64>)
 80020d0:	1ac3      	subs	r3, r0, r3
 80020d2:	40d9      	lsrs	r1, r3
 80020d4:	000b      	movs	r3, r1
 80020d6:	4258      	negs	r0, r3
 80020d8:	2a00      	cmp	r2, #0
 80020da:	d1f0      	bne.n	80020be <__aeabi_d2iz+0x22>
 80020dc:	0018      	movs	r0, r3
 80020de:	e7ee      	b.n	80020be <__aeabi_d2iz+0x22>
 80020e0:	4c08      	ldr	r4, [pc, #32]	; (8002104 <__aeabi_d2iz+0x68>)
 80020e2:	40c5      	lsrs	r5, r0
 80020e4:	46a4      	mov	ip, r4
 80020e6:	4463      	add	r3, ip
 80020e8:	4099      	lsls	r1, r3
 80020ea:	000b      	movs	r3, r1
 80020ec:	432b      	orrs	r3, r5
 80020ee:	e7f2      	b.n	80020d6 <__aeabi_d2iz+0x3a>
 80020f0:	000003fe 	.word	0x000003fe
 80020f4:	0000041d 	.word	0x0000041d
 80020f8:	7fffffff 	.word	0x7fffffff
 80020fc:	00000433 	.word	0x00000433
 8002100:	00000413 	.word	0x00000413
 8002104:	fffffbed 	.word	0xfffffbed

08002108 <__aeabi_i2d>:
 8002108:	b570      	push	{r4, r5, r6, lr}
 800210a:	2800      	cmp	r0, #0
 800210c:	d016      	beq.n	800213c <__aeabi_i2d+0x34>
 800210e:	17c3      	asrs	r3, r0, #31
 8002110:	18c5      	adds	r5, r0, r3
 8002112:	405d      	eors	r5, r3
 8002114:	0fc4      	lsrs	r4, r0, #31
 8002116:	0028      	movs	r0, r5
 8002118:	f000 f8d4 	bl	80022c4 <__clzsi2>
 800211c:	4a11      	ldr	r2, [pc, #68]	; (8002164 <__aeabi_i2d+0x5c>)
 800211e:	1a12      	subs	r2, r2, r0
 8002120:	280a      	cmp	r0, #10
 8002122:	dc16      	bgt.n	8002152 <__aeabi_i2d+0x4a>
 8002124:	0003      	movs	r3, r0
 8002126:	002e      	movs	r6, r5
 8002128:	3315      	adds	r3, #21
 800212a:	409e      	lsls	r6, r3
 800212c:	230b      	movs	r3, #11
 800212e:	1a18      	subs	r0, r3, r0
 8002130:	40c5      	lsrs	r5, r0
 8002132:	0553      	lsls	r3, r2, #21
 8002134:	032d      	lsls	r5, r5, #12
 8002136:	0b2d      	lsrs	r5, r5, #12
 8002138:	0d5b      	lsrs	r3, r3, #21
 800213a:	e003      	b.n	8002144 <__aeabi_i2d+0x3c>
 800213c:	2400      	movs	r4, #0
 800213e:	2300      	movs	r3, #0
 8002140:	2500      	movs	r5, #0
 8002142:	2600      	movs	r6, #0
 8002144:	051b      	lsls	r3, r3, #20
 8002146:	432b      	orrs	r3, r5
 8002148:	07e4      	lsls	r4, r4, #31
 800214a:	4323      	orrs	r3, r4
 800214c:	0030      	movs	r0, r6
 800214e:	0019      	movs	r1, r3
 8002150:	bd70      	pop	{r4, r5, r6, pc}
 8002152:	380b      	subs	r0, #11
 8002154:	4085      	lsls	r5, r0
 8002156:	0553      	lsls	r3, r2, #21
 8002158:	032d      	lsls	r5, r5, #12
 800215a:	2600      	movs	r6, #0
 800215c:	0b2d      	lsrs	r5, r5, #12
 800215e:	0d5b      	lsrs	r3, r3, #21
 8002160:	e7f0      	b.n	8002144 <__aeabi_i2d+0x3c>
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	0000041e 	.word	0x0000041e

08002168 <__aeabi_ui2d>:
 8002168:	b510      	push	{r4, lr}
 800216a:	1e04      	subs	r4, r0, #0
 800216c:	d010      	beq.n	8002190 <__aeabi_ui2d+0x28>
 800216e:	f000 f8a9 	bl	80022c4 <__clzsi2>
 8002172:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <__aeabi_ui2d+0x48>)
 8002174:	1a1b      	subs	r3, r3, r0
 8002176:	280a      	cmp	r0, #10
 8002178:	dc11      	bgt.n	800219e <__aeabi_ui2d+0x36>
 800217a:	220b      	movs	r2, #11
 800217c:	0021      	movs	r1, r4
 800217e:	1a12      	subs	r2, r2, r0
 8002180:	40d1      	lsrs	r1, r2
 8002182:	3015      	adds	r0, #21
 8002184:	030a      	lsls	r2, r1, #12
 8002186:	055b      	lsls	r3, r3, #21
 8002188:	4084      	lsls	r4, r0
 800218a:	0b12      	lsrs	r2, r2, #12
 800218c:	0d5b      	lsrs	r3, r3, #21
 800218e:	e001      	b.n	8002194 <__aeabi_ui2d+0x2c>
 8002190:	2300      	movs	r3, #0
 8002192:	2200      	movs	r2, #0
 8002194:	051b      	lsls	r3, r3, #20
 8002196:	4313      	orrs	r3, r2
 8002198:	0020      	movs	r0, r4
 800219a:	0019      	movs	r1, r3
 800219c:	bd10      	pop	{r4, pc}
 800219e:	0022      	movs	r2, r4
 80021a0:	380b      	subs	r0, #11
 80021a2:	4082      	lsls	r2, r0
 80021a4:	055b      	lsls	r3, r3, #21
 80021a6:	0312      	lsls	r2, r2, #12
 80021a8:	2400      	movs	r4, #0
 80021aa:	0b12      	lsrs	r2, r2, #12
 80021ac:	0d5b      	lsrs	r3, r3, #21
 80021ae:	e7f1      	b.n	8002194 <__aeabi_ui2d+0x2c>
 80021b0:	0000041e 	.word	0x0000041e

080021b4 <__aeabi_d2f>:
 80021b4:	0002      	movs	r2, r0
 80021b6:	004b      	lsls	r3, r1, #1
 80021b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ba:	0308      	lsls	r0, r1, #12
 80021bc:	0d5b      	lsrs	r3, r3, #21
 80021be:	4e3d      	ldr	r6, [pc, #244]	; (80022b4 <__aeabi_d2f+0x100>)
 80021c0:	0fcc      	lsrs	r4, r1, #31
 80021c2:	0a40      	lsrs	r0, r0, #9
 80021c4:	0f51      	lsrs	r1, r2, #29
 80021c6:	1c5f      	adds	r7, r3, #1
 80021c8:	4308      	orrs	r0, r1
 80021ca:	00d5      	lsls	r5, r2, #3
 80021cc:	4237      	tst	r7, r6
 80021ce:	d00a      	beq.n	80021e6 <__aeabi_d2f+0x32>
 80021d0:	4939      	ldr	r1, [pc, #228]	; (80022b8 <__aeabi_d2f+0x104>)
 80021d2:	185e      	adds	r6, r3, r1
 80021d4:	2efe      	cmp	r6, #254	; 0xfe
 80021d6:	dd16      	ble.n	8002206 <__aeabi_d2f+0x52>
 80021d8:	23ff      	movs	r3, #255	; 0xff
 80021da:	2100      	movs	r1, #0
 80021dc:	05db      	lsls	r3, r3, #23
 80021de:	430b      	orrs	r3, r1
 80021e0:	07e0      	lsls	r0, r4, #31
 80021e2:	4318      	orrs	r0, r3
 80021e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <__aeabi_d2f+0x44>
 80021ea:	4328      	orrs	r0, r5
 80021ec:	d027      	beq.n	800223e <__aeabi_d2f+0x8a>
 80021ee:	2105      	movs	r1, #5
 80021f0:	0189      	lsls	r1, r1, #6
 80021f2:	0a49      	lsrs	r1, r1, #9
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	e7f1      	b.n	80021dc <__aeabi_d2f+0x28>
 80021f8:	4305      	orrs	r5, r0
 80021fa:	d0ed      	beq.n	80021d8 <__aeabi_d2f+0x24>
 80021fc:	2180      	movs	r1, #128	; 0x80
 80021fe:	03c9      	lsls	r1, r1, #15
 8002200:	23ff      	movs	r3, #255	; 0xff
 8002202:	4301      	orrs	r1, r0
 8002204:	e7ea      	b.n	80021dc <__aeabi_d2f+0x28>
 8002206:	2e00      	cmp	r6, #0
 8002208:	dd1c      	ble.n	8002244 <__aeabi_d2f+0x90>
 800220a:	0192      	lsls	r2, r2, #6
 800220c:	0011      	movs	r1, r2
 800220e:	1e4a      	subs	r2, r1, #1
 8002210:	4191      	sbcs	r1, r2
 8002212:	00c0      	lsls	r0, r0, #3
 8002214:	0f6d      	lsrs	r5, r5, #29
 8002216:	4301      	orrs	r1, r0
 8002218:	4329      	orrs	r1, r5
 800221a:	074b      	lsls	r3, r1, #29
 800221c:	d048      	beq.n	80022b0 <__aeabi_d2f+0xfc>
 800221e:	230f      	movs	r3, #15
 8002220:	400b      	ands	r3, r1
 8002222:	2b04      	cmp	r3, #4
 8002224:	d000      	beq.n	8002228 <__aeabi_d2f+0x74>
 8002226:	3104      	adds	r1, #4
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	04db      	lsls	r3, r3, #19
 800222c:	400b      	ands	r3, r1
 800222e:	d03f      	beq.n	80022b0 <__aeabi_d2f+0xfc>
 8002230:	1c72      	adds	r2, r6, #1
 8002232:	2efe      	cmp	r6, #254	; 0xfe
 8002234:	d0d0      	beq.n	80021d8 <__aeabi_d2f+0x24>
 8002236:	0189      	lsls	r1, r1, #6
 8002238:	0a49      	lsrs	r1, r1, #9
 800223a:	b2d3      	uxtb	r3, r2
 800223c:	e7ce      	b.n	80021dc <__aeabi_d2f+0x28>
 800223e:	2300      	movs	r3, #0
 8002240:	2100      	movs	r1, #0
 8002242:	e7cb      	b.n	80021dc <__aeabi_d2f+0x28>
 8002244:	0032      	movs	r2, r6
 8002246:	3217      	adds	r2, #23
 8002248:	db22      	blt.n	8002290 <__aeabi_d2f+0xdc>
 800224a:	2180      	movs	r1, #128	; 0x80
 800224c:	221e      	movs	r2, #30
 800224e:	0409      	lsls	r1, r1, #16
 8002250:	4308      	orrs	r0, r1
 8002252:	1b92      	subs	r2, r2, r6
 8002254:	2a1f      	cmp	r2, #31
 8002256:	dd1d      	ble.n	8002294 <__aeabi_d2f+0xe0>
 8002258:	2102      	movs	r1, #2
 800225a:	4249      	negs	r1, r1
 800225c:	1b8e      	subs	r6, r1, r6
 800225e:	0001      	movs	r1, r0
 8002260:	40f1      	lsrs	r1, r6
 8002262:	000e      	movs	r6, r1
 8002264:	2a20      	cmp	r2, #32
 8002266:	d004      	beq.n	8002272 <__aeabi_d2f+0xbe>
 8002268:	4a14      	ldr	r2, [pc, #80]	; (80022bc <__aeabi_d2f+0x108>)
 800226a:	4694      	mov	ip, r2
 800226c:	4463      	add	r3, ip
 800226e:	4098      	lsls	r0, r3
 8002270:	4305      	orrs	r5, r0
 8002272:	0029      	movs	r1, r5
 8002274:	1e4d      	subs	r5, r1, #1
 8002276:	41a9      	sbcs	r1, r5
 8002278:	4331      	orrs	r1, r6
 800227a:	2600      	movs	r6, #0
 800227c:	074b      	lsls	r3, r1, #29
 800227e:	d1ce      	bne.n	800221e <__aeabi_d2f+0x6a>
 8002280:	2080      	movs	r0, #128	; 0x80
 8002282:	000b      	movs	r3, r1
 8002284:	04c0      	lsls	r0, r0, #19
 8002286:	2201      	movs	r2, #1
 8002288:	4003      	ands	r3, r0
 800228a:	4201      	tst	r1, r0
 800228c:	d1d3      	bne.n	8002236 <__aeabi_d2f+0x82>
 800228e:	e7af      	b.n	80021f0 <__aeabi_d2f+0x3c>
 8002290:	2300      	movs	r3, #0
 8002292:	e7ac      	b.n	80021ee <__aeabi_d2f+0x3a>
 8002294:	490a      	ldr	r1, [pc, #40]	; (80022c0 <__aeabi_d2f+0x10c>)
 8002296:	468c      	mov	ip, r1
 8002298:	0029      	movs	r1, r5
 800229a:	4463      	add	r3, ip
 800229c:	40d1      	lsrs	r1, r2
 800229e:	409d      	lsls	r5, r3
 80022a0:	000a      	movs	r2, r1
 80022a2:	0029      	movs	r1, r5
 80022a4:	4098      	lsls	r0, r3
 80022a6:	1e4d      	subs	r5, r1, #1
 80022a8:	41a9      	sbcs	r1, r5
 80022aa:	4301      	orrs	r1, r0
 80022ac:	4311      	orrs	r1, r2
 80022ae:	e7e4      	b.n	800227a <__aeabi_d2f+0xc6>
 80022b0:	0033      	movs	r3, r6
 80022b2:	e79d      	b.n	80021f0 <__aeabi_d2f+0x3c>
 80022b4:	000007fe 	.word	0x000007fe
 80022b8:	fffffc80 	.word	0xfffffc80
 80022bc:	fffffca2 	.word	0xfffffca2
 80022c0:	fffffc82 	.word	0xfffffc82

080022c4 <__clzsi2>:
 80022c4:	211c      	movs	r1, #28
 80022c6:	2301      	movs	r3, #1
 80022c8:	041b      	lsls	r3, r3, #16
 80022ca:	4298      	cmp	r0, r3
 80022cc:	d301      	bcc.n	80022d2 <__clzsi2+0xe>
 80022ce:	0c00      	lsrs	r0, r0, #16
 80022d0:	3910      	subs	r1, #16
 80022d2:	0a1b      	lsrs	r3, r3, #8
 80022d4:	4298      	cmp	r0, r3
 80022d6:	d301      	bcc.n	80022dc <__clzsi2+0x18>
 80022d8:	0a00      	lsrs	r0, r0, #8
 80022da:	3908      	subs	r1, #8
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	4298      	cmp	r0, r3
 80022e0:	d301      	bcc.n	80022e6 <__clzsi2+0x22>
 80022e2:	0900      	lsrs	r0, r0, #4
 80022e4:	3904      	subs	r1, #4
 80022e6:	a202      	add	r2, pc, #8	; (adr r2, 80022f0 <__clzsi2+0x2c>)
 80022e8:	5c10      	ldrb	r0, [r2, r0]
 80022ea:	1840      	adds	r0, r0, r1
 80022ec:	4770      	bx	lr
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	02020304 	.word	0x02020304
 80022f4:	01010101 	.word	0x01010101
	...

08002300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002304:	f000 fb96 	bl	8002a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002308:	f000 f81c 	bl	8002344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800230c:	f000 f900 	bl	8002510 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002310:	f000 f880 	bl	8002414 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8002314:	f000 f8de 	bl	80024d4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002318:	f000 f8ac 	bl	8002474 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit  (&huart3, txBuffer, 6, 100);
 800231c:	4906      	ldr	r1, [pc, #24]	; (8002338 <main+0x38>)
 800231e:	4807      	ldr	r0, [pc, #28]	; (800233c <main+0x3c>)
 8002320:	2364      	movs	r3, #100	; 0x64
 8002322:	2206      	movs	r2, #6
 8002324:	f001 fe54 	bl	8003fd0 <HAL_UART_Transmit>

	  HAL_UART_Receive(&huart3, rxBuffer, 49, 100);
 8002328:	4905      	ldr	r1, [pc, #20]	; (8002340 <main+0x40>)
 800232a:	4804      	ldr	r0, [pc, #16]	; (800233c <main+0x3c>)
 800232c:	2364      	movs	r3, #100	; 0x64
 800232e:	2231      	movs	r2, #49	; 0x31
 8002330:	f001 fef8 	bl	8004124 <HAL_UART_Receive>
	  HAL_UART_Transmit  (&huart3, txBuffer, 6, 100);
 8002334:	e7f2      	b.n	800231c <main+0x1c>
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	20000000 	.word	0x20000000
 800233c:	20000254 	.word	0x20000254
 8002340:	200002f4 	.word	0x200002f4

08002344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b099      	sub	sp, #100	; 0x64
 8002348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800234a:	242c      	movs	r4, #44	; 0x2c
 800234c:	193b      	adds	r3, r7, r4
 800234e:	0018      	movs	r0, r3
 8002350:	2334      	movs	r3, #52	; 0x34
 8002352:	001a      	movs	r2, r3
 8002354:	2100      	movs	r1, #0
 8002356:	f002 ff47 	bl	80051e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800235a:	231c      	movs	r3, #28
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	0018      	movs	r0, r3
 8002360:	2310      	movs	r3, #16
 8002362:	001a      	movs	r2, r3
 8002364:	2100      	movs	r1, #0
 8002366:	f002 ff3f 	bl	80051e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800236a:	003b      	movs	r3, r7
 800236c:	0018      	movs	r0, r3
 800236e:	231c      	movs	r3, #28
 8002370:	001a      	movs	r2, r3
 8002372:	2100      	movs	r1, #0
 8002374:	f002 ff38 	bl	80051e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002378:	0021      	movs	r1, r4
 800237a:	187b      	adds	r3, r7, r1
 800237c:	2202      	movs	r2, #2
 800237e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002380:	187b      	adds	r3, r7, r1
 8002382:	2201      	movs	r2, #1
 8002384:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002386:	187b      	adds	r3, r7, r1
 8002388:	2210      	movs	r2, #16
 800238a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800238c:	187b      	adds	r3, r7, r1
 800238e:	2202      	movs	r2, #2
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002392:	187b      	adds	r3, r7, r1
 8002394:	2280      	movs	r2, #128	; 0x80
 8002396:	0212      	lsls	r2, r2, #8
 8002398:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800239a:	187b      	adds	r3, r7, r1
 800239c:	22a0      	movs	r2, #160	; 0xa0
 800239e:	0392      	lsls	r2, r2, #14
 80023a0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80023a2:	187b      	adds	r3, r7, r1
 80023a4:	2201      	movs	r2, #1
 80023a6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023a8:	187b      	adds	r3, r7, r1
 80023aa:	0018      	movs	r0, r3
 80023ac:	f000 ffbc 	bl	8003328 <HAL_RCC_OscConfig>
 80023b0:	1e03      	subs	r3, r0, #0
 80023b2:	d001      	beq.n	80023b8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80023b4:	f000 f916 	bl	80025e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023b8:	211c      	movs	r1, #28
 80023ba:	187b      	adds	r3, r7, r1
 80023bc:	2207      	movs	r2, #7
 80023be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023c0:	187b      	adds	r3, r7, r1
 80023c2:	2202      	movs	r2, #2
 80023c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023c6:	187b      	adds	r3, r7, r1
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023cc:	187b      	adds	r3, r7, r1
 80023ce:	2200      	movs	r2, #0
 80023d0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80023d2:	187b      	adds	r3, r7, r1
 80023d4:	2101      	movs	r1, #1
 80023d6:	0018      	movs	r0, r3
 80023d8:	f001 fb2c 	bl	8003a34 <HAL_RCC_ClockConfig>
 80023dc:	1e03      	subs	r3, r0, #0
 80023de:	d001      	beq.n	80023e4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80023e0:	f000 f900 	bl	80025e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2;
 80023e4:	003b      	movs	r3, r7
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <SystemClock_Config+0xcc>)
 80023e8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023ea:	003b      	movs	r3, r7
 80023ec:	2200      	movs	r2, #0
 80023ee:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80023f0:	003b      	movs	r3, r7
 80023f2:	2200      	movs	r2, #0
 80023f4:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023f6:	003b      	movs	r3, r7
 80023f8:	0018      	movs	r0, r3
 80023fa:	f001 fc95 	bl	8003d28 <HAL_RCCEx_PeriphCLKConfig>
 80023fe:	1e03      	subs	r3, r0, #0
 8002400:	d001      	beq.n	8002406 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002402:	f000 f8ef 	bl	80025e4 <Error_Handler>
  }
}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	46bd      	mov	sp, r7
 800240a:	b019      	add	sp, #100	; 0x64
 800240c:	bd90      	pop	{r4, r7, pc}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	00040002 	.word	0x00040002

08002414 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002418:	4b14      	ldr	r3, [pc, #80]	; (800246c <MX_USART2_UART_Init+0x58>)
 800241a:	4a15      	ldr	r2, [pc, #84]	; (8002470 <MX_USART2_UART_Init+0x5c>)
 800241c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800241e:	4b13      	ldr	r3, [pc, #76]	; (800246c <MX_USART2_UART_Init+0x58>)
 8002420:	2296      	movs	r2, #150	; 0x96
 8002422:	01d2      	lsls	r2, r2, #7
 8002424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <MX_USART2_UART_Init+0x58>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800242c:	4b0f      	ldr	r3, [pc, #60]	; (800246c <MX_USART2_UART_Init+0x58>)
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <MX_USART2_UART_Init+0x58>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <MX_USART2_UART_Init+0x58>)
 800243a:	220c      	movs	r2, #12
 800243c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <MX_USART2_UART_Init+0x58>)
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <MX_USART2_UART_Init+0x58>)
 8002446:	2200      	movs	r2, #0
 8002448:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <MX_USART2_UART_Init+0x58>)
 800244c:	2200      	movs	r2, #0
 800244e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <MX_USART2_UART_Init+0x58>)
 8002452:	2200      	movs	r2, #0
 8002454:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <MX_USART2_UART_Init+0x58>)
 8002458:	0018      	movs	r0, r3
 800245a:	f001 fd65 	bl	8003f28 <HAL_UART_Init>
 800245e:	1e03      	subs	r3, r0, #0
 8002460:	d001      	beq.n	8002466 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002462:	f000 f8bf 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000330 	.word	0x20000330
 8002470:	40004400 	.word	0x40004400

08002474 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002478:	4b14      	ldr	r3, [pc, #80]	; (80024cc <MX_USART3_UART_Init+0x58>)
 800247a:	4a15      	ldr	r2, [pc, #84]	; (80024d0 <MX_USART3_UART_Init+0x5c>)
 800247c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 800247e:	4b13      	ldr	r3, [pc, #76]	; (80024cc <MX_USART3_UART_Init+0x58>)
 8002480:	2296      	movs	r2, #150	; 0x96
 8002482:	01d2      	lsls	r2, r2, #7
 8002484:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002486:	4b11      	ldr	r3, [pc, #68]	; (80024cc <MX_USART3_UART_Init+0x58>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800248c:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <MX_USART3_UART_Init+0x58>)
 800248e:	2200      	movs	r2, #0
 8002490:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <MX_USART3_UART_Init+0x58>)
 8002494:	2200      	movs	r2, #0
 8002496:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <MX_USART3_UART_Init+0x58>)
 800249a:	220c      	movs	r2, #12
 800249c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <MX_USART3_UART_Init+0x58>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <MX_USART3_UART_Init+0x58>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <MX_USART3_UART_Init+0x58>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <MX_USART3_UART_Init+0x58>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <MX_USART3_UART_Init+0x58>)
 80024b8:	0018      	movs	r0, r3
 80024ba:	f001 fd35 	bl	8003f28 <HAL_UART_Init>
 80024be:	1e03      	subs	r3, r0, #0
 80024c0:	d001      	beq.n	80024c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80024c2:	f000 f88f 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000254 	.word	0x20000254
 80024d0:	40004800 	.word	0x40004800

080024d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <MX_DMA_Init+0x38>)
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <MX_DMA_Init+0x38>)
 80024e0:	2101      	movs	r1, #1
 80024e2:	430a      	orrs	r2, r1
 80024e4:	615a      	str	r2, [r3, #20]
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <MX_DMA_Init+0x38>)
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	2201      	movs	r2, #1
 80024ec:	4013      	ands	r3, r2
 80024ee:	607b      	str	r3, [r7, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2100      	movs	r1, #0
 80024f6:	2009      	movs	r0, #9
 80024f8:	f000 fbac 	bl	8002c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 80024fc:	2009      	movs	r0, #9
 80024fe:	f000 fbbe 	bl	8002c7e <HAL_NVIC_EnableIRQ>

}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	46bd      	mov	sp, r7
 8002506:	b002      	add	sp, #8
 8002508:	bd80      	pop	{r7, pc}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	40021000 	.word	0x40021000

08002510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b089      	sub	sp, #36	; 0x24
 8002514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002516:	240c      	movs	r4, #12
 8002518:	193b      	adds	r3, r7, r4
 800251a:	0018      	movs	r0, r3
 800251c:	2314      	movs	r3, #20
 800251e:	001a      	movs	r2, r3
 8002520:	2100      	movs	r1, #0
 8002522:	f002 fe61 	bl	80051e8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002526:	4b2d      	ldr	r3, [pc, #180]	; (80025dc <MX_GPIO_Init+0xcc>)
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	4b2c      	ldr	r3, [pc, #176]	; (80025dc <MX_GPIO_Init+0xcc>)
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0309      	lsls	r1, r1, #12
 8002530:	430a      	orrs	r2, r1
 8002532:	615a      	str	r2, [r3, #20]
 8002534:	4b29      	ldr	r3, [pc, #164]	; (80025dc <MX_GPIO_Init+0xcc>)
 8002536:	695a      	ldr	r2, [r3, #20]
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	031b      	lsls	r3, r3, #12
 800253c:	4013      	ands	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002542:	4b26      	ldr	r3, [pc, #152]	; (80025dc <MX_GPIO_Init+0xcc>)
 8002544:	695a      	ldr	r2, [r3, #20]
 8002546:	4b25      	ldr	r3, [pc, #148]	; (80025dc <MX_GPIO_Init+0xcc>)
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	03c9      	lsls	r1, r1, #15
 800254c:	430a      	orrs	r2, r1
 800254e:	615a      	str	r2, [r3, #20]
 8002550:	4b22      	ldr	r3, [pc, #136]	; (80025dc <MX_GPIO_Init+0xcc>)
 8002552:	695a      	ldr	r2, [r3, #20]
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	03db      	lsls	r3, r3, #15
 8002558:	4013      	ands	r3, r2
 800255a:	607b      	str	r3, [r7, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <MX_GPIO_Init+0xcc>)
 8002560:	695a      	ldr	r2, [r3, #20]
 8002562:	4b1e      	ldr	r3, [pc, #120]	; (80025dc <MX_GPIO_Init+0xcc>)
 8002564:	2180      	movs	r1, #128	; 0x80
 8002566:	0289      	lsls	r1, r1, #10
 8002568:	430a      	orrs	r2, r1
 800256a:	615a      	str	r2, [r3, #20]
 800256c:	4b1b      	ldr	r3, [pc, #108]	; (80025dc <MX_GPIO_Init+0xcc>)
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	029b      	lsls	r3, r3, #10
 8002574:	4013      	ands	r3, r2
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800257a:	2390      	movs	r3, #144	; 0x90
 800257c:	05db      	lsls	r3, r3, #23
 800257e:	2200      	movs	r2, #0
 8002580:	2120      	movs	r1, #32
 8002582:	0018      	movs	r0, r3
 8002584:	f000 feb2 	bl	80032ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002588:	193b      	adds	r3, r7, r4
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	0192      	lsls	r2, r2, #6
 800258e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002590:	193b      	adds	r3, r7, r4
 8002592:	2284      	movs	r2, #132	; 0x84
 8002594:	0392      	lsls	r2, r2, #14
 8002596:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	193b      	adds	r3, r7, r4
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800259e:	193b      	adds	r3, r7, r4
 80025a0:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <MX_GPIO_Init+0xd0>)
 80025a2:	0019      	movs	r1, r3
 80025a4:	0010      	movs	r0, r2
 80025a6:	f000 fd29 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80025aa:	0021      	movs	r1, r4
 80025ac:	187b      	adds	r3, r7, r1
 80025ae:	2220      	movs	r2, #32
 80025b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b2:	187b      	adds	r3, r7, r1
 80025b4:	2201      	movs	r2, #1
 80025b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	187b      	adds	r3, r7, r1
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	187b      	adds	r3, r7, r1
 80025c0:	2200      	movs	r2, #0
 80025c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80025c4:	187a      	adds	r2, r7, r1
 80025c6:	2390      	movs	r3, #144	; 0x90
 80025c8:	05db      	lsls	r3, r3, #23
 80025ca:	0011      	movs	r1, r2
 80025cc:	0018      	movs	r0, r3
 80025ce:	f000 fd15 	bl	8002ffc <HAL_GPIO_Init>

}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b009      	add	sp, #36	; 0x24
 80025d8:	bd90      	pop	{r4, r7, pc}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	40021000 	.word	0x40021000
 80025e0:	48000800 	.word	0x48000800

080025e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e8:	b672      	cpsid	i
}
 80025ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025ec:	e7fe      	b.n	80025ec <Error_Handler+0x8>
	...

080025f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f6:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <HAL_MspInit+0x44>)
 80025f8:	699a      	ldr	r2, [r3, #24]
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <HAL_MspInit+0x44>)
 80025fc:	2101      	movs	r1, #1
 80025fe:	430a      	orrs	r2, r1
 8002600:	619a      	str	r2, [r3, #24]
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <HAL_MspInit+0x44>)
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2201      	movs	r2, #1
 8002608:	4013      	ands	r3, r2
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_MspInit+0x44>)
 8002610:	69da      	ldr	r2, [r3, #28]
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <HAL_MspInit+0x44>)
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	0549      	lsls	r1, r1, #21
 8002618:	430a      	orrs	r2, r1
 800261a:	61da      	str	r2, [r3, #28]
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_MspInit+0x44>)
 800261e:	69da      	ldr	r2, [r3, #28]
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	055b      	lsls	r3, r3, #21
 8002624:	4013      	ands	r3, r2
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	46bd      	mov	sp, r7
 800262e:	b002      	add	sp, #8
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	40021000 	.word	0x40021000

08002638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b08d      	sub	sp, #52	; 0x34
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002640:	241c      	movs	r4, #28
 8002642:	193b      	adds	r3, r7, r4
 8002644:	0018      	movs	r0, r3
 8002646:	2314      	movs	r3, #20
 8002648:	001a      	movs	r2, r3
 800264a:	2100      	movs	r1, #0
 800264c:	f002 fdcc 	bl	80051e8 <memset>
  if(huart->Instance==USART2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a5b      	ldr	r2, [pc, #364]	; (80027c4 <HAL_UART_MspInit+0x18c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d171      	bne.n	800273e <HAL_UART_MspInit+0x106>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800265a:	4b5b      	ldr	r3, [pc, #364]	; (80027c8 <HAL_UART_MspInit+0x190>)
 800265c:	69da      	ldr	r2, [r3, #28]
 800265e:	4b5a      	ldr	r3, [pc, #360]	; (80027c8 <HAL_UART_MspInit+0x190>)
 8002660:	2180      	movs	r1, #128	; 0x80
 8002662:	0289      	lsls	r1, r1, #10
 8002664:	430a      	orrs	r2, r1
 8002666:	61da      	str	r2, [r3, #28]
 8002668:	4b57      	ldr	r3, [pc, #348]	; (80027c8 <HAL_UART_MspInit+0x190>)
 800266a:	69da      	ldr	r2, [r3, #28]
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	029b      	lsls	r3, r3, #10
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
 8002674:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002676:	4b54      	ldr	r3, [pc, #336]	; (80027c8 <HAL_UART_MspInit+0x190>)
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	4b53      	ldr	r3, [pc, #332]	; (80027c8 <HAL_UART_MspInit+0x190>)
 800267c:	2180      	movs	r1, #128	; 0x80
 800267e:	0289      	lsls	r1, r1, #10
 8002680:	430a      	orrs	r2, r1
 8002682:	615a      	str	r2, [r3, #20]
 8002684:	4b50      	ldr	r3, [pc, #320]	; (80027c8 <HAL_UART_MspInit+0x190>)
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	029b      	lsls	r3, r3, #10
 800268c:	4013      	ands	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002692:	0021      	movs	r1, r4
 8002694:	187b      	adds	r3, r7, r1
 8002696:	220c      	movs	r2, #12
 8002698:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	187b      	adds	r3, r7, r1
 800269c:	2202      	movs	r2, #2
 800269e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	187b      	adds	r3, r7, r1
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	187b      	adds	r3, r7, r1
 80026a8:	2200      	movs	r2, #0
 80026aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80026ac:	187b      	adds	r3, r7, r1
 80026ae:	2201      	movs	r2, #1
 80026b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b2:	187a      	adds	r2, r7, r1
 80026b4:	2390      	movs	r3, #144	; 0x90
 80026b6:	05db      	lsls	r3, r3, #23
 80026b8:	0011      	movs	r1, r2
 80026ba:	0018      	movs	r0, r3
 80026bc:	f000 fc9e 	bl	8002ffc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80026c0:	4b42      	ldr	r3, [pc, #264]	; (80027cc <HAL_UART_MspInit+0x194>)
 80026c2:	4a43      	ldr	r2, [pc, #268]	; (80027d0 <HAL_UART_MspInit+0x198>)
 80026c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026c6:	4b41      	ldr	r3, [pc, #260]	; (80027cc <HAL_UART_MspInit+0x194>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026cc:	4b3f      	ldr	r3, [pc, #252]	; (80027cc <HAL_UART_MspInit+0x194>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026d2:	4b3e      	ldr	r3, [pc, #248]	; (80027cc <HAL_UART_MspInit+0x194>)
 80026d4:	2280      	movs	r2, #128	; 0x80
 80026d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026d8:	4b3c      	ldr	r3, [pc, #240]	; (80027cc <HAL_UART_MspInit+0x194>)
 80026da:	2200      	movs	r2, #0
 80026dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026de:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <HAL_UART_MspInit+0x194>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80026e4:	4b39      	ldr	r3, [pc, #228]	; (80027cc <HAL_UART_MspInit+0x194>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026ea:	4b38      	ldr	r3, [pc, #224]	; (80027cc <HAL_UART_MspInit+0x194>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026f0:	4b36      	ldr	r3, [pc, #216]	; (80027cc <HAL_UART_MspInit+0x194>)
 80026f2:	0018      	movs	r0, r3
 80026f4:	f000 fae0 	bl	8002cb8 <HAL_DMA_Init>
 80026f8:	1e03      	subs	r3, r0, #0
 80026fa:	d001      	beq.n	8002700 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80026fc:	f7ff ff72 	bl	80025e4 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 8002700:	4a34      	ldr	r2, [pc, #208]	; (80027d4 <HAL_UART_MspInit+0x19c>)
 8002702:	23a8      	movs	r3, #168	; 0xa8
 8002704:	58d3      	ldr	r3, [r2, r3]
 8002706:	4933      	ldr	r1, [pc, #204]	; (80027d4 <HAL_UART_MspInit+0x19c>)
 8002708:	220f      	movs	r2, #15
 800270a:	4393      	bics	r3, r2
 800270c:	22a8      	movs	r2, #168	; 0xa8
 800270e:	508b      	str	r3, [r1, r2]
 8002710:	4a30      	ldr	r2, [pc, #192]	; (80027d4 <HAL_UART_MspInit+0x19c>)
 8002712:	23a8      	movs	r3, #168	; 0xa8
 8002714:	58d3      	ldr	r3, [r2, r3]
 8002716:	492f      	ldr	r1, [pc, #188]	; (80027d4 <HAL_UART_MspInit+0x19c>)
 8002718:	2209      	movs	r2, #9
 800271a:	4313      	orrs	r3, r2
 800271c:	22a8      	movs	r2, #168	; 0xa8
 800271e:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a2a      	ldr	r2, [pc, #168]	; (80027cc <HAL_UART_MspInit+0x194>)
 8002724:	671a      	str	r2, [r3, #112]	; 0x70
 8002726:	4b29      	ldr	r3, [pc, #164]	; (80027cc <HAL_UART_MspInit+0x194>)
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800272c:	2200      	movs	r2, #0
 800272e:	2100      	movs	r1, #0
 8002730:	201c      	movs	r0, #28
 8002732:	f000 fa8f 	bl	8002c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002736:	201c      	movs	r0, #28
 8002738:	f000 faa1 	bl	8002c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800273c:	e03e      	b.n	80027bc <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART3)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a25      	ldr	r2, [pc, #148]	; (80027d8 <HAL_UART_MspInit+0x1a0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d139      	bne.n	80027bc <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002748:	4b1f      	ldr	r3, [pc, #124]	; (80027c8 <HAL_UART_MspInit+0x190>)
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <HAL_UART_MspInit+0x190>)
 800274e:	2180      	movs	r1, #128	; 0x80
 8002750:	02c9      	lsls	r1, r1, #11
 8002752:	430a      	orrs	r2, r1
 8002754:	61da      	str	r2, [r3, #28]
 8002756:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <HAL_UART_MspInit+0x190>)
 8002758:	69da      	ldr	r2, [r3, #28]
 800275a:	2380      	movs	r3, #128	; 0x80
 800275c:	02db      	lsls	r3, r3, #11
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002764:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <HAL_UART_MspInit+0x190>)
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <HAL_UART_MspInit+0x190>)
 800276a:	2180      	movs	r1, #128	; 0x80
 800276c:	0309      	lsls	r1, r1, #12
 800276e:	430a      	orrs	r2, r1
 8002770:	615a      	str	r2, [r3, #20]
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <HAL_UART_MspInit+0x190>)
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	031b      	lsls	r3, r3, #12
 800277a:	4013      	ands	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002780:	211c      	movs	r1, #28
 8002782:	187b      	adds	r3, r7, r1
 8002784:	2230      	movs	r2, #48	; 0x30
 8002786:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002788:	187b      	adds	r3, r7, r1
 800278a:	2202      	movs	r2, #2
 800278c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	187b      	adds	r3, r7, r1
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002794:	187b      	adds	r3, r7, r1
 8002796:	2203      	movs	r2, #3
 8002798:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 800279a:	187b      	adds	r3, r7, r1
 800279c:	2201      	movs	r2, #1
 800279e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027a0:	187b      	adds	r3, r7, r1
 80027a2:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <HAL_UART_MspInit+0x1a4>)
 80027a4:	0019      	movs	r1, r3
 80027a6:	0010      	movs	r0, r2
 80027a8:	f000 fc28 	bl	8002ffc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 0, 0);
 80027ac:	2200      	movs	r2, #0
 80027ae:	2100      	movs	r1, #0
 80027b0:	201d      	movs	r0, #29
 80027b2:	f000 fa4f 	bl	8002c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 80027b6:	201d      	movs	r0, #29
 80027b8:	f000 fa61 	bl	8002c7e <HAL_NVIC_EnableIRQ>
}
 80027bc:	46c0      	nop			; (mov r8, r8)
 80027be:	46bd      	mov	sp, r7
 80027c0:	b00d      	add	sp, #52	; 0x34
 80027c2:	bd90      	pop	{r4, r7, pc}
 80027c4:	40004400 	.word	0x40004400
 80027c8:	40021000 	.word	0x40021000
 80027cc:	20000210 	.word	0x20000210
 80027d0:	40020008 	.word	0x40020008
 80027d4:	40020000 	.word	0x40020000
 80027d8:	40004800 	.word	0x40004800
 80027dc:	48000800 	.word	0x48000800

080027e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027e4:	e7fe      	b.n	80027e4 <NMI_Handler+0x4>

080027e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ea:	e7fe      	b.n	80027ea <HardFault_Handler+0x4>

080027ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002804:	f000 f95e 	bl	8002ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002808:	46c0      	nop			; (mov r8, r8)
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <DMA1_Ch1_IRQHandler+0x14>)
 8002816:	0018      	movs	r0, r3
 8002818:	f000 fb13 	bl	8002e42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	20000210 	.word	0x20000210

08002828 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <USART2_IRQHandler+0x14>)
 800282e:	0018      	movs	r0, r3
 8002830:	f001 fd68 	bl	8004304 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	20000330 	.word	0x20000330

08002840 <USART3_8_IRQHandler>:

/**
  * @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_8_IRQHandler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_8_IRQn 0 */

  /* USER CODE END USART3_8_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002844:	4b03      	ldr	r3, [pc, #12]	; (8002854 <USART3_8_IRQHandler+0x14>)
 8002846:	0018      	movs	r0, r3
 8002848:	f001 fd5c 	bl	8004304 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_8_IRQn 1 */

  /* USER CODE END USART3_8_IRQn 1 */
}
 800284c:	46c0      	nop			; (mov r8, r8)
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	20000254 	.word	0x20000254

08002858 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
	return 1;
 800285c:	2301      	movs	r3, #1
}
 800285e:	0018      	movs	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <_kill>:

int _kill(int pid, int sig)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800286e:	f002 fc91 	bl	8005194 <__errno>
 8002872:	0003      	movs	r3, r0
 8002874:	2216      	movs	r2, #22
 8002876:	601a      	str	r2, [r3, #0]
	return -1;
 8002878:	2301      	movs	r3, #1
 800287a:	425b      	negs	r3, r3
}
 800287c:	0018      	movs	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	b002      	add	sp, #8
 8002882:	bd80      	pop	{r7, pc}

08002884 <_exit>:

void _exit (int status)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800288c:	2301      	movs	r3, #1
 800288e:	425a      	negs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	0011      	movs	r1, r2
 8002894:	0018      	movs	r0, r3
 8002896:	f7ff ffe5 	bl	8002864 <_kill>
	while (1) {}		/* Make sure we hang here */
 800289a:	e7fe      	b.n	800289a <_exit+0x16>

0800289c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	e00a      	b.n	80028c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028ae:	e000      	b.n	80028b2 <_read+0x16>
 80028b0:	bf00      	nop
 80028b2:	0001      	movs	r1, r0
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	60ba      	str	r2, [r7, #8]
 80028ba:	b2ca      	uxtb	r2, r1
 80028bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	3301      	adds	r3, #1
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	dbf0      	blt.n	80028ae <_read+0x12>
	}

return len;
 80028cc:	687b      	ldr	r3, [r7, #4]
}
 80028ce:	0018      	movs	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b006      	add	sp, #24
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	e009      	b.n	80028fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	60ba      	str	r2, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	0018      	movs	r0, r3
 80028f2:	e000      	b.n	80028f6 <_write+0x20>
 80028f4:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	3301      	adds	r3, #1
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	dbf1      	blt.n	80028e8 <_write+0x12>
	}
	return len;
 8002904:	687b      	ldr	r3, [r7, #4]
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b006      	add	sp, #24
 800290c:	bd80      	pop	{r7, pc}

0800290e <_close>:

int _close(int file)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
	return -1;
 8002916:	2301      	movs	r3, #1
 8002918:	425b      	negs	r3, r3
}
 800291a:	0018      	movs	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	b002      	add	sp, #8
 8002920:	bd80      	pop	{r7, pc}

08002922 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2280      	movs	r2, #128	; 0x80
 8002930:	0192      	lsls	r2, r2, #6
 8002932:	605a      	str	r2, [r3, #4]
	return 0;
 8002934:	2300      	movs	r3, #0
}
 8002936:	0018      	movs	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	b002      	add	sp, #8
 800293c:	bd80      	pop	{r7, pc}

0800293e <_isatty>:

int _isatty(int file)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
	return 1;
 8002946:	2301      	movs	r3, #1
}
 8002948:	0018      	movs	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	b002      	add	sp, #8
 800294e:	bd80      	pop	{r7, pc}

08002950 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
	return 0;
 800295c:	2300      	movs	r3, #0
}
 800295e:	0018      	movs	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	b004      	add	sp, #16
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002970:	4a14      	ldr	r2, [pc, #80]	; (80029c4 <_sbrk+0x5c>)
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <_sbrk+0x60>)
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800297c:	4b13      	ldr	r3, [pc, #76]	; (80029cc <_sbrk+0x64>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d102      	bne.n	800298a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <_sbrk+0x64>)
 8002986:	4a12      	ldr	r2, [pc, #72]	; (80029d0 <_sbrk+0x68>)
 8002988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <_sbrk+0x64>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	18d3      	adds	r3, r2, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	429a      	cmp	r2, r3
 8002996:	d207      	bcs.n	80029a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002998:	f002 fbfc 	bl	8005194 <__errno>
 800299c:	0003      	movs	r3, r0
 800299e:	220c      	movs	r2, #12
 80029a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029a2:	2301      	movs	r3, #1
 80029a4:	425b      	negs	r3, r3
 80029a6:	e009      	b.n	80029bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <_sbrk+0x64>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ae:	4b07      	ldr	r3, [pc, #28]	; (80029cc <_sbrk+0x64>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	18d2      	adds	r2, r2, r3
 80029b6:	4b05      	ldr	r3, [pc, #20]	; (80029cc <_sbrk+0x64>)
 80029b8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80029ba:	68fb      	ldr	r3, [r7, #12]
}
 80029bc:	0018      	movs	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	b006      	add	sp, #24
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20008000 	.word	0x20008000
 80029c8:	00000400 	.word	0x00000400
 80029cc:	20000204 	.word	0x20000204
 80029d0:	200003c8 	.word	0x200003c8

080029d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80029d8:	46c0      	nop			; (mov r8, r8)
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029e0:	480d      	ldr	r0, [pc, #52]	; (8002a18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029e4:	480d      	ldr	r0, [pc, #52]	; (8002a1c <LoopForever+0x6>)
  ldr r1, =_edata
 80029e6:	490e      	ldr	r1, [pc, #56]	; (8002a20 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029e8:	4a0e      	ldr	r2, [pc, #56]	; (8002a24 <LoopForever+0xe>)
  movs r3, #0
 80029ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029ec:	e002      	b.n	80029f4 <LoopCopyDataInit>

080029ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029f2:	3304      	adds	r3, #4

080029f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029f8:	d3f9      	bcc.n	80029ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029fa:	4a0b      	ldr	r2, [pc, #44]	; (8002a28 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029fc:	4c0b      	ldr	r4, [pc, #44]	; (8002a2c <LoopForever+0x16>)
  movs r3, #0
 80029fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a00:	e001      	b.n	8002a06 <LoopFillZerobss>

08002a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a04:	3204      	adds	r2, #4

08002a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a08:	d3fb      	bcc.n	8002a02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a0a:	f7ff ffe3 	bl	80029d4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002a0e:	f002 fbc7 	bl	80051a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a12:	f7ff fc75 	bl	8002300 <main>

08002a16 <LoopForever>:

LoopForever:
    b LoopForever
 8002a16:	e7fe      	b.n	8002a16 <LoopForever>
  ldr   r0, =_estack
 8002a18:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a20:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002a24:	0800a14c 	.word	0x0800a14c
  ldr r2, =_sbss
 8002a28:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002a2c:	200003c8 	.word	0x200003c8

08002a30 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a30:	e7fe      	b.n	8002a30 <ADC1_COMP_IRQHandler>
	...

08002a34 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a38:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <HAL_Init+0x24>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_Init+0x24>)
 8002a3e:	2110      	movs	r1, #16
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002a44:	2000      	movs	r0, #0
 8002a46:	f000 f809 	bl	8002a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a4a:	f7ff fdd1 	bl	80025f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	40022000 	.word	0x40022000

08002a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a64:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <HAL_InitTick+0x5c>)
 8002a66:	681c      	ldr	r4, [r3, #0]
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <HAL_InitTick+0x60>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	0019      	movs	r1, r3
 8002a6e:	23fa      	movs	r3, #250	; 0xfa
 8002a70:	0098      	lsls	r0, r3, #2
 8002a72:	f7fd fb63 	bl	800013c <__udivsi3>
 8002a76:	0003      	movs	r3, r0
 8002a78:	0019      	movs	r1, r3
 8002a7a:	0020      	movs	r0, r4
 8002a7c:	f7fd fb5e 	bl	800013c <__udivsi3>
 8002a80:	0003      	movs	r3, r0
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 f90b 	bl	8002c9e <HAL_SYSTICK_Config>
 8002a88:	1e03      	subs	r3, r0, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e00f      	b.n	8002ab0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d80b      	bhi.n	8002aae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	2301      	movs	r3, #1
 8002a9a:	425b      	negs	r3, r3
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 f8d8 	bl	8002c54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_InitTick+0x64>)
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e000      	b.n	8002ab0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
}
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b003      	add	sp, #12
 8002ab6:	bd90      	pop	{r4, r7, pc}
 8002ab8:	20000008 	.word	0x20000008
 8002abc:	20000010 	.word	0x20000010
 8002ac0:	2000000c 	.word	0x2000000c

08002ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_IncTick+0x1c>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	001a      	movs	r2, r3
 8002ace:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_IncTick+0x20>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	18d2      	adds	r2, r2, r3
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <HAL_IncTick+0x20>)
 8002ad6:	601a      	str	r2, [r3, #0]
}
 8002ad8:	46c0      	nop			; (mov r8, r8)
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	20000010 	.word	0x20000010
 8002ae4:	200003b4 	.word	0x200003b4

08002ae8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  return uwTick;
 8002aec:	4b02      	ldr	r3, [pc, #8]	; (8002af8 <HAL_GetTick+0x10>)
 8002aee:	681b      	ldr	r3, [r3, #0]
}
 8002af0:	0018      	movs	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	200003b4 	.word	0x200003b4

08002afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	0002      	movs	r2, r0
 8002b04:	1dfb      	adds	r3, r7, #7
 8002b06:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b08:	1dfb      	adds	r3, r7, #7
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8002b0e:	d809      	bhi.n	8002b24 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b10:	1dfb      	adds	r3, r7, #7
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	001a      	movs	r2, r3
 8002b16:	231f      	movs	r3, #31
 8002b18:	401a      	ands	r2, r3
 8002b1a:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <__NVIC_EnableIRQ+0x30>)
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	4091      	lsls	r1, r2
 8002b20:	000a      	movs	r2, r1
 8002b22:	601a      	str	r2, [r3, #0]
  }
}
 8002b24:	46c0      	nop			; (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b002      	add	sp, #8
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	e000e100 	.word	0xe000e100

08002b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	0002      	movs	r2, r0
 8002b38:	6039      	str	r1, [r7, #0]
 8002b3a:	1dfb      	adds	r3, r7, #7
 8002b3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b3e:	1dfb      	adds	r3, r7, #7
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b7f      	cmp	r3, #127	; 0x7f
 8002b44:	d828      	bhi.n	8002b98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b46:	4a2f      	ldr	r2, [pc, #188]	; (8002c04 <__NVIC_SetPriority+0xd4>)
 8002b48:	1dfb      	adds	r3, r7, #7
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	b25b      	sxtb	r3, r3
 8002b4e:	089b      	lsrs	r3, r3, #2
 8002b50:	33c0      	adds	r3, #192	; 0xc0
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	589b      	ldr	r3, [r3, r2]
 8002b56:	1dfa      	adds	r2, r7, #7
 8002b58:	7812      	ldrb	r2, [r2, #0]
 8002b5a:	0011      	movs	r1, r2
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	400a      	ands	r2, r1
 8002b60:	00d2      	lsls	r2, r2, #3
 8002b62:	21ff      	movs	r1, #255	; 0xff
 8002b64:	4091      	lsls	r1, r2
 8002b66:	000a      	movs	r2, r1
 8002b68:	43d2      	mvns	r2, r2
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	019b      	lsls	r3, r3, #6
 8002b72:	22ff      	movs	r2, #255	; 0xff
 8002b74:	401a      	ands	r2, r3
 8002b76:	1dfb      	adds	r3, r7, #7
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	4003      	ands	r3, r0
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b84:	481f      	ldr	r0, [pc, #124]	; (8002c04 <__NVIC_SetPriority+0xd4>)
 8002b86:	1dfb      	adds	r3, r7, #7
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	b25b      	sxtb	r3, r3
 8002b8c:	089b      	lsrs	r3, r3, #2
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	33c0      	adds	r3, #192	; 0xc0
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002b96:	e031      	b.n	8002bfc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b98:	4a1b      	ldr	r2, [pc, #108]	; (8002c08 <__NVIC_SetPriority+0xd8>)
 8002b9a:	1dfb      	adds	r3, r7, #7
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	0019      	movs	r1, r3
 8002ba0:	230f      	movs	r3, #15
 8002ba2:	400b      	ands	r3, r1
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	089b      	lsrs	r3, r3, #2
 8002ba8:	3306      	adds	r3, #6
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	18d3      	adds	r3, r2, r3
 8002bae:	3304      	adds	r3, #4
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	1dfa      	adds	r2, r7, #7
 8002bb4:	7812      	ldrb	r2, [r2, #0]
 8002bb6:	0011      	movs	r1, r2
 8002bb8:	2203      	movs	r2, #3
 8002bba:	400a      	ands	r2, r1
 8002bbc:	00d2      	lsls	r2, r2, #3
 8002bbe:	21ff      	movs	r1, #255	; 0xff
 8002bc0:	4091      	lsls	r1, r2
 8002bc2:	000a      	movs	r2, r1
 8002bc4:	43d2      	mvns	r2, r2
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	019b      	lsls	r3, r3, #6
 8002bce:	22ff      	movs	r2, #255	; 0xff
 8002bd0:	401a      	ands	r2, r3
 8002bd2:	1dfb      	adds	r3, r7, #7
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	2303      	movs	r3, #3
 8002bda:	4003      	ands	r3, r0
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002be0:	4809      	ldr	r0, [pc, #36]	; (8002c08 <__NVIC_SetPriority+0xd8>)
 8002be2:	1dfb      	adds	r3, r7, #7
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	001c      	movs	r4, r3
 8002be8:	230f      	movs	r3, #15
 8002bea:	4023      	ands	r3, r4
 8002bec:	3b08      	subs	r3, #8
 8002bee:	089b      	lsrs	r3, r3, #2
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	3306      	adds	r3, #6
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	18c3      	adds	r3, r0, r3
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	601a      	str	r2, [r3, #0]
}
 8002bfc:	46c0      	nop			; (mov r8, r8)
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b003      	add	sp, #12
 8002c02:	bd90      	pop	{r4, r7, pc}
 8002c04:	e000e100 	.word	0xe000e100
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	1e5a      	subs	r2, r3, #1
 8002c18:	2380      	movs	r3, #128	; 0x80
 8002c1a:	045b      	lsls	r3, r3, #17
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d301      	bcc.n	8002c24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c20:	2301      	movs	r3, #1
 8002c22:	e010      	b.n	8002c46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c24:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <SysTick_Config+0x44>)
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	3a01      	subs	r2, #1
 8002c2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	425b      	negs	r3, r3
 8002c30:	2103      	movs	r1, #3
 8002c32:	0018      	movs	r0, r3
 8002c34:	f7ff ff7c 	bl	8002b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c38:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <SysTick_Config+0x44>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c3e:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <SysTick_Config+0x44>)
 8002c40:	2207      	movs	r2, #7
 8002c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	0018      	movs	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b002      	add	sp, #8
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	e000e010 	.word	0xe000e010

08002c54 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	210f      	movs	r1, #15
 8002c60:	187b      	adds	r3, r7, r1
 8002c62:	1c02      	adds	r2, r0, #0
 8002c64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	187b      	adds	r3, r7, r1
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	b25b      	sxtb	r3, r3
 8002c6e:	0011      	movs	r1, r2
 8002c70:	0018      	movs	r0, r3
 8002c72:	f7ff ff5d 	bl	8002b30 <__NVIC_SetPriority>
}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b004      	add	sp, #16
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	0002      	movs	r2, r0
 8002c86:	1dfb      	adds	r3, r7, #7
 8002c88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c8a:	1dfb      	adds	r3, r7, #7
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	b25b      	sxtb	r3, r3
 8002c90:	0018      	movs	r0, r3
 8002c92:	f7ff ff33 	bl	8002afc <__NVIC_EnableIRQ>
}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b002      	add	sp, #8
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7ff ffaf 	bl	8002c0c <SysTick_Config>
 8002cae:	0003      	movs	r3, r0
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b002      	add	sp, #8
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e036      	b.n	8002d3c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2221      	movs	r2, #33	; 0x21
 8002cd2:	2102      	movs	r1, #2
 8002cd4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <HAL_DMA_Init+0x8c>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f000 f932 	bl	8002f88 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2221      	movs	r2, #33	; 0x21
 8002d2e:	2101      	movs	r1, #1
 8002d30:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2220      	movs	r2, #32
 8002d36:	2100      	movs	r1, #0
 8002d38:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}  
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b004      	add	sp, #16
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	ffffc00f 	.word	0xffffc00f

08002d48 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2221      	movs	r2, #33	; 0x21
 8002d54:	5c9b      	ldrb	r3, [r3, r2]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d008      	beq.n	8002d6e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2204      	movs	r2, #4
 8002d60:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2220      	movs	r2, #32
 8002d66:	2100      	movs	r1, #0
 8002d68:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e020      	b.n	8002db0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	210e      	movs	r1, #14
 8002d7a:	438a      	bics	r2, r1
 8002d7c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2101      	movs	r1, #1
 8002d8a:	438a      	bics	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d96:	2101      	movs	r1, #1
 8002d98:	4091      	lsls	r1, r2
 8002d9a:	000a      	movs	r2, r1
 8002d9c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2221      	movs	r2, #33	; 0x21
 8002da2:	2101      	movs	r1, #1
 8002da4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2220      	movs	r2, #32
 8002daa:	2100      	movs	r1, #0
 8002dac:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	0018      	movs	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	b002      	add	sp, #8
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc0:	210f      	movs	r1, #15
 8002dc2:	187b      	adds	r3, r7, r1
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2221      	movs	r2, #33	; 0x21
 8002dcc:	5c9b      	ldrb	r3, [r3, r2]
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d006      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002dda:	187b      	adds	r3, r7, r1
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	e028      	b.n	8002e34 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	210e      	movs	r1, #14
 8002dee:	438a      	bics	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	438a      	bics	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	4091      	lsls	r1, r2
 8002e0e:	000a      	movs	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2221      	movs	r2, #33	; 0x21
 8002e16:	2101      	movs	r1, #1
 8002e18:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	2100      	movs	r1, #0
 8002e20:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d004      	beq.n	8002e34 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	0010      	movs	r0, r2
 8002e32:	4798      	blx	r3
    } 
  }
  return status;
 8002e34:	230f      	movs	r3, #15
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	781b      	ldrb	r3, [r3, #0]
}
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b004      	add	sp, #16
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b084      	sub	sp, #16
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	2204      	movs	r2, #4
 8002e60:	409a      	lsls	r2, r3
 8002e62:	0013      	movs	r3, r2
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4013      	ands	r3, r2
 8002e68:	d024      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x72>
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d020      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d107      	bne.n	8002e8e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2104      	movs	r1, #4
 8002e8a:	438a      	bics	r2, r1
 8002e8c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	2104      	movs	r1, #4
 8002e98:	4091      	lsls	r1, r2
 8002e9a:	000a      	movs	r2, r1
 8002e9c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d100      	bne.n	8002ea8 <HAL_DMA_IRQHandler+0x66>
 8002ea6:	e06a      	b.n	8002f7e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	0010      	movs	r0, r2
 8002eb0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002eb2:	e064      	b.n	8002f7e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	2202      	movs	r2, #2
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	0013      	movs	r3, r2
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d02b      	beq.n	8002f1c <HAL_DMA_IRQHandler+0xda>
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d027      	beq.n	8002f1c <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d10b      	bne.n	8002ef0 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	210a      	movs	r1, #10
 8002ee4:	438a      	bics	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2221      	movs	r2, #33	; 0x21
 8002eec:	2101      	movs	r1, #1
 8002eee:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef8:	2102      	movs	r1, #2
 8002efa:	4091      	lsls	r1, r2
 8002efc:	000a      	movs	r2, r1
 8002efe:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	2100      	movs	r1, #0
 8002f06:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d036      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	0010      	movs	r0, r2
 8002f18:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002f1a:	e030      	b.n	8002f7e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	2208      	movs	r2, #8
 8002f22:	409a      	lsls	r2, r3
 8002f24:	0013      	movs	r3, r2
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d028      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x13c>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2208      	movs	r2, #8
 8002f30:	4013      	ands	r3, r2
 8002f32:	d024      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	210e      	movs	r1, #14
 8002f40:	438a      	bics	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	4091      	lsls	r1, r2
 8002f50:	000a      	movs	r2, r1
 8002f52:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2221      	movs	r2, #33	; 0x21
 8002f5e:	2101      	movs	r1, #1
 8002f60:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	2100      	movs	r1, #0
 8002f68:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d005      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	0010      	movs	r0, r2
 8002f7a:	4798      	blx	r3
    }
   }
}  
 8002f7c:	e7ff      	b.n	8002f7e <HAL_DMA_IRQHandler+0x13c>
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b004      	add	sp, #16
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	001a      	movs	r2, r3
 8002f96:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <DMA_CalcBaseAndBitshift+0x60>)
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d810      	bhi.n	8002fbe <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a12      	ldr	r2, [pc, #72]	; (8002fec <DMA_CalcBaseAndBitshift+0x64>)
 8002fa2:	4694      	mov	ip, r2
 8002fa4:	4463      	add	r3, ip
 8002fa6:	2114      	movs	r1, #20
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f7fd f8c7 	bl	800013c <__udivsi3>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	009a      	lsls	r2, r3, #2
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a0d      	ldr	r2, [pc, #52]	; (8002ff0 <DMA_CalcBaseAndBitshift+0x68>)
 8002fba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002fbc:	e00f      	b.n	8002fde <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a0c      	ldr	r2, [pc, #48]	; (8002ff4 <DMA_CalcBaseAndBitshift+0x6c>)
 8002fc4:	4694      	mov	ip, r2
 8002fc6:	4463      	add	r3, ip
 8002fc8:	2114      	movs	r1, #20
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f7fd f8b6 	bl	800013c <__udivsi3>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	009a      	lsls	r2, r3, #2
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a07      	ldr	r2, [pc, #28]	; (8002ff8 <DMA_CalcBaseAndBitshift+0x70>)
 8002fdc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	b002      	add	sp, #8
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	40020407 	.word	0x40020407
 8002fec:	bffdfff8 	.word	0xbffdfff8
 8002ff0:	40020000 	.word	0x40020000
 8002ff4:	bffdfbf8 	.word	0xbffdfbf8
 8002ff8:	40020400 	.word	0x40020400

08002ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800300a:	e155      	b.n	80032b8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2101      	movs	r1, #1
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4091      	lsls	r1, r2
 8003016:	000a      	movs	r2, r1
 8003018:	4013      	ands	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d100      	bne.n	8003024 <HAL_GPIO_Init+0x28>
 8003022:	e146      	b.n	80032b2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2203      	movs	r2, #3
 800302a:	4013      	ands	r3, r2
 800302c:	2b01      	cmp	r3, #1
 800302e:	d005      	beq.n	800303c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2203      	movs	r2, #3
 8003036:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003038:	2b02      	cmp	r3, #2
 800303a:	d130      	bne.n	800309e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	2203      	movs	r2, #3
 8003048:	409a      	lsls	r2, r3
 800304a:	0013      	movs	r3, r2
 800304c:	43da      	mvns	r2, r3
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	4013      	ands	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	409a      	lsls	r2, r3
 800305e:	0013      	movs	r3, r2
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003072:	2201      	movs	r2, #1
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	409a      	lsls	r2, r3
 8003078:	0013      	movs	r3, r2
 800307a:	43da      	mvns	r2, r3
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4013      	ands	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	091b      	lsrs	r3, r3, #4
 8003088:	2201      	movs	r2, #1
 800308a:	401a      	ands	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	409a      	lsls	r2, r3
 8003090:	0013      	movs	r3, r2
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2203      	movs	r2, #3
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d017      	beq.n	80030da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	2203      	movs	r2, #3
 80030b6:	409a      	lsls	r2, r3
 80030b8:	0013      	movs	r3, r2
 80030ba:	43da      	mvns	r2, r3
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4013      	ands	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	409a      	lsls	r2, r3
 80030cc:	0013      	movs	r3, r2
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2203      	movs	r2, #3
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d123      	bne.n	800312e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	08da      	lsrs	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3208      	adds	r2, #8
 80030ee:	0092      	lsls	r2, r2, #2
 80030f0:	58d3      	ldr	r3, [r2, r3]
 80030f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2207      	movs	r2, #7
 80030f8:	4013      	ands	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	220f      	movs	r2, #15
 80030fe:	409a      	lsls	r2, r3
 8003100:	0013      	movs	r3, r2
 8003102:	43da      	mvns	r2, r3
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	691a      	ldr	r2, [r3, #16]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2107      	movs	r1, #7
 8003112:	400b      	ands	r3, r1
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	409a      	lsls	r2, r3
 8003118:	0013      	movs	r3, r2
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	08da      	lsrs	r2, r3, #3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3208      	adds	r2, #8
 8003128:	0092      	lsls	r2, r2, #2
 800312a:	6939      	ldr	r1, [r7, #16]
 800312c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	2203      	movs	r2, #3
 800313a:	409a      	lsls	r2, r3
 800313c:	0013      	movs	r3, r2
 800313e:	43da      	mvns	r2, r3
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4013      	ands	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2203      	movs	r2, #3
 800314c:	401a      	ands	r2, r3
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	409a      	lsls	r2, r3
 8003154:	0013      	movs	r3, r2
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	23c0      	movs	r3, #192	; 0xc0
 8003168:	029b      	lsls	r3, r3, #10
 800316a:	4013      	ands	r3, r2
 800316c:	d100      	bne.n	8003170 <HAL_GPIO_Init+0x174>
 800316e:	e0a0      	b.n	80032b2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003170:	4b57      	ldr	r3, [pc, #348]	; (80032d0 <HAL_GPIO_Init+0x2d4>)
 8003172:	699a      	ldr	r2, [r3, #24]
 8003174:	4b56      	ldr	r3, [pc, #344]	; (80032d0 <HAL_GPIO_Init+0x2d4>)
 8003176:	2101      	movs	r1, #1
 8003178:	430a      	orrs	r2, r1
 800317a:	619a      	str	r2, [r3, #24]
 800317c:	4b54      	ldr	r3, [pc, #336]	; (80032d0 <HAL_GPIO_Init+0x2d4>)
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	2201      	movs	r2, #1
 8003182:	4013      	ands	r3, r2
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003188:	4a52      	ldr	r2, [pc, #328]	; (80032d4 <HAL_GPIO_Init+0x2d8>)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	089b      	lsrs	r3, r3, #2
 800318e:	3302      	adds	r3, #2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	589b      	ldr	r3, [r3, r2]
 8003194:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2203      	movs	r2, #3
 800319a:	4013      	ands	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	220f      	movs	r2, #15
 80031a0:	409a      	lsls	r2, r3
 80031a2:	0013      	movs	r3, r2
 80031a4:	43da      	mvns	r2, r3
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	2390      	movs	r3, #144	; 0x90
 80031b0:	05db      	lsls	r3, r3, #23
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d019      	beq.n	80031ea <HAL_GPIO_Init+0x1ee>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a47      	ldr	r2, [pc, #284]	; (80032d8 <HAL_GPIO_Init+0x2dc>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <HAL_GPIO_Init+0x1ea>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a46      	ldr	r2, [pc, #280]	; (80032dc <HAL_GPIO_Init+0x2e0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00d      	beq.n	80031e2 <HAL_GPIO_Init+0x1e6>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a45      	ldr	r2, [pc, #276]	; (80032e0 <HAL_GPIO_Init+0x2e4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d007      	beq.n	80031de <HAL_GPIO_Init+0x1e2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a44      	ldr	r2, [pc, #272]	; (80032e4 <HAL_GPIO_Init+0x2e8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d101      	bne.n	80031da <HAL_GPIO_Init+0x1de>
 80031d6:	2304      	movs	r3, #4
 80031d8:	e008      	b.n	80031ec <HAL_GPIO_Init+0x1f0>
 80031da:	2305      	movs	r3, #5
 80031dc:	e006      	b.n	80031ec <HAL_GPIO_Init+0x1f0>
 80031de:	2303      	movs	r3, #3
 80031e0:	e004      	b.n	80031ec <HAL_GPIO_Init+0x1f0>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e002      	b.n	80031ec <HAL_GPIO_Init+0x1f0>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <HAL_GPIO_Init+0x1f0>
 80031ea:	2300      	movs	r3, #0
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	2103      	movs	r1, #3
 80031f0:	400a      	ands	r2, r1
 80031f2:	0092      	lsls	r2, r2, #2
 80031f4:	4093      	lsls	r3, r2
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031fc:	4935      	ldr	r1, [pc, #212]	; (80032d4 <HAL_GPIO_Init+0x2d8>)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	089b      	lsrs	r3, r3, #2
 8003202:	3302      	adds	r3, #2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800320a:	4b37      	ldr	r3, [pc, #220]	; (80032e8 <HAL_GPIO_Init+0x2ec>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	43da      	mvns	r2, r3
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4013      	ands	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	025b      	lsls	r3, r3, #9
 8003222:	4013      	ands	r3, r2
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800322e:	4b2e      	ldr	r3, [pc, #184]	; (80032e8 <HAL_GPIO_Init+0x2ec>)
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003234:	4b2c      	ldr	r3, [pc, #176]	; (80032e8 <HAL_GPIO_Init+0x2ec>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	43da      	mvns	r2, r3
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4013      	ands	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	029b      	lsls	r3, r3, #10
 800324c:	4013      	ands	r3, r2
 800324e:	d003      	beq.n	8003258 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003258:	4b23      	ldr	r3, [pc, #140]	; (80032e8 <HAL_GPIO_Init+0x2ec>)
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800325e:	4b22      	ldr	r3, [pc, #136]	; (80032e8 <HAL_GPIO_Init+0x2ec>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	43da      	mvns	r2, r3
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	2380      	movs	r3, #128	; 0x80
 8003274:	035b      	lsls	r3, r3, #13
 8003276:	4013      	ands	r3, r2
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003282:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <HAL_GPIO_Init+0x2ec>)
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003288:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <HAL_GPIO_Init+0x2ec>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	43da      	mvns	r2, r3
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4013      	ands	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	039b      	lsls	r3, r3, #14
 80032a0:	4013      	ands	r3, r2
 80032a2:	d003      	beq.n	80032ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80032ac:	4b0e      	ldr	r3, [pc, #56]	; (80032e8 <HAL_GPIO_Init+0x2ec>)
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	3301      	adds	r3, #1
 80032b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	40da      	lsrs	r2, r3
 80032c0:	1e13      	subs	r3, r2, #0
 80032c2:	d000      	beq.n	80032c6 <HAL_GPIO_Init+0x2ca>
 80032c4:	e6a2      	b.n	800300c <HAL_GPIO_Init+0x10>
  } 
}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	46c0      	nop			; (mov r8, r8)
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b006      	add	sp, #24
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40010000 	.word	0x40010000
 80032d8:	48000400 	.word	0x48000400
 80032dc:	48000800 	.word	0x48000800
 80032e0:	48000c00 	.word	0x48000c00
 80032e4:	48001000 	.word	0x48001000
 80032e8:	40010400 	.word	0x40010400

080032ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	0008      	movs	r0, r1
 80032f6:	0011      	movs	r1, r2
 80032f8:	1cbb      	adds	r3, r7, #2
 80032fa:	1c02      	adds	r2, r0, #0
 80032fc:	801a      	strh	r2, [r3, #0]
 80032fe:	1c7b      	adds	r3, r7, #1
 8003300:	1c0a      	adds	r2, r1, #0
 8003302:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003304:	1c7b      	adds	r3, r7, #1
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d004      	beq.n	8003316 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800330c:	1cbb      	adds	r3, r7, #2
 800330e:	881a      	ldrh	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003314:	e003      	b.n	800331e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003316:	1cbb      	adds	r3, r7, #2
 8003318:	881a      	ldrh	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	46bd      	mov	sp, r7
 8003322:	b002      	add	sp, #8
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d102      	bne.n	800333c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	f000 fb76 	bl	8003a28 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2201      	movs	r2, #1
 8003342:	4013      	ands	r3, r2
 8003344:	d100      	bne.n	8003348 <HAL_RCC_OscConfig+0x20>
 8003346:	e08e      	b.n	8003466 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003348:	4bc5      	ldr	r3, [pc, #788]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	220c      	movs	r2, #12
 800334e:	4013      	ands	r3, r2
 8003350:	2b04      	cmp	r3, #4
 8003352:	d00e      	beq.n	8003372 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003354:	4bc2      	ldr	r3, [pc, #776]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	220c      	movs	r2, #12
 800335a:	4013      	ands	r3, r2
 800335c:	2b08      	cmp	r3, #8
 800335e:	d117      	bne.n	8003390 <HAL_RCC_OscConfig+0x68>
 8003360:	4bbf      	ldr	r3, [pc, #764]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	23c0      	movs	r3, #192	; 0xc0
 8003366:	025b      	lsls	r3, r3, #9
 8003368:	401a      	ands	r2, r3
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	025b      	lsls	r3, r3, #9
 800336e:	429a      	cmp	r2, r3
 8003370:	d10e      	bne.n	8003390 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003372:	4bbb      	ldr	r3, [pc, #748]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	029b      	lsls	r3, r3, #10
 800337a:	4013      	ands	r3, r2
 800337c:	d100      	bne.n	8003380 <HAL_RCC_OscConfig+0x58>
 800337e:	e071      	b.n	8003464 <HAL_RCC_OscConfig+0x13c>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d000      	beq.n	800338a <HAL_RCC_OscConfig+0x62>
 8003388:	e06c      	b.n	8003464 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	f000 fb4c 	bl	8003a28 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d107      	bne.n	80033a8 <HAL_RCC_OscConfig+0x80>
 8003398:	4bb1      	ldr	r3, [pc, #708]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4bb0      	ldr	r3, [pc, #704]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 800339e:	2180      	movs	r1, #128	; 0x80
 80033a0:	0249      	lsls	r1, r1, #9
 80033a2:	430a      	orrs	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	e02f      	b.n	8003408 <HAL_RCC_OscConfig+0xe0>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10c      	bne.n	80033ca <HAL_RCC_OscConfig+0xa2>
 80033b0:	4bab      	ldr	r3, [pc, #684]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4baa      	ldr	r3, [pc, #680]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 80033b6:	49ab      	ldr	r1, [pc, #684]	; (8003664 <HAL_RCC_OscConfig+0x33c>)
 80033b8:	400a      	ands	r2, r1
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	4ba8      	ldr	r3, [pc, #672]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4ba7      	ldr	r3, [pc, #668]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 80033c2:	49a9      	ldr	r1, [pc, #676]	; (8003668 <HAL_RCC_OscConfig+0x340>)
 80033c4:	400a      	ands	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	e01e      	b.n	8003408 <HAL_RCC_OscConfig+0xe0>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b05      	cmp	r3, #5
 80033d0:	d10e      	bne.n	80033f0 <HAL_RCC_OscConfig+0xc8>
 80033d2:	4ba3      	ldr	r3, [pc, #652]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	4ba2      	ldr	r3, [pc, #648]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 80033d8:	2180      	movs	r1, #128	; 0x80
 80033da:	02c9      	lsls	r1, r1, #11
 80033dc:	430a      	orrs	r2, r1
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	4b9f      	ldr	r3, [pc, #636]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	4b9e      	ldr	r3, [pc, #632]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 80033e6:	2180      	movs	r1, #128	; 0x80
 80033e8:	0249      	lsls	r1, r1, #9
 80033ea:	430a      	orrs	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	e00b      	b.n	8003408 <HAL_RCC_OscConfig+0xe0>
 80033f0:	4b9b      	ldr	r3, [pc, #620]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4b9a      	ldr	r3, [pc, #616]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 80033f6:	499b      	ldr	r1, [pc, #620]	; (8003664 <HAL_RCC_OscConfig+0x33c>)
 80033f8:	400a      	ands	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	4b98      	ldr	r3, [pc, #608]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4b97      	ldr	r3, [pc, #604]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 8003402:	4999      	ldr	r1, [pc, #612]	; (8003668 <HAL_RCC_OscConfig+0x340>)
 8003404:	400a      	ands	r2, r1
 8003406:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d014      	beq.n	800343a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003410:	f7ff fb6a 	bl	8002ae8 <HAL_GetTick>
 8003414:	0003      	movs	r3, r0
 8003416:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800341a:	f7ff fb65 	bl	8002ae8 <HAL_GetTick>
 800341e:	0002      	movs	r2, r0
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b64      	cmp	r3, #100	; 0x64
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e2fd      	b.n	8003a28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342c:	4b8c      	ldr	r3, [pc, #560]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	029b      	lsls	r3, r3, #10
 8003434:	4013      	ands	r3, r2
 8003436:	d0f0      	beq.n	800341a <HAL_RCC_OscConfig+0xf2>
 8003438:	e015      	b.n	8003466 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343a:	f7ff fb55 	bl	8002ae8 <HAL_GetTick>
 800343e:	0003      	movs	r3, r0
 8003440:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003444:	f7ff fb50 	bl	8002ae8 <HAL_GetTick>
 8003448:	0002      	movs	r2, r0
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b64      	cmp	r3, #100	; 0x64
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e2e8      	b.n	8003a28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003456:	4b82      	ldr	r3, [pc, #520]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	2380      	movs	r3, #128	; 0x80
 800345c:	029b      	lsls	r3, r3, #10
 800345e:	4013      	ands	r3, r2
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x11c>
 8003462:	e000      	b.n	8003466 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003464:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2202      	movs	r2, #2
 800346c:	4013      	ands	r3, r2
 800346e:	d100      	bne.n	8003472 <HAL_RCC_OscConfig+0x14a>
 8003470:	e06c      	b.n	800354c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003472:	4b7b      	ldr	r3, [pc, #492]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	220c      	movs	r2, #12
 8003478:	4013      	ands	r3, r2
 800347a:	d00e      	beq.n	800349a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800347c:	4b78      	ldr	r3, [pc, #480]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	220c      	movs	r2, #12
 8003482:	4013      	ands	r3, r2
 8003484:	2b08      	cmp	r3, #8
 8003486:	d11f      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1a0>
 8003488:	4b75      	ldr	r3, [pc, #468]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	23c0      	movs	r3, #192	; 0xc0
 800348e:	025b      	lsls	r3, r3, #9
 8003490:	401a      	ands	r2, r3
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	021b      	lsls	r3, r3, #8
 8003496:	429a      	cmp	r2, r3
 8003498:	d116      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349a:	4b71      	ldr	r3, [pc, #452]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2202      	movs	r2, #2
 80034a0:	4013      	ands	r3, r2
 80034a2:	d005      	beq.n	80034b0 <HAL_RCC_OscConfig+0x188>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e2bb      	b.n	8003a28 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b0:	4b6b      	ldr	r3, [pc, #428]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	22f8      	movs	r2, #248	; 0xf8
 80034b6:	4393      	bics	r3, r2
 80034b8:	0019      	movs	r1, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	00da      	lsls	r2, r3, #3
 80034c0:	4b67      	ldr	r3, [pc, #412]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 80034c2:	430a      	orrs	r2, r1
 80034c4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c6:	e041      	b.n	800354c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d024      	beq.n	800351a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d0:	4b63      	ldr	r3, [pc, #396]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4b62      	ldr	r3, [pc, #392]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 80034d6:	2101      	movs	r1, #1
 80034d8:	430a      	orrs	r2, r1
 80034da:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034dc:	f7ff fb04 	bl	8002ae8 <HAL_GetTick>
 80034e0:	0003      	movs	r3, r0
 80034e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e6:	f7ff faff 	bl	8002ae8 <HAL_GetTick>
 80034ea:	0002      	movs	r2, r0
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e297      	b.n	8003a28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f8:	4b59      	ldr	r3, [pc, #356]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2202      	movs	r2, #2
 80034fe:	4013      	ands	r3, r2
 8003500:	d0f1      	beq.n	80034e6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003502:	4b57      	ldr	r3, [pc, #348]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	22f8      	movs	r2, #248	; 0xf8
 8003508:	4393      	bics	r3, r2
 800350a:	0019      	movs	r1, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	00da      	lsls	r2, r3, #3
 8003512:	4b53      	ldr	r3, [pc, #332]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 8003514:	430a      	orrs	r2, r1
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	e018      	b.n	800354c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800351a:	4b51      	ldr	r3, [pc, #324]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4b50      	ldr	r3, [pc, #320]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 8003520:	2101      	movs	r1, #1
 8003522:	438a      	bics	r2, r1
 8003524:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003526:	f7ff fadf 	bl	8002ae8 <HAL_GetTick>
 800352a:	0003      	movs	r3, r0
 800352c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003530:	f7ff fada 	bl	8002ae8 <HAL_GetTick>
 8003534:	0002      	movs	r2, r0
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e272      	b.n	8003a28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003542:	4b47      	ldr	r3, [pc, #284]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2202      	movs	r2, #2
 8003548:	4013      	ands	r3, r2
 800354a:	d1f1      	bne.n	8003530 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2208      	movs	r2, #8
 8003552:	4013      	ands	r3, r2
 8003554:	d036      	beq.n	80035c4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d019      	beq.n	8003592 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800355e:	4b40      	ldr	r3, [pc, #256]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 8003560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003562:	4b3f      	ldr	r3, [pc, #252]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 8003564:	2101      	movs	r1, #1
 8003566:	430a      	orrs	r2, r1
 8003568:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356a:	f7ff fabd 	bl	8002ae8 <HAL_GetTick>
 800356e:	0003      	movs	r3, r0
 8003570:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003574:	f7ff fab8 	bl	8002ae8 <HAL_GetTick>
 8003578:	0002      	movs	r2, r0
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e250      	b.n	8003a28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003586:	4b36      	ldr	r3, [pc, #216]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	2202      	movs	r2, #2
 800358c:	4013      	ands	r3, r2
 800358e:	d0f1      	beq.n	8003574 <HAL_RCC_OscConfig+0x24c>
 8003590:	e018      	b.n	80035c4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003592:	4b33      	ldr	r3, [pc, #204]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 8003594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003596:	4b32      	ldr	r3, [pc, #200]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 8003598:	2101      	movs	r1, #1
 800359a:	438a      	bics	r2, r1
 800359c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359e:	f7ff faa3 	bl	8002ae8 <HAL_GetTick>
 80035a2:	0003      	movs	r3, r0
 80035a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a8:	f7ff fa9e 	bl	8002ae8 <HAL_GetTick>
 80035ac:	0002      	movs	r2, r0
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e236      	b.n	8003a28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ba:	4b29      	ldr	r3, [pc, #164]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	2202      	movs	r2, #2
 80035c0:	4013      	ands	r3, r2
 80035c2:	d1f1      	bne.n	80035a8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2204      	movs	r2, #4
 80035ca:	4013      	ands	r3, r2
 80035cc:	d100      	bne.n	80035d0 <HAL_RCC_OscConfig+0x2a8>
 80035ce:	e0b5      	b.n	800373c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d0:	201f      	movs	r0, #31
 80035d2:	183b      	adds	r3, r7, r0
 80035d4:	2200      	movs	r2, #0
 80035d6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d8:	4b21      	ldr	r3, [pc, #132]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 80035da:	69da      	ldr	r2, [r3, #28]
 80035dc:	2380      	movs	r3, #128	; 0x80
 80035de:	055b      	lsls	r3, r3, #21
 80035e0:	4013      	ands	r3, r2
 80035e2:	d110      	bne.n	8003606 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e4:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 80035ea:	2180      	movs	r1, #128	; 0x80
 80035ec:	0549      	lsls	r1, r1, #21
 80035ee:	430a      	orrs	r2, r1
 80035f0:	61da      	str	r2, [r3, #28]
 80035f2:	4b1b      	ldr	r3, [pc, #108]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 80035f4:	69da      	ldr	r2, [r3, #28]
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	055b      	lsls	r3, r3, #21
 80035fa:	4013      	ands	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003600:	183b      	adds	r3, r7, r0
 8003602:	2201      	movs	r2, #1
 8003604:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003606:	4b19      	ldr	r3, [pc, #100]	; (800366c <HAL_RCC_OscConfig+0x344>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	4013      	ands	r3, r2
 8003610:	d11a      	bne.n	8003648 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003612:	4b16      	ldr	r3, [pc, #88]	; (800366c <HAL_RCC_OscConfig+0x344>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4b15      	ldr	r3, [pc, #84]	; (800366c <HAL_RCC_OscConfig+0x344>)
 8003618:	2180      	movs	r1, #128	; 0x80
 800361a:	0049      	lsls	r1, r1, #1
 800361c:	430a      	orrs	r2, r1
 800361e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003620:	f7ff fa62 	bl	8002ae8 <HAL_GetTick>
 8003624:	0003      	movs	r3, r0
 8003626:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362a:	f7ff fa5d 	bl	8002ae8 <HAL_GetTick>
 800362e:	0002      	movs	r2, r0
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b64      	cmp	r3, #100	; 0x64
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e1f5      	b.n	8003a28 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_OscConfig+0x344>)
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	2380      	movs	r3, #128	; 0x80
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4013      	ands	r3, r2
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d10f      	bne.n	8003670 <HAL_RCC_OscConfig+0x348>
 8003650:	4b03      	ldr	r3, [pc, #12]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 8003652:	6a1a      	ldr	r2, [r3, #32]
 8003654:	4b02      	ldr	r3, [pc, #8]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 8003656:	2101      	movs	r1, #1
 8003658:	430a      	orrs	r2, r1
 800365a:	621a      	str	r2, [r3, #32]
 800365c:	e036      	b.n	80036cc <HAL_RCC_OscConfig+0x3a4>
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	40021000 	.word	0x40021000
 8003664:	fffeffff 	.word	0xfffeffff
 8003668:	fffbffff 	.word	0xfffbffff
 800366c:	40007000 	.word	0x40007000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10c      	bne.n	8003692 <HAL_RCC_OscConfig+0x36a>
 8003678:	4bca      	ldr	r3, [pc, #808]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 800367a:	6a1a      	ldr	r2, [r3, #32]
 800367c:	4bc9      	ldr	r3, [pc, #804]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 800367e:	2101      	movs	r1, #1
 8003680:	438a      	bics	r2, r1
 8003682:	621a      	str	r2, [r3, #32]
 8003684:	4bc7      	ldr	r3, [pc, #796]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 8003686:	6a1a      	ldr	r2, [r3, #32]
 8003688:	4bc6      	ldr	r3, [pc, #792]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 800368a:	2104      	movs	r1, #4
 800368c:	438a      	bics	r2, r1
 800368e:	621a      	str	r2, [r3, #32]
 8003690:	e01c      	b.n	80036cc <HAL_RCC_OscConfig+0x3a4>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b05      	cmp	r3, #5
 8003698:	d10c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x38c>
 800369a:	4bc2      	ldr	r3, [pc, #776]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 800369c:	6a1a      	ldr	r2, [r3, #32]
 800369e:	4bc1      	ldr	r3, [pc, #772]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 80036a0:	2104      	movs	r1, #4
 80036a2:	430a      	orrs	r2, r1
 80036a4:	621a      	str	r2, [r3, #32]
 80036a6:	4bbf      	ldr	r3, [pc, #764]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 80036a8:	6a1a      	ldr	r2, [r3, #32]
 80036aa:	4bbe      	ldr	r3, [pc, #760]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 80036ac:	2101      	movs	r1, #1
 80036ae:	430a      	orrs	r2, r1
 80036b0:	621a      	str	r2, [r3, #32]
 80036b2:	e00b      	b.n	80036cc <HAL_RCC_OscConfig+0x3a4>
 80036b4:	4bbb      	ldr	r3, [pc, #748]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 80036b6:	6a1a      	ldr	r2, [r3, #32]
 80036b8:	4bba      	ldr	r3, [pc, #744]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 80036ba:	2101      	movs	r1, #1
 80036bc:	438a      	bics	r2, r1
 80036be:	621a      	str	r2, [r3, #32]
 80036c0:	4bb8      	ldr	r3, [pc, #736]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 80036c2:	6a1a      	ldr	r2, [r3, #32]
 80036c4:	4bb7      	ldr	r3, [pc, #732]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 80036c6:	2104      	movs	r1, #4
 80036c8:	438a      	bics	r2, r1
 80036ca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d014      	beq.n	80036fe <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d4:	f7ff fa08 	bl	8002ae8 <HAL_GetTick>
 80036d8:	0003      	movs	r3, r0
 80036da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036dc:	e009      	b.n	80036f2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036de:	f7ff fa03 	bl	8002ae8 <HAL_GetTick>
 80036e2:	0002      	movs	r2, r0
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	4aaf      	ldr	r2, [pc, #700]	; (80039a8 <HAL_RCC_OscConfig+0x680>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e19a      	b.n	8003a28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f2:	4bac      	ldr	r3, [pc, #688]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	2202      	movs	r2, #2
 80036f8:	4013      	ands	r3, r2
 80036fa:	d0f0      	beq.n	80036de <HAL_RCC_OscConfig+0x3b6>
 80036fc:	e013      	b.n	8003726 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fe:	f7ff f9f3 	bl	8002ae8 <HAL_GetTick>
 8003702:	0003      	movs	r3, r0
 8003704:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003706:	e009      	b.n	800371c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003708:	f7ff f9ee 	bl	8002ae8 <HAL_GetTick>
 800370c:	0002      	movs	r2, r0
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	4aa5      	ldr	r2, [pc, #660]	; (80039a8 <HAL_RCC_OscConfig+0x680>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e185      	b.n	8003a28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371c:	4ba1      	ldr	r3, [pc, #644]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	2202      	movs	r2, #2
 8003722:	4013      	ands	r3, r2
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003726:	231f      	movs	r3, #31
 8003728:	18fb      	adds	r3, r7, r3
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d105      	bne.n	800373c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003730:	4b9c      	ldr	r3, [pc, #624]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 8003732:	69da      	ldr	r2, [r3, #28]
 8003734:	4b9b      	ldr	r3, [pc, #620]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 8003736:	499d      	ldr	r1, [pc, #628]	; (80039ac <HAL_RCC_OscConfig+0x684>)
 8003738:	400a      	ands	r2, r1
 800373a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2210      	movs	r2, #16
 8003742:	4013      	ands	r3, r2
 8003744:	d063      	beq.n	800380e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d12a      	bne.n	80037a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800374e:	4b95      	ldr	r3, [pc, #596]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 8003750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003752:	4b94      	ldr	r3, [pc, #592]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 8003754:	2104      	movs	r1, #4
 8003756:	430a      	orrs	r2, r1
 8003758:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800375a:	4b92      	ldr	r3, [pc, #584]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 800375c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800375e:	4b91      	ldr	r3, [pc, #580]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 8003760:	2101      	movs	r1, #1
 8003762:	430a      	orrs	r2, r1
 8003764:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003766:	f7ff f9bf 	bl	8002ae8 <HAL_GetTick>
 800376a:	0003      	movs	r3, r0
 800376c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003770:	f7ff f9ba 	bl	8002ae8 <HAL_GetTick>
 8003774:	0002      	movs	r2, r0
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e152      	b.n	8003a28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003782:	4b88      	ldr	r3, [pc, #544]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 8003784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003786:	2202      	movs	r2, #2
 8003788:	4013      	ands	r3, r2
 800378a:	d0f1      	beq.n	8003770 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800378c:	4b85      	ldr	r3, [pc, #532]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 800378e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003790:	22f8      	movs	r2, #248	; 0xf8
 8003792:	4393      	bics	r3, r2
 8003794:	0019      	movs	r1, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	00da      	lsls	r2, r3, #3
 800379c:	4b81      	ldr	r3, [pc, #516]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 800379e:	430a      	orrs	r2, r1
 80037a0:	635a      	str	r2, [r3, #52]	; 0x34
 80037a2:	e034      	b.n	800380e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	3305      	adds	r3, #5
 80037aa:	d111      	bne.n	80037d0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80037ac:	4b7d      	ldr	r3, [pc, #500]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 80037ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037b0:	4b7c      	ldr	r3, [pc, #496]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 80037b2:	2104      	movs	r1, #4
 80037b4:	438a      	bics	r2, r1
 80037b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80037b8:	4b7a      	ldr	r3, [pc, #488]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 80037ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037bc:	22f8      	movs	r2, #248	; 0xf8
 80037be:	4393      	bics	r3, r2
 80037c0:	0019      	movs	r1, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	00da      	lsls	r2, r3, #3
 80037c8:	4b76      	ldr	r3, [pc, #472]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 80037ca:	430a      	orrs	r2, r1
 80037cc:	635a      	str	r2, [r3, #52]	; 0x34
 80037ce:	e01e      	b.n	800380e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80037d0:	4b74      	ldr	r3, [pc, #464]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 80037d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037d4:	4b73      	ldr	r3, [pc, #460]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 80037d6:	2104      	movs	r1, #4
 80037d8:	430a      	orrs	r2, r1
 80037da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80037dc:	4b71      	ldr	r3, [pc, #452]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 80037de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037e0:	4b70      	ldr	r3, [pc, #448]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 80037e2:	2101      	movs	r1, #1
 80037e4:	438a      	bics	r2, r1
 80037e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e8:	f7ff f97e 	bl	8002ae8 <HAL_GetTick>
 80037ec:	0003      	movs	r3, r0
 80037ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80037f2:	f7ff f979 	bl	8002ae8 <HAL_GetTick>
 80037f6:	0002      	movs	r2, r0
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e111      	b.n	8003a28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003804:	4b67      	ldr	r3, [pc, #412]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 8003806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003808:	2202      	movs	r2, #2
 800380a:	4013      	ands	r3, r2
 800380c:	d1f1      	bne.n	80037f2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2220      	movs	r2, #32
 8003814:	4013      	ands	r3, r2
 8003816:	d05c      	beq.n	80038d2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003818:	4b62      	ldr	r3, [pc, #392]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	220c      	movs	r2, #12
 800381e:	4013      	ands	r3, r2
 8003820:	2b0c      	cmp	r3, #12
 8003822:	d00e      	beq.n	8003842 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003824:	4b5f      	ldr	r3, [pc, #380]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	220c      	movs	r2, #12
 800382a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800382c:	2b08      	cmp	r3, #8
 800382e:	d114      	bne.n	800385a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003830:	4b5c      	ldr	r3, [pc, #368]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	23c0      	movs	r3, #192	; 0xc0
 8003836:	025b      	lsls	r3, r3, #9
 8003838:	401a      	ands	r2, r3
 800383a:	23c0      	movs	r3, #192	; 0xc0
 800383c:	025b      	lsls	r3, r3, #9
 800383e:	429a      	cmp	r2, r3
 8003840:	d10b      	bne.n	800385a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003842:	4b58      	ldr	r3, [pc, #352]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 8003844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003846:	2380      	movs	r3, #128	; 0x80
 8003848:	025b      	lsls	r3, r3, #9
 800384a:	4013      	ands	r3, r2
 800384c:	d040      	beq.n	80038d0 <HAL_RCC_OscConfig+0x5a8>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d03c      	beq.n	80038d0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e0e6      	b.n	8003a28 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d01b      	beq.n	800389a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003862:	4b50      	ldr	r3, [pc, #320]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 8003864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003866:	4b4f      	ldr	r3, [pc, #316]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 8003868:	2180      	movs	r1, #128	; 0x80
 800386a:	0249      	lsls	r1, r1, #9
 800386c:	430a      	orrs	r2, r1
 800386e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7ff f93a 	bl	8002ae8 <HAL_GetTick>
 8003874:	0003      	movs	r3, r0
 8003876:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800387a:	f7ff f935 	bl	8002ae8 <HAL_GetTick>
 800387e:	0002      	movs	r2, r0
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e0cd      	b.n	8003a28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800388c:	4b45      	ldr	r3, [pc, #276]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 800388e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003890:	2380      	movs	r3, #128	; 0x80
 8003892:	025b      	lsls	r3, r3, #9
 8003894:	4013      	ands	r3, r2
 8003896:	d0f0      	beq.n	800387a <HAL_RCC_OscConfig+0x552>
 8003898:	e01b      	b.n	80038d2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800389a:	4b42      	ldr	r3, [pc, #264]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 800389c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800389e:	4b41      	ldr	r3, [pc, #260]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 80038a0:	4943      	ldr	r1, [pc, #268]	; (80039b0 <HAL_RCC_OscConfig+0x688>)
 80038a2:	400a      	ands	r2, r1
 80038a4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a6:	f7ff f91f 	bl	8002ae8 <HAL_GetTick>
 80038aa:	0003      	movs	r3, r0
 80038ac:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038b0:	f7ff f91a 	bl	8002ae8 <HAL_GetTick>
 80038b4:	0002      	movs	r2, r0
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e0b2      	b.n	8003a28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80038c2:	4b38      	ldr	r3, [pc, #224]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 80038c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c6:	2380      	movs	r3, #128	; 0x80
 80038c8:	025b      	lsls	r3, r3, #9
 80038ca:	4013      	ands	r3, r2
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x588>
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80038d0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d100      	bne.n	80038dc <HAL_RCC_OscConfig+0x5b4>
 80038da:	e0a4      	b.n	8003a26 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038dc:	4b31      	ldr	r3, [pc, #196]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	220c      	movs	r2, #12
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d100      	bne.n	80038ea <HAL_RCC_OscConfig+0x5c2>
 80038e8:	e078      	b.n	80039dc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d14c      	bne.n	800398c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f2:	4b2c      	ldr	r3, [pc, #176]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4b2b      	ldr	r3, [pc, #172]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 80038f8:	492e      	ldr	r1, [pc, #184]	; (80039b4 <HAL_RCC_OscConfig+0x68c>)
 80038fa:	400a      	ands	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fe:	f7ff f8f3 	bl	8002ae8 <HAL_GetTick>
 8003902:	0003      	movs	r3, r0
 8003904:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003908:	f7ff f8ee 	bl	8002ae8 <HAL_GetTick>
 800390c:	0002      	movs	r2, r0
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e086      	b.n	8003a28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800391a:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	2380      	movs	r3, #128	; 0x80
 8003920:	049b      	lsls	r3, r3, #18
 8003922:	4013      	ands	r3, r2
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003926:	4b1f      	ldr	r3, [pc, #124]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	220f      	movs	r2, #15
 800392c:	4393      	bics	r3, r2
 800392e:	0019      	movs	r1, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003934:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 8003936:	430a      	orrs	r2, r1
 8003938:	62da      	str	r2, [r3, #44]	; 0x2c
 800393a:	4b1a      	ldr	r3, [pc, #104]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4a1e      	ldr	r2, [pc, #120]	; (80039b8 <HAL_RCC_OscConfig+0x690>)
 8003940:	4013      	ands	r3, r2
 8003942:	0019      	movs	r1, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394c:	431a      	orrs	r2, r3
 800394e:	4b15      	ldr	r3, [pc, #84]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 8003950:	430a      	orrs	r2, r1
 8003952:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003954:	4b13      	ldr	r3, [pc, #76]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 800395a:	2180      	movs	r1, #128	; 0x80
 800395c:	0449      	lsls	r1, r1, #17
 800395e:	430a      	orrs	r2, r1
 8003960:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003962:	f7ff f8c1 	bl	8002ae8 <HAL_GetTick>
 8003966:	0003      	movs	r3, r0
 8003968:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800396c:	f7ff f8bc 	bl	8002ae8 <HAL_GetTick>
 8003970:	0002      	movs	r2, r0
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e054      	b.n	8003a28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800397e:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	2380      	movs	r3, #128	; 0x80
 8003984:	049b      	lsls	r3, r3, #18
 8003986:	4013      	ands	r3, r2
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x644>
 800398a:	e04c      	b.n	8003a26 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398c:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <HAL_RCC_OscConfig+0x67c>)
 8003992:	4908      	ldr	r1, [pc, #32]	; (80039b4 <HAL_RCC_OscConfig+0x68c>)
 8003994:	400a      	ands	r2, r1
 8003996:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7ff f8a6 	bl	8002ae8 <HAL_GetTick>
 800399c:	0003      	movs	r3, r0
 800399e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a0:	e015      	b.n	80039ce <HAL_RCC_OscConfig+0x6a6>
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	40021000 	.word	0x40021000
 80039a8:	00001388 	.word	0x00001388
 80039ac:	efffffff 	.word	0xefffffff
 80039b0:	fffeffff 	.word	0xfffeffff
 80039b4:	feffffff 	.word	0xfeffffff
 80039b8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039bc:	f7ff f894 	bl	8002ae8 <HAL_GetTick>
 80039c0:	0002      	movs	r2, r0
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e02c      	b.n	8003a28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ce:	4b18      	ldr	r3, [pc, #96]	; (8003a30 <HAL_RCC_OscConfig+0x708>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	049b      	lsls	r3, r3, #18
 80039d6:	4013      	ands	r3, r2
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x694>
 80039da:	e024      	b.n	8003a26 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e01f      	b.n	8003a28 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80039e8:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <HAL_RCC_OscConfig+0x708>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80039ee:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <HAL_RCC_OscConfig+0x708>)
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	23c0      	movs	r3, #192	; 0xc0
 80039f8:	025b      	lsls	r3, r3, #9
 80039fa:	401a      	ands	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d10e      	bne.n	8003a22 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	220f      	movs	r2, #15
 8003a08:	401a      	ands	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d107      	bne.n	8003a22 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	23f0      	movs	r3, #240	; 0xf0
 8003a16:	039b      	lsls	r3, r3, #14
 8003a18:	401a      	ands	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d001      	beq.n	8003a26 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b008      	add	sp, #32
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40021000 	.word	0x40021000

08003a34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0bf      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a48:	4b61      	ldr	r3, [pc, #388]	; (8003bd0 <HAL_RCC_ClockConfig+0x19c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	4013      	ands	r3, r2
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d911      	bls.n	8003a7a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b5e      	ldr	r3, [pc, #376]	; (8003bd0 <HAL_RCC_ClockConfig+0x19c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	4393      	bics	r3, r2
 8003a5e:	0019      	movs	r1, r3
 8003a60:	4b5b      	ldr	r3, [pc, #364]	; (8003bd0 <HAL_RCC_ClockConfig+0x19c>)
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a68:	4b59      	ldr	r3, [pc, #356]	; (8003bd0 <HAL_RCC_ClockConfig+0x19c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	4013      	ands	r3, r2
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d001      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e0a6      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	4013      	ands	r3, r2
 8003a82:	d015      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2204      	movs	r2, #4
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d006      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003a8e:	4b51      	ldr	r3, [pc, #324]	; (8003bd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	4b50      	ldr	r3, [pc, #320]	; (8003bd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003a94:	21e0      	movs	r1, #224	; 0xe0
 8003a96:	00c9      	lsls	r1, r1, #3
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a9c:	4b4d      	ldr	r3, [pc, #308]	; (8003bd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	22f0      	movs	r2, #240	; 0xf0
 8003aa2:	4393      	bics	r3, r2
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	4b4a      	ldr	r3, [pc, #296]	; (8003bd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003aac:	430a      	orrs	r2, r1
 8003aae:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d04c      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d107      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac2:	4b44      	ldr	r3, [pc, #272]	; (8003bd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	2380      	movs	r3, #128	; 0x80
 8003ac8:	029b      	lsls	r3, r3, #10
 8003aca:	4013      	ands	r3, r2
 8003acc:	d120      	bne.n	8003b10 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e07a      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ada:	4b3e      	ldr	r3, [pc, #248]	; (8003bd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	049b      	lsls	r3, r3, #18
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d114      	bne.n	8003b10 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e06e      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d107      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003af2:	4b38      	ldr	r3, [pc, #224]	; (8003bd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003af6:	2380      	movs	r3, #128	; 0x80
 8003af8:	025b      	lsls	r3, r3, #9
 8003afa:	4013      	ands	r3, r2
 8003afc:	d108      	bne.n	8003b10 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e062      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b02:	4b34      	ldr	r3, [pc, #208]	; (8003bd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2202      	movs	r2, #2
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d101      	bne.n	8003b10 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e05b      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b10:	4b30      	ldr	r3, [pc, #192]	; (8003bd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2203      	movs	r2, #3
 8003b16:	4393      	bics	r3, r2
 8003b18:	0019      	movs	r1, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	4b2d      	ldr	r3, [pc, #180]	; (8003bd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003b20:	430a      	orrs	r2, r1
 8003b22:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b24:	f7fe ffe0 	bl	8002ae8 <HAL_GetTick>
 8003b28:	0003      	movs	r3, r0
 8003b2a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2c:	e009      	b.n	8003b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2e:	f7fe ffdb 	bl	8002ae8 <HAL_GetTick>
 8003b32:	0002      	movs	r2, r0
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	4a27      	ldr	r2, [pc, #156]	; (8003bd8 <HAL_RCC_ClockConfig+0x1a4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e042      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	4b24      	ldr	r3, [pc, #144]	; (8003bd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	220c      	movs	r2, #12
 8003b48:	401a      	ands	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d1ec      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b54:	4b1e      	ldr	r3, [pc, #120]	; (8003bd0 <HAL_RCC_ClockConfig+0x19c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d211      	bcs.n	8003b86 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b62:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <HAL_RCC_ClockConfig+0x19c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2201      	movs	r2, #1
 8003b68:	4393      	bics	r3, r2
 8003b6a:	0019      	movs	r1, r3
 8003b6c:	4b18      	ldr	r3, [pc, #96]	; (8003bd0 <HAL_RCC_ClockConfig+0x19c>)
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b74:	4b16      	ldr	r3, [pc, #88]	; (8003bd0 <HAL_RCC_ClockConfig+0x19c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d001      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e020      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d009      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003b90:	4b10      	ldr	r3, [pc, #64]	; (8003bd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	4a11      	ldr	r2, [pc, #68]	; (8003bdc <HAL_RCC_ClockConfig+0x1a8>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	0019      	movs	r1, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	; (8003bd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ba4:	f000 f820 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003ba8:	0001      	movs	r1, r0
 8003baa:	4b0a      	ldr	r3, [pc, #40]	; (8003bd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	091b      	lsrs	r3, r3, #4
 8003bb0:	220f      	movs	r2, #15
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	4a0a      	ldr	r2, [pc, #40]	; (8003be0 <HAL_RCC_ClockConfig+0x1ac>)
 8003bb6:	5cd3      	ldrb	r3, [r2, r3]
 8003bb8:	000a      	movs	r2, r1
 8003bba:	40da      	lsrs	r2, r3
 8003bbc:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <HAL_RCC_ClockConfig+0x1b0>)
 8003bbe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	f7fe ff4b 	bl	8002a5c <HAL_InitTick>
  
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	0018      	movs	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b004      	add	sp, #16
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40022000 	.word	0x40022000
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	00001388 	.word	0x00001388
 8003bdc:	fffff8ff 	.word	0xfffff8ff
 8003be0:	08009c78 	.word	0x08009c78
 8003be4:	20000008 	.word	0x20000008

08003be8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be8:	b590      	push	{r4, r7, lr}
 8003bea:	b08f      	sub	sp, #60	; 0x3c
 8003bec:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003bee:	2314      	movs	r3, #20
 8003bf0:	18fb      	adds	r3, r7, r3
 8003bf2:	4a38      	ldr	r2, [pc, #224]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xec>)
 8003bf4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003bf6:	c313      	stmia	r3!, {r0, r1, r4}
 8003bf8:	6812      	ldr	r2, [r2, #0]
 8003bfa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003bfc:	1d3b      	adds	r3, r7, #4
 8003bfe:	4a36      	ldr	r2, [pc, #216]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003c00:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003c02:	c313      	stmia	r3!, {r0, r1, r4}
 8003c04:	6812      	ldr	r2, [r2, #0]
 8003c06:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c10:	2300      	movs	r3, #0
 8003c12:	637b      	str	r3, [r7, #52]	; 0x34
 8003c14:	2300      	movs	r3, #0
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003c1c:	4b2f      	ldr	r3, [pc, #188]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xf4>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c24:	220c      	movs	r2, #12
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b0c      	cmp	r3, #12
 8003c2a:	d047      	beq.n	8003cbc <HAL_RCC_GetSysClockFreq+0xd4>
 8003c2c:	d849      	bhi.n	8003cc2 <HAL_RCC_GetSysClockFreq+0xda>
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d002      	beq.n	8003c38 <HAL_RCC_GetSysClockFreq+0x50>
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d003      	beq.n	8003c3e <HAL_RCC_GetSysClockFreq+0x56>
 8003c36:	e044      	b.n	8003cc2 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c38:	4b29      	ldr	r3, [pc, #164]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c3a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003c3c:	e044      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c40:	0c9b      	lsrs	r3, r3, #18
 8003c42:	220f      	movs	r2, #15
 8003c44:	4013      	ands	r3, r2
 8003c46:	2214      	movs	r2, #20
 8003c48:	18ba      	adds	r2, r7, r2
 8003c4a:	5cd3      	ldrb	r3, [r2, r3]
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003c4e:	4b23      	ldr	r3, [pc, #140]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xf4>)
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	220f      	movs	r2, #15
 8003c54:	4013      	ands	r3, r2
 8003c56:	1d3a      	adds	r2, r7, #4
 8003c58:	5cd3      	ldrb	r3, [r2, r3]
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c5e:	23c0      	movs	r3, #192	; 0xc0
 8003c60:	025b      	lsls	r3, r3, #9
 8003c62:	401a      	ands	r2, r3
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	025b      	lsls	r3, r3, #9
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d109      	bne.n	8003c80 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c6e:	481c      	ldr	r0, [pc, #112]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c70:	f7fc fa64 	bl	800013c <__udivsi3>
 8003c74:	0003      	movs	r3, r0
 8003c76:	001a      	movs	r2, r3
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	4353      	muls	r3, r2
 8003c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c7e:	e01a      	b.n	8003cb6 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c82:	23c0      	movs	r3, #192	; 0xc0
 8003c84:	025b      	lsls	r3, r3, #9
 8003c86:	401a      	ands	r2, r3
 8003c88:	23c0      	movs	r3, #192	; 0xc0
 8003c8a:	025b      	lsls	r3, r3, #9
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d109      	bne.n	8003ca4 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c92:	4814      	ldr	r0, [pc, #80]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003c94:	f7fc fa52 	bl	800013c <__udivsi3>
 8003c98:	0003      	movs	r3, r0
 8003c9a:	001a      	movs	r2, r3
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	4353      	muls	r3, r2
 8003ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ca4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ca6:	480e      	ldr	r0, [pc, #56]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ca8:	f7fc fa48 	bl	800013c <__udivsi3>
 8003cac:	0003      	movs	r3, r0
 8003cae:	001a      	movs	r2, r3
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	4353      	muls	r3, r2
 8003cb4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003cba:	e005      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003cbe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003cc0:	e002      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cc2:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cc4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003cc6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003cca:	0018      	movs	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b00f      	add	sp, #60	; 0x3c
 8003cd0:	bd90      	pop	{r4, r7, pc}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	08009bd8 	.word	0x08009bd8
 8003cd8:	08009be8 	.word	0x08009be8
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	007a1200 	.word	0x007a1200
 8003ce4:	02dc6c00 	.word	0x02dc6c00

08003ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cec:	4b02      	ldr	r3, [pc, #8]	; (8003cf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cee:	681b      	ldr	r3, [r3, #0]
}
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	20000008 	.word	0x20000008

08003cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003d00:	f7ff fff2 	bl	8003ce8 <HAL_RCC_GetHCLKFreq>
 8003d04:	0001      	movs	r1, r0
 8003d06:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	0a1b      	lsrs	r3, r3, #8
 8003d0c:	2207      	movs	r2, #7
 8003d0e:	4013      	ands	r3, r2
 8003d10:	4a04      	ldr	r2, [pc, #16]	; (8003d24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d12:	5cd3      	ldrb	r3, [r2, r3]
 8003d14:	40d9      	lsrs	r1, r3
 8003d16:	000b      	movs	r3, r1
}    
 8003d18:	0018      	movs	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	40021000 	.word	0x40021000
 8003d24:	08009c88 	.word	0x08009c88

08003d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	2380      	movs	r3, #128	; 0x80
 8003d3e:	025b      	lsls	r3, r3, #9
 8003d40:	4013      	ands	r3, r2
 8003d42:	d100      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003d44:	e08e      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003d46:	2017      	movs	r0, #23
 8003d48:	183b      	adds	r3, r7, r0
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d4e:	4b6e      	ldr	r3, [pc, #440]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d50:	69da      	ldr	r2, [r3, #28]
 8003d52:	2380      	movs	r3, #128	; 0x80
 8003d54:	055b      	lsls	r3, r3, #21
 8003d56:	4013      	ands	r3, r2
 8003d58:	d110      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d5a:	4b6b      	ldr	r3, [pc, #428]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d5c:	69da      	ldr	r2, [r3, #28]
 8003d5e:	4b6a      	ldr	r3, [pc, #424]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d60:	2180      	movs	r1, #128	; 0x80
 8003d62:	0549      	lsls	r1, r1, #21
 8003d64:	430a      	orrs	r2, r1
 8003d66:	61da      	str	r2, [r3, #28]
 8003d68:	4b67      	ldr	r3, [pc, #412]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d6a:	69da      	ldr	r2, [r3, #28]
 8003d6c:	2380      	movs	r3, #128	; 0x80
 8003d6e:	055b      	lsls	r3, r3, #21
 8003d70:	4013      	ands	r3, r2
 8003d72:	60bb      	str	r3, [r7, #8]
 8003d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d76:	183b      	adds	r3, r7, r0
 8003d78:	2201      	movs	r2, #1
 8003d7a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7c:	4b63      	ldr	r3, [pc, #396]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	2380      	movs	r3, #128	; 0x80
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	4013      	ands	r3, r2
 8003d86:	d11a      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d88:	4b60      	ldr	r3, [pc, #384]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	4b5f      	ldr	r3, [pc, #380]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003d8e:	2180      	movs	r1, #128	; 0x80
 8003d90:	0049      	lsls	r1, r1, #1
 8003d92:	430a      	orrs	r2, r1
 8003d94:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d96:	f7fe fea7 	bl	8002ae8 <HAL_GetTick>
 8003d9a:	0003      	movs	r3, r0
 8003d9c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d9e:	e008      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da0:	f7fe fea2 	bl	8002ae8 <HAL_GetTick>
 8003da4:	0002      	movs	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b64      	cmp	r3, #100	; 0x64
 8003dac:	d901      	bls.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e0a6      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db2:	4b56      	ldr	r3, [pc, #344]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	2380      	movs	r3, #128	; 0x80
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d0f0      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dbe:	4b52      	ldr	r3, [pc, #328]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003dc0:	6a1a      	ldr	r2, [r3, #32]
 8003dc2:	23c0      	movs	r3, #192	; 0xc0
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d034      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	23c0      	movs	r3, #192	; 0xc0
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4013      	ands	r3, r2
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d02c      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003de0:	4b49      	ldr	r3, [pc, #292]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	4a4a      	ldr	r2, [pc, #296]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dea:	4b47      	ldr	r3, [pc, #284]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003dec:	6a1a      	ldr	r2, [r3, #32]
 8003dee:	4b46      	ldr	r3, [pc, #280]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003df0:	2180      	movs	r1, #128	; 0x80
 8003df2:	0249      	lsls	r1, r1, #9
 8003df4:	430a      	orrs	r2, r1
 8003df6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003df8:	4b43      	ldr	r3, [pc, #268]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003dfa:	6a1a      	ldr	r2, [r3, #32]
 8003dfc:	4b42      	ldr	r3, [pc, #264]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003dfe:	4945      	ldr	r1, [pc, #276]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003e00:	400a      	ands	r2, r1
 8003e02:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e04:	4b40      	ldr	r3, [pc, #256]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	4013      	ands	r3, r2
 8003e10:	d013      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e12:	f7fe fe69 	bl	8002ae8 <HAL_GetTick>
 8003e16:	0003      	movs	r3, r0
 8003e18:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1a:	e009      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1c:	f7fe fe64 	bl	8002ae8 <HAL_GetTick>
 8003e20:	0002      	movs	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	4a3c      	ldr	r2, [pc, #240]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e067      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e30:	4b35      	ldr	r3, [pc, #212]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	2202      	movs	r2, #2
 8003e36:	4013      	ands	r3, r2
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e3a:	4b33      	ldr	r3, [pc, #204]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	4a34      	ldr	r2, [pc, #208]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	0019      	movs	r1, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	4b2f      	ldr	r3, [pc, #188]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e4e:	2317      	movs	r3, #23
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d105      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e58:	4b2b      	ldr	r3, [pc, #172]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e5a:	69da      	ldr	r2, [r3, #28]
 8003e5c:	4b2a      	ldr	r3, [pc, #168]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e5e:	492f      	ldr	r1, [pc, #188]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003e60:	400a      	ands	r2, r1
 8003e62:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d009      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e6e:	4b26      	ldr	r3, [pc, #152]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	2203      	movs	r2, #3
 8003e74:	4393      	bics	r3, r2
 8003e76:	0019      	movs	r1, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	4b22      	ldr	r3, [pc, #136]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2202      	movs	r2, #2
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d009      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e8c:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	4a23      	ldr	r2, [pc, #140]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	0019      	movs	r1, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	4b1b      	ldr	r3, [pc, #108]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	02db      	lsls	r3, r3, #11
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d009      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003eac:	4b16      	ldr	r3, [pc, #88]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	4a1c      	ldr	r2, [pc, #112]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	0019      	movs	r1, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d009      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eca:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	2210      	movs	r2, #16
 8003ed0:	4393      	bics	r3, r2
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003eda:	430a      	orrs	r2, r1
 8003edc:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	2380      	movs	r3, #128	; 0x80
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	d009      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	2240      	movs	r2, #64	; 0x40
 8003ef0:	4393      	bics	r3, r2
 8003ef2:	0019      	movs	r1, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699a      	ldr	r2, [r3, #24]
 8003ef8:	4b03      	ldr	r3, [pc, #12]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003efa:	430a      	orrs	r2, r1
 8003efc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	0018      	movs	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b006      	add	sp, #24
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40007000 	.word	0x40007000
 8003f10:	fffffcff 	.word	0xfffffcff
 8003f14:	fffeffff 	.word	0xfffeffff
 8003f18:	00001388 	.word	0x00001388
 8003f1c:	efffffff 	.word	0xefffffff
 8003f20:	fffcffff 	.word	0xfffcffff
 8003f24:	fff3ffff 	.word	0xfff3ffff

08003f28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e044      	b.n	8003fc4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d107      	bne.n	8003f52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2274      	movs	r2, #116	; 0x74
 8003f46:	2100      	movs	r1, #0
 8003f48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f7fe fb73 	bl	8002638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2224      	movs	r2, #36	; 0x24
 8003f56:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2101      	movs	r1, #1
 8003f64:	438a      	bics	r2, r1
 8003f66:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f000 fcbe 	bl	80048ec <UART_SetConfig>
 8003f70:	0003      	movs	r3, r0
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e024      	b.n	8003fc4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	0018      	movs	r0, r3
 8003f86:	f000 fe99 	bl	8004cbc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	490d      	ldr	r1, [pc, #52]	; (8003fcc <HAL_UART_Init+0xa4>)
 8003f96:	400a      	ands	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	212a      	movs	r1, #42	; 0x2a
 8003fa6:	438a      	bics	r2, r1
 8003fa8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f000 ff31 	bl	8004e24 <UART_CheckIdleState>
 8003fc2:	0003      	movs	r3, r0
}
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b002      	add	sp, #8
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	ffffb7ff 	.word	0xffffb7ff

08003fd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08a      	sub	sp, #40	; 0x28
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	1dbb      	adds	r3, r7, #6
 8003fde:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fe4:	2b20      	cmp	r3, #32
 8003fe6:	d000      	beq.n	8003fea <HAL_UART_Transmit+0x1a>
 8003fe8:	e096      	b.n	8004118 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_UART_Transmit+0x28>
 8003ff0:	1dbb      	adds	r3, r7, #6
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e08e      	b.n	800411a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	2380      	movs	r3, #128	; 0x80
 8004002:	015b      	lsls	r3, r3, #5
 8004004:	429a      	cmp	r2, r3
 8004006:	d109      	bne.n	800401c <HAL_UART_Transmit+0x4c>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d105      	bne.n	800401c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2201      	movs	r2, #1
 8004014:	4013      	ands	r3, r2
 8004016:	d001      	beq.n	800401c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e07e      	b.n	800411a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2274      	movs	r2, #116	; 0x74
 8004020:	5c9b      	ldrb	r3, [r3, r2]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <HAL_UART_Transmit+0x5a>
 8004026:	2302      	movs	r3, #2
 8004028:	e077      	b.n	800411a <HAL_UART_Transmit+0x14a>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2274      	movs	r2, #116	; 0x74
 800402e:	2101      	movs	r1, #1
 8004030:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2280      	movs	r2, #128	; 0x80
 8004036:	2100      	movs	r1, #0
 8004038:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2221      	movs	r2, #33	; 0x21
 800403e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004040:	f7fe fd52 	bl	8002ae8 <HAL_GetTick>
 8004044:	0003      	movs	r3, r0
 8004046:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	1dba      	adds	r2, r7, #6
 800404c:	2150      	movs	r1, #80	; 0x50
 800404e:	8812      	ldrh	r2, [r2, #0]
 8004050:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1dba      	adds	r2, r7, #6
 8004056:	2152      	movs	r1, #82	; 0x52
 8004058:	8812      	ldrh	r2, [r2, #0]
 800405a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	2380      	movs	r3, #128	; 0x80
 8004062:	015b      	lsls	r3, r3, #5
 8004064:	429a      	cmp	r2, r3
 8004066:	d108      	bne.n	800407a <HAL_UART_Transmit+0xaa>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d104      	bne.n	800407a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004070:	2300      	movs	r3, #0
 8004072:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	61bb      	str	r3, [r7, #24]
 8004078:	e003      	b.n	8004082 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800407e:	2300      	movs	r3, #0
 8004080:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2274      	movs	r2, #116	; 0x74
 8004086:	2100      	movs	r1, #0
 8004088:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800408a:	e02d      	b.n	80040e8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	0013      	movs	r3, r2
 8004096:	2200      	movs	r2, #0
 8004098:	2180      	movs	r1, #128	; 0x80
 800409a:	f000 ff0b 	bl	8004eb4 <UART_WaitOnFlagUntilTimeout>
 800409e:	1e03      	subs	r3, r0, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e039      	b.n	800411a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10b      	bne.n	80040c4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	881a      	ldrh	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	05d2      	lsls	r2, r2, #23
 80040b6:	0dd2      	lsrs	r2, r2, #23
 80040b8:	b292      	uxth	r2, r2
 80040ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	3302      	adds	r3, #2
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	e008      	b.n	80040d6 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	781a      	ldrb	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	b292      	uxth	r2, r2
 80040ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	3301      	adds	r3, #1
 80040d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2252      	movs	r2, #82	; 0x52
 80040da:	5a9b      	ldrh	r3, [r3, r2]
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b299      	uxth	r1, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2252      	movs	r2, #82	; 0x52
 80040e6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2252      	movs	r2, #82	; 0x52
 80040ec:	5a9b      	ldrh	r3, [r3, r2]
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1cb      	bne.n	800408c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	0013      	movs	r3, r2
 80040fe:	2200      	movs	r2, #0
 8004100:	2140      	movs	r1, #64	; 0x40
 8004102:	f000 fed7 	bl	8004eb4 <UART_WaitOnFlagUntilTimeout>
 8004106:	1e03      	subs	r3, r0, #0
 8004108:	d001      	beq.n	800410e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e005      	b.n	800411a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2220      	movs	r2, #32
 8004112:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	e000      	b.n	800411a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004118:	2302      	movs	r3, #2
  }
}
 800411a:	0018      	movs	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	b008      	add	sp, #32
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08a      	sub	sp, #40	; 0x28
 8004128:	af02      	add	r7, sp, #8
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	1dbb      	adds	r3, r7, #6
 8004132:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004138:	2b20      	cmp	r3, #32
 800413a:	d000      	beq.n	800413e <HAL_UART_Receive+0x1a>
 800413c:	e0da      	b.n	80042f4 <HAL_UART_Receive+0x1d0>
  {
    if ((pData == NULL) || (Size == 0U))
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <HAL_UART_Receive+0x28>
 8004144:	1dbb      	adds	r3, r7, #6
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e0d2      	b.n	80042f6 <HAL_UART_Receive+0x1d2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	2380      	movs	r3, #128	; 0x80
 8004156:	015b      	lsls	r3, r3, #5
 8004158:	429a      	cmp	r2, r3
 800415a:	d109      	bne.n	8004170 <HAL_UART_Receive+0x4c>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d105      	bne.n	8004170 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2201      	movs	r2, #1
 8004168:	4013      	ands	r3, r2
 800416a:	d001      	beq.n	8004170 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e0c2      	b.n	80042f6 <HAL_UART_Receive+0x1d2>
      }
    }

    __HAL_LOCK(huart);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2274      	movs	r2, #116	; 0x74
 8004174:	5c9b      	ldrb	r3, [r3, r2]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_UART_Receive+0x5a>
 800417a:	2302      	movs	r3, #2
 800417c:	e0bb      	b.n	80042f6 <HAL_UART_Receive+0x1d2>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2274      	movs	r2, #116	; 0x74
 8004182:	2101      	movs	r1, #1
 8004184:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2280      	movs	r2, #128	; 0x80
 800418a:	2100      	movs	r1, #0
 800418c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2222      	movs	r2, #34	; 0x22
 8004192:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800419a:	f7fe fca5 	bl	8002ae8 <HAL_GetTick>
 800419e:	0003      	movs	r3, r0
 80041a0:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	1dba      	adds	r2, r7, #6
 80041a6:	2158      	movs	r1, #88	; 0x58
 80041a8:	8812      	ldrh	r2, [r2, #0]
 80041aa:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	1dba      	adds	r2, r7, #6
 80041b0:	215a      	movs	r1, #90	; 0x5a
 80041b2:	8812      	ldrh	r2, [r2, #0]
 80041b4:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	2380      	movs	r3, #128	; 0x80
 80041bc:	015b      	lsls	r3, r3, #5
 80041be:	429a      	cmp	r2, r3
 80041c0:	d10d      	bne.n	80041de <HAL_UART_Receive+0xba>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d104      	bne.n	80041d4 <HAL_UART_Receive+0xb0>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	225c      	movs	r2, #92	; 0x5c
 80041ce:	494c      	ldr	r1, [pc, #304]	; (8004300 <HAL_UART_Receive+0x1dc>)
 80041d0:	5299      	strh	r1, [r3, r2]
 80041d2:	e02e      	b.n	8004232 <HAL_UART_Receive+0x10e>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	225c      	movs	r2, #92	; 0x5c
 80041d8:	21ff      	movs	r1, #255	; 0xff
 80041da:	5299      	strh	r1, [r3, r2]
 80041dc:	e029      	b.n	8004232 <HAL_UART_Receive+0x10e>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10d      	bne.n	8004202 <HAL_UART_Receive+0xde>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d104      	bne.n	80041f8 <HAL_UART_Receive+0xd4>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	225c      	movs	r2, #92	; 0x5c
 80041f2:	21ff      	movs	r1, #255	; 0xff
 80041f4:	5299      	strh	r1, [r3, r2]
 80041f6:	e01c      	b.n	8004232 <HAL_UART_Receive+0x10e>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	225c      	movs	r2, #92	; 0x5c
 80041fc:	217f      	movs	r1, #127	; 0x7f
 80041fe:	5299      	strh	r1, [r3, r2]
 8004200:	e017      	b.n	8004232 <HAL_UART_Receive+0x10e>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	055b      	lsls	r3, r3, #21
 800420a:	429a      	cmp	r2, r3
 800420c:	d10d      	bne.n	800422a <HAL_UART_Receive+0x106>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d104      	bne.n	8004220 <HAL_UART_Receive+0xfc>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	225c      	movs	r2, #92	; 0x5c
 800421a:	217f      	movs	r1, #127	; 0x7f
 800421c:	5299      	strh	r1, [r3, r2]
 800421e:	e008      	b.n	8004232 <HAL_UART_Receive+0x10e>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	225c      	movs	r2, #92	; 0x5c
 8004224:	213f      	movs	r1, #63	; 0x3f
 8004226:	5299      	strh	r1, [r3, r2]
 8004228:	e003      	b.n	8004232 <HAL_UART_Receive+0x10e>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	225c      	movs	r2, #92	; 0x5c
 800422e:	2100      	movs	r1, #0
 8004230:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004232:	2312      	movs	r3, #18
 8004234:	18fb      	adds	r3, r7, r3
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	215c      	movs	r1, #92	; 0x5c
 800423a:	5a52      	ldrh	r2, [r2, r1]
 800423c:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	2380      	movs	r3, #128	; 0x80
 8004244:	015b      	lsls	r3, r3, #5
 8004246:	429a      	cmp	r2, r3
 8004248:	d108      	bne.n	800425c <HAL_UART_Receive+0x138>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d104      	bne.n	800425c <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8004252:	2300      	movs	r3, #0
 8004254:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	61bb      	str	r3, [r7, #24]
 800425a:	e003      	b.n	8004264 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004260:	2300      	movs	r3, #0
 8004262:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2274      	movs	r2, #116	; 0x74
 8004268:	2100      	movs	r1, #0
 800426a:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800426c:	e037      	b.n	80042de <HAL_UART_Receive+0x1ba>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	0013      	movs	r3, r2
 8004278:	2200      	movs	r2, #0
 800427a:	2120      	movs	r1, #32
 800427c:	f000 fe1a 	bl	8004eb4 <UART_WaitOnFlagUntilTimeout>
 8004280:	1e03      	subs	r3, r0, #0
 8004282:	d001      	beq.n	8004288 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e036      	b.n	80042f6 <HAL_UART_Receive+0x1d2>
      }
      if (pdata8bits == NULL)
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10e      	bne.n	80042ac <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004294:	b29b      	uxth	r3, r3
 8004296:	2212      	movs	r2, #18
 8004298:	18ba      	adds	r2, r7, r2
 800429a:	8812      	ldrh	r2, [r2, #0]
 800429c:	4013      	ands	r3, r2
 800429e:	b29a      	uxth	r2, r3
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	3302      	adds	r3, #2
 80042a8:	61bb      	str	r3, [r7, #24]
 80042aa:	e00f      	b.n	80042cc <HAL_UART_Receive+0x1a8>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2212      	movs	r2, #18
 80042b8:	18ba      	adds	r2, r7, r2
 80042ba:	8812      	ldrh	r2, [r2, #0]
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	4013      	ands	r3, r2
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	3301      	adds	r3, #1
 80042ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	225a      	movs	r2, #90	; 0x5a
 80042d0:	5a9b      	ldrh	r3, [r3, r2]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b299      	uxth	r1, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	225a      	movs	r2, #90	; 0x5a
 80042dc:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	225a      	movs	r2, #90	; 0x5a
 80042e2:	5a9b      	ldrh	r3, [r3, r2]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1c1      	bne.n	800426e <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2220      	movs	r2, #32
 80042ee:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	e000      	b.n	80042f6 <HAL_UART_Receive+0x1d2>
  }
  else
  {
    return HAL_BUSY;
 80042f4:	2302      	movs	r3, #2
  }
}
 80042f6:	0018      	movs	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b008      	add	sp, #32
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	000001ff 	.word	0x000001ff

08004304 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004304:	b590      	push	{r4, r7, lr}
 8004306:	b0ab      	sub	sp, #172	; 0xac
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	22a4      	movs	r2, #164	; 0xa4
 8004314:	18b9      	adds	r1, r7, r2
 8004316:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	20a0      	movs	r0, #160	; 0xa0
 8004320:	1839      	adds	r1, r7, r0
 8004322:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	219c      	movs	r1, #156	; 0x9c
 800432c:	1879      	adds	r1, r7, r1
 800432e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004330:	0011      	movs	r1, r2
 8004332:	18bb      	adds	r3, r7, r2
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a99      	ldr	r2, [pc, #612]	; (800459c <HAL_UART_IRQHandler+0x298>)
 8004338:	4013      	ands	r3, r2
 800433a:	2298      	movs	r2, #152	; 0x98
 800433c:	18bc      	adds	r4, r7, r2
 800433e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004340:	18bb      	adds	r3, r7, r2
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d114      	bne.n	8004372 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004348:	187b      	adds	r3, r7, r1
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2220      	movs	r2, #32
 800434e:	4013      	ands	r3, r2
 8004350:	d00f      	beq.n	8004372 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004352:	183b      	adds	r3, r7, r0
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2220      	movs	r2, #32
 8004358:	4013      	ands	r3, r2
 800435a:	d00a      	beq.n	8004372 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004360:	2b00      	cmp	r3, #0
 8004362:	d100      	bne.n	8004366 <HAL_UART_IRQHandler+0x62>
 8004364:	e296      	b.n	8004894 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	0010      	movs	r0, r2
 800436e:	4798      	blx	r3
      }
      return;
 8004370:	e290      	b.n	8004894 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004372:	2398      	movs	r3, #152	; 0x98
 8004374:	18fb      	adds	r3, r7, r3
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d100      	bne.n	800437e <HAL_UART_IRQHandler+0x7a>
 800437c:	e114      	b.n	80045a8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800437e:	239c      	movs	r3, #156	; 0x9c
 8004380:	18fb      	adds	r3, r7, r3
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2201      	movs	r2, #1
 8004386:	4013      	ands	r3, r2
 8004388:	d106      	bne.n	8004398 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800438a:	23a0      	movs	r3, #160	; 0xa0
 800438c:	18fb      	adds	r3, r7, r3
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a83      	ldr	r2, [pc, #524]	; (80045a0 <HAL_UART_IRQHandler+0x29c>)
 8004392:	4013      	ands	r3, r2
 8004394:	d100      	bne.n	8004398 <HAL_UART_IRQHandler+0x94>
 8004396:	e107      	b.n	80045a8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004398:	23a4      	movs	r3, #164	; 0xa4
 800439a:	18fb      	adds	r3, r7, r3
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2201      	movs	r2, #1
 80043a0:	4013      	ands	r3, r2
 80043a2:	d012      	beq.n	80043ca <HAL_UART_IRQHandler+0xc6>
 80043a4:	23a0      	movs	r3, #160	; 0xa0
 80043a6:	18fb      	adds	r3, r7, r3
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	2380      	movs	r3, #128	; 0x80
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	4013      	ands	r3, r2
 80043b0:	d00b      	beq.n	80043ca <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2201      	movs	r2, #1
 80043b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2280      	movs	r2, #128	; 0x80
 80043be:	589b      	ldr	r3, [r3, r2]
 80043c0:	2201      	movs	r2, #1
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2180      	movs	r1, #128	; 0x80
 80043c8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043ca:	23a4      	movs	r3, #164	; 0xa4
 80043cc:	18fb      	adds	r3, r7, r3
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2202      	movs	r2, #2
 80043d2:	4013      	ands	r3, r2
 80043d4:	d011      	beq.n	80043fa <HAL_UART_IRQHandler+0xf6>
 80043d6:	239c      	movs	r3, #156	; 0x9c
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2201      	movs	r2, #1
 80043de:	4013      	ands	r3, r2
 80043e0:	d00b      	beq.n	80043fa <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2202      	movs	r2, #2
 80043e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2280      	movs	r2, #128	; 0x80
 80043ee:	589b      	ldr	r3, [r3, r2]
 80043f0:	2204      	movs	r2, #4
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2180      	movs	r1, #128	; 0x80
 80043f8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043fa:	23a4      	movs	r3, #164	; 0xa4
 80043fc:	18fb      	adds	r3, r7, r3
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2204      	movs	r2, #4
 8004402:	4013      	ands	r3, r2
 8004404:	d011      	beq.n	800442a <HAL_UART_IRQHandler+0x126>
 8004406:	239c      	movs	r3, #156	; 0x9c
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2201      	movs	r2, #1
 800440e:	4013      	ands	r3, r2
 8004410:	d00b      	beq.n	800442a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2204      	movs	r2, #4
 8004418:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2280      	movs	r2, #128	; 0x80
 800441e:	589b      	ldr	r3, [r3, r2]
 8004420:	2202      	movs	r2, #2
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2180      	movs	r1, #128	; 0x80
 8004428:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800442a:	23a4      	movs	r3, #164	; 0xa4
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2208      	movs	r2, #8
 8004432:	4013      	ands	r3, r2
 8004434:	d017      	beq.n	8004466 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004436:	23a0      	movs	r3, #160	; 0xa0
 8004438:	18fb      	adds	r3, r7, r3
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2220      	movs	r2, #32
 800443e:	4013      	ands	r3, r2
 8004440:	d105      	bne.n	800444e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004442:	239c      	movs	r3, #156	; 0x9c
 8004444:	18fb      	adds	r3, r7, r3
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2201      	movs	r2, #1
 800444a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800444c:	d00b      	beq.n	8004466 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2208      	movs	r2, #8
 8004454:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2280      	movs	r2, #128	; 0x80
 800445a:	589b      	ldr	r3, [r3, r2]
 800445c:	2208      	movs	r2, #8
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2180      	movs	r1, #128	; 0x80
 8004464:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004466:	23a4      	movs	r3, #164	; 0xa4
 8004468:	18fb      	adds	r3, r7, r3
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	2380      	movs	r3, #128	; 0x80
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	4013      	ands	r3, r2
 8004472:	d013      	beq.n	800449c <HAL_UART_IRQHandler+0x198>
 8004474:	23a0      	movs	r3, #160	; 0xa0
 8004476:	18fb      	adds	r3, r7, r3
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	2380      	movs	r3, #128	; 0x80
 800447c:	04db      	lsls	r3, r3, #19
 800447e:	4013      	ands	r3, r2
 8004480:	d00c      	beq.n	800449c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2280      	movs	r2, #128	; 0x80
 8004488:	0112      	lsls	r2, r2, #4
 800448a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2280      	movs	r2, #128	; 0x80
 8004490:	589b      	ldr	r3, [r3, r2]
 8004492:	2220      	movs	r2, #32
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2180      	movs	r1, #128	; 0x80
 800449a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2280      	movs	r2, #128	; 0x80
 80044a0:	589b      	ldr	r3, [r3, r2]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d100      	bne.n	80044a8 <HAL_UART_IRQHandler+0x1a4>
 80044a6:	e1f7      	b.n	8004898 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80044a8:	23a4      	movs	r3, #164	; 0xa4
 80044aa:	18fb      	adds	r3, r7, r3
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2220      	movs	r2, #32
 80044b0:	4013      	ands	r3, r2
 80044b2:	d00e      	beq.n	80044d2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044b4:	23a0      	movs	r3, #160	; 0xa0
 80044b6:	18fb      	adds	r3, r7, r3
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2220      	movs	r2, #32
 80044bc:	4013      	ands	r3, r2
 80044be:	d008      	beq.n	80044d2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d004      	beq.n	80044d2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	0010      	movs	r0, r2
 80044d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2280      	movs	r2, #128	; 0x80
 80044d6:	589b      	ldr	r3, [r3, r2]
 80044d8:	2194      	movs	r1, #148	; 0x94
 80044da:	187a      	adds	r2, r7, r1
 80044dc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	2240      	movs	r2, #64	; 0x40
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b40      	cmp	r3, #64	; 0x40
 80044ea:	d004      	beq.n	80044f6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044ec:	187b      	adds	r3, r7, r1
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2228      	movs	r2, #40	; 0x28
 80044f2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044f4:	d047      	beq.n	8004586 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	0018      	movs	r0, r3
 80044fa:	f000 fd9f 	bl	800503c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2240      	movs	r2, #64	; 0x40
 8004506:	4013      	ands	r3, r2
 8004508:	2b40      	cmp	r3, #64	; 0x40
 800450a:	d137      	bne.n	800457c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800450c:	f3ef 8310 	mrs	r3, PRIMASK
 8004510:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004514:	2090      	movs	r0, #144	; 0x90
 8004516:	183a      	adds	r2, r7, r0
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	2301      	movs	r3, #1
 800451c:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800451e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004520:	f383 8810 	msr	PRIMASK, r3
}
 8004524:	46c0      	nop			; (mov r8, r8)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2140      	movs	r1, #64	; 0x40
 8004532:	438a      	bics	r2, r1
 8004534:	609a      	str	r2, [r3, #8]
 8004536:	183b      	adds	r3, r7, r0
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800453c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800453e:	f383 8810 	msr	PRIMASK, r3
}
 8004542:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004548:	2b00      	cmp	r3, #0
 800454a:	d012      	beq.n	8004572 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004550:	4a14      	ldr	r2, [pc, #80]	; (80045a4 <HAL_UART_IRQHandler+0x2a0>)
 8004552:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	0018      	movs	r0, r3
 800455a:	f7fe fc2d 	bl	8002db8 <HAL_DMA_Abort_IT>
 800455e:	1e03      	subs	r3, r0, #0
 8004560:	d01a      	beq.n	8004598 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	0018      	movs	r0, r3
 800456e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004570:	e012      	b.n	8004598 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	0018      	movs	r0, r3
 8004576:	f000 f9a5 	bl	80048c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457a:	e00d      	b.n	8004598 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	0018      	movs	r0, r3
 8004580:	f000 f9a0 	bl	80048c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004584:	e008      	b.n	8004598 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	0018      	movs	r0, r3
 800458a:	f000 f99b 	bl	80048c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2280      	movs	r2, #128	; 0x80
 8004592:	2100      	movs	r1, #0
 8004594:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004596:	e17f      	b.n	8004898 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004598:	46c0      	nop			; (mov r8, r8)
    return;
 800459a:	e17d      	b.n	8004898 <HAL_UART_IRQHandler+0x594>
 800459c:	0000080f 	.word	0x0000080f
 80045a0:	04000120 	.word	0x04000120
 80045a4:	08005101 	.word	0x08005101

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d000      	beq.n	80045b2 <HAL_UART_IRQHandler+0x2ae>
 80045b0:	e131      	b.n	8004816 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80045b2:	23a4      	movs	r3, #164	; 0xa4
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2210      	movs	r2, #16
 80045ba:	4013      	ands	r3, r2
 80045bc:	d100      	bne.n	80045c0 <HAL_UART_IRQHandler+0x2bc>
 80045be:	e12a      	b.n	8004816 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80045c0:	23a0      	movs	r3, #160	; 0xa0
 80045c2:	18fb      	adds	r3, r7, r3
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2210      	movs	r2, #16
 80045c8:	4013      	ands	r3, r2
 80045ca:	d100      	bne.n	80045ce <HAL_UART_IRQHandler+0x2ca>
 80045cc:	e123      	b.n	8004816 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2210      	movs	r2, #16
 80045d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2240      	movs	r2, #64	; 0x40
 80045de:	4013      	ands	r3, r2
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	d000      	beq.n	80045e6 <HAL_UART_IRQHandler+0x2e2>
 80045e4:	e09b      	b.n	800471e <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	217e      	movs	r1, #126	; 0x7e
 80045f0:	187b      	adds	r3, r7, r1
 80045f2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80045f4:	187b      	adds	r3, r7, r1
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d100      	bne.n	80045fe <HAL_UART_IRQHandler+0x2fa>
 80045fc:	e14e      	b.n	800489c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2258      	movs	r2, #88	; 0x58
 8004602:	5a9b      	ldrh	r3, [r3, r2]
 8004604:	187a      	adds	r2, r7, r1
 8004606:	8812      	ldrh	r2, [r2, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d300      	bcc.n	800460e <HAL_UART_IRQHandler+0x30a>
 800460c:	e146      	b.n	800489c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	187a      	adds	r2, r7, r1
 8004612:	215a      	movs	r1, #90	; 0x5a
 8004614:	8812      	ldrh	r2, [r2, #0]
 8004616:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b20      	cmp	r3, #32
 8004620:	d06e      	beq.n	8004700 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004622:	f3ef 8310 	mrs	r3, PRIMASK
 8004626:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800462a:	67bb      	str	r3, [r7, #120]	; 0x78
 800462c:	2301      	movs	r3, #1
 800462e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004632:	f383 8810 	msr	PRIMASK, r3
}
 8004636:	46c0      	nop			; (mov r8, r8)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	499a      	ldr	r1, [pc, #616]	; (80048ac <HAL_UART_IRQHandler+0x5a8>)
 8004644:	400a      	ands	r2, r1
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800464a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464e:	f383 8810 	msr	PRIMASK, r3
}
 8004652:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004654:	f3ef 8310 	mrs	r3, PRIMASK
 8004658:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800465a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465c:	677b      	str	r3, [r7, #116]	; 0x74
 800465e:	2301      	movs	r3, #1
 8004660:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004664:	f383 8810 	msr	PRIMASK, r3
}
 8004668:	46c0      	nop			; (mov r8, r8)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2101      	movs	r1, #1
 8004676:	438a      	bics	r2, r1
 8004678:	609a      	str	r2, [r3, #8]
 800467a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800467c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004680:	f383 8810 	msr	PRIMASK, r3
}
 8004684:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004686:	f3ef 8310 	mrs	r3, PRIMASK
 800468a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800468c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800468e:	673b      	str	r3, [r7, #112]	; 0x70
 8004690:	2301      	movs	r3, #1
 8004692:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004696:	f383 8810 	msr	PRIMASK, r3
}
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2140      	movs	r1, #64	; 0x40
 80046a8:	438a      	bics	r2, r1
 80046aa:	609a      	str	r2, [r3, #8]
 80046ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046ae:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046b2:	f383 8810 	msr	PRIMASK, r3
}
 80046b6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046c4:	f3ef 8310 	mrs	r3, PRIMASK
 80046c8:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80046ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046ce:	2301      	movs	r3, #1
 80046d0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046d4:	f383 8810 	msr	PRIMASK, r3
}
 80046d8:	46c0      	nop			; (mov r8, r8)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2110      	movs	r1, #16
 80046e6:	438a      	bics	r2, r1
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046f0:	f383 8810 	msr	PRIMASK, r3
}
 80046f4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	0018      	movs	r0, r3
 80046fc:	f7fe fb24 	bl	8002d48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2258      	movs	r2, #88	; 0x58
 8004704:	5a9a      	ldrh	r2, [r3, r2]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	215a      	movs	r1, #90	; 0x5a
 800470a:	5a5b      	ldrh	r3, [r3, r1]
 800470c:	b29b      	uxth	r3, r3
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	b29a      	uxth	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	0011      	movs	r1, r2
 8004716:	0018      	movs	r0, r3
 8004718:	f000 f8dc 	bl	80048d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800471c:	e0be      	b.n	800489c <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2258      	movs	r2, #88	; 0x58
 8004722:	5a99      	ldrh	r1, [r3, r2]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	225a      	movs	r2, #90	; 0x5a
 8004728:	5a9b      	ldrh	r3, [r3, r2]
 800472a:	b29a      	uxth	r2, r3
 800472c:	208e      	movs	r0, #142	; 0x8e
 800472e:	183b      	adds	r3, r7, r0
 8004730:	1a8a      	subs	r2, r1, r2
 8004732:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	225a      	movs	r2, #90	; 0x5a
 8004738:	5a9b      	ldrh	r3, [r3, r2]
 800473a:	b29b      	uxth	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d100      	bne.n	8004742 <HAL_UART_IRQHandler+0x43e>
 8004740:	e0ae      	b.n	80048a0 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8004742:	183b      	adds	r3, r7, r0
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d100      	bne.n	800474c <HAL_UART_IRQHandler+0x448>
 800474a:	e0a9      	b.n	80048a0 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800474c:	f3ef 8310 	mrs	r3, PRIMASK
 8004750:	60fb      	str	r3, [r7, #12]
  return(result);
 8004752:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004754:	2488      	movs	r4, #136	; 0x88
 8004756:	193a      	adds	r2, r7, r4
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	2301      	movs	r3, #1
 800475c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f383 8810 	msr	PRIMASK, r3
}
 8004764:	46c0      	nop			; (mov r8, r8)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	494f      	ldr	r1, [pc, #316]	; (80048b0 <HAL_UART_IRQHandler+0x5ac>)
 8004772:	400a      	ands	r2, r1
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	193b      	adds	r3, r7, r4
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f383 8810 	msr	PRIMASK, r3
}
 8004782:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004784:	f3ef 8310 	mrs	r3, PRIMASK
 8004788:	61bb      	str	r3, [r7, #24]
  return(result);
 800478a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478c:	2484      	movs	r4, #132	; 0x84
 800478e:	193a      	adds	r2, r7, r4
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	2301      	movs	r3, #1
 8004794:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	f383 8810 	msr	PRIMASK, r3
}
 800479c:	46c0      	nop			; (mov r8, r8)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2101      	movs	r1, #1
 80047aa:	438a      	bics	r2, r1
 80047ac:	609a      	str	r2, [r3, #8]
 80047ae:	193b      	adds	r3, r7, r4
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	f383 8810 	msr	PRIMASK, r3
}
 80047ba:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ce:	f3ef 8310 	mrs	r3, PRIMASK
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d6:	2480      	movs	r4, #128	; 0x80
 80047d8:	193a      	adds	r2, r7, r4
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	2301      	movs	r3, #1
 80047de:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e2:	f383 8810 	msr	PRIMASK, r3
}
 80047e6:	46c0      	nop			; (mov r8, r8)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2110      	movs	r1, #16
 80047f4:	438a      	bics	r2, r1
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	193b      	adds	r3, r7, r4
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004800:	f383 8810 	msr	PRIMASK, r3
}
 8004804:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004806:	183b      	adds	r3, r7, r0
 8004808:	881a      	ldrh	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	0011      	movs	r1, r2
 800480e:	0018      	movs	r0, r3
 8004810:	f000 f860 	bl	80048d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004814:	e044      	b.n	80048a0 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004816:	23a4      	movs	r3, #164	; 0xa4
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	2380      	movs	r3, #128	; 0x80
 800481e:	035b      	lsls	r3, r3, #13
 8004820:	4013      	ands	r3, r2
 8004822:	d010      	beq.n	8004846 <HAL_UART_IRQHandler+0x542>
 8004824:	239c      	movs	r3, #156	; 0x9c
 8004826:	18fb      	adds	r3, r7, r3
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	2380      	movs	r3, #128	; 0x80
 800482c:	03db      	lsls	r3, r3, #15
 800482e:	4013      	ands	r3, r2
 8004830:	d009      	beq.n	8004846 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2280      	movs	r2, #128	; 0x80
 8004838:	0352      	lsls	r2, r2, #13
 800483a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	0018      	movs	r0, r3
 8004840:	f000 fca0 	bl	8005184 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004844:	e02f      	b.n	80048a6 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004846:	23a4      	movs	r3, #164	; 0xa4
 8004848:	18fb      	adds	r3, r7, r3
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2280      	movs	r2, #128	; 0x80
 800484e:	4013      	ands	r3, r2
 8004850:	d00f      	beq.n	8004872 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004852:	23a0      	movs	r3, #160	; 0xa0
 8004854:	18fb      	adds	r3, r7, r3
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2280      	movs	r2, #128	; 0x80
 800485a:	4013      	ands	r3, r2
 800485c:	d009      	beq.n	8004872 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004862:	2b00      	cmp	r3, #0
 8004864:	d01e      	beq.n	80048a4 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	0010      	movs	r0, r2
 800486e:	4798      	blx	r3
    }
    return;
 8004870:	e018      	b.n	80048a4 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004872:	23a4      	movs	r3, #164	; 0xa4
 8004874:	18fb      	adds	r3, r7, r3
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2240      	movs	r2, #64	; 0x40
 800487a:	4013      	ands	r3, r2
 800487c:	d013      	beq.n	80048a6 <HAL_UART_IRQHandler+0x5a2>
 800487e:	23a0      	movs	r3, #160	; 0xa0
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2240      	movs	r2, #64	; 0x40
 8004886:	4013      	ands	r3, r2
 8004888:	d00d      	beq.n	80048a6 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	0018      	movs	r0, r3
 800488e:	f000 fc4e 	bl	800512e <UART_EndTransmit_IT>
    return;
 8004892:	e008      	b.n	80048a6 <HAL_UART_IRQHandler+0x5a2>
      return;
 8004894:	46c0      	nop			; (mov r8, r8)
 8004896:	e006      	b.n	80048a6 <HAL_UART_IRQHandler+0x5a2>
    return;
 8004898:	46c0      	nop			; (mov r8, r8)
 800489a:	e004      	b.n	80048a6 <HAL_UART_IRQHandler+0x5a2>
      return;
 800489c:	46c0      	nop			; (mov r8, r8)
 800489e:	e002      	b.n	80048a6 <HAL_UART_IRQHandler+0x5a2>
      return;
 80048a0:	46c0      	nop			; (mov r8, r8)
 80048a2:	e000      	b.n	80048a6 <HAL_UART_IRQHandler+0x5a2>
    return;
 80048a4:	46c0      	nop			; (mov r8, r8)
  }

}
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b02b      	add	sp, #172	; 0xac
 80048aa:	bd90      	pop	{r4, r7, pc}
 80048ac:	fffffeff 	.word	0xfffffeff
 80048b0:	fffffedf 	.word	0xfffffedf

080048b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80048bc:	46c0      	nop			; (mov r8, r8)
 80048be:	46bd      	mov	sp, r7
 80048c0:	b002      	add	sp, #8
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048cc:	46c0      	nop			; (mov r8, r8)
 80048ce:	46bd      	mov	sp, r7
 80048d0:	b002      	add	sp, #8
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	000a      	movs	r2, r1
 80048de:	1cbb      	adds	r3, r7, #2
 80048e0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	46bd      	mov	sp, r7
 80048e6:	b002      	add	sp, #8
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048f4:	231e      	movs	r3, #30
 80048f6:	18fb      	adds	r3, r7, r3
 80048f8:	2200      	movs	r2, #0
 80048fa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4abe      	ldr	r2, [pc, #760]	; (8004c14 <UART_SetConfig+0x328>)
 800491c:	4013      	ands	r3, r2
 800491e:	0019      	movs	r1, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	430a      	orrs	r2, r1
 8004928:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	4ab9      	ldr	r2, [pc, #740]	; (8004c18 <UART_SetConfig+0x32c>)
 8004932:	4013      	ands	r3, r2
 8004934:	0019      	movs	r1, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	4313      	orrs	r3, r2
 8004950:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	4ab0      	ldr	r2, [pc, #704]	; (8004c1c <UART_SetConfig+0x330>)
 800495a:	4013      	ands	r3, r2
 800495c:	0019      	movs	r1, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	430a      	orrs	r2, r1
 8004966:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4aac      	ldr	r2, [pc, #688]	; (8004c20 <UART_SetConfig+0x334>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d127      	bne.n	80049c2 <UART_SetConfig+0xd6>
 8004972:	4bac      	ldr	r3, [pc, #688]	; (8004c24 <UART_SetConfig+0x338>)
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	2203      	movs	r2, #3
 8004978:	4013      	ands	r3, r2
 800497a:	2b03      	cmp	r3, #3
 800497c:	d00d      	beq.n	800499a <UART_SetConfig+0xae>
 800497e:	d81b      	bhi.n	80049b8 <UART_SetConfig+0xcc>
 8004980:	2b02      	cmp	r3, #2
 8004982:	d014      	beq.n	80049ae <UART_SetConfig+0xc2>
 8004984:	d818      	bhi.n	80049b8 <UART_SetConfig+0xcc>
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <UART_SetConfig+0xa4>
 800498a:	2b01      	cmp	r3, #1
 800498c:	d00a      	beq.n	80049a4 <UART_SetConfig+0xb8>
 800498e:	e013      	b.n	80049b8 <UART_SetConfig+0xcc>
 8004990:	231f      	movs	r3, #31
 8004992:	18fb      	adds	r3, r7, r3
 8004994:	2200      	movs	r2, #0
 8004996:	701a      	strb	r2, [r3, #0]
 8004998:	e0bd      	b.n	8004b16 <UART_SetConfig+0x22a>
 800499a:	231f      	movs	r3, #31
 800499c:	18fb      	adds	r3, r7, r3
 800499e:	2202      	movs	r2, #2
 80049a0:	701a      	strb	r2, [r3, #0]
 80049a2:	e0b8      	b.n	8004b16 <UART_SetConfig+0x22a>
 80049a4:	231f      	movs	r3, #31
 80049a6:	18fb      	adds	r3, r7, r3
 80049a8:	2204      	movs	r2, #4
 80049aa:	701a      	strb	r2, [r3, #0]
 80049ac:	e0b3      	b.n	8004b16 <UART_SetConfig+0x22a>
 80049ae:	231f      	movs	r3, #31
 80049b0:	18fb      	adds	r3, r7, r3
 80049b2:	2208      	movs	r2, #8
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	e0ae      	b.n	8004b16 <UART_SetConfig+0x22a>
 80049b8:	231f      	movs	r3, #31
 80049ba:	18fb      	adds	r3, r7, r3
 80049bc:	2210      	movs	r2, #16
 80049be:	701a      	strb	r2, [r3, #0]
 80049c0:	e0a9      	b.n	8004b16 <UART_SetConfig+0x22a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a98      	ldr	r2, [pc, #608]	; (8004c28 <UART_SetConfig+0x33c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d134      	bne.n	8004a36 <UART_SetConfig+0x14a>
 80049cc:	4b95      	ldr	r3, [pc, #596]	; (8004c24 <UART_SetConfig+0x338>)
 80049ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049d0:	23c0      	movs	r3, #192	; 0xc0
 80049d2:	029b      	lsls	r3, r3, #10
 80049d4:	4013      	ands	r3, r2
 80049d6:	22c0      	movs	r2, #192	; 0xc0
 80049d8:	0292      	lsls	r2, r2, #10
 80049da:	4293      	cmp	r3, r2
 80049dc:	d017      	beq.n	8004a0e <UART_SetConfig+0x122>
 80049de:	22c0      	movs	r2, #192	; 0xc0
 80049e0:	0292      	lsls	r2, r2, #10
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d822      	bhi.n	8004a2c <UART_SetConfig+0x140>
 80049e6:	2280      	movs	r2, #128	; 0x80
 80049e8:	0292      	lsls	r2, r2, #10
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d019      	beq.n	8004a22 <UART_SetConfig+0x136>
 80049ee:	2280      	movs	r2, #128	; 0x80
 80049f0:	0292      	lsls	r2, r2, #10
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d81a      	bhi.n	8004a2c <UART_SetConfig+0x140>
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d004      	beq.n	8004a04 <UART_SetConfig+0x118>
 80049fa:	2280      	movs	r2, #128	; 0x80
 80049fc:	0252      	lsls	r2, r2, #9
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00a      	beq.n	8004a18 <UART_SetConfig+0x12c>
 8004a02:	e013      	b.n	8004a2c <UART_SetConfig+0x140>
 8004a04:	231f      	movs	r3, #31
 8004a06:	18fb      	adds	r3, r7, r3
 8004a08:	2200      	movs	r2, #0
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	e083      	b.n	8004b16 <UART_SetConfig+0x22a>
 8004a0e:	231f      	movs	r3, #31
 8004a10:	18fb      	adds	r3, r7, r3
 8004a12:	2202      	movs	r2, #2
 8004a14:	701a      	strb	r2, [r3, #0]
 8004a16:	e07e      	b.n	8004b16 <UART_SetConfig+0x22a>
 8004a18:	231f      	movs	r3, #31
 8004a1a:	18fb      	adds	r3, r7, r3
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	701a      	strb	r2, [r3, #0]
 8004a20:	e079      	b.n	8004b16 <UART_SetConfig+0x22a>
 8004a22:	231f      	movs	r3, #31
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	2208      	movs	r2, #8
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	e074      	b.n	8004b16 <UART_SetConfig+0x22a>
 8004a2c:	231f      	movs	r3, #31
 8004a2e:	18fb      	adds	r3, r7, r3
 8004a30:	2210      	movs	r2, #16
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	e06f      	b.n	8004b16 <UART_SetConfig+0x22a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a7c      	ldr	r2, [pc, #496]	; (8004c2c <UART_SetConfig+0x340>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d134      	bne.n	8004aaa <UART_SetConfig+0x1be>
 8004a40:	4b78      	ldr	r3, [pc, #480]	; (8004c24 <UART_SetConfig+0x338>)
 8004a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a44:	23c0      	movs	r3, #192	; 0xc0
 8004a46:	031b      	lsls	r3, r3, #12
 8004a48:	4013      	ands	r3, r2
 8004a4a:	22c0      	movs	r2, #192	; 0xc0
 8004a4c:	0312      	lsls	r2, r2, #12
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d017      	beq.n	8004a82 <UART_SetConfig+0x196>
 8004a52:	22c0      	movs	r2, #192	; 0xc0
 8004a54:	0312      	lsls	r2, r2, #12
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d822      	bhi.n	8004aa0 <UART_SetConfig+0x1b4>
 8004a5a:	2280      	movs	r2, #128	; 0x80
 8004a5c:	0312      	lsls	r2, r2, #12
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d019      	beq.n	8004a96 <UART_SetConfig+0x1aa>
 8004a62:	2280      	movs	r2, #128	; 0x80
 8004a64:	0312      	lsls	r2, r2, #12
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d81a      	bhi.n	8004aa0 <UART_SetConfig+0x1b4>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d004      	beq.n	8004a78 <UART_SetConfig+0x18c>
 8004a6e:	2280      	movs	r2, #128	; 0x80
 8004a70:	02d2      	lsls	r2, r2, #11
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00a      	beq.n	8004a8c <UART_SetConfig+0x1a0>
 8004a76:	e013      	b.n	8004aa0 <UART_SetConfig+0x1b4>
 8004a78:	231f      	movs	r3, #31
 8004a7a:	18fb      	adds	r3, r7, r3
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	701a      	strb	r2, [r3, #0]
 8004a80:	e049      	b.n	8004b16 <UART_SetConfig+0x22a>
 8004a82:	231f      	movs	r3, #31
 8004a84:	18fb      	adds	r3, r7, r3
 8004a86:	2202      	movs	r2, #2
 8004a88:	701a      	strb	r2, [r3, #0]
 8004a8a:	e044      	b.n	8004b16 <UART_SetConfig+0x22a>
 8004a8c:	231f      	movs	r3, #31
 8004a8e:	18fb      	adds	r3, r7, r3
 8004a90:	2204      	movs	r2, #4
 8004a92:	701a      	strb	r2, [r3, #0]
 8004a94:	e03f      	b.n	8004b16 <UART_SetConfig+0x22a>
 8004a96:	231f      	movs	r3, #31
 8004a98:	18fb      	adds	r3, r7, r3
 8004a9a:	2208      	movs	r2, #8
 8004a9c:	701a      	strb	r2, [r3, #0]
 8004a9e:	e03a      	b.n	8004b16 <UART_SetConfig+0x22a>
 8004aa0:	231f      	movs	r3, #31
 8004aa2:	18fb      	adds	r3, r7, r3
 8004aa4:	2210      	movs	r2, #16
 8004aa6:	701a      	strb	r2, [r3, #0]
 8004aa8:	e035      	b.n	8004b16 <UART_SetConfig+0x22a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a60      	ldr	r2, [pc, #384]	; (8004c30 <UART_SetConfig+0x344>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d104      	bne.n	8004abe <UART_SetConfig+0x1d2>
 8004ab4:	231f      	movs	r3, #31
 8004ab6:	18fb      	adds	r3, r7, r3
 8004ab8:	2200      	movs	r2, #0
 8004aba:	701a      	strb	r2, [r3, #0]
 8004abc:	e02b      	b.n	8004b16 <UART_SetConfig+0x22a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a5c      	ldr	r2, [pc, #368]	; (8004c34 <UART_SetConfig+0x348>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d104      	bne.n	8004ad2 <UART_SetConfig+0x1e6>
 8004ac8:	231f      	movs	r3, #31
 8004aca:	18fb      	adds	r3, r7, r3
 8004acc:	2200      	movs	r2, #0
 8004ace:	701a      	strb	r2, [r3, #0]
 8004ad0:	e021      	b.n	8004b16 <UART_SetConfig+0x22a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a58      	ldr	r2, [pc, #352]	; (8004c38 <UART_SetConfig+0x34c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d104      	bne.n	8004ae6 <UART_SetConfig+0x1fa>
 8004adc:	231f      	movs	r3, #31
 8004ade:	18fb      	adds	r3, r7, r3
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	701a      	strb	r2, [r3, #0]
 8004ae4:	e017      	b.n	8004b16 <UART_SetConfig+0x22a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a54      	ldr	r2, [pc, #336]	; (8004c3c <UART_SetConfig+0x350>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d104      	bne.n	8004afa <UART_SetConfig+0x20e>
 8004af0:	231f      	movs	r3, #31
 8004af2:	18fb      	adds	r3, r7, r3
 8004af4:	2200      	movs	r2, #0
 8004af6:	701a      	strb	r2, [r3, #0]
 8004af8:	e00d      	b.n	8004b16 <UART_SetConfig+0x22a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a50      	ldr	r2, [pc, #320]	; (8004c40 <UART_SetConfig+0x354>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d104      	bne.n	8004b0e <UART_SetConfig+0x222>
 8004b04:	231f      	movs	r3, #31
 8004b06:	18fb      	adds	r3, r7, r3
 8004b08:	2200      	movs	r2, #0
 8004b0a:	701a      	strb	r2, [r3, #0]
 8004b0c:	e003      	b.n	8004b16 <UART_SetConfig+0x22a>
 8004b0e:	231f      	movs	r3, #31
 8004b10:	18fb      	adds	r3, r7, r3
 8004b12:	2210      	movs	r2, #16
 8004b14:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69da      	ldr	r2, [r3, #28]
 8004b1a:	2380      	movs	r3, #128	; 0x80
 8004b1c:	021b      	lsls	r3, r3, #8
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d15d      	bne.n	8004bde <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8004b22:	231f      	movs	r3, #31
 8004b24:	18fb      	adds	r3, r7, r3
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d015      	beq.n	8004b58 <UART_SetConfig+0x26c>
 8004b2c:	dc18      	bgt.n	8004b60 <UART_SetConfig+0x274>
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d00d      	beq.n	8004b4e <UART_SetConfig+0x262>
 8004b32:	dc15      	bgt.n	8004b60 <UART_SetConfig+0x274>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <UART_SetConfig+0x252>
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d005      	beq.n	8004b48 <UART_SetConfig+0x25c>
 8004b3c:	e010      	b.n	8004b60 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b3e:	f7ff f8dd 	bl	8003cfc <HAL_RCC_GetPCLK1Freq>
 8004b42:	0003      	movs	r3, r0
 8004b44:	61bb      	str	r3, [r7, #24]
        break;
 8004b46:	e012      	b.n	8004b6e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b48:	4b3e      	ldr	r3, [pc, #248]	; (8004c44 <UART_SetConfig+0x358>)
 8004b4a:	61bb      	str	r3, [r7, #24]
        break;
 8004b4c:	e00f      	b.n	8004b6e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b4e:	f7ff f84b 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8004b52:	0003      	movs	r3, r0
 8004b54:	61bb      	str	r3, [r7, #24]
        break;
 8004b56:	e00a      	b.n	8004b6e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b58:	2380      	movs	r3, #128	; 0x80
 8004b5a:	021b      	lsls	r3, r3, #8
 8004b5c:	61bb      	str	r3, [r7, #24]
        break;
 8004b5e:	e006      	b.n	8004b6e <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b64:	231e      	movs	r3, #30
 8004b66:	18fb      	adds	r3, r7, r3
 8004b68:	2201      	movs	r2, #1
 8004b6a:	701a      	strb	r2, [r3, #0]
        break;
 8004b6c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d100      	bne.n	8004b76 <UART_SetConfig+0x28a>
 8004b74:	e095      	b.n	8004ca2 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	005a      	lsls	r2, r3, #1
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	085b      	lsrs	r3, r3, #1
 8004b80:	18d2      	adds	r2, r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	0019      	movs	r1, r3
 8004b88:	0010      	movs	r0, r2
 8004b8a:	f7fb fad7 	bl	800013c <__udivsi3>
 8004b8e:	0003      	movs	r3, r0
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	2b0f      	cmp	r3, #15
 8004b98:	d91c      	bls.n	8004bd4 <UART_SetConfig+0x2e8>
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	025b      	lsls	r3, r3, #9
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d217      	bcs.n	8004bd4 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	200e      	movs	r0, #14
 8004baa:	183b      	adds	r3, r7, r0
 8004bac:	210f      	movs	r1, #15
 8004bae:	438a      	bics	r2, r1
 8004bb0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	085b      	lsrs	r3, r3, #1
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2207      	movs	r2, #7
 8004bba:	4013      	ands	r3, r2
 8004bbc:	b299      	uxth	r1, r3
 8004bbe:	183b      	adds	r3, r7, r0
 8004bc0:	183a      	adds	r2, r7, r0
 8004bc2:	8812      	ldrh	r2, [r2, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	183a      	adds	r2, r7, r0
 8004bce:	8812      	ldrh	r2, [r2, #0]
 8004bd0:	60da      	str	r2, [r3, #12]
 8004bd2:	e066      	b.n	8004ca2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004bd4:	231e      	movs	r3, #30
 8004bd6:	18fb      	adds	r3, r7, r3
 8004bd8:	2201      	movs	r2, #1
 8004bda:	701a      	strb	r2, [r3, #0]
 8004bdc:	e061      	b.n	8004ca2 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bde:	231f      	movs	r3, #31
 8004be0:	18fb      	adds	r3, r7, r3
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d02f      	beq.n	8004c48 <UART_SetConfig+0x35c>
 8004be8:	dc32      	bgt.n	8004c50 <UART_SetConfig+0x364>
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d00d      	beq.n	8004c0a <UART_SetConfig+0x31e>
 8004bee:	dc2f      	bgt.n	8004c50 <UART_SetConfig+0x364>
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <UART_SetConfig+0x30e>
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d005      	beq.n	8004c04 <UART_SetConfig+0x318>
 8004bf8:	e02a      	b.n	8004c50 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bfa:	f7ff f87f 	bl	8003cfc <HAL_RCC_GetPCLK1Freq>
 8004bfe:	0003      	movs	r3, r0
 8004c00:	61bb      	str	r3, [r7, #24]
        break;
 8004c02:	e02c      	b.n	8004c5e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c04:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <UART_SetConfig+0x358>)
 8004c06:	61bb      	str	r3, [r7, #24]
        break;
 8004c08:	e029      	b.n	8004c5e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c0a:	f7fe ffed 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8004c0e:	0003      	movs	r3, r0
 8004c10:	61bb      	str	r3, [r7, #24]
        break;
 8004c12:	e024      	b.n	8004c5e <UART_SetConfig+0x372>
 8004c14:	efff69f3 	.word	0xefff69f3
 8004c18:	ffffcfff 	.word	0xffffcfff
 8004c1c:	fffff4ff 	.word	0xfffff4ff
 8004c20:	40013800 	.word	0x40013800
 8004c24:	40021000 	.word	0x40021000
 8004c28:	40004400 	.word	0x40004400
 8004c2c:	40004800 	.word	0x40004800
 8004c30:	40004c00 	.word	0x40004c00
 8004c34:	40005000 	.word	0x40005000
 8004c38:	40011400 	.word	0x40011400
 8004c3c:	40011800 	.word	0x40011800
 8004c40:	40011c00 	.word	0x40011c00
 8004c44:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c48:	2380      	movs	r3, #128	; 0x80
 8004c4a:	021b      	lsls	r3, r3, #8
 8004c4c:	61bb      	str	r3, [r7, #24]
        break;
 8004c4e:	e006      	b.n	8004c5e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c54:	231e      	movs	r3, #30
 8004c56:	18fb      	adds	r3, r7, r3
 8004c58:	2201      	movs	r2, #1
 8004c5a:	701a      	strb	r2, [r3, #0]
        break;
 8004c5c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01e      	beq.n	8004ca2 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	085a      	lsrs	r2, r3, #1
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	18d2      	adds	r2, r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	0019      	movs	r1, r3
 8004c74:	0010      	movs	r0, r2
 8004c76:	f7fb fa61 	bl	800013c <__udivsi3>
 8004c7a:	0003      	movs	r3, r0
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	2b0f      	cmp	r3, #15
 8004c84:	d909      	bls.n	8004c9a <UART_SetConfig+0x3ae>
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	2380      	movs	r3, #128	; 0x80
 8004c8a:	025b      	lsls	r3, r3, #9
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d204      	bcs.n	8004c9a <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	60da      	str	r2, [r3, #12]
 8004c98:	e003      	b.n	8004ca2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004c9a:	231e      	movs	r3, #30
 8004c9c:	18fb      	adds	r3, r7, r3
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004cae:	231e      	movs	r3, #30
 8004cb0:	18fb      	adds	r3, r7, r3
 8004cb2:	781b      	ldrb	r3, [r3, #0]
}
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b008      	add	sp, #32
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	2201      	movs	r2, #1
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d00b      	beq.n	8004ce6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	4a4a      	ldr	r2, [pc, #296]	; (8004e00 <UART_AdvFeatureConfig+0x144>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	0019      	movs	r1, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	2202      	movs	r2, #2
 8004cec:	4013      	ands	r3, r2
 8004cee:	d00b      	beq.n	8004d08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	4a43      	ldr	r2, [pc, #268]	; (8004e04 <UART_AdvFeatureConfig+0x148>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	0019      	movs	r1, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	2204      	movs	r2, #4
 8004d0e:	4013      	ands	r3, r2
 8004d10:	d00b      	beq.n	8004d2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	4a3b      	ldr	r2, [pc, #236]	; (8004e08 <UART_AdvFeatureConfig+0x14c>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	0019      	movs	r1, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	2208      	movs	r2, #8
 8004d30:	4013      	ands	r3, r2
 8004d32:	d00b      	beq.n	8004d4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	4a34      	ldr	r2, [pc, #208]	; (8004e0c <UART_AdvFeatureConfig+0x150>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	0019      	movs	r1, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	2210      	movs	r2, #16
 8004d52:	4013      	ands	r3, r2
 8004d54:	d00b      	beq.n	8004d6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	4a2c      	ldr	r2, [pc, #176]	; (8004e10 <UART_AdvFeatureConfig+0x154>)
 8004d5e:	4013      	ands	r3, r2
 8004d60:	0019      	movs	r1, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	2220      	movs	r2, #32
 8004d74:	4013      	ands	r3, r2
 8004d76:	d00b      	beq.n	8004d90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	4a25      	ldr	r2, [pc, #148]	; (8004e14 <UART_AdvFeatureConfig+0x158>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	0019      	movs	r1, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	2240      	movs	r2, #64	; 0x40
 8004d96:	4013      	ands	r3, r2
 8004d98:	d01d      	beq.n	8004dd6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	4a1d      	ldr	r2, [pc, #116]	; (8004e18 <UART_AdvFeatureConfig+0x15c>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	0019      	movs	r1, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004db6:	2380      	movs	r3, #128	; 0x80
 8004db8:	035b      	lsls	r3, r3, #13
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d10b      	bne.n	8004dd6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	4a15      	ldr	r2, [pc, #84]	; (8004e1c <UART_AdvFeatureConfig+0x160>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	0019      	movs	r1, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	2280      	movs	r2, #128	; 0x80
 8004ddc:	4013      	ands	r3, r2
 8004dde:	d00b      	beq.n	8004df8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	4a0e      	ldr	r2, [pc, #56]	; (8004e20 <UART_AdvFeatureConfig+0x164>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	0019      	movs	r1, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	605a      	str	r2, [r3, #4]
  }
}
 8004df8:	46c0      	nop			; (mov r8, r8)
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b002      	add	sp, #8
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	fffdffff 	.word	0xfffdffff
 8004e04:	fffeffff 	.word	0xfffeffff
 8004e08:	fffbffff 	.word	0xfffbffff
 8004e0c:	ffff7fff 	.word	0xffff7fff
 8004e10:	ffffefff 	.word	0xffffefff
 8004e14:	ffffdfff 	.word	0xffffdfff
 8004e18:	ffefffff 	.word	0xffefffff
 8004e1c:	ff9fffff 	.word	0xff9fffff
 8004e20:	fff7ffff 	.word	0xfff7ffff

08004e24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2280      	movs	r2, #128	; 0x80
 8004e30:	2100      	movs	r1, #0
 8004e32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e34:	f7fd fe58 	bl	8002ae8 <HAL_GetTick>
 8004e38:	0003      	movs	r3, r0
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2208      	movs	r2, #8
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d10c      	bne.n	8004e64 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2280      	movs	r2, #128	; 0x80
 8004e4e:	0391      	lsls	r1, r2, #14
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	4a17      	ldr	r2, [pc, #92]	; (8004eb0 <UART_CheckIdleState+0x8c>)
 8004e54:	9200      	str	r2, [sp, #0]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f000 f82c 	bl	8004eb4 <UART_WaitOnFlagUntilTimeout>
 8004e5c:	1e03      	subs	r3, r0, #0
 8004e5e:	d001      	beq.n	8004e64 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e021      	b.n	8004ea8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2204      	movs	r2, #4
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d10c      	bne.n	8004e8c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2280      	movs	r2, #128	; 0x80
 8004e76:	03d1      	lsls	r1, r2, #15
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	4a0d      	ldr	r2, [pc, #52]	; (8004eb0 <UART_CheckIdleState+0x8c>)
 8004e7c:	9200      	str	r2, [sp, #0]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f000 f818 	bl	8004eb4 <UART_WaitOnFlagUntilTimeout>
 8004e84:	1e03      	subs	r3, r0, #0
 8004e86:	d001      	beq.n	8004e8c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e00d      	b.n	8004ea8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2274      	movs	r2, #116	; 0x74
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	b004      	add	sp, #16
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	01ffffff 	.word	0x01ffffff

08004eb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b094      	sub	sp, #80	; 0x50
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	1dfb      	adds	r3, r7, #7
 8004ec2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ec4:	e0a3      	b.n	800500e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ec8:	3301      	adds	r3, #1
 8004eca:	d100      	bne.n	8004ece <UART_WaitOnFlagUntilTimeout+0x1a>
 8004ecc:	e09f      	b.n	800500e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ece:	f7fd fe0b 	bl	8002ae8 <HAL_GetTick>
 8004ed2:	0002      	movs	r2, r0
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d302      	bcc.n	8004ee4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d13d      	bne.n	8004f60 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eec:	647b      	str	r3, [r7, #68]	; 0x44
 8004eee:	2301      	movs	r3, #1
 8004ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	f383 8810 	msr	PRIMASK, r3
}
 8004ef8:	46c0      	nop			; (mov r8, r8)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	494c      	ldr	r1, [pc, #304]	; (8005038 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004f06:	400a      	ands	r2, r1
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f0c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	f383 8810 	msr	PRIMASK, r3
}
 8004f14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f16:	f3ef 8310 	mrs	r3, PRIMASK
 8004f1a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1e:	643b      	str	r3, [r7, #64]	; 0x40
 8004f20:	2301      	movs	r3, #1
 8004f22:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f26:	f383 8810 	msr	PRIMASK, r3
}
 8004f2a:	46c0      	nop			; (mov r8, r8)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2101      	movs	r1, #1
 8004f38:	438a      	bics	r2, r1
 8004f3a:	609a      	str	r2, [r3, #8]
 8004f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f42:	f383 8810 	msr	PRIMASK, r3
}
 8004f46:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2220      	movs	r2, #32
 8004f52:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2274      	movs	r2, #116	; 0x74
 8004f58:	2100      	movs	r1, #0
 8004f5a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e067      	b.n	8005030 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2204      	movs	r2, #4
 8004f68:	4013      	ands	r3, r2
 8004f6a:	d050      	beq.n	800500e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69da      	ldr	r2, [r3, #28]
 8004f72:	2380      	movs	r3, #128	; 0x80
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	401a      	ands	r2, r3
 8004f78:	2380      	movs	r3, #128	; 0x80
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d146      	bne.n	800500e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2280      	movs	r2, #128	; 0x80
 8004f86:	0112      	lsls	r2, r2, #4
 8004f88:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f8e:	613b      	str	r3, [r7, #16]
  return(result);
 8004f90:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f94:	2301      	movs	r3, #1
 8004f96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f383 8810 	msr	PRIMASK, r3
}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4923      	ldr	r1, [pc, #140]	; (8005038 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004fac:	400a      	ands	r2, r1
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	f383 8810 	msr	PRIMASK, r3
}
 8004fba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8004fc0:	61fb      	str	r3, [r7, #28]
  return(result);
 8004fc2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	f383 8810 	msr	PRIMASK, r3
}
 8004fd0:	46c0      	nop			; (mov r8, r8)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2101      	movs	r1, #1
 8004fde:	438a      	bics	r2, r1
 8004fe0:	609a      	str	r2, [r3, #8]
 8004fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	f383 8810 	msr	PRIMASK, r3
}
 8004fec:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2280      	movs	r2, #128	; 0x80
 8004ffe:	2120      	movs	r1, #32
 8005000:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2274      	movs	r2, #116	; 0x74
 8005006:	2100      	movs	r1, #0
 8005008:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e010      	b.n	8005030 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	4013      	ands	r3, r2
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	425a      	negs	r2, r3
 800501e:	4153      	adcs	r3, r2
 8005020:	b2db      	uxtb	r3, r3
 8005022:	001a      	movs	r2, r3
 8005024:	1dfb      	adds	r3, r7, #7
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d100      	bne.n	800502e <UART_WaitOnFlagUntilTimeout+0x17a>
 800502c:	e74b      	b.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	0018      	movs	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	b014      	add	sp, #80	; 0x50
 8005036:	bd80      	pop	{r7, pc}
 8005038:	fffffe5f 	.word	0xfffffe5f

0800503c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08e      	sub	sp, #56	; 0x38
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005044:	f3ef 8310 	mrs	r3, PRIMASK
 8005048:	617b      	str	r3, [r7, #20]
  return(result);
 800504a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800504c:	637b      	str	r3, [r7, #52]	; 0x34
 800504e:	2301      	movs	r3, #1
 8005050:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	f383 8810 	msr	PRIMASK, r3
}
 8005058:	46c0      	nop			; (mov r8, r8)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4925      	ldr	r1, [pc, #148]	; (80050fc <UART_EndRxTransfer+0xc0>)
 8005066:	400a      	ands	r2, r1
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	f383 8810 	msr	PRIMASK, r3
}
 8005074:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005076:	f3ef 8310 	mrs	r3, PRIMASK
 800507a:	623b      	str	r3, [r7, #32]
  return(result);
 800507c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800507e:	633b      	str	r3, [r7, #48]	; 0x30
 8005080:	2301      	movs	r3, #1
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	f383 8810 	msr	PRIMASK, r3
}
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2101      	movs	r1, #1
 8005098:	438a      	bics	r2, r1
 800509a:	609a      	str	r2, [r3, #8]
 800509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a2:	f383 8810 	msr	PRIMASK, r3
}
 80050a6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d118      	bne.n	80050e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050b0:	f3ef 8310 	mrs	r3, PRIMASK
 80050b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80050b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ba:	2301      	movs	r3, #1
 80050bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f383 8810 	msr	PRIMASK, r3
}
 80050c4:	46c0      	nop			; (mov r8, r8)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2110      	movs	r1, #16
 80050d2:	438a      	bics	r2, r1
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f383 8810 	msr	PRIMASK, r3
}
 80050e0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2220      	movs	r2, #32
 80050e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80050f4:	46c0      	nop			; (mov r8, r8)
 80050f6:	46bd      	mov	sp, r7
 80050f8:	b00e      	add	sp, #56	; 0x38
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	fffffedf 	.word	0xfffffedf

08005100 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	225a      	movs	r2, #90	; 0x5a
 8005112:	2100      	movs	r1, #0
 8005114:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2252      	movs	r2, #82	; 0x52
 800511a:	2100      	movs	r1, #0
 800511c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	0018      	movs	r0, r3
 8005122:	f7ff fbcf 	bl	80048c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005126:	46c0      	nop			; (mov r8, r8)
 8005128:	46bd      	mov	sp, r7
 800512a:	b004      	add	sp, #16
 800512c:	bd80      	pop	{r7, pc}

0800512e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b086      	sub	sp, #24
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005136:	f3ef 8310 	mrs	r3, PRIMASK
 800513a:	60bb      	str	r3, [r7, #8]
  return(result);
 800513c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	2301      	movs	r3, #1
 8005142:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f383 8810 	msr	PRIMASK, r3
}
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2140      	movs	r1, #64	; 0x40
 8005158:	438a      	bics	r2, r1
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f383 8810 	msr	PRIMASK, r3
}
 8005166:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2220      	movs	r2, #32
 800516c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	0018      	movs	r0, r3
 8005178:	f7ff fb9c 	bl	80048b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800517c:	46c0      	nop			; (mov r8, r8)
 800517e:	46bd      	mov	sp, r7
 8005180:	b006      	add	sp, #24
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800518c:	46c0      	nop			; (mov r8, r8)
 800518e:	46bd      	mov	sp, r7
 8005190:	b002      	add	sp, #8
 8005192:	bd80      	pop	{r7, pc}

08005194 <__errno>:
 8005194:	4b01      	ldr	r3, [pc, #4]	; (800519c <__errno+0x8>)
 8005196:	6818      	ldr	r0, [r3, #0]
 8005198:	4770      	bx	lr
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	20000014 	.word	0x20000014

080051a0 <__libc_init_array>:
 80051a0:	b570      	push	{r4, r5, r6, lr}
 80051a2:	2600      	movs	r6, #0
 80051a4:	4d0c      	ldr	r5, [pc, #48]	; (80051d8 <__libc_init_array+0x38>)
 80051a6:	4c0d      	ldr	r4, [pc, #52]	; (80051dc <__libc_init_array+0x3c>)
 80051a8:	1b64      	subs	r4, r4, r5
 80051aa:	10a4      	asrs	r4, r4, #2
 80051ac:	42a6      	cmp	r6, r4
 80051ae:	d109      	bne.n	80051c4 <__libc_init_array+0x24>
 80051b0:	2600      	movs	r6, #0
 80051b2:	f004 fd03 	bl	8009bbc <_init>
 80051b6:	4d0a      	ldr	r5, [pc, #40]	; (80051e0 <__libc_init_array+0x40>)
 80051b8:	4c0a      	ldr	r4, [pc, #40]	; (80051e4 <__libc_init_array+0x44>)
 80051ba:	1b64      	subs	r4, r4, r5
 80051bc:	10a4      	asrs	r4, r4, #2
 80051be:	42a6      	cmp	r6, r4
 80051c0:	d105      	bne.n	80051ce <__libc_init_array+0x2e>
 80051c2:	bd70      	pop	{r4, r5, r6, pc}
 80051c4:	00b3      	lsls	r3, r6, #2
 80051c6:	58eb      	ldr	r3, [r5, r3]
 80051c8:	4798      	blx	r3
 80051ca:	3601      	adds	r6, #1
 80051cc:	e7ee      	b.n	80051ac <__libc_init_array+0xc>
 80051ce:	00b3      	lsls	r3, r6, #2
 80051d0:	58eb      	ldr	r3, [r5, r3]
 80051d2:	4798      	blx	r3
 80051d4:	3601      	adds	r6, #1
 80051d6:	e7f2      	b.n	80051be <__libc_init_array+0x1e>
 80051d8:	0800a144 	.word	0x0800a144
 80051dc:	0800a144 	.word	0x0800a144
 80051e0:	0800a144 	.word	0x0800a144
 80051e4:	0800a148 	.word	0x0800a148

080051e8 <memset>:
 80051e8:	0003      	movs	r3, r0
 80051ea:	1882      	adds	r2, r0, r2
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d100      	bne.n	80051f2 <memset+0xa>
 80051f0:	4770      	bx	lr
 80051f2:	7019      	strb	r1, [r3, #0]
 80051f4:	3301      	adds	r3, #1
 80051f6:	e7f9      	b.n	80051ec <memset+0x4>

080051f8 <__cvt>:
 80051f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051fa:	001e      	movs	r6, r3
 80051fc:	2300      	movs	r3, #0
 80051fe:	0014      	movs	r4, r2
 8005200:	b08b      	sub	sp, #44	; 0x2c
 8005202:	429e      	cmp	r6, r3
 8005204:	da04      	bge.n	8005210 <__cvt+0x18>
 8005206:	2180      	movs	r1, #128	; 0x80
 8005208:	0609      	lsls	r1, r1, #24
 800520a:	1873      	adds	r3, r6, r1
 800520c:	001e      	movs	r6, r3
 800520e:	232d      	movs	r3, #45	; 0x2d
 8005210:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005212:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005214:	7013      	strb	r3, [r2, #0]
 8005216:	2320      	movs	r3, #32
 8005218:	2203      	movs	r2, #3
 800521a:	439f      	bics	r7, r3
 800521c:	2f46      	cmp	r7, #70	; 0x46
 800521e:	d007      	beq.n	8005230 <__cvt+0x38>
 8005220:	003b      	movs	r3, r7
 8005222:	3b45      	subs	r3, #69	; 0x45
 8005224:	4259      	negs	r1, r3
 8005226:	414b      	adcs	r3, r1
 8005228:	9910      	ldr	r1, [sp, #64]	; 0x40
 800522a:	3a01      	subs	r2, #1
 800522c:	18cb      	adds	r3, r1, r3
 800522e:	9310      	str	r3, [sp, #64]	; 0x40
 8005230:	ab09      	add	r3, sp, #36	; 0x24
 8005232:	9304      	str	r3, [sp, #16]
 8005234:	ab08      	add	r3, sp, #32
 8005236:	9303      	str	r3, [sp, #12]
 8005238:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800523a:	9200      	str	r2, [sp, #0]
 800523c:	9302      	str	r3, [sp, #8]
 800523e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005240:	0022      	movs	r2, r4
 8005242:	9301      	str	r3, [sp, #4]
 8005244:	0033      	movs	r3, r6
 8005246:	f001 fddf 	bl	8006e08 <_dtoa_r>
 800524a:	0005      	movs	r5, r0
 800524c:	2f47      	cmp	r7, #71	; 0x47
 800524e:	d102      	bne.n	8005256 <__cvt+0x5e>
 8005250:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005252:	07db      	lsls	r3, r3, #31
 8005254:	d528      	bpl.n	80052a8 <__cvt+0xb0>
 8005256:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005258:	18eb      	adds	r3, r5, r3
 800525a:	9307      	str	r3, [sp, #28]
 800525c:	2f46      	cmp	r7, #70	; 0x46
 800525e:	d114      	bne.n	800528a <__cvt+0x92>
 8005260:	782b      	ldrb	r3, [r5, #0]
 8005262:	2b30      	cmp	r3, #48	; 0x30
 8005264:	d10c      	bne.n	8005280 <__cvt+0x88>
 8005266:	2200      	movs	r2, #0
 8005268:	2300      	movs	r3, #0
 800526a:	0020      	movs	r0, r4
 800526c:	0031      	movs	r1, r6
 800526e:	f7fb f8eb 	bl	8000448 <__aeabi_dcmpeq>
 8005272:	2800      	cmp	r0, #0
 8005274:	d104      	bne.n	8005280 <__cvt+0x88>
 8005276:	2301      	movs	r3, #1
 8005278:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800527e:	6013      	str	r3, [r2, #0]
 8005280:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005282:	9a07      	ldr	r2, [sp, #28]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	18d3      	adds	r3, r2, r3
 8005288:	9307      	str	r3, [sp, #28]
 800528a:	2200      	movs	r2, #0
 800528c:	2300      	movs	r3, #0
 800528e:	0020      	movs	r0, r4
 8005290:	0031      	movs	r1, r6
 8005292:	f7fb f8d9 	bl	8000448 <__aeabi_dcmpeq>
 8005296:	2800      	cmp	r0, #0
 8005298:	d001      	beq.n	800529e <__cvt+0xa6>
 800529a:	9b07      	ldr	r3, [sp, #28]
 800529c:	9309      	str	r3, [sp, #36]	; 0x24
 800529e:	2230      	movs	r2, #48	; 0x30
 80052a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052a2:	9907      	ldr	r1, [sp, #28]
 80052a4:	428b      	cmp	r3, r1
 80052a6:	d306      	bcc.n	80052b6 <__cvt+0xbe>
 80052a8:	0028      	movs	r0, r5
 80052aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80052ae:	1b5b      	subs	r3, r3, r5
 80052b0:	6013      	str	r3, [r2, #0]
 80052b2:	b00b      	add	sp, #44	; 0x2c
 80052b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052b6:	1c59      	adds	r1, r3, #1
 80052b8:	9109      	str	r1, [sp, #36]	; 0x24
 80052ba:	701a      	strb	r2, [r3, #0]
 80052bc:	e7f0      	b.n	80052a0 <__cvt+0xa8>

080052be <__exponent>:
 80052be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052c0:	1c83      	adds	r3, r0, #2
 80052c2:	b087      	sub	sp, #28
 80052c4:	9303      	str	r3, [sp, #12]
 80052c6:	0005      	movs	r5, r0
 80052c8:	000c      	movs	r4, r1
 80052ca:	232b      	movs	r3, #43	; 0x2b
 80052cc:	7002      	strb	r2, [r0, #0]
 80052ce:	2900      	cmp	r1, #0
 80052d0:	da01      	bge.n	80052d6 <__exponent+0x18>
 80052d2:	424c      	negs	r4, r1
 80052d4:	3302      	adds	r3, #2
 80052d6:	706b      	strb	r3, [r5, #1]
 80052d8:	2c09      	cmp	r4, #9
 80052da:	dd31      	ble.n	8005340 <__exponent+0x82>
 80052dc:	270a      	movs	r7, #10
 80052de:	ab04      	add	r3, sp, #16
 80052e0:	1dde      	adds	r6, r3, #7
 80052e2:	0020      	movs	r0, r4
 80052e4:	0039      	movs	r1, r7
 80052e6:	9601      	str	r6, [sp, #4]
 80052e8:	f7fb f898 	bl	800041c <__aeabi_idivmod>
 80052ec:	3e01      	subs	r6, #1
 80052ee:	3130      	adds	r1, #48	; 0x30
 80052f0:	0020      	movs	r0, r4
 80052f2:	7031      	strb	r1, [r6, #0]
 80052f4:	0039      	movs	r1, r7
 80052f6:	9402      	str	r4, [sp, #8]
 80052f8:	f7fa ffaa 	bl	8000250 <__divsi3>
 80052fc:	9b02      	ldr	r3, [sp, #8]
 80052fe:	0004      	movs	r4, r0
 8005300:	2b63      	cmp	r3, #99	; 0x63
 8005302:	dcee      	bgt.n	80052e2 <__exponent+0x24>
 8005304:	9b01      	ldr	r3, [sp, #4]
 8005306:	3430      	adds	r4, #48	; 0x30
 8005308:	1e9a      	subs	r2, r3, #2
 800530a:	0013      	movs	r3, r2
 800530c:	9903      	ldr	r1, [sp, #12]
 800530e:	7014      	strb	r4, [r2, #0]
 8005310:	a804      	add	r0, sp, #16
 8005312:	3007      	adds	r0, #7
 8005314:	4298      	cmp	r0, r3
 8005316:	d80e      	bhi.n	8005336 <__exponent+0x78>
 8005318:	ab04      	add	r3, sp, #16
 800531a:	3307      	adds	r3, #7
 800531c:	2000      	movs	r0, #0
 800531e:	429a      	cmp	r2, r3
 8005320:	d804      	bhi.n	800532c <__exponent+0x6e>
 8005322:	ab04      	add	r3, sp, #16
 8005324:	3009      	adds	r0, #9
 8005326:	18c0      	adds	r0, r0, r3
 8005328:	9b01      	ldr	r3, [sp, #4]
 800532a:	1ac0      	subs	r0, r0, r3
 800532c:	9b03      	ldr	r3, [sp, #12]
 800532e:	1818      	adds	r0, r3, r0
 8005330:	1b40      	subs	r0, r0, r5
 8005332:	b007      	add	sp, #28
 8005334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005336:	7818      	ldrb	r0, [r3, #0]
 8005338:	3301      	adds	r3, #1
 800533a:	7008      	strb	r0, [r1, #0]
 800533c:	3101      	adds	r1, #1
 800533e:	e7e7      	b.n	8005310 <__exponent+0x52>
 8005340:	2330      	movs	r3, #48	; 0x30
 8005342:	18e4      	adds	r4, r4, r3
 8005344:	70ab      	strb	r3, [r5, #2]
 8005346:	1d28      	adds	r0, r5, #4
 8005348:	70ec      	strb	r4, [r5, #3]
 800534a:	e7f1      	b.n	8005330 <__exponent+0x72>

0800534c <_printf_float>:
 800534c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800534e:	b095      	sub	sp, #84	; 0x54
 8005350:	000c      	movs	r4, r1
 8005352:	9208      	str	r2, [sp, #32]
 8005354:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005356:	9309      	str	r3, [sp, #36]	; 0x24
 8005358:	0007      	movs	r7, r0
 800535a:	f002 fee5 	bl	8008128 <_localeconv_r>
 800535e:	6803      	ldr	r3, [r0, #0]
 8005360:	0018      	movs	r0, r3
 8005362:	930b      	str	r3, [sp, #44]	; 0x2c
 8005364:	f7fa fece 	bl	8000104 <strlen>
 8005368:	2300      	movs	r3, #0
 800536a:	9312      	str	r3, [sp, #72]	; 0x48
 800536c:	7e23      	ldrb	r3, [r4, #24]
 800536e:	2207      	movs	r2, #7
 8005370:	001e      	movs	r6, r3
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	900d      	str	r0, [sp, #52]	; 0x34
 8005376:	930c      	str	r3, [sp, #48]	; 0x30
 8005378:	990c      	ldr	r1, [sp, #48]	; 0x30
 800537a:	682b      	ldr	r3, [r5, #0]
 800537c:	05c9      	lsls	r1, r1, #23
 800537e:	d547      	bpl.n	8005410 <_printf_float+0xc4>
 8005380:	189b      	adds	r3, r3, r2
 8005382:	4393      	bics	r3, r2
 8005384:	001a      	movs	r2, r3
 8005386:	3208      	adds	r2, #8
 8005388:	602a      	str	r2, [r5, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	64a2      	str	r2, [r4, #72]	; 0x48
 8005390:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005392:	2201      	movs	r2, #1
 8005394:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005396:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005398:	930a      	str	r3, [sp, #40]	; 0x28
 800539a:	006b      	lsls	r3, r5, #1
 800539c:	085b      	lsrs	r3, r3, #1
 800539e:	930e      	str	r3, [sp, #56]	; 0x38
 80053a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80053a2:	4ba8      	ldr	r3, [pc, #672]	; (8005644 <_printf_float+0x2f8>)
 80053a4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80053a6:	4252      	negs	r2, r2
 80053a8:	f7fc fe5a 	bl	8002060 <__aeabi_dcmpun>
 80053ac:	2800      	cmp	r0, #0
 80053ae:	d131      	bne.n	8005414 <_printf_float+0xc8>
 80053b0:	2201      	movs	r2, #1
 80053b2:	4ba4      	ldr	r3, [pc, #656]	; (8005644 <_printf_float+0x2f8>)
 80053b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80053b6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80053b8:	4252      	negs	r2, r2
 80053ba:	f7fb f855 	bl	8000468 <__aeabi_dcmple>
 80053be:	2800      	cmp	r0, #0
 80053c0:	d128      	bne.n	8005414 <_printf_float+0xc8>
 80053c2:	2200      	movs	r2, #0
 80053c4:	2300      	movs	r3, #0
 80053c6:	0029      	movs	r1, r5
 80053c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80053ca:	f7fb f843 	bl	8000454 <__aeabi_dcmplt>
 80053ce:	2800      	cmp	r0, #0
 80053d0:	d003      	beq.n	80053da <_printf_float+0x8e>
 80053d2:	0023      	movs	r3, r4
 80053d4:	222d      	movs	r2, #45	; 0x2d
 80053d6:	3343      	adds	r3, #67	; 0x43
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	4d9b      	ldr	r5, [pc, #620]	; (8005648 <_printf_float+0x2fc>)
 80053dc:	2e47      	cmp	r6, #71	; 0x47
 80053de:	d900      	bls.n	80053e2 <_printf_float+0x96>
 80053e0:	4d9a      	ldr	r5, [pc, #616]	; (800564c <_printf_float+0x300>)
 80053e2:	2303      	movs	r3, #3
 80053e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053e6:	6123      	str	r3, [r4, #16]
 80053e8:	3301      	adds	r3, #1
 80053ea:	439a      	bics	r2, r3
 80053ec:	2300      	movs	r3, #0
 80053ee:	6022      	str	r2, [r4, #0]
 80053f0:	930a      	str	r3, [sp, #40]	; 0x28
 80053f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f4:	0021      	movs	r1, r4
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	0038      	movs	r0, r7
 80053fa:	9b08      	ldr	r3, [sp, #32]
 80053fc:	aa13      	add	r2, sp, #76	; 0x4c
 80053fe:	f000 f9f3 	bl	80057e8 <_printf_common>
 8005402:	1c43      	adds	r3, r0, #1
 8005404:	d000      	beq.n	8005408 <_printf_float+0xbc>
 8005406:	e09e      	b.n	8005546 <_printf_float+0x1fa>
 8005408:	2001      	movs	r0, #1
 800540a:	4240      	negs	r0, r0
 800540c:	b015      	add	sp, #84	; 0x54
 800540e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005410:	3307      	adds	r3, #7
 8005412:	e7b6      	b.n	8005382 <_printf_float+0x36>
 8005414:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005416:	002b      	movs	r3, r5
 8005418:	0010      	movs	r0, r2
 800541a:	0029      	movs	r1, r5
 800541c:	f7fc fe20 	bl	8002060 <__aeabi_dcmpun>
 8005420:	2800      	cmp	r0, #0
 8005422:	d00a      	beq.n	800543a <_printf_float+0xee>
 8005424:	2d00      	cmp	r5, #0
 8005426:	da03      	bge.n	8005430 <_printf_float+0xe4>
 8005428:	0023      	movs	r3, r4
 800542a:	222d      	movs	r2, #45	; 0x2d
 800542c:	3343      	adds	r3, #67	; 0x43
 800542e:	701a      	strb	r2, [r3, #0]
 8005430:	4d87      	ldr	r5, [pc, #540]	; (8005650 <_printf_float+0x304>)
 8005432:	2e47      	cmp	r6, #71	; 0x47
 8005434:	d9d5      	bls.n	80053e2 <_printf_float+0x96>
 8005436:	4d87      	ldr	r5, [pc, #540]	; (8005654 <_printf_float+0x308>)
 8005438:	e7d3      	b.n	80053e2 <_printf_float+0x96>
 800543a:	2220      	movs	r2, #32
 800543c:	0031      	movs	r1, r6
 800543e:	6863      	ldr	r3, [r4, #4]
 8005440:	4391      	bics	r1, r2
 8005442:	910e      	str	r1, [sp, #56]	; 0x38
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	d147      	bne.n	80054d8 <_printf_float+0x18c>
 8005448:	3307      	adds	r3, #7
 800544a:	6063      	str	r3, [r4, #4]
 800544c:	2380      	movs	r3, #128	; 0x80
 800544e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	4313      	orrs	r3, r2
 8005454:	2200      	movs	r2, #0
 8005456:	9206      	str	r2, [sp, #24]
 8005458:	aa12      	add	r2, sp, #72	; 0x48
 800545a:	9205      	str	r2, [sp, #20]
 800545c:	aa11      	add	r2, sp, #68	; 0x44
 800545e:	9203      	str	r2, [sp, #12]
 8005460:	2223      	movs	r2, #35	; 0x23
 8005462:	a908      	add	r1, sp, #32
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	9301      	str	r3, [sp, #4]
 8005468:	6863      	ldr	r3, [r4, #4]
 800546a:	1852      	adds	r2, r2, r1
 800546c:	9202      	str	r2, [sp, #8]
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	0038      	movs	r0, r7
 8005472:	002b      	movs	r3, r5
 8005474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005476:	9604      	str	r6, [sp, #16]
 8005478:	f7ff febe 	bl	80051f8 <__cvt>
 800547c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800547e:	0005      	movs	r5, r0
 8005480:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005482:	2b47      	cmp	r3, #71	; 0x47
 8005484:	d108      	bne.n	8005498 <_printf_float+0x14c>
 8005486:	1ccb      	adds	r3, r1, #3
 8005488:	db02      	blt.n	8005490 <_printf_float+0x144>
 800548a:	6863      	ldr	r3, [r4, #4]
 800548c:	4299      	cmp	r1, r3
 800548e:	dd46      	ble.n	800551e <_printf_float+0x1d2>
 8005490:	0033      	movs	r3, r6
 8005492:	3b02      	subs	r3, #2
 8005494:	b2db      	uxtb	r3, r3
 8005496:	001e      	movs	r6, r3
 8005498:	2e65      	cmp	r6, #101	; 0x65
 800549a:	d824      	bhi.n	80054e6 <_printf_float+0x19a>
 800549c:	0020      	movs	r0, r4
 800549e:	0032      	movs	r2, r6
 80054a0:	3901      	subs	r1, #1
 80054a2:	3050      	adds	r0, #80	; 0x50
 80054a4:	9111      	str	r1, [sp, #68]	; 0x44
 80054a6:	f7ff ff0a 	bl	80052be <__exponent>
 80054aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80054ac:	900a      	str	r0, [sp, #40]	; 0x28
 80054ae:	1813      	adds	r3, r2, r0
 80054b0:	6123      	str	r3, [r4, #16]
 80054b2:	2a01      	cmp	r2, #1
 80054b4:	dc02      	bgt.n	80054bc <_printf_float+0x170>
 80054b6:	6822      	ldr	r2, [r4, #0]
 80054b8:	07d2      	lsls	r2, r2, #31
 80054ba:	d501      	bpl.n	80054c0 <_printf_float+0x174>
 80054bc:	3301      	adds	r3, #1
 80054be:	6123      	str	r3, [r4, #16]
 80054c0:	2323      	movs	r3, #35	; 0x23
 80054c2:	aa08      	add	r2, sp, #32
 80054c4:	189b      	adds	r3, r3, r2
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d100      	bne.n	80054ce <_printf_float+0x182>
 80054cc:	e791      	b.n	80053f2 <_printf_float+0xa6>
 80054ce:	0023      	movs	r3, r4
 80054d0:	222d      	movs	r2, #45	; 0x2d
 80054d2:	3343      	adds	r3, #67	; 0x43
 80054d4:	701a      	strb	r2, [r3, #0]
 80054d6:	e78c      	b.n	80053f2 <_printf_float+0xa6>
 80054d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054da:	2a47      	cmp	r2, #71	; 0x47
 80054dc:	d1b6      	bne.n	800544c <_printf_float+0x100>
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1b4      	bne.n	800544c <_printf_float+0x100>
 80054e2:	3301      	adds	r3, #1
 80054e4:	e7b1      	b.n	800544a <_printf_float+0xfe>
 80054e6:	2e66      	cmp	r6, #102	; 0x66
 80054e8:	d11b      	bne.n	8005522 <_printf_float+0x1d6>
 80054ea:	6863      	ldr	r3, [r4, #4]
 80054ec:	2900      	cmp	r1, #0
 80054ee:	dd0d      	ble.n	800550c <_printf_float+0x1c0>
 80054f0:	6121      	str	r1, [r4, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d102      	bne.n	80054fc <_printf_float+0x1b0>
 80054f6:	6822      	ldr	r2, [r4, #0]
 80054f8:	07d2      	lsls	r2, r2, #31
 80054fa:	d502      	bpl.n	8005502 <_printf_float+0x1b6>
 80054fc:	3301      	adds	r3, #1
 80054fe:	1859      	adds	r1, r3, r1
 8005500:	6121      	str	r1, [r4, #16]
 8005502:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005504:	65a3      	str	r3, [r4, #88]	; 0x58
 8005506:	2300      	movs	r3, #0
 8005508:	930a      	str	r3, [sp, #40]	; 0x28
 800550a:	e7d9      	b.n	80054c0 <_printf_float+0x174>
 800550c:	2b00      	cmp	r3, #0
 800550e:	d103      	bne.n	8005518 <_printf_float+0x1cc>
 8005510:	2201      	movs	r2, #1
 8005512:	6821      	ldr	r1, [r4, #0]
 8005514:	4211      	tst	r1, r2
 8005516:	d000      	beq.n	800551a <_printf_float+0x1ce>
 8005518:	1c9a      	adds	r2, r3, #2
 800551a:	6122      	str	r2, [r4, #16]
 800551c:	e7f1      	b.n	8005502 <_printf_float+0x1b6>
 800551e:	2367      	movs	r3, #103	; 0x67
 8005520:	001e      	movs	r6, r3
 8005522:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005524:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005526:	4293      	cmp	r3, r2
 8005528:	db06      	blt.n	8005538 <_printf_float+0x1ec>
 800552a:	6822      	ldr	r2, [r4, #0]
 800552c:	6123      	str	r3, [r4, #16]
 800552e:	07d2      	lsls	r2, r2, #31
 8005530:	d5e7      	bpl.n	8005502 <_printf_float+0x1b6>
 8005532:	3301      	adds	r3, #1
 8005534:	6123      	str	r3, [r4, #16]
 8005536:	e7e4      	b.n	8005502 <_printf_float+0x1b6>
 8005538:	2101      	movs	r1, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	dc01      	bgt.n	8005542 <_printf_float+0x1f6>
 800553e:	1849      	adds	r1, r1, r1
 8005540:	1ac9      	subs	r1, r1, r3
 8005542:	1852      	adds	r2, r2, r1
 8005544:	e7e9      	b.n	800551a <_printf_float+0x1ce>
 8005546:	6822      	ldr	r2, [r4, #0]
 8005548:	0553      	lsls	r3, r2, #21
 800554a:	d408      	bmi.n	800555e <_printf_float+0x212>
 800554c:	6923      	ldr	r3, [r4, #16]
 800554e:	002a      	movs	r2, r5
 8005550:	0038      	movs	r0, r7
 8005552:	9908      	ldr	r1, [sp, #32]
 8005554:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005556:	47a8      	blx	r5
 8005558:	1c43      	adds	r3, r0, #1
 800555a:	d129      	bne.n	80055b0 <_printf_float+0x264>
 800555c:	e754      	b.n	8005408 <_printf_float+0xbc>
 800555e:	2e65      	cmp	r6, #101	; 0x65
 8005560:	d800      	bhi.n	8005564 <_printf_float+0x218>
 8005562:	e0ec      	b.n	800573e <_printf_float+0x3f2>
 8005564:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005566:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005568:	2200      	movs	r2, #0
 800556a:	2300      	movs	r3, #0
 800556c:	f7fa ff6c 	bl	8000448 <__aeabi_dcmpeq>
 8005570:	2800      	cmp	r0, #0
 8005572:	d034      	beq.n	80055de <_printf_float+0x292>
 8005574:	2301      	movs	r3, #1
 8005576:	0038      	movs	r0, r7
 8005578:	4a37      	ldr	r2, [pc, #220]	; (8005658 <_printf_float+0x30c>)
 800557a:	9908      	ldr	r1, [sp, #32]
 800557c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800557e:	47a8      	blx	r5
 8005580:	1c43      	adds	r3, r0, #1
 8005582:	d100      	bne.n	8005586 <_printf_float+0x23a>
 8005584:	e740      	b.n	8005408 <_printf_float+0xbc>
 8005586:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005588:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800558a:	4293      	cmp	r3, r2
 800558c:	db02      	blt.n	8005594 <_printf_float+0x248>
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	07db      	lsls	r3, r3, #31
 8005592:	d50d      	bpl.n	80055b0 <_printf_float+0x264>
 8005594:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005596:	0038      	movs	r0, r7
 8005598:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800559a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800559c:	9908      	ldr	r1, [sp, #32]
 800559e:	47a8      	blx	r5
 80055a0:	2500      	movs	r5, #0
 80055a2:	1c43      	adds	r3, r0, #1
 80055a4:	d100      	bne.n	80055a8 <_printf_float+0x25c>
 80055a6:	e72f      	b.n	8005408 <_printf_float+0xbc>
 80055a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055aa:	3b01      	subs	r3, #1
 80055ac:	42ab      	cmp	r3, r5
 80055ae:	dc0a      	bgt.n	80055c6 <_printf_float+0x27a>
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	079b      	lsls	r3, r3, #30
 80055b4:	d500      	bpl.n	80055b8 <_printf_float+0x26c>
 80055b6:	e114      	b.n	80057e2 <_printf_float+0x496>
 80055b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80055ba:	68e0      	ldr	r0, [r4, #12]
 80055bc:	4298      	cmp	r0, r3
 80055be:	db00      	blt.n	80055c2 <_printf_float+0x276>
 80055c0:	e724      	b.n	800540c <_printf_float+0xc0>
 80055c2:	0018      	movs	r0, r3
 80055c4:	e722      	b.n	800540c <_printf_float+0xc0>
 80055c6:	0022      	movs	r2, r4
 80055c8:	2301      	movs	r3, #1
 80055ca:	0038      	movs	r0, r7
 80055cc:	9908      	ldr	r1, [sp, #32]
 80055ce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80055d0:	321a      	adds	r2, #26
 80055d2:	47b0      	blx	r6
 80055d4:	1c43      	adds	r3, r0, #1
 80055d6:	d100      	bne.n	80055da <_printf_float+0x28e>
 80055d8:	e716      	b.n	8005408 <_printf_float+0xbc>
 80055da:	3501      	adds	r5, #1
 80055dc:	e7e4      	b.n	80055a8 <_printf_float+0x25c>
 80055de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	dc3b      	bgt.n	800565c <_printf_float+0x310>
 80055e4:	2301      	movs	r3, #1
 80055e6:	0038      	movs	r0, r7
 80055e8:	4a1b      	ldr	r2, [pc, #108]	; (8005658 <_printf_float+0x30c>)
 80055ea:	9908      	ldr	r1, [sp, #32]
 80055ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80055ee:	47b0      	blx	r6
 80055f0:	1c43      	adds	r3, r0, #1
 80055f2:	d100      	bne.n	80055f6 <_printf_float+0x2aa>
 80055f4:	e708      	b.n	8005408 <_printf_float+0xbc>
 80055f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80055fa:	4313      	orrs	r3, r2
 80055fc:	d102      	bne.n	8005604 <_printf_float+0x2b8>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	07db      	lsls	r3, r3, #31
 8005602:	d5d5      	bpl.n	80055b0 <_printf_float+0x264>
 8005604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005606:	0038      	movs	r0, r7
 8005608:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800560a:	9908      	ldr	r1, [sp, #32]
 800560c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800560e:	47b0      	blx	r6
 8005610:	1c43      	adds	r3, r0, #1
 8005612:	d100      	bne.n	8005616 <_printf_float+0x2ca>
 8005614:	e6f8      	b.n	8005408 <_printf_float+0xbc>
 8005616:	2300      	movs	r3, #0
 8005618:	930a      	str	r3, [sp, #40]	; 0x28
 800561a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800561c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800561e:	425b      	negs	r3, r3
 8005620:	4293      	cmp	r3, r2
 8005622:	dc01      	bgt.n	8005628 <_printf_float+0x2dc>
 8005624:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005626:	e792      	b.n	800554e <_printf_float+0x202>
 8005628:	0022      	movs	r2, r4
 800562a:	2301      	movs	r3, #1
 800562c:	0038      	movs	r0, r7
 800562e:	9908      	ldr	r1, [sp, #32]
 8005630:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005632:	321a      	adds	r2, #26
 8005634:	47b0      	blx	r6
 8005636:	1c43      	adds	r3, r0, #1
 8005638:	d100      	bne.n	800563c <_printf_float+0x2f0>
 800563a:	e6e5      	b.n	8005408 <_printf_float+0xbc>
 800563c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800563e:	3301      	adds	r3, #1
 8005640:	e7ea      	b.n	8005618 <_printf_float+0x2cc>
 8005642:	46c0      	nop			; (mov r8, r8)
 8005644:	7fefffff 	.word	0x7fefffff
 8005648:	08009c94 	.word	0x08009c94
 800564c:	08009c98 	.word	0x08009c98
 8005650:	08009c9c 	.word	0x08009c9c
 8005654:	08009ca0 	.word	0x08009ca0
 8005658:	08009ca4 	.word	0x08009ca4
 800565c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800565e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005660:	920a      	str	r2, [sp, #40]	; 0x28
 8005662:	429a      	cmp	r2, r3
 8005664:	dd00      	ble.n	8005668 <_printf_float+0x31c>
 8005666:	930a      	str	r3, [sp, #40]	; 0x28
 8005668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800566a:	2b00      	cmp	r3, #0
 800566c:	dc3d      	bgt.n	80056ea <_printf_float+0x39e>
 800566e:	2300      	movs	r3, #0
 8005670:	930e      	str	r3, [sp, #56]	; 0x38
 8005672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005674:	43db      	mvns	r3, r3
 8005676:	17db      	asrs	r3, r3, #31
 8005678:	930f      	str	r3, [sp, #60]	; 0x3c
 800567a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800567c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800567e:	930c      	str	r3, [sp, #48]	; 0x30
 8005680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005682:	4013      	ands	r3, r2
 8005684:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800568a:	4293      	cmp	r3, r2
 800568c:	dc36      	bgt.n	80056fc <_printf_float+0x3b0>
 800568e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005690:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005692:	4293      	cmp	r3, r2
 8005694:	db40      	blt.n	8005718 <_printf_float+0x3cc>
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	07db      	lsls	r3, r3, #31
 800569a:	d43d      	bmi.n	8005718 <_printf_float+0x3cc>
 800569c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800569e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	1a52      	subs	r2, r2, r1
 80056a6:	920a      	str	r2, [sp, #40]	; 0x28
 80056a8:	429a      	cmp	r2, r3
 80056aa:	dd00      	ble.n	80056ae <_printf_float+0x362>
 80056ac:	930a      	str	r3, [sp, #40]	; 0x28
 80056ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	dc3a      	bgt.n	800572a <_printf_float+0x3de>
 80056b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056b6:	2500      	movs	r5, #0
 80056b8:	43db      	mvns	r3, r3
 80056ba:	17db      	asrs	r3, r3, #31
 80056bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80056be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80056c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056c4:	1a9b      	subs	r3, r3, r2
 80056c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056c8:	400a      	ands	r2, r1
 80056ca:	1a9b      	subs	r3, r3, r2
 80056cc:	42ab      	cmp	r3, r5
 80056ce:	dc00      	bgt.n	80056d2 <_printf_float+0x386>
 80056d0:	e76e      	b.n	80055b0 <_printf_float+0x264>
 80056d2:	0022      	movs	r2, r4
 80056d4:	2301      	movs	r3, #1
 80056d6:	0038      	movs	r0, r7
 80056d8:	9908      	ldr	r1, [sp, #32]
 80056da:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80056dc:	321a      	adds	r2, #26
 80056de:	47b0      	blx	r6
 80056e0:	1c43      	adds	r3, r0, #1
 80056e2:	d100      	bne.n	80056e6 <_printf_float+0x39a>
 80056e4:	e690      	b.n	8005408 <_printf_float+0xbc>
 80056e6:	3501      	adds	r5, #1
 80056e8:	e7e9      	b.n	80056be <_printf_float+0x372>
 80056ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ec:	002a      	movs	r2, r5
 80056ee:	0038      	movs	r0, r7
 80056f0:	9908      	ldr	r1, [sp, #32]
 80056f2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80056f4:	47b0      	blx	r6
 80056f6:	1c43      	adds	r3, r0, #1
 80056f8:	d1b9      	bne.n	800566e <_printf_float+0x322>
 80056fa:	e685      	b.n	8005408 <_printf_float+0xbc>
 80056fc:	0022      	movs	r2, r4
 80056fe:	2301      	movs	r3, #1
 8005700:	0038      	movs	r0, r7
 8005702:	9908      	ldr	r1, [sp, #32]
 8005704:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005706:	321a      	adds	r2, #26
 8005708:	47b0      	blx	r6
 800570a:	1c43      	adds	r3, r0, #1
 800570c:	d100      	bne.n	8005710 <_printf_float+0x3c4>
 800570e:	e67b      	b.n	8005408 <_printf_float+0xbc>
 8005710:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005712:	3301      	adds	r3, #1
 8005714:	930e      	str	r3, [sp, #56]	; 0x38
 8005716:	e7b0      	b.n	800567a <_printf_float+0x32e>
 8005718:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800571a:	0038      	movs	r0, r7
 800571c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800571e:	9908      	ldr	r1, [sp, #32]
 8005720:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005722:	47b0      	blx	r6
 8005724:	1c43      	adds	r3, r0, #1
 8005726:	d1b9      	bne.n	800569c <_printf_float+0x350>
 8005728:	e66e      	b.n	8005408 <_printf_float+0xbc>
 800572a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800572c:	0038      	movs	r0, r7
 800572e:	18ea      	adds	r2, r5, r3
 8005730:	9908      	ldr	r1, [sp, #32]
 8005732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005734:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005736:	47a8      	blx	r5
 8005738:	1c43      	adds	r3, r0, #1
 800573a:	d1bb      	bne.n	80056b4 <_printf_float+0x368>
 800573c:	e664      	b.n	8005408 <_printf_float+0xbc>
 800573e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005740:	2b01      	cmp	r3, #1
 8005742:	dc02      	bgt.n	800574a <_printf_float+0x3fe>
 8005744:	2301      	movs	r3, #1
 8005746:	421a      	tst	r2, r3
 8005748:	d038      	beq.n	80057bc <_printf_float+0x470>
 800574a:	2301      	movs	r3, #1
 800574c:	002a      	movs	r2, r5
 800574e:	0038      	movs	r0, r7
 8005750:	9908      	ldr	r1, [sp, #32]
 8005752:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005754:	47b0      	blx	r6
 8005756:	1c43      	adds	r3, r0, #1
 8005758:	d100      	bne.n	800575c <_printf_float+0x410>
 800575a:	e655      	b.n	8005408 <_printf_float+0xbc>
 800575c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800575e:	0038      	movs	r0, r7
 8005760:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005762:	9908      	ldr	r1, [sp, #32]
 8005764:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005766:	47b0      	blx	r6
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	d100      	bne.n	800576e <_printf_float+0x422>
 800576c:	e64c      	b.n	8005408 <_printf_float+0xbc>
 800576e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005770:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005772:	2200      	movs	r2, #0
 8005774:	2300      	movs	r3, #0
 8005776:	f7fa fe67 	bl	8000448 <__aeabi_dcmpeq>
 800577a:	2800      	cmp	r0, #0
 800577c:	d11c      	bne.n	80057b8 <_printf_float+0x46c>
 800577e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005780:	1c6a      	adds	r2, r5, #1
 8005782:	3b01      	subs	r3, #1
 8005784:	0038      	movs	r0, r7
 8005786:	9908      	ldr	r1, [sp, #32]
 8005788:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800578a:	47a8      	blx	r5
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	d10f      	bne.n	80057b0 <_printf_float+0x464>
 8005790:	e63a      	b.n	8005408 <_printf_float+0xbc>
 8005792:	0022      	movs	r2, r4
 8005794:	2301      	movs	r3, #1
 8005796:	0038      	movs	r0, r7
 8005798:	9908      	ldr	r1, [sp, #32]
 800579a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800579c:	321a      	adds	r2, #26
 800579e:	47b0      	blx	r6
 80057a0:	1c43      	adds	r3, r0, #1
 80057a2:	d100      	bne.n	80057a6 <_printf_float+0x45a>
 80057a4:	e630      	b.n	8005408 <_printf_float+0xbc>
 80057a6:	3501      	adds	r5, #1
 80057a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057aa:	3b01      	subs	r3, #1
 80057ac:	42ab      	cmp	r3, r5
 80057ae:	dcf0      	bgt.n	8005792 <_printf_float+0x446>
 80057b0:	0022      	movs	r2, r4
 80057b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057b4:	3250      	adds	r2, #80	; 0x50
 80057b6:	e6cb      	b.n	8005550 <_printf_float+0x204>
 80057b8:	2500      	movs	r5, #0
 80057ba:	e7f5      	b.n	80057a8 <_printf_float+0x45c>
 80057bc:	002a      	movs	r2, r5
 80057be:	e7e1      	b.n	8005784 <_printf_float+0x438>
 80057c0:	0022      	movs	r2, r4
 80057c2:	2301      	movs	r3, #1
 80057c4:	0038      	movs	r0, r7
 80057c6:	9908      	ldr	r1, [sp, #32]
 80057c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80057ca:	3219      	adds	r2, #25
 80057cc:	47b0      	blx	r6
 80057ce:	1c43      	adds	r3, r0, #1
 80057d0:	d100      	bne.n	80057d4 <_printf_float+0x488>
 80057d2:	e619      	b.n	8005408 <_printf_float+0xbc>
 80057d4:	3501      	adds	r5, #1
 80057d6:	68e3      	ldr	r3, [r4, #12]
 80057d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80057da:	1a9b      	subs	r3, r3, r2
 80057dc:	42ab      	cmp	r3, r5
 80057de:	dcef      	bgt.n	80057c0 <_printf_float+0x474>
 80057e0:	e6ea      	b.n	80055b8 <_printf_float+0x26c>
 80057e2:	2500      	movs	r5, #0
 80057e4:	e7f7      	b.n	80057d6 <_printf_float+0x48a>
 80057e6:	46c0      	nop			; (mov r8, r8)

080057e8 <_printf_common>:
 80057e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057ea:	0015      	movs	r5, r2
 80057ec:	9301      	str	r3, [sp, #4]
 80057ee:	688a      	ldr	r2, [r1, #8]
 80057f0:	690b      	ldr	r3, [r1, #16]
 80057f2:	000c      	movs	r4, r1
 80057f4:	9000      	str	r0, [sp, #0]
 80057f6:	4293      	cmp	r3, r2
 80057f8:	da00      	bge.n	80057fc <_printf_common+0x14>
 80057fa:	0013      	movs	r3, r2
 80057fc:	0022      	movs	r2, r4
 80057fe:	602b      	str	r3, [r5, #0]
 8005800:	3243      	adds	r2, #67	; 0x43
 8005802:	7812      	ldrb	r2, [r2, #0]
 8005804:	2a00      	cmp	r2, #0
 8005806:	d001      	beq.n	800580c <_printf_common+0x24>
 8005808:	3301      	adds	r3, #1
 800580a:	602b      	str	r3, [r5, #0]
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	069b      	lsls	r3, r3, #26
 8005810:	d502      	bpl.n	8005818 <_printf_common+0x30>
 8005812:	682b      	ldr	r3, [r5, #0]
 8005814:	3302      	adds	r3, #2
 8005816:	602b      	str	r3, [r5, #0]
 8005818:	6822      	ldr	r2, [r4, #0]
 800581a:	2306      	movs	r3, #6
 800581c:	0017      	movs	r7, r2
 800581e:	401f      	ands	r7, r3
 8005820:	421a      	tst	r2, r3
 8005822:	d027      	beq.n	8005874 <_printf_common+0x8c>
 8005824:	0023      	movs	r3, r4
 8005826:	3343      	adds	r3, #67	; 0x43
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	1e5a      	subs	r2, r3, #1
 800582c:	4193      	sbcs	r3, r2
 800582e:	6822      	ldr	r2, [r4, #0]
 8005830:	0692      	lsls	r2, r2, #26
 8005832:	d430      	bmi.n	8005896 <_printf_common+0xae>
 8005834:	0022      	movs	r2, r4
 8005836:	9901      	ldr	r1, [sp, #4]
 8005838:	9800      	ldr	r0, [sp, #0]
 800583a:	9e08      	ldr	r6, [sp, #32]
 800583c:	3243      	adds	r2, #67	; 0x43
 800583e:	47b0      	blx	r6
 8005840:	1c43      	adds	r3, r0, #1
 8005842:	d025      	beq.n	8005890 <_printf_common+0xa8>
 8005844:	2306      	movs	r3, #6
 8005846:	6820      	ldr	r0, [r4, #0]
 8005848:	682a      	ldr	r2, [r5, #0]
 800584a:	68e1      	ldr	r1, [r4, #12]
 800584c:	2500      	movs	r5, #0
 800584e:	4003      	ands	r3, r0
 8005850:	2b04      	cmp	r3, #4
 8005852:	d103      	bne.n	800585c <_printf_common+0x74>
 8005854:	1a8d      	subs	r5, r1, r2
 8005856:	43eb      	mvns	r3, r5
 8005858:	17db      	asrs	r3, r3, #31
 800585a:	401d      	ands	r5, r3
 800585c:	68a3      	ldr	r3, [r4, #8]
 800585e:	6922      	ldr	r2, [r4, #16]
 8005860:	4293      	cmp	r3, r2
 8005862:	dd01      	ble.n	8005868 <_printf_common+0x80>
 8005864:	1a9b      	subs	r3, r3, r2
 8005866:	18ed      	adds	r5, r5, r3
 8005868:	2700      	movs	r7, #0
 800586a:	42bd      	cmp	r5, r7
 800586c:	d120      	bne.n	80058b0 <_printf_common+0xc8>
 800586e:	2000      	movs	r0, #0
 8005870:	e010      	b.n	8005894 <_printf_common+0xac>
 8005872:	3701      	adds	r7, #1
 8005874:	68e3      	ldr	r3, [r4, #12]
 8005876:	682a      	ldr	r2, [r5, #0]
 8005878:	1a9b      	subs	r3, r3, r2
 800587a:	42bb      	cmp	r3, r7
 800587c:	ddd2      	ble.n	8005824 <_printf_common+0x3c>
 800587e:	0022      	movs	r2, r4
 8005880:	2301      	movs	r3, #1
 8005882:	9901      	ldr	r1, [sp, #4]
 8005884:	9800      	ldr	r0, [sp, #0]
 8005886:	9e08      	ldr	r6, [sp, #32]
 8005888:	3219      	adds	r2, #25
 800588a:	47b0      	blx	r6
 800588c:	1c43      	adds	r3, r0, #1
 800588e:	d1f0      	bne.n	8005872 <_printf_common+0x8a>
 8005890:	2001      	movs	r0, #1
 8005892:	4240      	negs	r0, r0
 8005894:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005896:	2030      	movs	r0, #48	; 0x30
 8005898:	18e1      	adds	r1, r4, r3
 800589a:	3143      	adds	r1, #67	; 0x43
 800589c:	7008      	strb	r0, [r1, #0]
 800589e:	0021      	movs	r1, r4
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	3145      	adds	r1, #69	; 0x45
 80058a4:	7809      	ldrb	r1, [r1, #0]
 80058a6:	18a2      	adds	r2, r4, r2
 80058a8:	3243      	adds	r2, #67	; 0x43
 80058aa:	3302      	adds	r3, #2
 80058ac:	7011      	strb	r1, [r2, #0]
 80058ae:	e7c1      	b.n	8005834 <_printf_common+0x4c>
 80058b0:	0022      	movs	r2, r4
 80058b2:	2301      	movs	r3, #1
 80058b4:	9901      	ldr	r1, [sp, #4]
 80058b6:	9800      	ldr	r0, [sp, #0]
 80058b8:	9e08      	ldr	r6, [sp, #32]
 80058ba:	321a      	adds	r2, #26
 80058bc:	47b0      	blx	r6
 80058be:	1c43      	adds	r3, r0, #1
 80058c0:	d0e6      	beq.n	8005890 <_printf_common+0xa8>
 80058c2:	3701      	adds	r7, #1
 80058c4:	e7d1      	b.n	800586a <_printf_common+0x82>
	...

080058c8 <_printf_i>:
 80058c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ca:	b08b      	sub	sp, #44	; 0x2c
 80058cc:	9206      	str	r2, [sp, #24]
 80058ce:	000a      	movs	r2, r1
 80058d0:	3243      	adds	r2, #67	; 0x43
 80058d2:	9307      	str	r3, [sp, #28]
 80058d4:	9005      	str	r0, [sp, #20]
 80058d6:	9204      	str	r2, [sp, #16]
 80058d8:	7e0a      	ldrb	r2, [r1, #24]
 80058da:	000c      	movs	r4, r1
 80058dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80058de:	2a78      	cmp	r2, #120	; 0x78
 80058e0:	d806      	bhi.n	80058f0 <_printf_i+0x28>
 80058e2:	2a62      	cmp	r2, #98	; 0x62
 80058e4:	d808      	bhi.n	80058f8 <_printf_i+0x30>
 80058e6:	2a00      	cmp	r2, #0
 80058e8:	d100      	bne.n	80058ec <_printf_i+0x24>
 80058ea:	e0c0      	b.n	8005a6e <_printf_i+0x1a6>
 80058ec:	2a58      	cmp	r2, #88	; 0x58
 80058ee:	d052      	beq.n	8005996 <_printf_i+0xce>
 80058f0:	0026      	movs	r6, r4
 80058f2:	3642      	adds	r6, #66	; 0x42
 80058f4:	7032      	strb	r2, [r6, #0]
 80058f6:	e022      	b.n	800593e <_printf_i+0x76>
 80058f8:	0010      	movs	r0, r2
 80058fa:	3863      	subs	r0, #99	; 0x63
 80058fc:	2815      	cmp	r0, #21
 80058fe:	d8f7      	bhi.n	80058f0 <_printf_i+0x28>
 8005900:	f7fa fc12 	bl	8000128 <__gnu_thumb1_case_shi>
 8005904:	001f0016 	.word	0x001f0016
 8005908:	fff6fff6 	.word	0xfff6fff6
 800590c:	fff6fff6 	.word	0xfff6fff6
 8005910:	fff6001f 	.word	0xfff6001f
 8005914:	fff6fff6 	.word	0xfff6fff6
 8005918:	00a8fff6 	.word	0x00a8fff6
 800591c:	009a0036 	.word	0x009a0036
 8005920:	fff6fff6 	.word	0xfff6fff6
 8005924:	fff600b9 	.word	0xfff600b9
 8005928:	fff60036 	.word	0xfff60036
 800592c:	009efff6 	.word	0x009efff6
 8005930:	0026      	movs	r6, r4
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	3642      	adds	r6, #66	; 0x42
 8005936:	1d11      	adds	r1, r2, #4
 8005938:	6019      	str	r1, [r3, #0]
 800593a:	6813      	ldr	r3, [r2, #0]
 800593c:	7033      	strb	r3, [r6, #0]
 800593e:	2301      	movs	r3, #1
 8005940:	e0a7      	b.n	8005a92 <_printf_i+0x1ca>
 8005942:	6808      	ldr	r0, [r1, #0]
 8005944:	6819      	ldr	r1, [r3, #0]
 8005946:	1d0a      	adds	r2, r1, #4
 8005948:	0605      	lsls	r5, r0, #24
 800594a:	d50b      	bpl.n	8005964 <_printf_i+0x9c>
 800594c:	680d      	ldr	r5, [r1, #0]
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	2d00      	cmp	r5, #0
 8005952:	da03      	bge.n	800595c <_printf_i+0x94>
 8005954:	232d      	movs	r3, #45	; 0x2d
 8005956:	9a04      	ldr	r2, [sp, #16]
 8005958:	426d      	negs	r5, r5
 800595a:	7013      	strb	r3, [r2, #0]
 800595c:	4b61      	ldr	r3, [pc, #388]	; (8005ae4 <_printf_i+0x21c>)
 800595e:	270a      	movs	r7, #10
 8005960:	9303      	str	r3, [sp, #12]
 8005962:	e032      	b.n	80059ca <_printf_i+0x102>
 8005964:	680d      	ldr	r5, [r1, #0]
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	0641      	lsls	r1, r0, #25
 800596a:	d5f1      	bpl.n	8005950 <_printf_i+0x88>
 800596c:	b22d      	sxth	r5, r5
 800596e:	e7ef      	b.n	8005950 <_printf_i+0x88>
 8005970:	680d      	ldr	r5, [r1, #0]
 8005972:	6819      	ldr	r1, [r3, #0]
 8005974:	1d08      	adds	r0, r1, #4
 8005976:	6018      	str	r0, [r3, #0]
 8005978:	062e      	lsls	r6, r5, #24
 800597a:	d501      	bpl.n	8005980 <_printf_i+0xb8>
 800597c:	680d      	ldr	r5, [r1, #0]
 800597e:	e003      	b.n	8005988 <_printf_i+0xc0>
 8005980:	066d      	lsls	r5, r5, #25
 8005982:	d5fb      	bpl.n	800597c <_printf_i+0xb4>
 8005984:	680d      	ldr	r5, [r1, #0]
 8005986:	b2ad      	uxth	r5, r5
 8005988:	4b56      	ldr	r3, [pc, #344]	; (8005ae4 <_printf_i+0x21c>)
 800598a:	270a      	movs	r7, #10
 800598c:	9303      	str	r3, [sp, #12]
 800598e:	2a6f      	cmp	r2, #111	; 0x6f
 8005990:	d117      	bne.n	80059c2 <_printf_i+0xfa>
 8005992:	2708      	movs	r7, #8
 8005994:	e015      	b.n	80059c2 <_printf_i+0xfa>
 8005996:	3145      	adds	r1, #69	; 0x45
 8005998:	700a      	strb	r2, [r1, #0]
 800599a:	4a52      	ldr	r2, [pc, #328]	; (8005ae4 <_printf_i+0x21c>)
 800599c:	9203      	str	r2, [sp, #12]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	6821      	ldr	r1, [r4, #0]
 80059a2:	ca20      	ldmia	r2!, {r5}
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	0608      	lsls	r0, r1, #24
 80059a8:	d550      	bpl.n	8005a4c <_printf_i+0x184>
 80059aa:	07cb      	lsls	r3, r1, #31
 80059ac:	d502      	bpl.n	80059b4 <_printf_i+0xec>
 80059ae:	2320      	movs	r3, #32
 80059b0:	4319      	orrs	r1, r3
 80059b2:	6021      	str	r1, [r4, #0]
 80059b4:	2710      	movs	r7, #16
 80059b6:	2d00      	cmp	r5, #0
 80059b8:	d103      	bne.n	80059c2 <_printf_i+0xfa>
 80059ba:	2320      	movs	r3, #32
 80059bc:	6822      	ldr	r2, [r4, #0]
 80059be:	439a      	bics	r2, r3
 80059c0:	6022      	str	r2, [r4, #0]
 80059c2:	0023      	movs	r3, r4
 80059c4:	2200      	movs	r2, #0
 80059c6:	3343      	adds	r3, #67	; 0x43
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	6863      	ldr	r3, [r4, #4]
 80059cc:	60a3      	str	r3, [r4, #8]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	db03      	blt.n	80059da <_printf_i+0x112>
 80059d2:	2204      	movs	r2, #4
 80059d4:	6821      	ldr	r1, [r4, #0]
 80059d6:	4391      	bics	r1, r2
 80059d8:	6021      	str	r1, [r4, #0]
 80059da:	2d00      	cmp	r5, #0
 80059dc:	d102      	bne.n	80059e4 <_printf_i+0x11c>
 80059de:	9e04      	ldr	r6, [sp, #16]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00c      	beq.n	80059fe <_printf_i+0x136>
 80059e4:	9e04      	ldr	r6, [sp, #16]
 80059e6:	0028      	movs	r0, r5
 80059e8:	0039      	movs	r1, r7
 80059ea:	f7fa fc2d 	bl	8000248 <__aeabi_uidivmod>
 80059ee:	9b03      	ldr	r3, [sp, #12]
 80059f0:	3e01      	subs	r6, #1
 80059f2:	5c5b      	ldrb	r3, [r3, r1]
 80059f4:	7033      	strb	r3, [r6, #0]
 80059f6:	002b      	movs	r3, r5
 80059f8:	0005      	movs	r5, r0
 80059fa:	429f      	cmp	r7, r3
 80059fc:	d9f3      	bls.n	80059e6 <_printf_i+0x11e>
 80059fe:	2f08      	cmp	r7, #8
 8005a00:	d109      	bne.n	8005a16 <_printf_i+0x14e>
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	07db      	lsls	r3, r3, #31
 8005a06:	d506      	bpl.n	8005a16 <_printf_i+0x14e>
 8005a08:	6863      	ldr	r3, [r4, #4]
 8005a0a:	6922      	ldr	r2, [r4, #16]
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	dc02      	bgt.n	8005a16 <_printf_i+0x14e>
 8005a10:	2330      	movs	r3, #48	; 0x30
 8005a12:	3e01      	subs	r6, #1
 8005a14:	7033      	strb	r3, [r6, #0]
 8005a16:	9b04      	ldr	r3, [sp, #16]
 8005a18:	1b9b      	subs	r3, r3, r6
 8005a1a:	6123      	str	r3, [r4, #16]
 8005a1c:	9b07      	ldr	r3, [sp, #28]
 8005a1e:	0021      	movs	r1, r4
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	9805      	ldr	r0, [sp, #20]
 8005a24:	9b06      	ldr	r3, [sp, #24]
 8005a26:	aa09      	add	r2, sp, #36	; 0x24
 8005a28:	f7ff fede 	bl	80057e8 <_printf_common>
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	d135      	bne.n	8005a9c <_printf_i+0x1d4>
 8005a30:	2001      	movs	r0, #1
 8005a32:	4240      	negs	r0, r0
 8005a34:	b00b      	add	sp, #44	; 0x2c
 8005a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a38:	2220      	movs	r2, #32
 8005a3a:	6809      	ldr	r1, [r1, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	6022      	str	r2, [r4, #0]
 8005a40:	0022      	movs	r2, r4
 8005a42:	2178      	movs	r1, #120	; 0x78
 8005a44:	3245      	adds	r2, #69	; 0x45
 8005a46:	7011      	strb	r1, [r2, #0]
 8005a48:	4a27      	ldr	r2, [pc, #156]	; (8005ae8 <_printf_i+0x220>)
 8005a4a:	e7a7      	b.n	800599c <_printf_i+0xd4>
 8005a4c:	0648      	lsls	r0, r1, #25
 8005a4e:	d5ac      	bpl.n	80059aa <_printf_i+0xe2>
 8005a50:	b2ad      	uxth	r5, r5
 8005a52:	e7aa      	b.n	80059aa <_printf_i+0xe2>
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	680d      	ldr	r5, [r1, #0]
 8005a58:	1d10      	adds	r0, r2, #4
 8005a5a:	6949      	ldr	r1, [r1, #20]
 8005a5c:	6018      	str	r0, [r3, #0]
 8005a5e:	6813      	ldr	r3, [r2, #0]
 8005a60:	062e      	lsls	r6, r5, #24
 8005a62:	d501      	bpl.n	8005a68 <_printf_i+0x1a0>
 8005a64:	6019      	str	r1, [r3, #0]
 8005a66:	e002      	b.n	8005a6e <_printf_i+0x1a6>
 8005a68:	066d      	lsls	r5, r5, #25
 8005a6a:	d5fb      	bpl.n	8005a64 <_printf_i+0x19c>
 8005a6c:	8019      	strh	r1, [r3, #0]
 8005a6e:	2300      	movs	r3, #0
 8005a70:	9e04      	ldr	r6, [sp, #16]
 8005a72:	6123      	str	r3, [r4, #16]
 8005a74:	e7d2      	b.n	8005a1c <_printf_i+0x154>
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	1d11      	adds	r1, r2, #4
 8005a7a:	6019      	str	r1, [r3, #0]
 8005a7c:	6816      	ldr	r6, [r2, #0]
 8005a7e:	2100      	movs	r1, #0
 8005a80:	0030      	movs	r0, r6
 8005a82:	6862      	ldr	r2, [r4, #4]
 8005a84:	f002 fb70 	bl	8008168 <memchr>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	d001      	beq.n	8005a90 <_printf_i+0x1c8>
 8005a8c:	1b80      	subs	r0, r0, r6
 8005a8e:	6060      	str	r0, [r4, #4]
 8005a90:	6863      	ldr	r3, [r4, #4]
 8005a92:	6123      	str	r3, [r4, #16]
 8005a94:	2300      	movs	r3, #0
 8005a96:	9a04      	ldr	r2, [sp, #16]
 8005a98:	7013      	strb	r3, [r2, #0]
 8005a9a:	e7bf      	b.n	8005a1c <_printf_i+0x154>
 8005a9c:	6923      	ldr	r3, [r4, #16]
 8005a9e:	0032      	movs	r2, r6
 8005aa0:	9906      	ldr	r1, [sp, #24]
 8005aa2:	9805      	ldr	r0, [sp, #20]
 8005aa4:	9d07      	ldr	r5, [sp, #28]
 8005aa6:	47a8      	blx	r5
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	d0c1      	beq.n	8005a30 <_printf_i+0x168>
 8005aac:	6823      	ldr	r3, [r4, #0]
 8005aae:	079b      	lsls	r3, r3, #30
 8005ab0:	d415      	bmi.n	8005ade <_printf_i+0x216>
 8005ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab4:	68e0      	ldr	r0, [r4, #12]
 8005ab6:	4298      	cmp	r0, r3
 8005ab8:	dabc      	bge.n	8005a34 <_printf_i+0x16c>
 8005aba:	0018      	movs	r0, r3
 8005abc:	e7ba      	b.n	8005a34 <_printf_i+0x16c>
 8005abe:	0022      	movs	r2, r4
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	9906      	ldr	r1, [sp, #24]
 8005ac4:	9805      	ldr	r0, [sp, #20]
 8005ac6:	9e07      	ldr	r6, [sp, #28]
 8005ac8:	3219      	adds	r2, #25
 8005aca:	47b0      	blx	r6
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d0af      	beq.n	8005a30 <_printf_i+0x168>
 8005ad0:	3501      	adds	r5, #1
 8005ad2:	68e3      	ldr	r3, [r4, #12]
 8005ad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ad6:	1a9b      	subs	r3, r3, r2
 8005ad8:	42ab      	cmp	r3, r5
 8005ada:	dcf0      	bgt.n	8005abe <_printf_i+0x1f6>
 8005adc:	e7e9      	b.n	8005ab2 <_printf_i+0x1ea>
 8005ade:	2500      	movs	r5, #0
 8005ae0:	e7f7      	b.n	8005ad2 <_printf_i+0x20a>
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	08009ca6 	.word	0x08009ca6
 8005ae8:	08009cb7 	.word	0x08009cb7

08005aec <_scanf_float>:
 8005aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aee:	b08b      	sub	sp, #44	; 0x2c
 8005af0:	0015      	movs	r5, r2
 8005af2:	9001      	str	r0, [sp, #4]
 8005af4:	22ae      	movs	r2, #174	; 0xae
 8005af6:	2000      	movs	r0, #0
 8005af8:	9306      	str	r3, [sp, #24]
 8005afa:	688b      	ldr	r3, [r1, #8]
 8005afc:	000e      	movs	r6, r1
 8005afe:	1e59      	subs	r1, r3, #1
 8005b00:	0052      	lsls	r2, r2, #1
 8005b02:	9005      	str	r0, [sp, #20]
 8005b04:	4291      	cmp	r1, r2
 8005b06:	d905      	bls.n	8005b14 <_scanf_float+0x28>
 8005b08:	3b5e      	subs	r3, #94	; 0x5e
 8005b0a:	3bff      	subs	r3, #255	; 0xff
 8005b0c:	9305      	str	r3, [sp, #20]
 8005b0e:	235e      	movs	r3, #94	; 0x5e
 8005b10:	33ff      	adds	r3, #255	; 0xff
 8005b12:	60b3      	str	r3, [r6, #8]
 8005b14:	23f0      	movs	r3, #240	; 0xf0
 8005b16:	6832      	ldr	r2, [r6, #0]
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	6033      	str	r3, [r6, #0]
 8005b1e:	0033      	movs	r3, r6
 8005b20:	2400      	movs	r4, #0
 8005b22:	331c      	adds	r3, #28
 8005b24:	001f      	movs	r7, r3
 8005b26:	9303      	str	r3, [sp, #12]
 8005b28:	9402      	str	r4, [sp, #8]
 8005b2a:	9408      	str	r4, [sp, #32]
 8005b2c:	9407      	str	r4, [sp, #28]
 8005b2e:	9400      	str	r4, [sp, #0]
 8005b30:	9404      	str	r4, [sp, #16]
 8005b32:	68b2      	ldr	r2, [r6, #8]
 8005b34:	2a00      	cmp	r2, #0
 8005b36:	d00a      	beq.n	8005b4e <_scanf_float+0x62>
 8005b38:	682b      	ldr	r3, [r5, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b4e      	cmp	r3, #78	; 0x4e
 8005b3e:	d844      	bhi.n	8005bca <_scanf_float+0xde>
 8005b40:	0018      	movs	r0, r3
 8005b42:	2b40      	cmp	r3, #64	; 0x40
 8005b44:	d82c      	bhi.n	8005ba0 <_scanf_float+0xb4>
 8005b46:	382b      	subs	r0, #43	; 0x2b
 8005b48:	b2c1      	uxtb	r1, r0
 8005b4a:	290e      	cmp	r1, #14
 8005b4c:	d92a      	bls.n	8005ba4 <_scanf_float+0xb8>
 8005b4e:	9b00      	ldr	r3, [sp, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <_scanf_float+0x70>
 8005b54:	6832      	ldr	r2, [r6, #0]
 8005b56:	4ba4      	ldr	r3, [pc, #656]	; (8005de8 <_scanf_float+0x2fc>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	6033      	str	r3, [r6, #0]
 8005b5c:	9b02      	ldr	r3, [sp, #8]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d900      	bls.n	8005b66 <_scanf_float+0x7a>
 8005b64:	e0f9      	b.n	8005d5a <_scanf_float+0x26e>
 8005b66:	24be      	movs	r4, #190	; 0xbe
 8005b68:	0064      	lsls	r4, r4, #1
 8005b6a:	9b03      	ldr	r3, [sp, #12]
 8005b6c:	429f      	cmp	r7, r3
 8005b6e:	d900      	bls.n	8005b72 <_scanf_float+0x86>
 8005b70:	e0e9      	b.n	8005d46 <_scanf_float+0x25a>
 8005b72:	2301      	movs	r3, #1
 8005b74:	9302      	str	r3, [sp, #8]
 8005b76:	e185      	b.n	8005e84 <_scanf_float+0x398>
 8005b78:	0018      	movs	r0, r3
 8005b7a:	3861      	subs	r0, #97	; 0x61
 8005b7c:	280d      	cmp	r0, #13
 8005b7e:	d8e6      	bhi.n	8005b4e <_scanf_float+0x62>
 8005b80:	f7fa fad2 	bl	8000128 <__gnu_thumb1_case_shi>
 8005b84:	ffe50083 	.word	0xffe50083
 8005b88:	ffe5ffe5 	.word	0xffe5ffe5
 8005b8c:	00a200b6 	.word	0x00a200b6
 8005b90:	ffe5ffe5 	.word	0xffe5ffe5
 8005b94:	ffe50089 	.word	0xffe50089
 8005b98:	ffe5ffe5 	.word	0xffe5ffe5
 8005b9c:	0065ffe5 	.word	0x0065ffe5
 8005ba0:	3841      	subs	r0, #65	; 0x41
 8005ba2:	e7eb      	b.n	8005b7c <_scanf_float+0x90>
 8005ba4:	280e      	cmp	r0, #14
 8005ba6:	d8d2      	bhi.n	8005b4e <_scanf_float+0x62>
 8005ba8:	f7fa fabe 	bl	8000128 <__gnu_thumb1_case_shi>
 8005bac:	ffd1004b 	.word	0xffd1004b
 8005bb0:	0098004b 	.word	0x0098004b
 8005bb4:	0020ffd1 	.word	0x0020ffd1
 8005bb8:	00400040 	.word	0x00400040
 8005bbc:	00400040 	.word	0x00400040
 8005bc0:	00400040 	.word	0x00400040
 8005bc4:	00400040 	.word	0x00400040
 8005bc8:	0040      	.short	0x0040
 8005bca:	2b6e      	cmp	r3, #110	; 0x6e
 8005bcc:	d809      	bhi.n	8005be2 <_scanf_float+0xf6>
 8005bce:	2b60      	cmp	r3, #96	; 0x60
 8005bd0:	d8d2      	bhi.n	8005b78 <_scanf_float+0x8c>
 8005bd2:	2b54      	cmp	r3, #84	; 0x54
 8005bd4:	d07d      	beq.n	8005cd2 <_scanf_float+0x1e6>
 8005bd6:	2b59      	cmp	r3, #89	; 0x59
 8005bd8:	d1b9      	bne.n	8005b4e <_scanf_float+0x62>
 8005bda:	2c07      	cmp	r4, #7
 8005bdc:	d1b7      	bne.n	8005b4e <_scanf_float+0x62>
 8005bde:	2408      	movs	r4, #8
 8005be0:	e02c      	b.n	8005c3c <_scanf_float+0x150>
 8005be2:	2b74      	cmp	r3, #116	; 0x74
 8005be4:	d075      	beq.n	8005cd2 <_scanf_float+0x1e6>
 8005be6:	2b79      	cmp	r3, #121	; 0x79
 8005be8:	d0f7      	beq.n	8005bda <_scanf_float+0xee>
 8005bea:	e7b0      	b.n	8005b4e <_scanf_float+0x62>
 8005bec:	6831      	ldr	r1, [r6, #0]
 8005bee:	05c8      	lsls	r0, r1, #23
 8005bf0:	d51c      	bpl.n	8005c2c <_scanf_float+0x140>
 8005bf2:	2380      	movs	r3, #128	; 0x80
 8005bf4:	4399      	bics	r1, r3
 8005bf6:	9b00      	ldr	r3, [sp, #0]
 8005bf8:	6031      	str	r1, [r6, #0]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	9b05      	ldr	r3, [sp, #20]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <_scanf_float+0x120>
 8005c04:	3b01      	subs	r3, #1
 8005c06:	3201      	adds	r2, #1
 8005c08:	9305      	str	r3, [sp, #20]
 8005c0a:	60b2      	str	r2, [r6, #8]
 8005c0c:	68b3      	ldr	r3, [r6, #8]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	60b3      	str	r3, [r6, #8]
 8005c12:	6933      	ldr	r3, [r6, #16]
 8005c14:	3301      	adds	r3, #1
 8005c16:	6133      	str	r3, [r6, #16]
 8005c18:	686b      	ldr	r3, [r5, #4]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	606b      	str	r3, [r5, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	dc00      	bgt.n	8005c24 <_scanf_float+0x138>
 8005c22:	e086      	b.n	8005d32 <_scanf_float+0x246>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	3301      	adds	r3, #1
 8005c28:	602b      	str	r3, [r5, #0]
 8005c2a:	e782      	b.n	8005b32 <_scanf_float+0x46>
 8005c2c:	9a02      	ldr	r2, [sp, #8]
 8005c2e:	1912      	adds	r2, r2, r4
 8005c30:	2a00      	cmp	r2, #0
 8005c32:	d18c      	bne.n	8005b4e <_scanf_float+0x62>
 8005c34:	4a6d      	ldr	r2, [pc, #436]	; (8005dec <_scanf_float+0x300>)
 8005c36:	6831      	ldr	r1, [r6, #0]
 8005c38:	400a      	ands	r2, r1
 8005c3a:	6032      	str	r2, [r6, #0]
 8005c3c:	703b      	strb	r3, [r7, #0]
 8005c3e:	3701      	adds	r7, #1
 8005c40:	e7e4      	b.n	8005c0c <_scanf_float+0x120>
 8005c42:	2180      	movs	r1, #128	; 0x80
 8005c44:	6832      	ldr	r2, [r6, #0]
 8005c46:	420a      	tst	r2, r1
 8005c48:	d081      	beq.n	8005b4e <_scanf_float+0x62>
 8005c4a:	438a      	bics	r2, r1
 8005c4c:	e7f5      	b.n	8005c3a <_scanf_float+0x14e>
 8005c4e:	9a02      	ldr	r2, [sp, #8]
 8005c50:	2a00      	cmp	r2, #0
 8005c52:	d10f      	bne.n	8005c74 <_scanf_float+0x188>
 8005c54:	9a00      	ldr	r2, [sp, #0]
 8005c56:	2a00      	cmp	r2, #0
 8005c58:	d10f      	bne.n	8005c7a <_scanf_float+0x18e>
 8005c5a:	6832      	ldr	r2, [r6, #0]
 8005c5c:	21e0      	movs	r1, #224	; 0xe0
 8005c5e:	0010      	movs	r0, r2
 8005c60:	00c9      	lsls	r1, r1, #3
 8005c62:	4008      	ands	r0, r1
 8005c64:	4288      	cmp	r0, r1
 8005c66:	d108      	bne.n	8005c7a <_scanf_float+0x18e>
 8005c68:	4961      	ldr	r1, [pc, #388]	; (8005df0 <_scanf_float+0x304>)
 8005c6a:	400a      	ands	r2, r1
 8005c6c:	6032      	str	r2, [r6, #0]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	9202      	str	r2, [sp, #8]
 8005c72:	e7e3      	b.n	8005c3c <_scanf_float+0x150>
 8005c74:	9a02      	ldr	r2, [sp, #8]
 8005c76:	2a02      	cmp	r2, #2
 8005c78:	d059      	beq.n	8005d2e <_scanf_float+0x242>
 8005c7a:	2c01      	cmp	r4, #1
 8005c7c:	d002      	beq.n	8005c84 <_scanf_float+0x198>
 8005c7e:	2c04      	cmp	r4, #4
 8005c80:	d000      	beq.n	8005c84 <_scanf_float+0x198>
 8005c82:	e764      	b.n	8005b4e <_scanf_float+0x62>
 8005c84:	3401      	adds	r4, #1
 8005c86:	b2e4      	uxtb	r4, r4
 8005c88:	e7d8      	b.n	8005c3c <_scanf_float+0x150>
 8005c8a:	9a02      	ldr	r2, [sp, #8]
 8005c8c:	2a01      	cmp	r2, #1
 8005c8e:	d000      	beq.n	8005c92 <_scanf_float+0x1a6>
 8005c90:	e75d      	b.n	8005b4e <_scanf_float+0x62>
 8005c92:	2202      	movs	r2, #2
 8005c94:	e7ec      	b.n	8005c70 <_scanf_float+0x184>
 8005c96:	2c00      	cmp	r4, #0
 8005c98:	d110      	bne.n	8005cbc <_scanf_float+0x1d0>
 8005c9a:	9a00      	ldr	r2, [sp, #0]
 8005c9c:	2a00      	cmp	r2, #0
 8005c9e:	d000      	beq.n	8005ca2 <_scanf_float+0x1b6>
 8005ca0:	e758      	b.n	8005b54 <_scanf_float+0x68>
 8005ca2:	6832      	ldr	r2, [r6, #0]
 8005ca4:	21e0      	movs	r1, #224	; 0xe0
 8005ca6:	0010      	movs	r0, r2
 8005ca8:	00c9      	lsls	r1, r1, #3
 8005caa:	4008      	ands	r0, r1
 8005cac:	4288      	cmp	r0, r1
 8005cae:	d000      	beq.n	8005cb2 <_scanf_float+0x1c6>
 8005cb0:	e754      	b.n	8005b5c <_scanf_float+0x70>
 8005cb2:	494f      	ldr	r1, [pc, #316]	; (8005df0 <_scanf_float+0x304>)
 8005cb4:	3401      	adds	r4, #1
 8005cb6:	400a      	ands	r2, r1
 8005cb8:	6032      	str	r2, [r6, #0]
 8005cba:	e7bf      	b.n	8005c3c <_scanf_float+0x150>
 8005cbc:	21fd      	movs	r1, #253	; 0xfd
 8005cbe:	1ee2      	subs	r2, r4, #3
 8005cc0:	420a      	tst	r2, r1
 8005cc2:	d000      	beq.n	8005cc6 <_scanf_float+0x1da>
 8005cc4:	e743      	b.n	8005b4e <_scanf_float+0x62>
 8005cc6:	e7dd      	b.n	8005c84 <_scanf_float+0x198>
 8005cc8:	2c02      	cmp	r4, #2
 8005cca:	d000      	beq.n	8005cce <_scanf_float+0x1e2>
 8005ccc:	e73f      	b.n	8005b4e <_scanf_float+0x62>
 8005cce:	2403      	movs	r4, #3
 8005cd0:	e7b4      	b.n	8005c3c <_scanf_float+0x150>
 8005cd2:	2c06      	cmp	r4, #6
 8005cd4:	d000      	beq.n	8005cd8 <_scanf_float+0x1ec>
 8005cd6:	e73a      	b.n	8005b4e <_scanf_float+0x62>
 8005cd8:	2407      	movs	r4, #7
 8005cda:	e7af      	b.n	8005c3c <_scanf_float+0x150>
 8005cdc:	6832      	ldr	r2, [r6, #0]
 8005cde:	0591      	lsls	r1, r2, #22
 8005ce0:	d400      	bmi.n	8005ce4 <_scanf_float+0x1f8>
 8005ce2:	e734      	b.n	8005b4e <_scanf_float+0x62>
 8005ce4:	4943      	ldr	r1, [pc, #268]	; (8005df4 <_scanf_float+0x308>)
 8005ce6:	400a      	ands	r2, r1
 8005ce8:	6032      	str	r2, [r6, #0]
 8005cea:	9a00      	ldr	r2, [sp, #0]
 8005cec:	9204      	str	r2, [sp, #16]
 8005cee:	e7a5      	b.n	8005c3c <_scanf_float+0x150>
 8005cf0:	21a0      	movs	r1, #160	; 0xa0
 8005cf2:	2080      	movs	r0, #128	; 0x80
 8005cf4:	6832      	ldr	r2, [r6, #0]
 8005cf6:	00c9      	lsls	r1, r1, #3
 8005cf8:	4011      	ands	r1, r2
 8005cfa:	00c0      	lsls	r0, r0, #3
 8005cfc:	4281      	cmp	r1, r0
 8005cfe:	d006      	beq.n	8005d0e <_scanf_float+0x222>
 8005d00:	4202      	tst	r2, r0
 8005d02:	d100      	bne.n	8005d06 <_scanf_float+0x21a>
 8005d04:	e723      	b.n	8005b4e <_scanf_float+0x62>
 8005d06:	9900      	ldr	r1, [sp, #0]
 8005d08:	2900      	cmp	r1, #0
 8005d0a:	d100      	bne.n	8005d0e <_scanf_float+0x222>
 8005d0c:	e726      	b.n	8005b5c <_scanf_float+0x70>
 8005d0e:	0591      	lsls	r1, r2, #22
 8005d10:	d404      	bmi.n	8005d1c <_scanf_float+0x230>
 8005d12:	9900      	ldr	r1, [sp, #0]
 8005d14:	9804      	ldr	r0, [sp, #16]
 8005d16:	9708      	str	r7, [sp, #32]
 8005d18:	1a09      	subs	r1, r1, r0
 8005d1a:	9107      	str	r1, [sp, #28]
 8005d1c:	4934      	ldr	r1, [pc, #208]	; (8005df0 <_scanf_float+0x304>)
 8005d1e:	400a      	ands	r2, r1
 8005d20:	21c0      	movs	r1, #192	; 0xc0
 8005d22:	0049      	lsls	r1, r1, #1
 8005d24:	430a      	orrs	r2, r1
 8005d26:	6032      	str	r2, [r6, #0]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	9200      	str	r2, [sp, #0]
 8005d2c:	e786      	b.n	8005c3c <_scanf_float+0x150>
 8005d2e:	2203      	movs	r2, #3
 8005d30:	e79e      	b.n	8005c70 <_scanf_float+0x184>
 8005d32:	23c0      	movs	r3, #192	; 0xc0
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	0029      	movs	r1, r5
 8005d38:	58f3      	ldr	r3, [r6, r3]
 8005d3a:	9801      	ldr	r0, [sp, #4]
 8005d3c:	4798      	blx	r3
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	d100      	bne.n	8005d44 <_scanf_float+0x258>
 8005d42:	e6f6      	b.n	8005b32 <_scanf_float+0x46>
 8005d44:	e703      	b.n	8005b4e <_scanf_float+0x62>
 8005d46:	3f01      	subs	r7, #1
 8005d48:	5933      	ldr	r3, [r6, r4]
 8005d4a:	002a      	movs	r2, r5
 8005d4c:	7839      	ldrb	r1, [r7, #0]
 8005d4e:	9801      	ldr	r0, [sp, #4]
 8005d50:	4798      	blx	r3
 8005d52:	6933      	ldr	r3, [r6, #16]
 8005d54:	3b01      	subs	r3, #1
 8005d56:	6133      	str	r3, [r6, #16]
 8005d58:	e707      	b.n	8005b6a <_scanf_float+0x7e>
 8005d5a:	1e63      	subs	r3, r4, #1
 8005d5c:	2b06      	cmp	r3, #6
 8005d5e:	d80e      	bhi.n	8005d7e <_scanf_float+0x292>
 8005d60:	9702      	str	r7, [sp, #8]
 8005d62:	2c02      	cmp	r4, #2
 8005d64:	d920      	bls.n	8005da8 <_scanf_float+0x2bc>
 8005d66:	1be3      	subs	r3, r4, r7
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	9305      	str	r3, [sp, #20]
 8005d6c:	9b02      	ldr	r3, [sp, #8]
 8005d6e:	9a05      	ldr	r2, [sp, #20]
 8005d70:	189b      	adds	r3, r3, r2
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b03      	cmp	r3, #3
 8005d76:	d827      	bhi.n	8005dc8 <_scanf_float+0x2dc>
 8005d78:	3c03      	subs	r4, #3
 8005d7a:	b2e4      	uxtb	r4, r4
 8005d7c:	1b3f      	subs	r7, r7, r4
 8005d7e:	6833      	ldr	r3, [r6, #0]
 8005d80:	05da      	lsls	r2, r3, #23
 8005d82:	d554      	bpl.n	8005e2e <_scanf_float+0x342>
 8005d84:	055b      	lsls	r3, r3, #21
 8005d86:	d537      	bpl.n	8005df8 <_scanf_float+0x30c>
 8005d88:	24be      	movs	r4, #190	; 0xbe
 8005d8a:	0064      	lsls	r4, r4, #1
 8005d8c:	9b03      	ldr	r3, [sp, #12]
 8005d8e:	429f      	cmp	r7, r3
 8005d90:	d800      	bhi.n	8005d94 <_scanf_float+0x2a8>
 8005d92:	e6ee      	b.n	8005b72 <_scanf_float+0x86>
 8005d94:	3f01      	subs	r7, #1
 8005d96:	5933      	ldr	r3, [r6, r4]
 8005d98:	002a      	movs	r2, r5
 8005d9a:	7839      	ldrb	r1, [r7, #0]
 8005d9c:	9801      	ldr	r0, [sp, #4]
 8005d9e:	4798      	blx	r3
 8005da0:	6933      	ldr	r3, [r6, #16]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	6133      	str	r3, [r6, #16]
 8005da6:	e7f1      	b.n	8005d8c <_scanf_float+0x2a0>
 8005da8:	24be      	movs	r4, #190	; 0xbe
 8005daa:	0064      	lsls	r4, r4, #1
 8005dac:	9b03      	ldr	r3, [sp, #12]
 8005dae:	429f      	cmp	r7, r3
 8005db0:	d800      	bhi.n	8005db4 <_scanf_float+0x2c8>
 8005db2:	e6de      	b.n	8005b72 <_scanf_float+0x86>
 8005db4:	3f01      	subs	r7, #1
 8005db6:	5933      	ldr	r3, [r6, r4]
 8005db8:	002a      	movs	r2, r5
 8005dba:	7839      	ldrb	r1, [r7, #0]
 8005dbc:	9801      	ldr	r0, [sp, #4]
 8005dbe:	4798      	blx	r3
 8005dc0:	6933      	ldr	r3, [r6, #16]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	6133      	str	r3, [r6, #16]
 8005dc6:	e7f1      	b.n	8005dac <_scanf_float+0x2c0>
 8005dc8:	9b02      	ldr	r3, [sp, #8]
 8005dca:	002a      	movs	r2, r5
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	7819      	ldrb	r1, [r3, #0]
 8005dd0:	9302      	str	r3, [sp, #8]
 8005dd2:	23be      	movs	r3, #190	; 0xbe
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	58f3      	ldr	r3, [r6, r3]
 8005dd8:	9801      	ldr	r0, [sp, #4]
 8005dda:	9309      	str	r3, [sp, #36]	; 0x24
 8005ddc:	4798      	blx	r3
 8005dde:	6933      	ldr	r3, [r6, #16]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	6133      	str	r3, [r6, #16]
 8005de4:	e7c2      	b.n	8005d6c <_scanf_float+0x280>
 8005de6:	46c0      	nop			; (mov r8, r8)
 8005de8:	fffffeff 	.word	0xfffffeff
 8005dec:	fffffe7f 	.word	0xfffffe7f
 8005df0:	fffff87f 	.word	0xfffff87f
 8005df4:	fffffd7f 	.word	0xfffffd7f
 8005df8:	6933      	ldr	r3, [r6, #16]
 8005dfa:	1e7c      	subs	r4, r7, #1
 8005dfc:	7821      	ldrb	r1, [r4, #0]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	6133      	str	r3, [r6, #16]
 8005e02:	2965      	cmp	r1, #101	; 0x65
 8005e04:	d00c      	beq.n	8005e20 <_scanf_float+0x334>
 8005e06:	2945      	cmp	r1, #69	; 0x45
 8005e08:	d00a      	beq.n	8005e20 <_scanf_float+0x334>
 8005e0a:	23be      	movs	r3, #190	; 0xbe
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	58f3      	ldr	r3, [r6, r3]
 8005e10:	002a      	movs	r2, r5
 8005e12:	9801      	ldr	r0, [sp, #4]
 8005e14:	4798      	blx	r3
 8005e16:	6933      	ldr	r3, [r6, #16]
 8005e18:	1ebc      	subs	r4, r7, #2
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	7821      	ldrb	r1, [r4, #0]
 8005e1e:	6133      	str	r3, [r6, #16]
 8005e20:	23be      	movs	r3, #190	; 0xbe
 8005e22:	005b      	lsls	r3, r3, #1
 8005e24:	002a      	movs	r2, r5
 8005e26:	58f3      	ldr	r3, [r6, r3]
 8005e28:	9801      	ldr	r0, [sp, #4]
 8005e2a:	4798      	blx	r3
 8005e2c:	0027      	movs	r7, r4
 8005e2e:	6832      	ldr	r2, [r6, #0]
 8005e30:	2310      	movs	r3, #16
 8005e32:	0011      	movs	r1, r2
 8005e34:	4019      	ands	r1, r3
 8005e36:	9102      	str	r1, [sp, #8]
 8005e38:	421a      	tst	r2, r3
 8005e3a:	d158      	bne.n	8005eee <_scanf_float+0x402>
 8005e3c:	23c0      	movs	r3, #192	; 0xc0
 8005e3e:	7039      	strb	r1, [r7, #0]
 8005e40:	6832      	ldr	r2, [r6, #0]
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	4013      	ands	r3, r2
 8005e46:	2280      	movs	r2, #128	; 0x80
 8005e48:	00d2      	lsls	r2, r2, #3
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d11d      	bne.n	8005e8a <_scanf_float+0x39e>
 8005e4e:	9b04      	ldr	r3, [sp, #16]
 8005e50:	9a00      	ldr	r2, [sp, #0]
 8005e52:	9900      	ldr	r1, [sp, #0]
 8005e54:	1a9a      	subs	r2, r3, r2
 8005e56:	428b      	cmp	r3, r1
 8005e58:	d124      	bne.n	8005ea4 <_scanf_float+0x3b8>
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	9903      	ldr	r1, [sp, #12]
 8005e5e:	9801      	ldr	r0, [sp, #4]
 8005e60:	f000 feac 	bl	8006bbc <_strtod_r>
 8005e64:	9b06      	ldr	r3, [sp, #24]
 8005e66:	000d      	movs	r5, r1
 8005e68:	6831      	ldr	r1, [r6, #0]
 8005e6a:	0004      	movs	r4, r0
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	078a      	lsls	r2, r1, #30
 8005e70:	d525      	bpl.n	8005ebe <_scanf_float+0x3d2>
 8005e72:	1d1a      	adds	r2, r3, #4
 8005e74:	9906      	ldr	r1, [sp, #24]
 8005e76:	600a      	str	r2, [r1, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	601c      	str	r4, [r3, #0]
 8005e7c:	605d      	str	r5, [r3, #4]
 8005e7e:	68f3      	ldr	r3, [r6, #12]
 8005e80:	3301      	adds	r3, #1
 8005e82:	60f3      	str	r3, [r6, #12]
 8005e84:	9802      	ldr	r0, [sp, #8]
 8005e86:	b00b      	add	sp, #44	; 0x2c
 8005e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e8a:	9b07      	ldr	r3, [sp, #28]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d0e4      	beq.n	8005e5a <_scanf_float+0x36e>
 8005e90:	9b08      	ldr	r3, [sp, #32]
 8005e92:	9a02      	ldr	r2, [sp, #8]
 8005e94:	1c59      	adds	r1, r3, #1
 8005e96:	9801      	ldr	r0, [sp, #4]
 8005e98:	230a      	movs	r3, #10
 8005e9a:	f000 ff25 	bl	8006ce8 <_strtol_r>
 8005e9e:	9b07      	ldr	r3, [sp, #28]
 8005ea0:	9f08      	ldr	r7, [sp, #32]
 8005ea2:	1ac2      	subs	r2, r0, r3
 8005ea4:	0033      	movs	r3, r6
 8005ea6:	3370      	adds	r3, #112	; 0x70
 8005ea8:	33ff      	adds	r3, #255	; 0xff
 8005eaa:	429f      	cmp	r7, r3
 8005eac:	d302      	bcc.n	8005eb4 <_scanf_float+0x3c8>
 8005eae:	0037      	movs	r7, r6
 8005eb0:	376f      	adds	r7, #111	; 0x6f
 8005eb2:	37ff      	adds	r7, #255	; 0xff
 8005eb4:	0038      	movs	r0, r7
 8005eb6:	490f      	ldr	r1, [pc, #60]	; (8005ef4 <_scanf_float+0x408>)
 8005eb8:	f000 f824 	bl	8005f04 <siprintf>
 8005ebc:	e7cd      	b.n	8005e5a <_scanf_float+0x36e>
 8005ebe:	1d1a      	adds	r2, r3, #4
 8005ec0:	0749      	lsls	r1, r1, #29
 8005ec2:	d4d7      	bmi.n	8005e74 <_scanf_float+0x388>
 8005ec4:	9906      	ldr	r1, [sp, #24]
 8005ec6:	0020      	movs	r0, r4
 8005ec8:	600a      	str	r2, [r1, #0]
 8005eca:	681f      	ldr	r7, [r3, #0]
 8005ecc:	0022      	movs	r2, r4
 8005ece:	002b      	movs	r3, r5
 8005ed0:	0029      	movs	r1, r5
 8005ed2:	f7fc f8c5 	bl	8002060 <__aeabi_dcmpun>
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	d004      	beq.n	8005ee4 <_scanf_float+0x3f8>
 8005eda:	4807      	ldr	r0, [pc, #28]	; (8005ef8 <_scanf_float+0x40c>)
 8005edc:	f000 f80e 	bl	8005efc <nanf>
 8005ee0:	6038      	str	r0, [r7, #0]
 8005ee2:	e7cc      	b.n	8005e7e <_scanf_float+0x392>
 8005ee4:	0020      	movs	r0, r4
 8005ee6:	0029      	movs	r1, r5
 8005ee8:	f7fc f964 	bl	80021b4 <__aeabi_d2f>
 8005eec:	e7f8      	b.n	8005ee0 <_scanf_float+0x3f4>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	e640      	b.n	8005b74 <_scanf_float+0x88>
 8005ef2:	46c0      	nop			; (mov r8, r8)
 8005ef4:	08009cc8 	.word	0x08009cc8
 8005ef8:	0800a0e0 	.word	0x0800a0e0

08005efc <nanf>:
 8005efc:	4800      	ldr	r0, [pc, #0]	; (8005f00 <nanf+0x4>)
 8005efe:	4770      	bx	lr
 8005f00:	7fc00000 	.word	0x7fc00000

08005f04 <siprintf>:
 8005f04:	b40e      	push	{r1, r2, r3}
 8005f06:	b500      	push	{lr}
 8005f08:	490b      	ldr	r1, [pc, #44]	; (8005f38 <siprintf+0x34>)
 8005f0a:	b09c      	sub	sp, #112	; 0x70
 8005f0c:	ab1d      	add	r3, sp, #116	; 0x74
 8005f0e:	9002      	str	r0, [sp, #8]
 8005f10:	9006      	str	r0, [sp, #24]
 8005f12:	9107      	str	r1, [sp, #28]
 8005f14:	9104      	str	r1, [sp, #16]
 8005f16:	4809      	ldr	r0, [pc, #36]	; (8005f3c <siprintf+0x38>)
 8005f18:	4909      	ldr	r1, [pc, #36]	; (8005f40 <siprintf+0x3c>)
 8005f1a:	cb04      	ldmia	r3!, {r2}
 8005f1c:	9105      	str	r1, [sp, #20]
 8005f1e:	6800      	ldr	r0, [r0, #0]
 8005f20:	a902      	add	r1, sp, #8
 8005f22:	9301      	str	r3, [sp, #4]
 8005f24:	f002 ff16 	bl	8008d54 <_svfiprintf_r>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	9a02      	ldr	r2, [sp, #8]
 8005f2c:	7013      	strb	r3, [r2, #0]
 8005f2e:	b01c      	add	sp, #112	; 0x70
 8005f30:	bc08      	pop	{r3}
 8005f32:	b003      	add	sp, #12
 8005f34:	4718      	bx	r3
 8005f36:	46c0      	nop			; (mov r8, r8)
 8005f38:	7fffffff 	.word	0x7fffffff
 8005f3c:	20000014 	.word	0x20000014
 8005f40:	ffff0208 	.word	0xffff0208

08005f44 <sulp>:
 8005f44:	b570      	push	{r4, r5, r6, lr}
 8005f46:	0016      	movs	r6, r2
 8005f48:	000d      	movs	r5, r1
 8005f4a:	f002 fca7 	bl	800889c <__ulp>
 8005f4e:	2e00      	cmp	r6, #0
 8005f50:	d00d      	beq.n	8005f6e <sulp+0x2a>
 8005f52:	236b      	movs	r3, #107	; 0x6b
 8005f54:	006a      	lsls	r2, r5, #1
 8005f56:	0d52      	lsrs	r2, r2, #21
 8005f58:	1a9b      	subs	r3, r3, r2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	dd07      	ble.n	8005f6e <sulp+0x2a>
 8005f5e:	2400      	movs	r4, #0
 8005f60:	4a03      	ldr	r2, [pc, #12]	; (8005f70 <sulp+0x2c>)
 8005f62:	051b      	lsls	r3, r3, #20
 8005f64:	189d      	adds	r5, r3, r2
 8005f66:	002b      	movs	r3, r5
 8005f68:	0022      	movs	r2, r4
 8005f6a:	f7fb fa7b 	bl	8001464 <__aeabi_dmul>
 8005f6e:	bd70      	pop	{r4, r5, r6, pc}
 8005f70:	3ff00000 	.word	0x3ff00000

08005f74 <_strtod_l>:
 8005f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f76:	001d      	movs	r5, r3
 8005f78:	2300      	movs	r3, #0
 8005f7a:	b0a7      	sub	sp, #156	; 0x9c
 8005f7c:	9322      	str	r3, [sp, #136]	; 0x88
 8005f7e:	4bae      	ldr	r3, [pc, #696]	; (8006238 <_strtod_l+0x2c4>)
 8005f80:	9005      	str	r0, [sp, #20]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	9108      	str	r1, [sp, #32]
 8005f86:	0018      	movs	r0, r3
 8005f88:	9307      	str	r3, [sp, #28]
 8005f8a:	921d      	str	r2, [sp, #116]	; 0x74
 8005f8c:	f7fa f8ba 	bl	8000104 <strlen>
 8005f90:	2600      	movs	r6, #0
 8005f92:	0004      	movs	r4, r0
 8005f94:	2700      	movs	r7, #0
 8005f96:	9b08      	ldr	r3, [sp, #32]
 8005f98:	9321      	str	r3, [sp, #132]	; 0x84
 8005f9a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f9c:	7813      	ldrb	r3, [r2, #0]
 8005f9e:	2b2b      	cmp	r3, #43	; 0x2b
 8005fa0:	d058      	beq.n	8006054 <_strtod_l+0xe0>
 8005fa2:	d844      	bhi.n	800602e <_strtod_l+0xba>
 8005fa4:	2b0d      	cmp	r3, #13
 8005fa6:	d83d      	bhi.n	8006024 <_strtod_l+0xb0>
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d83d      	bhi.n	8006028 <_strtod_l+0xb4>
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d047      	beq.n	8006040 <_strtod_l+0xcc>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	9310      	str	r3, [sp, #64]	; 0x40
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fb8:	920a      	str	r2, [sp, #40]	; 0x28
 8005fba:	9306      	str	r3, [sp, #24]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b30      	cmp	r3, #48	; 0x30
 8005fc0:	d000      	beq.n	8005fc4 <_strtod_l+0x50>
 8005fc2:	e083      	b.n	80060cc <_strtod_l+0x158>
 8005fc4:	9b06      	ldr	r3, [sp, #24]
 8005fc6:	3220      	adds	r2, #32
 8005fc8:	785b      	ldrb	r3, [r3, #1]
 8005fca:	4393      	bics	r3, r2
 8005fcc:	2b58      	cmp	r3, #88	; 0x58
 8005fce:	d000      	beq.n	8005fd2 <_strtod_l+0x5e>
 8005fd0:	e072      	b.n	80060b8 <_strtod_l+0x144>
 8005fd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005fd4:	9502      	str	r5, [sp, #8]
 8005fd6:	9301      	str	r3, [sp, #4]
 8005fd8:	ab22      	add	r3, sp, #136	; 0x88
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	4a97      	ldr	r2, [pc, #604]	; (800623c <_strtod_l+0x2c8>)
 8005fde:	ab23      	add	r3, sp, #140	; 0x8c
 8005fe0:	9805      	ldr	r0, [sp, #20]
 8005fe2:	a921      	add	r1, sp, #132	; 0x84
 8005fe4:	f001 fd98 	bl	8007b18 <__gethex>
 8005fe8:	2307      	movs	r3, #7
 8005fea:	0005      	movs	r5, r0
 8005fec:	0004      	movs	r4, r0
 8005fee:	401d      	ands	r5, r3
 8005ff0:	4218      	tst	r0, r3
 8005ff2:	d006      	beq.n	8006002 <_strtod_l+0x8e>
 8005ff4:	2d06      	cmp	r5, #6
 8005ff6:	d12f      	bne.n	8006058 <_strtod_l+0xe4>
 8005ff8:	9b06      	ldr	r3, [sp, #24]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	9321      	str	r3, [sp, #132]	; 0x84
 8005ffe:	2300      	movs	r3, #0
 8006000:	9310      	str	r3, [sp, #64]	; 0x40
 8006002:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <_strtod_l+0x9a>
 8006008:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800600a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006010:	2b00      	cmp	r3, #0
 8006012:	d01c      	beq.n	800604e <_strtod_l+0xda>
 8006014:	2380      	movs	r3, #128	; 0x80
 8006016:	0032      	movs	r2, r6
 8006018:	061b      	lsls	r3, r3, #24
 800601a:	18fb      	adds	r3, r7, r3
 800601c:	0010      	movs	r0, r2
 800601e:	0019      	movs	r1, r3
 8006020:	b027      	add	sp, #156	; 0x9c
 8006022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006024:	2b20      	cmp	r3, #32
 8006026:	d1c3      	bne.n	8005fb0 <_strtod_l+0x3c>
 8006028:	3201      	adds	r2, #1
 800602a:	9221      	str	r2, [sp, #132]	; 0x84
 800602c:	e7b5      	b.n	8005f9a <_strtod_l+0x26>
 800602e:	2b2d      	cmp	r3, #45	; 0x2d
 8006030:	d1be      	bne.n	8005fb0 <_strtod_l+0x3c>
 8006032:	3b2c      	subs	r3, #44	; 0x2c
 8006034:	9310      	str	r3, [sp, #64]	; 0x40
 8006036:	1c53      	adds	r3, r2, #1
 8006038:	9321      	str	r3, [sp, #132]	; 0x84
 800603a:	7853      	ldrb	r3, [r2, #1]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1b9      	bne.n	8005fb4 <_strtod_l+0x40>
 8006040:	9b08      	ldr	r3, [sp, #32]
 8006042:	9321      	str	r3, [sp, #132]	; 0x84
 8006044:	2300      	movs	r3, #0
 8006046:	9310      	str	r3, [sp, #64]	; 0x40
 8006048:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1dc      	bne.n	8006008 <_strtod_l+0x94>
 800604e:	0032      	movs	r2, r6
 8006050:	003b      	movs	r3, r7
 8006052:	e7e3      	b.n	800601c <_strtod_l+0xa8>
 8006054:	2300      	movs	r3, #0
 8006056:	e7ed      	b.n	8006034 <_strtod_l+0xc0>
 8006058:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800605a:	2a00      	cmp	r2, #0
 800605c:	d007      	beq.n	800606e <_strtod_l+0xfa>
 800605e:	2135      	movs	r1, #53	; 0x35
 8006060:	a824      	add	r0, sp, #144	; 0x90
 8006062:	f002 fd1a 	bl	8008a9a <__copybits>
 8006066:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006068:	9805      	ldr	r0, [sp, #20]
 800606a:	f002 f8d5 	bl	8008218 <_Bfree>
 800606e:	1e68      	subs	r0, r5, #1
 8006070:	2805      	cmp	r0, #5
 8006072:	d806      	bhi.n	8006082 <_strtod_l+0x10e>
 8006074:	f7fa f84e 	bl	8000114 <__gnu_thumb1_case_uqi>
 8006078:	1c190b0e 	.word	0x1c190b0e
 800607c:	030e      	.short	0x030e
 800607e:	2700      	movs	r7, #0
 8006080:	003e      	movs	r6, r7
 8006082:	0723      	lsls	r3, r4, #28
 8006084:	d5bd      	bpl.n	8006002 <_strtod_l+0x8e>
 8006086:	2380      	movs	r3, #128	; 0x80
 8006088:	061b      	lsls	r3, r3, #24
 800608a:	431f      	orrs	r7, r3
 800608c:	e7b9      	b.n	8006002 <_strtod_l+0x8e>
 800608e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006090:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8006092:	e7f6      	b.n	8006082 <_strtod_l+0x10e>
 8006094:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006096:	4a6a      	ldr	r2, [pc, #424]	; (8006240 <_strtod_l+0x2cc>)
 8006098:	496a      	ldr	r1, [pc, #424]	; (8006244 <_strtod_l+0x2d0>)
 800609a:	401a      	ands	r2, r3
 800609c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800609e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80060a0:	185b      	adds	r3, r3, r1
 80060a2:	051b      	lsls	r3, r3, #20
 80060a4:	431a      	orrs	r2, r3
 80060a6:	0017      	movs	r7, r2
 80060a8:	e7eb      	b.n	8006082 <_strtod_l+0x10e>
 80060aa:	2600      	movs	r6, #0
 80060ac:	4f66      	ldr	r7, [pc, #408]	; (8006248 <_strtod_l+0x2d4>)
 80060ae:	e7e8      	b.n	8006082 <_strtod_l+0x10e>
 80060b0:	2601      	movs	r6, #1
 80060b2:	4f66      	ldr	r7, [pc, #408]	; (800624c <_strtod_l+0x2d8>)
 80060b4:	4276      	negs	r6, r6
 80060b6:	e7e4      	b.n	8006082 <_strtod_l+0x10e>
 80060b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	9221      	str	r2, [sp, #132]	; 0x84
 80060be:	785b      	ldrb	r3, [r3, #1]
 80060c0:	2b30      	cmp	r3, #48	; 0x30
 80060c2:	d0f9      	beq.n	80060b8 <_strtod_l+0x144>
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d09c      	beq.n	8006002 <_strtod_l+0x8e>
 80060c8:	2301      	movs	r3, #1
 80060ca:	930a      	str	r3, [sp, #40]	; 0x28
 80060cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060ce:	220a      	movs	r2, #10
 80060d0:	9311      	str	r3, [sp, #68]	; 0x44
 80060d2:	2300      	movs	r3, #0
 80060d4:	930e      	str	r3, [sp, #56]	; 0x38
 80060d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80060d8:	9309      	str	r3, [sp, #36]	; 0x24
 80060da:	9821      	ldr	r0, [sp, #132]	; 0x84
 80060dc:	7805      	ldrb	r5, [r0, #0]
 80060de:	002b      	movs	r3, r5
 80060e0:	3b30      	subs	r3, #48	; 0x30
 80060e2:	b2d9      	uxtb	r1, r3
 80060e4:	2909      	cmp	r1, #9
 80060e6:	d927      	bls.n	8006138 <_strtod_l+0x1c4>
 80060e8:	0022      	movs	r2, r4
 80060ea:	9907      	ldr	r1, [sp, #28]
 80060ec:	f002 ff4a 	bl	8008f84 <strncmp>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d033      	beq.n	800615c <_strtod_l+0x1e8>
 80060f4:	2000      	movs	r0, #0
 80060f6:	002b      	movs	r3, r5
 80060f8:	4684      	mov	ip, r0
 80060fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060fc:	900c      	str	r0, [sp, #48]	; 0x30
 80060fe:	9206      	str	r2, [sp, #24]
 8006100:	2220      	movs	r2, #32
 8006102:	0019      	movs	r1, r3
 8006104:	4391      	bics	r1, r2
 8006106:	000a      	movs	r2, r1
 8006108:	2100      	movs	r1, #0
 800610a:	9107      	str	r1, [sp, #28]
 800610c:	2a45      	cmp	r2, #69	; 0x45
 800610e:	d000      	beq.n	8006112 <_strtod_l+0x19e>
 8006110:	e0c5      	b.n	800629e <_strtod_l+0x32a>
 8006112:	9b06      	ldr	r3, [sp, #24]
 8006114:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006116:	4303      	orrs	r3, r0
 8006118:	4313      	orrs	r3, r2
 800611a:	428b      	cmp	r3, r1
 800611c:	d090      	beq.n	8006040 <_strtod_l+0xcc>
 800611e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006120:	9308      	str	r3, [sp, #32]
 8006122:	3301      	adds	r3, #1
 8006124:	9321      	str	r3, [sp, #132]	; 0x84
 8006126:	9b08      	ldr	r3, [sp, #32]
 8006128:	785b      	ldrb	r3, [r3, #1]
 800612a:	2b2b      	cmp	r3, #43	; 0x2b
 800612c:	d075      	beq.n	800621a <_strtod_l+0x2a6>
 800612e:	000c      	movs	r4, r1
 8006130:	2b2d      	cmp	r3, #45	; 0x2d
 8006132:	d178      	bne.n	8006226 <_strtod_l+0x2b2>
 8006134:	2401      	movs	r4, #1
 8006136:	e071      	b.n	800621c <_strtod_l+0x2a8>
 8006138:	9909      	ldr	r1, [sp, #36]	; 0x24
 800613a:	2908      	cmp	r1, #8
 800613c:	dc09      	bgt.n	8006152 <_strtod_l+0x1de>
 800613e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006140:	4351      	muls	r1, r2
 8006142:	185b      	adds	r3, r3, r1
 8006144:	930b      	str	r3, [sp, #44]	; 0x2c
 8006146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006148:	3001      	adds	r0, #1
 800614a:	3301      	adds	r3, #1
 800614c:	9309      	str	r3, [sp, #36]	; 0x24
 800614e:	9021      	str	r0, [sp, #132]	; 0x84
 8006150:	e7c3      	b.n	80060da <_strtod_l+0x166>
 8006152:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006154:	4351      	muls	r1, r2
 8006156:	185b      	adds	r3, r3, r1
 8006158:	930e      	str	r3, [sp, #56]	; 0x38
 800615a:	e7f4      	b.n	8006146 <_strtod_l+0x1d2>
 800615c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800615e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006160:	191c      	adds	r4, r3, r4
 8006162:	9421      	str	r4, [sp, #132]	; 0x84
 8006164:	7823      	ldrb	r3, [r4, #0]
 8006166:	2a00      	cmp	r2, #0
 8006168:	d039      	beq.n	80061de <_strtod_l+0x26a>
 800616a:	900c      	str	r0, [sp, #48]	; 0x30
 800616c:	9206      	str	r2, [sp, #24]
 800616e:	001a      	movs	r2, r3
 8006170:	3a30      	subs	r2, #48	; 0x30
 8006172:	2a09      	cmp	r2, #9
 8006174:	d912      	bls.n	800619c <_strtod_l+0x228>
 8006176:	2201      	movs	r2, #1
 8006178:	4694      	mov	ip, r2
 800617a:	e7c1      	b.n	8006100 <_strtod_l+0x18c>
 800617c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800617e:	3001      	adds	r0, #1
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	9221      	str	r2, [sp, #132]	; 0x84
 8006184:	785b      	ldrb	r3, [r3, #1]
 8006186:	2b30      	cmp	r3, #48	; 0x30
 8006188:	d0f8      	beq.n	800617c <_strtod_l+0x208>
 800618a:	001a      	movs	r2, r3
 800618c:	3a31      	subs	r2, #49	; 0x31
 800618e:	2a08      	cmp	r2, #8
 8006190:	d83e      	bhi.n	8006210 <_strtod_l+0x29c>
 8006192:	900c      	str	r0, [sp, #48]	; 0x30
 8006194:	2000      	movs	r0, #0
 8006196:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006198:	9006      	str	r0, [sp, #24]
 800619a:	9211      	str	r2, [sp, #68]	; 0x44
 800619c:	001a      	movs	r2, r3
 800619e:	9906      	ldr	r1, [sp, #24]
 80061a0:	1c44      	adds	r4, r0, #1
 80061a2:	3a30      	subs	r2, #48	; 0x30
 80061a4:	2b30      	cmp	r3, #48	; 0x30
 80061a6:	d013      	beq.n	80061d0 <_strtod_l+0x25c>
 80061a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061aa:	191b      	adds	r3, r3, r4
 80061ac:	930c      	str	r3, [sp, #48]	; 0x30
 80061ae:	1844      	adds	r4, r0, r1
 80061b0:	000b      	movs	r3, r1
 80061b2:	210a      	movs	r1, #10
 80061b4:	429c      	cmp	r4, r3
 80061b6:	d114      	bne.n	80061e2 <_strtod_l+0x26e>
 80061b8:	9b06      	ldr	r3, [sp, #24]
 80061ba:	1c59      	adds	r1, r3, #1
 80061bc:	1809      	adds	r1, r1, r0
 80061be:	1818      	adds	r0, r3, r0
 80061c0:	2808      	cmp	r0, #8
 80061c2:	dc1c      	bgt.n	80061fe <_strtod_l+0x28a>
 80061c4:	230a      	movs	r3, #10
 80061c6:	2400      	movs	r4, #0
 80061c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80061ca:	4343      	muls	r3, r0
 80061cc:	18d3      	adds	r3, r2, r3
 80061ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80061d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061d2:	0020      	movs	r0, r4
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	9221      	str	r2, [sp, #132]	; 0x84
 80061d8:	785b      	ldrb	r3, [r3, #1]
 80061da:	9106      	str	r1, [sp, #24]
 80061dc:	e7c7      	b.n	800616e <_strtod_l+0x1fa>
 80061de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061e0:	e7d1      	b.n	8006186 <_strtod_l+0x212>
 80061e2:	2b08      	cmp	r3, #8
 80061e4:	dc04      	bgt.n	80061f0 <_strtod_l+0x27c>
 80061e6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80061e8:	434d      	muls	r5, r1
 80061ea:	950b      	str	r5, [sp, #44]	; 0x2c
 80061ec:	3301      	adds	r3, #1
 80061ee:	e7e1      	b.n	80061b4 <_strtod_l+0x240>
 80061f0:	1c5d      	adds	r5, r3, #1
 80061f2:	2d10      	cmp	r5, #16
 80061f4:	dcfa      	bgt.n	80061ec <_strtod_l+0x278>
 80061f6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80061f8:	434d      	muls	r5, r1
 80061fa:	950e      	str	r5, [sp, #56]	; 0x38
 80061fc:	e7f6      	b.n	80061ec <_strtod_l+0x278>
 80061fe:	2400      	movs	r4, #0
 8006200:	2910      	cmp	r1, #16
 8006202:	dce5      	bgt.n	80061d0 <_strtod_l+0x25c>
 8006204:	230a      	movs	r3, #10
 8006206:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006208:	4343      	muls	r3, r0
 800620a:	18d3      	adds	r3, r2, r3
 800620c:	930e      	str	r3, [sp, #56]	; 0x38
 800620e:	e7df      	b.n	80061d0 <_strtod_l+0x25c>
 8006210:	2200      	movs	r2, #0
 8006212:	920c      	str	r2, [sp, #48]	; 0x30
 8006214:	9206      	str	r2, [sp, #24]
 8006216:	3201      	adds	r2, #1
 8006218:	e7ae      	b.n	8006178 <_strtod_l+0x204>
 800621a:	2400      	movs	r4, #0
 800621c:	9b08      	ldr	r3, [sp, #32]
 800621e:	3302      	adds	r3, #2
 8006220:	9321      	str	r3, [sp, #132]	; 0x84
 8006222:	9b08      	ldr	r3, [sp, #32]
 8006224:	789b      	ldrb	r3, [r3, #2]
 8006226:	001a      	movs	r2, r3
 8006228:	3a30      	subs	r2, #48	; 0x30
 800622a:	2a09      	cmp	r2, #9
 800622c:	d914      	bls.n	8006258 <_strtod_l+0x2e4>
 800622e:	9a08      	ldr	r2, [sp, #32]
 8006230:	9221      	str	r2, [sp, #132]	; 0x84
 8006232:	2200      	movs	r2, #0
 8006234:	e032      	b.n	800629c <_strtod_l+0x328>
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	08009f20 	.word	0x08009f20
 800623c:	08009cd0 	.word	0x08009cd0
 8006240:	ffefffff 	.word	0xffefffff
 8006244:	00000433 	.word	0x00000433
 8006248:	7ff00000 	.word	0x7ff00000
 800624c:	7fffffff 	.word	0x7fffffff
 8006250:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	9221      	str	r2, [sp, #132]	; 0x84
 8006256:	785b      	ldrb	r3, [r3, #1]
 8006258:	2b30      	cmp	r3, #48	; 0x30
 800625a:	d0f9      	beq.n	8006250 <_strtod_l+0x2dc>
 800625c:	2200      	movs	r2, #0
 800625e:	9207      	str	r2, [sp, #28]
 8006260:	001a      	movs	r2, r3
 8006262:	3a31      	subs	r2, #49	; 0x31
 8006264:	2a08      	cmp	r2, #8
 8006266:	d81a      	bhi.n	800629e <_strtod_l+0x32a>
 8006268:	3b30      	subs	r3, #48	; 0x30
 800626a:	001a      	movs	r2, r3
 800626c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800626e:	9307      	str	r3, [sp, #28]
 8006270:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006272:	1c59      	adds	r1, r3, #1
 8006274:	9121      	str	r1, [sp, #132]	; 0x84
 8006276:	785b      	ldrb	r3, [r3, #1]
 8006278:	001d      	movs	r5, r3
 800627a:	3d30      	subs	r5, #48	; 0x30
 800627c:	2d09      	cmp	r5, #9
 800627e:	d939      	bls.n	80062f4 <_strtod_l+0x380>
 8006280:	9d07      	ldr	r5, [sp, #28]
 8006282:	1b49      	subs	r1, r1, r5
 8006284:	4daf      	ldr	r5, [pc, #700]	; (8006544 <_strtod_l+0x5d0>)
 8006286:	9507      	str	r5, [sp, #28]
 8006288:	2908      	cmp	r1, #8
 800628a:	dc03      	bgt.n	8006294 <_strtod_l+0x320>
 800628c:	9207      	str	r2, [sp, #28]
 800628e:	42aa      	cmp	r2, r5
 8006290:	dd00      	ble.n	8006294 <_strtod_l+0x320>
 8006292:	9507      	str	r5, [sp, #28]
 8006294:	2c00      	cmp	r4, #0
 8006296:	d002      	beq.n	800629e <_strtod_l+0x32a>
 8006298:	9a07      	ldr	r2, [sp, #28]
 800629a:	4252      	negs	r2, r2
 800629c:	9207      	str	r2, [sp, #28]
 800629e:	9a06      	ldr	r2, [sp, #24]
 80062a0:	2a00      	cmp	r2, #0
 80062a2:	d14b      	bne.n	800633c <_strtod_l+0x3c8>
 80062a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062a6:	4310      	orrs	r0, r2
 80062a8:	d000      	beq.n	80062ac <_strtod_l+0x338>
 80062aa:	e6aa      	b.n	8006002 <_strtod_l+0x8e>
 80062ac:	4662      	mov	r2, ip
 80062ae:	2a00      	cmp	r2, #0
 80062b0:	d000      	beq.n	80062b4 <_strtod_l+0x340>
 80062b2:	e6c5      	b.n	8006040 <_strtod_l+0xcc>
 80062b4:	2b69      	cmp	r3, #105	; 0x69
 80062b6:	d025      	beq.n	8006304 <_strtod_l+0x390>
 80062b8:	dc21      	bgt.n	80062fe <_strtod_l+0x38a>
 80062ba:	2b49      	cmp	r3, #73	; 0x49
 80062bc:	d022      	beq.n	8006304 <_strtod_l+0x390>
 80062be:	2b4e      	cmp	r3, #78	; 0x4e
 80062c0:	d000      	beq.n	80062c4 <_strtod_l+0x350>
 80062c2:	e6bd      	b.n	8006040 <_strtod_l+0xcc>
 80062c4:	49a0      	ldr	r1, [pc, #640]	; (8006548 <_strtod_l+0x5d4>)
 80062c6:	a821      	add	r0, sp, #132	; 0x84
 80062c8:	f001 fe74 	bl	8007fb4 <__match>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d100      	bne.n	80062d2 <_strtod_l+0x35e>
 80062d0:	e6b6      	b.n	8006040 <_strtod_l+0xcc>
 80062d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	2b28      	cmp	r3, #40	; 0x28
 80062d8:	d12a      	bne.n	8006330 <_strtod_l+0x3bc>
 80062da:	499c      	ldr	r1, [pc, #624]	; (800654c <_strtod_l+0x5d8>)
 80062dc:	aa24      	add	r2, sp, #144	; 0x90
 80062de:	a821      	add	r0, sp, #132	; 0x84
 80062e0:	f001 fe7c 	bl	8007fdc <__hexnan>
 80062e4:	2805      	cmp	r0, #5
 80062e6:	d123      	bne.n	8006330 <_strtod_l+0x3bc>
 80062e8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80062ea:	4a99      	ldr	r2, [pc, #612]	; (8006550 <_strtod_l+0x5dc>)
 80062ec:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80062ee:	431a      	orrs	r2, r3
 80062f0:	0017      	movs	r7, r2
 80062f2:	e686      	b.n	8006002 <_strtod_l+0x8e>
 80062f4:	210a      	movs	r1, #10
 80062f6:	434a      	muls	r2, r1
 80062f8:	18d2      	adds	r2, r2, r3
 80062fa:	3a30      	subs	r2, #48	; 0x30
 80062fc:	e7b8      	b.n	8006270 <_strtod_l+0x2fc>
 80062fe:	2b6e      	cmp	r3, #110	; 0x6e
 8006300:	d0e0      	beq.n	80062c4 <_strtod_l+0x350>
 8006302:	e69d      	b.n	8006040 <_strtod_l+0xcc>
 8006304:	4993      	ldr	r1, [pc, #588]	; (8006554 <_strtod_l+0x5e0>)
 8006306:	a821      	add	r0, sp, #132	; 0x84
 8006308:	f001 fe54 	bl	8007fb4 <__match>
 800630c:	2800      	cmp	r0, #0
 800630e:	d100      	bne.n	8006312 <_strtod_l+0x39e>
 8006310:	e696      	b.n	8006040 <_strtod_l+0xcc>
 8006312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006314:	4990      	ldr	r1, [pc, #576]	; (8006558 <_strtod_l+0x5e4>)
 8006316:	3b01      	subs	r3, #1
 8006318:	a821      	add	r0, sp, #132	; 0x84
 800631a:	9321      	str	r3, [sp, #132]	; 0x84
 800631c:	f001 fe4a 	bl	8007fb4 <__match>
 8006320:	2800      	cmp	r0, #0
 8006322:	d102      	bne.n	800632a <_strtod_l+0x3b6>
 8006324:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006326:	3301      	adds	r3, #1
 8006328:	9321      	str	r3, [sp, #132]	; 0x84
 800632a:	2600      	movs	r6, #0
 800632c:	4f88      	ldr	r7, [pc, #544]	; (8006550 <_strtod_l+0x5dc>)
 800632e:	e668      	b.n	8006002 <_strtod_l+0x8e>
 8006330:	488a      	ldr	r0, [pc, #552]	; (800655c <_strtod_l+0x5e8>)
 8006332:	f002 fe0f 	bl	8008f54 <nan>
 8006336:	0006      	movs	r6, r0
 8006338:	000f      	movs	r7, r1
 800633a:	e662      	b.n	8006002 <_strtod_l+0x8e>
 800633c:	9b07      	ldr	r3, [sp, #28]
 800633e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006340:	1a9b      	subs	r3, r3, r2
 8006342:	930a      	str	r3, [sp, #40]	; 0x28
 8006344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <_strtod_l+0x3da>
 800634a:	9b06      	ldr	r3, [sp, #24]
 800634c:	9309      	str	r3, [sp, #36]	; 0x24
 800634e:	9c06      	ldr	r4, [sp, #24]
 8006350:	2c10      	cmp	r4, #16
 8006352:	dd00      	ble.n	8006356 <_strtod_l+0x3e2>
 8006354:	2410      	movs	r4, #16
 8006356:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006358:	f7fb ff06 	bl	8002168 <__aeabi_ui2d>
 800635c:	9b06      	ldr	r3, [sp, #24]
 800635e:	0006      	movs	r6, r0
 8006360:	000f      	movs	r7, r1
 8006362:	2b09      	cmp	r3, #9
 8006364:	dd15      	ble.n	8006392 <_strtod_l+0x41e>
 8006366:	0022      	movs	r2, r4
 8006368:	4b7d      	ldr	r3, [pc, #500]	; (8006560 <_strtod_l+0x5ec>)
 800636a:	3a09      	subs	r2, #9
 800636c:	00d2      	lsls	r2, r2, #3
 800636e:	189b      	adds	r3, r3, r2
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f7fb f876 	bl	8001464 <__aeabi_dmul>
 8006378:	0006      	movs	r6, r0
 800637a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800637c:	000f      	movs	r7, r1
 800637e:	f7fb fef3 	bl	8002168 <__aeabi_ui2d>
 8006382:	0002      	movs	r2, r0
 8006384:	000b      	movs	r3, r1
 8006386:	0030      	movs	r0, r6
 8006388:	0039      	movs	r1, r7
 800638a:	f7fa f8fb 	bl	8000584 <__aeabi_dadd>
 800638e:	0006      	movs	r6, r0
 8006390:	000f      	movs	r7, r1
 8006392:	9b06      	ldr	r3, [sp, #24]
 8006394:	2b0f      	cmp	r3, #15
 8006396:	dc39      	bgt.n	800640c <_strtod_l+0x498>
 8006398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800639a:	2b00      	cmp	r3, #0
 800639c:	d100      	bne.n	80063a0 <_strtod_l+0x42c>
 800639e:	e630      	b.n	8006002 <_strtod_l+0x8e>
 80063a0:	dd24      	ble.n	80063ec <_strtod_l+0x478>
 80063a2:	2b16      	cmp	r3, #22
 80063a4:	dc09      	bgt.n	80063ba <_strtod_l+0x446>
 80063a6:	00dd      	lsls	r5, r3, #3
 80063a8:	0032      	movs	r2, r6
 80063aa:	003b      	movs	r3, r7
 80063ac:	4c6c      	ldr	r4, [pc, #432]	; (8006560 <_strtod_l+0x5ec>)
 80063ae:	1964      	adds	r4, r4, r5
 80063b0:	6820      	ldr	r0, [r4, #0]
 80063b2:	6861      	ldr	r1, [r4, #4]
 80063b4:	f7fb f856 	bl	8001464 <__aeabi_dmul>
 80063b8:	e7bd      	b.n	8006336 <_strtod_l+0x3c2>
 80063ba:	2325      	movs	r3, #37	; 0x25
 80063bc:	9a06      	ldr	r2, [sp, #24]
 80063be:	1a9b      	subs	r3, r3, r2
 80063c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063c2:	4293      	cmp	r3, r2
 80063c4:	db22      	blt.n	800640c <_strtod_l+0x498>
 80063c6:	240f      	movs	r4, #15
 80063c8:	9b06      	ldr	r3, [sp, #24]
 80063ca:	4d65      	ldr	r5, [pc, #404]	; (8006560 <_strtod_l+0x5ec>)
 80063cc:	1ae4      	subs	r4, r4, r3
 80063ce:	00e1      	lsls	r1, r4, #3
 80063d0:	1869      	adds	r1, r5, r1
 80063d2:	0032      	movs	r2, r6
 80063d4:	6808      	ldr	r0, [r1, #0]
 80063d6:	6849      	ldr	r1, [r1, #4]
 80063d8:	003b      	movs	r3, r7
 80063da:	f7fb f843 	bl	8001464 <__aeabi_dmul>
 80063de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063e0:	1b1c      	subs	r4, r3, r4
 80063e2:	00e4      	lsls	r4, r4, #3
 80063e4:	192c      	adds	r4, r5, r4
 80063e6:	6822      	ldr	r2, [r4, #0]
 80063e8:	6863      	ldr	r3, [r4, #4]
 80063ea:	e7e3      	b.n	80063b4 <_strtod_l+0x440>
 80063ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ee:	3316      	adds	r3, #22
 80063f0:	db0c      	blt.n	800640c <_strtod_l+0x498>
 80063f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063f4:	9a07      	ldr	r2, [sp, #28]
 80063f6:	0030      	movs	r0, r6
 80063f8:	1a9a      	subs	r2, r3, r2
 80063fa:	4b59      	ldr	r3, [pc, #356]	; (8006560 <_strtod_l+0x5ec>)
 80063fc:	00d2      	lsls	r2, r2, #3
 80063fe:	189b      	adds	r3, r3, r2
 8006400:	0039      	movs	r1, r7
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f7fa fc27 	bl	8000c58 <__aeabi_ddiv>
 800640a:	e794      	b.n	8006336 <_strtod_l+0x3c2>
 800640c:	9b06      	ldr	r3, [sp, #24]
 800640e:	1b1c      	subs	r4, r3, r4
 8006410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006412:	18e4      	adds	r4, r4, r3
 8006414:	2c00      	cmp	r4, #0
 8006416:	dd70      	ble.n	80064fa <_strtod_l+0x586>
 8006418:	230f      	movs	r3, #15
 800641a:	0021      	movs	r1, r4
 800641c:	4019      	ands	r1, r3
 800641e:	421c      	tst	r4, r3
 8006420:	d00a      	beq.n	8006438 <_strtod_l+0x4c4>
 8006422:	00cb      	lsls	r3, r1, #3
 8006424:	494e      	ldr	r1, [pc, #312]	; (8006560 <_strtod_l+0x5ec>)
 8006426:	0032      	movs	r2, r6
 8006428:	18c9      	adds	r1, r1, r3
 800642a:	6808      	ldr	r0, [r1, #0]
 800642c:	6849      	ldr	r1, [r1, #4]
 800642e:	003b      	movs	r3, r7
 8006430:	f7fb f818 	bl	8001464 <__aeabi_dmul>
 8006434:	0006      	movs	r6, r0
 8006436:	000f      	movs	r7, r1
 8006438:	230f      	movs	r3, #15
 800643a:	439c      	bics	r4, r3
 800643c:	d048      	beq.n	80064d0 <_strtod_l+0x55c>
 800643e:	3326      	adds	r3, #38	; 0x26
 8006440:	33ff      	adds	r3, #255	; 0xff
 8006442:	429c      	cmp	r4, r3
 8006444:	dd22      	ble.n	800648c <_strtod_l+0x518>
 8006446:	2300      	movs	r3, #0
 8006448:	9306      	str	r3, [sp, #24]
 800644a:	9307      	str	r3, [sp, #28]
 800644c:	930b      	str	r3, [sp, #44]	; 0x2c
 800644e:	9309      	str	r3, [sp, #36]	; 0x24
 8006450:	2322      	movs	r3, #34	; 0x22
 8006452:	2600      	movs	r6, #0
 8006454:	9a05      	ldr	r2, [sp, #20]
 8006456:	4f3e      	ldr	r7, [pc, #248]	; (8006550 <_strtod_l+0x5dc>)
 8006458:	6013      	str	r3, [r2, #0]
 800645a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800645c:	42b3      	cmp	r3, r6
 800645e:	d100      	bne.n	8006462 <_strtod_l+0x4ee>
 8006460:	e5cf      	b.n	8006002 <_strtod_l+0x8e>
 8006462:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006464:	9805      	ldr	r0, [sp, #20]
 8006466:	f001 fed7 	bl	8008218 <_Bfree>
 800646a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800646c:	9805      	ldr	r0, [sp, #20]
 800646e:	f001 fed3 	bl	8008218 <_Bfree>
 8006472:	9907      	ldr	r1, [sp, #28]
 8006474:	9805      	ldr	r0, [sp, #20]
 8006476:	f001 fecf 	bl	8008218 <_Bfree>
 800647a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800647c:	9805      	ldr	r0, [sp, #20]
 800647e:	f001 fecb 	bl	8008218 <_Bfree>
 8006482:	9906      	ldr	r1, [sp, #24]
 8006484:	9805      	ldr	r0, [sp, #20]
 8006486:	f001 fec7 	bl	8008218 <_Bfree>
 800648a:	e5ba      	b.n	8006002 <_strtod_l+0x8e>
 800648c:	2300      	movs	r3, #0
 800648e:	0030      	movs	r0, r6
 8006490:	0039      	movs	r1, r7
 8006492:	001d      	movs	r5, r3
 8006494:	1124      	asrs	r4, r4, #4
 8006496:	2c01      	cmp	r4, #1
 8006498:	dc1d      	bgt.n	80064d6 <_strtod_l+0x562>
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <_strtod_l+0x52e>
 800649e:	0006      	movs	r6, r0
 80064a0:	000f      	movs	r7, r1
 80064a2:	4b30      	ldr	r3, [pc, #192]	; (8006564 <_strtod_l+0x5f0>)
 80064a4:	00ed      	lsls	r5, r5, #3
 80064a6:	18ff      	adds	r7, r7, r3
 80064a8:	4b2f      	ldr	r3, [pc, #188]	; (8006568 <_strtod_l+0x5f4>)
 80064aa:	0032      	movs	r2, r6
 80064ac:	195d      	adds	r5, r3, r5
 80064ae:	6828      	ldr	r0, [r5, #0]
 80064b0:	6869      	ldr	r1, [r5, #4]
 80064b2:	003b      	movs	r3, r7
 80064b4:	f7fa ffd6 	bl	8001464 <__aeabi_dmul>
 80064b8:	4b25      	ldr	r3, [pc, #148]	; (8006550 <_strtod_l+0x5dc>)
 80064ba:	4a2c      	ldr	r2, [pc, #176]	; (800656c <_strtod_l+0x5f8>)
 80064bc:	0006      	movs	r6, r0
 80064be:	400b      	ands	r3, r1
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d8c0      	bhi.n	8006446 <_strtod_l+0x4d2>
 80064c4:	4a2a      	ldr	r2, [pc, #168]	; (8006570 <_strtod_l+0x5fc>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d913      	bls.n	80064f2 <_strtod_l+0x57e>
 80064ca:	2601      	movs	r6, #1
 80064cc:	4f29      	ldr	r7, [pc, #164]	; (8006574 <_strtod_l+0x600>)
 80064ce:	4276      	negs	r6, r6
 80064d0:	2300      	movs	r3, #0
 80064d2:	9308      	str	r3, [sp, #32]
 80064d4:	e087      	b.n	80065e6 <_strtod_l+0x672>
 80064d6:	2201      	movs	r2, #1
 80064d8:	4214      	tst	r4, r2
 80064da:	d007      	beq.n	80064ec <_strtod_l+0x578>
 80064dc:	4a22      	ldr	r2, [pc, #136]	; (8006568 <_strtod_l+0x5f4>)
 80064de:	00eb      	lsls	r3, r5, #3
 80064e0:	189b      	adds	r3, r3, r2
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f7fa ffbd 	bl	8001464 <__aeabi_dmul>
 80064ea:	2301      	movs	r3, #1
 80064ec:	3501      	adds	r5, #1
 80064ee:	1064      	asrs	r4, r4, #1
 80064f0:	e7d1      	b.n	8006496 <_strtod_l+0x522>
 80064f2:	23d4      	movs	r3, #212	; 0xd4
 80064f4:	049b      	lsls	r3, r3, #18
 80064f6:	18cf      	adds	r7, r1, r3
 80064f8:	e7ea      	b.n	80064d0 <_strtod_l+0x55c>
 80064fa:	2c00      	cmp	r4, #0
 80064fc:	d0e8      	beq.n	80064d0 <_strtod_l+0x55c>
 80064fe:	4264      	negs	r4, r4
 8006500:	220f      	movs	r2, #15
 8006502:	0023      	movs	r3, r4
 8006504:	4013      	ands	r3, r2
 8006506:	4214      	tst	r4, r2
 8006508:	d00a      	beq.n	8006520 <_strtod_l+0x5ac>
 800650a:	00da      	lsls	r2, r3, #3
 800650c:	4b14      	ldr	r3, [pc, #80]	; (8006560 <_strtod_l+0x5ec>)
 800650e:	0030      	movs	r0, r6
 8006510:	189b      	adds	r3, r3, r2
 8006512:	0039      	movs	r1, r7
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f7fa fb9e 	bl	8000c58 <__aeabi_ddiv>
 800651c:	0006      	movs	r6, r0
 800651e:	000f      	movs	r7, r1
 8006520:	1124      	asrs	r4, r4, #4
 8006522:	d0d5      	beq.n	80064d0 <_strtod_l+0x55c>
 8006524:	2c1f      	cmp	r4, #31
 8006526:	dd27      	ble.n	8006578 <_strtod_l+0x604>
 8006528:	2300      	movs	r3, #0
 800652a:	9306      	str	r3, [sp, #24]
 800652c:	9307      	str	r3, [sp, #28]
 800652e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006530:	9309      	str	r3, [sp, #36]	; 0x24
 8006532:	2322      	movs	r3, #34	; 0x22
 8006534:	9a05      	ldr	r2, [sp, #20]
 8006536:	2600      	movs	r6, #0
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800653c:	2700      	movs	r7, #0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d18f      	bne.n	8006462 <_strtod_l+0x4ee>
 8006542:	e55e      	b.n	8006002 <_strtod_l+0x8e>
 8006544:	00004e1f 	.word	0x00004e1f
 8006548:	08009ca1 	.word	0x08009ca1
 800654c:	08009ce4 	.word	0x08009ce4
 8006550:	7ff00000 	.word	0x7ff00000
 8006554:	08009c99 	.word	0x08009c99
 8006558:	08009e24 	.word	0x08009e24
 800655c:	0800a0e0 	.word	0x0800a0e0
 8006560:	08009fc0 	.word	0x08009fc0
 8006564:	fcb00000 	.word	0xfcb00000
 8006568:	08009f98 	.word	0x08009f98
 800656c:	7ca00000 	.word	0x7ca00000
 8006570:	7c900000 	.word	0x7c900000
 8006574:	7fefffff 	.word	0x7fefffff
 8006578:	2310      	movs	r3, #16
 800657a:	0022      	movs	r2, r4
 800657c:	401a      	ands	r2, r3
 800657e:	9208      	str	r2, [sp, #32]
 8006580:	421c      	tst	r4, r3
 8006582:	d001      	beq.n	8006588 <_strtod_l+0x614>
 8006584:	335a      	adds	r3, #90	; 0x5a
 8006586:	9308      	str	r3, [sp, #32]
 8006588:	0030      	movs	r0, r6
 800658a:	0039      	movs	r1, r7
 800658c:	2300      	movs	r3, #0
 800658e:	4dca      	ldr	r5, [pc, #808]	; (80068b8 <_strtod_l+0x944>)
 8006590:	2201      	movs	r2, #1
 8006592:	4214      	tst	r4, r2
 8006594:	d004      	beq.n	80065a0 <_strtod_l+0x62c>
 8006596:	682a      	ldr	r2, [r5, #0]
 8006598:	686b      	ldr	r3, [r5, #4]
 800659a:	f7fa ff63 	bl	8001464 <__aeabi_dmul>
 800659e:	2301      	movs	r3, #1
 80065a0:	1064      	asrs	r4, r4, #1
 80065a2:	3508      	adds	r5, #8
 80065a4:	2c00      	cmp	r4, #0
 80065a6:	d1f3      	bne.n	8006590 <_strtod_l+0x61c>
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <_strtod_l+0x63c>
 80065ac:	0006      	movs	r6, r0
 80065ae:	000f      	movs	r7, r1
 80065b0:	9b08      	ldr	r3, [sp, #32]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00f      	beq.n	80065d6 <_strtod_l+0x662>
 80065b6:	236b      	movs	r3, #107	; 0x6b
 80065b8:	0079      	lsls	r1, r7, #1
 80065ba:	0d49      	lsrs	r1, r1, #21
 80065bc:	003a      	movs	r2, r7
 80065be:	1a5b      	subs	r3, r3, r1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	dd08      	ble.n	80065d6 <_strtod_l+0x662>
 80065c4:	2b1f      	cmp	r3, #31
 80065c6:	dc00      	bgt.n	80065ca <_strtod_l+0x656>
 80065c8:	e126      	b.n	8006818 <_strtod_l+0x8a4>
 80065ca:	2600      	movs	r6, #0
 80065cc:	2b34      	cmp	r3, #52	; 0x34
 80065ce:	dc00      	bgt.n	80065d2 <_strtod_l+0x65e>
 80065d0:	e11b      	b.n	800680a <_strtod_l+0x896>
 80065d2:	27dc      	movs	r7, #220	; 0xdc
 80065d4:	04bf      	lsls	r7, r7, #18
 80065d6:	2200      	movs	r2, #0
 80065d8:	2300      	movs	r3, #0
 80065da:	0030      	movs	r0, r6
 80065dc:	0039      	movs	r1, r7
 80065de:	f7f9 ff33 	bl	8000448 <__aeabi_dcmpeq>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	d1a0      	bne.n	8006528 <_strtod_l+0x5b4>
 80065e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 80065ee:	9b06      	ldr	r3, [sp, #24]
 80065f0:	9805      	ldr	r0, [sp, #20]
 80065f2:	f001 fe79 	bl	80082e8 <__s2b>
 80065f6:	900b      	str	r0, [sp, #44]	; 0x2c
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d100      	bne.n	80065fe <_strtod_l+0x68a>
 80065fc:	e723      	b.n	8006446 <_strtod_l+0x4d2>
 80065fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006600:	9907      	ldr	r1, [sp, #28]
 8006602:	17da      	asrs	r2, r3, #31
 8006604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006606:	1a5b      	subs	r3, r3, r1
 8006608:	401a      	ands	r2, r3
 800660a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800660c:	9215      	str	r2, [sp, #84]	; 0x54
 800660e:	43db      	mvns	r3, r3
 8006610:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006612:	17db      	asrs	r3, r3, #31
 8006614:	401a      	ands	r2, r3
 8006616:	2300      	movs	r3, #0
 8006618:	921c      	str	r2, [sp, #112]	; 0x70
 800661a:	9306      	str	r3, [sp, #24]
 800661c:	9307      	str	r3, [sp, #28]
 800661e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006620:	9805      	ldr	r0, [sp, #20]
 8006622:	6859      	ldr	r1, [r3, #4]
 8006624:	f001 fdb4 	bl	8008190 <_Balloc>
 8006628:	9009      	str	r0, [sp, #36]	; 0x24
 800662a:	2800      	cmp	r0, #0
 800662c:	d100      	bne.n	8006630 <_strtod_l+0x6bc>
 800662e:	e70f      	b.n	8006450 <_strtod_l+0x4dc>
 8006630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006632:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	310c      	adds	r1, #12
 8006638:	1c9a      	adds	r2, r3, #2
 800663a:	0092      	lsls	r2, r2, #2
 800663c:	300c      	adds	r0, #12
 800663e:	930c      	str	r3, [sp, #48]	; 0x30
 8006640:	f001 fd9d 	bl	800817e <memcpy>
 8006644:	ab24      	add	r3, sp, #144	; 0x90
 8006646:	9301      	str	r3, [sp, #4]
 8006648:	ab23      	add	r3, sp, #140	; 0x8c
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	0032      	movs	r2, r6
 800664e:	003b      	movs	r3, r7
 8006650:	9805      	ldr	r0, [sp, #20]
 8006652:	960e      	str	r6, [sp, #56]	; 0x38
 8006654:	970f      	str	r7, [sp, #60]	; 0x3c
 8006656:	f002 f995 	bl	8008984 <__d2b>
 800665a:	9022      	str	r0, [sp, #136]	; 0x88
 800665c:	2800      	cmp	r0, #0
 800665e:	d100      	bne.n	8006662 <_strtod_l+0x6ee>
 8006660:	e6f6      	b.n	8006450 <_strtod_l+0x4dc>
 8006662:	2101      	movs	r1, #1
 8006664:	9805      	ldr	r0, [sp, #20]
 8006666:	f001 fed3 	bl	8008410 <__i2b>
 800666a:	9007      	str	r0, [sp, #28]
 800666c:	2800      	cmp	r0, #0
 800666e:	d100      	bne.n	8006672 <_strtod_l+0x6fe>
 8006670:	e6ee      	b.n	8006450 <_strtod_l+0x4dc>
 8006672:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006674:	2b00      	cmp	r3, #0
 8006676:	da00      	bge.n	800667a <_strtod_l+0x706>
 8006678:	e0d3      	b.n	8006822 <_strtod_l+0x8ae>
 800667a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800667c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800667e:	189d      	adds	r5, r3, r2
 8006680:	9908      	ldr	r1, [sp, #32]
 8006682:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006684:	1a5b      	subs	r3, r3, r1
 8006686:	2136      	movs	r1, #54	; 0x36
 8006688:	189b      	adds	r3, r3, r2
 800668a:	1a8a      	subs	r2, r1, r2
 800668c:	498b      	ldr	r1, [pc, #556]	; (80068bc <_strtod_l+0x948>)
 800668e:	3b01      	subs	r3, #1
 8006690:	2001      	movs	r0, #1
 8006692:	428b      	cmp	r3, r1
 8006694:	db00      	blt.n	8006698 <_strtod_l+0x724>
 8006696:	e0cf      	b.n	8006838 <_strtod_l+0x8c4>
 8006698:	1ac9      	subs	r1, r1, r3
 800669a:	1a52      	subs	r2, r2, r1
 800669c:	291f      	cmp	r1, #31
 800669e:	dd00      	ble.n	80066a2 <_strtod_l+0x72e>
 80066a0:	e0c3      	b.n	800682a <_strtod_l+0x8b6>
 80066a2:	4088      	lsls	r0, r1
 80066a4:	2300      	movs	r3, #0
 80066a6:	9014      	str	r0, [sp, #80]	; 0x50
 80066a8:	9312      	str	r3, [sp, #72]	; 0x48
 80066aa:	18ab      	adds	r3, r5, r2
 80066ac:	930c      	str	r3, [sp, #48]	; 0x30
 80066ae:	18a4      	adds	r4, r4, r2
 80066b0:	9b08      	ldr	r3, [sp, #32]
 80066b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066b4:	191c      	adds	r4, r3, r4
 80066b6:	002b      	movs	r3, r5
 80066b8:	4295      	cmp	r5, r2
 80066ba:	dd00      	ble.n	80066be <_strtod_l+0x74a>
 80066bc:	0013      	movs	r3, r2
 80066be:	42a3      	cmp	r3, r4
 80066c0:	dd00      	ble.n	80066c4 <_strtod_l+0x750>
 80066c2:	0023      	movs	r3, r4
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	dd04      	ble.n	80066d2 <_strtod_l+0x75e>
 80066c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066ca:	1ae4      	subs	r4, r4, r3
 80066cc:	1ad2      	subs	r2, r2, r3
 80066ce:	920c      	str	r2, [sp, #48]	; 0x30
 80066d0:	1aed      	subs	r5, r5, r3
 80066d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	dd17      	ble.n	8006708 <_strtod_l+0x794>
 80066d8:	001a      	movs	r2, r3
 80066da:	9907      	ldr	r1, [sp, #28]
 80066dc:	9805      	ldr	r0, [sp, #20]
 80066de:	f001 ff5d 	bl	800859c <__pow5mult>
 80066e2:	9007      	str	r0, [sp, #28]
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d100      	bne.n	80066ea <_strtod_l+0x776>
 80066e8:	e6b2      	b.n	8006450 <_strtod_l+0x4dc>
 80066ea:	0001      	movs	r1, r0
 80066ec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80066ee:	9805      	ldr	r0, [sp, #20]
 80066f0:	f001 fea4 	bl	800843c <__multiply>
 80066f4:	9011      	str	r0, [sp, #68]	; 0x44
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d100      	bne.n	80066fc <_strtod_l+0x788>
 80066fa:	e6a9      	b.n	8006450 <_strtod_l+0x4dc>
 80066fc:	9922      	ldr	r1, [sp, #136]	; 0x88
 80066fe:	9805      	ldr	r0, [sp, #20]
 8006700:	f001 fd8a 	bl	8008218 <_Bfree>
 8006704:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006706:	9322      	str	r3, [sp, #136]	; 0x88
 8006708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800670a:	2b00      	cmp	r3, #0
 800670c:	dd00      	ble.n	8006710 <_strtod_l+0x79c>
 800670e:	e096      	b.n	800683e <_strtod_l+0x8ca>
 8006710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006712:	2b00      	cmp	r3, #0
 8006714:	dd08      	ble.n	8006728 <_strtod_l+0x7b4>
 8006716:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006718:	9909      	ldr	r1, [sp, #36]	; 0x24
 800671a:	9805      	ldr	r0, [sp, #20]
 800671c:	f001 ff3e 	bl	800859c <__pow5mult>
 8006720:	9009      	str	r0, [sp, #36]	; 0x24
 8006722:	2800      	cmp	r0, #0
 8006724:	d100      	bne.n	8006728 <_strtod_l+0x7b4>
 8006726:	e693      	b.n	8006450 <_strtod_l+0x4dc>
 8006728:	2c00      	cmp	r4, #0
 800672a:	dd08      	ble.n	800673e <_strtod_l+0x7ca>
 800672c:	0022      	movs	r2, r4
 800672e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006730:	9805      	ldr	r0, [sp, #20]
 8006732:	f001 ff8f 	bl	8008654 <__lshift>
 8006736:	9009      	str	r0, [sp, #36]	; 0x24
 8006738:	2800      	cmp	r0, #0
 800673a:	d100      	bne.n	800673e <_strtod_l+0x7ca>
 800673c:	e688      	b.n	8006450 <_strtod_l+0x4dc>
 800673e:	2d00      	cmp	r5, #0
 8006740:	dd08      	ble.n	8006754 <_strtod_l+0x7e0>
 8006742:	002a      	movs	r2, r5
 8006744:	9907      	ldr	r1, [sp, #28]
 8006746:	9805      	ldr	r0, [sp, #20]
 8006748:	f001 ff84 	bl	8008654 <__lshift>
 800674c:	9007      	str	r0, [sp, #28]
 800674e:	2800      	cmp	r0, #0
 8006750:	d100      	bne.n	8006754 <_strtod_l+0x7e0>
 8006752:	e67d      	b.n	8006450 <_strtod_l+0x4dc>
 8006754:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006756:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006758:	9805      	ldr	r0, [sp, #20]
 800675a:	f002 f807 	bl	800876c <__mdiff>
 800675e:	9006      	str	r0, [sp, #24]
 8006760:	2800      	cmp	r0, #0
 8006762:	d100      	bne.n	8006766 <_strtod_l+0x7f2>
 8006764:	e674      	b.n	8006450 <_strtod_l+0x4dc>
 8006766:	2200      	movs	r2, #0
 8006768:	68c3      	ldr	r3, [r0, #12]
 800676a:	9907      	ldr	r1, [sp, #28]
 800676c:	60c2      	str	r2, [r0, #12]
 800676e:	9311      	str	r3, [sp, #68]	; 0x44
 8006770:	f001 ffe0 	bl	8008734 <__mcmp>
 8006774:	2800      	cmp	r0, #0
 8006776:	da6c      	bge.n	8006852 <_strtod_l+0x8de>
 8006778:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800677a:	4333      	orrs	r3, r6
 800677c:	d000      	beq.n	8006780 <_strtod_l+0x80c>
 800677e:	e097      	b.n	80068b0 <_strtod_l+0x93c>
 8006780:	033b      	lsls	r3, r7, #12
 8006782:	d000      	beq.n	8006786 <_strtod_l+0x812>
 8006784:	e094      	b.n	80068b0 <_strtod_l+0x93c>
 8006786:	22d6      	movs	r2, #214	; 0xd6
 8006788:	4b4d      	ldr	r3, [pc, #308]	; (80068c0 <_strtod_l+0x94c>)
 800678a:	04d2      	lsls	r2, r2, #19
 800678c:	403b      	ands	r3, r7
 800678e:	4293      	cmp	r3, r2
 8006790:	d800      	bhi.n	8006794 <_strtod_l+0x820>
 8006792:	e08d      	b.n	80068b0 <_strtod_l+0x93c>
 8006794:	9b06      	ldr	r3, [sp, #24]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	930a      	str	r3, [sp, #40]	; 0x28
 800679a:	2b00      	cmp	r3, #0
 800679c:	d105      	bne.n	80067aa <_strtod_l+0x836>
 800679e:	9b06      	ldr	r3, [sp, #24]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	930a      	str	r3, [sp, #40]	; 0x28
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	dc00      	bgt.n	80067aa <_strtod_l+0x836>
 80067a8:	e082      	b.n	80068b0 <_strtod_l+0x93c>
 80067aa:	9906      	ldr	r1, [sp, #24]
 80067ac:	2201      	movs	r2, #1
 80067ae:	9805      	ldr	r0, [sp, #20]
 80067b0:	f001 ff50 	bl	8008654 <__lshift>
 80067b4:	9907      	ldr	r1, [sp, #28]
 80067b6:	9006      	str	r0, [sp, #24]
 80067b8:	f001 ffbc 	bl	8008734 <__mcmp>
 80067bc:	2800      	cmp	r0, #0
 80067be:	dd77      	ble.n	80068b0 <_strtod_l+0x93c>
 80067c0:	9908      	ldr	r1, [sp, #32]
 80067c2:	003b      	movs	r3, r7
 80067c4:	4a3e      	ldr	r2, [pc, #248]	; (80068c0 <_strtod_l+0x94c>)
 80067c6:	2900      	cmp	r1, #0
 80067c8:	d100      	bne.n	80067cc <_strtod_l+0x858>
 80067ca:	e09e      	b.n	800690a <_strtod_l+0x996>
 80067cc:	0011      	movs	r1, r2
 80067ce:	20d6      	movs	r0, #214	; 0xd6
 80067d0:	4039      	ands	r1, r7
 80067d2:	04c0      	lsls	r0, r0, #19
 80067d4:	4281      	cmp	r1, r0
 80067d6:	dd00      	ble.n	80067da <_strtod_l+0x866>
 80067d8:	e097      	b.n	800690a <_strtod_l+0x996>
 80067da:	23dc      	movs	r3, #220	; 0xdc
 80067dc:	049b      	lsls	r3, r3, #18
 80067de:	4299      	cmp	r1, r3
 80067e0:	dc00      	bgt.n	80067e4 <_strtod_l+0x870>
 80067e2:	e6a6      	b.n	8006532 <_strtod_l+0x5be>
 80067e4:	4b37      	ldr	r3, [pc, #220]	; (80068c4 <_strtod_l+0x950>)
 80067e6:	0030      	movs	r0, r6
 80067e8:	931b      	str	r3, [sp, #108]	; 0x6c
 80067ea:	2300      	movs	r3, #0
 80067ec:	931a      	str	r3, [sp, #104]	; 0x68
 80067ee:	0039      	movs	r1, r7
 80067f0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80067f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067f4:	f7fa fe36 	bl	8001464 <__aeabi_dmul>
 80067f8:	0006      	movs	r6, r0
 80067fa:	000f      	movs	r7, r1
 80067fc:	4308      	orrs	r0, r1
 80067fe:	d000      	beq.n	8006802 <_strtod_l+0x88e>
 8006800:	e62f      	b.n	8006462 <_strtod_l+0x4ee>
 8006802:	2322      	movs	r3, #34	; 0x22
 8006804:	9a05      	ldr	r2, [sp, #20]
 8006806:	6013      	str	r3, [r2, #0]
 8006808:	e62b      	b.n	8006462 <_strtod_l+0x4ee>
 800680a:	2101      	movs	r1, #1
 800680c:	3b20      	subs	r3, #32
 800680e:	4249      	negs	r1, r1
 8006810:	4099      	lsls	r1, r3
 8006812:	400a      	ands	r2, r1
 8006814:	0017      	movs	r7, r2
 8006816:	e6de      	b.n	80065d6 <_strtod_l+0x662>
 8006818:	2201      	movs	r2, #1
 800681a:	4252      	negs	r2, r2
 800681c:	409a      	lsls	r2, r3
 800681e:	4016      	ands	r6, r2
 8006820:	e6d9      	b.n	80065d6 <_strtod_l+0x662>
 8006822:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006824:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006826:	1ad4      	subs	r4, r2, r3
 8006828:	e72a      	b.n	8006680 <_strtod_l+0x70c>
 800682a:	4927      	ldr	r1, [pc, #156]	; (80068c8 <_strtod_l+0x954>)
 800682c:	1acb      	subs	r3, r1, r3
 800682e:	0001      	movs	r1, r0
 8006830:	4099      	lsls	r1, r3
 8006832:	9112      	str	r1, [sp, #72]	; 0x48
 8006834:	9014      	str	r0, [sp, #80]	; 0x50
 8006836:	e738      	b.n	80066aa <_strtod_l+0x736>
 8006838:	2300      	movs	r3, #0
 800683a:	9312      	str	r3, [sp, #72]	; 0x48
 800683c:	e7fa      	b.n	8006834 <_strtod_l+0x8c0>
 800683e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006840:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006842:	9805      	ldr	r0, [sp, #20]
 8006844:	f001 ff06 	bl	8008654 <__lshift>
 8006848:	9022      	str	r0, [sp, #136]	; 0x88
 800684a:	2800      	cmp	r0, #0
 800684c:	d000      	beq.n	8006850 <_strtod_l+0x8dc>
 800684e:	e75f      	b.n	8006710 <_strtod_l+0x79c>
 8006850:	e5fe      	b.n	8006450 <_strtod_l+0x4dc>
 8006852:	970c      	str	r7, [sp, #48]	; 0x30
 8006854:	2800      	cmp	r0, #0
 8006856:	d176      	bne.n	8006946 <_strtod_l+0x9d2>
 8006858:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800685a:	033b      	lsls	r3, r7, #12
 800685c:	0b1b      	lsrs	r3, r3, #12
 800685e:	2a00      	cmp	r2, #0
 8006860:	d038      	beq.n	80068d4 <_strtod_l+0x960>
 8006862:	4a1a      	ldr	r2, [pc, #104]	; (80068cc <_strtod_l+0x958>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d138      	bne.n	80068da <_strtod_l+0x966>
 8006868:	2201      	movs	r2, #1
 800686a:	9b08      	ldr	r3, [sp, #32]
 800686c:	4252      	negs	r2, r2
 800686e:	0031      	movs	r1, r6
 8006870:	0010      	movs	r0, r2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00b      	beq.n	800688e <_strtod_l+0x91a>
 8006876:	24d4      	movs	r4, #212	; 0xd4
 8006878:	4b11      	ldr	r3, [pc, #68]	; (80068c0 <_strtod_l+0x94c>)
 800687a:	0010      	movs	r0, r2
 800687c:	403b      	ands	r3, r7
 800687e:	04e4      	lsls	r4, r4, #19
 8006880:	42a3      	cmp	r3, r4
 8006882:	d804      	bhi.n	800688e <_strtod_l+0x91a>
 8006884:	306c      	adds	r0, #108	; 0x6c
 8006886:	0d1b      	lsrs	r3, r3, #20
 8006888:	1ac3      	subs	r3, r0, r3
 800688a:	409a      	lsls	r2, r3
 800688c:	0010      	movs	r0, r2
 800688e:	4281      	cmp	r1, r0
 8006890:	d123      	bne.n	80068da <_strtod_l+0x966>
 8006892:	4b0f      	ldr	r3, [pc, #60]	; (80068d0 <_strtod_l+0x95c>)
 8006894:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006896:	429a      	cmp	r2, r3
 8006898:	d102      	bne.n	80068a0 <_strtod_l+0x92c>
 800689a:	1c4b      	adds	r3, r1, #1
 800689c:	d100      	bne.n	80068a0 <_strtod_l+0x92c>
 800689e:	e5d7      	b.n	8006450 <_strtod_l+0x4dc>
 80068a0:	4b07      	ldr	r3, [pc, #28]	; (80068c0 <_strtod_l+0x94c>)
 80068a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068a4:	2600      	movs	r6, #0
 80068a6:	401a      	ands	r2, r3
 80068a8:	0013      	movs	r3, r2
 80068aa:	2280      	movs	r2, #128	; 0x80
 80068ac:	0352      	lsls	r2, r2, #13
 80068ae:	189f      	adds	r7, r3, r2
 80068b0:	9b08      	ldr	r3, [sp, #32]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d196      	bne.n	80067e4 <_strtod_l+0x870>
 80068b6:	e5d4      	b.n	8006462 <_strtod_l+0x4ee>
 80068b8:	08009cf8 	.word	0x08009cf8
 80068bc:	fffffc02 	.word	0xfffffc02
 80068c0:	7ff00000 	.word	0x7ff00000
 80068c4:	39500000 	.word	0x39500000
 80068c8:	fffffbe2 	.word	0xfffffbe2
 80068cc:	000fffff 	.word	0x000fffff
 80068d0:	7fefffff 	.word	0x7fefffff
 80068d4:	4333      	orrs	r3, r6
 80068d6:	d100      	bne.n	80068da <_strtod_l+0x966>
 80068d8:	e772      	b.n	80067c0 <_strtod_l+0x84c>
 80068da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d01d      	beq.n	800691c <_strtod_l+0x9a8>
 80068e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068e4:	4213      	tst	r3, r2
 80068e6:	d0e3      	beq.n	80068b0 <_strtod_l+0x93c>
 80068e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068ea:	0030      	movs	r0, r6
 80068ec:	0039      	movs	r1, r7
 80068ee:	9a08      	ldr	r2, [sp, #32]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d017      	beq.n	8006924 <_strtod_l+0x9b0>
 80068f4:	f7ff fb26 	bl	8005f44 <sulp>
 80068f8:	0002      	movs	r2, r0
 80068fa:	000b      	movs	r3, r1
 80068fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80068fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006900:	f7f9 fe40 	bl	8000584 <__aeabi_dadd>
 8006904:	0006      	movs	r6, r0
 8006906:	000f      	movs	r7, r1
 8006908:	e7d2      	b.n	80068b0 <_strtod_l+0x93c>
 800690a:	2601      	movs	r6, #1
 800690c:	4013      	ands	r3, r2
 800690e:	4a9b      	ldr	r2, [pc, #620]	; (8006b7c <_strtod_l+0xc08>)
 8006910:	4276      	negs	r6, r6
 8006912:	189b      	adds	r3, r3, r2
 8006914:	4a9a      	ldr	r2, [pc, #616]	; (8006b80 <_strtod_l+0xc0c>)
 8006916:	431a      	orrs	r2, r3
 8006918:	0017      	movs	r7, r2
 800691a:	e7c9      	b.n	80068b0 <_strtod_l+0x93c>
 800691c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800691e:	4233      	tst	r3, r6
 8006920:	d0c6      	beq.n	80068b0 <_strtod_l+0x93c>
 8006922:	e7e1      	b.n	80068e8 <_strtod_l+0x974>
 8006924:	f7ff fb0e 	bl	8005f44 <sulp>
 8006928:	0002      	movs	r2, r0
 800692a:	000b      	movs	r3, r1
 800692c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800692e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006930:	f7fb f804 	bl	800193c <__aeabi_dsub>
 8006934:	2200      	movs	r2, #0
 8006936:	2300      	movs	r3, #0
 8006938:	0006      	movs	r6, r0
 800693a:	000f      	movs	r7, r1
 800693c:	f7f9 fd84 	bl	8000448 <__aeabi_dcmpeq>
 8006940:	2800      	cmp	r0, #0
 8006942:	d0b5      	beq.n	80068b0 <_strtod_l+0x93c>
 8006944:	e5f5      	b.n	8006532 <_strtod_l+0x5be>
 8006946:	9907      	ldr	r1, [sp, #28]
 8006948:	9806      	ldr	r0, [sp, #24]
 800694a:	f002 f87f 	bl	8008a4c <__ratio>
 800694e:	2380      	movs	r3, #128	; 0x80
 8006950:	2200      	movs	r2, #0
 8006952:	05db      	lsls	r3, r3, #23
 8006954:	0004      	movs	r4, r0
 8006956:	000d      	movs	r5, r1
 8006958:	f7f9 fd86 	bl	8000468 <__aeabi_dcmple>
 800695c:	2800      	cmp	r0, #0
 800695e:	d079      	beq.n	8006a54 <_strtod_l+0xae0>
 8006960:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006962:	2b00      	cmp	r3, #0
 8006964:	d04b      	beq.n	80069fe <_strtod_l+0xa8a>
 8006966:	2300      	movs	r3, #0
 8006968:	4c86      	ldr	r4, [pc, #536]	; (8006b84 <_strtod_l+0xc10>)
 800696a:	2500      	movs	r5, #0
 800696c:	9312      	str	r3, [sp, #72]	; 0x48
 800696e:	9413      	str	r4, [sp, #76]	; 0x4c
 8006970:	4c84      	ldr	r4, [pc, #528]	; (8006b84 <_strtod_l+0xc10>)
 8006972:	4a85      	ldr	r2, [pc, #532]	; (8006b88 <_strtod_l+0xc14>)
 8006974:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006976:	4013      	ands	r3, r2
 8006978:	9314      	str	r3, [sp, #80]	; 0x50
 800697a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800697c:	4b83      	ldr	r3, [pc, #524]	; (8006b8c <_strtod_l+0xc18>)
 800697e:	429a      	cmp	r2, r3
 8006980:	d000      	beq.n	8006984 <_strtod_l+0xa10>
 8006982:	e0b0      	b.n	8006ae6 <_strtod_l+0xb72>
 8006984:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006986:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006988:	921a      	str	r2, [sp, #104]	; 0x68
 800698a:	931b      	str	r3, [sp, #108]	; 0x6c
 800698c:	4a80      	ldr	r2, [pc, #512]	; (8006b90 <_strtod_l+0xc1c>)
 800698e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006990:	4694      	mov	ip, r2
 8006992:	4463      	add	r3, ip
 8006994:	001f      	movs	r7, r3
 8006996:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006998:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800699a:	0030      	movs	r0, r6
 800699c:	0039      	movs	r1, r7
 800699e:	920c      	str	r2, [sp, #48]	; 0x30
 80069a0:	930d      	str	r3, [sp, #52]	; 0x34
 80069a2:	f001 ff7b 	bl	800889c <__ulp>
 80069a6:	0002      	movs	r2, r0
 80069a8:	000b      	movs	r3, r1
 80069aa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80069ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80069ae:	f7fa fd59 	bl	8001464 <__aeabi_dmul>
 80069b2:	0032      	movs	r2, r6
 80069b4:	003b      	movs	r3, r7
 80069b6:	f7f9 fde5 	bl	8000584 <__aeabi_dadd>
 80069ba:	4a73      	ldr	r2, [pc, #460]	; (8006b88 <_strtod_l+0xc14>)
 80069bc:	4b75      	ldr	r3, [pc, #468]	; (8006b94 <_strtod_l+0xc20>)
 80069be:	0006      	movs	r6, r0
 80069c0:	400a      	ands	r2, r1
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d95e      	bls.n	8006a84 <_strtod_l+0xb10>
 80069c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069c8:	4a73      	ldr	r2, [pc, #460]	; (8006b98 <_strtod_l+0xc24>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d103      	bne.n	80069d6 <_strtod_l+0xa62>
 80069ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069d0:	3301      	adds	r3, #1
 80069d2:	d100      	bne.n	80069d6 <_strtod_l+0xa62>
 80069d4:	e53c      	b.n	8006450 <_strtod_l+0x4dc>
 80069d6:	2601      	movs	r6, #1
 80069d8:	4f6f      	ldr	r7, [pc, #444]	; (8006b98 <_strtod_l+0xc24>)
 80069da:	4276      	negs	r6, r6
 80069dc:	9922      	ldr	r1, [sp, #136]	; 0x88
 80069de:	9805      	ldr	r0, [sp, #20]
 80069e0:	f001 fc1a 	bl	8008218 <_Bfree>
 80069e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069e6:	9805      	ldr	r0, [sp, #20]
 80069e8:	f001 fc16 	bl	8008218 <_Bfree>
 80069ec:	9907      	ldr	r1, [sp, #28]
 80069ee:	9805      	ldr	r0, [sp, #20]
 80069f0:	f001 fc12 	bl	8008218 <_Bfree>
 80069f4:	9906      	ldr	r1, [sp, #24]
 80069f6:	9805      	ldr	r0, [sp, #20]
 80069f8:	f001 fc0e 	bl	8008218 <_Bfree>
 80069fc:	e60f      	b.n	800661e <_strtod_l+0x6aa>
 80069fe:	2e00      	cmp	r6, #0
 8006a00:	d11c      	bne.n	8006a3c <_strtod_l+0xac8>
 8006a02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a04:	031b      	lsls	r3, r3, #12
 8006a06:	d11f      	bne.n	8006a48 <_strtod_l+0xad4>
 8006a08:	2200      	movs	r2, #0
 8006a0a:	0020      	movs	r0, r4
 8006a0c:	0029      	movs	r1, r5
 8006a0e:	4b5d      	ldr	r3, [pc, #372]	; (8006b84 <_strtod_l+0xc10>)
 8006a10:	f7f9 fd20 	bl	8000454 <__aeabi_dcmplt>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d11a      	bne.n	8006a4e <_strtod_l+0xada>
 8006a18:	0020      	movs	r0, r4
 8006a1a:	0029      	movs	r1, r5
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	4b5f      	ldr	r3, [pc, #380]	; (8006b9c <_strtod_l+0xc28>)
 8006a20:	f7fa fd20 	bl	8001464 <__aeabi_dmul>
 8006a24:	0005      	movs	r5, r0
 8006a26:	000c      	movs	r4, r1
 8006a28:	2380      	movs	r3, #128	; 0x80
 8006a2a:	061b      	lsls	r3, r3, #24
 8006a2c:	18e3      	adds	r3, r4, r3
 8006a2e:	951e      	str	r5, [sp, #120]	; 0x78
 8006a30:	931f      	str	r3, [sp, #124]	; 0x7c
 8006a32:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a36:	9212      	str	r2, [sp, #72]	; 0x48
 8006a38:	9313      	str	r3, [sp, #76]	; 0x4c
 8006a3a:	e79a      	b.n	8006972 <_strtod_l+0x9fe>
 8006a3c:	2e01      	cmp	r6, #1
 8006a3e:	d103      	bne.n	8006a48 <_strtod_l+0xad4>
 8006a40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d100      	bne.n	8006a48 <_strtod_l+0xad4>
 8006a46:	e574      	b.n	8006532 <_strtod_l+0x5be>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	4c55      	ldr	r4, [pc, #340]	; (8006ba0 <_strtod_l+0xc2c>)
 8006a4c:	e78d      	b.n	800696a <_strtod_l+0x9f6>
 8006a4e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8006a50:	4c52      	ldr	r4, [pc, #328]	; (8006b9c <_strtod_l+0xc28>)
 8006a52:	e7e9      	b.n	8006a28 <_strtod_l+0xab4>
 8006a54:	2200      	movs	r2, #0
 8006a56:	0020      	movs	r0, r4
 8006a58:	0029      	movs	r1, r5
 8006a5a:	4b50      	ldr	r3, [pc, #320]	; (8006b9c <_strtod_l+0xc28>)
 8006a5c:	f7fa fd02 	bl	8001464 <__aeabi_dmul>
 8006a60:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a62:	0005      	movs	r5, r0
 8006a64:	000b      	movs	r3, r1
 8006a66:	000c      	movs	r4, r1
 8006a68:	2a00      	cmp	r2, #0
 8006a6a:	d107      	bne.n	8006a7c <_strtod_l+0xb08>
 8006a6c:	2280      	movs	r2, #128	; 0x80
 8006a6e:	0612      	lsls	r2, r2, #24
 8006a70:	188b      	adds	r3, r1, r2
 8006a72:	9016      	str	r0, [sp, #88]	; 0x58
 8006a74:	9317      	str	r3, [sp, #92]	; 0x5c
 8006a76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006a78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a7a:	e7dc      	b.n	8006a36 <_strtod_l+0xac2>
 8006a7c:	0002      	movs	r2, r0
 8006a7e:	9216      	str	r2, [sp, #88]	; 0x58
 8006a80:	9317      	str	r3, [sp, #92]	; 0x5c
 8006a82:	e7f8      	b.n	8006a76 <_strtod_l+0xb02>
 8006a84:	23d4      	movs	r3, #212	; 0xd4
 8006a86:	049b      	lsls	r3, r3, #18
 8006a88:	18cf      	adds	r7, r1, r3
 8006a8a:	9b08      	ldr	r3, [sp, #32]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1a5      	bne.n	80069dc <_strtod_l+0xa68>
 8006a90:	4b3d      	ldr	r3, [pc, #244]	; (8006b88 <_strtod_l+0xc14>)
 8006a92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006a94:	403b      	ands	r3, r7
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d1a0      	bne.n	80069dc <_strtod_l+0xa68>
 8006a9a:	0028      	movs	r0, r5
 8006a9c:	0021      	movs	r1, r4
 8006a9e:	f7f9 fd1f 	bl	80004e0 <__aeabi_d2lz>
 8006aa2:	f7f9 fd59 	bl	8000558 <__aeabi_l2d>
 8006aa6:	0002      	movs	r2, r0
 8006aa8:	000b      	movs	r3, r1
 8006aaa:	0028      	movs	r0, r5
 8006aac:	0021      	movs	r1, r4
 8006aae:	f7fa ff45 	bl	800193c <__aeabi_dsub>
 8006ab2:	033b      	lsls	r3, r7, #12
 8006ab4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006ab6:	0b1b      	lsrs	r3, r3, #12
 8006ab8:	4333      	orrs	r3, r6
 8006aba:	4313      	orrs	r3, r2
 8006abc:	0004      	movs	r4, r0
 8006abe:	000d      	movs	r5, r1
 8006ac0:	4a38      	ldr	r2, [pc, #224]	; (8006ba4 <_strtod_l+0xc30>)
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d055      	beq.n	8006b72 <_strtod_l+0xbfe>
 8006ac6:	4b38      	ldr	r3, [pc, #224]	; (8006ba8 <_strtod_l+0xc34>)
 8006ac8:	f7f9 fcc4 	bl	8000454 <__aeabi_dcmplt>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d000      	beq.n	8006ad2 <_strtod_l+0xb5e>
 8006ad0:	e4c7      	b.n	8006462 <_strtod_l+0x4ee>
 8006ad2:	0020      	movs	r0, r4
 8006ad4:	0029      	movs	r1, r5
 8006ad6:	4a35      	ldr	r2, [pc, #212]	; (8006bac <_strtod_l+0xc38>)
 8006ad8:	4b30      	ldr	r3, [pc, #192]	; (8006b9c <_strtod_l+0xc28>)
 8006ada:	f7f9 fccf 	bl	800047c <__aeabi_dcmpgt>
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	d100      	bne.n	8006ae4 <_strtod_l+0xb70>
 8006ae2:	e77b      	b.n	80069dc <_strtod_l+0xa68>
 8006ae4:	e4bd      	b.n	8006462 <_strtod_l+0x4ee>
 8006ae6:	9b08      	ldr	r3, [sp, #32]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d02b      	beq.n	8006b44 <_strtod_l+0xbd0>
 8006aec:	23d4      	movs	r3, #212	; 0xd4
 8006aee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006af0:	04db      	lsls	r3, r3, #19
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d826      	bhi.n	8006b44 <_strtod_l+0xbd0>
 8006af6:	0028      	movs	r0, r5
 8006af8:	0021      	movs	r1, r4
 8006afa:	4a2d      	ldr	r2, [pc, #180]	; (8006bb0 <_strtod_l+0xc3c>)
 8006afc:	4b2d      	ldr	r3, [pc, #180]	; (8006bb4 <_strtod_l+0xc40>)
 8006afe:	f7f9 fcb3 	bl	8000468 <__aeabi_dcmple>
 8006b02:	2800      	cmp	r0, #0
 8006b04:	d017      	beq.n	8006b36 <_strtod_l+0xbc2>
 8006b06:	0028      	movs	r0, r5
 8006b08:	0021      	movs	r1, r4
 8006b0a:	f7f9 fccb 	bl	80004a4 <__aeabi_d2uiz>
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	d100      	bne.n	8006b14 <_strtod_l+0xba0>
 8006b12:	3001      	adds	r0, #1
 8006b14:	f7fb fb28 	bl	8002168 <__aeabi_ui2d>
 8006b18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006b1a:	0005      	movs	r5, r0
 8006b1c:	000b      	movs	r3, r1
 8006b1e:	000c      	movs	r4, r1
 8006b20:	2a00      	cmp	r2, #0
 8006b22:	d122      	bne.n	8006b6a <_strtod_l+0xbf6>
 8006b24:	2280      	movs	r2, #128	; 0x80
 8006b26:	0612      	lsls	r2, r2, #24
 8006b28:	188b      	adds	r3, r1, r2
 8006b2a:	9018      	str	r0, [sp, #96]	; 0x60
 8006b2c:	9319      	str	r3, [sp, #100]	; 0x64
 8006b2e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006b30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b32:	9212      	str	r2, [sp, #72]	; 0x48
 8006b34:	9313      	str	r3, [sp, #76]	; 0x4c
 8006b36:	22d6      	movs	r2, #214	; 0xd6
 8006b38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b3a:	04d2      	lsls	r2, r2, #19
 8006b3c:	189b      	adds	r3, r3, r2
 8006b3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006b40:	1a9b      	subs	r3, r3, r2
 8006b42:	9313      	str	r3, [sp, #76]	; 0x4c
 8006b44:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006b46:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006b48:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8006b4a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8006b4c:	f001 fea6 	bl	800889c <__ulp>
 8006b50:	0002      	movs	r2, r0
 8006b52:	000b      	movs	r3, r1
 8006b54:	0030      	movs	r0, r6
 8006b56:	0039      	movs	r1, r7
 8006b58:	f7fa fc84 	bl	8001464 <__aeabi_dmul>
 8006b5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b60:	f7f9 fd10 	bl	8000584 <__aeabi_dadd>
 8006b64:	0006      	movs	r6, r0
 8006b66:	000f      	movs	r7, r1
 8006b68:	e78f      	b.n	8006a8a <_strtod_l+0xb16>
 8006b6a:	0002      	movs	r2, r0
 8006b6c:	9218      	str	r2, [sp, #96]	; 0x60
 8006b6e:	9319      	str	r3, [sp, #100]	; 0x64
 8006b70:	e7dd      	b.n	8006b2e <_strtod_l+0xbba>
 8006b72:	4b11      	ldr	r3, [pc, #68]	; (8006bb8 <_strtod_l+0xc44>)
 8006b74:	f7f9 fc6e 	bl	8000454 <__aeabi_dcmplt>
 8006b78:	e7b1      	b.n	8006ade <_strtod_l+0xb6a>
 8006b7a:	46c0      	nop			; (mov r8, r8)
 8006b7c:	fff00000 	.word	0xfff00000
 8006b80:	000fffff 	.word	0x000fffff
 8006b84:	3ff00000 	.word	0x3ff00000
 8006b88:	7ff00000 	.word	0x7ff00000
 8006b8c:	7fe00000 	.word	0x7fe00000
 8006b90:	fcb00000 	.word	0xfcb00000
 8006b94:	7c9fffff 	.word	0x7c9fffff
 8006b98:	7fefffff 	.word	0x7fefffff
 8006b9c:	3fe00000 	.word	0x3fe00000
 8006ba0:	bff00000 	.word	0xbff00000
 8006ba4:	94a03595 	.word	0x94a03595
 8006ba8:	3fdfffff 	.word	0x3fdfffff
 8006bac:	35afe535 	.word	0x35afe535
 8006bb0:	ffc00000 	.word	0xffc00000
 8006bb4:	41dfffff 	.word	0x41dfffff
 8006bb8:	3fcfffff 	.word	0x3fcfffff

08006bbc <_strtod_r>:
 8006bbc:	b510      	push	{r4, lr}
 8006bbe:	4b02      	ldr	r3, [pc, #8]	; (8006bc8 <_strtod_r+0xc>)
 8006bc0:	f7ff f9d8 	bl	8005f74 <_strtod_l>
 8006bc4:	bd10      	pop	{r4, pc}
 8006bc6:	46c0      	nop			; (mov r8, r8)
 8006bc8:	2000007c 	.word	0x2000007c

08006bcc <_strtol_l.isra.0>:
 8006bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	001e      	movs	r6, r3
 8006bd2:	9005      	str	r0, [sp, #20]
 8006bd4:	9101      	str	r1, [sp, #4]
 8006bd6:	9202      	str	r2, [sp, #8]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d045      	beq.n	8006c68 <_strtol_l.isra.0+0x9c>
 8006bdc:	0008      	movs	r0, r1
 8006bde:	2b24      	cmp	r3, #36	; 0x24
 8006be0:	d842      	bhi.n	8006c68 <_strtol_l.isra.0+0x9c>
 8006be2:	4b3f      	ldr	r3, [pc, #252]	; (8006ce0 <_strtol_l.isra.0+0x114>)
 8006be4:	2208      	movs	r2, #8
 8006be6:	469c      	mov	ip, r3
 8006be8:	0003      	movs	r3, r0
 8006bea:	4661      	mov	r1, ip
 8006bec:	781c      	ldrb	r4, [r3, #0]
 8006bee:	1c45      	adds	r5, r0, #1
 8006bf0:	5d09      	ldrb	r1, [r1, r4]
 8006bf2:	0028      	movs	r0, r5
 8006bf4:	000f      	movs	r7, r1
 8006bf6:	4017      	ands	r7, r2
 8006bf8:	4211      	tst	r1, r2
 8006bfa:	d1f5      	bne.n	8006be8 <_strtol_l.isra.0+0x1c>
 8006bfc:	2c2d      	cmp	r4, #45	; 0x2d
 8006bfe:	d13a      	bne.n	8006c76 <_strtol_l.isra.0+0xaa>
 8006c00:	2701      	movs	r7, #1
 8006c02:	782c      	ldrb	r4, [r5, #0]
 8006c04:	1c9d      	adds	r5, r3, #2
 8006c06:	2e00      	cmp	r6, #0
 8006c08:	d065      	beq.n	8006cd6 <_strtol_l.isra.0+0x10a>
 8006c0a:	2e10      	cmp	r6, #16
 8006c0c:	d109      	bne.n	8006c22 <_strtol_l.isra.0+0x56>
 8006c0e:	2c30      	cmp	r4, #48	; 0x30
 8006c10:	d107      	bne.n	8006c22 <_strtol_l.isra.0+0x56>
 8006c12:	2220      	movs	r2, #32
 8006c14:	782b      	ldrb	r3, [r5, #0]
 8006c16:	4393      	bics	r3, r2
 8006c18:	2b58      	cmp	r3, #88	; 0x58
 8006c1a:	d157      	bne.n	8006ccc <_strtol_l.isra.0+0x100>
 8006c1c:	2610      	movs	r6, #16
 8006c1e:	786c      	ldrb	r4, [r5, #1]
 8006c20:	3502      	adds	r5, #2
 8006c22:	4b30      	ldr	r3, [pc, #192]	; (8006ce4 <_strtol_l.isra.0+0x118>)
 8006c24:	0031      	movs	r1, r6
 8006c26:	18fb      	adds	r3, r7, r3
 8006c28:	0018      	movs	r0, r3
 8006c2a:	9303      	str	r3, [sp, #12]
 8006c2c:	f7f9 fb0c 	bl	8000248 <__aeabi_uidivmod>
 8006c30:	2300      	movs	r3, #0
 8006c32:	2201      	movs	r2, #1
 8006c34:	4684      	mov	ip, r0
 8006c36:	0018      	movs	r0, r3
 8006c38:	9104      	str	r1, [sp, #16]
 8006c3a:	4252      	negs	r2, r2
 8006c3c:	0021      	movs	r1, r4
 8006c3e:	3930      	subs	r1, #48	; 0x30
 8006c40:	2909      	cmp	r1, #9
 8006c42:	d81d      	bhi.n	8006c80 <_strtol_l.isra.0+0xb4>
 8006c44:	000c      	movs	r4, r1
 8006c46:	42a6      	cmp	r6, r4
 8006c48:	dd28      	ble.n	8006c9c <_strtol_l.isra.0+0xd0>
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	db24      	blt.n	8006c98 <_strtol_l.isra.0+0xcc>
 8006c4e:	0013      	movs	r3, r2
 8006c50:	4584      	cmp	ip, r0
 8006c52:	d306      	bcc.n	8006c62 <_strtol_l.isra.0+0x96>
 8006c54:	d102      	bne.n	8006c5c <_strtol_l.isra.0+0x90>
 8006c56:	9904      	ldr	r1, [sp, #16]
 8006c58:	42a1      	cmp	r1, r4
 8006c5a:	db02      	blt.n	8006c62 <_strtol_l.isra.0+0x96>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	4370      	muls	r0, r6
 8006c60:	1820      	adds	r0, r4, r0
 8006c62:	782c      	ldrb	r4, [r5, #0]
 8006c64:	3501      	adds	r5, #1
 8006c66:	e7e9      	b.n	8006c3c <_strtol_l.isra.0+0x70>
 8006c68:	f7fe fa94 	bl	8005194 <__errno>
 8006c6c:	2316      	movs	r3, #22
 8006c6e:	6003      	str	r3, [r0, #0]
 8006c70:	2000      	movs	r0, #0
 8006c72:	b007      	add	sp, #28
 8006c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c76:	2c2b      	cmp	r4, #43	; 0x2b
 8006c78:	d1c5      	bne.n	8006c06 <_strtol_l.isra.0+0x3a>
 8006c7a:	782c      	ldrb	r4, [r5, #0]
 8006c7c:	1c9d      	adds	r5, r3, #2
 8006c7e:	e7c2      	b.n	8006c06 <_strtol_l.isra.0+0x3a>
 8006c80:	0021      	movs	r1, r4
 8006c82:	3941      	subs	r1, #65	; 0x41
 8006c84:	2919      	cmp	r1, #25
 8006c86:	d801      	bhi.n	8006c8c <_strtol_l.isra.0+0xc0>
 8006c88:	3c37      	subs	r4, #55	; 0x37
 8006c8a:	e7dc      	b.n	8006c46 <_strtol_l.isra.0+0x7a>
 8006c8c:	0021      	movs	r1, r4
 8006c8e:	3961      	subs	r1, #97	; 0x61
 8006c90:	2919      	cmp	r1, #25
 8006c92:	d803      	bhi.n	8006c9c <_strtol_l.isra.0+0xd0>
 8006c94:	3c57      	subs	r4, #87	; 0x57
 8006c96:	e7d6      	b.n	8006c46 <_strtol_l.isra.0+0x7a>
 8006c98:	0013      	movs	r3, r2
 8006c9a:	e7e2      	b.n	8006c62 <_strtol_l.isra.0+0x96>
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	da09      	bge.n	8006cb4 <_strtol_l.isra.0+0xe8>
 8006ca0:	2322      	movs	r3, #34	; 0x22
 8006ca2:	9a05      	ldr	r2, [sp, #20]
 8006ca4:	9803      	ldr	r0, [sp, #12]
 8006ca6:	6013      	str	r3, [r2, #0]
 8006ca8:	9b02      	ldr	r3, [sp, #8]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d0e1      	beq.n	8006c72 <_strtol_l.isra.0+0xa6>
 8006cae:	1e6b      	subs	r3, r5, #1
 8006cb0:	9301      	str	r3, [sp, #4]
 8006cb2:	e007      	b.n	8006cc4 <_strtol_l.isra.0+0xf8>
 8006cb4:	2f00      	cmp	r7, #0
 8006cb6:	d000      	beq.n	8006cba <_strtol_l.isra.0+0xee>
 8006cb8:	4240      	negs	r0, r0
 8006cba:	9a02      	ldr	r2, [sp, #8]
 8006cbc:	2a00      	cmp	r2, #0
 8006cbe:	d0d8      	beq.n	8006c72 <_strtol_l.isra.0+0xa6>
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1f4      	bne.n	8006cae <_strtol_l.isra.0+0xe2>
 8006cc4:	9b02      	ldr	r3, [sp, #8]
 8006cc6:	9a01      	ldr	r2, [sp, #4]
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	e7d2      	b.n	8006c72 <_strtol_l.isra.0+0xa6>
 8006ccc:	2430      	movs	r4, #48	; 0x30
 8006cce:	2e00      	cmp	r6, #0
 8006cd0:	d1a7      	bne.n	8006c22 <_strtol_l.isra.0+0x56>
 8006cd2:	3608      	adds	r6, #8
 8006cd4:	e7a5      	b.n	8006c22 <_strtol_l.isra.0+0x56>
 8006cd6:	2c30      	cmp	r4, #48	; 0x30
 8006cd8:	d09b      	beq.n	8006c12 <_strtol_l.isra.0+0x46>
 8006cda:	260a      	movs	r6, #10
 8006cdc:	e7a1      	b.n	8006c22 <_strtol_l.isra.0+0x56>
 8006cde:	46c0      	nop			; (mov r8, r8)
 8006ce0:	08009d21 	.word	0x08009d21
 8006ce4:	7fffffff 	.word	0x7fffffff

08006ce8 <_strtol_r>:
 8006ce8:	b510      	push	{r4, lr}
 8006cea:	f7ff ff6f 	bl	8006bcc <_strtol_l.isra.0>
 8006cee:	bd10      	pop	{r4, pc}

08006cf0 <quorem>:
 8006cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cf2:	0006      	movs	r6, r0
 8006cf4:	690d      	ldr	r5, [r1, #16]
 8006cf6:	6933      	ldr	r3, [r6, #16]
 8006cf8:	b087      	sub	sp, #28
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	9102      	str	r1, [sp, #8]
 8006cfe:	42ab      	cmp	r3, r5
 8006d00:	db6b      	blt.n	8006dda <quorem+0xea>
 8006d02:	000b      	movs	r3, r1
 8006d04:	3d01      	subs	r5, #1
 8006d06:	00ac      	lsls	r4, r5, #2
 8006d08:	3314      	adds	r3, #20
 8006d0a:	9305      	str	r3, [sp, #20]
 8006d0c:	191b      	adds	r3, r3, r4
 8006d0e:	9303      	str	r3, [sp, #12]
 8006d10:	0033      	movs	r3, r6
 8006d12:	3314      	adds	r3, #20
 8006d14:	9301      	str	r3, [sp, #4]
 8006d16:	191c      	adds	r4, r3, r4
 8006d18:	9b03      	ldr	r3, [sp, #12]
 8006d1a:	6827      	ldr	r7, [r4, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	0038      	movs	r0, r7
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	3301      	adds	r3, #1
 8006d24:	0019      	movs	r1, r3
 8006d26:	9304      	str	r3, [sp, #16]
 8006d28:	f7f9 fa08 	bl	800013c <__udivsi3>
 8006d2c:	9b04      	ldr	r3, [sp, #16]
 8006d2e:	9000      	str	r0, [sp, #0]
 8006d30:	429f      	cmp	r7, r3
 8006d32:	d329      	bcc.n	8006d88 <quorem+0x98>
 8006d34:	2300      	movs	r3, #0
 8006d36:	469c      	mov	ip, r3
 8006d38:	9801      	ldr	r0, [sp, #4]
 8006d3a:	9f05      	ldr	r7, [sp, #20]
 8006d3c:	9304      	str	r3, [sp, #16]
 8006d3e:	cf08      	ldmia	r7!, {r3}
 8006d40:	9a00      	ldr	r2, [sp, #0]
 8006d42:	b299      	uxth	r1, r3
 8006d44:	4351      	muls	r1, r2
 8006d46:	0c1b      	lsrs	r3, r3, #16
 8006d48:	4353      	muls	r3, r2
 8006d4a:	4461      	add	r1, ip
 8006d4c:	0c0a      	lsrs	r2, r1, #16
 8006d4e:	189b      	adds	r3, r3, r2
 8006d50:	0c1a      	lsrs	r2, r3, #16
 8006d52:	9305      	str	r3, [sp, #20]
 8006d54:	6803      	ldr	r3, [r0, #0]
 8006d56:	4694      	mov	ip, r2
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	9b04      	ldr	r3, [sp, #16]
 8006d5c:	b289      	uxth	r1, r1
 8006d5e:	18d2      	adds	r2, r2, r3
 8006d60:	6803      	ldr	r3, [r0, #0]
 8006d62:	1a52      	subs	r2, r2, r1
 8006d64:	0c19      	lsrs	r1, r3, #16
 8006d66:	466b      	mov	r3, sp
 8006d68:	8a9b      	ldrh	r3, [r3, #20]
 8006d6a:	1acb      	subs	r3, r1, r3
 8006d6c:	1411      	asrs	r1, r2, #16
 8006d6e:	185b      	adds	r3, r3, r1
 8006d70:	1419      	asrs	r1, r3, #16
 8006d72:	b292      	uxth	r2, r2
 8006d74:	041b      	lsls	r3, r3, #16
 8006d76:	431a      	orrs	r2, r3
 8006d78:	9b03      	ldr	r3, [sp, #12]
 8006d7a:	9104      	str	r1, [sp, #16]
 8006d7c:	c004      	stmia	r0!, {r2}
 8006d7e:	42bb      	cmp	r3, r7
 8006d80:	d2dd      	bcs.n	8006d3e <quorem+0x4e>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d02e      	beq.n	8006de6 <quorem+0xf6>
 8006d88:	0030      	movs	r0, r6
 8006d8a:	9902      	ldr	r1, [sp, #8]
 8006d8c:	f001 fcd2 	bl	8008734 <__mcmp>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	db21      	blt.n	8006dd8 <quorem+0xe8>
 8006d94:	0030      	movs	r0, r6
 8006d96:	2400      	movs	r4, #0
 8006d98:	9b00      	ldr	r3, [sp, #0]
 8006d9a:	9902      	ldr	r1, [sp, #8]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	3014      	adds	r0, #20
 8006da2:	3114      	adds	r1, #20
 8006da4:	6802      	ldr	r2, [r0, #0]
 8006da6:	c908      	ldmia	r1!, {r3}
 8006da8:	b292      	uxth	r2, r2
 8006daa:	1914      	adds	r4, r2, r4
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	1aa2      	subs	r2, r4, r2
 8006db0:	6804      	ldr	r4, [r0, #0]
 8006db2:	0c1b      	lsrs	r3, r3, #16
 8006db4:	0c24      	lsrs	r4, r4, #16
 8006db6:	1ae3      	subs	r3, r4, r3
 8006db8:	1414      	asrs	r4, r2, #16
 8006dba:	191b      	adds	r3, r3, r4
 8006dbc:	141c      	asrs	r4, r3, #16
 8006dbe:	b292      	uxth	r2, r2
 8006dc0:	041b      	lsls	r3, r3, #16
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	c008      	stmia	r0!, {r3}
 8006dc6:	9b03      	ldr	r3, [sp, #12]
 8006dc8:	428b      	cmp	r3, r1
 8006dca:	d2eb      	bcs.n	8006da4 <quorem+0xb4>
 8006dcc:	9a01      	ldr	r2, [sp, #4]
 8006dce:	00ab      	lsls	r3, r5, #2
 8006dd0:	18d3      	adds	r3, r2, r3
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	2a00      	cmp	r2, #0
 8006dd6:	d010      	beq.n	8006dfa <quorem+0x10a>
 8006dd8:	9800      	ldr	r0, [sp, #0]
 8006dda:	b007      	add	sp, #28
 8006ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d104      	bne.n	8006dee <quorem+0xfe>
 8006de4:	3d01      	subs	r5, #1
 8006de6:	9b01      	ldr	r3, [sp, #4]
 8006de8:	3c04      	subs	r4, #4
 8006dea:	42a3      	cmp	r3, r4
 8006dec:	d3f7      	bcc.n	8006dde <quorem+0xee>
 8006dee:	6135      	str	r5, [r6, #16]
 8006df0:	e7ca      	b.n	8006d88 <quorem+0x98>
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	2a00      	cmp	r2, #0
 8006df6:	d104      	bne.n	8006e02 <quorem+0x112>
 8006df8:	3d01      	subs	r5, #1
 8006dfa:	9a01      	ldr	r2, [sp, #4]
 8006dfc:	3b04      	subs	r3, #4
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d3f7      	bcc.n	8006df2 <quorem+0x102>
 8006e02:	6135      	str	r5, [r6, #16]
 8006e04:	e7e8      	b.n	8006dd8 <quorem+0xe8>
	...

08006e08 <_dtoa_r>:
 8006e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e0a:	b09d      	sub	sp, #116	; 0x74
 8006e0c:	9202      	str	r2, [sp, #8]
 8006e0e:	9303      	str	r3, [sp, #12]
 8006e10:	9b02      	ldr	r3, [sp, #8]
 8006e12:	9c03      	ldr	r4, [sp, #12]
 8006e14:	930a      	str	r3, [sp, #40]	; 0x28
 8006e16:	940b      	str	r4, [sp, #44]	; 0x2c
 8006e18:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006e1a:	0007      	movs	r7, r0
 8006e1c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8006e1e:	2c00      	cmp	r4, #0
 8006e20:	d10e      	bne.n	8006e40 <_dtoa_r+0x38>
 8006e22:	2010      	movs	r0, #16
 8006e24:	f001 f984 	bl	8008130 <malloc>
 8006e28:	1e02      	subs	r2, r0, #0
 8006e2a:	6278      	str	r0, [r7, #36]	; 0x24
 8006e2c:	d104      	bne.n	8006e38 <_dtoa_r+0x30>
 8006e2e:	21ea      	movs	r1, #234	; 0xea
 8006e30:	4bc0      	ldr	r3, [pc, #768]	; (8007134 <_dtoa_r+0x32c>)
 8006e32:	48c1      	ldr	r0, [pc, #772]	; (8007138 <_dtoa_r+0x330>)
 8006e34:	f002 f8c4 	bl	8008fc0 <__assert_func>
 8006e38:	6044      	str	r4, [r0, #4]
 8006e3a:	6084      	str	r4, [r0, #8]
 8006e3c:	6004      	str	r4, [r0, #0]
 8006e3e:	60c4      	str	r4, [r0, #12]
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	6819      	ldr	r1, [r3, #0]
 8006e44:	2900      	cmp	r1, #0
 8006e46:	d00a      	beq.n	8006e5e <_dtoa_r+0x56>
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	4093      	lsls	r3, r2
 8006e4e:	604a      	str	r2, [r1, #4]
 8006e50:	608b      	str	r3, [r1, #8]
 8006e52:	0038      	movs	r0, r7
 8006e54:	f001 f9e0 	bl	8008218 <_Bfree>
 8006e58:	2200      	movs	r2, #0
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	9b03      	ldr	r3, [sp, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	da21      	bge.n	8006ea8 <_dtoa_r+0xa0>
 8006e64:	2301      	movs	r3, #1
 8006e66:	602b      	str	r3, [r5, #0]
 8006e68:	9b03      	ldr	r3, [sp, #12]
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	085b      	lsrs	r3, r3, #1
 8006e6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e70:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006e72:	4bb2      	ldr	r3, [pc, #712]	; (800713c <_dtoa_r+0x334>)
 8006e74:	002a      	movs	r2, r5
 8006e76:	9318      	str	r3, [sp, #96]	; 0x60
 8006e78:	401a      	ands	r2, r3
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d117      	bne.n	8006eae <_dtoa_r+0xa6>
 8006e7e:	4bb0      	ldr	r3, [pc, #704]	; (8007140 <_dtoa_r+0x338>)
 8006e80:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006e82:	0328      	lsls	r0, r5, #12
 8006e84:	6013      	str	r3, [r2, #0]
 8006e86:	9b02      	ldr	r3, [sp, #8]
 8006e88:	0b00      	lsrs	r0, r0, #12
 8006e8a:	4318      	orrs	r0, r3
 8006e8c:	d101      	bne.n	8006e92 <_dtoa_r+0x8a>
 8006e8e:	f000 fdc3 	bl	8007a18 <_dtoa_r+0xc10>
 8006e92:	48ac      	ldr	r0, [pc, #688]	; (8007144 <_dtoa_r+0x33c>)
 8006e94:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e96:	9005      	str	r0, [sp, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <_dtoa_r+0x9a>
 8006e9c:	4baa      	ldr	r3, [pc, #680]	; (8007148 <_dtoa_r+0x340>)
 8006e9e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006ea0:	6013      	str	r3, [r2, #0]
 8006ea2:	9805      	ldr	r0, [sp, #20]
 8006ea4:	b01d      	add	sp, #116	; 0x74
 8006ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	602b      	str	r3, [r5, #0]
 8006eac:	e7e0      	b.n	8006e70 <_dtoa_r+0x68>
 8006eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006eb2:	9312      	str	r3, [sp, #72]	; 0x48
 8006eb4:	9413      	str	r4, [sp, #76]	; 0x4c
 8006eb6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006eb8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006eba:	2200      	movs	r2, #0
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	f7f9 fac3 	bl	8000448 <__aeabi_dcmpeq>
 8006ec2:	1e04      	subs	r4, r0, #0
 8006ec4:	d00b      	beq.n	8006ede <_dtoa_r+0xd6>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006eca:	6013      	str	r3, [r2, #0]
 8006ecc:	4b9f      	ldr	r3, [pc, #636]	; (800714c <_dtoa_r+0x344>)
 8006ece:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006ed0:	9305      	str	r3, [sp, #20]
 8006ed2:	2a00      	cmp	r2, #0
 8006ed4:	d0e5      	beq.n	8006ea2 <_dtoa_r+0x9a>
 8006ed6:	4a9e      	ldr	r2, [pc, #632]	; (8007150 <_dtoa_r+0x348>)
 8006ed8:	9926      	ldr	r1, [sp, #152]	; 0x98
 8006eda:	600a      	str	r2, [r1, #0]
 8006edc:	e7e1      	b.n	8006ea2 <_dtoa_r+0x9a>
 8006ede:	ab1a      	add	r3, sp, #104	; 0x68
 8006ee0:	9301      	str	r3, [sp, #4]
 8006ee2:	ab1b      	add	r3, sp, #108	; 0x6c
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	0038      	movs	r0, r7
 8006ee8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006eea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006eec:	f001 fd4a 	bl	8008984 <__d2b>
 8006ef0:	006e      	lsls	r6, r5, #1
 8006ef2:	9004      	str	r0, [sp, #16]
 8006ef4:	0d76      	lsrs	r6, r6, #21
 8006ef6:	d100      	bne.n	8006efa <_dtoa_r+0xf2>
 8006ef8:	e07c      	b.n	8006ff4 <_dtoa_r+0x1ec>
 8006efa:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006efc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006efe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f00:	4a94      	ldr	r2, [pc, #592]	; (8007154 <_dtoa_r+0x34c>)
 8006f02:	031b      	lsls	r3, r3, #12
 8006f04:	0b1b      	lsrs	r3, r3, #12
 8006f06:	431a      	orrs	r2, r3
 8006f08:	0011      	movs	r1, r2
 8006f0a:	4b93      	ldr	r3, [pc, #588]	; (8007158 <_dtoa_r+0x350>)
 8006f0c:	9416      	str	r4, [sp, #88]	; 0x58
 8006f0e:	18f6      	adds	r6, r6, r3
 8006f10:	2200      	movs	r2, #0
 8006f12:	4b92      	ldr	r3, [pc, #584]	; (800715c <_dtoa_r+0x354>)
 8006f14:	f7fa fd12 	bl	800193c <__aeabi_dsub>
 8006f18:	4a91      	ldr	r2, [pc, #580]	; (8007160 <_dtoa_r+0x358>)
 8006f1a:	4b92      	ldr	r3, [pc, #584]	; (8007164 <_dtoa_r+0x35c>)
 8006f1c:	f7fa faa2 	bl	8001464 <__aeabi_dmul>
 8006f20:	4a91      	ldr	r2, [pc, #580]	; (8007168 <_dtoa_r+0x360>)
 8006f22:	4b92      	ldr	r3, [pc, #584]	; (800716c <_dtoa_r+0x364>)
 8006f24:	f7f9 fb2e 	bl	8000584 <__aeabi_dadd>
 8006f28:	0004      	movs	r4, r0
 8006f2a:	0030      	movs	r0, r6
 8006f2c:	000d      	movs	r5, r1
 8006f2e:	f7fb f8eb 	bl	8002108 <__aeabi_i2d>
 8006f32:	4a8f      	ldr	r2, [pc, #572]	; (8007170 <_dtoa_r+0x368>)
 8006f34:	4b8f      	ldr	r3, [pc, #572]	; (8007174 <_dtoa_r+0x36c>)
 8006f36:	f7fa fa95 	bl	8001464 <__aeabi_dmul>
 8006f3a:	0002      	movs	r2, r0
 8006f3c:	000b      	movs	r3, r1
 8006f3e:	0020      	movs	r0, r4
 8006f40:	0029      	movs	r1, r5
 8006f42:	f7f9 fb1f 	bl	8000584 <__aeabi_dadd>
 8006f46:	0004      	movs	r4, r0
 8006f48:	000d      	movs	r5, r1
 8006f4a:	f7fb f8a7 	bl	800209c <__aeabi_d2iz>
 8006f4e:	2200      	movs	r2, #0
 8006f50:	9002      	str	r0, [sp, #8]
 8006f52:	2300      	movs	r3, #0
 8006f54:	0020      	movs	r0, r4
 8006f56:	0029      	movs	r1, r5
 8006f58:	f7f9 fa7c 	bl	8000454 <__aeabi_dcmplt>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	d00b      	beq.n	8006f78 <_dtoa_r+0x170>
 8006f60:	9802      	ldr	r0, [sp, #8]
 8006f62:	f7fb f8d1 	bl	8002108 <__aeabi_i2d>
 8006f66:	002b      	movs	r3, r5
 8006f68:	0022      	movs	r2, r4
 8006f6a:	f7f9 fa6d 	bl	8000448 <__aeabi_dcmpeq>
 8006f6e:	4243      	negs	r3, r0
 8006f70:	4158      	adcs	r0, r3
 8006f72:	9b02      	ldr	r3, [sp, #8]
 8006f74:	1a1b      	subs	r3, r3, r0
 8006f76:	9302      	str	r3, [sp, #8]
 8006f78:	2301      	movs	r3, #1
 8006f7a:	9315      	str	r3, [sp, #84]	; 0x54
 8006f7c:	9b02      	ldr	r3, [sp, #8]
 8006f7e:	2b16      	cmp	r3, #22
 8006f80:	d80f      	bhi.n	8006fa2 <_dtoa_r+0x19a>
 8006f82:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006f84:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006f86:	00da      	lsls	r2, r3, #3
 8006f88:	4b7b      	ldr	r3, [pc, #492]	; (8007178 <_dtoa_r+0x370>)
 8006f8a:	189b      	adds	r3, r3, r2
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f7f9 fa60 	bl	8000454 <__aeabi_dcmplt>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	d049      	beq.n	800702c <_dtoa_r+0x224>
 8006f98:	9b02      	ldr	r3, [sp, #8]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	9302      	str	r3, [sp, #8]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	9315      	str	r3, [sp, #84]	; 0x54
 8006fa2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006fa4:	1b9e      	subs	r6, r3, r6
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	9308      	str	r3, [sp, #32]
 8006faa:	0033      	movs	r3, r6
 8006fac:	3b01      	subs	r3, #1
 8006fae:	930d      	str	r3, [sp, #52]	; 0x34
 8006fb0:	d504      	bpl.n	8006fbc <_dtoa_r+0x1b4>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	1b9b      	subs	r3, r3, r6
 8006fb6:	9308      	str	r3, [sp, #32]
 8006fb8:	2300      	movs	r3, #0
 8006fba:	930d      	str	r3, [sp, #52]	; 0x34
 8006fbc:	9b02      	ldr	r3, [sp, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	db36      	blt.n	8007030 <_dtoa_r+0x228>
 8006fc2:	9a02      	ldr	r2, [sp, #8]
 8006fc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fc6:	4694      	mov	ip, r2
 8006fc8:	4463      	add	r3, ip
 8006fca:	930d      	str	r3, [sp, #52]	; 0x34
 8006fcc:	2300      	movs	r3, #0
 8006fce:	9214      	str	r2, [sp, #80]	; 0x50
 8006fd0:	930e      	str	r3, [sp, #56]	; 0x38
 8006fd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fd4:	2401      	movs	r4, #1
 8006fd6:	2b09      	cmp	r3, #9
 8006fd8:	d862      	bhi.n	80070a0 <_dtoa_r+0x298>
 8006fda:	2b05      	cmp	r3, #5
 8006fdc:	dd02      	ble.n	8006fe4 <_dtoa_r+0x1dc>
 8006fde:	2400      	movs	r4, #0
 8006fe0:	3b04      	subs	r3, #4
 8006fe2:	9322      	str	r3, [sp, #136]	; 0x88
 8006fe4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fe6:	1e98      	subs	r0, r3, #2
 8006fe8:	2803      	cmp	r0, #3
 8006fea:	d862      	bhi.n	80070b2 <_dtoa_r+0x2aa>
 8006fec:	f7f9 f892 	bl	8000114 <__gnu_thumb1_case_uqi>
 8006ff0:	56343629 	.word	0x56343629
 8006ff4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006ff6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006ff8:	189e      	adds	r6, r3, r2
 8006ffa:	4b60      	ldr	r3, [pc, #384]	; (800717c <_dtoa_r+0x374>)
 8006ffc:	18f2      	adds	r2, r6, r3
 8006ffe:	2a20      	cmp	r2, #32
 8007000:	dd0f      	ble.n	8007022 <_dtoa_r+0x21a>
 8007002:	2340      	movs	r3, #64	; 0x40
 8007004:	1a9b      	subs	r3, r3, r2
 8007006:	409d      	lsls	r5, r3
 8007008:	4b5d      	ldr	r3, [pc, #372]	; (8007180 <_dtoa_r+0x378>)
 800700a:	9802      	ldr	r0, [sp, #8]
 800700c:	18f3      	adds	r3, r6, r3
 800700e:	40d8      	lsrs	r0, r3
 8007010:	4328      	orrs	r0, r5
 8007012:	f7fb f8a9 	bl	8002168 <__aeabi_ui2d>
 8007016:	2301      	movs	r3, #1
 8007018:	4c5a      	ldr	r4, [pc, #360]	; (8007184 <_dtoa_r+0x37c>)
 800701a:	3e01      	subs	r6, #1
 800701c:	1909      	adds	r1, r1, r4
 800701e:	9316      	str	r3, [sp, #88]	; 0x58
 8007020:	e776      	b.n	8006f10 <_dtoa_r+0x108>
 8007022:	2320      	movs	r3, #32
 8007024:	9802      	ldr	r0, [sp, #8]
 8007026:	1a9b      	subs	r3, r3, r2
 8007028:	4098      	lsls	r0, r3
 800702a:	e7f2      	b.n	8007012 <_dtoa_r+0x20a>
 800702c:	9015      	str	r0, [sp, #84]	; 0x54
 800702e:	e7b8      	b.n	8006fa2 <_dtoa_r+0x19a>
 8007030:	9b08      	ldr	r3, [sp, #32]
 8007032:	9a02      	ldr	r2, [sp, #8]
 8007034:	1a9b      	subs	r3, r3, r2
 8007036:	9308      	str	r3, [sp, #32]
 8007038:	4253      	negs	r3, r2
 800703a:	930e      	str	r3, [sp, #56]	; 0x38
 800703c:	2300      	movs	r3, #0
 800703e:	9314      	str	r3, [sp, #80]	; 0x50
 8007040:	e7c7      	b.n	8006fd2 <_dtoa_r+0x1ca>
 8007042:	2300      	movs	r3, #0
 8007044:	930f      	str	r3, [sp, #60]	; 0x3c
 8007046:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007048:	2b00      	cmp	r3, #0
 800704a:	dc36      	bgt.n	80070ba <_dtoa_r+0x2b2>
 800704c:	2301      	movs	r3, #1
 800704e:	001a      	movs	r2, r3
 8007050:	930c      	str	r3, [sp, #48]	; 0x30
 8007052:	9306      	str	r3, [sp, #24]
 8007054:	9223      	str	r2, [sp, #140]	; 0x8c
 8007056:	e00d      	b.n	8007074 <_dtoa_r+0x26c>
 8007058:	2301      	movs	r3, #1
 800705a:	e7f3      	b.n	8007044 <_dtoa_r+0x23c>
 800705c:	2300      	movs	r3, #0
 800705e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007060:	930f      	str	r3, [sp, #60]	; 0x3c
 8007062:	4694      	mov	ip, r2
 8007064:	9b02      	ldr	r3, [sp, #8]
 8007066:	4463      	add	r3, ip
 8007068:	930c      	str	r3, [sp, #48]	; 0x30
 800706a:	3301      	adds	r3, #1
 800706c:	9306      	str	r3, [sp, #24]
 800706e:	2b00      	cmp	r3, #0
 8007070:	dc00      	bgt.n	8007074 <_dtoa_r+0x26c>
 8007072:	2301      	movs	r3, #1
 8007074:	2200      	movs	r2, #0
 8007076:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007078:	6042      	str	r2, [r0, #4]
 800707a:	3204      	adds	r2, #4
 800707c:	0015      	movs	r5, r2
 800707e:	3514      	adds	r5, #20
 8007080:	6841      	ldr	r1, [r0, #4]
 8007082:	429d      	cmp	r5, r3
 8007084:	d91d      	bls.n	80070c2 <_dtoa_r+0x2ba>
 8007086:	0038      	movs	r0, r7
 8007088:	f001 f882 	bl	8008190 <_Balloc>
 800708c:	9005      	str	r0, [sp, #20]
 800708e:	2800      	cmp	r0, #0
 8007090:	d11b      	bne.n	80070ca <_dtoa_r+0x2c2>
 8007092:	21d5      	movs	r1, #213	; 0xd5
 8007094:	0002      	movs	r2, r0
 8007096:	4b3c      	ldr	r3, [pc, #240]	; (8007188 <_dtoa_r+0x380>)
 8007098:	0049      	lsls	r1, r1, #1
 800709a:	e6ca      	b.n	8006e32 <_dtoa_r+0x2a>
 800709c:	2301      	movs	r3, #1
 800709e:	e7de      	b.n	800705e <_dtoa_r+0x256>
 80070a0:	2300      	movs	r3, #0
 80070a2:	940f      	str	r4, [sp, #60]	; 0x3c
 80070a4:	9322      	str	r3, [sp, #136]	; 0x88
 80070a6:	3b01      	subs	r3, #1
 80070a8:	930c      	str	r3, [sp, #48]	; 0x30
 80070aa:	9306      	str	r3, [sp, #24]
 80070ac:	2200      	movs	r2, #0
 80070ae:	3313      	adds	r3, #19
 80070b0:	e7d0      	b.n	8007054 <_dtoa_r+0x24c>
 80070b2:	2301      	movs	r3, #1
 80070b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80070b6:	3b02      	subs	r3, #2
 80070b8:	e7f6      	b.n	80070a8 <_dtoa_r+0x2a0>
 80070ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070bc:	930c      	str	r3, [sp, #48]	; 0x30
 80070be:	9306      	str	r3, [sp, #24]
 80070c0:	e7d8      	b.n	8007074 <_dtoa_r+0x26c>
 80070c2:	3101      	adds	r1, #1
 80070c4:	6041      	str	r1, [r0, #4]
 80070c6:	0052      	lsls	r2, r2, #1
 80070c8:	e7d8      	b.n	800707c <_dtoa_r+0x274>
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	9a05      	ldr	r2, [sp, #20]
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	9b06      	ldr	r3, [sp, #24]
 80070d2:	2b0e      	cmp	r3, #14
 80070d4:	d900      	bls.n	80070d8 <_dtoa_r+0x2d0>
 80070d6:	e0eb      	b.n	80072b0 <_dtoa_r+0x4a8>
 80070d8:	2c00      	cmp	r4, #0
 80070da:	d100      	bne.n	80070de <_dtoa_r+0x2d6>
 80070dc:	e0e8      	b.n	80072b0 <_dtoa_r+0x4a8>
 80070de:	9b02      	ldr	r3, [sp, #8]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	dd68      	ble.n	80071b6 <_dtoa_r+0x3ae>
 80070e4:	001a      	movs	r2, r3
 80070e6:	210f      	movs	r1, #15
 80070e8:	4b23      	ldr	r3, [pc, #140]	; (8007178 <_dtoa_r+0x370>)
 80070ea:	400a      	ands	r2, r1
 80070ec:	00d2      	lsls	r2, r2, #3
 80070ee:	189b      	adds	r3, r3, r2
 80070f0:	681d      	ldr	r5, [r3, #0]
 80070f2:	685e      	ldr	r6, [r3, #4]
 80070f4:	9b02      	ldr	r3, [sp, #8]
 80070f6:	111c      	asrs	r4, r3, #4
 80070f8:	2302      	movs	r3, #2
 80070fa:	9310      	str	r3, [sp, #64]	; 0x40
 80070fc:	9b02      	ldr	r3, [sp, #8]
 80070fe:	05db      	lsls	r3, r3, #23
 8007100:	d50b      	bpl.n	800711a <_dtoa_r+0x312>
 8007102:	4b22      	ldr	r3, [pc, #136]	; (800718c <_dtoa_r+0x384>)
 8007104:	400c      	ands	r4, r1
 8007106:	6a1a      	ldr	r2, [r3, #32]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800710c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800710e:	f7f9 fda3 	bl	8000c58 <__aeabi_ddiv>
 8007112:	2303      	movs	r3, #3
 8007114:	900a      	str	r0, [sp, #40]	; 0x28
 8007116:	910b      	str	r1, [sp, #44]	; 0x2c
 8007118:	9310      	str	r3, [sp, #64]	; 0x40
 800711a:	4b1c      	ldr	r3, [pc, #112]	; (800718c <_dtoa_r+0x384>)
 800711c:	9307      	str	r3, [sp, #28]
 800711e:	2c00      	cmp	r4, #0
 8007120:	d136      	bne.n	8007190 <_dtoa_r+0x388>
 8007122:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007124:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007126:	002a      	movs	r2, r5
 8007128:	0033      	movs	r3, r6
 800712a:	f7f9 fd95 	bl	8000c58 <__aeabi_ddiv>
 800712e:	900a      	str	r0, [sp, #40]	; 0x28
 8007130:	910b      	str	r1, [sp, #44]	; 0x2c
 8007132:	e05c      	b.n	80071ee <_dtoa_r+0x3e6>
 8007134:	08009e2e 	.word	0x08009e2e
 8007138:	08009e45 	.word	0x08009e45
 800713c:	7ff00000 	.word	0x7ff00000
 8007140:	0000270f 	.word	0x0000270f
 8007144:	08009e2a 	.word	0x08009e2a
 8007148:	08009e2d 	.word	0x08009e2d
 800714c:	08009ca4 	.word	0x08009ca4
 8007150:	08009ca5 	.word	0x08009ca5
 8007154:	3ff00000 	.word	0x3ff00000
 8007158:	fffffc01 	.word	0xfffffc01
 800715c:	3ff80000 	.word	0x3ff80000
 8007160:	636f4361 	.word	0x636f4361
 8007164:	3fd287a7 	.word	0x3fd287a7
 8007168:	8b60c8b3 	.word	0x8b60c8b3
 800716c:	3fc68a28 	.word	0x3fc68a28
 8007170:	509f79fb 	.word	0x509f79fb
 8007174:	3fd34413 	.word	0x3fd34413
 8007178:	08009fc0 	.word	0x08009fc0
 800717c:	00000432 	.word	0x00000432
 8007180:	00000412 	.word	0x00000412
 8007184:	fe100000 	.word	0xfe100000
 8007188:	08009ea4 	.word	0x08009ea4
 800718c:	08009f98 	.word	0x08009f98
 8007190:	2301      	movs	r3, #1
 8007192:	421c      	tst	r4, r3
 8007194:	d00b      	beq.n	80071ae <_dtoa_r+0x3a6>
 8007196:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007198:	0028      	movs	r0, r5
 800719a:	3301      	adds	r3, #1
 800719c:	9310      	str	r3, [sp, #64]	; 0x40
 800719e:	9b07      	ldr	r3, [sp, #28]
 80071a0:	0031      	movs	r1, r6
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f7fa f95d 	bl	8001464 <__aeabi_dmul>
 80071aa:	0005      	movs	r5, r0
 80071ac:	000e      	movs	r6, r1
 80071ae:	9b07      	ldr	r3, [sp, #28]
 80071b0:	1064      	asrs	r4, r4, #1
 80071b2:	3308      	adds	r3, #8
 80071b4:	e7b2      	b.n	800711c <_dtoa_r+0x314>
 80071b6:	2302      	movs	r3, #2
 80071b8:	9310      	str	r3, [sp, #64]	; 0x40
 80071ba:	9b02      	ldr	r3, [sp, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d016      	beq.n	80071ee <_dtoa_r+0x3e6>
 80071c0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80071c2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80071c4:	425c      	negs	r4, r3
 80071c6:	230f      	movs	r3, #15
 80071c8:	4ab5      	ldr	r2, [pc, #724]	; (80074a0 <_dtoa_r+0x698>)
 80071ca:	4023      	ands	r3, r4
 80071cc:	00db      	lsls	r3, r3, #3
 80071ce:	18d3      	adds	r3, r2, r3
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f7fa f946 	bl	8001464 <__aeabi_dmul>
 80071d8:	2601      	movs	r6, #1
 80071da:	2300      	movs	r3, #0
 80071dc:	900a      	str	r0, [sp, #40]	; 0x28
 80071de:	910b      	str	r1, [sp, #44]	; 0x2c
 80071e0:	4db0      	ldr	r5, [pc, #704]	; (80074a4 <_dtoa_r+0x69c>)
 80071e2:	1124      	asrs	r4, r4, #4
 80071e4:	2c00      	cmp	r4, #0
 80071e6:	d000      	beq.n	80071ea <_dtoa_r+0x3e2>
 80071e8:	e094      	b.n	8007314 <_dtoa_r+0x50c>
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d19f      	bne.n	800712e <_dtoa_r+0x326>
 80071ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d100      	bne.n	80071f6 <_dtoa_r+0x3ee>
 80071f4:	e09b      	b.n	800732e <_dtoa_r+0x526>
 80071f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80071f8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80071fa:	2200      	movs	r2, #0
 80071fc:	0020      	movs	r0, r4
 80071fe:	0029      	movs	r1, r5
 8007200:	4ba9      	ldr	r3, [pc, #676]	; (80074a8 <_dtoa_r+0x6a0>)
 8007202:	f7f9 f927 	bl	8000454 <__aeabi_dcmplt>
 8007206:	2800      	cmp	r0, #0
 8007208:	d100      	bne.n	800720c <_dtoa_r+0x404>
 800720a:	e090      	b.n	800732e <_dtoa_r+0x526>
 800720c:	9b06      	ldr	r3, [sp, #24]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d100      	bne.n	8007214 <_dtoa_r+0x40c>
 8007212:	e08c      	b.n	800732e <_dtoa_r+0x526>
 8007214:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007216:	2b00      	cmp	r3, #0
 8007218:	dd46      	ble.n	80072a8 <_dtoa_r+0x4a0>
 800721a:	9b02      	ldr	r3, [sp, #8]
 800721c:	2200      	movs	r2, #0
 800721e:	0020      	movs	r0, r4
 8007220:	0029      	movs	r1, r5
 8007222:	1e5e      	subs	r6, r3, #1
 8007224:	4ba1      	ldr	r3, [pc, #644]	; (80074ac <_dtoa_r+0x6a4>)
 8007226:	f7fa f91d 	bl	8001464 <__aeabi_dmul>
 800722a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800722c:	900a      	str	r0, [sp, #40]	; 0x28
 800722e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007230:	3301      	adds	r3, #1
 8007232:	9310      	str	r3, [sp, #64]	; 0x40
 8007234:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007236:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007238:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800723a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800723c:	9307      	str	r3, [sp, #28]
 800723e:	f7fa ff63 	bl	8002108 <__aeabi_i2d>
 8007242:	0022      	movs	r2, r4
 8007244:	002b      	movs	r3, r5
 8007246:	f7fa f90d 	bl	8001464 <__aeabi_dmul>
 800724a:	2200      	movs	r2, #0
 800724c:	4b98      	ldr	r3, [pc, #608]	; (80074b0 <_dtoa_r+0x6a8>)
 800724e:	f7f9 f999 	bl	8000584 <__aeabi_dadd>
 8007252:	9010      	str	r0, [sp, #64]	; 0x40
 8007254:	9111      	str	r1, [sp, #68]	; 0x44
 8007256:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007258:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800725a:	920a      	str	r2, [sp, #40]	; 0x28
 800725c:	930b      	str	r3, [sp, #44]	; 0x2c
 800725e:	4a95      	ldr	r2, [pc, #596]	; (80074b4 <_dtoa_r+0x6ac>)
 8007260:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007262:	4694      	mov	ip, r2
 8007264:	4463      	add	r3, ip
 8007266:	9317      	str	r3, [sp, #92]	; 0x5c
 8007268:	930b      	str	r3, [sp, #44]	; 0x2c
 800726a:	9b07      	ldr	r3, [sp, #28]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d161      	bne.n	8007334 <_dtoa_r+0x52c>
 8007270:	2200      	movs	r2, #0
 8007272:	0020      	movs	r0, r4
 8007274:	0029      	movs	r1, r5
 8007276:	4b90      	ldr	r3, [pc, #576]	; (80074b8 <_dtoa_r+0x6b0>)
 8007278:	f7fa fb60 	bl	800193c <__aeabi_dsub>
 800727c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800727e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007280:	0004      	movs	r4, r0
 8007282:	000d      	movs	r5, r1
 8007284:	f7f9 f8fa 	bl	800047c <__aeabi_dcmpgt>
 8007288:	2800      	cmp	r0, #0
 800728a:	d000      	beq.n	800728e <_dtoa_r+0x486>
 800728c:	e2b5      	b.n	80077fa <_dtoa_r+0x9f2>
 800728e:	488b      	ldr	r0, [pc, #556]	; (80074bc <_dtoa_r+0x6b4>)
 8007290:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007292:	4684      	mov	ip, r0
 8007294:	4461      	add	r1, ip
 8007296:	000b      	movs	r3, r1
 8007298:	0020      	movs	r0, r4
 800729a:	0029      	movs	r1, r5
 800729c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800729e:	f7f9 f8d9 	bl	8000454 <__aeabi_dcmplt>
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d000      	beq.n	80072a8 <_dtoa_r+0x4a0>
 80072a6:	e2a5      	b.n	80077f4 <_dtoa_r+0x9ec>
 80072a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072aa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80072ac:	930a      	str	r3, [sp, #40]	; 0x28
 80072ae:	940b      	str	r4, [sp, #44]	; 0x2c
 80072b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	da00      	bge.n	80072b8 <_dtoa_r+0x4b0>
 80072b6:	e171      	b.n	800759c <_dtoa_r+0x794>
 80072b8:	9a02      	ldr	r2, [sp, #8]
 80072ba:	2a0e      	cmp	r2, #14
 80072bc:	dd00      	ble.n	80072c0 <_dtoa_r+0x4b8>
 80072be:	e16d      	b.n	800759c <_dtoa_r+0x794>
 80072c0:	4b77      	ldr	r3, [pc, #476]	; (80074a0 <_dtoa_r+0x698>)
 80072c2:	00d2      	lsls	r2, r2, #3
 80072c4:	189b      	adds	r3, r3, r2
 80072c6:	685c      	ldr	r4, [r3, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	9308      	str	r3, [sp, #32]
 80072cc:	9409      	str	r4, [sp, #36]	; 0x24
 80072ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	db00      	blt.n	80072d6 <_dtoa_r+0x4ce>
 80072d4:	e0f6      	b.n	80074c4 <_dtoa_r+0x6bc>
 80072d6:	9b06      	ldr	r3, [sp, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	dd00      	ble.n	80072de <_dtoa_r+0x4d6>
 80072dc:	e0f2      	b.n	80074c4 <_dtoa_r+0x6bc>
 80072de:	d000      	beq.n	80072e2 <_dtoa_r+0x4da>
 80072e0:	e288      	b.n	80077f4 <_dtoa_r+0x9ec>
 80072e2:	9808      	ldr	r0, [sp, #32]
 80072e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072e6:	2200      	movs	r2, #0
 80072e8:	4b73      	ldr	r3, [pc, #460]	; (80074b8 <_dtoa_r+0x6b0>)
 80072ea:	f7fa f8bb 	bl	8001464 <__aeabi_dmul>
 80072ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072f2:	f7f9 f8cd 	bl	8000490 <__aeabi_dcmpge>
 80072f6:	9e06      	ldr	r6, [sp, #24]
 80072f8:	0035      	movs	r5, r6
 80072fa:	2800      	cmp	r0, #0
 80072fc:	d000      	beq.n	8007300 <_dtoa_r+0x4f8>
 80072fe:	e25f      	b.n	80077c0 <_dtoa_r+0x9b8>
 8007300:	9b05      	ldr	r3, [sp, #20]
 8007302:	9a05      	ldr	r2, [sp, #20]
 8007304:	3301      	adds	r3, #1
 8007306:	9307      	str	r3, [sp, #28]
 8007308:	2331      	movs	r3, #49	; 0x31
 800730a:	7013      	strb	r3, [r2, #0]
 800730c:	9b02      	ldr	r3, [sp, #8]
 800730e:	3301      	adds	r3, #1
 8007310:	9302      	str	r3, [sp, #8]
 8007312:	e25a      	b.n	80077ca <_dtoa_r+0x9c2>
 8007314:	4234      	tst	r4, r6
 8007316:	d007      	beq.n	8007328 <_dtoa_r+0x520>
 8007318:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800731a:	3301      	adds	r3, #1
 800731c:	9310      	str	r3, [sp, #64]	; 0x40
 800731e:	682a      	ldr	r2, [r5, #0]
 8007320:	686b      	ldr	r3, [r5, #4]
 8007322:	f7fa f89f 	bl	8001464 <__aeabi_dmul>
 8007326:	0033      	movs	r3, r6
 8007328:	1064      	asrs	r4, r4, #1
 800732a:	3508      	adds	r5, #8
 800732c:	e75a      	b.n	80071e4 <_dtoa_r+0x3dc>
 800732e:	9e02      	ldr	r6, [sp, #8]
 8007330:	9b06      	ldr	r3, [sp, #24]
 8007332:	e780      	b.n	8007236 <_dtoa_r+0x42e>
 8007334:	9b07      	ldr	r3, [sp, #28]
 8007336:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007338:	1e5a      	subs	r2, r3, #1
 800733a:	4b59      	ldr	r3, [pc, #356]	; (80074a0 <_dtoa_r+0x698>)
 800733c:	00d2      	lsls	r2, r2, #3
 800733e:	189b      	adds	r3, r3, r2
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	2900      	cmp	r1, #0
 8007346:	d051      	beq.n	80073ec <_dtoa_r+0x5e4>
 8007348:	2000      	movs	r0, #0
 800734a:	495d      	ldr	r1, [pc, #372]	; (80074c0 <_dtoa_r+0x6b8>)
 800734c:	f7f9 fc84 	bl	8000c58 <__aeabi_ddiv>
 8007350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007354:	f7fa faf2 	bl	800193c <__aeabi_dsub>
 8007358:	9a05      	ldr	r2, [sp, #20]
 800735a:	9b05      	ldr	r3, [sp, #20]
 800735c:	4694      	mov	ip, r2
 800735e:	9310      	str	r3, [sp, #64]	; 0x40
 8007360:	9b07      	ldr	r3, [sp, #28]
 8007362:	900a      	str	r0, [sp, #40]	; 0x28
 8007364:	910b      	str	r1, [sp, #44]	; 0x2c
 8007366:	4463      	add	r3, ip
 8007368:	9319      	str	r3, [sp, #100]	; 0x64
 800736a:	0029      	movs	r1, r5
 800736c:	0020      	movs	r0, r4
 800736e:	f7fa fe95 	bl	800209c <__aeabi_d2iz>
 8007372:	9017      	str	r0, [sp, #92]	; 0x5c
 8007374:	f7fa fec8 	bl	8002108 <__aeabi_i2d>
 8007378:	0002      	movs	r2, r0
 800737a:	000b      	movs	r3, r1
 800737c:	0020      	movs	r0, r4
 800737e:	0029      	movs	r1, r5
 8007380:	f7fa fadc 	bl	800193c <__aeabi_dsub>
 8007384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007386:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007388:	3301      	adds	r3, #1
 800738a:	9307      	str	r3, [sp, #28]
 800738c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800738e:	0004      	movs	r4, r0
 8007390:	3330      	adds	r3, #48	; 0x30
 8007392:	7013      	strb	r3, [r2, #0]
 8007394:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007398:	000d      	movs	r5, r1
 800739a:	f7f9 f85b 	bl	8000454 <__aeabi_dcmplt>
 800739e:	2800      	cmp	r0, #0
 80073a0:	d175      	bne.n	800748e <_dtoa_r+0x686>
 80073a2:	0022      	movs	r2, r4
 80073a4:	002b      	movs	r3, r5
 80073a6:	2000      	movs	r0, #0
 80073a8:	493f      	ldr	r1, [pc, #252]	; (80074a8 <_dtoa_r+0x6a0>)
 80073aa:	f7fa fac7 	bl	800193c <__aeabi_dsub>
 80073ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073b2:	f7f9 f84f 	bl	8000454 <__aeabi_dcmplt>
 80073b6:	2800      	cmp	r0, #0
 80073b8:	d000      	beq.n	80073bc <_dtoa_r+0x5b4>
 80073ba:	e0d1      	b.n	8007560 <_dtoa_r+0x758>
 80073bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073be:	9a07      	ldr	r2, [sp, #28]
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d100      	bne.n	80073c6 <_dtoa_r+0x5be>
 80073c4:	e770      	b.n	80072a8 <_dtoa_r+0x4a0>
 80073c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80073c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073ca:	2200      	movs	r2, #0
 80073cc:	4b37      	ldr	r3, [pc, #220]	; (80074ac <_dtoa_r+0x6a4>)
 80073ce:	f7fa f849 	bl	8001464 <__aeabi_dmul>
 80073d2:	4b36      	ldr	r3, [pc, #216]	; (80074ac <_dtoa_r+0x6a4>)
 80073d4:	900a      	str	r0, [sp, #40]	; 0x28
 80073d6:	910b      	str	r1, [sp, #44]	; 0x2c
 80073d8:	2200      	movs	r2, #0
 80073da:	0020      	movs	r0, r4
 80073dc:	0029      	movs	r1, r5
 80073de:	f7fa f841 	bl	8001464 <__aeabi_dmul>
 80073e2:	9b07      	ldr	r3, [sp, #28]
 80073e4:	0004      	movs	r4, r0
 80073e6:	000d      	movs	r5, r1
 80073e8:	9310      	str	r3, [sp, #64]	; 0x40
 80073ea:	e7be      	b.n	800736a <_dtoa_r+0x562>
 80073ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80073ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073f0:	f7fa f838 	bl	8001464 <__aeabi_dmul>
 80073f4:	9a05      	ldr	r2, [sp, #20]
 80073f6:	9b05      	ldr	r3, [sp, #20]
 80073f8:	4694      	mov	ip, r2
 80073fa:	930a      	str	r3, [sp, #40]	; 0x28
 80073fc:	9b07      	ldr	r3, [sp, #28]
 80073fe:	9010      	str	r0, [sp, #64]	; 0x40
 8007400:	9111      	str	r1, [sp, #68]	; 0x44
 8007402:	4463      	add	r3, ip
 8007404:	9319      	str	r3, [sp, #100]	; 0x64
 8007406:	0029      	movs	r1, r5
 8007408:	0020      	movs	r0, r4
 800740a:	f7fa fe47 	bl	800209c <__aeabi_d2iz>
 800740e:	9017      	str	r0, [sp, #92]	; 0x5c
 8007410:	f7fa fe7a 	bl	8002108 <__aeabi_i2d>
 8007414:	0002      	movs	r2, r0
 8007416:	000b      	movs	r3, r1
 8007418:	0020      	movs	r0, r4
 800741a:	0029      	movs	r1, r5
 800741c:	f7fa fa8e 	bl	800193c <__aeabi_dsub>
 8007420:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007422:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007424:	3330      	adds	r3, #48	; 0x30
 8007426:	7013      	strb	r3, [r2, #0]
 8007428:	0013      	movs	r3, r2
 800742a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800742c:	3301      	adds	r3, #1
 800742e:	0004      	movs	r4, r0
 8007430:	000d      	movs	r5, r1
 8007432:	930a      	str	r3, [sp, #40]	; 0x28
 8007434:	4293      	cmp	r3, r2
 8007436:	d12c      	bne.n	8007492 <_dtoa_r+0x68a>
 8007438:	9810      	ldr	r0, [sp, #64]	; 0x40
 800743a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800743c:	9a05      	ldr	r2, [sp, #20]
 800743e:	9b07      	ldr	r3, [sp, #28]
 8007440:	4694      	mov	ip, r2
 8007442:	4463      	add	r3, ip
 8007444:	2200      	movs	r2, #0
 8007446:	9307      	str	r3, [sp, #28]
 8007448:	4b1d      	ldr	r3, [pc, #116]	; (80074c0 <_dtoa_r+0x6b8>)
 800744a:	f7f9 f89b 	bl	8000584 <__aeabi_dadd>
 800744e:	0002      	movs	r2, r0
 8007450:	000b      	movs	r3, r1
 8007452:	0020      	movs	r0, r4
 8007454:	0029      	movs	r1, r5
 8007456:	f7f9 f811 	bl	800047c <__aeabi_dcmpgt>
 800745a:	2800      	cmp	r0, #0
 800745c:	d000      	beq.n	8007460 <_dtoa_r+0x658>
 800745e:	e07f      	b.n	8007560 <_dtoa_r+0x758>
 8007460:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007462:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007464:	2000      	movs	r0, #0
 8007466:	4916      	ldr	r1, [pc, #88]	; (80074c0 <_dtoa_r+0x6b8>)
 8007468:	f7fa fa68 	bl	800193c <__aeabi_dsub>
 800746c:	0002      	movs	r2, r0
 800746e:	000b      	movs	r3, r1
 8007470:	0020      	movs	r0, r4
 8007472:	0029      	movs	r1, r5
 8007474:	f7f8 ffee 	bl	8000454 <__aeabi_dcmplt>
 8007478:	2800      	cmp	r0, #0
 800747a:	d100      	bne.n	800747e <_dtoa_r+0x676>
 800747c:	e714      	b.n	80072a8 <_dtoa_r+0x4a0>
 800747e:	9b07      	ldr	r3, [sp, #28]
 8007480:	001a      	movs	r2, r3
 8007482:	3a01      	subs	r2, #1
 8007484:	9207      	str	r2, [sp, #28]
 8007486:	7812      	ldrb	r2, [r2, #0]
 8007488:	2a30      	cmp	r2, #48	; 0x30
 800748a:	d0f8      	beq.n	800747e <_dtoa_r+0x676>
 800748c:	9307      	str	r3, [sp, #28]
 800748e:	9602      	str	r6, [sp, #8]
 8007490:	e054      	b.n	800753c <_dtoa_r+0x734>
 8007492:	2200      	movs	r2, #0
 8007494:	4b05      	ldr	r3, [pc, #20]	; (80074ac <_dtoa_r+0x6a4>)
 8007496:	f7f9 ffe5 	bl	8001464 <__aeabi_dmul>
 800749a:	0004      	movs	r4, r0
 800749c:	000d      	movs	r5, r1
 800749e:	e7b2      	b.n	8007406 <_dtoa_r+0x5fe>
 80074a0:	08009fc0 	.word	0x08009fc0
 80074a4:	08009f98 	.word	0x08009f98
 80074a8:	3ff00000 	.word	0x3ff00000
 80074ac:	40240000 	.word	0x40240000
 80074b0:	401c0000 	.word	0x401c0000
 80074b4:	fcc00000 	.word	0xfcc00000
 80074b8:	40140000 	.word	0x40140000
 80074bc:	7cc00000 	.word	0x7cc00000
 80074c0:	3fe00000 	.word	0x3fe00000
 80074c4:	9b06      	ldr	r3, [sp, #24]
 80074c6:	9e05      	ldr	r6, [sp, #20]
 80074c8:	3b01      	subs	r3, #1
 80074ca:	199b      	adds	r3, r3, r6
 80074cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80074ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80074d0:	930a      	str	r3, [sp, #40]	; 0x28
 80074d2:	9a08      	ldr	r2, [sp, #32]
 80074d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d6:	0020      	movs	r0, r4
 80074d8:	0029      	movs	r1, r5
 80074da:	f7f9 fbbd 	bl	8000c58 <__aeabi_ddiv>
 80074de:	f7fa fddd 	bl	800209c <__aeabi_d2iz>
 80074e2:	9006      	str	r0, [sp, #24]
 80074e4:	f7fa fe10 	bl	8002108 <__aeabi_i2d>
 80074e8:	9a08      	ldr	r2, [sp, #32]
 80074ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ec:	f7f9 ffba 	bl	8001464 <__aeabi_dmul>
 80074f0:	0002      	movs	r2, r0
 80074f2:	000b      	movs	r3, r1
 80074f4:	0020      	movs	r0, r4
 80074f6:	0029      	movs	r1, r5
 80074f8:	f7fa fa20 	bl	800193c <__aeabi_dsub>
 80074fc:	0033      	movs	r3, r6
 80074fe:	9a06      	ldr	r2, [sp, #24]
 8007500:	3601      	adds	r6, #1
 8007502:	3230      	adds	r2, #48	; 0x30
 8007504:	701a      	strb	r2, [r3, #0]
 8007506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007508:	9607      	str	r6, [sp, #28]
 800750a:	429a      	cmp	r2, r3
 800750c:	d139      	bne.n	8007582 <_dtoa_r+0x77a>
 800750e:	0002      	movs	r2, r0
 8007510:	000b      	movs	r3, r1
 8007512:	f7f9 f837 	bl	8000584 <__aeabi_dadd>
 8007516:	9a08      	ldr	r2, [sp, #32]
 8007518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800751a:	0004      	movs	r4, r0
 800751c:	000d      	movs	r5, r1
 800751e:	f7f8 ffad 	bl	800047c <__aeabi_dcmpgt>
 8007522:	2800      	cmp	r0, #0
 8007524:	d11b      	bne.n	800755e <_dtoa_r+0x756>
 8007526:	9a08      	ldr	r2, [sp, #32]
 8007528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800752a:	0020      	movs	r0, r4
 800752c:	0029      	movs	r1, r5
 800752e:	f7f8 ff8b 	bl	8000448 <__aeabi_dcmpeq>
 8007532:	2800      	cmp	r0, #0
 8007534:	d002      	beq.n	800753c <_dtoa_r+0x734>
 8007536:	9b06      	ldr	r3, [sp, #24]
 8007538:	07db      	lsls	r3, r3, #31
 800753a:	d410      	bmi.n	800755e <_dtoa_r+0x756>
 800753c:	0038      	movs	r0, r7
 800753e:	9904      	ldr	r1, [sp, #16]
 8007540:	f000 fe6a 	bl	8008218 <_Bfree>
 8007544:	2300      	movs	r3, #0
 8007546:	9a07      	ldr	r2, [sp, #28]
 8007548:	9802      	ldr	r0, [sp, #8]
 800754a:	7013      	strb	r3, [r2, #0]
 800754c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800754e:	3001      	adds	r0, #1
 8007550:	6018      	str	r0, [r3, #0]
 8007552:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007554:	2b00      	cmp	r3, #0
 8007556:	d100      	bne.n	800755a <_dtoa_r+0x752>
 8007558:	e4a3      	b.n	8006ea2 <_dtoa_r+0x9a>
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	e4a1      	b.n	8006ea2 <_dtoa_r+0x9a>
 800755e:	9e02      	ldr	r6, [sp, #8]
 8007560:	9b07      	ldr	r3, [sp, #28]
 8007562:	9307      	str	r3, [sp, #28]
 8007564:	3b01      	subs	r3, #1
 8007566:	781a      	ldrb	r2, [r3, #0]
 8007568:	2a39      	cmp	r2, #57	; 0x39
 800756a:	d106      	bne.n	800757a <_dtoa_r+0x772>
 800756c:	9a05      	ldr	r2, [sp, #20]
 800756e:	429a      	cmp	r2, r3
 8007570:	d1f7      	bne.n	8007562 <_dtoa_r+0x75a>
 8007572:	2230      	movs	r2, #48	; 0x30
 8007574:	9905      	ldr	r1, [sp, #20]
 8007576:	3601      	adds	r6, #1
 8007578:	700a      	strb	r2, [r1, #0]
 800757a:	781a      	ldrb	r2, [r3, #0]
 800757c:	3201      	adds	r2, #1
 800757e:	701a      	strb	r2, [r3, #0]
 8007580:	e785      	b.n	800748e <_dtoa_r+0x686>
 8007582:	2200      	movs	r2, #0
 8007584:	4bad      	ldr	r3, [pc, #692]	; (800783c <_dtoa_r+0xa34>)
 8007586:	f7f9 ff6d 	bl	8001464 <__aeabi_dmul>
 800758a:	2200      	movs	r2, #0
 800758c:	2300      	movs	r3, #0
 800758e:	0004      	movs	r4, r0
 8007590:	000d      	movs	r5, r1
 8007592:	f7f8 ff59 	bl	8000448 <__aeabi_dcmpeq>
 8007596:	2800      	cmp	r0, #0
 8007598:	d09b      	beq.n	80074d2 <_dtoa_r+0x6ca>
 800759a:	e7cf      	b.n	800753c <_dtoa_r+0x734>
 800759c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800759e:	2a00      	cmp	r2, #0
 80075a0:	d100      	bne.n	80075a4 <_dtoa_r+0x79c>
 80075a2:	e082      	b.n	80076aa <_dtoa_r+0x8a2>
 80075a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80075a6:	2a01      	cmp	r2, #1
 80075a8:	dc66      	bgt.n	8007678 <_dtoa_r+0x870>
 80075aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80075ac:	2a00      	cmp	r2, #0
 80075ae:	d05f      	beq.n	8007670 <_dtoa_r+0x868>
 80075b0:	4aa3      	ldr	r2, [pc, #652]	; (8007840 <_dtoa_r+0xa38>)
 80075b2:	189b      	adds	r3, r3, r2
 80075b4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80075b6:	9c08      	ldr	r4, [sp, #32]
 80075b8:	9a08      	ldr	r2, [sp, #32]
 80075ba:	2101      	movs	r1, #1
 80075bc:	18d2      	adds	r2, r2, r3
 80075be:	9208      	str	r2, [sp, #32]
 80075c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075c2:	0038      	movs	r0, r7
 80075c4:	18d3      	adds	r3, r2, r3
 80075c6:	930d      	str	r3, [sp, #52]	; 0x34
 80075c8:	f000 ff22 	bl	8008410 <__i2b>
 80075cc:	0005      	movs	r5, r0
 80075ce:	2c00      	cmp	r4, #0
 80075d0:	dd0e      	ble.n	80075f0 <_dtoa_r+0x7e8>
 80075d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	dd0b      	ble.n	80075f0 <_dtoa_r+0x7e8>
 80075d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075da:	0023      	movs	r3, r4
 80075dc:	4294      	cmp	r4, r2
 80075de:	dd00      	ble.n	80075e2 <_dtoa_r+0x7da>
 80075e0:	0013      	movs	r3, r2
 80075e2:	9a08      	ldr	r2, [sp, #32]
 80075e4:	1ae4      	subs	r4, r4, r3
 80075e6:	1ad2      	subs	r2, r2, r3
 80075e8:	9208      	str	r2, [sp, #32]
 80075ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	930d      	str	r3, [sp, #52]	; 0x34
 80075f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d01f      	beq.n	8007636 <_dtoa_r+0x82e>
 80075f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d05a      	beq.n	80076b2 <_dtoa_r+0x8aa>
 80075fc:	2e00      	cmp	r6, #0
 80075fe:	dd11      	ble.n	8007624 <_dtoa_r+0x81c>
 8007600:	0029      	movs	r1, r5
 8007602:	0032      	movs	r2, r6
 8007604:	0038      	movs	r0, r7
 8007606:	f000 ffc9 	bl	800859c <__pow5mult>
 800760a:	9a04      	ldr	r2, [sp, #16]
 800760c:	0001      	movs	r1, r0
 800760e:	0005      	movs	r5, r0
 8007610:	0038      	movs	r0, r7
 8007612:	f000 ff13 	bl	800843c <__multiply>
 8007616:	9904      	ldr	r1, [sp, #16]
 8007618:	9007      	str	r0, [sp, #28]
 800761a:	0038      	movs	r0, r7
 800761c:	f000 fdfc 	bl	8008218 <_Bfree>
 8007620:	9b07      	ldr	r3, [sp, #28]
 8007622:	9304      	str	r3, [sp, #16]
 8007624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007626:	1b9a      	subs	r2, r3, r6
 8007628:	42b3      	cmp	r3, r6
 800762a:	d004      	beq.n	8007636 <_dtoa_r+0x82e>
 800762c:	0038      	movs	r0, r7
 800762e:	9904      	ldr	r1, [sp, #16]
 8007630:	f000 ffb4 	bl	800859c <__pow5mult>
 8007634:	9004      	str	r0, [sp, #16]
 8007636:	2101      	movs	r1, #1
 8007638:	0038      	movs	r0, r7
 800763a:	f000 fee9 	bl	8008410 <__i2b>
 800763e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007640:	0006      	movs	r6, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	dd37      	ble.n	80076b6 <_dtoa_r+0x8ae>
 8007646:	001a      	movs	r2, r3
 8007648:	0001      	movs	r1, r0
 800764a:	0038      	movs	r0, r7
 800764c:	f000 ffa6 	bl	800859c <__pow5mult>
 8007650:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007652:	0006      	movs	r6, r0
 8007654:	2b01      	cmp	r3, #1
 8007656:	dd33      	ble.n	80076c0 <_dtoa_r+0x8b8>
 8007658:	2300      	movs	r3, #0
 800765a:	9307      	str	r3, [sp, #28]
 800765c:	6933      	ldr	r3, [r6, #16]
 800765e:	3303      	adds	r3, #3
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	18f3      	adds	r3, r6, r3
 8007664:	6858      	ldr	r0, [r3, #4]
 8007666:	f000 fe8b 	bl	8008380 <__hi0bits>
 800766a:	2320      	movs	r3, #32
 800766c:	1a18      	subs	r0, r3, r0
 800766e:	e03f      	b.n	80076f0 <_dtoa_r+0x8e8>
 8007670:	2336      	movs	r3, #54	; 0x36
 8007672:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007674:	1a9b      	subs	r3, r3, r2
 8007676:	e79d      	b.n	80075b4 <_dtoa_r+0x7ac>
 8007678:	9b06      	ldr	r3, [sp, #24]
 800767a:	1e5e      	subs	r6, r3, #1
 800767c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800767e:	42b3      	cmp	r3, r6
 8007680:	db08      	blt.n	8007694 <_dtoa_r+0x88c>
 8007682:	1b9e      	subs	r6, r3, r6
 8007684:	9b06      	ldr	r3, [sp, #24]
 8007686:	2b00      	cmp	r3, #0
 8007688:	da0c      	bge.n	80076a4 <_dtoa_r+0x89c>
 800768a:	9b08      	ldr	r3, [sp, #32]
 800768c:	9a06      	ldr	r2, [sp, #24]
 800768e:	1a9c      	subs	r4, r3, r2
 8007690:	2300      	movs	r3, #0
 8007692:	e791      	b.n	80075b8 <_dtoa_r+0x7b0>
 8007694:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007696:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007698:	1af3      	subs	r3, r6, r3
 800769a:	18d3      	adds	r3, r2, r3
 800769c:	960e      	str	r6, [sp, #56]	; 0x38
 800769e:	9314      	str	r3, [sp, #80]	; 0x50
 80076a0:	2600      	movs	r6, #0
 80076a2:	e7ef      	b.n	8007684 <_dtoa_r+0x87c>
 80076a4:	9c08      	ldr	r4, [sp, #32]
 80076a6:	9b06      	ldr	r3, [sp, #24]
 80076a8:	e786      	b.n	80075b8 <_dtoa_r+0x7b0>
 80076aa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80076ac:	9c08      	ldr	r4, [sp, #32]
 80076ae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80076b0:	e78d      	b.n	80075ce <_dtoa_r+0x7c6>
 80076b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076b4:	e7ba      	b.n	800762c <_dtoa_r+0x824>
 80076b6:	2300      	movs	r3, #0
 80076b8:	9307      	str	r3, [sp, #28]
 80076ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076bc:	2b01      	cmp	r3, #1
 80076be:	dc13      	bgt.n	80076e8 <_dtoa_r+0x8e0>
 80076c0:	2300      	movs	r3, #0
 80076c2:	9307      	str	r3, [sp, #28]
 80076c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10e      	bne.n	80076e8 <_dtoa_r+0x8e0>
 80076ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076cc:	031b      	lsls	r3, r3, #12
 80076ce:	d10b      	bne.n	80076e8 <_dtoa_r+0x8e0>
 80076d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80076d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076d4:	4213      	tst	r3, r2
 80076d6:	d007      	beq.n	80076e8 <_dtoa_r+0x8e0>
 80076d8:	9b08      	ldr	r3, [sp, #32]
 80076da:	3301      	adds	r3, #1
 80076dc:	9308      	str	r3, [sp, #32]
 80076de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076e0:	3301      	adds	r3, #1
 80076e2:	930d      	str	r3, [sp, #52]	; 0x34
 80076e4:	2301      	movs	r3, #1
 80076e6:	9307      	str	r3, [sp, #28]
 80076e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076ea:	2001      	movs	r0, #1
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1b5      	bne.n	800765c <_dtoa_r+0x854>
 80076f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076f2:	221f      	movs	r2, #31
 80076f4:	1818      	adds	r0, r3, r0
 80076f6:	0003      	movs	r3, r0
 80076f8:	4013      	ands	r3, r2
 80076fa:	4210      	tst	r0, r2
 80076fc:	d046      	beq.n	800778c <_dtoa_r+0x984>
 80076fe:	3201      	adds	r2, #1
 8007700:	1ad2      	subs	r2, r2, r3
 8007702:	2a04      	cmp	r2, #4
 8007704:	dd3f      	ble.n	8007786 <_dtoa_r+0x97e>
 8007706:	221c      	movs	r2, #28
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	9a08      	ldr	r2, [sp, #32]
 800770c:	18e4      	adds	r4, r4, r3
 800770e:	18d2      	adds	r2, r2, r3
 8007710:	9208      	str	r2, [sp, #32]
 8007712:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007714:	18d3      	adds	r3, r2, r3
 8007716:	930d      	str	r3, [sp, #52]	; 0x34
 8007718:	9b08      	ldr	r3, [sp, #32]
 800771a:	2b00      	cmp	r3, #0
 800771c:	dd05      	ble.n	800772a <_dtoa_r+0x922>
 800771e:	001a      	movs	r2, r3
 8007720:	0038      	movs	r0, r7
 8007722:	9904      	ldr	r1, [sp, #16]
 8007724:	f000 ff96 	bl	8008654 <__lshift>
 8007728:	9004      	str	r0, [sp, #16]
 800772a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800772c:	2b00      	cmp	r3, #0
 800772e:	dd05      	ble.n	800773c <_dtoa_r+0x934>
 8007730:	0031      	movs	r1, r6
 8007732:	001a      	movs	r2, r3
 8007734:	0038      	movs	r0, r7
 8007736:	f000 ff8d 	bl	8008654 <__lshift>
 800773a:	0006      	movs	r6, r0
 800773c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800773e:	2b00      	cmp	r3, #0
 8007740:	d026      	beq.n	8007790 <_dtoa_r+0x988>
 8007742:	0031      	movs	r1, r6
 8007744:	9804      	ldr	r0, [sp, #16]
 8007746:	f000 fff5 	bl	8008734 <__mcmp>
 800774a:	2800      	cmp	r0, #0
 800774c:	da20      	bge.n	8007790 <_dtoa_r+0x988>
 800774e:	9b02      	ldr	r3, [sp, #8]
 8007750:	220a      	movs	r2, #10
 8007752:	3b01      	subs	r3, #1
 8007754:	9302      	str	r3, [sp, #8]
 8007756:	0038      	movs	r0, r7
 8007758:	2300      	movs	r3, #0
 800775a:	9904      	ldr	r1, [sp, #16]
 800775c:	f000 fd80 	bl	8008260 <__multadd>
 8007760:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007762:	9004      	str	r0, [sp, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d100      	bne.n	800776a <_dtoa_r+0x962>
 8007768:	e160      	b.n	8007a2c <_dtoa_r+0xc24>
 800776a:	2300      	movs	r3, #0
 800776c:	0029      	movs	r1, r5
 800776e:	220a      	movs	r2, #10
 8007770:	0038      	movs	r0, r7
 8007772:	f000 fd75 	bl	8008260 <__multadd>
 8007776:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007778:	0005      	movs	r5, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	dc47      	bgt.n	800780e <_dtoa_r+0xa06>
 800777e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007780:	2b02      	cmp	r3, #2
 8007782:	dc0d      	bgt.n	80077a0 <_dtoa_r+0x998>
 8007784:	e043      	b.n	800780e <_dtoa_r+0xa06>
 8007786:	2a04      	cmp	r2, #4
 8007788:	d0c6      	beq.n	8007718 <_dtoa_r+0x910>
 800778a:	0013      	movs	r3, r2
 800778c:	331c      	adds	r3, #28
 800778e:	e7bc      	b.n	800770a <_dtoa_r+0x902>
 8007790:	9b06      	ldr	r3, [sp, #24]
 8007792:	2b00      	cmp	r3, #0
 8007794:	dc35      	bgt.n	8007802 <_dtoa_r+0x9fa>
 8007796:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007798:	2b02      	cmp	r3, #2
 800779a:	dd32      	ble.n	8007802 <_dtoa_r+0x9fa>
 800779c:	9b06      	ldr	r3, [sp, #24]
 800779e:	930c      	str	r3, [sp, #48]	; 0x30
 80077a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10c      	bne.n	80077c0 <_dtoa_r+0x9b8>
 80077a6:	0031      	movs	r1, r6
 80077a8:	2205      	movs	r2, #5
 80077aa:	0038      	movs	r0, r7
 80077ac:	f000 fd58 	bl	8008260 <__multadd>
 80077b0:	0006      	movs	r6, r0
 80077b2:	0001      	movs	r1, r0
 80077b4:	9804      	ldr	r0, [sp, #16]
 80077b6:	f000 ffbd 	bl	8008734 <__mcmp>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	dd00      	ble.n	80077c0 <_dtoa_r+0x9b8>
 80077be:	e59f      	b.n	8007300 <_dtoa_r+0x4f8>
 80077c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077c2:	43db      	mvns	r3, r3
 80077c4:	9302      	str	r3, [sp, #8]
 80077c6:	9b05      	ldr	r3, [sp, #20]
 80077c8:	9307      	str	r3, [sp, #28]
 80077ca:	2400      	movs	r4, #0
 80077cc:	0031      	movs	r1, r6
 80077ce:	0038      	movs	r0, r7
 80077d0:	f000 fd22 	bl	8008218 <_Bfree>
 80077d4:	2d00      	cmp	r5, #0
 80077d6:	d100      	bne.n	80077da <_dtoa_r+0x9d2>
 80077d8:	e6b0      	b.n	800753c <_dtoa_r+0x734>
 80077da:	2c00      	cmp	r4, #0
 80077dc:	d005      	beq.n	80077ea <_dtoa_r+0x9e2>
 80077de:	42ac      	cmp	r4, r5
 80077e0:	d003      	beq.n	80077ea <_dtoa_r+0x9e2>
 80077e2:	0021      	movs	r1, r4
 80077e4:	0038      	movs	r0, r7
 80077e6:	f000 fd17 	bl	8008218 <_Bfree>
 80077ea:	0029      	movs	r1, r5
 80077ec:	0038      	movs	r0, r7
 80077ee:	f000 fd13 	bl	8008218 <_Bfree>
 80077f2:	e6a3      	b.n	800753c <_dtoa_r+0x734>
 80077f4:	2600      	movs	r6, #0
 80077f6:	0035      	movs	r5, r6
 80077f8:	e7e2      	b.n	80077c0 <_dtoa_r+0x9b8>
 80077fa:	9602      	str	r6, [sp, #8]
 80077fc:	9e07      	ldr	r6, [sp, #28]
 80077fe:	0035      	movs	r5, r6
 8007800:	e57e      	b.n	8007300 <_dtoa_r+0x4f8>
 8007802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007804:	2b00      	cmp	r3, #0
 8007806:	d100      	bne.n	800780a <_dtoa_r+0xa02>
 8007808:	e0c8      	b.n	800799c <_dtoa_r+0xb94>
 800780a:	9b06      	ldr	r3, [sp, #24]
 800780c:	930c      	str	r3, [sp, #48]	; 0x30
 800780e:	2c00      	cmp	r4, #0
 8007810:	dd05      	ble.n	800781e <_dtoa_r+0xa16>
 8007812:	0029      	movs	r1, r5
 8007814:	0022      	movs	r2, r4
 8007816:	0038      	movs	r0, r7
 8007818:	f000 ff1c 	bl	8008654 <__lshift>
 800781c:	0005      	movs	r5, r0
 800781e:	9b07      	ldr	r3, [sp, #28]
 8007820:	0028      	movs	r0, r5
 8007822:	2b00      	cmp	r3, #0
 8007824:	d01f      	beq.n	8007866 <_dtoa_r+0xa5e>
 8007826:	0038      	movs	r0, r7
 8007828:	6869      	ldr	r1, [r5, #4]
 800782a:	f000 fcb1 	bl	8008190 <_Balloc>
 800782e:	1e04      	subs	r4, r0, #0
 8007830:	d10c      	bne.n	800784c <_dtoa_r+0xa44>
 8007832:	0002      	movs	r2, r0
 8007834:	4b03      	ldr	r3, [pc, #12]	; (8007844 <_dtoa_r+0xa3c>)
 8007836:	4904      	ldr	r1, [pc, #16]	; (8007848 <_dtoa_r+0xa40>)
 8007838:	f7ff fafb 	bl	8006e32 <_dtoa_r+0x2a>
 800783c:	40240000 	.word	0x40240000
 8007840:	00000433 	.word	0x00000433
 8007844:	08009ea4 	.word	0x08009ea4
 8007848:	000002ea 	.word	0x000002ea
 800784c:	0029      	movs	r1, r5
 800784e:	692b      	ldr	r3, [r5, #16]
 8007850:	310c      	adds	r1, #12
 8007852:	1c9a      	adds	r2, r3, #2
 8007854:	0092      	lsls	r2, r2, #2
 8007856:	300c      	adds	r0, #12
 8007858:	f000 fc91 	bl	800817e <memcpy>
 800785c:	2201      	movs	r2, #1
 800785e:	0021      	movs	r1, r4
 8007860:	0038      	movs	r0, r7
 8007862:	f000 fef7 	bl	8008654 <__lshift>
 8007866:	002c      	movs	r4, r5
 8007868:	0005      	movs	r5, r0
 800786a:	9b05      	ldr	r3, [sp, #20]
 800786c:	9308      	str	r3, [sp, #32]
 800786e:	0031      	movs	r1, r6
 8007870:	9804      	ldr	r0, [sp, #16]
 8007872:	f7ff fa3d 	bl	8006cf0 <quorem>
 8007876:	0003      	movs	r3, r0
 8007878:	0021      	movs	r1, r4
 800787a:	3330      	adds	r3, #48	; 0x30
 800787c:	900e      	str	r0, [sp, #56]	; 0x38
 800787e:	9804      	ldr	r0, [sp, #16]
 8007880:	9306      	str	r3, [sp, #24]
 8007882:	f000 ff57 	bl	8008734 <__mcmp>
 8007886:	002a      	movs	r2, r5
 8007888:	900f      	str	r0, [sp, #60]	; 0x3c
 800788a:	0031      	movs	r1, r6
 800788c:	0038      	movs	r0, r7
 800788e:	f000 ff6d 	bl	800876c <__mdiff>
 8007892:	68c3      	ldr	r3, [r0, #12]
 8007894:	9007      	str	r0, [sp, #28]
 8007896:	9310      	str	r3, [sp, #64]	; 0x40
 8007898:	2301      	movs	r3, #1
 800789a:	930d      	str	r3, [sp, #52]	; 0x34
 800789c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d104      	bne.n	80078ac <_dtoa_r+0xaa4>
 80078a2:	0001      	movs	r1, r0
 80078a4:	9804      	ldr	r0, [sp, #16]
 80078a6:	f000 ff45 	bl	8008734 <__mcmp>
 80078aa:	900d      	str	r0, [sp, #52]	; 0x34
 80078ac:	0038      	movs	r0, r7
 80078ae:	9907      	ldr	r1, [sp, #28]
 80078b0:	f000 fcb2 	bl	8008218 <_Bfree>
 80078b4:	2301      	movs	r3, #1
 80078b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80078b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078ba:	4018      	ands	r0, r3
 80078bc:	9b08      	ldr	r3, [sp, #32]
 80078be:	3301      	adds	r3, #1
 80078c0:	9307      	str	r3, [sp, #28]
 80078c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078c4:	4313      	orrs	r3, r2
 80078c6:	4303      	orrs	r3, r0
 80078c8:	d10c      	bne.n	80078e4 <_dtoa_r+0xadc>
 80078ca:	9b06      	ldr	r3, [sp, #24]
 80078cc:	2b39      	cmp	r3, #57	; 0x39
 80078ce:	d025      	beq.n	800791c <_dtoa_r+0xb14>
 80078d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	dd02      	ble.n	80078dc <_dtoa_r+0xad4>
 80078d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078d8:	3331      	adds	r3, #49	; 0x31
 80078da:	9306      	str	r3, [sp, #24]
 80078dc:	9b08      	ldr	r3, [sp, #32]
 80078de:	9a06      	ldr	r2, [sp, #24]
 80078e0:	701a      	strb	r2, [r3, #0]
 80078e2:	e773      	b.n	80077cc <_dtoa_r+0x9c4>
 80078e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	db03      	blt.n	80078f2 <_dtoa_r+0xaea>
 80078ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80078ec:	4313      	orrs	r3, r2
 80078ee:	4303      	orrs	r3, r0
 80078f0:	d11f      	bne.n	8007932 <_dtoa_r+0xb2a>
 80078f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	ddf1      	ble.n	80078dc <_dtoa_r+0xad4>
 80078f8:	9904      	ldr	r1, [sp, #16]
 80078fa:	2201      	movs	r2, #1
 80078fc:	0038      	movs	r0, r7
 80078fe:	f000 fea9 	bl	8008654 <__lshift>
 8007902:	0031      	movs	r1, r6
 8007904:	9004      	str	r0, [sp, #16]
 8007906:	f000 ff15 	bl	8008734 <__mcmp>
 800790a:	2800      	cmp	r0, #0
 800790c:	dc03      	bgt.n	8007916 <_dtoa_r+0xb0e>
 800790e:	d1e5      	bne.n	80078dc <_dtoa_r+0xad4>
 8007910:	9b06      	ldr	r3, [sp, #24]
 8007912:	07db      	lsls	r3, r3, #31
 8007914:	d5e2      	bpl.n	80078dc <_dtoa_r+0xad4>
 8007916:	9b06      	ldr	r3, [sp, #24]
 8007918:	2b39      	cmp	r3, #57	; 0x39
 800791a:	d1dc      	bne.n	80078d6 <_dtoa_r+0xace>
 800791c:	2339      	movs	r3, #57	; 0x39
 800791e:	9a08      	ldr	r2, [sp, #32]
 8007920:	7013      	strb	r3, [r2, #0]
 8007922:	9b07      	ldr	r3, [sp, #28]
 8007924:	9307      	str	r3, [sp, #28]
 8007926:	3b01      	subs	r3, #1
 8007928:	781a      	ldrb	r2, [r3, #0]
 800792a:	2a39      	cmp	r2, #57	; 0x39
 800792c:	d06c      	beq.n	8007a08 <_dtoa_r+0xc00>
 800792e:	3201      	adds	r2, #1
 8007930:	e7d6      	b.n	80078e0 <_dtoa_r+0xad8>
 8007932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007934:	2b00      	cmp	r3, #0
 8007936:	dd07      	ble.n	8007948 <_dtoa_r+0xb40>
 8007938:	9b06      	ldr	r3, [sp, #24]
 800793a:	2b39      	cmp	r3, #57	; 0x39
 800793c:	d0ee      	beq.n	800791c <_dtoa_r+0xb14>
 800793e:	9b06      	ldr	r3, [sp, #24]
 8007940:	9a08      	ldr	r2, [sp, #32]
 8007942:	3301      	adds	r3, #1
 8007944:	7013      	strb	r3, [r2, #0]
 8007946:	e741      	b.n	80077cc <_dtoa_r+0x9c4>
 8007948:	9b08      	ldr	r3, [sp, #32]
 800794a:	9a06      	ldr	r2, [sp, #24]
 800794c:	701a      	strb	r2, [r3, #0]
 800794e:	2301      	movs	r3, #1
 8007950:	9a05      	ldr	r2, [sp, #20]
 8007952:	1a9b      	subs	r3, r3, r2
 8007954:	9a08      	ldr	r2, [sp, #32]
 8007956:	189b      	adds	r3, r3, r2
 8007958:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800795a:	429a      	cmp	r2, r3
 800795c:	d03e      	beq.n	80079dc <_dtoa_r+0xbd4>
 800795e:	2300      	movs	r3, #0
 8007960:	220a      	movs	r2, #10
 8007962:	9904      	ldr	r1, [sp, #16]
 8007964:	0038      	movs	r0, r7
 8007966:	f000 fc7b 	bl	8008260 <__multadd>
 800796a:	2300      	movs	r3, #0
 800796c:	9004      	str	r0, [sp, #16]
 800796e:	220a      	movs	r2, #10
 8007970:	0021      	movs	r1, r4
 8007972:	0038      	movs	r0, r7
 8007974:	42ac      	cmp	r4, r5
 8007976:	d106      	bne.n	8007986 <_dtoa_r+0xb7e>
 8007978:	f000 fc72 	bl	8008260 <__multadd>
 800797c:	0004      	movs	r4, r0
 800797e:	0005      	movs	r5, r0
 8007980:	9b07      	ldr	r3, [sp, #28]
 8007982:	9308      	str	r3, [sp, #32]
 8007984:	e773      	b.n	800786e <_dtoa_r+0xa66>
 8007986:	f000 fc6b 	bl	8008260 <__multadd>
 800798a:	0029      	movs	r1, r5
 800798c:	0004      	movs	r4, r0
 800798e:	2300      	movs	r3, #0
 8007990:	220a      	movs	r2, #10
 8007992:	0038      	movs	r0, r7
 8007994:	f000 fc64 	bl	8008260 <__multadd>
 8007998:	0005      	movs	r5, r0
 800799a:	e7f1      	b.n	8007980 <_dtoa_r+0xb78>
 800799c:	9b06      	ldr	r3, [sp, #24]
 800799e:	930c      	str	r3, [sp, #48]	; 0x30
 80079a0:	2400      	movs	r4, #0
 80079a2:	0031      	movs	r1, r6
 80079a4:	9804      	ldr	r0, [sp, #16]
 80079a6:	f7ff f9a3 	bl	8006cf0 <quorem>
 80079aa:	9b05      	ldr	r3, [sp, #20]
 80079ac:	3030      	adds	r0, #48	; 0x30
 80079ae:	5518      	strb	r0, [r3, r4]
 80079b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079b2:	3401      	adds	r4, #1
 80079b4:	9006      	str	r0, [sp, #24]
 80079b6:	42a3      	cmp	r3, r4
 80079b8:	dd07      	ble.n	80079ca <_dtoa_r+0xbc2>
 80079ba:	2300      	movs	r3, #0
 80079bc:	220a      	movs	r2, #10
 80079be:	0038      	movs	r0, r7
 80079c0:	9904      	ldr	r1, [sp, #16]
 80079c2:	f000 fc4d 	bl	8008260 <__multadd>
 80079c6:	9004      	str	r0, [sp, #16]
 80079c8:	e7eb      	b.n	80079a2 <_dtoa_r+0xb9a>
 80079ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079cc:	2001      	movs	r0, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	dd00      	ble.n	80079d4 <_dtoa_r+0xbcc>
 80079d2:	0018      	movs	r0, r3
 80079d4:	2400      	movs	r4, #0
 80079d6:	9b05      	ldr	r3, [sp, #20]
 80079d8:	181b      	adds	r3, r3, r0
 80079da:	9307      	str	r3, [sp, #28]
 80079dc:	9904      	ldr	r1, [sp, #16]
 80079de:	2201      	movs	r2, #1
 80079e0:	0038      	movs	r0, r7
 80079e2:	f000 fe37 	bl	8008654 <__lshift>
 80079e6:	0031      	movs	r1, r6
 80079e8:	9004      	str	r0, [sp, #16]
 80079ea:	f000 fea3 	bl	8008734 <__mcmp>
 80079ee:	2800      	cmp	r0, #0
 80079f0:	dc97      	bgt.n	8007922 <_dtoa_r+0xb1a>
 80079f2:	d102      	bne.n	80079fa <_dtoa_r+0xbf2>
 80079f4:	9b06      	ldr	r3, [sp, #24]
 80079f6:	07db      	lsls	r3, r3, #31
 80079f8:	d493      	bmi.n	8007922 <_dtoa_r+0xb1a>
 80079fa:	9b07      	ldr	r3, [sp, #28]
 80079fc:	9307      	str	r3, [sp, #28]
 80079fe:	3b01      	subs	r3, #1
 8007a00:	781a      	ldrb	r2, [r3, #0]
 8007a02:	2a30      	cmp	r2, #48	; 0x30
 8007a04:	d0fa      	beq.n	80079fc <_dtoa_r+0xbf4>
 8007a06:	e6e1      	b.n	80077cc <_dtoa_r+0x9c4>
 8007a08:	9a05      	ldr	r2, [sp, #20]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d18a      	bne.n	8007924 <_dtoa_r+0xb1c>
 8007a0e:	9b02      	ldr	r3, [sp, #8]
 8007a10:	3301      	adds	r3, #1
 8007a12:	9302      	str	r3, [sp, #8]
 8007a14:	2331      	movs	r3, #49	; 0x31
 8007a16:	e795      	b.n	8007944 <_dtoa_r+0xb3c>
 8007a18:	4b08      	ldr	r3, [pc, #32]	; (8007a3c <_dtoa_r+0xc34>)
 8007a1a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007a1c:	9305      	str	r3, [sp, #20]
 8007a1e:	4b08      	ldr	r3, [pc, #32]	; (8007a40 <_dtoa_r+0xc38>)
 8007a20:	2a00      	cmp	r2, #0
 8007a22:	d001      	beq.n	8007a28 <_dtoa_r+0xc20>
 8007a24:	f7ff fa3b 	bl	8006e9e <_dtoa_r+0x96>
 8007a28:	f7ff fa3b 	bl	8006ea2 <_dtoa_r+0x9a>
 8007a2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	dcb6      	bgt.n	80079a0 <_dtoa_r+0xb98>
 8007a32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	dd00      	ble.n	8007a3a <_dtoa_r+0xc32>
 8007a38:	e6b2      	b.n	80077a0 <_dtoa_r+0x998>
 8007a3a:	e7b1      	b.n	80079a0 <_dtoa_r+0xb98>
 8007a3c:	08009e21 	.word	0x08009e21
 8007a40:	08009e29 	.word	0x08009e29

08007a44 <rshift>:
 8007a44:	0002      	movs	r2, r0
 8007a46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a48:	6907      	ldr	r7, [r0, #16]
 8007a4a:	3214      	adds	r2, #20
 8007a4c:	0013      	movs	r3, r2
 8007a4e:	b085      	sub	sp, #20
 8007a50:	114e      	asrs	r6, r1, #5
 8007a52:	42b7      	cmp	r7, r6
 8007a54:	dd31      	ble.n	8007aba <rshift+0x76>
 8007a56:	00b3      	lsls	r3, r6, #2
 8007a58:	18d3      	adds	r3, r2, r3
 8007a5a:	251f      	movs	r5, #31
 8007a5c:	9301      	str	r3, [sp, #4]
 8007a5e:	000b      	movs	r3, r1
 8007a60:	00bc      	lsls	r4, r7, #2
 8007a62:	402b      	ands	r3, r5
 8007a64:	1914      	adds	r4, r2, r4
 8007a66:	9302      	str	r3, [sp, #8]
 8007a68:	4229      	tst	r1, r5
 8007a6a:	d10c      	bne.n	8007a86 <rshift+0x42>
 8007a6c:	0015      	movs	r5, r2
 8007a6e:	9901      	ldr	r1, [sp, #4]
 8007a70:	428c      	cmp	r4, r1
 8007a72:	d838      	bhi.n	8007ae6 <rshift+0xa2>
 8007a74:	9901      	ldr	r1, [sp, #4]
 8007a76:	2300      	movs	r3, #0
 8007a78:	3903      	subs	r1, #3
 8007a7a:	428c      	cmp	r4, r1
 8007a7c:	d301      	bcc.n	8007a82 <rshift+0x3e>
 8007a7e:	1bbb      	subs	r3, r7, r6
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	18d3      	adds	r3, r2, r3
 8007a84:	e019      	b.n	8007aba <rshift+0x76>
 8007a86:	2120      	movs	r1, #32
 8007a88:	9b02      	ldr	r3, [sp, #8]
 8007a8a:	9d01      	ldr	r5, [sp, #4]
 8007a8c:	1acb      	subs	r3, r1, r3
 8007a8e:	9303      	str	r3, [sp, #12]
 8007a90:	cd02      	ldmia	r5!, {r1}
 8007a92:	9b02      	ldr	r3, [sp, #8]
 8007a94:	4694      	mov	ip, r2
 8007a96:	40d9      	lsrs	r1, r3
 8007a98:	9100      	str	r1, [sp, #0]
 8007a9a:	42ac      	cmp	r4, r5
 8007a9c:	d816      	bhi.n	8007acc <rshift+0x88>
 8007a9e:	9d01      	ldr	r5, [sp, #4]
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	3501      	adds	r5, #1
 8007aa4:	42ac      	cmp	r4, r5
 8007aa6:	d302      	bcc.n	8007aae <rshift+0x6a>
 8007aa8:	1bbb      	subs	r3, r7, r6
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	3b04      	subs	r3, #4
 8007aae:	9900      	ldr	r1, [sp, #0]
 8007ab0:	18d3      	adds	r3, r2, r3
 8007ab2:	6019      	str	r1, [r3, #0]
 8007ab4:	2900      	cmp	r1, #0
 8007ab6:	d000      	beq.n	8007aba <rshift+0x76>
 8007ab8:	3304      	adds	r3, #4
 8007aba:	1a99      	subs	r1, r3, r2
 8007abc:	1089      	asrs	r1, r1, #2
 8007abe:	6101      	str	r1, [r0, #16]
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d101      	bne.n	8007ac8 <rshift+0x84>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	6143      	str	r3, [r0, #20]
 8007ac8:	b005      	add	sp, #20
 8007aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007acc:	682b      	ldr	r3, [r5, #0]
 8007ace:	9903      	ldr	r1, [sp, #12]
 8007ad0:	408b      	lsls	r3, r1
 8007ad2:	9900      	ldr	r1, [sp, #0]
 8007ad4:	4319      	orrs	r1, r3
 8007ad6:	4663      	mov	r3, ip
 8007ad8:	c302      	stmia	r3!, {r1}
 8007ada:	469c      	mov	ip, r3
 8007adc:	cd02      	ldmia	r5!, {r1}
 8007ade:	9b02      	ldr	r3, [sp, #8]
 8007ae0:	40d9      	lsrs	r1, r3
 8007ae2:	9100      	str	r1, [sp, #0]
 8007ae4:	e7d9      	b.n	8007a9a <rshift+0x56>
 8007ae6:	c908      	ldmia	r1!, {r3}
 8007ae8:	c508      	stmia	r5!, {r3}
 8007aea:	e7c1      	b.n	8007a70 <rshift+0x2c>

08007aec <__hexdig_fun>:
 8007aec:	0002      	movs	r2, r0
 8007aee:	3a30      	subs	r2, #48	; 0x30
 8007af0:	0003      	movs	r3, r0
 8007af2:	2a09      	cmp	r2, #9
 8007af4:	d802      	bhi.n	8007afc <__hexdig_fun+0x10>
 8007af6:	3b20      	subs	r3, #32
 8007af8:	b2d8      	uxtb	r0, r3
 8007afa:	4770      	bx	lr
 8007afc:	0002      	movs	r2, r0
 8007afe:	3a61      	subs	r2, #97	; 0x61
 8007b00:	2a05      	cmp	r2, #5
 8007b02:	d801      	bhi.n	8007b08 <__hexdig_fun+0x1c>
 8007b04:	3b47      	subs	r3, #71	; 0x47
 8007b06:	e7f7      	b.n	8007af8 <__hexdig_fun+0xc>
 8007b08:	001a      	movs	r2, r3
 8007b0a:	3a41      	subs	r2, #65	; 0x41
 8007b0c:	2000      	movs	r0, #0
 8007b0e:	2a05      	cmp	r2, #5
 8007b10:	d8f3      	bhi.n	8007afa <__hexdig_fun+0xe>
 8007b12:	3b27      	subs	r3, #39	; 0x27
 8007b14:	e7f0      	b.n	8007af8 <__hexdig_fun+0xc>
	...

08007b18 <__gethex>:
 8007b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b1a:	b08d      	sub	sp, #52	; 0x34
 8007b1c:	930a      	str	r3, [sp, #40]	; 0x28
 8007b1e:	4bbd      	ldr	r3, [pc, #756]	; (8007e14 <__gethex+0x2fc>)
 8007b20:	9005      	str	r0, [sp, #20]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	9109      	str	r1, [sp, #36]	; 0x24
 8007b26:	0018      	movs	r0, r3
 8007b28:	9202      	str	r2, [sp, #8]
 8007b2a:	9307      	str	r3, [sp, #28]
 8007b2c:	f7f8 faea 	bl	8000104 <strlen>
 8007b30:	2202      	movs	r2, #2
 8007b32:	9b07      	ldr	r3, [sp, #28]
 8007b34:	4252      	negs	r2, r2
 8007b36:	181b      	adds	r3, r3, r0
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	9003      	str	r0, [sp, #12]
 8007b3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b42:	6819      	ldr	r1, [r3, #0]
 8007b44:	1c8b      	adds	r3, r1, #2
 8007b46:	1a52      	subs	r2, r2, r1
 8007b48:	18d1      	adds	r1, r2, r3
 8007b4a:	9301      	str	r3, [sp, #4]
 8007b4c:	9108      	str	r1, [sp, #32]
 8007b4e:	9901      	ldr	r1, [sp, #4]
 8007b50:	3301      	adds	r3, #1
 8007b52:	7808      	ldrb	r0, [r1, #0]
 8007b54:	2830      	cmp	r0, #48	; 0x30
 8007b56:	d0f7      	beq.n	8007b48 <__gethex+0x30>
 8007b58:	f7ff ffc8 	bl	8007aec <__hexdig_fun>
 8007b5c:	1e04      	subs	r4, r0, #0
 8007b5e:	d13e      	bne.n	8007bde <__gethex+0xc6>
 8007b60:	9a03      	ldr	r2, [sp, #12]
 8007b62:	9907      	ldr	r1, [sp, #28]
 8007b64:	9801      	ldr	r0, [sp, #4]
 8007b66:	f001 fa0d 	bl	8008f84 <strncmp>
 8007b6a:	1e07      	subs	r7, r0, #0
 8007b6c:	d000      	beq.n	8007b70 <__gethex+0x58>
 8007b6e:	e06f      	b.n	8007c50 <__gethex+0x138>
 8007b70:	9b01      	ldr	r3, [sp, #4]
 8007b72:	9a03      	ldr	r2, [sp, #12]
 8007b74:	5c98      	ldrb	r0, [r3, r2]
 8007b76:	189d      	adds	r5, r3, r2
 8007b78:	f7ff ffb8 	bl	8007aec <__hexdig_fun>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	9304      	str	r3, [sp, #16]
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d034      	beq.n	8007bee <__gethex+0xd6>
 8007b84:	9501      	str	r5, [sp, #4]
 8007b86:	9b01      	ldr	r3, [sp, #4]
 8007b88:	7818      	ldrb	r0, [r3, #0]
 8007b8a:	2830      	cmp	r0, #48	; 0x30
 8007b8c:	d009      	beq.n	8007ba2 <__gethex+0x8a>
 8007b8e:	f7ff ffad 	bl	8007aec <__hexdig_fun>
 8007b92:	4243      	negs	r3, r0
 8007b94:	4143      	adcs	r3, r0
 8007b96:	9304      	str	r3, [sp, #16]
 8007b98:	2301      	movs	r3, #1
 8007b9a:	002c      	movs	r4, r5
 8007b9c:	9308      	str	r3, [sp, #32]
 8007b9e:	9d01      	ldr	r5, [sp, #4]
 8007ba0:	e004      	b.n	8007bac <__gethex+0x94>
 8007ba2:	9b01      	ldr	r3, [sp, #4]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	9301      	str	r3, [sp, #4]
 8007ba8:	e7ed      	b.n	8007b86 <__gethex+0x6e>
 8007baa:	3501      	adds	r5, #1
 8007bac:	7828      	ldrb	r0, [r5, #0]
 8007bae:	f7ff ff9d 	bl	8007aec <__hexdig_fun>
 8007bb2:	1e07      	subs	r7, r0, #0
 8007bb4:	d1f9      	bne.n	8007baa <__gethex+0x92>
 8007bb6:	0028      	movs	r0, r5
 8007bb8:	9a03      	ldr	r2, [sp, #12]
 8007bba:	9907      	ldr	r1, [sp, #28]
 8007bbc:	f001 f9e2 	bl	8008f84 <strncmp>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	d112      	bne.n	8007bea <__gethex+0xd2>
 8007bc4:	2c00      	cmp	r4, #0
 8007bc6:	d107      	bne.n	8007bd8 <__gethex+0xc0>
 8007bc8:	9b03      	ldr	r3, [sp, #12]
 8007bca:	18ed      	adds	r5, r5, r3
 8007bcc:	002c      	movs	r4, r5
 8007bce:	7828      	ldrb	r0, [r5, #0]
 8007bd0:	f7ff ff8c 	bl	8007aec <__hexdig_fun>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d106      	bne.n	8007be6 <__gethex+0xce>
 8007bd8:	1b67      	subs	r7, r4, r5
 8007bda:	00bf      	lsls	r7, r7, #2
 8007bdc:	e007      	b.n	8007bee <__gethex+0xd6>
 8007bde:	2300      	movs	r3, #0
 8007be0:	001c      	movs	r4, r3
 8007be2:	9304      	str	r3, [sp, #16]
 8007be4:	e7db      	b.n	8007b9e <__gethex+0x86>
 8007be6:	3501      	adds	r5, #1
 8007be8:	e7f1      	b.n	8007bce <__gethex+0xb6>
 8007bea:	2c00      	cmp	r4, #0
 8007bec:	d1f4      	bne.n	8007bd8 <__gethex+0xc0>
 8007bee:	2220      	movs	r2, #32
 8007bf0:	782b      	ldrb	r3, [r5, #0]
 8007bf2:	002e      	movs	r6, r5
 8007bf4:	4393      	bics	r3, r2
 8007bf6:	2b50      	cmp	r3, #80	; 0x50
 8007bf8:	d11d      	bne.n	8007c36 <__gethex+0x11e>
 8007bfa:	786b      	ldrb	r3, [r5, #1]
 8007bfc:	2b2b      	cmp	r3, #43	; 0x2b
 8007bfe:	d02c      	beq.n	8007c5a <__gethex+0x142>
 8007c00:	2b2d      	cmp	r3, #45	; 0x2d
 8007c02:	d02e      	beq.n	8007c62 <__gethex+0x14a>
 8007c04:	2300      	movs	r3, #0
 8007c06:	1c6e      	adds	r6, r5, #1
 8007c08:	9306      	str	r3, [sp, #24]
 8007c0a:	7830      	ldrb	r0, [r6, #0]
 8007c0c:	f7ff ff6e 	bl	8007aec <__hexdig_fun>
 8007c10:	1e43      	subs	r3, r0, #1
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b18      	cmp	r3, #24
 8007c16:	d82b      	bhi.n	8007c70 <__gethex+0x158>
 8007c18:	3810      	subs	r0, #16
 8007c1a:	0004      	movs	r4, r0
 8007c1c:	7870      	ldrb	r0, [r6, #1]
 8007c1e:	f7ff ff65 	bl	8007aec <__hexdig_fun>
 8007c22:	1e43      	subs	r3, r0, #1
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	3601      	adds	r6, #1
 8007c28:	2b18      	cmp	r3, #24
 8007c2a:	d91c      	bls.n	8007c66 <__gethex+0x14e>
 8007c2c:	9b06      	ldr	r3, [sp, #24]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d000      	beq.n	8007c34 <__gethex+0x11c>
 8007c32:	4264      	negs	r4, r4
 8007c34:	193f      	adds	r7, r7, r4
 8007c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c38:	601e      	str	r6, [r3, #0]
 8007c3a:	9b04      	ldr	r3, [sp, #16]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d019      	beq.n	8007c74 <__gethex+0x15c>
 8007c40:	2600      	movs	r6, #0
 8007c42:	9b08      	ldr	r3, [sp, #32]
 8007c44:	42b3      	cmp	r3, r6
 8007c46:	d100      	bne.n	8007c4a <__gethex+0x132>
 8007c48:	3606      	adds	r6, #6
 8007c4a:	0030      	movs	r0, r6
 8007c4c:	b00d      	add	sp, #52	; 0x34
 8007c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c50:	2301      	movs	r3, #1
 8007c52:	0027      	movs	r7, r4
 8007c54:	9d01      	ldr	r5, [sp, #4]
 8007c56:	9304      	str	r3, [sp, #16]
 8007c58:	e7c9      	b.n	8007bee <__gethex+0xd6>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	9306      	str	r3, [sp, #24]
 8007c5e:	1cae      	adds	r6, r5, #2
 8007c60:	e7d3      	b.n	8007c0a <__gethex+0xf2>
 8007c62:	2301      	movs	r3, #1
 8007c64:	e7fa      	b.n	8007c5c <__gethex+0x144>
 8007c66:	230a      	movs	r3, #10
 8007c68:	435c      	muls	r4, r3
 8007c6a:	1824      	adds	r4, r4, r0
 8007c6c:	3c10      	subs	r4, #16
 8007c6e:	e7d5      	b.n	8007c1c <__gethex+0x104>
 8007c70:	002e      	movs	r6, r5
 8007c72:	e7e0      	b.n	8007c36 <__gethex+0x11e>
 8007c74:	9b01      	ldr	r3, [sp, #4]
 8007c76:	9904      	ldr	r1, [sp, #16]
 8007c78:	1aeb      	subs	r3, r5, r3
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	2b07      	cmp	r3, #7
 8007c7e:	dc0a      	bgt.n	8007c96 <__gethex+0x17e>
 8007c80:	9805      	ldr	r0, [sp, #20]
 8007c82:	f000 fa85 	bl	8008190 <_Balloc>
 8007c86:	1e04      	subs	r4, r0, #0
 8007c88:	d108      	bne.n	8007c9c <__gethex+0x184>
 8007c8a:	0002      	movs	r2, r0
 8007c8c:	21de      	movs	r1, #222	; 0xde
 8007c8e:	4b62      	ldr	r3, [pc, #392]	; (8007e18 <__gethex+0x300>)
 8007c90:	4862      	ldr	r0, [pc, #392]	; (8007e1c <__gethex+0x304>)
 8007c92:	f001 f995 	bl	8008fc0 <__assert_func>
 8007c96:	3101      	adds	r1, #1
 8007c98:	105b      	asrs	r3, r3, #1
 8007c9a:	e7ef      	b.n	8007c7c <__gethex+0x164>
 8007c9c:	0003      	movs	r3, r0
 8007c9e:	3314      	adds	r3, #20
 8007ca0:	9304      	str	r3, [sp, #16]
 8007ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	001e      	movs	r6, r3
 8007ca8:	9306      	str	r3, [sp, #24]
 8007caa:	9b01      	ldr	r3, [sp, #4]
 8007cac:	42ab      	cmp	r3, r5
 8007cae:	d340      	bcc.n	8007d32 <__gethex+0x21a>
 8007cb0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007cb2:	9b04      	ldr	r3, [sp, #16]
 8007cb4:	c540      	stmia	r5!, {r6}
 8007cb6:	1aed      	subs	r5, r5, r3
 8007cb8:	10ad      	asrs	r5, r5, #2
 8007cba:	0030      	movs	r0, r6
 8007cbc:	6125      	str	r5, [r4, #16]
 8007cbe:	f000 fb5f 	bl	8008380 <__hi0bits>
 8007cc2:	9b02      	ldr	r3, [sp, #8]
 8007cc4:	016d      	lsls	r5, r5, #5
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	1a2e      	subs	r6, r5, r0
 8007cca:	9301      	str	r3, [sp, #4]
 8007ccc:	429e      	cmp	r6, r3
 8007cce:	dd5a      	ble.n	8007d86 <__gethex+0x26e>
 8007cd0:	1af6      	subs	r6, r6, r3
 8007cd2:	0031      	movs	r1, r6
 8007cd4:	0020      	movs	r0, r4
 8007cd6:	f000 ff02 	bl	8008ade <__any_on>
 8007cda:	1e05      	subs	r5, r0, #0
 8007cdc:	d016      	beq.n	8007d0c <__gethex+0x1f4>
 8007cde:	2501      	movs	r5, #1
 8007ce0:	211f      	movs	r1, #31
 8007ce2:	0028      	movs	r0, r5
 8007ce4:	1e73      	subs	r3, r6, #1
 8007ce6:	4019      	ands	r1, r3
 8007ce8:	4088      	lsls	r0, r1
 8007cea:	0001      	movs	r1, r0
 8007cec:	115a      	asrs	r2, r3, #5
 8007cee:	9804      	ldr	r0, [sp, #16]
 8007cf0:	0092      	lsls	r2, r2, #2
 8007cf2:	5812      	ldr	r2, [r2, r0]
 8007cf4:	420a      	tst	r2, r1
 8007cf6:	d009      	beq.n	8007d0c <__gethex+0x1f4>
 8007cf8:	42ab      	cmp	r3, r5
 8007cfa:	dd06      	ble.n	8007d0a <__gethex+0x1f2>
 8007cfc:	0020      	movs	r0, r4
 8007cfe:	1eb1      	subs	r1, r6, #2
 8007d00:	f000 feed 	bl	8008ade <__any_on>
 8007d04:	3502      	adds	r5, #2
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d100      	bne.n	8007d0c <__gethex+0x1f4>
 8007d0a:	2502      	movs	r5, #2
 8007d0c:	0031      	movs	r1, r6
 8007d0e:	0020      	movs	r0, r4
 8007d10:	f7ff fe98 	bl	8007a44 <rshift>
 8007d14:	19bf      	adds	r7, r7, r6
 8007d16:	9b02      	ldr	r3, [sp, #8]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	9303      	str	r3, [sp, #12]
 8007d1c:	42bb      	cmp	r3, r7
 8007d1e:	da42      	bge.n	8007da6 <__gethex+0x28e>
 8007d20:	0021      	movs	r1, r4
 8007d22:	9805      	ldr	r0, [sp, #20]
 8007d24:	f000 fa78 	bl	8008218 <_Bfree>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d2c:	26a3      	movs	r6, #163	; 0xa3
 8007d2e:	6013      	str	r3, [r2, #0]
 8007d30:	e78b      	b.n	8007c4a <__gethex+0x132>
 8007d32:	1e6b      	subs	r3, r5, #1
 8007d34:	9308      	str	r3, [sp, #32]
 8007d36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d014      	beq.n	8007d68 <__gethex+0x250>
 8007d3e:	9b06      	ldr	r3, [sp, #24]
 8007d40:	2b20      	cmp	r3, #32
 8007d42:	d104      	bne.n	8007d4e <__gethex+0x236>
 8007d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d46:	c340      	stmia	r3!, {r6}
 8007d48:	2600      	movs	r6, #0
 8007d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d4c:	9606      	str	r6, [sp, #24]
 8007d4e:	9b08      	ldr	r3, [sp, #32]
 8007d50:	7818      	ldrb	r0, [r3, #0]
 8007d52:	f7ff fecb 	bl	8007aec <__hexdig_fun>
 8007d56:	230f      	movs	r3, #15
 8007d58:	4018      	ands	r0, r3
 8007d5a:	9b06      	ldr	r3, [sp, #24]
 8007d5c:	9d08      	ldr	r5, [sp, #32]
 8007d5e:	4098      	lsls	r0, r3
 8007d60:	3304      	adds	r3, #4
 8007d62:	4306      	orrs	r6, r0
 8007d64:	9306      	str	r3, [sp, #24]
 8007d66:	e7a0      	b.n	8007caa <__gethex+0x192>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	9a03      	ldr	r2, [sp, #12]
 8007d6c:	1a9d      	subs	r5, r3, r2
 8007d6e:	9b08      	ldr	r3, [sp, #32]
 8007d70:	195d      	adds	r5, r3, r5
 8007d72:	9b01      	ldr	r3, [sp, #4]
 8007d74:	429d      	cmp	r5, r3
 8007d76:	d3e2      	bcc.n	8007d3e <__gethex+0x226>
 8007d78:	0028      	movs	r0, r5
 8007d7a:	9907      	ldr	r1, [sp, #28]
 8007d7c:	f001 f902 	bl	8008f84 <strncmp>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d1dc      	bne.n	8007d3e <__gethex+0x226>
 8007d84:	e791      	b.n	8007caa <__gethex+0x192>
 8007d86:	9b01      	ldr	r3, [sp, #4]
 8007d88:	2500      	movs	r5, #0
 8007d8a:	429e      	cmp	r6, r3
 8007d8c:	dac3      	bge.n	8007d16 <__gethex+0x1fe>
 8007d8e:	1b9e      	subs	r6, r3, r6
 8007d90:	0021      	movs	r1, r4
 8007d92:	0032      	movs	r2, r6
 8007d94:	9805      	ldr	r0, [sp, #20]
 8007d96:	f000 fc5d 	bl	8008654 <__lshift>
 8007d9a:	0003      	movs	r3, r0
 8007d9c:	3314      	adds	r3, #20
 8007d9e:	0004      	movs	r4, r0
 8007da0:	1bbf      	subs	r7, r7, r6
 8007da2:	9304      	str	r3, [sp, #16]
 8007da4:	e7b7      	b.n	8007d16 <__gethex+0x1fe>
 8007da6:	9b02      	ldr	r3, [sp, #8]
 8007da8:	685e      	ldr	r6, [r3, #4]
 8007daa:	42be      	cmp	r6, r7
 8007dac:	dd71      	ble.n	8007e92 <__gethex+0x37a>
 8007dae:	9b01      	ldr	r3, [sp, #4]
 8007db0:	1bf6      	subs	r6, r6, r7
 8007db2:	42b3      	cmp	r3, r6
 8007db4:	dc38      	bgt.n	8007e28 <__gethex+0x310>
 8007db6:	9b02      	ldr	r3, [sp, #8]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d026      	beq.n	8007e0c <__gethex+0x2f4>
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d02e      	beq.n	8007e20 <__gethex+0x308>
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d119      	bne.n	8007dfa <__gethex+0x2e2>
 8007dc6:	9b01      	ldr	r3, [sp, #4]
 8007dc8:	42b3      	cmp	r3, r6
 8007dca:	d116      	bne.n	8007dfa <__gethex+0x2e2>
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d10d      	bne.n	8007dec <__gethex+0x2d4>
 8007dd0:	9b02      	ldr	r3, [sp, #8]
 8007dd2:	2662      	movs	r6, #98	; 0x62
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	9301      	str	r3, [sp, #4]
 8007dd8:	9a01      	ldr	r2, [sp, #4]
 8007dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	2301      	movs	r3, #1
 8007de0:	9a04      	ldr	r2, [sp, #16]
 8007de2:	6123      	str	r3, [r4, #16]
 8007de4:	6013      	str	r3, [r2, #0]
 8007de6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007de8:	601c      	str	r4, [r3, #0]
 8007dea:	e72e      	b.n	8007c4a <__gethex+0x132>
 8007dec:	9901      	ldr	r1, [sp, #4]
 8007dee:	0020      	movs	r0, r4
 8007df0:	3901      	subs	r1, #1
 8007df2:	f000 fe74 	bl	8008ade <__any_on>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d1ea      	bne.n	8007dd0 <__gethex+0x2b8>
 8007dfa:	0021      	movs	r1, r4
 8007dfc:	9805      	ldr	r0, [sp, #20]
 8007dfe:	f000 fa0b 	bl	8008218 <_Bfree>
 8007e02:	2300      	movs	r3, #0
 8007e04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e06:	2650      	movs	r6, #80	; 0x50
 8007e08:	6013      	str	r3, [r2, #0]
 8007e0a:	e71e      	b.n	8007c4a <__gethex+0x132>
 8007e0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1f3      	bne.n	8007dfa <__gethex+0x2e2>
 8007e12:	e7dd      	b.n	8007dd0 <__gethex+0x2b8>
 8007e14:	08009f20 	.word	0x08009f20
 8007e18:	08009ea4 	.word	0x08009ea4
 8007e1c:	08009eb5 	.word	0x08009eb5
 8007e20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1d4      	bne.n	8007dd0 <__gethex+0x2b8>
 8007e26:	e7e8      	b.n	8007dfa <__gethex+0x2e2>
 8007e28:	1e77      	subs	r7, r6, #1
 8007e2a:	2d00      	cmp	r5, #0
 8007e2c:	d12f      	bne.n	8007e8e <__gethex+0x376>
 8007e2e:	2f00      	cmp	r7, #0
 8007e30:	d004      	beq.n	8007e3c <__gethex+0x324>
 8007e32:	0039      	movs	r1, r7
 8007e34:	0020      	movs	r0, r4
 8007e36:	f000 fe52 	bl	8008ade <__any_on>
 8007e3a:	0005      	movs	r5, r0
 8007e3c:	231f      	movs	r3, #31
 8007e3e:	117a      	asrs	r2, r7, #5
 8007e40:	401f      	ands	r7, r3
 8007e42:	3b1e      	subs	r3, #30
 8007e44:	40bb      	lsls	r3, r7
 8007e46:	9904      	ldr	r1, [sp, #16]
 8007e48:	0092      	lsls	r2, r2, #2
 8007e4a:	5852      	ldr	r2, [r2, r1]
 8007e4c:	421a      	tst	r2, r3
 8007e4e:	d001      	beq.n	8007e54 <__gethex+0x33c>
 8007e50:	2302      	movs	r3, #2
 8007e52:	431d      	orrs	r5, r3
 8007e54:	9b01      	ldr	r3, [sp, #4]
 8007e56:	0031      	movs	r1, r6
 8007e58:	1b9b      	subs	r3, r3, r6
 8007e5a:	2602      	movs	r6, #2
 8007e5c:	0020      	movs	r0, r4
 8007e5e:	9301      	str	r3, [sp, #4]
 8007e60:	f7ff fdf0 	bl	8007a44 <rshift>
 8007e64:	9b02      	ldr	r3, [sp, #8]
 8007e66:	685f      	ldr	r7, [r3, #4]
 8007e68:	2d00      	cmp	r5, #0
 8007e6a:	d041      	beq.n	8007ef0 <__gethex+0x3d8>
 8007e6c:	9b02      	ldr	r3, [sp, #8]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d010      	beq.n	8007e96 <__gethex+0x37e>
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	d012      	beq.n	8007e9e <__gethex+0x386>
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d106      	bne.n	8007e8a <__gethex+0x372>
 8007e7c:	07aa      	lsls	r2, r5, #30
 8007e7e:	d504      	bpl.n	8007e8a <__gethex+0x372>
 8007e80:	9a04      	ldr	r2, [sp, #16]
 8007e82:	6810      	ldr	r0, [r2, #0]
 8007e84:	4305      	orrs	r5, r0
 8007e86:	421d      	tst	r5, r3
 8007e88:	d10c      	bne.n	8007ea4 <__gethex+0x38c>
 8007e8a:	2310      	movs	r3, #16
 8007e8c:	e02f      	b.n	8007eee <__gethex+0x3d6>
 8007e8e:	2501      	movs	r5, #1
 8007e90:	e7d4      	b.n	8007e3c <__gethex+0x324>
 8007e92:	2601      	movs	r6, #1
 8007e94:	e7e8      	b.n	8007e68 <__gethex+0x350>
 8007e96:	2301      	movs	r3, #1
 8007e98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e9a:	1a9b      	subs	r3, r3, r2
 8007e9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d0f2      	beq.n	8007e8a <__gethex+0x372>
 8007ea4:	6923      	ldr	r3, [r4, #16]
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	9303      	str	r3, [sp, #12]
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	9304      	str	r3, [sp, #16]
 8007eae:	0023      	movs	r3, r4
 8007eb0:	9a04      	ldr	r2, [sp, #16]
 8007eb2:	3314      	adds	r3, #20
 8007eb4:	1899      	adds	r1, r3, r2
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	1c55      	adds	r5, r2, #1
 8007eba:	d01e      	beq.n	8007efa <__gethex+0x3e2>
 8007ebc:	3201      	adds	r2, #1
 8007ebe:	601a      	str	r2, [r3, #0]
 8007ec0:	0023      	movs	r3, r4
 8007ec2:	3314      	adds	r3, #20
 8007ec4:	2e02      	cmp	r6, #2
 8007ec6:	d140      	bne.n	8007f4a <__gethex+0x432>
 8007ec8:	9a02      	ldr	r2, [sp, #8]
 8007eca:	9901      	ldr	r1, [sp, #4]
 8007ecc:	6812      	ldr	r2, [r2, #0]
 8007ece:	3a01      	subs	r2, #1
 8007ed0:	428a      	cmp	r2, r1
 8007ed2:	d10b      	bne.n	8007eec <__gethex+0x3d4>
 8007ed4:	114a      	asrs	r2, r1, #5
 8007ed6:	211f      	movs	r1, #31
 8007ed8:	9801      	ldr	r0, [sp, #4]
 8007eda:	0092      	lsls	r2, r2, #2
 8007edc:	4001      	ands	r1, r0
 8007ede:	2001      	movs	r0, #1
 8007ee0:	0005      	movs	r5, r0
 8007ee2:	408d      	lsls	r5, r1
 8007ee4:	58d3      	ldr	r3, [r2, r3]
 8007ee6:	422b      	tst	r3, r5
 8007ee8:	d000      	beq.n	8007eec <__gethex+0x3d4>
 8007eea:	2601      	movs	r6, #1
 8007eec:	2320      	movs	r3, #32
 8007eee:	431e      	orrs	r6, r3
 8007ef0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ef2:	601c      	str	r4, [r3, #0]
 8007ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef6:	601f      	str	r7, [r3, #0]
 8007ef8:	e6a7      	b.n	8007c4a <__gethex+0x132>
 8007efa:	c301      	stmia	r3!, {r0}
 8007efc:	4299      	cmp	r1, r3
 8007efe:	d8da      	bhi.n	8007eb6 <__gethex+0x39e>
 8007f00:	9b03      	ldr	r3, [sp, #12]
 8007f02:	68a2      	ldr	r2, [r4, #8]
 8007f04:	4293      	cmp	r3, r2
 8007f06:	db17      	blt.n	8007f38 <__gethex+0x420>
 8007f08:	6863      	ldr	r3, [r4, #4]
 8007f0a:	9805      	ldr	r0, [sp, #20]
 8007f0c:	1c59      	adds	r1, r3, #1
 8007f0e:	f000 f93f 	bl	8008190 <_Balloc>
 8007f12:	1e05      	subs	r5, r0, #0
 8007f14:	d103      	bne.n	8007f1e <__gethex+0x406>
 8007f16:	0002      	movs	r2, r0
 8007f18:	2184      	movs	r1, #132	; 0x84
 8007f1a:	4b1c      	ldr	r3, [pc, #112]	; (8007f8c <__gethex+0x474>)
 8007f1c:	e6b8      	b.n	8007c90 <__gethex+0x178>
 8007f1e:	0021      	movs	r1, r4
 8007f20:	6923      	ldr	r3, [r4, #16]
 8007f22:	310c      	adds	r1, #12
 8007f24:	1c9a      	adds	r2, r3, #2
 8007f26:	0092      	lsls	r2, r2, #2
 8007f28:	300c      	adds	r0, #12
 8007f2a:	f000 f928 	bl	800817e <memcpy>
 8007f2e:	0021      	movs	r1, r4
 8007f30:	9805      	ldr	r0, [sp, #20]
 8007f32:	f000 f971 	bl	8008218 <_Bfree>
 8007f36:	002c      	movs	r4, r5
 8007f38:	6923      	ldr	r3, [r4, #16]
 8007f3a:	1c5a      	adds	r2, r3, #1
 8007f3c:	6122      	str	r2, [r4, #16]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	3304      	adds	r3, #4
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	18e3      	adds	r3, r4, r3
 8007f46:	605a      	str	r2, [r3, #4]
 8007f48:	e7ba      	b.n	8007ec0 <__gethex+0x3a8>
 8007f4a:	6922      	ldr	r2, [r4, #16]
 8007f4c:	9903      	ldr	r1, [sp, #12]
 8007f4e:	428a      	cmp	r2, r1
 8007f50:	dd09      	ble.n	8007f66 <__gethex+0x44e>
 8007f52:	2101      	movs	r1, #1
 8007f54:	0020      	movs	r0, r4
 8007f56:	f7ff fd75 	bl	8007a44 <rshift>
 8007f5a:	9b02      	ldr	r3, [sp, #8]
 8007f5c:	3701      	adds	r7, #1
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	42bb      	cmp	r3, r7
 8007f62:	dac2      	bge.n	8007eea <__gethex+0x3d2>
 8007f64:	e6dc      	b.n	8007d20 <__gethex+0x208>
 8007f66:	221f      	movs	r2, #31
 8007f68:	9d01      	ldr	r5, [sp, #4]
 8007f6a:	9901      	ldr	r1, [sp, #4]
 8007f6c:	2601      	movs	r6, #1
 8007f6e:	4015      	ands	r5, r2
 8007f70:	4211      	tst	r1, r2
 8007f72:	d0bb      	beq.n	8007eec <__gethex+0x3d4>
 8007f74:	9a04      	ldr	r2, [sp, #16]
 8007f76:	189b      	adds	r3, r3, r2
 8007f78:	3b04      	subs	r3, #4
 8007f7a:	6818      	ldr	r0, [r3, #0]
 8007f7c:	f000 fa00 	bl	8008380 <__hi0bits>
 8007f80:	2320      	movs	r3, #32
 8007f82:	1b5d      	subs	r5, r3, r5
 8007f84:	42a8      	cmp	r0, r5
 8007f86:	dbe4      	blt.n	8007f52 <__gethex+0x43a>
 8007f88:	e7b0      	b.n	8007eec <__gethex+0x3d4>
 8007f8a:	46c0      	nop			; (mov r8, r8)
 8007f8c:	08009ea4 	.word	0x08009ea4

08007f90 <L_shift>:
 8007f90:	2308      	movs	r3, #8
 8007f92:	b570      	push	{r4, r5, r6, lr}
 8007f94:	2520      	movs	r5, #32
 8007f96:	1a9a      	subs	r2, r3, r2
 8007f98:	0092      	lsls	r2, r2, #2
 8007f9a:	1aad      	subs	r5, r5, r2
 8007f9c:	6843      	ldr	r3, [r0, #4]
 8007f9e:	6806      	ldr	r6, [r0, #0]
 8007fa0:	001c      	movs	r4, r3
 8007fa2:	40ac      	lsls	r4, r5
 8007fa4:	40d3      	lsrs	r3, r2
 8007fa6:	4334      	orrs	r4, r6
 8007fa8:	6004      	str	r4, [r0, #0]
 8007faa:	6043      	str	r3, [r0, #4]
 8007fac:	3004      	adds	r0, #4
 8007fae:	4288      	cmp	r0, r1
 8007fb0:	d3f4      	bcc.n	8007f9c <L_shift+0xc>
 8007fb2:	bd70      	pop	{r4, r5, r6, pc}

08007fb4 <__match>:
 8007fb4:	b530      	push	{r4, r5, lr}
 8007fb6:	6803      	ldr	r3, [r0, #0]
 8007fb8:	780c      	ldrb	r4, [r1, #0]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	2c00      	cmp	r4, #0
 8007fbe:	d102      	bne.n	8007fc6 <__match+0x12>
 8007fc0:	6003      	str	r3, [r0, #0]
 8007fc2:	2001      	movs	r0, #1
 8007fc4:	bd30      	pop	{r4, r5, pc}
 8007fc6:	781a      	ldrb	r2, [r3, #0]
 8007fc8:	0015      	movs	r5, r2
 8007fca:	3d41      	subs	r5, #65	; 0x41
 8007fcc:	2d19      	cmp	r5, #25
 8007fce:	d800      	bhi.n	8007fd2 <__match+0x1e>
 8007fd0:	3220      	adds	r2, #32
 8007fd2:	3101      	adds	r1, #1
 8007fd4:	42a2      	cmp	r2, r4
 8007fd6:	d0ef      	beq.n	8007fb8 <__match+0x4>
 8007fd8:	2000      	movs	r0, #0
 8007fda:	e7f3      	b.n	8007fc4 <__match+0x10>

08007fdc <__hexnan>:
 8007fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fde:	680b      	ldr	r3, [r1, #0]
 8007fe0:	b08b      	sub	sp, #44	; 0x2c
 8007fe2:	115c      	asrs	r4, r3, #5
 8007fe4:	00a4      	lsls	r4, r4, #2
 8007fe6:	9201      	str	r2, [sp, #4]
 8007fe8:	1912      	adds	r2, r2, r4
 8007fea:	0019      	movs	r1, r3
 8007fec:	9202      	str	r2, [sp, #8]
 8007fee:	221f      	movs	r2, #31
 8007ff0:	4011      	ands	r1, r2
 8007ff2:	9008      	str	r0, [sp, #32]
 8007ff4:	9106      	str	r1, [sp, #24]
 8007ff6:	4213      	tst	r3, r2
 8007ff8:	d002      	beq.n	8008000 <__hexnan+0x24>
 8007ffa:	9b02      	ldr	r3, [sp, #8]
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	9302      	str	r3, [sp, #8]
 8008000:	9b02      	ldr	r3, [sp, #8]
 8008002:	2500      	movs	r5, #0
 8008004:	1f1e      	subs	r6, r3, #4
 8008006:	0037      	movs	r7, r6
 8008008:	0034      	movs	r4, r6
 800800a:	9b08      	ldr	r3, [sp, #32]
 800800c:	6035      	str	r5, [r6, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	9507      	str	r5, [sp, #28]
 8008012:	9305      	str	r3, [sp, #20]
 8008014:	9503      	str	r5, [sp, #12]
 8008016:	9b05      	ldr	r3, [sp, #20]
 8008018:	3301      	adds	r3, #1
 800801a:	9309      	str	r3, [sp, #36]	; 0x24
 800801c:	9b05      	ldr	r3, [sp, #20]
 800801e:	785b      	ldrb	r3, [r3, #1]
 8008020:	9304      	str	r3, [sp, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d028      	beq.n	8008078 <__hexnan+0x9c>
 8008026:	9804      	ldr	r0, [sp, #16]
 8008028:	f7ff fd60 	bl	8007aec <__hexdig_fun>
 800802c:	2800      	cmp	r0, #0
 800802e:	d154      	bne.n	80080da <__hexnan+0xfe>
 8008030:	9b04      	ldr	r3, [sp, #16]
 8008032:	2b20      	cmp	r3, #32
 8008034:	d819      	bhi.n	800806a <__hexnan+0x8e>
 8008036:	9b03      	ldr	r3, [sp, #12]
 8008038:	9a07      	ldr	r2, [sp, #28]
 800803a:	4293      	cmp	r3, r2
 800803c:	dd12      	ble.n	8008064 <__hexnan+0x88>
 800803e:	42bc      	cmp	r4, r7
 8008040:	d206      	bcs.n	8008050 <__hexnan+0x74>
 8008042:	2d07      	cmp	r5, #7
 8008044:	dc04      	bgt.n	8008050 <__hexnan+0x74>
 8008046:	002a      	movs	r2, r5
 8008048:	0039      	movs	r1, r7
 800804a:	0020      	movs	r0, r4
 800804c:	f7ff ffa0 	bl	8007f90 <L_shift>
 8008050:	9b01      	ldr	r3, [sp, #4]
 8008052:	2508      	movs	r5, #8
 8008054:	429c      	cmp	r4, r3
 8008056:	d905      	bls.n	8008064 <__hexnan+0x88>
 8008058:	1f27      	subs	r7, r4, #4
 800805a:	2500      	movs	r5, #0
 800805c:	003c      	movs	r4, r7
 800805e:	9b03      	ldr	r3, [sp, #12]
 8008060:	603d      	str	r5, [r7, #0]
 8008062:	9307      	str	r3, [sp, #28]
 8008064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008066:	9305      	str	r3, [sp, #20]
 8008068:	e7d5      	b.n	8008016 <__hexnan+0x3a>
 800806a:	9b04      	ldr	r3, [sp, #16]
 800806c:	2b29      	cmp	r3, #41	; 0x29
 800806e:	d158      	bne.n	8008122 <__hexnan+0x146>
 8008070:	9b05      	ldr	r3, [sp, #20]
 8008072:	9a08      	ldr	r2, [sp, #32]
 8008074:	3302      	adds	r3, #2
 8008076:	6013      	str	r3, [r2, #0]
 8008078:	9b03      	ldr	r3, [sp, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d051      	beq.n	8008122 <__hexnan+0x146>
 800807e:	42bc      	cmp	r4, r7
 8008080:	d206      	bcs.n	8008090 <__hexnan+0xb4>
 8008082:	2d07      	cmp	r5, #7
 8008084:	dc04      	bgt.n	8008090 <__hexnan+0xb4>
 8008086:	002a      	movs	r2, r5
 8008088:	0039      	movs	r1, r7
 800808a:	0020      	movs	r0, r4
 800808c:	f7ff ff80 	bl	8007f90 <L_shift>
 8008090:	9b01      	ldr	r3, [sp, #4]
 8008092:	429c      	cmp	r4, r3
 8008094:	d935      	bls.n	8008102 <__hexnan+0x126>
 8008096:	001a      	movs	r2, r3
 8008098:	0023      	movs	r3, r4
 800809a:	cb02      	ldmia	r3!, {r1}
 800809c:	c202      	stmia	r2!, {r1}
 800809e:	429e      	cmp	r6, r3
 80080a0:	d2fb      	bcs.n	800809a <__hexnan+0xbe>
 80080a2:	9b02      	ldr	r3, [sp, #8]
 80080a4:	1c61      	adds	r1, r4, #1
 80080a6:	1eda      	subs	r2, r3, #3
 80080a8:	2304      	movs	r3, #4
 80080aa:	4291      	cmp	r1, r2
 80080ac:	d805      	bhi.n	80080ba <__hexnan+0xde>
 80080ae:	9b02      	ldr	r3, [sp, #8]
 80080b0:	3b04      	subs	r3, #4
 80080b2:	1b1c      	subs	r4, r3, r4
 80080b4:	08a4      	lsrs	r4, r4, #2
 80080b6:	3401      	adds	r4, #1
 80080b8:	00a3      	lsls	r3, r4, #2
 80080ba:	9a01      	ldr	r2, [sp, #4]
 80080bc:	18d4      	adds	r4, r2, r3
 80080be:	2300      	movs	r3, #0
 80080c0:	c408      	stmia	r4!, {r3}
 80080c2:	42a6      	cmp	r6, r4
 80080c4:	d2fc      	bcs.n	80080c0 <__hexnan+0xe4>
 80080c6:	6833      	ldr	r3, [r6, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d104      	bne.n	80080d6 <__hexnan+0xfa>
 80080cc:	9b01      	ldr	r3, [sp, #4]
 80080ce:	429e      	cmp	r6, r3
 80080d0:	d125      	bne.n	800811e <__hexnan+0x142>
 80080d2:	2301      	movs	r3, #1
 80080d4:	6033      	str	r3, [r6, #0]
 80080d6:	2005      	movs	r0, #5
 80080d8:	e024      	b.n	8008124 <__hexnan+0x148>
 80080da:	9b03      	ldr	r3, [sp, #12]
 80080dc:	3501      	adds	r5, #1
 80080de:	3301      	adds	r3, #1
 80080e0:	9303      	str	r3, [sp, #12]
 80080e2:	2d08      	cmp	r5, #8
 80080e4:	dd06      	ble.n	80080f4 <__hexnan+0x118>
 80080e6:	9b01      	ldr	r3, [sp, #4]
 80080e8:	429c      	cmp	r4, r3
 80080ea:	d9bb      	bls.n	8008064 <__hexnan+0x88>
 80080ec:	2300      	movs	r3, #0
 80080ee:	2501      	movs	r5, #1
 80080f0:	3c04      	subs	r4, #4
 80080f2:	6023      	str	r3, [r4, #0]
 80080f4:	220f      	movs	r2, #15
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	4010      	ands	r0, r2
 80080fa:	011b      	lsls	r3, r3, #4
 80080fc:	4318      	orrs	r0, r3
 80080fe:	6020      	str	r0, [r4, #0]
 8008100:	e7b0      	b.n	8008064 <__hexnan+0x88>
 8008102:	9b06      	ldr	r3, [sp, #24]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d0de      	beq.n	80080c6 <__hexnan+0xea>
 8008108:	2220      	movs	r2, #32
 800810a:	1ad2      	subs	r2, r2, r3
 800810c:	2301      	movs	r3, #1
 800810e:	425b      	negs	r3, r3
 8008110:	40d3      	lsrs	r3, r2
 8008112:	9c02      	ldr	r4, [sp, #8]
 8008114:	3c04      	subs	r4, #4
 8008116:	6822      	ldr	r2, [r4, #0]
 8008118:	4013      	ands	r3, r2
 800811a:	6023      	str	r3, [r4, #0]
 800811c:	e7d3      	b.n	80080c6 <__hexnan+0xea>
 800811e:	3e04      	subs	r6, #4
 8008120:	e7d1      	b.n	80080c6 <__hexnan+0xea>
 8008122:	2004      	movs	r0, #4
 8008124:	b00b      	add	sp, #44	; 0x2c
 8008126:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008128 <_localeconv_r>:
 8008128:	4800      	ldr	r0, [pc, #0]	; (800812c <_localeconv_r+0x4>)
 800812a:	4770      	bx	lr
 800812c:	2000016c 	.word	0x2000016c

08008130 <malloc>:
 8008130:	b510      	push	{r4, lr}
 8008132:	4b03      	ldr	r3, [pc, #12]	; (8008140 <malloc+0x10>)
 8008134:	0001      	movs	r1, r0
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	f000 fd4c 	bl	8008bd4 <_malloc_r>
 800813c:	bd10      	pop	{r4, pc}
 800813e:	46c0      	nop			; (mov r8, r8)
 8008140:	20000014 	.word	0x20000014

08008144 <__ascii_mbtowc>:
 8008144:	b082      	sub	sp, #8
 8008146:	2900      	cmp	r1, #0
 8008148:	d100      	bne.n	800814c <__ascii_mbtowc+0x8>
 800814a:	a901      	add	r1, sp, #4
 800814c:	1e10      	subs	r0, r2, #0
 800814e:	d006      	beq.n	800815e <__ascii_mbtowc+0x1a>
 8008150:	2b00      	cmp	r3, #0
 8008152:	d006      	beq.n	8008162 <__ascii_mbtowc+0x1e>
 8008154:	7813      	ldrb	r3, [r2, #0]
 8008156:	600b      	str	r3, [r1, #0]
 8008158:	7810      	ldrb	r0, [r2, #0]
 800815a:	1e43      	subs	r3, r0, #1
 800815c:	4198      	sbcs	r0, r3
 800815e:	b002      	add	sp, #8
 8008160:	4770      	bx	lr
 8008162:	2002      	movs	r0, #2
 8008164:	4240      	negs	r0, r0
 8008166:	e7fa      	b.n	800815e <__ascii_mbtowc+0x1a>

08008168 <memchr>:
 8008168:	b2c9      	uxtb	r1, r1
 800816a:	1882      	adds	r2, r0, r2
 800816c:	4290      	cmp	r0, r2
 800816e:	d101      	bne.n	8008174 <memchr+0xc>
 8008170:	2000      	movs	r0, #0
 8008172:	4770      	bx	lr
 8008174:	7803      	ldrb	r3, [r0, #0]
 8008176:	428b      	cmp	r3, r1
 8008178:	d0fb      	beq.n	8008172 <memchr+0xa>
 800817a:	3001      	adds	r0, #1
 800817c:	e7f6      	b.n	800816c <memchr+0x4>

0800817e <memcpy>:
 800817e:	2300      	movs	r3, #0
 8008180:	b510      	push	{r4, lr}
 8008182:	429a      	cmp	r2, r3
 8008184:	d100      	bne.n	8008188 <memcpy+0xa>
 8008186:	bd10      	pop	{r4, pc}
 8008188:	5ccc      	ldrb	r4, [r1, r3]
 800818a:	54c4      	strb	r4, [r0, r3]
 800818c:	3301      	adds	r3, #1
 800818e:	e7f8      	b.n	8008182 <memcpy+0x4>

08008190 <_Balloc>:
 8008190:	b570      	push	{r4, r5, r6, lr}
 8008192:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008194:	0006      	movs	r6, r0
 8008196:	000c      	movs	r4, r1
 8008198:	2d00      	cmp	r5, #0
 800819a:	d10e      	bne.n	80081ba <_Balloc+0x2a>
 800819c:	2010      	movs	r0, #16
 800819e:	f7ff ffc7 	bl	8008130 <malloc>
 80081a2:	1e02      	subs	r2, r0, #0
 80081a4:	6270      	str	r0, [r6, #36]	; 0x24
 80081a6:	d104      	bne.n	80081b2 <_Balloc+0x22>
 80081a8:	2166      	movs	r1, #102	; 0x66
 80081aa:	4b19      	ldr	r3, [pc, #100]	; (8008210 <_Balloc+0x80>)
 80081ac:	4819      	ldr	r0, [pc, #100]	; (8008214 <_Balloc+0x84>)
 80081ae:	f000 ff07 	bl	8008fc0 <__assert_func>
 80081b2:	6045      	str	r5, [r0, #4]
 80081b4:	6085      	str	r5, [r0, #8]
 80081b6:	6005      	str	r5, [r0, #0]
 80081b8:	60c5      	str	r5, [r0, #12]
 80081ba:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80081bc:	68eb      	ldr	r3, [r5, #12]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d013      	beq.n	80081ea <_Balloc+0x5a>
 80081c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80081c4:	00a2      	lsls	r2, r4, #2
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	189b      	adds	r3, r3, r2
 80081ca:	6818      	ldr	r0, [r3, #0]
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d118      	bne.n	8008202 <_Balloc+0x72>
 80081d0:	2101      	movs	r1, #1
 80081d2:	000d      	movs	r5, r1
 80081d4:	40a5      	lsls	r5, r4
 80081d6:	1d6a      	adds	r2, r5, #5
 80081d8:	0030      	movs	r0, r6
 80081da:	0092      	lsls	r2, r2, #2
 80081dc:	f000 fca2 	bl	8008b24 <_calloc_r>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d00c      	beq.n	80081fe <_Balloc+0x6e>
 80081e4:	6044      	str	r4, [r0, #4]
 80081e6:	6085      	str	r5, [r0, #8]
 80081e8:	e00d      	b.n	8008206 <_Balloc+0x76>
 80081ea:	2221      	movs	r2, #33	; 0x21
 80081ec:	2104      	movs	r1, #4
 80081ee:	0030      	movs	r0, r6
 80081f0:	f000 fc98 	bl	8008b24 <_calloc_r>
 80081f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80081f6:	60e8      	str	r0, [r5, #12]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1e1      	bne.n	80081c2 <_Balloc+0x32>
 80081fe:	2000      	movs	r0, #0
 8008200:	bd70      	pop	{r4, r5, r6, pc}
 8008202:	6802      	ldr	r2, [r0, #0]
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	2300      	movs	r3, #0
 8008208:	6103      	str	r3, [r0, #16]
 800820a:	60c3      	str	r3, [r0, #12]
 800820c:	e7f8      	b.n	8008200 <_Balloc+0x70>
 800820e:	46c0      	nop			; (mov r8, r8)
 8008210:	08009e2e 	.word	0x08009e2e
 8008214:	08009f34 	.word	0x08009f34

08008218 <_Bfree>:
 8008218:	b570      	push	{r4, r5, r6, lr}
 800821a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800821c:	0005      	movs	r5, r0
 800821e:	000c      	movs	r4, r1
 8008220:	2e00      	cmp	r6, #0
 8008222:	d10e      	bne.n	8008242 <_Bfree+0x2a>
 8008224:	2010      	movs	r0, #16
 8008226:	f7ff ff83 	bl	8008130 <malloc>
 800822a:	1e02      	subs	r2, r0, #0
 800822c:	6268      	str	r0, [r5, #36]	; 0x24
 800822e:	d104      	bne.n	800823a <_Bfree+0x22>
 8008230:	218a      	movs	r1, #138	; 0x8a
 8008232:	4b09      	ldr	r3, [pc, #36]	; (8008258 <_Bfree+0x40>)
 8008234:	4809      	ldr	r0, [pc, #36]	; (800825c <_Bfree+0x44>)
 8008236:	f000 fec3 	bl	8008fc0 <__assert_func>
 800823a:	6046      	str	r6, [r0, #4]
 800823c:	6086      	str	r6, [r0, #8]
 800823e:	6006      	str	r6, [r0, #0]
 8008240:	60c6      	str	r6, [r0, #12]
 8008242:	2c00      	cmp	r4, #0
 8008244:	d007      	beq.n	8008256 <_Bfree+0x3e>
 8008246:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008248:	6862      	ldr	r2, [r4, #4]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	0092      	lsls	r2, r2, #2
 800824e:	189b      	adds	r3, r3, r2
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	6022      	str	r2, [r4, #0]
 8008254:	601c      	str	r4, [r3, #0]
 8008256:	bd70      	pop	{r4, r5, r6, pc}
 8008258:	08009e2e 	.word	0x08009e2e
 800825c:	08009f34 	.word	0x08009f34

08008260 <__multadd>:
 8008260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008262:	000e      	movs	r6, r1
 8008264:	9001      	str	r0, [sp, #4]
 8008266:	000c      	movs	r4, r1
 8008268:	001d      	movs	r5, r3
 800826a:	2000      	movs	r0, #0
 800826c:	690f      	ldr	r7, [r1, #16]
 800826e:	3614      	adds	r6, #20
 8008270:	6833      	ldr	r3, [r6, #0]
 8008272:	3001      	adds	r0, #1
 8008274:	b299      	uxth	r1, r3
 8008276:	4351      	muls	r1, r2
 8008278:	0c1b      	lsrs	r3, r3, #16
 800827a:	4353      	muls	r3, r2
 800827c:	1949      	adds	r1, r1, r5
 800827e:	0c0d      	lsrs	r5, r1, #16
 8008280:	195b      	adds	r3, r3, r5
 8008282:	0c1d      	lsrs	r5, r3, #16
 8008284:	b289      	uxth	r1, r1
 8008286:	041b      	lsls	r3, r3, #16
 8008288:	185b      	adds	r3, r3, r1
 800828a:	c608      	stmia	r6!, {r3}
 800828c:	4287      	cmp	r7, r0
 800828e:	dcef      	bgt.n	8008270 <__multadd+0x10>
 8008290:	2d00      	cmp	r5, #0
 8008292:	d022      	beq.n	80082da <__multadd+0x7a>
 8008294:	68a3      	ldr	r3, [r4, #8]
 8008296:	42bb      	cmp	r3, r7
 8008298:	dc19      	bgt.n	80082ce <__multadd+0x6e>
 800829a:	6863      	ldr	r3, [r4, #4]
 800829c:	9801      	ldr	r0, [sp, #4]
 800829e:	1c59      	adds	r1, r3, #1
 80082a0:	f7ff ff76 	bl	8008190 <_Balloc>
 80082a4:	1e06      	subs	r6, r0, #0
 80082a6:	d105      	bne.n	80082b4 <__multadd+0x54>
 80082a8:	0002      	movs	r2, r0
 80082aa:	21b5      	movs	r1, #181	; 0xb5
 80082ac:	4b0c      	ldr	r3, [pc, #48]	; (80082e0 <__multadd+0x80>)
 80082ae:	480d      	ldr	r0, [pc, #52]	; (80082e4 <__multadd+0x84>)
 80082b0:	f000 fe86 	bl	8008fc0 <__assert_func>
 80082b4:	0021      	movs	r1, r4
 80082b6:	6923      	ldr	r3, [r4, #16]
 80082b8:	310c      	adds	r1, #12
 80082ba:	1c9a      	adds	r2, r3, #2
 80082bc:	0092      	lsls	r2, r2, #2
 80082be:	300c      	adds	r0, #12
 80082c0:	f7ff ff5d 	bl	800817e <memcpy>
 80082c4:	0021      	movs	r1, r4
 80082c6:	9801      	ldr	r0, [sp, #4]
 80082c8:	f7ff ffa6 	bl	8008218 <_Bfree>
 80082cc:	0034      	movs	r4, r6
 80082ce:	1d3b      	adds	r3, r7, #4
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	18e3      	adds	r3, r4, r3
 80082d4:	605d      	str	r5, [r3, #4]
 80082d6:	1c7b      	adds	r3, r7, #1
 80082d8:	6123      	str	r3, [r4, #16]
 80082da:	0020      	movs	r0, r4
 80082dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80082de:	46c0      	nop			; (mov r8, r8)
 80082e0:	08009ea4 	.word	0x08009ea4
 80082e4:	08009f34 	.word	0x08009f34

080082e8 <__s2b>:
 80082e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082ea:	0006      	movs	r6, r0
 80082ec:	0018      	movs	r0, r3
 80082ee:	000c      	movs	r4, r1
 80082f0:	3008      	adds	r0, #8
 80082f2:	2109      	movs	r1, #9
 80082f4:	9301      	str	r3, [sp, #4]
 80082f6:	0015      	movs	r5, r2
 80082f8:	f7f7 ffaa 	bl	8000250 <__divsi3>
 80082fc:	2301      	movs	r3, #1
 80082fe:	2100      	movs	r1, #0
 8008300:	4283      	cmp	r3, r0
 8008302:	db0a      	blt.n	800831a <__s2b+0x32>
 8008304:	0030      	movs	r0, r6
 8008306:	f7ff ff43 	bl	8008190 <_Balloc>
 800830a:	1e01      	subs	r1, r0, #0
 800830c:	d108      	bne.n	8008320 <__s2b+0x38>
 800830e:	0002      	movs	r2, r0
 8008310:	4b19      	ldr	r3, [pc, #100]	; (8008378 <__s2b+0x90>)
 8008312:	481a      	ldr	r0, [pc, #104]	; (800837c <__s2b+0x94>)
 8008314:	31ce      	adds	r1, #206	; 0xce
 8008316:	f000 fe53 	bl	8008fc0 <__assert_func>
 800831a:	005b      	lsls	r3, r3, #1
 800831c:	3101      	adds	r1, #1
 800831e:	e7ef      	b.n	8008300 <__s2b+0x18>
 8008320:	9b08      	ldr	r3, [sp, #32]
 8008322:	6143      	str	r3, [r0, #20]
 8008324:	2301      	movs	r3, #1
 8008326:	6103      	str	r3, [r0, #16]
 8008328:	2d09      	cmp	r5, #9
 800832a:	dd18      	ble.n	800835e <__s2b+0x76>
 800832c:	0023      	movs	r3, r4
 800832e:	3309      	adds	r3, #9
 8008330:	001f      	movs	r7, r3
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	1964      	adds	r4, r4, r5
 8008336:	783b      	ldrb	r3, [r7, #0]
 8008338:	220a      	movs	r2, #10
 800833a:	0030      	movs	r0, r6
 800833c:	3b30      	subs	r3, #48	; 0x30
 800833e:	f7ff ff8f 	bl	8008260 <__multadd>
 8008342:	3701      	adds	r7, #1
 8008344:	0001      	movs	r1, r0
 8008346:	42a7      	cmp	r7, r4
 8008348:	d1f5      	bne.n	8008336 <__s2b+0x4e>
 800834a:	002c      	movs	r4, r5
 800834c:	9b00      	ldr	r3, [sp, #0]
 800834e:	3c08      	subs	r4, #8
 8008350:	191c      	adds	r4, r3, r4
 8008352:	002f      	movs	r7, r5
 8008354:	9b01      	ldr	r3, [sp, #4]
 8008356:	429f      	cmp	r7, r3
 8008358:	db04      	blt.n	8008364 <__s2b+0x7c>
 800835a:	0008      	movs	r0, r1
 800835c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800835e:	2509      	movs	r5, #9
 8008360:	340a      	adds	r4, #10
 8008362:	e7f6      	b.n	8008352 <__s2b+0x6a>
 8008364:	1b63      	subs	r3, r4, r5
 8008366:	5ddb      	ldrb	r3, [r3, r7]
 8008368:	220a      	movs	r2, #10
 800836a:	0030      	movs	r0, r6
 800836c:	3b30      	subs	r3, #48	; 0x30
 800836e:	f7ff ff77 	bl	8008260 <__multadd>
 8008372:	3701      	adds	r7, #1
 8008374:	0001      	movs	r1, r0
 8008376:	e7ed      	b.n	8008354 <__s2b+0x6c>
 8008378:	08009ea4 	.word	0x08009ea4
 800837c:	08009f34 	.word	0x08009f34

08008380 <__hi0bits>:
 8008380:	0003      	movs	r3, r0
 8008382:	0c02      	lsrs	r2, r0, #16
 8008384:	2000      	movs	r0, #0
 8008386:	4282      	cmp	r2, r0
 8008388:	d101      	bne.n	800838e <__hi0bits+0xe>
 800838a:	041b      	lsls	r3, r3, #16
 800838c:	3010      	adds	r0, #16
 800838e:	0e1a      	lsrs	r2, r3, #24
 8008390:	d101      	bne.n	8008396 <__hi0bits+0x16>
 8008392:	3008      	adds	r0, #8
 8008394:	021b      	lsls	r3, r3, #8
 8008396:	0f1a      	lsrs	r2, r3, #28
 8008398:	d101      	bne.n	800839e <__hi0bits+0x1e>
 800839a:	3004      	adds	r0, #4
 800839c:	011b      	lsls	r3, r3, #4
 800839e:	0f9a      	lsrs	r2, r3, #30
 80083a0:	d101      	bne.n	80083a6 <__hi0bits+0x26>
 80083a2:	3002      	adds	r0, #2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	db03      	blt.n	80083b2 <__hi0bits+0x32>
 80083aa:	3001      	adds	r0, #1
 80083ac:	005b      	lsls	r3, r3, #1
 80083ae:	d400      	bmi.n	80083b2 <__hi0bits+0x32>
 80083b0:	2020      	movs	r0, #32
 80083b2:	4770      	bx	lr

080083b4 <__lo0bits>:
 80083b4:	6803      	ldr	r3, [r0, #0]
 80083b6:	0002      	movs	r2, r0
 80083b8:	2107      	movs	r1, #7
 80083ba:	0018      	movs	r0, r3
 80083bc:	4008      	ands	r0, r1
 80083be:	420b      	tst	r3, r1
 80083c0:	d00d      	beq.n	80083de <__lo0bits+0x2a>
 80083c2:	3906      	subs	r1, #6
 80083c4:	2000      	movs	r0, #0
 80083c6:	420b      	tst	r3, r1
 80083c8:	d105      	bne.n	80083d6 <__lo0bits+0x22>
 80083ca:	3002      	adds	r0, #2
 80083cc:	4203      	tst	r3, r0
 80083ce:	d003      	beq.n	80083d8 <__lo0bits+0x24>
 80083d0:	40cb      	lsrs	r3, r1
 80083d2:	0008      	movs	r0, r1
 80083d4:	6013      	str	r3, [r2, #0]
 80083d6:	4770      	bx	lr
 80083d8:	089b      	lsrs	r3, r3, #2
 80083da:	6013      	str	r3, [r2, #0]
 80083dc:	e7fb      	b.n	80083d6 <__lo0bits+0x22>
 80083de:	b299      	uxth	r1, r3
 80083e0:	2900      	cmp	r1, #0
 80083e2:	d101      	bne.n	80083e8 <__lo0bits+0x34>
 80083e4:	2010      	movs	r0, #16
 80083e6:	0c1b      	lsrs	r3, r3, #16
 80083e8:	b2d9      	uxtb	r1, r3
 80083ea:	2900      	cmp	r1, #0
 80083ec:	d101      	bne.n	80083f2 <__lo0bits+0x3e>
 80083ee:	3008      	adds	r0, #8
 80083f0:	0a1b      	lsrs	r3, r3, #8
 80083f2:	0719      	lsls	r1, r3, #28
 80083f4:	d101      	bne.n	80083fa <__lo0bits+0x46>
 80083f6:	3004      	adds	r0, #4
 80083f8:	091b      	lsrs	r3, r3, #4
 80083fa:	0799      	lsls	r1, r3, #30
 80083fc:	d101      	bne.n	8008402 <__lo0bits+0x4e>
 80083fe:	3002      	adds	r0, #2
 8008400:	089b      	lsrs	r3, r3, #2
 8008402:	07d9      	lsls	r1, r3, #31
 8008404:	d4e9      	bmi.n	80083da <__lo0bits+0x26>
 8008406:	3001      	adds	r0, #1
 8008408:	085b      	lsrs	r3, r3, #1
 800840a:	d1e6      	bne.n	80083da <__lo0bits+0x26>
 800840c:	2020      	movs	r0, #32
 800840e:	e7e2      	b.n	80083d6 <__lo0bits+0x22>

08008410 <__i2b>:
 8008410:	b510      	push	{r4, lr}
 8008412:	000c      	movs	r4, r1
 8008414:	2101      	movs	r1, #1
 8008416:	f7ff febb 	bl	8008190 <_Balloc>
 800841a:	2800      	cmp	r0, #0
 800841c:	d106      	bne.n	800842c <__i2b+0x1c>
 800841e:	21a0      	movs	r1, #160	; 0xa0
 8008420:	0002      	movs	r2, r0
 8008422:	4b04      	ldr	r3, [pc, #16]	; (8008434 <__i2b+0x24>)
 8008424:	4804      	ldr	r0, [pc, #16]	; (8008438 <__i2b+0x28>)
 8008426:	0049      	lsls	r1, r1, #1
 8008428:	f000 fdca 	bl	8008fc0 <__assert_func>
 800842c:	2301      	movs	r3, #1
 800842e:	6144      	str	r4, [r0, #20]
 8008430:	6103      	str	r3, [r0, #16]
 8008432:	bd10      	pop	{r4, pc}
 8008434:	08009ea4 	.word	0x08009ea4
 8008438:	08009f34 	.word	0x08009f34

0800843c <__multiply>:
 800843c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800843e:	690b      	ldr	r3, [r1, #16]
 8008440:	0014      	movs	r4, r2
 8008442:	6912      	ldr	r2, [r2, #16]
 8008444:	000d      	movs	r5, r1
 8008446:	b089      	sub	sp, #36	; 0x24
 8008448:	4293      	cmp	r3, r2
 800844a:	da01      	bge.n	8008450 <__multiply+0x14>
 800844c:	0025      	movs	r5, r4
 800844e:	000c      	movs	r4, r1
 8008450:	692f      	ldr	r7, [r5, #16]
 8008452:	6926      	ldr	r6, [r4, #16]
 8008454:	6869      	ldr	r1, [r5, #4]
 8008456:	19bb      	adds	r3, r7, r6
 8008458:	9302      	str	r3, [sp, #8]
 800845a:	68ab      	ldr	r3, [r5, #8]
 800845c:	19ba      	adds	r2, r7, r6
 800845e:	4293      	cmp	r3, r2
 8008460:	da00      	bge.n	8008464 <__multiply+0x28>
 8008462:	3101      	adds	r1, #1
 8008464:	f7ff fe94 	bl	8008190 <_Balloc>
 8008468:	9001      	str	r0, [sp, #4]
 800846a:	2800      	cmp	r0, #0
 800846c:	d106      	bne.n	800847c <__multiply+0x40>
 800846e:	215e      	movs	r1, #94	; 0x5e
 8008470:	0002      	movs	r2, r0
 8008472:	4b48      	ldr	r3, [pc, #288]	; (8008594 <__multiply+0x158>)
 8008474:	4848      	ldr	r0, [pc, #288]	; (8008598 <__multiply+0x15c>)
 8008476:	31ff      	adds	r1, #255	; 0xff
 8008478:	f000 fda2 	bl	8008fc0 <__assert_func>
 800847c:	9b01      	ldr	r3, [sp, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	3314      	adds	r3, #20
 8008482:	469c      	mov	ip, r3
 8008484:	19bb      	adds	r3, r7, r6
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4463      	add	r3, ip
 800848a:	9303      	str	r3, [sp, #12]
 800848c:	4663      	mov	r3, ip
 800848e:	9903      	ldr	r1, [sp, #12]
 8008490:	428b      	cmp	r3, r1
 8008492:	d32c      	bcc.n	80084ee <__multiply+0xb2>
 8008494:	002b      	movs	r3, r5
 8008496:	0022      	movs	r2, r4
 8008498:	3314      	adds	r3, #20
 800849a:	00bf      	lsls	r7, r7, #2
 800849c:	3214      	adds	r2, #20
 800849e:	9306      	str	r3, [sp, #24]
 80084a0:	00b6      	lsls	r6, r6, #2
 80084a2:	19db      	adds	r3, r3, r7
 80084a4:	9304      	str	r3, [sp, #16]
 80084a6:	1993      	adds	r3, r2, r6
 80084a8:	9307      	str	r3, [sp, #28]
 80084aa:	2304      	movs	r3, #4
 80084ac:	9305      	str	r3, [sp, #20]
 80084ae:	002b      	movs	r3, r5
 80084b0:	9904      	ldr	r1, [sp, #16]
 80084b2:	3315      	adds	r3, #21
 80084b4:	9200      	str	r2, [sp, #0]
 80084b6:	4299      	cmp	r1, r3
 80084b8:	d305      	bcc.n	80084c6 <__multiply+0x8a>
 80084ba:	1b4b      	subs	r3, r1, r5
 80084bc:	3b15      	subs	r3, #21
 80084be:	089b      	lsrs	r3, r3, #2
 80084c0:	3301      	adds	r3, #1
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	9305      	str	r3, [sp, #20]
 80084c6:	9b07      	ldr	r3, [sp, #28]
 80084c8:	9a00      	ldr	r2, [sp, #0]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d311      	bcc.n	80084f2 <__multiply+0xb6>
 80084ce:	9b02      	ldr	r3, [sp, #8]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	dd06      	ble.n	80084e2 <__multiply+0xa6>
 80084d4:	9b03      	ldr	r3, [sp, #12]
 80084d6:	3b04      	subs	r3, #4
 80084d8:	9303      	str	r3, [sp, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d054      	beq.n	800858c <__multiply+0x150>
 80084e2:	9b01      	ldr	r3, [sp, #4]
 80084e4:	9a02      	ldr	r2, [sp, #8]
 80084e6:	0018      	movs	r0, r3
 80084e8:	611a      	str	r2, [r3, #16]
 80084ea:	b009      	add	sp, #36	; 0x24
 80084ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084ee:	c304      	stmia	r3!, {r2}
 80084f0:	e7cd      	b.n	800848e <__multiply+0x52>
 80084f2:	9b00      	ldr	r3, [sp, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	b298      	uxth	r0, r3
 80084f8:	2800      	cmp	r0, #0
 80084fa:	d01c      	beq.n	8008536 <__multiply+0xfa>
 80084fc:	4667      	mov	r7, ip
 80084fe:	2400      	movs	r4, #0
 8008500:	9e06      	ldr	r6, [sp, #24]
 8008502:	ce02      	ldmia	r6!, {r1}
 8008504:	683a      	ldr	r2, [r7, #0]
 8008506:	b28b      	uxth	r3, r1
 8008508:	4343      	muls	r3, r0
 800850a:	0c09      	lsrs	r1, r1, #16
 800850c:	4341      	muls	r1, r0
 800850e:	b292      	uxth	r2, r2
 8008510:	189b      	adds	r3, r3, r2
 8008512:	191b      	adds	r3, r3, r4
 8008514:	000c      	movs	r4, r1
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	0c11      	lsrs	r1, r2, #16
 800851a:	1861      	adds	r1, r4, r1
 800851c:	0c1c      	lsrs	r4, r3, #16
 800851e:	1909      	adds	r1, r1, r4
 8008520:	0c0c      	lsrs	r4, r1, #16
 8008522:	b29b      	uxth	r3, r3
 8008524:	0409      	lsls	r1, r1, #16
 8008526:	430b      	orrs	r3, r1
 8008528:	c708      	stmia	r7!, {r3}
 800852a:	9b04      	ldr	r3, [sp, #16]
 800852c:	42b3      	cmp	r3, r6
 800852e:	d8e8      	bhi.n	8008502 <__multiply+0xc6>
 8008530:	4663      	mov	r3, ip
 8008532:	9a05      	ldr	r2, [sp, #20]
 8008534:	509c      	str	r4, [r3, r2]
 8008536:	9b00      	ldr	r3, [sp, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	0c1e      	lsrs	r6, r3, #16
 800853c:	d020      	beq.n	8008580 <__multiply+0x144>
 800853e:	4663      	mov	r3, ip
 8008540:	002c      	movs	r4, r5
 8008542:	4660      	mov	r0, ip
 8008544:	2700      	movs	r7, #0
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	3414      	adds	r4, #20
 800854a:	6822      	ldr	r2, [r4, #0]
 800854c:	b29b      	uxth	r3, r3
 800854e:	b291      	uxth	r1, r2
 8008550:	4371      	muls	r1, r6
 8008552:	6802      	ldr	r2, [r0, #0]
 8008554:	0c12      	lsrs	r2, r2, #16
 8008556:	1889      	adds	r1, r1, r2
 8008558:	19cf      	adds	r7, r1, r7
 800855a:	0439      	lsls	r1, r7, #16
 800855c:	430b      	orrs	r3, r1
 800855e:	6003      	str	r3, [r0, #0]
 8008560:	cc02      	ldmia	r4!, {r1}
 8008562:	6843      	ldr	r3, [r0, #4]
 8008564:	0c09      	lsrs	r1, r1, #16
 8008566:	4371      	muls	r1, r6
 8008568:	b29b      	uxth	r3, r3
 800856a:	0c3f      	lsrs	r7, r7, #16
 800856c:	18cb      	adds	r3, r1, r3
 800856e:	9a04      	ldr	r2, [sp, #16]
 8008570:	19db      	adds	r3, r3, r7
 8008572:	0c1f      	lsrs	r7, r3, #16
 8008574:	3004      	adds	r0, #4
 8008576:	42a2      	cmp	r2, r4
 8008578:	d8e7      	bhi.n	800854a <__multiply+0x10e>
 800857a:	4662      	mov	r2, ip
 800857c:	9905      	ldr	r1, [sp, #20]
 800857e:	5053      	str	r3, [r2, r1]
 8008580:	9b00      	ldr	r3, [sp, #0]
 8008582:	3304      	adds	r3, #4
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	2304      	movs	r3, #4
 8008588:	449c      	add	ip, r3
 800858a:	e79c      	b.n	80084c6 <__multiply+0x8a>
 800858c:	9b02      	ldr	r3, [sp, #8]
 800858e:	3b01      	subs	r3, #1
 8008590:	9302      	str	r3, [sp, #8]
 8008592:	e79c      	b.n	80084ce <__multiply+0x92>
 8008594:	08009ea4 	.word	0x08009ea4
 8008598:	08009f34 	.word	0x08009f34

0800859c <__pow5mult>:
 800859c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800859e:	2303      	movs	r3, #3
 80085a0:	0015      	movs	r5, r2
 80085a2:	0007      	movs	r7, r0
 80085a4:	000e      	movs	r6, r1
 80085a6:	401a      	ands	r2, r3
 80085a8:	421d      	tst	r5, r3
 80085aa:	d008      	beq.n	80085be <__pow5mult+0x22>
 80085ac:	4925      	ldr	r1, [pc, #148]	; (8008644 <__pow5mult+0xa8>)
 80085ae:	3a01      	subs	r2, #1
 80085b0:	0092      	lsls	r2, r2, #2
 80085b2:	5852      	ldr	r2, [r2, r1]
 80085b4:	2300      	movs	r3, #0
 80085b6:	0031      	movs	r1, r6
 80085b8:	f7ff fe52 	bl	8008260 <__multadd>
 80085bc:	0006      	movs	r6, r0
 80085be:	10ad      	asrs	r5, r5, #2
 80085c0:	d03d      	beq.n	800863e <__pow5mult+0xa2>
 80085c2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80085c4:	2c00      	cmp	r4, #0
 80085c6:	d10f      	bne.n	80085e8 <__pow5mult+0x4c>
 80085c8:	2010      	movs	r0, #16
 80085ca:	f7ff fdb1 	bl	8008130 <malloc>
 80085ce:	1e02      	subs	r2, r0, #0
 80085d0:	6278      	str	r0, [r7, #36]	; 0x24
 80085d2:	d105      	bne.n	80085e0 <__pow5mult+0x44>
 80085d4:	21d7      	movs	r1, #215	; 0xd7
 80085d6:	4b1c      	ldr	r3, [pc, #112]	; (8008648 <__pow5mult+0xac>)
 80085d8:	481c      	ldr	r0, [pc, #112]	; (800864c <__pow5mult+0xb0>)
 80085da:	0049      	lsls	r1, r1, #1
 80085dc:	f000 fcf0 	bl	8008fc0 <__assert_func>
 80085e0:	6044      	str	r4, [r0, #4]
 80085e2:	6084      	str	r4, [r0, #8]
 80085e4:	6004      	str	r4, [r0, #0]
 80085e6:	60c4      	str	r4, [r0, #12]
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	689c      	ldr	r4, [r3, #8]
 80085ec:	9301      	str	r3, [sp, #4]
 80085ee:	2c00      	cmp	r4, #0
 80085f0:	d108      	bne.n	8008604 <__pow5mult+0x68>
 80085f2:	0038      	movs	r0, r7
 80085f4:	4916      	ldr	r1, [pc, #88]	; (8008650 <__pow5mult+0xb4>)
 80085f6:	f7ff ff0b 	bl	8008410 <__i2b>
 80085fa:	9b01      	ldr	r3, [sp, #4]
 80085fc:	0004      	movs	r4, r0
 80085fe:	6098      	str	r0, [r3, #8]
 8008600:	2300      	movs	r3, #0
 8008602:	6003      	str	r3, [r0, #0]
 8008604:	2301      	movs	r3, #1
 8008606:	421d      	tst	r5, r3
 8008608:	d00a      	beq.n	8008620 <__pow5mult+0x84>
 800860a:	0031      	movs	r1, r6
 800860c:	0022      	movs	r2, r4
 800860e:	0038      	movs	r0, r7
 8008610:	f7ff ff14 	bl	800843c <__multiply>
 8008614:	0031      	movs	r1, r6
 8008616:	9001      	str	r0, [sp, #4]
 8008618:	0038      	movs	r0, r7
 800861a:	f7ff fdfd 	bl	8008218 <_Bfree>
 800861e:	9e01      	ldr	r6, [sp, #4]
 8008620:	106d      	asrs	r5, r5, #1
 8008622:	d00c      	beq.n	800863e <__pow5mult+0xa2>
 8008624:	6820      	ldr	r0, [r4, #0]
 8008626:	2800      	cmp	r0, #0
 8008628:	d107      	bne.n	800863a <__pow5mult+0x9e>
 800862a:	0022      	movs	r2, r4
 800862c:	0021      	movs	r1, r4
 800862e:	0038      	movs	r0, r7
 8008630:	f7ff ff04 	bl	800843c <__multiply>
 8008634:	2300      	movs	r3, #0
 8008636:	6020      	str	r0, [r4, #0]
 8008638:	6003      	str	r3, [r0, #0]
 800863a:	0004      	movs	r4, r0
 800863c:	e7e2      	b.n	8008604 <__pow5mult+0x68>
 800863e:	0030      	movs	r0, r6
 8008640:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008642:	46c0      	nop			; (mov r8, r8)
 8008644:	0800a088 	.word	0x0800a088
 8008648:	08009e2e 	.word	0x08009e2e
 800864c:	08009f34 	.word	0x08009f34
 8008650:	00000271 	.word	0x00000271

08008654 <__lshift>:
 8008654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008656:	000c      	movs	r4, r1
 8008658:	0017      	movs	r7, r2
 800865a:	6923      	ldr	r3, [r4, #16]
 800865c:	1155      	asrs	r5, r2, #5
 800865e:	b087      	sub	sp, #28
 8008660:	18eb      	adds	r3, r5, r3
 8008662:	9302      	str	r3, [sp, #8]
 8008664:	3301      	adds	r3, #1
 8008666:	9301      	str	r3, [sp, #4]
 8008668:	6849      	ldr	r1, [r1, #4]
 800866a:	68a3      	ldr	r3, [r4, #8]
 800866c:	9004      	str	r0, [sp, #16]
 800866e:	9a01      	ldr	r2, [sp, #4]
 8008670:	4293      	cmp	r3, r2
 8008672:	db11      	blt.n	8008698 <__lshift+0x44>
 8008674:	9804      	ldr	r0, [sp, #16]
 8008676:	f7ff fd8b 	bl	8008190 <_Balloc>
 800867a:	0002      	movs	r2, r0
 800867c:	2300      	movs	r3, #0
 800867e:	3214      	adds	r2, #20
 8008680:	0006      	movs	r6, r0
 8008682:	0011      	movs	r1, r2
 8008684:	9203      	str	r2, [sp, #12]
 8008686:	4298      	cmp	r0, r3
 8008688:	d10d      	bne.n	80086a6 <__lshift+0x52>
 800868a:	21da      	movs	r1, #218	; 0xda
 800868c:	0002      	movs	r2, r0
 800868e:	4b27      	ldr	r3, [pc, #156]	; (800872c <__lshift+0xd8>)
 8008690:	4827      	ldr	r0, [pc, #156]	; (8008730 <__lshift+0xdc>)
 8008692:	31ff      	adds	r1, #255	; 0xff
 8008694:	f000 fc94 	bl	8008fc0 <__assert_func>
 8008698:	3101      	adds	r1, #1
 800869a:	005b      	lsls	r3, r3, #1
 800869c:	e7e7      	b.n	800866e <__lshift+0x1a>
 800869e:	2200      	movs	r2, #0
 80086a0:	0098      	lsls	r0, r3, #2
 80086a2:	500a      	str	r2, [r1, r0]
 80086a4:	3301      	adds	r3, #1
 80086a6:	42ab      	cmp	r3, r5
 80086a8:	dbf9      	blt.n	800869e <__lshift+0x4a>
 80086aa:	43eb      	mvns	r3, r5
 80086ac:	17db      	asrs	r3, r3, #31
 80086ae:	401d      	ands	r5, r3
 80086b0:	9b03      	ldr	r3, [sp, #12]
 80086b2:	00ad      	lsls	r5, r5, #2
 80086b4:	211f      	movs	r1, #31
 80086b6:	0038      	movs	r0, r7
 80086b8:	195d      	adds	r5, r3, r5
 80086ba:	0023      	movs	r3, r4
 80086bc:	6922      	ldr	r2, [r4, #16]
 80086be:	3314      	adds	r3, #20
 80086c0:	0092      	lsls	r2, r2, #2
 80086c2:	4008      	ands	r0, r1
 80086c4:	4684      	mov	ip, r0
 80086c6:	189a      	adds	r2, r3, r2
 80086c8:	420f      	tst	r7, r1
 80086ca:	d02a      	beq.n	8008722 <__lshift+0xce>
 80086cc:	3101      	adds	r1, #1
 80086ce:	1a09      	subs	r1, r1, r0
 80086d0:	9105      	str	r1, [sp, #20]
 80086d2:	2100      	movs	r1, #0
 80086d4:	9503      	str	r5, [sp, #12]
 80086d6:	4667      	mov	r7, ip
 80086d8:	6818      	ldr	r0, [r3, #0]
 80086da:	40b8      	lsls	r0, r7
 80086dc:	4301      	orrs	r1, r0
 80086de:	9803      	ldr	r0, [sp, #12]
 80086e0:	c002      	stmia	r0!, {r1}
 80086e2:	cb02      	ldmia	r3!, {r1}
 80086e4:	9003      	str	r0, [sp, #12]
 80086e6:	9805      	ldr	r0, [sp, #20]
 80086e8:	40c1      	lsrs	r1, r0
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d8f3      	bhi.n	80086d6 <__lshift+0x82>
 80086ee:	0020      	movs	r0, r4
 80086f0:	3015      	adds	r0, #21
 80086f2:	2304      	movs	r3, #4
 80086f4:	4282      	cmp	r2, r0
 80086f6:	d304      	bcc.n	8008702 <__lshift+0xae>
 80086f8:	1b13      	subs	r3, r2, r4
 80086fa:	3b15      	subs	r3, #21
 80086fc:	089b      	lsrs	r3, r3, #2
 80086fe:	3301      	adds	r3, #1
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	50e9      	str	r1, [r5, r3]
 8008704:	2900      	cmp	r1, #0
 8008706:	d002      	beq.n	800870e <__lshift+0xba>
 8008708:	9b02      	ldr	r3, [sp, #8]
 800870a:	3302      	adds	r3, #2
 800870c:	9301      	str	r3, [sp, #4]
 800870e:	9b01      	ldr	r3, [sp, #4]
 8008710:	9804      	ldr	r0, [sp, #16]
 8008712:	3b01      	subs	r3, #1
 8008714:	0021      	movs	r1, r4
 8008716:	6133      	str	r3, [r6, #16]
 8008718:	f7ff fd7e 	bl	8008218 <_Bfree>
 800871c:	0030      	movs	r0, r6
 800871e:	b007      	add	sp, #28
 8008720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008722:	cb02      	ldmia	r3!, {r1}
 8008724:	c502      	stmia	r5!, {r1}
 8008726:	429a      	cmp	r2, r3
 8008728:	d8fb      	bhi.n	8008722 <__lshift+0xce>
 800872a:	e7f0      	b.n	800870e <__lshift+0xba>
 800872c:	08009ea4 	.word	0x08009ea4
 8008730:	08009f34 	.word	0x08009f34

08008734 <__mcmp>:
 8008734:	6902      	ldr	r2, [r0, #16]
 8008736:	690b      	ldr	r3, [r1, #16]
 8008738:	b530      	push	{r4, r5, lr}
 800873a:	0004      	movs	r4, r0
 800873c:	1ad0      	subs	r0, r2, r3
 800873e:	429a      	cmp	r2, r3
 8008740:	d10d      	bne.n	800875e <__mcmp+0x2a>
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	3414      	adds	r4, #20
 8008746:	3114      	adds	r1, #20
 8008748:	18e2      	adds	r2, r4, r3
 800874a:	18c9      	adds	r1, r1, r3
 800874c:	3a04      	subs	r2, #4
 800874e:	3904      	subs	r1, #4
 8008750:	6815      	ldr	r5, [r2, #0]
 8008752:	680b      	ldr	r3, [r1, #0]
 8008754:	429d      	cmp	r5, r3
 8008756:	d003      	beq.n	8008760 <__mcmp+0x2c>
 8008758:	2001      	movs	r0, #1
 800875a:	429d      	cmp	r5, r3
 800875c:	d303      	bcc.n	8008766 <__mcmp+0x32>
 800875e:	bd30      	pop	{r4, r5, pc}
 8008760:	4294      	cmp	r4, r2
 8008762:	d3f3      	bcc.n	800874c <__mcmp+0x18>
 8008764:	e7fb      	b.n	800875e <__mcmp+0x2a>
 8008766:	4240      	negs	r0, r0
 8008768:	e7f9      	b.n	800875e <__mcmp+0x2a>
	...

0800876c <__mdiff>:
 800876c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800876e:	000e      	movs	r6, r1
 8008770:	0007      	movs	r7, r0
 8008772:	0011      	movs	r1, r2
 8008774:	0030      	movs	r0, r6
 8008776:	b087      	sub	sp, #28
 8008778:	0014      	movs	r4, r2
 800877a:	f7ff ffdb 	bl	8008734 <__mcmp>
 800877e:	1e05      	subs	r5, r0, #0
 8008780:	d110      	bne.n	80087a4 <__mdiff+0x38>
 8008782:	0001      	movs	r1, r0
 8008784:	0038      	movs	r0, r7
 8008786:	f7ff fd03 	bl	8008190 <_Balloc>
 800878a:	1e02      	subs	r2, r0, #0
 800878c:	d104      	bne.n	8008798 <__mdiff+0x2c>
 800878e:	4b40      	ldr	r3, [pc, #256]	; (8008890 <__mdiff+0x124>)
 8008790:	4940      	ldr	r1, [pc, #256]	; (8008894 <__mdiff+0x128>)
 8008792:	4841      	ldr	r0, [pc, #260]	; (8008898 <__mdiff+0x12c>)
 8008794:	f000 fc14 	bl	8008fc0 <__assert_func>
 8008798:	2301      	movs	r3, #1
 800879a:	6145      	str	r5, [r0, #20]
 800879c:	6103      	str	r3, [r0, #16]
 800879e:	0010      	movs	r0, r2
 80087a0:	b007      	add	sp, #28
 80087a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087a4:	2301      	movs	r3, #1
 80087a6:	9301      	str	r3, [sp, #4]
 80087a8:	2800      	cmp	r0, #0
 80087aa:	db04      	blt.n	80087b6 <__mdiff+0x4a>
 80087ac:	0023      	movs	r3, r4
 80087ae:	0034      	movs	r4, r6
 80087b0:	001e      	movs	r6, r3
 80087b2:	2300      	movs	r3, #0
 80087b4:	9301      	str	r3, [sp, #4]
 80087b6:	0038      	movs	r0, r7
 80087b8:	6861      	ldr	r1, [r4, #4]
 80087ba:	f7ff fce9 	bl	8008190 <_Balloc>
 80087be:	1e02      	subs	r2, r0, #0
 80087c0:	d103      	bne.n	80087ca <__mdiff+0x5e>
 80087c2:	2190      	movs	r1, #144	; 0x90
 80087c4:	4b32      	ldr	r3, [pc, #200]	; (8008890 <__mdiff+0x124>)
 80087c6:	0089      	lsls	r1, r1, #2
 80087c8:	e7e3      	b.n	8008792 <__mdiff+0x26>
 80087ca:	9b01      	ldr	r3, [sp, #4]
 80087cc:	2700      	movs	r7, #0
 80087ce:	60c3      	str	r3, [r0, #12]
 80087d0:	6920      	ldr	r0, [r4, #16]
 80087d2:	3414      	adds	r4, #20
 80087d4:	9401      	str	r4, [sp, #4]
 80087d6:	9b01      	ldr	r3, [sp, #4]
 80087d8:	0084      	lsls	r4, r0, #2
 80087da:	191b      	adds	r3, r3, r4
 80087dc:	0034      	movs	r4, r6
 80087de:	9302      	str	r3, [sp, #8]
 80087e0:	6933      	ldr	r3, [r6, #16]
 80087e2:	3414      	adds	r4, #20
 80087e4:	0099      	lsls	r1, r3, #2
 80087e6:	1863      	adds	r3, r4, r1
 80087e8:	9303      	str	r3, [sp, #12]
 80087ea:	0013      	movs	r3, r2
 80087ec:	3314      	adds	r3, #20
 80087ee:	469c      	mov	ip, r3
 80087f0:	9305      	str	r3, [sp, #20]
 80087f2:	9b01      	ldr	r3, [sp, #4]
 80087f4:	9304      	str	r3, [sp, #16]
 80087f6:	9b04      	ldr	r3, [sp, #16]
 80087f8:	cc02      	ldmia	r4!, {r1}
 80087fa:	cb20      	ldmia	r3!, {r5}
 80087fc:	9304      	str	r3, [sp, #16]
 80087fe:	b2ab      	uxth	r3, r5
 8008800:	19df      	adds	r7, r3, r7
 8008802:	b28b      	uxth	r3, r1
 8008804:	1afb      	subs	r3, r7, r3
 8008806:	0c2d      	lsrs	r5, r5, #16
 8008808:	0c09      	lsrs	r1, r1, #16
 800880a:	1a69      	subs	r1, r5, r1
 800880c:	141d      	asrs	r5, r3, #16
 800880e:	1949      	adds	r1, r1, r5
 8008810:	140f      	asrs	r7, r1, #16
 8008812:	b29b      	uxth	r3, r3
 8008814:	0409      	lsls	r1, r1, #16
 8008816:	430b      	orrs	r3, r1
 8008818:	4661      	mov	r1, ip
 800881a:	c108      	stmia	r1!, {r3}
 800881c:	9b03      	ldr	r3, [sp, #12]
 800881e:	468c      	mov	ip, r1
 8008820:	42a3      	cmp	r3, r4
 8008822:	d8e8      	bhi.n	80087f6 <__mdiff+0x8a>
 8008824:	0031      	movs	r1, r6
 8008826:	9c03      	ldr	r4, [sp, #12]
 8008828:	3115      	adds	r1, #21
 800882a:	2304      	movs	r3, #4
 800882c:	428c      	cmp	r4, r1
 800882e:	d304      	bcc.n	800883a <__mdiff+0xce>
 8008830:	1ba3      	subs	r3, r4, r6
 8008832:	3b15      	subs	r3, #21
 8008834:	089b      	lsrs	r3, r3, #2
 8008836:	3301      	adds	r3, #1
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	9901      	ldr	r1, [sp, #4]
 800883c:	18cc      	adds	r4, r1, r3
 800883e:	9905      	ldr	r1, [sp, #20]
 8008840:	0026      	movs	r6, r4
 8008842:	18cb      	adds	r3, r1, r3
 8008844:	469c      	mov	ip, r3
 8008846:	9902      	ldr	r1, [sp, #8]
 8008848:	428e      	cmp	r6, r1
 800884a:	d310      	bcc.n	800886e <__mdiff+0x102>
 800884c:	9e02      	ldr	r6, [sp, #8]
 800884e:	1ee5      	subs	r5, r4, #3
 8008850:	2100      	movs	r1, #0
 8008852:	42ae      	cmp	r6, r5
 8008854:	d304      	bcc.n	8008860 <__mdiff+0xf4>
 8008856:	0031      	movs	r1, r6
 8008858:	3103      	adds	r1, #3
 800885a:	1b09      	subs	r1, r1, r4
 800885c:	0889      	lsrs	r1, r1, #2
 800885e:	0089      	lsls	r1, r1, #2
 8008860:	185b      	adds	r3, r3, r1
 8008862:	3b04      	subs	r3, #4
 8008864:	6819      	ldr	r1, [r3, #0]
 8008866:	2900      	cmp	r1, #0
 8008868:	d00f      	beq.n	800888a <__mdiff+0x11e>
 800886a:	6110      	str	r0, [r2, #16]
 800886c:	e797      	b.n	800879e <__mdiff+0x32>
 800886e:	ce02      	ldmia	r6!, {r1}
 8008870:	b28d      	uxth	r5, r1
 8008872:	19ed      	adds	r5, r5, r7
 8008874:	0c0f      	lsrs	r7, r1, #16
 8008876:	1429      	asrs	r1, r5, #16
 8008878:	1879      	adds	r1, r7, r1
 800887a:	140f      	asrs	r7, r1, #16
 800887c:	b2ad      	uxth	r5, r5
 800887e:	0409      	lsls	r1, r1, #16
 8008880:	430d      	orrs	r5, r1
 8008882:	4661      	mov	r1, ip
 8008884:	c120      	stmia	r1!, {r5}
 8008886:	468c      	mov	ip, r1
 8008888:	e7dd      	b.n	8008846 <__mdiff+0xda>
 800888a:	3801      	subs	r0, #1
 800888c:	e7e9      	b.n	8008862 <__mdiff+0xf6>
 800888e:	46c0      	nop			; (mov r8, r8)
 8008890:	08009ea4 	.word	0x08009ea4
 8008894:	00000232 	.word	0x00000232
 8008898:	08009f34 	.word	0x08009f34

0800889c <__ulp>:
 800889c:	4b0f      	ldr	r3, [pc, #60]	; (80088dc <__ulp+0x40>)
 800889e:	4019      	ands	r1, r3
 80088a0:	4b0f      	ldr	r3, [pc, #60]	; (80088e0 <__ulp+0x44>)
 80088a2:	18c9      	adds	r1, r1, r3
 80088a4:	2900      	cmp	r1, #0
 80088a6:	dd04      	ble.n	80088b2 <__ulp+0x16>
 80088a8:	2200      	movs	r2, #0
 80088aa:	000b      	movs	r3, r1
 80088ac:	0010      	movs	r0, r2
 80088ae:	0019      	movs	r1, r3
 80088b0:	4770      	bx	lr
 80088b2:	4249      	negs	r1, r1
 80088b4:	2200      	movs	r2, #0
 80088b6:	2300      	movs	r3, #0
 80088b8:	1509      	asrs	r1, r1, #20
 80088ba:	2913      	cmp	r1, #19
 80088bc:	dc04      	bgt.n	80088c8 <__ulp+0x2c>
 80088be:	2080      	movs	r0, #128	; 0x80
 80088c0:	0300      	lsls	r0, r0, #12
 80088c2:	4108      	asrs	r0, r1
 80088c4:	0003      	movs	r3, r0
 80088c6:	e7f1      	b.n	80088ac <__ulp+0x10>
 80088c8:	3914      	subs	r1, #20
 80088ca:	2001      	movs	r0, #1
 80088cc:	291e      	cmp	r1, #30
 80088ce:	dc02      	bgt.n	80088d6 <__ulp+0x3a>
 80088d0:	2080      	movs	r0, #128	; 0x80
 80088d2:	0600      	lsls	r0, r0, #24
 80088d4:	40c8      	lsrs	r0, r1
 80088d6:	0002      	movs	r2, r0
 80088d8:	e7e8      	b.n	80088ac <__ulp+0x10>
 80088da:	46c0      	nop			; (mov r8, r8)
 80088dc:	7ff00000 	.word	0x7ff00000
 80088e0:	fcc00000 	.word	0xfcc00000

080088e4 <__b2d>:
 80088e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088e6:	0006      	movs	r6, r0
 80088e8:	6903      	ldr	r3, [r0, #16]
 80088ea:	3614      	adds	r6, #20
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	18f3      	adds	r3, r6, r3
 80088f0:	1f1d      	subs	r5, r3, #4
 80088f2:	682c      	ldr	r4, [r5, #0]
 80088f4:	000f      	movs	r7, r1
 80088f6:	0020      	movs	r0, r4
 80088f8:	9301      	str	r3, [sp, #4]
 80088fa:	f7ff fd41 	bl	8008380 <__hi0bits>
 80088fe:	2320      	movs	r3, #32
 8008900:	1a1b      	subs	r3, r3, r0
 8008902:	491f      	ldr	r1, [pc, #124]	; (8008980 <__b2d+0x9c>)
 8008904:	603b      	str	r3, [r7, #0]
 8008906:	280a      	cmp	r0, #10
 8008908:	dc16      	bgt.n	8008938 <__b2d+0x54>
 800890a:	230b      	movs	r3, #11
 800890c:	0027      	movs	r7, r4
 800890e:	1a1b      	subs	r3, r3, r0
 8008910:	40df      	lsrs	r7, r3
 8008912:	4339      	orrs	r1, r7
 8008914:	469c      	mov	ip, r3
 8008916:	000b      	movs	r3, r1
 8008918:	2100      	movs	r1, #0
 800891a:	42ae      	cmp	r6, r5
 800891c:	d202      	bcs.n	8008924 <__b2d+0x40>
 800891e:	9901      	ldr	r1, [sp, #4]
 8008920:	3908      	subs	r1, #8
 8008922:	6809      	ldr	r1, [r1, #0]
 8008924:	3015      	adds	r0, #21
 8008926:	4084      	lsls	r4, r0
 8008928:	4660      	mov	r0, ip
 800892a:	40c1      	lsrs	r1, r0
 800892c:	430c      	orrs	r4, r1
 800892e:	0022      	movs	r2, r4
 8008930:	0010      	movs	r0, r2
 8008932:	0019      	movs	r1, r3
 8008934:	b003      	add	sp, #12
 8008936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008938:	2700      	movs	r7, #0
 800893a:	42ae      	cmp	r6, r5
 800893c:	d202      	bcs.n	8008944 <__b2d+0x60>
 800893e:	9d01      	ldr	r5, [sp, #4]
 8008940:	3d08      	subs	r5, #8
 8008942:	682f      	ldr	r7, [r5, #0]
 8008944:	230b      	movs	r3, #11
 8008946:	425b      	negs	r3, r3
 8008948:	469c      	mov	ip, r3
 800894a:	4484      	add	ip, r0
 800894c:	280b      	cmp	r0, #11
 800894e:	d013      	beq.n	8008978 <__b2d+0x94>
 8008950:	4663      	mov	r3, ip
 8008952:	2020      	movs	r0, #32
 8008954:	409c      	lsls	r4, r3
 8008956:	1ac0      	subs	r0, r0, r3
 8008958:	003b      	movs	r3, r7
 800895a:	40c3      	lsrs	r3, r0
 800895c:	431c      	orrs	r4, r3
 800895e:	4321      	orrs	r1, r4
 8008960:	000b      	movs	r3, r1
 8008962:	2100      	movs	r1, #0
 8008964:	42b5      	cmp	r5, r6
 8008966:	d901      	bls.n	800896c <__b2d+0x88>
 8008968:	3d04      	subs	r5, #4
 800896a:	6829      	ldr	r1, [r5, #0]
 800896c:	4664      	mov	r4, ip
 800896e:	40c1      	lsrs	r1, r0
 8008970:	40a7      	lsls	r7, r4
 8008972:	430f      	orrs	r7, r1
 8008974:	003a      	movs	r2, r7
 8008976:	e7db      	b.n	8008930 <__b2d+0x4c>
 8008978:	4321      	orrs	r1, r4
 800897a:	000b      	movs	r3, r1
 800897c:	e7fa      	b.n	8008974 <__b2d+0x90>
 800897e:	46c0      	nop			; (mov r8, r8)
 8008980:	3ff00000 	.word	0x3ff00000

08008984 <__d2b>:
 8008984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008986:	2101      	movs	r1, #1
 8008988:	0014      	movs	r4, r2
 800898a:	001e      	movs	r6, r3
 800898c:	9f08      	ldr	r7, [sp, #32]
 800898e:	f7ff fbff 	bl	8008190 <_Balloc>
 8008992:	1e05      	subs	r5, r0, #0
 8008994:	d105      	bne.n	80089a2 <__d2b+0x1e>
 8008996:	0002      	movs	r2, r0
 8008998:	4b26      	ldr	r3, [pc, #152]	; (8008a34 <__d2b+0xb0>)
 800899a:	4927      	ldr	r1, [pc, #156]	; (8008a38 <__d2b+0xb4>)
 800899c:	4827      	ldr	r0, [pc, #156]	; (8008a3c <__d2b+0xb8>)
 800899e:	f000 fb0f 	bl	8008fc0 <__assert_func>
 80089a2:	0333      	lsls	r3, r6, #12
 80089a4:	0076      	lsls	r6, r6, #1
 80089a6:	0b1b      	lsrs	r3, r3, #12
 80089a8:	0d76      	lsrs	r6, r6, #21
 80089aa:	d124      	bne.n	80089f6 <__d2b+0x72>
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	2c00      	cmp	r4, #0
 80089b0:	d027      	beq.n	8008a02 <__d2b+0x7e>
 80089b2:	4668      	mov	r0, sp
 80089b4:	9400      	str	r4, [sp, #0]
 80089b6:	f7ff fcfd 	bl	80083b4 <__lo0bits>
 80089ba:	9c00      	ldr	r4, [sp, #0]
 80089bc:	2800      	cmp	r0, #0
 80089be:	d01e      	beq.n	80089fe <__d2b+0x7a>
 80089c0:	9b01      	ldr	r3, [sp, #4]
 80089c2:	2120      	movs	r1, #32
 80089c4:	001a      	movs	r2, r3
 80089c6:	1a09      	subs	r1, r1, r0
 80089c8:	408a      	lsls	r2, r1
 80089ca:	40c3      	lsrs	r3, r0
 80089cc:	4322      	orrs	r2, r4
 80089ce:	616a      	str	r2, [r5, #20]
 80089d0:	9301      	str	r3, [sp, #4]
 80089d2:	9c01      	ldr	r4, [sp, #4]
 80089d4:	61ac      	str	r4, [r5, #24]
 80089d6:	1e63      	subs	r3, r4, #1
 80089d8:	419c      	sbcs	r4, r3
 80089da:	3401      	adds	r4, #1
 80089dc:	612c      	str	r4, [r5, #16]
 80089de:	2e00      	cmp	r6, #0
 80089e0:	d018      	beq.n	8008a14 <__d2b+0x90>
 80089e2:	4b17      	ldr	r3, [pc, #92]	; (8008a40 <__d2b+0xbc>)
 80089e4:	18f6      	adds	r6, r6, r3
 80089e6:	2335      	movs	r3, #53	; 0x35
 80089e8:	1836      	adds	r6, r6, r0
 80089ea:	1a18      	subs	r0, r3, r0
 80089ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ee:	603e      	str	r6, [r7, #0]
 80089f0:	6018      	str	r0, [r3, #0]
 80089f2:	0028      	movs	r0, r5
 80089f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80089f6:	2280      	movs	r2, #128	; 0x80
 80089f8:	0352      	lsls	r2, r2, #13
 80089fa:	4313      	orrs	r3, r2
 80089fc:	e7d6      	b.n	80089ac <__d2b+0x28>
 80089fe:	616c      	str	r4, [r5, #20]
 8008a00:	e7e7      	b.n	80089d2 <__d2b+0x4e>
 8008a02:	a801      	add	r0, sp, #4
 8008a04:	f7ff fcd6 	bl	80083b4 <__lo0bits>
 8008a08:	2401      	movs	r4, #1
 8008a0a:	9b01      	ldr	r3, [sp, #4]
 8008a0c:	612c      	str	r4, [r5, #16]
 8008a0e:	616b      	str	r3, [r5, #20]
 8008a10:	3020      	adds	r0, #32
 8008a12:	e7e4      	b.n	80089de <__d2b+0x5a>
 8008a14:	4b0b      	ldr	r3, [pc, #44]	; (8008a44 <__d2b+0xc0>)
 8008a16:	18c0      	adds	r0, r0, r3
 8008a18:	4b0b      	ldr	r3, [pc, #44]	; (8008a48 <__d2b+0xc4>)
 8008a1a:	6038      	str	r0, [r7, #0]
 8008a1c:	18e3      	adds	r3, r4, r3
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	18eb      	adds	r3, r5, r3
 8008a22:	6958      	ldr	r0, [r3, #20]
 8008a24:	f7ff fcac 	bl	8008380 <__hi0bits>
 8008a28:	0164      	lsls	r4, r4, #5
 8008a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a2c:	1a24      	subs	r4, r4, r0
 8008a2e:	601c      	str	r4, [r3, #0]
 8008a30:	e7df      	b.n	80089f2 <__d2b+0x6e>
 8008a32:	46c0      	nop			; (mov r8, r8)
 8008a34:	08009ea4 	.word	0x08009ea4
 8008a38:	0000030a 	.word	0x0000030a
 8008a3c:	08009f34 	.word	0x08009f34
 8008a40:	fffffbcd 	.word	0xfffffbcd
 8008a44:	fffffbce 	.word	0xfffffbce
 8008a48:	3fffffff 	.word	0x3fffffff

08008a4c <__ratio>:
 8008a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	000d      	movs	r5, r1
 8008a52:	a902      	add	r1, sp, #8
 8008a54:	0004      	movs	r4, r0
 8008a56:	f7ff ff45 	bl	80088e4 <__b2d>
 8008a5a:	9000      	str	r0, [sp, #0]
 8008a5c:	9101      	str	r1, [sp, #4]
 8008a5e:	9e00      	ldr	r6, [sp, #0]
 8008a60:	9f01      	ldr	r7, [sp, #4]
 8008a62:	0028      	movs	r0, r5
 8008a64:	a903      	add	r1, sp, #12
 8008a66:	f7ff ff3d 	bl	80088e4 <__b2d>
 8008a6a:	6924      	ldr	r4, [r4, #16]
 8008a6c:	692d      	ldr	r5, [r5, #16]
 8008a6e:	0002      	movs	r2, r0
 8008a70:	1b65      	subs	r5, r4, r5
 8008a72:	016c      	lsls	r4, r5, #5
 8008a74:	46a4      	mov	ip, r4
 8008a76:	9d03      	ldr	r5, [sp, #12]
 8008a78:	9c02      	ldr	r4, [sp, #8]
 8008a7a:	000b      	movs	r3, r1
 8008a7c:	1b64      	subs	r4, r4, r5
 8008a7e:	4464      	add	r4, ip
 8008a80:	0525      	lsls	r5, r4, #20
 8008a82:	2c00      	cmp	r4, #0
 8008a84:	dd07      	ble.n	8008a96 <__ratio+0x4a>
 8008a86:	9901      	ldr	r1, [sp, #4]
 8008a88:	186f      	adds	r7, r5, r1
 8008a8a:	0030      	movs	r0, r6
 8008a8c:	0039      	movs	r1, r7
 8008a8e:	f7f8 f8e3 	bl	8000c58 <__aeabi_ddiv>
 8008a92:	b005      	add	sp, #20
 8008a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a96:	1b4b      	subs	r3, r1, r5
 8008a98:	e7f7      	b.n	8008a8a <__ratio+0x3e>

08008a9a <__copybits>:
 8008a9a:	b570      	push	{r4, r5, r6, lr}
 8008a9c:	0015      	movs	r5, r2
 8008a9e:	6913      	ldr	r3, [r2, #16]
 8008aa0:	3514      	adds	r5, #20
 8008aa2:	009c      	lsls	r4, r3, #2
 8008aa4:	0006      	movs	r6, r0
 8008aa6:	002b      	movs	r3, r5
 8008aa8:	3901      	subs	r1, #1
 8008aaa:	1149      	asrs	r1, r1, #5
 8008aac:	3101      	adds	r1, #1
 8008aae:	0089      	lsls	r1, r1, #2
 8008ab0:	1841      	adds	r1, r0, r1
 8008ab2:	192c      	adds	r4, r5, r4
 8008ab4:	429c      	cmp	r4, r3
 8008ab6:	d80d      	bhi.n	8008ad4 <__copybits+0x3a>
 8008ab8:	0015      	movs	r5, r2
 8008aba:	3511      	adds	r5, #17
 8008abc:	2300      	movs	r3, #0
 8008abe:	42a5      	cmp	r5, r4
 8008ac0:	d803      	bhi.n	8008aca <__copybits+0x30>
 8008ac2:	1aa3      	subs	r3, r4, r2
 8008ac4:	3b11      	subs	r3, #17
 8008ac6:	089b      	lsrs	r3, r3, #2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	18c0      	adds	r0, r0, r3
 8008acc:	2300      	movs	r3, #0
 8008ace:	4281      	cmp	r1, r0
 8008ad0:	d803      	bhi.n	8008ada <__copybits+0x40>
 8008ad2:	bd70      	pop	{r4, r5, r6, pc}
 8008ad4:	cb20      	ldmia	r3!, {r5}
 8008ad6:	c620      	stmia	r6!, {r5}
 8008ad8:	e7ec      	b.n	8008ab4 <__copybits+0x1a>
 8008ada:	c008      	stmia	r0!, {r3}
 8008adc:	e7f7      	b.n	8008ace <__copybits+0x34>

08008ade <__any_on>:
 8008ade:	0002      	movs	r2, r0
 8008ae0:	6900      	ldr	r0, [r0, #16]
 8008ae2:	b510      	push	{r4, lr}
 8008ae4:	3214      	adds	r2, #20
 8008ae6:	114b      	asrs	r3, r1, #5
 8008ae8:	4298      	cmp	r0, r3
 8008aea:	db13      	blt.n	8008b14 <__any_on+0x36>
 8008aec:	dd0c      	ble.n	8008b08 <__any_on+0x2a>
 8008aee:	241f      	movs	r4, #31
 8008af0:	0008      	movs	r0, r1
 8008af2:	4020      	ands	r0, r4
 8008af4:	4221      	tst	r1, r4
 8008af6:	d007      	beq.n	8008b08 <__any_on+0x2a>
 8008af8:	0099      	lsls	r1, r3, #2
 8008afa:	588c      	ldr	r4, [r1, r2]
 8008afc:	0021      	movs	r1, r4
 8008afe:	40c1      	lsrs	r1, r0
 8008b00:	4081      	lsls	r1, r0
 8008b02:	2001      	movs	r0, #1
 8008b04:	428c      	cmp	r4, r1
 8008b06:	d104      	bne.n	8008b12 <__any_on+0x34>
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	18d3      	adds	r3, r2, r3
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d803      	bhi.n	8008b18 <__any_on+0x3a>
 8008b10:	2000      	movs	r0, #0
 8008b12:	bd10      	pop	{r4, pc}
 8008b14:	0003      	movs	r3, r0
 8008b16:	e7f7      	b.n	8008b08 <__any_on+0x2a>
 8008b18:	3b04      	subs	r3, #4
 8008b1a:	6819      	ldr	r1, [r3, #0]
 8008b1c:	2900      	cmp	r1, #0
 8008b1e:	d0f5      	beq.n	8008b0c <__any_on+0x2e>
 8008b20:	2001      	movs	r0, #1
 8008b22:	e7f6      	b.n	8008b12 <__any_on+0x34>

08008b24 <_calloc_r>:
 8008b24:	434a      	muls	r2, r1
 8008b26:	b570      	push	{r4, r5, r6, lr}
 8008b28:	0011      	movs	r1, r2
 8008b2a:	0015      	movs	r5, r2
 8008b2c:	f000 f852 	bl	8008bd4 <_malloc_r>
 8008b30:	1e04      	subs	r4, r0, #0
 8008b32:	d003      	beq.n	8008b3c <_calloc_r+0x18>
 8008b34:	002a      	movs	r2, r5
 8008b36:	2100      	movs	r1, #0
 8008b38:	f7fc fb56 	bl	80051e8 <memset>
 8008b3c:	0020      	movs	r0, r4
 8008b3e:	bd70      	pop	{r4, r5, r6, pc}

08008b40 <_free_r>:
 8008b40:	b570      	push	{r4, r5, r6, lr}
 8008b42:	0005      	movs	r5, r0
 8008b44:	2900      	cmp	r1, #0
 8008b46:	d010      	beq.n	8008b6a <_free_r+0x2a>
 8008b48:	1f0c      	subs	r4, r1, #4
 8008b4a:	6823      	ldr	r3, [r4, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	da00      	bge.n	8008b52 <_free_r+0x12>
 8008b50:	18e4      	adds	r4, r4, r3
 8008b52:	0028      	movs	r0, r5
 8008b54:	f000 fa76 	bl	8009044 <__malloc_lock>
 8008b58:	4a1d      	ldr	r2, [pc, #116]	; (8008bd0 <_free_r+0x90>)
 8008b5a:	6813      	ldr	r3, [r2, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d105      	bne.n	8008b6c <_free_r+0x2c>
 8008b60:	6063      	str	r3, [r4, #4]
 8008b62:	6014      	str	r4, [r2, #0]
 8008b64:	0028      	movs	r0, r5
 8008b66:	f000 fa75 	bl	8009054 <__malloc_unlock>
 8008b6a:	bd70      	pop	{r4, r5, r6, pc}
 8008b6c:	42a3      	cmp	r3, r4
 8008b6e:	d908      	bls.n	8008b82 <_free_r+0x42>
 8008b70:	6821      	ldr	r1, [r4, #0]
 8008b72:	1860      	adds	r0, r4, r1
 8008b74:	4283      	cmp	r3, r0
 8008b76:	d1f3      	bne.n	8008b60 <_free_r+0x20>
 8008b78:	6818      	ldr	r0, [r3, #0]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	1841      	adds	r1, r0, r1
 8008b7e:	6021      	str	r1, [r4, #0]
 8008b80:	e7ee      	b.n	8008b60 <_free_r+0x20>
 8008b82:	001a      	movs	r2, r3
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <_free_r+0x4e>
 8008b8a:	42a3      	cmp	r3, r4
 8008b8c:	d9f9      	bls.n	8008b82 <_free_r+0x42>
 8008b8e:	6811      	ldr	r1, [r2, #0]
 8008b90:	1850      	adds	r0, r2, r1
 8008b92:	42a0      	cmp	r0, r4
 8008b94:	d10b      	bne.n	8008bae <_free_r+0x6e>
 8008b96:	6820      	ldr	r0, [r4, #0]
 8008b98:	1809      	adds	r1, r1, r0
 8008b9a:	1850      	adds	r0, r2, r1
 8008b9c:	6011      	str	r1, [r2, #0]
 8008b9e:	4283      	cmp	r3, r0
 8008ba0:	d1e0      	bne.n	8008b64 <_free_r+0x24>
 8008ba2:	6818      	ldr	r0, [r3, #0]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	1841      	adds	r1, r0, r1
 8008ba8:	6011      	str	r1, [r2, #0]
 8008baa:	6053      	str	r3, [r2, #4]
 8008bac:	e7da      	b.n	8008b64 <_free_r+0x24>
 8008bae:	42a0      	cmp	r0, r4
 8008bb0:	d902      	bls.n	8008bb8 <_free_r+0x78>
 8008bb2:	230c      	movs	r3, #12
 8008bb4:	602b      	str	r3, [r5, #0]
 8008bb6:	e7d5      	b.n	8008b64 <_free_r+0x24>
 8008bb8:	6821      	ldr	r1, [r4, #0]
 8008bba:	1860      	adds	r0, r4, r1
 8008bbc:	4283      	cmp	r3, r0
 8008bbe:	d103      	bne.n	8008bc8 <_free_r+0x88>
 8008bc0:	6818      	ldr	r0, [r3, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	1841      	adds	r1, r0, r1
 8008bc6:	6021      	str	r1, [r4, #0]
 8008bc8:	6063      	str	r3, [r4, #4]
 8008bca:	6054      	str	r4, [r2, #4]
 8008bcc:	e7ca      	b.n	8008b64 <_free_r+0x24>
 8008bce:	46c0      	nop			; (mov r8, r8)
 8008bd0:	20000208 	.word	0x20000208

08008bd4 <_malloc_r>:
 8008bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	1ccd      	adds	r5, r1, #3
 8008bda:	439d      	bics	r5, r3
 8008bdc:	3508      	adds	r5, #8
 8008bde:	0006      	movs	r6, r0
 8008be0:	2d0c      	cmp	r5, #12
 8008be2:	d21f      	bcs.n	8008c24 <_malloc_r+0x50>
 8008be4:	250c      	movs	r5, #12
 8008be6:	42a9      	cmp	r1, r5
 8008be8:	d81e      	bhi.n	8008c28 <_malloc_r+0x54>
 8008bea:	0030      	movs	r0, r6
 8008bec:	f000 fa2a 	bl	8009044 <__malloc_lock>
 8008bf0:	4925      	ldr	r1, [pc, #148]	; (8008c88 <_malloc_r+0xb4>)
 8008bf2:	680a      	ldr	r2, [r1, #0]
 8008bf4:	0014      	movs	r4, r2
 8008bf6:	2c00      	cmp	r4, #0
 8008bf8:	d11a      	bne.n	8008c30 <_malloc_r+0x5c>
 8008bfa:	4f24      	ldr	r7, [pc, #144]	; (8008c8c <_malloc_r+0xb8>)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d104      	bne.n	8008c0c <_malloc_r+0x38>
 8008c02:	0021      	movs	r1, r4
 8008c04:	0030      	movs	r0, r6
 8008c06:	f000 f9ab 	bl	8008f60 <_sbrk_r>
 8008c0a:	6038      	str	r0, [r7, #0]
 8008c0c:	0029      	movs	r1, r5
 8008c0e:	0030      	movs	r0, r6
 8008c10:	f000 f9a6 	bl	8008f60 <_sbrk_r>
 8008c14:	1c43      	adds	r3, r0, #1
 8008c16:	d12b      	bne.n	8008c70 <_malloc_r+0x9c>
 8008c18:	230c      	movs	r3, #12
 8008c1a:	0030      	movs	r0, r6
 8008c1c:	6033      	str	r3, [r6, #0]
 8008c1e:	f000 fa19 	bl	8009054 <__malloc_unlock>
 8008c22:	e003      	b.n	8008c2c <_malloc_r+0x58>
 8008c24:	2d00      	cmp	r5, #0
 8008c26:	dade      	bge.n	8008be6 <_malloc_r+0x12>
 8008c28:	230c      	movs	r3, #12
 8008c2a:	6033      	str	r3, [r6, #0]
 8008c2c:	2000      	movs	r0, #0
 8008c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	1b5b      	subs	r3, r3, r5
 8008c34:	d419      	bmi.n	8008c6a <_malloc_r+0x96>
 8008c36:	2b0b      	cmp	r3, #11
 8008c38:	d903      	bls.n	8008c42 <_malloc_r+0x6e>
 8008c3a:	6023      	str	r3, [r4, #0]
 8008c3c:	18e4      	adds	r4, r4, r3
 8008c3e:	6025      	str	r5, [r4, #0]
 8008c40:	e003      	b.n	8008c4a <_malloc_r+0x76>
 8008c42:	6863      	ldr	r3, [r4, #4]
 8008c44:	42a2      	cmp	r2, r4
 8008c46:	d10e      	bne.n	8008c66 <_malloc_r+0x92>
 8008c48:	600b      	str	r3, [r1, #0]
 8008c4a:	0030      	movs	r0, r6
 8008c4c:	f000 fa02 	bl	8009054 <__malloc_unlock>
 8008c50:	0020      	movs	r0, r4
 8008c52:	2207      	movs	r2, #7
 8008c54:	300b      	adds	r0, #11
 8008c56:	1d23      	adds	r3, r4, #4
 8008c58:	4390      	bics	r0, r2
 8008c5a:	1ac2      	subs	r2, r0, r3
 8008c5c:	4298      	cmp	r0, r3
 8008c5e:	d0e6      	beq.n	8008c2e <_malloc_r+0x5a>
 8008c60:	1a1b      	subs	r3, r3, r0
 8008c62:	50a3      	str	r3, [r4, r2]
 8008c64:	e7e3      	b.n	8008c2e <_malloc_r+0x5a>
 8008c66:	6053      	str	r3, [r2, #4]
 8008c68:	e7ef      	b.n	8008c4a <_malloc_r+0x76>
 8008c6a:	0022      	movs	r2, r4
 8008c6c:	6864      	ldr	r4, [r4, #4]
 8008c6e:	e7c2      	b.n	8008bf6 <_malloc_r+0x22>
 8008c70:	2303      	movs	r3, #3
 8008c72:	1cc4      	adds	r4, r0, #3
 8008c74:	439c      	bics	r4, r3
 8008c76:	42a0      	cmp	r0, r4
 8008c78:	d0e1      	beq.n	8008c3e <_malloc_r+0x6a>
 8008c7a:	1a21      	subs	r1, r4, r0
 8008c7c:	0030      	movs	r0, r6
 8008c7e:	f000 f96f 	bl	8008f60 <_sbrk_r>
 8008c82:	1c43      	adds	r3, r0, #1
 8008c84:	d1db      	bne.n	8008c3e <_malloc_r+0x6a>
 8008c86:	e7c7      	b.n	8008c18 <_malloc_r+0x44>
 8008c88:	20000208 	.word	0x20000208
 8008c8c:	2000020c 	.word	0x2000020c

08008c90 <__ssputs_r>:
 8008c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c92:	688e      	ldr	r6, [r1, #8]
 8008c94:	b085      	sub	sp, #20
 8008c96:	0007      	movs	r7, r0
 8008c98:	000c      	movs	r4, r1
 8008c9a:	9203      	str	r2, [sp, #12]
 8008c9c:	9301      	str	r3, [sp, #4]
 8008c9e:	429e      	cmp	r6, r3
 8008ca0:	d83c      	bhi.n	8008d1c <__ssputs_r+0x8c>
 8008ca2:	2390      	movs	r3, #144	; 0x90
 8008ca4:	898a      	ldrh	r2, [r1, #12]
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	421a      	tst	r2, r3
 8008caa:	d034      	beq.n	8008d16 <__ssputs_r+0x86>
 8008cac:	2503      	movs	r5, #3
 8008cae:	6909      	ldr	r1, [r1, #16]
 8008cb0:	6823      	ldr	r3, [r4, #0]
 8008cb2:	1a5b      	subs	r3, r3, r1
 8008cb4:	9302      	str	r3, [sp, #8]
 8008cb6:	6963      	ldr	r3, [r4, #20]
 8008cb8:	9802      	ldr	r0, [sp, #8]
 8008cba:	435d      	muls	r5, r3
 8008cbc:	0feb      	lsrs	r3, r5, #31
 8008cbe:	195d      	adds	r5, r3, r5
 8008cc0:	9b01      	ldr	r3, [sp, #4]
 8008cc2:	106d      	asrs	r5, r5, #1
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	181b      	adds	r3, r3, r0
 8008cc8:	42ab      	cmp	r3, r5
 8008cca:	d900      	bls.n	8008cce <__ssputs_r+0x3e>
 8008ccc:	001d      	movs	r5, r3
 8008cce:	0553      	lsls	r3, r2, #21
 8008cd0:	d532      	bpl.n	8008d38 <__ssputs_r+0xa8>
 8008cd2:	0029      	movs	r1, r5
 8008cd4:	0038      	movs	r0, r7
 8008cd6:	f7ff ff7d 	bl	8008bd4 <_malloc_r>
 8008cda:	1e06      	subs	r6, r0, #0
 8008cdc:	d109      	bne.n	8008cf2 <__ssputs_r+0x62>
 8008cde:	230c      	movs	r3, #12
 8008ce0:	603b      	str	r3, [r7, #0]
 8008ce2:	2340      	movs	r3, #64	; 0x40
 8008ce4:	2001      	movs	r0, #1
 8008ce6:	89a2      	ldrh	r2, [r4, #12]
 8008ce8:	4240      	negs	r0, r0
 8008cea:	4313      	orrs	r3, r2
 8008cec:	81a3      	strh	r3, [r4, #12]
 8008cee:	b005      	add	sp, #20
 8008cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cf2:	9a02      	ldr	r2, [sp, #8]
 8008cf4:	6921      	ldr	r1, [r4, #16]
 8008cf6:	f7ff fa42 	bl	800817e <memcpy>
 8008cfa:	89a3      	ldrh	r3, [r4, #12]
 8008cfc:	4a14      	ldr	r2, [pc, #80]	; (8008d50 <__ssputs_r+0xc0>)
 8008cfe:	401a      	ands	r2, r3
 8008d00:	2380      	movs	r3, #128	; 0x80
 8008d02:	4313      	orrs	r3, r2
 8008d04:	81a3      	strh	r3, [r4, #12]
 8008d06:	9b02      	ldr	r3, [sp, #8]
 8008d08:	6126      	str	r6, [r4, #16]
 8008d0a:	18f6      	adds	r6, r6, r3
 8008d0c:	6026      	str	r6, [r4, #0]
 8008d0e:	6165      	str	r5, [r4, #20]
 8008d10:	9e01      	ldr	r6, [sp, #4]
 8008d12:	1aed      	subs	r5, r5, r3
 8008d14:	60a5      	str	r5, [r4, #8]
 8008d16:	9b01      	ldr	r3, [sp, #4]
 8008d18:	429e      	cmp	r6, r3
 8008d1a:	d900      	bls.n	8008d1e <__ssputs_r+0x8e>
 8008d1c:	9e01      	ldr	r6, [sp, #4]
 8008d1e:	0032      	movs	r2, r6
 8008d20:	9903      	ldr	r1, [sp, #12]
 8008d22:	6820      	ldr	r0, [r4, #0]
 8008d24:	f000 f97a 	bl	800901c <memmove>
 8008d28:	68a3      	ldr	r3, [r4, #8]
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	1b9b      	subs	r3, r3, r6
 8008d2e:	60a3      	str	r3, [r4, #8]
 8008d30:	6823      	ldr	r3, [r4, #0]
 8008d32:	199e      	adds	r6, r3, r6
 8008d34:	6026      	str	r6, [r4, #0]
 8008d36:	e7da      	b.n	8008cee <__ssputs_r+0x5e>
 8008d38:	002a      	movs	r2, r5
 8008d3a:	0038      	movs	r0, r7
 8008d3c:	f000 f992 	bl	8009064 <_realloc_r>
 8008d40:	1e06      	subs	r6, r0, #0
 8008d42:	d1e0      	bne.n	8008d06 <__ssputs_r+0x76>
 8008d44:	0038      	movs	r0, r7
 8008d46:	6921      	ldr	r1, [r4, #16]
 8008d48:	f7ff fefa 	bl	8008b40 <_free_r>
 8008d4c:	e7c7      	b.n	8008cde <__ssputs_r+0x4e>
 8008d4e:	46c0      	nop			; (mov r8, r8)
 8008d50:	fffffb7f 	.word	0xfffffb7f

08008d54 <_svfiprintf_r>:
 8008d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d56:	b0a1      	sub	sp, #132	; 0x84
 8008d58:	9003      	str	r0, [sp, #12]
 8008d5a:	001d      	movs	r5, r3
 8008d5c:	898b      	ldrh	r3, [r1, #12]
 8008d5e:	000f      	movs	r7, r1
 8008d60:	0016      	movs	r6, r2
 8008d62:	061b      	lsls	r3, r3, #24
 8008d64:	d511      	bpl.n	8008d8a <_svfiprintf_r+0x36>
 8008d66:	690b      	ldr	r3, [r1, #16]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10e      	bne.n	8008d8a <_svfiprintf_r+0x36>
 8008d6c:	2140      	movs	r1, #64	; 0x40
 8008d6e:	f7ff ff31 	bl	8008bd4 <_malloc_r>
 8008d72:	6038      	str	r0, [r7, #0]
 8008d74:	6138      	str	r0, [r7, #16]
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d105      	bne.n	8008d86 <_svfiprintf_r+0x32>
 8008d7a:	230c      	movs	r3, #12
 8008d7c:	9a03      	ldr	r2, [sp, #12]
 8008d7e:	3801      	subs	r0, #1
 8008d80:	6013      	str	r3, [r2, #0]
 8008d82:	b021      	add	sp, #132	; 0x84
 8008d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d86:	2340      	movs	r3, #64	; 0x40
 8008d88:	617b      	str	r3, [r7, #20]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	ac08      	add	r4, sp, #32
 8008d8e:	6163      	str	r3, [r4, #20]
 8008d90:	3320      	adds	r3, #32
 8008d92:	7663      	strb	r3, [r4, #25]
 8008d94:	3310      	adds	r3, #16
 8008d96:	76a3      	strb	r3, [r4, #26]
 8008d98:	9507      	str	r5, [sp, #28]
 8008d9a:	0035      	movs	r5, r6
 8008d9c:	782b      	ldrb	r3, [r5, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <_svfiprintf_r+0x52>
 8008da2:	2b25      	cmp	r3, #37	; 0x25
 8008da4:	d147      	bne.n	8008e36 <_svfiprintf_r+0xe2>
 8008da6:	1bab      	subs	r3, r5, r6
 8008da8:	9305      	str	r3, [sp, #20]
 8008daa:	42b5      	cmp	r5, r6
 8008dac:	d00c      	beq.n	8008dc8 <_svfiprintf_r+0x74>
 8008dae:	0032      	movs	r2, r6
 8008db0:	0039      	movs	r1, r7
 8008db2:	9803      	ldr	r0, [sp, #12]
 8008db4:	f7ff ff6c 	bl	8008c90 <__ssputs_r>
 8008db8:	1c43      	adds	r3, r0, #1
 8008dba:	d100      	bne.n	8008dbe <_svfiprintf_r+0x6a>
 8008dbc:	e0ae      	b.n	8008f1c <_svfiprintf_r+0x1c8>
 8008dbe:	6962      	ldr	r2, [r4, #20]
 8008dc0:	9b05      	ldr	r3, [sp, #20]
 8008dc2:	4694      	mov	ip, r2
 8008dc4:	4463      	add	r3, ip
 8008dc6:	6163      	str	r3, [r4, #20]
 8008dc8:	782b      	ldrb	r3, [r5, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d100      	bne.n	8008dd0 <_svfiprintf_r+0x7c>
 8008dce:	e0a5      	b.n	8008f1c <_svfiprintf_r+0x1c8>
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	4252      	negs	r2, r2
 8008dd6:	6062      	str	r2, [r4, #4]
 8008dd8:	a904      	add	r1, sp, #16
 8008dda:	3254      	adds	r2, #84	; 0x54
 8008ddc:	1852      	adds	r2, r2, r1
 8008dde:	1c6e      	adds	r6, r5, #1
 8008de0:	6023      	str	r3, [r4, #0]
 8008de2:	60e3      	str	r3, [r4, #12]
 8008de4:	60a3      	str	r3, [r4, #8]
 8008de6:	7013      	strb	r3, [r2, #0]
 8008de8:	65a3      	str	r3, [r4, #88]	; 0x58
 8008dea:	2205      	movs	r2, #5
 8008dec:	7831      	ldrb	r1, [r6, #0]
 8008dee:	4854      	ldr	r0, [pc, #336]	; (8008f40 <_svfiprintf_r+0x1ec>)
 8008df0:	f7ff f9ba 	bl	8008168 <memchr>
 8008df4:	1c75      	adds	r5, r6, #1
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d11f      	bne.n	8008e3a <_svfiprintf_r+0xe6>
 8008dfa:	6822      	ldr	r2, [r4, #0]
 8008dfc:	06d3      	lsls	r3, r2, #27
 8008dfe:	d504      	bpl.n	8008e0a <_svfiprintf_r+0xb6>
 8008e00:	2353      	movs	r3, #83	; 0x53
 8008e02:	a904      	add	r1, sp, #16
 8008e04:	185b      	adds	r3, r3, r1
 8008e06:	2120      	movs	r1, #32
 8008e08:	7019      	strb	r1, [r3, #0]
 8008e0a:	0713      	lsls	r3, r2, #28
 8008e0c:	d504      	bpl.n	8008e18 <_svfiprintf_r+0xc4>
 8008e0e:	2353      	movs	r3, #83	; 0x53
 8008e10:	a904      	add	r1, sp, #16
 8008e12:	185b      	adds	r3, r3, r1
 8008e14:	212b      	movs	r1, #43	; 0x2b
 8008e16:	7019      	strb	r1, [r3, #0]
 8008e18:	7833      	ldrb	r3, [r6, #0]
 8008e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e1c:	d016      	beq.n	8008e4c <_svfiprintf_r+0xf8>
 8008e1e:	0035      	movs	r5, r6
 8008e20:	2100      	movs	r1, #0
 8008e22:	200a      	movs	r0, #10
 8008e24:	68e3      	ldr	r3, [r4, #12]
 8008e26:	782a      	ldrb	r2, [r5, #0]
 8008e28:	1c6e      	adds	r6, r5, #1
 8008e2a:	3a30      	subs	r2, #48	; 0x30
 8008e2c:	2a09      	cmp	r2, #9
 8008e2e:	d94e      	bls.n	8008ece <_svfiprintf_r+0x17a>
 8008e30:	2900      	cmp	r1, #0
 8008e32:	d111      	bne.n	8008e58 <_svfiprintf_r+0x104>
 8008e34:	e017      	b.n	8008e66 <_svfiprintf_r+0x112>
 8008e36:	3501      	adds	r5, #1
 8008e38:	e7b0      	b.n	8008d9c <_svfiprintf_r+0x48>
 8008e3a:	4b41      	ldr	r3, [pc, #260]	; (8008f40 <_svfiprintf_r+0x1ec>)
 8008e3c:	6822      	ldr	r2, [r4, #0]
 8008e3e:	1ac0      	subs	r0, r0, r3
 8008e40:	2301      	movs	r3, #1
 8008e42:	4083      	lsls	r3, r0
 8008e44:	4313      	orrs	r3, r2
 8008e46:	002e      	movs	r6, r5
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	e7ce      	b.n	8008dea <_svfiprintf_r+0x96>
 8008e4c:	9b07      	ldr	r3, [sp, #28]
 8008e4e:	1d19      	adds	r1, r3, #4
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	9107      	str	r1, [sp, #28]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	db01      	blt.n	8008e5c <_svfiprintf_r+0x108>
 8008e58:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e5a:	e004      	b.n	8008e66 <_svfiprintf_r+0x112>
 8008e5c:	425b      	negs	r3, r3
 8008e5e:	60e3      	str	r3, [r4, #12]
 8008e60:	2302      	movs	r3, #2
 8008e62:	4313      	orrs	r3, r2
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	782b      	ldrb	r3, [r5, #0]
 8008e68:	2b2e      	cmp	r3, #46	; 0x2e
 8008e6a:	d10a      	bne.n	8008e82 <_svfiprintf_r+0x12e>
 8008e6c:	786b      	ldrb	r3, [r5, #1]
 8008e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e70:	d135      	bne.n	8008ede <_svfiprintf_r+0x18a>
 8008e72:	9b07      	ldr	r3, [sp, #28]
 8008e74:	3502      	adds	r5, #2
 8008e76:	1d1a      	adds	r2, r3, #4
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	9207      	str	r2, [sp, #28]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	db2b      	blt.n	8008ed8 <_svfiprintf_r+0x184>
 8008e80:	9309      	str	r3, [sp, #36]	; 0x24
 8008e82:	4e30      	ldr	r6, [pc, #192]	; (8008f44 <_svfiprintf_r+0x1f0>)
 8008e84:	2203      	movs	r2, #3
 8008e86:	0030      	movs	r0, r6
 8008e88:	7829      	ldrb	r1, [r5, #0]
 8008e8a:	f7ff f96d 	bl	8008168 <memchr>
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	d006      	beq.n	8008ea0 <_svfiprintf_r+0x14c>
 8008e92:	2340      	movs	r3, #64	; 0x40
 8008e94:	1b80      	subs	r0, r0, r6
 8008e96:	4083      	lsls	r3, r0
 8008e98:	6822      	ldr	r2, [r4, #0]
 8008e9a:	3501      	adds	r5, #1
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	6023      	str	r3, [r4, #0]
 8008ea0:	7829      	ldrb	r1, [r5, #0]
 8008ea2:	2206      	movs	r2, #6
 8008ea4:	4828      	ldr	r0, [pc, #160]	; (8008f48 <_svfiprintf_r+0x1f4>)
 8008ea6:	1c6e      	adds	r6, r5, #1
 8008ea8:	7621      	strb	r1, [r4, #24]
 8008eaa:	f7ff f95d 	bl	8008168 <memchr>
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	d03c      	beq.n	8008f2c <_svfiprintf_r+0x1d8>
 8008eb2:	4b26      	ldr	r3, [pc, #152]	; (8008f4c <_svfiprintf_r+0x1f8>)
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d125      	bne.n	8008f04 <_svfiprintf_r+0x1b0>
 8008eb8:	2207      	movs	r2, #7
 8008eba:	9b07      	ldr	r3, [sp, #28]
 8008ebc:	3307      	adds	r3, #7
 8008ebe:	4393      	bics	r3, r2
 8008ec0:	3308      	adds	r3, #8
 8008ec2:	9307      	str	r3, [sp, #28]
 8008ec4:	6963      	ldr	r3, [r4, #20]
 8008ec6:	9a04      	ldr	r2, [sp, #16]
 8008ec8:	189b      	adds	r3, r3, r2
 8008eca:	6163      	str	r3, [r4, #20]
 8008ecc:	e765      	b.n	8008d9a <_svfiprintf_r+0x46>
 8008ece:	4343      	muls	r3, r0
 8008ed0:	0035      	movs	r5, r6
 8008ed2:	2101      	movs	r1, #1
 8008ed4:	189b      	adds	r3, r3, r2
 8008ed6:	e7a6      	b.n	8008e26 <_svfiprintf_r+0xd2>
 8008ed8:	2301      	movs	r3, #1
 8008eda:	425b      	negs	r3, r3
 8008edc:	e7d0      	b.n	8008e80 <_svfiprintf_r+0x12c>
 8008ede:	2300      	movs	r3, #0
 8008ee0:	200a      	movs	r0, #10
 8008ee2:	001a      	movs	r2, r3
 8008ee4:	3501      	adds	r5, #1
 8008ee6:	6063      	str	r3, [r4, #4]
 8008ee8:	7829      	ldrb	r1, [r5, #0]
 8008eea:	1c6e      	adds	r6, r5, #1
 8008eec:	3930      	subs	r1, #48	; 0x30
 8008eee:	2909      	cmp	r1, #9
 8008ef0:	d903      	bls.n	8008efa <_svfiprintf_r+0x1a6>
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d0c5      	beq.n	8008e82 <_svfiprintf_r+0x12e>
 8008ef6:	9209      	str	r2, [sp, #36]	; 0x24
 8008ef8:	e7c3      	b.n	8008e82 <_svfiprintf_r+0x12e>
 8008efa:	4342      	muls	r2, r0
 8008efc:	0035      	movs	r5, r6
 8008efe:	2301      	movs	r3, #1
 8008f00:	1852      	adds	r2, r2, r1
 8008f02:	e7f1      	b.n	8008ee8 <_svfiprintf_r+0x194>
 8008f04:	ab07      	add	r3, sp, #28
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	003a      	movs	r2, r7
 8008f0a:	0021      	movs	r1, r4
 8008f0c:	4b10      	ldr	r3, [pc, #64]	; (8008f50 <_svfiprintf_r+0x1fc>)
 8008f0e:	9803      	ldr	r0, [sp, #12]
 8008f10:	f7fc fa1c 	bl	800534c <_printf_float>
 8008f14:	9004      	str	r0, [sp, #16]
 8008f16:	9b04      	ldr	r3, [sp, #16]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	d1d3      	bne.n	8008ec4 <_svfiprintf_r+0x170>
 8008f1c:	89bb      	ldrh	r3, [r7, #12]
 8008f1e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008f20:	065b      	lsls	r3, r3, #25
 8008f22:	d400      	bmi.n	8008f26 <_svfiprintf_r+0x1d2>
 8008f24:	e72d      	b.n	8008d82 <_svfiprintf_r+0x2e>
 8008f26:	2001      	movs	r0, #1
 8008f28:	4240      	negs	r0, r0
 8008f2a:	e72a      	b.n	8008d82 <_svfiprintf_r+0x2e>
 8008f2c:	ab07      	add	r3, sp, #28
 8008f2e:	9300      	str	r3, [sp, #0]
 8008f30:	003a      	movs	r2, r7
 8008f32:	0021      	movs	r1, r4
 8008f34:	4b06      	ldr	r3, [pc, #24]	; (8008f50 <_svfiprintf_r+0x1fc>)
 8008f36:	9803      	ldr	r0, [sp, #12]
 8008f38:	f7fc fcc6 	bl	80058c8 <_printf_i>
 8008f3c:	e7ea      	b.n	8008f14 <_svfiprintf_r+0x1c0>
 8008f3e:	46c0      	nop			; (mov r8, r8)
 8008f40:	0800a094 	.word	0x0800a094
 8008f44:	0800a09a 	.word	0x0800a09a
 8008f48:	0800a09e 	.word	0x0800a09e
 8008f4c:	0800534d 	.word	0x0800534d
 8008f50:	08008c91 	.word	0x08008c91

08008f54 <nan>:
 8008f54:	2000      	movs	r0, #0
 8008f56:	4901      	ldr	r1, [pc, #4]	; (8008f5c <nan+0x8>)
 8008f58:	4770      	bx	lr
 8008f5a:	46c0      	nop			; (mov r8, r8)
 8008f5c:	7ff80000 	.word	0x7ff80000

08008f60 <_sbrk_r>:
 8008f60:	2300      	movs	r3, #0
 8008f62:	b570      	push	{r4, r5, r6, lr}
 8008f64:	4d06      	ldr	r5, [pc, #24]	; (8008f80 <_sbrk_r+0x20>)
 8008f66:	0004      	movs	r4, r0
 8008f68:	0008      	movs	r0, r1
 8008f6a:	602b      	str	r3, [r5, #0]
 8008f6c:	f7f9 fcfc 	bl	8002968 <_sbrk>
 8008f70:	1c43      	adds	r3, r0, #1
 8008f72:	d103      	bne.n	8008f7c <_sbrk_r+0x1c>
 8008f74:	682b      	ldr	r3, [r5, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d000      	beq.n	8008f7c <_sbrk_r+0x1c>
 8008f7a:	6023      	str	r3, [r4, #0]
 8008f7c:	bd70      	pop	{r4, r5, r6, pc}
 8008f7e:	46c0      	nop			; (mov r8, r8)
 8008f80:	200003b8 	.word	0x200003b8

08008f84 <strncmp>:
 8008f84:	b530      	push	{r4, r5, lr}
 8008f86:	0005      	movs	r5, r0
 8008f88:	1e10      	subs	r0, r2, #0
 8008f8a:	d00b      	beq.n	8008fa4 <strncmp+0x20>
 8008f8c:	2400      	movs	r4, #0
 8008f8e:	3a01      	subs	r2, #1
 8008f90:	5d2b      	ldrb	r3, [r5, r4]
 8008f92:	5d08      	ldrb	r0, [r1, r4]
 8008f94:	4283      	cmp	r3, r0
 8008f96:	d104      	bne.n	8008fa2 <strncmp+0x1e>
 8008f98:	4294      	cmp	r4, r2
 8008f9a:	d002      	beq.n	8008fa2 <strncmp+0x1e>
 8008f9c:	3401      	adds	r4, #1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1f6      	bne.n	8008f90 <strncmp+0xc>
 8008fa2:	1a18      	subs	r0, r3, r0
 8008fa4:	bd30      	pop	{r4, r5, pc}

08008fa6 <__ascii_wctomb>:
 8008fa6:	0003      	movs	r3, r0
 8008fa8:	1e08      	subs	r0, r1, #0
 8008faa:	d005      	beq.n	8008fb8 <__ascii_wctomb+0x12>
 8008fac:	2aff      	cmp	r2, #255	; 0xff
 8008fae:	d904      	bls.n	8008fba <__ascii_wctomb+0x14>
 8008fb0:	228a      	movs	r2, #138	; 0x8a
 8008fb2:	2001      	movs	r0, #1
 8008fb4:	601a      	str	r2, [r3, #0]
 8008fb6:	4240      	negs	r0, r0
 8008fb8:	4770      	bx	lr
 8008fba:	2001      	movs	r0, #1
 8008fbc:	700a      	strb	r2, [r1, #0]
 8008fbe:	e7fb      	b.n	8008fb8 <__ascii_wctomb+0x12>

08008fc0 <__assert_func>:
 8008fc0:	b530      	push	{r4, r5, lr}
 8008fc2:	0014      	movs	r4, r2
 8008fc4:	001a      	movs	r2, r3
 8008fc6:	4b09      	ldr	r3, [pc, #36]	; (8008fec <__assert_func+0x2c>)
 8008fc8:	0005      	movs	r5, r0
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	b085      	sub	sp, #20
 8008fce:	68d8      	ldr	r0, [r3, #12]
 8008fd0:	4b07      	ldr	r3, [pc, #28]	; (8008ff0 <__assert_func+0x30>)
 8008fd2:	2c00      	cmp	r4, #0
 8008fd4:	d101      	bne.n	8008fda <__assert_func+0x1a>
 8008fd6:	4b07      	ldr	r3, [pc, #28]	; (8008ff4 <__assert_func+0x34>)
 8008fd8:	001c      	movs	r4, r3
 8008fda:	9301      	str	r3, [sp, #4]
 8008fdc:	9100      	str	r1, [sp, #0]
 8008fde:	002b      	movs	r3, r5
 8008fe0:	4905      	ldr	r1, [pc, #20]	; (8008ff8 <__assert_func+0x38>)
 8008fe2:	9402      	str	r4, [sp, #8]
 8008fe4:	f000 f80a 	bl	8008ffc <fiprintf>
 8008fe8:	f000 fa92 	bl	8009510 <abort>
 8008fec:	20000014 	.word	0x20000014
 8008ff0:	0800a0a5 	.word	0x0800a0a5
 8008ff4:	0800a0e0 	.word	0x0800a0e0
 8008ff8:	0800a0b2 	.word	0x0800a0b2

08008ffc <fiprintf>:
 8008ffc:	b40e      	push	{r1, r2, r3}
 8008ffe:	b503      	push	{r0, r1, lr}
 8009000:	0001      	movs	r1, r0
 8009002:	ab03      	add	r3, sp, #12
 8009004:	4804      	ldr	r0, [pc, #16]	; (8009018 <fiprintf+0x1c>)
 8009006:	cb04      	ldmia	r3!, {r2}
 8009008:	6800      	ldr	r0, [r0, #0]
 800900a:	9301      	str	r3, [sp, #4]
 800900c:	f000 f878 	bl	8009100 <_vfiprintf_r>
 8009010:	b002      	add	sp, #8
 8009012:	bc08      	pop	{r3}
 8009014:	b003      	add	sp, #12
 8009016:	4718      	bx	r3
 8009018:	20000014 	.word	0x20000014

0800901c <memmove>:
 800901c:	b510      	push	{r4, lr}
 800901e:	4288      	cmp	r0, r1
 8009020:	d902      	bls.n	8009028 <memmove+0xc>
 8009022:	188b      	adds	r3, r1, r2
 8009024:	4298      	cmp	r0, r3
 8009026:	d303      	bcc.n	8009030 <memmove+0x14>
 8009028:	2300      	movs	r3, #0
 800902a:	e007      	b.n	800903c <memmove+0x20>
 800902c:	5c8b      	ldrb	r3, [r1, r2]
 800902e:	5483      	strb	r3, [r0, r2]
 8009030:	3a01      	subs	r2, #1
 8009032:	d2fb      	bcs.n	800902c <memmove+0x10>
 8009034:	bd10      	pop	{r4, pc}
 8009036:	5ccc      	ldrb	r4, [r1, r3]
 8009038:	54c4      	strb	r4, [r0, r3]
 800903a:	3301      	adds	r3, #1
 800903c:	429a      	cmp	r2, r3
 800903e:	d1fa      	bne.n	8009036 <memmove+0x1a>
 8009040:	e7f8      	b.n	8009034 <memmove+0x18>
	...

08009044 <__malloc_lock>:
 8009044:	b510      	push	{r4, lr}
 8009046:	4802      	ldr	r0, [pc, #8]	; (8009050 <__malloc_lock+0xc>)
 8009048:	f000 fc39 	bl	80098be <__retarget_lock_acquire_recursive>
 800904c:	bd10      	pop	{r4, pc}
 800904e:	46c0      	nop			; (mov r8, r8)
 8009050:	200003c0 	.word	0x200003c0

08009054 <__malloc_unlock>:
 8009054:	b510      	push	{r4, lr}
 8009056:	4802      	ldr	r0, [pc, #8]	; (8009060 <__malloc_unlock+0xc>)
 8009058:	f000 fc32 	bl	80098c0 <__retarget_lock_release_recursive>
 800905c:	bd10      	pop	{r4, pc}
 800905e:	46c0      	nop			; (mov r8, r8)
 8009060:	200003c0 	.word	0x200003c0

08009064 <_realloc_r>:
 8009064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009066:	0007      	movs	r7, r0
 8009068:	000d      	movs	r5, r1
 800906a:	0016      	movs	r6, r2
 800906c:	2900      	cmp	r1, #0
 800906e:	d105      	bne.n	800907c <_realloc_r+0x18>
 8009070:	0011      	movs	r1, r2
 8009072:	f7ff fdaf 	bl	8008bd4 <_malloc_r>
 8009076:	0004      	movs	r4, r0
 8009078:	0020      	movs	r0, r4
 800907a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800907c:	2a00      	cmp	r2, #0
 800907e:	d103      	bne.n	8009088 <_realloc_r+0x24>
 8009080:	f7ff fd5e 	bl	8008b40 <_free_r>
 8009084:	0034      	movs	r4, r6
 8009086:	e7f7      	b.n	8009078 <_realloc_r+0x14>
 8009088:	f000 fc88 	bl	800999c <_malloc_usable_size_r>
 800908c:	002c      	movs	r4, r5
 800908e:	42b0      	cmp	r0, r6
 8009090:	d2f2      	bcs.n	8009078 <_realloc_r+0x14>
 8009092:	0031      	movs	r1, r6
 8009094:	0038      	movs	r0, r7
 8009096:	f7ff fd9d 	bl	8008bd4 <_malloc_r>
 800909a:	1e04      	subs	r4, r0, #0
 800909c:	d0ec      	beq.n	8009078 <_realloc_r+0x14>
 800909e:	0029      	movs	r1, r5
 80090a0:	0032      	movs	r2, r6
 80090a2:	f7ff f86c 	bl	800817e <memcpy>
 80090a6:	0029      	movs	r1, r5
 80090a8:	0038      	movs	r0, r7
 80090aa:	f7ff fd49 	bl	8008b40 <_free_r>
 80090ae:	e7e3      	b.n	8009078 <_realloc_r+0x14>

080090b0 <__sfputc_r>:
 80090b0:	6893      	ldr	r3, [r2, #8]
 80090b2:	b510      	push	{r4, lr}
 80090b4:	3b01      	subs	r3, #1
 80090b6:	6093      	str	r3, [r2, #8]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	da04      	bge.n	80090c6 <__sfputc_r+0x16>
 80090bc:	6994      	ldr	r4, [r2, #24]
 80090be:	42a3      	cmp	r3, r4
 80090c0:	db07      	blt.n	80090d2 <__sfputc_r+0x22>
 80090c2:	290a      	cmp	r1, #10
 80090c4:	d005      	beq.n	80090d2 <__sfputc_r+0x22>
 80090c6:	6813      	ldr	r3, [r2, #0]
 80090c8:	1c58      	adds	r0, r3, #1
 80090ca:	6010      	str	r0, [r2, #0]
 80090cc:	7019      	strb	r1, [r3, #0]
 80090ce:	0008      	movs	r0, r1
 80090d0:	bd10      	pop	{r4, pc}
 80090d2:	f000 f94f 	bl	8009374 <__swbuf_r>
 80090d6:	0001      	movs	r1, r0
 80090d8:	e7f9      	b.n	80090ce <__sfputc_r+0x1e>

080090da <__sfputs_r>:
 80090da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090dc:	0006      	movs	r6, r0
 80090de:	000f      	movs	r7, r1
 80090e0:	0014      	movs	r4, r2
 80090e2:	18d5      	adds	r5, r2, r3
 80090e4:	42ac      	cmp	r4, r5
 80090e6:	d101      	bne.n	80090ec <__sfputs_r+0x12>
 80090e8:	2000      	movs	r0, #0
 80090ea:	e007      	b.n	80090fc <__sfputs_r+0x22>
 80090ec:	7821      	ldrb	r1, [r4, #0]
 80090ee:	003a      	movs	r2, r7
 80090f0:	0030      	movs	r0, r6
 80090f2:	f7ff ffdd 	bl	80090b0 <__sfputc_r>
 80090f6:	3401      	adds	r4, #1
 80090f8:	1c43      	adds	r3, r0, #1
 80090fa:	d1f3      	bne.n	80090e4 <__sfputs_r+0xa>
 80090fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009100 <_vfiprintf_r>:
 8009100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009102:	b0a1      	sub	sp, #132	; 0x84
 8009104:	0006      	movs	r6, r0
 8009106:	000c      	movs	r4, r1
 8009108:	001f      	movs	r7, r3
 800910a:	9203      	str	r2, [sp, #12]
 800910c:	2800      	cmp	r0, #0
 800910e:	d004      	beq.n	800911a <_vfiprintf_r+0x1a>
 8009110:	6983      	ldr	r3, [r0, #24]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d101      	bne.n	800911a <_vfiprintf_r+0x1a>
 8009116:	f000 fb31 	bl	800977c <__sinit>
 800911a:	4b8e      	ldr	r3, [pc, #568]	; (8009354 <_vfiprintf_r+0x254>)
 800911c:	429c      	cmp	r4, r3
 800911e:	d11c      	bne.n	800915a <_vfiprintf_r+0x5a>
 8009120:	6874      	ldr	r4, [r6, #4]
 8009122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009124:	07db      	lsls	r3, r3, #31
 8009126:	d405      	bmi.n	8009134 <_vfiprintf_r+0x34>
 8009128:	89a3      	ldrh	r3, [r4, #12]
 800912a:	059b      	lsls	r3, r3, #22
 800912c:	d402      	bmi.n	8009134 <_vfiprintf_r+0x34>
 800912e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009130:	f000 fbc5 	bl	80098be <__retarget_lock_acquire_recursive>
 8009134:	89a3      	ldrh	r3, [r4, #12]
 8009136:	071b      	lsls	r3, r3, #28
 8009138:	d502      	bpl.n	8009140 <_vfiprintf_r+0x40>
 800913a:	6923      	ldr	r3, [r4, #16]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d11d      	bne.n	800917c <_vfiprintf_r+0x7c>
 8009140:	0021      	movs	r1, r4
 8009142:	0030      	movs	r0, r6
 8009144:	f000 f96c 	bl	8009420 <__swsetup_r>
 8009148:	2800      	cmp	r0, #0
 800914a:	d017      	beq.n	800917c <_vfiprintf_r+0x7c>
 800914c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800914e:	07db      	lsls	r3, r3, #31
 8009150:	d50d      	bpl.n	800916e <_vfiprintf_r+0x6e>
 8009152:	2001      	movs	r0, #1
 8009154:	4240      	negs	r0, r0
 8009156:	b021      	add	sp, #132	; 0x84
 8009158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800915a:	4b7f      	ldr	r3, [pc, #508]	; (8009358 <_vfiprintf_r+0x258>)
 800915c:	429c      	cmp	r4, r3
 800915e:	d101      	bne.n	8009164 <_vfiprintf_r+0x64>
 8009160:	68b4      	ldr	r4, [r6, #8]
 8009162:	e7de      	b.n	8009122 <_vfiprintf_r+0x22>
 8009164:	4b7d      	ldr	r3, [pc, #500]	; (800935c <_vfiprintf_r+0x25c>)
 8009166:	429c      	cmp	r4, r3
 8009168:	d1db      	bne.n	8009122 <_vfiprintf_r+0x22>
 800916a:	68f4      	ldr	r4, [r6, #12]
 800916c:	e7d9      	b.n	8009122 <_vfiprintf_r+0x22>
 800916e:	89a3      	ldrh	r3, [r4, #12]
 8009170:	059b      	lsls	r3, r3, #22
 8009172:	d4ee      	bmi.n	8009152 <_vfiprintf_r+0x52>
 8009174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009176:	f000 fba3 	bl	80098c0 <__retarget_lock_release_recursive>
 800917a:	e7ea      	b.n	8009152 <_vfiprintf_r+0x52>
 800917c:	2300      	movs	r3, #0
 800917e:	ad08      	add	r5, sp, #32
 8009180:	616b      	str	r3, [r5, #20]
 8009182:	3320      	adds	r3, #32
 8009184:	766b      	strb	r3, [r5, #25]
 8009186:	3310      	adds	r3, #16
 8009188:	76ab      	strb	r3, [r5, #26]
 800918a:	9707      	str	r7, [sp, #28]
 800918c:	9f03      	ldr	r7, [sp, #12]
 800918e:	783b      	ldrb	r3, [r7, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d001      	beq.n	8009198 <_vfiprintf_r+0x98>
 8009194:	2b25      	cmp	r3, #37	; 0x25
 8009196:	d14e      	bne.n	8009236 <_vfiprintf_r+0x136>
 8009198:	9b03      	ldr	r3, [sp, #12]
 800919a:	1afb      	subs	r3, r7, r3
 800919c:	9305      	str	r3, [sp, #20]
 800919e:	9b03      	ldr	r3, [sp, #12]
 80091a0:	429f      	cmp	r7, r3
 80091a2:	d00d      	beq.n	80091c0 <_vfiprintf_r+0xc0>
 80091a4:	9b05      	ldr	r3, [sp, #20]
 80091a6:	0021      	movs	r1, r4
 80091a8:	0030      	movs	r0, r6
 80091aa:	9a03      	ldr	r2, [sp, #12]
 80091ac:	f7ff ff95 	bl	80090da <__sfputs_r>
 80091b0:	1c43      	adds	r3, r0, #1
 80091b2:	d100      	bne.n	80091b6 <_vfiprintf_r+0xb6>
 80091b4:	e0b5      	b.n	8009322 <_vfiprintf_r+0x222>
 80091b6:	696a      	ldr	r2, [r5, #20]
 80091b8:	9b05      	ldr	r3, [sp, #20]
 80091ba:	4694      	mov	ip, r2
 80091bc:	4463      	add	r3, ip
 80091be:	616b      	str	r3, [r5, #20]
 80091c0:	783b      	ldrb	r3, [r7, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d100      	bne.n	80091c8 <_vfiprintf_r+0xc8>
 80091c6:	e0ac      	b.n	8009322 <_vfiprintf_r+0x222>
 80091c8:	2201      	movs	r2, #1
 80091ca:	1c7b      	adds	r3, r7, #1
 80091cc:	9303      	str	r3, [sp, #12]
 80091ce:	2300      	movs	r3, #0
 80091d0:	4252      	negs	r2, r2
 80091d2:	606a      	str	r2, [r5, #4]
 80091d4:	a904      	add	r1, sp, #16
 80091d6:	3254      	adds	r2, #84	; 0x54
 80091d8:	1852      	adds	r2, r2, r1
 80091da:	602b      	str	r3, [r5, #0]
 80091dc:	60eb      	str	r3, [r5, #12]
 80091de:	60ab      	str	r3, [r5, #8]
 80091e0:	7013      	strb	r3, [r2, #0]
 80091e2:	65ab      	str	r3, [r5, #88]	; 0x58
 80091e4:	9b03      	ldr	r3, [sp, #12]
 80091e6:	2205      	movs	r2, #5
 80091e8:	7819      	ldrb	r1, [r3, #0]
 80091ea:	485d      	ldr	r0, [pc, #372]	; (8009360 <_vfiprintf_r+0x260>)
 80091ec:	f7fe ffbc 	bl	8008168 <memchr>
 80091f0:	9b03      	ldr	r3, [sp, #12]
 80091f2:	1c5f      	adds	r7, r3, #1
 80091f4:	2800      	cmp	r0, #0
 80091f6:	d120      	bne.n	800923a <_vfiprintf_r+0x13a>
 80091f8:	682a      	ldr	r2, [r5, #0]
 80091fa:	06d3      	lsls	r3, r2, #27
 80091fc:	d504      	bpl.n	8009208 <_vfiprintf_r+0x108>
 80091fe:	2353      	movs	r3, #83	; 0x53
 8009200:	a904      	add	r1, sp, #16
 8009202:	185b      	adds	r3, r3, r1
 8009204:	2120      	movs	r1, #32
 8009206:	7019      	strb	r1, [r3, #0]
 8009208:	0713      	lsls	r3, r2, #28
 800920a:	d504      	bpl.n	8009216 <_vfiprintf_r+0x116>
 800920c:	2353      	movs	r3, #83	; 0x53
 800920e:	a904      	add	r1, sp, #16
 8009210:	185b      	adds	r3, r3, r1
 8009212:	212b      	movs	r1, #43	; 0x2b
 8009214:	7019      	strb	r1, [r3, #0]
 8009216:	9b03      	ldr	r3, [sp, #12]
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	2b2a      	cmp	r3, #42	; 0x2a
 800921c:	d016      	beq.n	800924c <_vfiprintf_r+0x14c>
 800921e:	2100      	movs	r1, #0
 8009220:	68eb      	ldr	r3, [r5, #12]
 8009222:	9f03      	ldr	r7, [sp, #12]
 8009224:	783a      	ldrb	r2, [r7, #0]
 8009226:	1c78      	adds	r0, r7, #1
 8009228:	3a30      	subs	r2, #48	; 0x30
 800922a:	4684      	mov	ip, r0
 800922c:	2a09      	cmp	r2, #9
 800922e:	d94f      	bls.n	80092d0 <_vfiprintf_r+0x1d0>
 8009230:	2900      	cmp	r1, #0
 8009232:	d111      	bne.n	8009258 <_vfiprintf_r+0x158>
 8009234:	e017      	b.n	8009266 <_vfiprintf_r+0x166>
 8009236:	3701      	adds	r7, #1
 8009238:	e7a9      	b.n	800918e <_vfiprintf_r+0x8e>
 800923a:	4b49      	ldr	r3, [pc, #292]	; (8009360 <_vfiprintf_r+0x260>)
 800923c:	682a      	ldr	r2, [r5, #0]
 800923e:	1ac0      	subs	r0, r0, r3
 8009240:	2301      	movs	r3, #1
 8009242:	4083      	lsls	r3, r0
 8009244:	4313      	orrs	r3, r2
 8009246:	602b      	str	r3, [r5, #0]
 8009248:	9703      	str	r7, [sp, #12]
 800924a:	e7cb      	b.n	80091e4 <_vfiprintf_r+0xe4>
 800924c:	9b07      	ldr	r3, [sp, #28]
 800924e:	1d19      	adds	r1, r3, #4
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	9107      	str	r1, [sp, #28]
 8009254:	2b00      	cmp	r3, #0
 8009256:	db01      	blt.n	800925c <_vfiprintf_r+0x15c>
 8009258:	930b      	str	r3, [sp, #44]	; 0x2c
 800925a:	e004      	b.n	8009266 <_vfiprintf_r+0x166>
 800925c:	425b      	negs	r3, r3
 800925e:	60eb      	str	r3, [r5, #12]
 8009260:	2302      	movs	r3, #2
 8009262:	4313      	orrs	r3, r2
 8009264:	602b      	str	r3, [r5, #0]
 8009266:	783b      	ldrb	r3, [r7, #0]
 8009268:	2b2e      	cmp	r3, #46	; 0x2e
 800926a:	d10a      	bne.n	8009282 <_vfiprintf_r+0x182>
 800926c:	787b      	ldrb	r3, [r7, #1]
 800926e:	2b2a      	cmp	r3, #42	; 0x2a
 8009270:	d137      	bne.n	80092e2 <_vfiprintf_r+0x1e2>
 8009272:	9b07      	ldr	r3, [sp, #28]
 8009274:	3702      	adds	r7, #2
 8009276:	1d1a      	adds	r2, r3, #4
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	9207      	str	r2, [sp, #28]
 800927c:	2b00      	cmp	r3, #0
 800927e:	db2d      	blt.n	80092dc <_vfiprintf_r+0x1dc>
 8009280:	9309      	str	r3, [sp, #36]	; 0x24
 8009282:	2203      	movs	r2, #3
 8009284:	7839      	ldrb	r1, [r7, #0]
 8009286:	4837      	ldr	r0, [pc, #220]	; (8009364 <_vfiprintf_r+0x264>)
 8009288:	f7fe ff6e 	bl	8008168 <memchr>
 800928c:	2800      	cmp	r0, #0
 800928e:	d007      	beq.n	80092a0 <_vfiprintf_r+0x1a0>
 8009290:	4b34      	ldr	r3, [pc, #208]	; (8009364 <_vfiprintf_r+0x264>)
 8009292:	682a      	ldr	r2, [r5, #0]
 8009294:	1ac0      	subs	r0, r0, r3
 8009296:	2340      	movs	r3, #64	; 0x40
 8009298:	4083      	lsls	r3, r0
 800929a:	4313      	orrs	r3, r2
 800929c:	3701      	adds	r7, #1
 800929e:	602b      	str	r3, [r5, #0]
 80092a0:	7839      	ldrb	r1, [r7, #0]
 80092a2:	1c7b      	adds	r3, r7, #1
 80092a4:	2206      	movs	r2, #6
 80092a6:	4830      	ldr	r0, [pc, #192]	; (8009368 <_vfiprintf_r+0x268>)
 80092a8:	9303      	str	r3, [sp, #12]
 80092aa:	7629      	strb	r1, [r5, #24]
 80092ac:	f7fe ff5c 	bl	8008168 <memchr>
 80092b0:	2800      	cmp	r0, #0
 80092b2:	d045      	beq.n	8009340 <_vfiprintf_r+0x240>
 80092b4:	4b2d      	ldr	r3, [pc, #180]	; (800936c <_vfiprintf_r+0x26c>)
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d127      	bne.n	800930a <_vfiprintf_r+0x20a>
 80092ba:	2207      	movs	r2, #7
 80092bc:	9b07      	ldr	r3, [sp, #28]
 80092be:	3307      	adds	r3, #7
 80092c0:	4393      	bics	r3, r2
 80092c2:	3308      	adds	r3, #8
 80092c4:	9307      	str	r3, [sp, #28]
 80092c6:	696b      	ldr	r3, [r5, #20]
 80092c8:	9a04      	ldr	r2, [sp, #16]
 80092ca:	189b      	adds	r3, r3, r2
 80092cc:	616b      	str	r3, [r5, #20]
 80092ce:	e75d      	b.n	800918c <_vfiprintf_r+0x8c>
 80092d0:	210a      	movs	r1, #10
 80092d2:	434b      	muls	r3, r1
 80092d4:	4667      	mov	r7, ip
 80092d6:	189b      	adds	r3, r3, r2
 80092d8:	3909      	subs	r1, #9
 80092da:	e7a3      	b.n	8009224 <_vfiprintf_r+0x124>
 80092dc:	2301      	movs	r3, #1
 80092de:	425b      	negs	r3, r3
 80092e0:	e7ce      	b.n	8009280 <_vfiprintf_r+0x180>
 80092e2:	2300      	movs	r3, #0
 80092e4:	001a      	movs	r2, r3
 80092e6:	3701      	adds	r7, #1
 80092e8:	606b      	str	r3, [r5, #4]
 80092ea:	7839      	ldrb	r1, [r7, #0]
 80092ec:	1c78      	adds	r0, r7, #1
 80092ee:	3930      	subs	r1, #48	; 0x30
 80092f0:	4684      	mov	ip, r0
 80092f2:	2909      	cmp	r1, #9
 80092f4:	d903      	bls.n	80092fe <_vfiprintf_r+0x1fe>
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d0c3      	beq.n	8009282 <_vfiprintf_r+0x182>
 80092fa:	9209      	str	r2, [sp, #36]	; 0x24
 80092fc:	e7c1      	b.n	8009282 <_vfiprintf_r+0x182>
 80092fe:	230a      	movs	r3, #10
 8009300:	435a      	muls	r2, r3
 8009302:	4667      	mov	r7, ip
 8009304:	1852      	adds	r2, r2, r1
 8009306:	3b09      	subs	r3, #9
 8009308:	e7ef      	b.n	80092ea <_vfiprintf_r+0x1ea>
 800930a:	ab07      	add	r3, sp, #28
 800930c:	9300      	str	r3, [sp, #0]
 800930e:	0022      	movs	r2, r4
 8009310:	0029      	movs	r1, r5
 8009312:	0030      	movs	r0, r6
 8009314:	4b16      	ldr	r3, [pc, #88]	; (8009370 <_vfiprintf_r+0x270>)
 8009316:	f7fc f819 	bl	800534c <_printf_float>
 800931a:	9004      	str	r0, [sp, #16]
 800931c:	9b04      	ldr	r3, [sp, #16]
 800931e:	3301      	adds	r3, #1
 8009320:	d1d1      	bne.n	80092c6 <_vfiprintf_r+0x1c6>
 8009322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009324:	07db      	lsls	r3, r3, #31
 8009326:	d405      	bmi.n	8009334 <_vfiprintf_r+0x234>
 8009328:	89a3      	ldrh	r3, [r4, #12]
 800932a:	059b      	lsls	r3, r3, #22
 800932c:	d402      	bmi.n	8009334 <_vfiprintf_r+0x234>
 800932e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009330:	f000 fac6 	bl	80098c0 <__retarget_lock_release_recursive>
 8009334:	89a3      	ldrh	r3, [r4, #12]
 8009336:	065b      	lsls	r3, r3, #25
 8009338:	d500      	bpl.n	800933c <_vfiprintf_r+0x23c>
 800933a:	e70a      	b.n	8009152 <_vfiprintf_r+0x52>
 800933c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800933e:	e70a      	b.n	8009156 <_vfiprintf_r+0x56>
 8009340:	ab07      	add	r3, sp, #28
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	0022      	movs	r2, r4
 8009346:	0029      	movs	r1, r5
 8009348:	0030      	movs	r0, r6
 800934a:	4b09      	ldr	r3, [pc, #36]	; (8009370 <_vfiprintf_r+0x270>)
 800934c:	f7fc fabc 	bl	80058c8 <_printf_i>
 8009350:	e7e3      	b.n	800931a <_vfiprintf_r+0x21a>
 8009352:	46c0      	nop			; (mov r8, r8)
 8009354:	0800a104 	.word	0x0800a104
 8009358:	0800a124 	.word	0x0800a124
 800935c:	0800a0e4 	.word	0x0800a0e4
 8009360:	0800a094 	.word	0x0800a094
 8009364:	0800a09a 	.word	0x0800a09a
 8009368:	0800a09e 	.word	0x0800a09e
 800936c:	0800534d 	.word	0x0800534d
 8009370:	080090db 	.word	0x080090db

08009374 <__swbuf_r>:
 8009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009376:	0005      	movs	r5, r0
 8009378:	000e      	movs	r6, r1
 800937a:	0014      	movs	r4, r2
 800937c:	2800      	cmp	r0, #0
 800937e:	d004      	beq.n	800938a <__swbuf_r+0x16>
 8009380:	6983      	ldr	r3, [r0, #24]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d101      	bne.n	800938a <__swbuf_r+0x16>
 8009386:	f000 f9f9 	bl	800977c <__sinit>
 800938a:	4b22      	ldr	r3, [pc, #136]	; (8009414 <__swbuf_r+0xa0>)
 800938c:	429c      	cmp	r4, r3
 800938e:	d12e      	bne.n	80093ee <__swbuf_r+0x7a>
 8009390:	686c      	ldr	r4, [r5, #4]
 8009392:	69a3      	ldr	r3, [r4, #24]
 8009394:	60a3      	str	r3, [r4, #8]
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	071b      	lsls	r3, r3, #28
 800939a:	d532      	bpl.n	8009402 <__swbuf_r+0x8e>
 800939c:	6923      	ldr	r3, [r4, #16]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d02f      	beq.n	8009402 <__swbuf_r+0x8e>
 80093a2:	6823      	ldr	r3, [r4, #0]
 80093a4:	6922      	ldr	r2, [r4, #16]
 80093a6:	b2f7      	uxtb	r7, r6
 80093a8:	1a98      	subs	r0, r3, r2
 80093aa:	6963      	ldr	r3, [r4, #20]
 80093ac:	b2f6      	uxtb	r6, r6
 80093ae:	4283      	cmp	r3, r0
 80093b0:	dc05      	bgt.n	80093be <__swbuf_r+0x4a>
 80093b2:	0021      	movs	r1, r4
 80093b4:	0028      	movs	r0, r5
 80093b6:	f000 f93f 	bl	8009638 <_fflush_r>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	d127      	bne.n	800940e <__swbuf_r+0x9a>
 80093be:	68a3      	ldr	r3, [r4, #8]
 80093c0:	3001      	adds	r0, #1
 80093c2:	3b01      	subs	r3, #1
 80093c4:	60a3      	str	r3, [r4, #8]
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	6022      	str	r2, [r4, #0]
 80093cc:	701f      	strb	r7, [r3, #0]
 80093ce:	6963      	ldr	r3, [r4, #20]
 80093d0:	4283      	cmp	r3, r0
 80093d2:	d004      	beq.n	80093de <__swbuf_r+0x6a>
 80093d4:	89a3      	ldrh	r3, [r4, #12]
 80093d6:	07db      	lsls	r3, r3, #31
 80093d8:	d507      	bpl.n	80093ea <__swbuf_r+0x76>
 80093da:	2e0a      	cmp	r6, #10
 80093dc:	d105      	bne.n	80093ea <__swbuf_r+0x76>
 80093de:	0021      	movs	r1, r4
 80093e0:	0028      	movs	r0, r5
 80093e2:	f000 f929 	bl	8009638 <_fflush_r>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d111      	bne.n	800940e <__swbuf_r+0x9a>
 80093ea:	0030      	movs	r0, r6
 80093ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093ee:	4b0a      	ldr	r3, [pc, #40]	; (8009418 <__swbuf_r+0xa4>)
 80093f0:	429c      	cmp	r4, r3
 80093f2:	d101      	bne.n	80093f8 <__swbuf_r+0x84>
 80093f4:	68ac      	ldr	r4, [r5, #8]
 80093f6:	e7cc      	b.n	8009392 <__swbuf_r+0x1e>
 80093f8:	4b08      	ldr	r3, [pc, #32]	; (800941c <__swbuf_r+0xa8>)
 80093fa:	429c      	cmp	r4, r3
 80093fc:	d1c9      	bne.n	8009392 <__swbuf_r+0x1e>
 80093fe:	68ec      	ldr	r4, [r5, #12]
 8009400:	e7c7      	b.n	8009392 <__swbuf_r+0x1e>
 8009402:	0021      	movs	r1, r4
 8009404:	0028      	movs	r0, r5
 8009406:	f000 f80b 	bl	8009420 <__swsetup_r>
 800940a:	2800      	cmp	r0, #0
 800940c:	d0c9      	beq.n	80093a2 <__swbuf_r+0x2e>
 800940e:	2601      	movs	r6, #1
 8009410:	4276      	negs	r6, r6
 8009412:	e7ea      	b.n	80093ea <__swbuf_r+0x76>
 8009414:	0800a104 	.word	0x0800a104
 8009418:	0800a124 	.word	0x0800a124
 800941c:	0800a0e4 	.word	0x0800a0e4

08009420 <__swsetup_r>:
 8009420:	4b37      	ldr	r3, [pc, #220]	; (8009500 <__swsetup_r+0xe0>)
 8009422:	b570      	push	{r4, r5, r6, lr}
 8009424:	681d      	ldr	r5, [r3, #0]
 8009426:	0006      	movs	r6, r0
 8009428:	000c      	movs	r4, r1
 800942a:	2d00      	cmp	r5, #0
 800942c:	d005      	beq.n	800943a <__swsetup_r+0x1a>
 800942e:	69ab      	ldr	r3, [r5, #24]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d102      	bne.n	800943a <__swsetup_r+0x1a>
 8009434:	0028      	movs	r0, r5
 8009436:	f000 f9a1 	bl	800977c <__sinit>
 800943a:	4b32      	ldr	r3, [pc, #200]	; (8009504 <__swsetup_r+0xe4>)
 800943c:	429c      	cmp	r4, r3
 800943e:	d10f      	bne.n	8009460 <__swsetup_r+0x40>
 8009440:	686c      	ldr	r4, [r5, #4]
 8009442:	230c      	movs	r3, #12
 8009444:	5ee2      	ldrsh	r2, [r4, r3]
 8009446:	b293      	uxth	r3, r2
 8009448:	0711      	lsls	r1, r2, #28
 800944a:	d42d      	bmi.n	80094a8 <__swsetup_r+0x88>
 800944c:	06d9      	lsls	r1, r3, #27
 800944e:	d411      	bmi.n	8009474 <__swsetup_r+0x54>
 8009450:	2309      	movs	r3, #9
 8009452:	2001      	movs	r0, #1
 8009454:	6033      	str	r3, [r6, #0]
 8009456:	3337      	adds	r3, #55	; 0x37
 8009458:	4313      	orrs	r3, r2
 800945a:	81a3      	strh	r3, [r4, #12]
 800945c:	4240      	negs	r0, r0
 800945e:	bd70      	pop	{r4, r5, r6, pc}
 8009460:	4b29      	ldr	r3, [pc, #164]	; (8009508 <__swsetup_r+0xe8>)
 8009462:	429c      	cmp	r4, r3
 8009464:	d101      	bne.n	800946a <__swsetup_r+0x4a>
 8009466:	68ac      	ldr	r4, [r5, #8]
 8009468:	e7eb      	b.n	8009442 <__swsetup_r+0x22>
 800946a:	4b28      	ldr	r3, [pc, #160]	; (800950c <__swsetup_r+0xec>)
 800946c:	429c      	cmp	r4, r3
 800946e:	d1e8      	bne.n	8009442 <__swsetup_r+0x22>
 8009470:	68ec      	ldr	r4, [r5, #12]
 8009472:	e7e6      	b.n	8009442 <__swsetup_r+0x22>
 8009474:	075b      	lsls	r3, r3, #29
 8009476:	d513      	bpl.n	80094a0 <__swsetup_r+0x80>
 8009478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800947a:	2900      	cmp	r1, #0
 800947c:	d008      	beq.n	8009490 <__swsetup_r+0x70>
 800947e:	0023      	movs	r3, r4
 8009480:	3344      	adds	r3, #68	; 0x44
 8009482:	4299      	cmp	r1, r3
 8009484:	d002      	beq.n	800948c <__swsetup_r+0x6c>
 8009486:	0030      	movs	r0, r6
 8009488:	f7ff fb5a 	bl	8008b40 <_free_r>
 800948c:	2300      	movs	r3, #0
 800948e:	6363      	str	r3, [r4, #52]	; 0x34
 8009490:	2224      	movs	r2, #36	; 0x24
 8009492:	89a3      	ldrh	r3, [r4, #12]
 8009494:	4393      	bics	r3, r2
 8009496:	81a3      	strh	r3, [r4, #12]
 8009498:	2300      	movs	r3, #0
 800949a:	6063      	str	r3, [r4, #4]
 800949c:	6923      	ldr	r3, [r4, #16]
 800949e:	6023      	str	r3, [r4, #0]
 80094a0:	2308      	movs	r3, #8
 80094a2:	89a2      	ldrh	r2, [r4, #12]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	81a3      	strh	r3, [r4, #12]
 80094a8:	6923      	ldr	r3, [r4, #16]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d10b      	bne.n	80094c6 <__swsetup_r+0xa6>
 80094ae:	21a0      	movs	r1, #160	; 0xa0
 80094b0:	2280      	movs	r2, #128	; 0x80
 80094b2:	89a3      	ldrh	r3, [r4, #12]
 80094b4:	0089      	lsls	r1, r1, #2
 80094b6:	0092      	lsls	r2, r2, #2
 80094b8:	400b      	ands	r3, r1
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d003      	beq.n	80094c6 <__swsetup_r+0xa6>
 80094be:	0021      	movs	r1, r4
 80094c0:	0030      	movs	r0, r6
 80094c2:	f000 fa27 	bl	8009914 <__smakebuf_r>
 80094c6:	220c      	movs	r2, #12
 80094c8:	5ea3      	ldrsh	r3, [r4, r2]
 80094ca:	2001      	movs	r0, #1
 80094cc:	001a      	movs	r2, r3
 80094ce:	b299      	uxth	r1, r3
 80094d0:	4002      	ands	r2, r0
 80094d2:	4203      	tst	r3, r0
 80094d4:	d00f      	beq.n	80094f6 <__swsetup_r+0xd6>
 80094d6:	2200      	movs	r2, #0
 80094d8:	60a2      	str	r2, [r4, #8]
 80094da:	6962      	ldr	r2, [r4, #20]
 80094dc:	4252      	negs	r2, r2
 80094de:	61a2      	str	r2, [r4, #24]
 80094e0:	2000      	movs	r0, #0
 80094e2:	6922      	ldr	r2, [r4, #16]
 80094e4:	4282      	cmp	r2, r0
 80094e6:	d1ba      	bne.n	800945e <__swsetup_r+0x3e>
 80094e8:	060a      	lsls	r2, r1, #24
 80094ea:	d5b8      	bpl.n	800945e <__swsetup_r+0x3e>
 80094ec:	2240      	movs	r2, #64	; 0x40
 80094ee:	4313      	orrs	r3, r2
 80094f0:	81a3      	strh	r3, [r4, #12]
 80094f2:	3801      	subs	r0, #1
 80094f4:	e7b3      	b.n	800945e <__swsetup_r+0x3e>
 80094f6:	0788      	lsls	r0, r1, #30
 80094f8:	d400      	bmi.n	80094fc <__swsetup_r+0xdc>
 80094fa:	6962      	ldr	r2, [r4, #20]
 80094fc:	60a2      	str	r2, [r4, #8]
 80094fe:	e7ef      	b.n	80094e0 <__swsetup_r+0xc0>
 8009500:	20000014 	.word	0x20000014
 8009504:	0800a104 	.word	0x0800a104
 8009508:	0800a124 	.word	0x0800a124
 800950c:	0800a0e4 	.word	0x0800a0e4

08009510 <abort>:
 8009510:	2006      	movs	r0, #6
 8009512:	b510      	push	{r4, lr}
 8009514:	f000 fa74 	bl	8009a00 <raise>
 8009518:	2001      	movs	r0, #1
 800951a:	f7f9 f9b3 	bl	8002884 <_exit>
	...

08009520 <__sflush_r>:
 8009520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009522:	898b      	ldrh	r3, [r1, #12]
 8009524:	0005      	movs	r5, r0
 8009526:	000c      	movs	r4, r1
 8009528:	071a      	lsls	r2, r3, #28
 800952a:	d45f      	bmi.n	80095ec <__sflush_r+0xcc>
 800952c:	684a      	ldr	r2, [r1, #4]
 800952e:	2a00      	cmp	r2, #0
 8009530:	dc04      	bgt.n	800953c <__sflush_r+0x1c>
 8009532:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009534:	2a00      	cmp	r2, #0
 8009536:	dc01      	bgt.n	800953c <__sflush_r+0x1c>
 8009538:	2000      	movs	r0, #0
 800953a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800953c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800953e:	2f00      	cmp	r7, #0
 8009540:	d0fa      	beq.n	8009538 <__sflush_r+0x18>
 8009542:	2200      	movs	r2, #0
 8009544:	2180      	movs	r1, #128	; 0x80
 8009546:	682e      	ldr	r6, [r5, #0]
 8009548:	602a      	str	r2, [r5, #0]
 800954a:	001a      	movs	r2, r3
 800954c:	0149      	lsls	r1, r1, #5
 800954e:	400a      	ands	r2, r1
 8009550:	420b      	tst	r3, r1
 8009552:	d034      	beq.n	80095be <__sflush_r+0x9e>
 8009554:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009556:	89a3      	ldrh	r3, [r4, #12]
 8009558:	075b      	lsls	r3, r3, #29
 800955a:	d506      	bpl.n	800956a <__sflush_r+0x4a>
 800955c:	6863      	ldr	r3, [r4, #4]
 800955e:	1ac0      	subs	r0, r0, r3
 8009560:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009562:	2b00      	cmp	r3, #0
 8009564:	d001      	beq.n	800956a <__sflush_r+0x4a>
 8009566:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009568:	1ac0      	subs	r0, r0, r3
 800956a:	0002      	movs	r2, r0
 800956c:	6a21      	ldr	r1, [r4, #32]
 800956e:	2300      	movs	r3, #0
 8009570:	0028      	movs	r0, r5
 8009572:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009574:	47b8      	blx	r7
 8009576:	89a1      	ldrh	r1, [r4, #12]
 8009578:	1c43      	adds	r3, r0, #1
 800957a:	d106      	bne.n	800958a <__sflush_r+0x6a>
 800957c:	682b      	ldr	r3, [r5, #0]
 800957e:	2b1d      	cmp	r3, #29
 8009580:	d831      	bhi.n	80095e6 <__sflush_r+0xc6>
 8009582:	4a2c      	ldr	r2, [pc, #176]	; (8009634 <__sflush_r+0x114>)
 8009584:	40da      	lsrs	r2, r3
 8009586:	07d3      	lsls	r3, r2, #31
 8009588:	d52d      	bpl.n	80095e6 <__sflush_r+0xc6>
 800958a:	2300      	movs	r3, #0
 800958c:	6063      	str	r3, [r4, #4]
 800958e:	6923      	ldr	r3, [r4, #16]
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	04cb      	lsls	r3, r1, #19
 8009594:	d505      	bpl.n	80095a2 <__sflush_r+0x82>
 8009596:	1c43      	adds	r3, r0, #1
 8009598:	d102      	bne.n	80095a0 <__sflush_r+0x80>
 800959a:	682b      	ldr	r3, [r5, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d100      	bne.n	80095a2 <__sflush_r+0x82>
 80095a0:	6560      	str	r0, [r4, #84]	; 0x54
 80095a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095a4:	602e      	str	r6, [r5, #0]
 80095a6:	2900      	cmp	r1, #0
 80095a8:	d0c6      	beq.n	8009538 <__sflush_r+0x18>
 80095aa:	0023      	movs	r3, r4
 80095ac:	3344      	adds	r3, #68	; 0x44
 80095ae:	4299      	cmp	r1, r3
 80095b0:	d002      	beq.n	80095b8 <__sflush_r+0x98>
 80095b2:	0028      	movs	r0, r5
 80095b4:	f7ff fac4 	bl	8008b40 <_free_r>
 80095b8:	2000      	movs	r0, #0
 80095ba:	6360      	str	r0, [r4, #52]	; 0x34
 80095bc:	e7bd      	b.n	800953a <__sflush_r+0x1a>
 80095be:	2301      	movs	r3, #1
 80095c0:	0028      	movs	r0, r5
 80095c2:	6a21      	ldr	r1, [r4, #32]
 80095c4:	47b8      	blx	r7
 80095c6:	1c43      	adds	r3, r0, #1
 80095c8:	d1c5      	bne.n	8009556 <__sflush_r+0x36>
 80095ca:	682b      	ldr	r3, [r5, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d0c2      	beq.n	8009556 <__sflush_r+0x36>
 80095d0:	2b1d      	cmp	r3, #29
 80095d2:	d001      	beq.n	80095d8 <__sflush_r+0xb8>
 80095d4:	2b16      	cmp	r3, #22
 80095d6:	d101      	bne.n	80095dc <__sflush_r+0xbc>
 80095d8:	602e      	str	r6, [r5, #0]
 80095da:	e7ad      	b.n	8009538 <__sflush_r+0x18>
 80095dc:	2340      	movs	r3, #64	; 0x40
 80095de:	89a2      	ldrh	r2, [r4, #12]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	81a3      	strh	r3, [r4, #12]
 80095e4:	e7a9      	b.n	800953a <__sflush_r+0x1a>
 80095e6:	2340      	movs	r3, #64	; 0x40
 80095e8:	430b      	orrs	r3, r1
 80095ea:	e7fa      	b.n	80095e2 <__sflush_r+0xc2>
 80095ec:	690f      	ldr	r7, [r1, #16]
 80095ee:	2f00      	cmp	r7, #0
 80095f0:	d0a2      	beq.n	8009538 <__sflush_r+0x18>
 80095f2:	680a      	ldr	r2, [r1, #0]
 80095f4:	600f      	str	r7, [r1, #0]
 80095f6:	1bd2      	subs	r2, r2, r7
 80095f8:	9201      	str	r2, [sp, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	079b      	lsls	r3, r3, #30
 80095fe:	d100      	bne.n	8009602 <__sflush_r+0xe2>
 8009600:	694a      	ldr	r2, [r1, #20]
 8009602:	60a2      	str	r2, [r4, #8]
 8009604:	9b01      	ldr	r3, [sp, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	dc00      	bgt.n	800960c <__sflush_r+0xec>
 800960a:	e795      	b.n	8009538 <__sflush_r+0x18>
 800960c:	003a      	movs	r2, r7
 800960e:	0028      	movs	r0, r5
 8009610:	9b01      	ldr	r3, [sp, #4]
 8009612:	6a21      	ldr	r1, [r4, #32]
 8009614:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009616:	47b0      	blx	r6
 8009618:	2800      	cmp	r0, #0
 800961a:	dc06      	bgt.n	800962a <__sflush_r+0x10a>
 800961c:	2340      	movs	r3, #64	; 0x40
 800961e:	2001      	movs	r0, #1
 8009620:	89a2      	ldrh	r2, [r4, #12]
 8009622:	4240      	negs	r0, r0
 8009624:	4313      	orrs	r3, r2
 8009626:	81a3      	strh	r3, [r4, #12]
 8009628:	e787      	b.n	800953a <__sflush_r+0x1a>
 800962a:	9b01      	ldr	r3, [sp, #4]
 800962c:	183f      	adds	r7, r7, r0
 800962e:	1a1b      	subs	r3, r3, r0
 8009630:	9301      	str	r3, [sp, #4]
 8009632:	e7e7      	b.n	8009604 <__sflush_r+0xe4>
 8009634:	20400001 	.word	0x20400001

08009638 <_fflush_r>:
 8009638:	690b      	ldr	r3, [r1, #16]
 800963a:	b570      	push	{r4, r5, r6, lr}
 800963c:	0005      	movs	r5, r0
 800963e:	000c      	movs	r4, r1
 8009640:	2b00      	cmp	r3, #0
 8009642:	d102      	bne.n	800964a <_fflush_r+0x12>
 8009644:	2500      	movs	r5, #0
 8009646:	0028      	movs	r0, r5
 8009648:	bd70      	pop	{r4, r5, r6, pc}
 800964a:	2800      	cmp	r0, #0
 800964c:	d004      	beq.n	8009658 <_fflush_r+0x20>
 800964e:	6983      	ldr	r3, [r0, #24]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d101      	bne.n	8009658 <_fflush_r+0x20>
 8009654:	f000 f892 	bl	800977c <__sinit>
 8009658:	4b14      	ldr	r3, [pc, #80]	; (80096ac <_fflush_r+0x74>)
 800965a:	429c      	cmp	r4, r3
 800965c:	d11b      	bne.n	8009696 <_fflush_r+0x5e>
 800965e:	686c      	ldr	r4, [r5, #4]
 8009660:	220c      	movs	r2, #12
 8009662:	5ea3      	ldrsh	r3, [r4, r2]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d0ed      	beq.n	8009644 <_fflush_r+0xc>
 8009668:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800966a:	07d2      	lsls	r2, r2, #31
 800966c:	d404      	bmi.n	8009678 <_fflush_r+0x40>
 800966e:	059b      	lsls	r3, r3, #22
 8009670:	d402      	bmi.n	8009678 <_fflush_r+0x40>
 8009672:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009674:	f000 f923 	bl	80098be <__retarget_lock_acquire_recursive>
 8009678:	0028      	movs	r0, r5
 800967a:	0021      	movs	r1, r4
 800967c:	f7ff ff50 	bl	8009520 <__sflush_r>
 8009680:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009682:	0005      	movs	r5, r0
 8009684:	07db      	lsls	r3, r3, #31
 8009686:	d4de      	bmi.n	8009646 <_fflush_r+0xe>
 8009688:	89a3      	ldrh	r3, [r4, #12]
 800968a:	059b      	lsls	r3, r3, #22
 800968c:	d4db      	bmi.n	8009646 <_fflush_r+0xe>
 800968e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009690:	f000 f916 	bl	80098c0 <__retarget_lock_release_recursive>
 8009694:	e7d7      	b.n	8009646 <_fflush_r+0xe>
 8009696:	4b06      	ldr	r3, [pc, #24]	; (80096b0 <_fflush_r+0x78>)
 8009698:	429c      	cmp	r4, r3
 800969a:	d101      	bne.n	80096a0 <_fflush_r+0x68>
 800969c:	68ac      	ldr	r4, [r5, #8]
 800969e:	e7df      	b.n	8009660 <_fflush_r+0x28>
 80096a0:	4b04      	ldr	r3, [pc, #16]	; (80096b4 <_fflush_r+0x7c>)
 80096a2:	429c      	cmp	r4, r3
 80096a4:	d1dc      	bne.n	8009660 <_fflush_r+0x28>
 80096a6:	68ec      	ldr	r4, [r5, #12]
 80096a8:	e7da      	b.n	8009660 <_fflush_r+0x28>
 80096aa:	46c0      	nop			; (mov r8, r8)
 80096ac:	0800a104 	.word	0x0800a104
 80096b0:	0800a124 	.word	0x0800a124
 80096b4:	0800a0e4 	.word	0x0800a0e4

080096b8 <std>:
 80096b8:	2300      	movs	r3, #0
 80096ba:	b510      	push	{r4, lr}
 80096bc:	0004      	movs	r4, r0
 80096be:	6003      	str	r3, [r0, #0]
 80096c0:	6043      	str	r3, [r0, #4]
 80096c2:	6083      	str	r3, [r0, #8]
 80096c4:	8181      	strh	r1, [r0, #12]
 80096c6:	6643      	str	r3, [r0, #100]	; 0x64
 80096c8:	0019      	movs	r1, r3
 80096ca:	81c2      	strh	r2, [r0, #14]
 80096cc:	6103      	str	r3, [r0, #16]
 80096ce:	6143      	str	r3, [r0, #20]
 80096d0:	6183      	str	r3, [r0, #24]
 80096d2:	2208      	movs	r2, #8
 80096d4:	305c      	adds	r0, #92	; 0x5c
 80096d6:	f7fb fd87 	bl	80051e8 <memset>
 80096da:	4b05      	ldr	r3, [pc, #20]	; (80096f0 <std+0x38>)
 80096dc:	6263      	str	r3, [r4, #36]	; 0x24
 80096de:	4b05      	ldr	r3, [pc, #20]	; (80096f4 <std+0x3c>)
 80096e0:	6224      	str	r4, [r4, #32]
 80096e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80096e4:	4b04      	ldr	r3, [pc, #16]	; (80096f8 <std+0x40>)
 80096e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096e8:	4b04      	ldr	r3, [pc, #16]	; (80096fc <std+0x44>)
 80096ea:	6323      	str	r3, [r4, #48]	; 0x30
 80096ec:	bd10      	pop	{r4, pc}
 80096ee:	46c0      	nop			; (mov r8, r8)
 80096f0:	08009a41 	.word	0x08009a41
 80096f4:	08009a69 	.word	0x08009a69
 80096f8:	08009aa1 	.word	0x08009aa1
 80096fc:	08009acd 	.word	0x08009acd

08009700 <_cleanup_r>:
 8009700:	b510      	push	{r4, lr}
 8009702:	4902      	ldr	r1, [pc, #8]	; (800970c <_cleanup_r+0xc>)
 8009704:	f000 f8ba 	bl	800987c <_fwalk_reent>
 8009708:	bd10      	pop	{r4, pc}
 800970a:	46c0      	nop			; (mov r8, r8)
 800970c:	08009639 	.word	0x08009639

08009710 <__sfmoreglue>:
 8009710:	b570      	push	{r4, r5, r6, lr}
 8009712:	2568      	movs	r5, #104	; 0x68
 8009714:	1e4a      	subs	r2, r1, #1
 8009716:	4355      	muls	r5, r2
 8009718:	000e      	movs	r6, r1
 800971a:	0029      	movs	r1, r5
 800971c:	3174      	adds	r1, #116	; 0x74
 800971e:	f7ff fa59 	bl	8008bd4 <_malloc_r>
 8009722:	1e04      	subs	r4, r0, #0
 8009724:	d008      	beq.n	8009738 <__sfmoreglue+0x28>
 8009726:	2100      	movs	r1, #0
 8009728:	002a      	movs	r2, r5
 800972a:	6001      	str	r1, [r0, #0]
 800972c:	6046      	str	r6, [r0, #4]
 800972e:	300c      	adds	r0, #12
 8009730:	60a0      	str	r0, [r4, #8]
 8009732:	3268      	adds	r2, #104	; 0x68
 8009734:	f7fb fd58 	bl	80051e8 <memset>
 8009738:	0020      	movs	r0, r4
 800973a:	bd70      	pop	{r4, r5, r6, pc}

0800973c <__sfp_lock_acquire>:
 800973c:	b510      	push	{r4, lr}
 800973e:	4802      	ldr	r0, [pc, #8]	; (8009748 <__sfp_lock_acquire+0xc>)
 8009740:	f000 f8bd 	bl	80098be <__retarget_lock_acquire_recursive>
 8009744:	bd10      	pop	{r4, pc}
 8009746:	46c0      	nop			; (mov r8, r8)
 8009748:	200003c4 	.word	0x200003c4

0800974c <__sfp_lock_release>:
 800974c:	b510      	push	{r4, lr}
 800974e:	4802      	ldr	r0, [pc, #8]	; (8009758 <__sfp_lock_release+0xc>)
 8009750:	f000 f8b6 	bl	80098c0 <__retarget_lock_release_recursive>
 8009754:	bd10      	pop	{r4, pc}
 8009756:	46c0      	nop			; (mov r8, r8)
 8009758:	200003c4 	.word	0x200003c4

0800975c <__sinit_lock_acquire>:
 800975c:	b510      	push	{r4, lr}
 800975e:	4802      	ldr	r0, [pc, #8]	; (8009768 <__sinit_lock_acquire+0xc>)
 8009760:	f000 f8ad 	bl	80098be <__retarget_lock_acquire_recursive>
 8009764:	bd10      	pop	{r4, pc}
 8009766:	46c0      	nop			; (mov r8, r8)
 8009768:	200003bf 	.word	0x200003bf

0800976c <__sinit_lock_release>:
 800976c:	b510      	push	{r4, lr}
 800976e:	4802      	ldr	r0, [pc, #8]	; (8009778 <__sinit_lock_release+0xc>)
 8009770:	f000 f8a6 	bl	80098c0 <__retarget_lock_release_recursive>
 8009774:	bd10      	pop	{r4, pc}
 8009776:	46c0      	nop			; (mov r8, r8)
 8009778:	200003bf 	.word	0x200003bf

0800977c <__sinit>:
 800977c:	b513      	push	{r0, r1, r4, lr}
 800977e:	0004      	movs	r4, r0
 8009780:	f7ff ffec 	bl	800975c <__sinit_lock_acquire>
 8009784:	69a3      	ldr	r3, [r4, #24]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d002      	beq.n	8009790 <__sinit+0x14>
 800978a:	f7ff ffef 	bl	800976c <__sinit_lock_release>
 800978e:	bd13      	pop	{r0, r1, r4, pc}
 8009790:	64a3      	str	r3, [r4, #72]	; 0x48
 8009792:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009794:	6523      	str	r3, [r4, #80]	; 0x50
 8009796:	4b13      	ldr	r3, [pc, #76]	; (80097e4 <__sinit+0x68>)
 8009798:	4a13      	ldr	r2, [pc, #76]	; (80097e8 <__sinit+0x6c>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	62a2      	str	r2, [r4, #40]	; 0x28
 800979e:	9301      	str	r3, [sp, #4]
 80097a0:	42a3      	cmp	r3, r4
 80097a2:	d101      	bne.n	80097a8 <__sinit+0x2c>
 80097a4:	2301      	movs	r3, #1
 80097a6:	61a3      	str	r3, [r4, #24]
 80097a8:	0020      	movs	r0, r4
 80097aa:	f000 f81f 	bl	80097ec <__sfp>
 80097ae:	6060      	str	r0, [r4, #4]
 80097b0:	0020      	movs	r0, r4
 80097b2:	f000 f81b 	bl	80097ec <__sfp>
 80097b6:	60a0      	str	r0, [r4, #8]
 80097b8:	0020      	movs	r0, r4
 80097ba:	f000 f817 	bl	80097ec <__sfp>
 80097be:	2200      	movs	r2, #0
 80097c0:	2104      	movs	r1, #4
 80097c2:	60e0      	str	r0, [r4, #12]
 80097c4:	6860      	ldr	r0, [r4, #4]
 80097c6:	f7ff ff77 	bl	80096b8 <std>
 80097ca:	2201      	movs	r2, #1
 80097cc:	2109      	movs	r1, #9
 80097ce:	68a0      	ldr	r0, [r4, #8]
 80097d0:	f7ff ff72 	bl	80096b8 <std>
 80097d4:	2202      	movs	r2, #2
 80097d6:	2112      	movs	r1, #18
 80097d8:	68e0      	ldr	r0, [r4, #12]
 80097da:	f7ff ff6d 	bl	80096b8 <std>
 80097de:	2301      	movs	r3, #1
 80097e0:	61a3      	str	r3, [r4, #24]
 80097e2:	e7d2      	b.n	800978a <__sinit+0xe>
 80097e4:	08009c90 	.word	0x08009c90
 80097e8:	08009701 	.word	0x08009701

080097ec <__sfp>:
 80097ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ee:	0007      	movs	r7, r0
 80097f0:	f7ff ffa4 	bl	800973c <__sfp_lock_acquire>
 80097f4:	4b1f      	ldr	r3, [pc, #124]	; (8009874 <__sfp+0x88>)
 80097f6:	681e      	ldr	r6, [r3, #0]
 80097f8:	69b3      	ldr	r3, [r6, #24]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d102      	bne.n	8009804 <__sfp+0x18>
 80097fe:	0030      	movs	r0, r6
 8009800:	f7ff ffbc 	bl	800977c <__sinit>
 8009804:	3648      	adds	r6, #72	; 0x48
 8009806:	68b4      	ldr	r4, [r6, #8]
 8009808:	6873      	ldr	r3, [r6, #4]
 800980a:	3b01      	subs	r3, #1
 800980c:	d504      	bpl.n	8009818 <__sfp+0x2c>
 800980e:	6833      	ldr	r3, [r6, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d022      	beq.n	800985a <__sfp+0x6e>
 8009814:	6836      	ldr	r6, [r6, #0]
 8009816:	e7f6      	b.n	8009806 <__sfp+0x1a>
 8009818:	220c      	movs	r2, #12
 800981a:	5ea5      	ldrsh	r5, [r4, r2]
 800981c:	2d00      	cmp	r5, #0
 800981e:	d11a      	bne.n	8009856 <__sfp+0x6a>
 8009820:	0020      	movs	r0, r4
 8009822:	4b15      	ldr	r3, [pc, #84]	; (8009878 <__sfp+0x8c>)
 8009824:	3058      	adds	r0, #88	; 0x58
 8009826:	60e3      	str	r3, [r4, #12]
 8009828:	6665      	str	r5, [r4, #100]	; 0x64
 800982a:	f000 f847 	bl	80098bc <__retarget_lock_init_recursive>
 800982e:	f7ff ff8d 	bl	800974c <__sfp_lock_release>
 8009832:	0020      	movs	r0, r4
 8009834:	2208      	movs	r2, #8
 8009836:	0029      	movs	r1, r5
 8009838:	6025      	str	r5, [r4, #0]
 800983a:	60a5      	str	r5, [r4, #8]
 800983c:	6065      	str	r5, [r4, #4]
 800983e:	6125      	str	r5, [r4, #16]
 8009840:	6165      	str	r5, [r4, #20]
 8009842:	61a5      	str	r5, [r4, #24]
 8009844:	305c      	adds	r0, #92	; 0x5c
 8009846:	f7fb fccf 	bl	80051e8 <memset>
 800984a:	6365      	str	r5, [r4, #52]	; 0x34
 800984c:	63a5      	str	r5, [r4, #56]	; 0x38
 800984e:	64a5      	str	r5, [r4, #72]	; 0x48
 8009850:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009852:	0020      	movs	r0, r4
 8009854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009856:	3468      	adds	r4, #104	; 0x68
 8009858:	e7d7      	b.n	800980a <__sfp+0x1e>
 800985a:	2104      	movs	r1, #4
 800985c:	0038      	movs	r0, r7
 800985e:	f7ff ff57 	bl	8009710 <__sfmoreglue>
 8009862:	1e04      	subs	r4, r0, #0
 8009864:	6030      	str	r0, [r6, #0]
 8009866:	d1d5      	bne.n	8009814 <__sfp+0x28>
 8009868:	f7ff ff70 	bl	800974c <__sfp_lock_release>
 800986c:	230c      	movs	r3, #12
 800986e:	603b      	str	r3, [r7, #0]
 8009870:	e7ef      	b.n	8009852 <__sfp+0x66>
 8009872:	46c0      	nop			; (mov r8, r8)
 8009874:	08009c90 	.word	0x08009c90
 8009878:	ffff0001 	.word	0xffff0001

0800987c <_fwalk_reent>:
 800987c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800987e:	0004      	movs	r4, r0
 8009880:	0006      	movs	r6, r0
 8009882:	2700      	movs	r7, #0
 8009884:	9101      	str	r1, [sp, #4]
 8009886:	3448      	adds	r4, #72	; 0x48
 8009888:	6863      	ldr	r3, [r4, #4]
 800988a:	68a5      	ldr	r5, [r4, #8]
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	9b00      	ldr	r3, [sp, #0]
 8009890:	3b01      	subs	r3, #1
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	d504      	bpl.n	80098a0 <_fwalk_reent+0x24>
 8009896:	6824      	ldr	r4, [r4, #0]
 8009898:	2c00      	cmp	r4, #0
 800989a:	d1f5      	bne.n	8009888 <_fwalk_reent+0xc>
 800989c:	0038      	movs	r0, r7
 800989e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098a0:	89ab      	ldrh	r3, [r5, #12]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d908      	bls.n	80098b8 <_fwalk_reent+0x3c>
 80098a6:	220e      	movs	r2, #14
 80098a8:	5eab      	ldrsh	r3, [r5, r2]
 80098aa:	3301      	adds	r3, #1
 80098ac:	d004      	beq.n	80098b8 <_fwalk_reent+0x3c>
 80098ae:	0029      	movs	r1, r5
 80098b0:	0030      	movs	r0, r6
 80098b2:	9b01      	ldr	r3, [sp, #4]
 80098b4:	4798      	blx	r3
 80098b6:	4307      	orrs	r7, r0
 80098b8:	3568      	adds	r5, #104	; 0x68
 80098ba:	e7e8      	b.n	800988e <_fwalk_reent+0x12>

080098bc <__retarget_lock_init_recursive>:
 80098bc:	4770      	bx	lr

080098be <__retarget_lock_acquire_recursive>:
 80098be:	4770      	bx	lr

080098c0 <__retarget_lock_release_recursive>:
 80098c0:	4770      	bx	lr
	...

080098c4 <__swhatbuf_r>:
 80098c4:	b570      	push	{r4, r5, r6, lr}
 80098c6:	000e      	movs	r6, r1
 80098c8:	001d      	movs	r5, r3
 80098ca:	230e      	movs	r3, #14
 80098cc:	5ec9      	ldrsh	r1, [r1, r3]
 80098ce:	0014      	movs	r4, r2
 80098d0:	b096      	sub	sp, #88	; 0x58
 80098d2:	2900      	cmp	r1, #0
 80098d4:	da07      	bge.n	80098e6 <__swhatbuf_r+0x22>
 80098d6:	2300      	movs	r3, #0
 80098d8:	602b      	str	r3, [r5, #0]
 80098da:	89b3      	ldrh	r3, [r6, #12]
 80098dc:	061b      	lsls	r3, r3, #24
 80098de:	d411      	bmi.n	8009904 <__swhatbuf_r+0x40>
 80098e0:	2380      	movs	r3, #128	; 0x80
 80098e2:	00db      	lsls	r3, r3, #3
 80098e4:	e00f      	b.n	8009906 <__swhatbuf_r+0x42>
 80098e6:	466a      	mov	r2, sp
 80098e8:	f000 f91c 	bl	8009b24 <_fstat_r>
 80098ec:	2800      	cmp	r0, #0
 80098ee:	dbf2      	blt.n	80098d6 <__swhatbuf_r+0x12>
 80098f0:	23f0      	movs	r3, #240	; 0xf0
 80098f2:	9901      	ldr	r1, [sp, #4]
 80098f4:	021b      	lsls	r3, r3, #8
 80098f6:	4019      	ands	r1, r3
 80098f8:	4b05      	ldr	r3, [pc, #20]	; (8009910 <__swhatbuf_r+0x4c>)
 80098fa:	18c9      	adds	r1, r1, r3
 80098fc:	424b      	negs	r3, r1
 80098fe:	4159      	adcs	r1, r3
 8009900:	6029      	str	r1, [r5, #0]
 8009902:	e7ed      	b.n	80098e0 <__swhatbuf_r+0x1c>
 8009904:	2340      	movs	r3, #64	; 0x40
 8009906:	2000      	movs	r0, #0
 8009908:	6023      	str	r3, [r4, #0]
 800990a:	b016      	add	sp, #88	; 0x58
 800990c:	bd70      	pop	{r4, r5, r6, pc}
 800990e:	46c0      	nop			; (mov r8, r8)
 8009910:	ffffe000 	.word	0xffffe000

08009914 <__smakebuf_r>:
 8009914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009916:	2602      	movs	r6, #2
 8009918:	898b      	ldrh	r3, [r1, #12]
 800991a:	0005      	movs	r5, r0
 800991c:	000c      	movs	r4, r1
 800991e:	4233      	tst	r3, r6
 8009920:	d006      	beq.n	8009930 <__smakebuf_r+0x1c>
 8009922:	0023      	movs	r3, r4
 8009924:	3347      	adds	r3, #71	; 0x47
 8009926:	6023      	str	r3, [r4, #0]
 8009928:	6123      	str	r3, [r4, #16]
 800992a:	2301      	movs	r3, #1
 800992c:	6163      	str	r3, [r4, #20]
 800992e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009930:	466a      	mov	r2, sp
 8009932:	ab01      	add	r3, sp, #4
 8009934:	f7ff ffc6 	bl	80098c4 <__swhatbuf_r>
 8009938:	9900      	ldr	r1, [sp, #0]
 800993a:	0007      	movs	r7, r0
 800993c:	0028      	movs	r0, r5
 800993e:	f7ff f949 	bl	8008bd4 <_malloc_r>
 8009942:	2800      	cmp	r0, #0
 8009944:	d108      	bne.n	8009958 <__smakebuf_r+0x44>
 8009946:	220c      	movs	r2, #12
 8009948:	5ea3      	ldrsh	r3, [r4, r2]
 800994a:	059a      	lsls	r2, r3, #22
 800994c:	d4ef      	bmi.n	800992e <__smakebuf_r+0x1a>
 800994e:	2203      	movs	r2, #3
 8009950:	4393      	bics	r3, r2
 8009952:	431e      	orrs	r6, r3
 8009954:	81a6      	strh	r6, [r4, #12]
 8009956:	e7e4      	b.n	8009922 <__smakebuf_r+0xe>
 8009958:	4b0f      	ldr	r3, [pc, #60]	; (8009998 <__smakebuf_r+0x84>)
 800995a:	62ab      	str	r3, [r5, #40]	; 0x28
 800995c:	2380      	movs	r3, #128	; 0x80
 800995e:	89a2      	ldrh	r2, [r4, #12]
 8009960:	6020      	str	r0, [r4, #0]
 8009962:	4313      	orrs	r3, r2
 8009964:	81a3      	strh	r3, [r4, #12]
 8009966:	9b00      	ldr	r3, [sp, #0]
 8009968:	6120      	str	r0, [r4, #16]
 800996a:	6163      	str	r3, [r4, #20]
 800996c:	9b01      	ldr	r3, [sp, #4]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00d      	beq.n	800998e <__smakebuf_r+0x7a>
 8009972:	0028      	movs	r0, r5
 8009974:	230e      	movs	r3, #14
 8009976:	5ee1      	ldrsh	r1, [r4, r3]
 8009978:	f000 f8e6 	bl	8009b48 <_isatty_r>
 800997c:	2800      	cmp	r0, #0
 800997e:	d006      	beq.n	800998e <__smakebuf_r+0x7a>
 8009980:	2203      	movs	r2, #3
 8009982:	89a3      	ldrh	r3, [r4, #12]
 8009984:	4393      	bics	r3, r2
 8009986:	001a      	movs	r2, r3
 8009988:	2301      	movs	r3, #1
 800998a:	4313      	orrs	r3, r2
 800998c:	81a3      	strh	r3, [r4, #12]
 800998e:	89a0      	ldrh	r0, [r4, #12]
 8009990:	4307      	orrs	r7, r0
 8009992:	81a7      	strh	r7, [r4, #12]
 8009994:	e7cb      	b.n	800992e <__smakebuf_r+0x1a>
 8009996:	46c0      	nop			; (mov r8, r8)
 8009998:	08009701 	.word	0x08009701

0800999c <_malloc_usable_size_r>:
 800999c:	1f0b      	subs	r3, r1, #4
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	1f18      	subs	r0, r3, #4
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	da01      	bge.n	80099aa <_malloc_usable_size_r+0xe>
 80099a6:	580b      	ldr	r3, [r1, r0]
 80099a8:	18c0      	adds	r0, r0, r3
 80099aa:	4770      	bx	lr

080099ac <_raise_r>:
 80099ac:	b570      	push	{r4, r5, r6, lr}
 80099ae:	0004      	movs	r4, r0
 80099b0:	000d      	movs	r5, r1
 80099b2:	291f      	cmp	r1, #31
 80099b4:	d904      	bls.n	80099c0 <_raise_r+0x14>
 80099b6:	2316      	movs	r3, #22
 80099b8:	6003      	str	r3, [r0, #0]
 80099ba:	2001      	movs	r0, #1
 80099bc:	4240      	negs	r0, r0
 80099be:	bd70      	pop	{r4, r5, r6, pc}
 80099c0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d004      	beq.n	80099d0 <_raise_r+0x24>
 80099c6:	008a      	lsls	r2, r1, #2
 80099c8:	189b      	adds	r3, r3, r2
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	2a00      	cmp	r2, #0
 80099ce:	d108      	bne.n	80099e2 <_raise_r+0x36>
 80099d0:	0020      	movs	r0, r4
 80099d2:	f000 f831 	bl	8009a38 <_getpid_r>
 80099d6:	002a      	movs	r2, r5
 80099d8:	0001      	movs	r1, r0
 80099da:	0020      	movs	r0, r4
 80099dc:	f000 f81a 	bl	8009a14 <_kill_r>
 80099e0:	e7ed      	b.n	80099be <_raise_r+0x12>
 80099e2:	2000      	movs	r0, #0
 80099e4:	2a01      	cmp	r2, #1
 80099e6:	d0ea      	beq.n	80099be <_raise_r+0x12>
 80099e8:	1c51      	adds	r1, r2, #1
 80099ea:	d103      	bne.n	80099f4 <_raise_r+0x48>
 80099ec:	2316      	movs	r3, #22
 80099ee:	3001      	adds	r0, #1
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	e7e4      	b.n	80099be <_raise_r+0x12>
 80099f4:	2400      	movs	r4, #0
 80099f6:	0028      	movs	r0, r5
 80099f8:	601c      	str	r4, [r3, #0]
 80099fa:	4790      	blx	r2
 80099fc:	0020      	movs	r0, r4
 80099fe:	e7de      	b.n	80099be <_raise_r+0x12>

08009a00 <raise>:
 8009a00:	b510      	push	{r4, lr}
 8009a02:	4b03      	ldr	r3, [pc, #12]	; (8009a10 <raise+0x10>)
 8009a04:	0001      	movs	r1, r0
 8009a06:	6818      	ldr	r0, [r3, #0]
 8009a08:	f7ff ffd0 	bl	80099ac <_raise_r>
 8009a0c:	bd10      	pop	{r4, pc}
 8009a0e:	46c0      	nop			; (mov r8, r8)
 8009a10:	20000014 	.word	0x20000014

08009a14 <_kill_r>:
 8009a14:	2300      	movs	r3, #0
 8009a16:	b570      	push	{r4, r5, r6, lr}
 8009a18:	4d06      	ldr	r5, [pc, #24]	; (8009a34 <_kill_r+0x20>)
 8009a1a:	0004      	movs	r4, r0
 8009a1c:	0008      	movs	r0, r1
 8009a1e:	0011      	movs	r1, r2
 8009a20:	602b      	str	r3, [r5, #0]
 8009a22:	f7f8 ff1f 	bl	8002864 <_kill>
 8009a26:	1c43      	adds	r3, r0, #1
 8009a28:	d103      	bne.n	8009a32 <_kill_r+0x1e>
 8009a2a:	682b      	ldr	r3, [r5, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d000      	beq.n	8009a32 <_kill_r+0x1e>
 8009a30:	6023      	str	r3, [r4, #0]
 8009a32:	bd70      	pop	{r4, r5, r6, pc}
 8009a34:	200003b8 	.word	0x200003b8

08009a38 <_getpid_r>:
 8009a38:	b510      	push	{r4, lr}
 8009a3a:	f7f8 ff0d 	bl	8002858 <_getpid>
 8009a3e:	bd10      	pop	{r4, pc}

08009a40 <__sread>:
 8009a40:	b570      	push	{r4, r5, r6, lr}
 8009a42:	000c      	movs	r4, r1
 8009a44:	250e      	movs	r5, #14
 8009a46:	5f49      	ldrsh	r1, [r1, r5]
 8009a48:	f000 f8a4 	bl	8009b94 <_read_r>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	db03      	blt.n	8009a58 <__sread+0x18>
 8009a50:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009a52:	181b      	adds	r3, r3, r0
 8009a54:	6563      	str	r3, [r4, #84]	; 0x54
 8009a56:	bd70      	pop	{r4, r5, r6, pc}
 8009a58:	89a3      	ldrh	r3, [r4, #12]
 8009a5a:	4a02      	ldr	r2, [pc, #8]	; (8009a64 <__sread+0x24>)
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	81a3      	strh	r3, [r4, #12]
 8009a60:	e7f9      	b.n	8009a56 <__sread+0x16>
 8009a62:	46c0      	nop			; (mov r8, r8)
 8009a64:	ffffefff 	.word	0xffffefff

08009a68 <__swrite>:
 8009a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6a:	001f      	movs	r7, r3
 8009a6c:	898b      	ldrh	r3, [r1, #12]
 8009a6e:	0005      	movs	r5, r0
 8009a70:	000c      	movs	r4, r1
 8009a72:	0016      	movs	r6, r2
 8009a74:	05db      	lsls	r3, r3, #23
 8009a76:	d505      	bpl.n	8009a84 <__swrite+0x1c>
 8009a78:	230e      	movs	r3, #14
 8009a7a:	5ec9      	ldrsh	r1, [r1, r3]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	2302      	movs	r3, #2
 8009a80:	f000 f874 	bl	8009b6c <_lseek_r>
 8009a84:	89a3      	ldrh	r3, [r4, #12]
 8009a86:	4a05      	ldr	r2, [pc, #20]	; (8009a9c <__swrite+0x34>)
 8009a88:	0028      	movs	r0, r5
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	81a3      	strh	r3, [r4, #12]
 8009a8e:	0032      	movs	r2, r6
 8009a90:	230e      	movs	r3, #14
 8009a92:	5ee1      	ldrsh	r1, [r4, r3]
 8009a94:	003b      	movs	r3, r7
 8009a96:	f000 f81f 	bl	8009ad8 <_write_r>
 8009a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a9c:	ffffefff 	.word	0xffffefff

08009aa0 <__sseek>:
 8009aa0:	b570      	push	{r4, r5, r6, lr}
 8009aa2:	000c      	movs	r4, r1
 8009aa4:	250e      	movs	r5, #14
 8009aa6:	5f49      	ldrsh	r1, [r1, r5]
 8009aa8:	f000 f860 	bl	8009b6c <_lseek_r>
 8009aac:	89a3      	ldrh	r3, [r4, #12]
 8009aae:	1c42      	adds	r2, r0, #1
 8009ab0:	d103      	bne.n	8009aba <__sseek+0x1a>
 8009ab2:	4a05      	ldr	r2, [pc, #20]	; (8009ac8 <__sseek+0x28>)
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	81a3      	strh	r3, [r4, #12]
 8009ab8:	bd70      	pop	{r4, r5, r6, pc}
 8009aba:	2280      	movs	r2, #128	; 0x80
 8009abc:	0152      	lsls	r2, r2, #5
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	81a3      	strh	r3, [r4, #12]
 8009ac2:	6560      	str	r0, [r4, #84]	; 0x54
 8009ac4:	e7f8      	b.n	8009ab8 <__sseek+0x18>
 8009ac6:	46c0      	nop			; (mov r8, r8)
 8009ac8:	ffffefff 	.word	0xffffefff

08009acc <__sclose>:
 8009acc:	b510      	push	{r4, lr}
 8009ace:	230e      	movs	r3, #14
 8009ad0:	5ec9      	ldrsh	r1, [r1, r3]
 8009ad2:	f000 f815 	bl	8009b00 <_close_r>
 8009ad6:	bd10      	pop	{r4, pc}

08009ad8 <_write_r>:
 8009ad8:	b570      	push	{r4, r5, r6, lr}
 8009ada:	0004      	movs	r4, r0
 8009adc:	0008      	movs	r0, r1
 8009ade:	0011      	movs	r1, r2
 8009ae0:	001a      	movs	r2, r3
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	4d05      	ldr	r5, [pc, #20]	; (8009afc <_write_r+0x24>)
 8009ae6:	602b      	str	r3, [r5, #0]
 8009ae8:	f7f8 fef5 	bl	80028d6 <_write>
 8009aec:	1c43      	adds	r3, r0, #1
 8009aee:	d103      	bne.n	8009af8 <_write_r+0x20>
 8009af0:	682b      	ldr	r3, [r5, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d000      	beq.n	8009af8 <_write_r+0x20>
 8009af6:	6023      	str	r3, [r4, #0]
 8009af8:	bd70      	pop	{r4, r5, r6, pc}
 8009afa:	46c0      	nop			; (mov r8, r8)
 8009afc:	200003b8 	.word	0x200003b8

08009b00 <_close_r>:
 8009b00:	2300      	movs	r3, #0
 8009b02:	b570      	push	{r4, r5, r6, lr}
 8009b04:	4d06      	ldr	r5, [pc, #24]	; (8009b20 <_close_r+0x20>)
 8009b06:	0004      	movs	r4, r0
 8009b08:	0008      	movs	r0, r1
 8009b0a:	602b      	str	r3, [r5, #0]
 8009b0c:	f7f8 feff 	bl	800290e <_close>
 8009b10:	1c43      	adds	r3, r0, #1
 8009b12:	d103      	bne.n	8009b1c <_close_r+0x1c>
 8009b14:	682b      	ldr	r3, [r5, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d000      	beq.n	8009b1c <_close_r+0x1c>
 8009b1a:	6023      	str	r3, [r4, #0]
 8009b1c:	bd70      	pop	{r4, r5, r6, pc}
 8009b1e:	46c0      	nop			; (mov r8, r8)
 8009b20:	200003b8 	.word	0x200003b8

08009b24 <_fstat_r>:
 8009b24:	2300      	movs	r3, #0
 8009b26:	b570      	push	{r4, r5, r6, lr}
 8009b28:	4d06      	ldr	r5, [pc, #24]	; (8009b44 <_fstat_r+0x20>)
 8009b2a:	0004      	movs	r4, r0
 8009b2c:	0008      	movs	r0, r1
 8009b2e:	0011      	movs	r1, r2
 8009b30:	602b      	str	r3, [r5, #0]
 8009b32:	f7f8 fef6 	bl	8002922 <_fstat>
 8009b36:	1c43      	adds	r3, r0, #1
 8009b38:	d103      	bne.n	8009b42 <_fstat_r+0x1e>
 8009b3a:	682b      	ldr	r3, [r5, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d000      	beq.n	8009b42 <_fstat_r+0x1e>
 8009b40:	6023      	str	r3, [r4, #0]
 8009b42:	bd70      	pop	{r4, r5, r6, pc}
 8009b44:	200003b8 	.word	0x200003b8

08009b48 <_isatty_r>:
 8009b48:	2300      	movs	r3, #0
 8009b4a:	b570      	push	{r4, r5, r6, lr}
 8009b4c:	4d06      	ldr	r5, [pc, #24]	; (8009b68 <_isatty_r+0x20>)
 8009b4e:	0004      	movs	r4, r0
 8009b50:	0008      	movs	r0, r1
 8009b52:	602b      	str	r3, [r5, #0]
 8009b54:	f7f8 fef3 	bl	800293e <_isatty>
 8009b58:	1c43      	adds	r3, r0, #1
 8009b5a:	d103      	bne.n	8009b64 <_isatty_r+0x1c>
 8009b5c:	682b      	ldr	r3, [r5, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d000      	beq.n	8009b64 <_isatty_r+0x1c>
 8009b62:	6023      	str	r3, [r4, #0]
 8009b64:	bd70      	pop	{r4, r5, r6, pc}
 8009b66:	46c0      	nop			; (mov r8, r8)
 8009b68:	200003b8 	.word	0x200003b8

08009b6c <_lseek_r>:
 8009b6c:	b570      	push	{r4, r5, r6, lr}
 8009b6e:	0004      	movs	r4, r0
 8009b70:	0008      	movs	r0, r1
 8009b72:	0011      	movs	r1, r2
 8009b74:	001a      	movs	r2, r3
 8009b76:	2300      	movs	r3, #0
 8009b78:	4d05      	ldr	r5, [pc, #20]	; (8009b90 <_lseek_r+0x24>)
 8009b7a:	602b      	str	r3, [r5, #0]
 8009b7c:	f7f8 fee8 	bl	8002950 <_lseek>
 8009b80:	1c43      	adds	r3, r0, #1
 8009b82:	d103      	bne.n	8009b8c <_lseek_r+0x20>
 8009b84:	682b      	ldr	r3, [r5, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d000      	beq.n	8009b8c <_lseek_r+0x20>
 8009b8a:	6023      	str	r3, [r4, #0]
 8009b8c:	bd70      	pop	{r4, r5, r6, pc}
 8009b8e:	46c0      	nop			; (mov r8, r8)
 8009b90:	200003b8 	.word	0x200003b8

08009b94 <_read_r>:
 8009b94:	b570      	push	{r4, r5, r6, lr}
 8009b96:	0004      	movs	r4, r0
 8009b98:	0008      	movs	r0, r1
 8009b9a:	0011      	movs	r1, r2
 8009b9c:	001a      	movs	r2, r3
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	4d05      	ldr	r5, [pc, #20]	; (8009bb8 <_read_r+0x24>)
 8009ba2:	602b      	str	r3, [r5, #0]
 8009ba4:	f7f8 fe7a 	bl	800289c <_read>
 8009ba8:	1c43      	adds	r3, r0, #1
 8009baa:	d103      	bne.n	8009bb4 <_read_r+0x20>
 8009bac:	682b      	ldr	r3, [r5, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d000      	beq.n	8009bb4 <_read_r+0x20>
 8009bb2:	6023      	str	r3, [r4, #0]
 8009bb4:	bd70      	pop	{r4, r5, r6, pc}
 8009bb6:	46c0      	nop			; (mov r8, r8)
 8009bb8:	200003b8 	.word	0x200003b8

08009bbc <_init>:
 8009bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bbe:	46c0      	nop			; (mov r8, r8)
 8009bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bc2:	bc08      	pop	{r3}
 8009bc4:	469e      	mov	lr, r3
 8009bc6:	4770      	bx	lr

08009bc8 <_fini>:
 8009bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bca:	46c0      	nop			; (mov r8, r8)
 8009bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bce:	bc08      	pop	{r3}
 8009bd0:	469e      	mov	lr, r3
 8009bd2:	4770      	bx	lr
