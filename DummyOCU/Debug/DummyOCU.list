
DummyOCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ac4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002b80  08002b80  00012b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bb8  08002bb8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bb8  08002bb8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bb8  08002bb8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bb8  08002bb8  00012bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bbc  08002bbc  00012bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  2000000c  08002bcc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08002bcc  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea46  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c7d  00000000  00000000  0002ea7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  000306f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  000313b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a192  00000000  00000000  00031fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed12  00000000  00000000  0004c162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aaba4  00000000  00000000  0005ae74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00105a18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e14  00000000  00000000  00105a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002b68 	.word	0x08002b68

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002b68 	.word	0x08002b68

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fb94 	bl	800094c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f80b 	bl	800023e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f918 	bl	800045c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800022c:	f000 f8c8 	bl	80003c0 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000230:	f000 f8f6 	bl	8000420 <MX_DMA_Init>
  MX_SPI1_Init();
 8000234:	f000 f862 	bl	80002fc <MX_SPI1_Init>
  MX_TIM14_Init();
 8000238:	f000 f89a 	bl	8000370 <MX_TIM14_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023c:	e7fe      	b.n	800023c <main+0x20>

0800023e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023e:	b590      	push	{r4, r7, lr}
 8000240:	b099      	sub	sp, #100	; 0x64
 8000242:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000244:	242c      	movs	r4, #44	; 0x2c
 8000246:	193b      	adds	r3, r7, r4
 8000248:	0018      	movs	r0, r3
 800024a:	2334      	movs	r3, #52	; 0x34
 800024c:	001a      	movs	r2, r3
 800024e:	2100      	movs	r1, #0
 8000250:	f002 fc82 	bl	8002b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	231c      	movs	r3, #28
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	0018      	movs	r0, r3
 800025a:	2310      	movs	r3, #16
 800025c:	001a      	movs	r2, r3
 800025e:	2100      	movs	r1, #0
 8000260:	f002 fc7a 	bl	8002b58 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000264:	003b      	movs	r3, r7
 8000266:	0018      	movs	r0, r3
 8000268:	231c      	movs	r3, #28
 800026a:	001a      	movs	r2, r3
 800026c:	2100      	movs	r1, #0
 800026e:	f002 fc73 	bl	8002b58 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000272:	0021      	movs	r1, r4
 8000274:	187b      	adds	r3, r7, r1
 8000276:	2201      	movs	r2, #1
 8000278:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800027a:	187b      	adds	r3, r7, r1
 800027c:	2205      	movs	r2, #5
 800027e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000280:	187b      	adds	r3, r7, r1
 8000282:	2202      	movs	r2, #2
 8000284:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000286:	187b      	adds	r3, r7, r1
 8000288:	2280      	movs	r2, #128	; 0x80
 800028a:	0252      	lsls	r2, r2, #9
 800028c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800028e:	187b      	adds	r3, r7, r1
 8000290:	22a0      	movs	r2, #160	; 0xa0
 8000292:	0392      	lsls	r2, r2, #14
 8000294:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2201      	movs	r2, #1
 800029a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029c:	187b      	adds	r3, r7, r1
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 ff96 	bl	80011d0 <HAL_RCC_OscConfig>
 80002a4:	1e03      	subs	r3, r0, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002a8:	f000 f960 	bl	800056c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ac:	211c      	movs	r1, #28
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2207      	movs	r2, #7
 80002b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2202      	movs	r2, #2
 80002b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2200      	movs	r2, #0
 80002c4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2101      	movs	r1, #1
 80002ca:	0018      	movs	r0, r3
 80002cc:	f001 fb06 	bl	80018dc <HAL_RCC_ClockConfig>
 80002d0:	1e03      	subs	r3, r0, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002d4:	f000 f94a 	bl	800056c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002d8:	003b      	movs	r3, r7
 80002da:	2202      	movs	r2, #2
 80002dc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002de:	003b      	movs	r3, r7
 80002e0:	2200      	movs	r2, #0
 80002e2:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e4:	003b      	movs	r3, r7
 80002e6:	0018      	movs	r0, r3
 80002e8:	f001 fc72 	bl	8001bd0 <HAL_RCCEx_PeriphCLKConfig>
 80002ec:	1e03      	subs	r3, r0, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80002f0:	f000 f93c 	bl	800056c <Error_Handler>
  }
}
 80002f4:	46c0      	nop			; (mov r8, r8)
 80002f6:	46bd      	mov	sp, r7
 80002f8:	b019      	add	sp, #100	; 0x64
 80002fa:	bd90      	pop	{r4, r7, pc}

080002fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000300:	4b19      	ldr	r3, [pc, #100]	; (8000368 <MX_SPI1_Init+0x6c>)
 8000302:	4a1a      	ldr	r2, [pc, #104]	; (800036c <MX_SPI1_Init+0x70>)
 8000304:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000306:	4b18      	ldr	r3, [pc, #96]	; (8000368 <MX_SPI1_Init+0x6c>)
 8000308:	2200      	movs	r2, #0
 800030a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800030c:	4b16      	ldr	r3, [pc, #88]	; (8000368 <MX_SPI1_Init+0x6c>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000312:	4b15      	ldr	r3, [pc, #84]	; (8000368 <MX_SPI1_Init+0x6c>)
 8000314:	22e0      	movs	r2, #224	; 0xe0
 8000316:	00d2      	lsls	r2, r2, #3
 8000318:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <MX_SPI1_Init+0x6c>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000320:	4b11      	ldr	r3, [pc, #68]	; (8000368 <MX_SPI1_Init+0x6c>)
 8000322:	2200      	movs	r2, #0
 8000324:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000326:	4b10      	ldr	r3, [pc, #64]	; (8000368 <MX_SPI1_Init+0x6c>)
 8000328:	2280      	movs	r2, #128	; 0x80
 800032a:	0092      	lsls	r2, r2, #2
 800032c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <MX_SPI1_Init+0x6c>)
 8000330:	2200      	movs	r2, #0
 8000332:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <MX_SPI1_Init+0x6c>)
 8000336:	2200      	movs	r2, #0
 8000338:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <MX_SPI1_Init+0x6c>)
 800033c:	2200      	movs	r2, #0
 800033e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <MX_SPI1_Init+0x6c>)
 8000342:	2207      	movs	r2, #7
 8000344:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <MX_SPI1_Init+0x6c>)
 8000348:	2200      	movs	r2, #0
 800034a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <MX_SPI1_Init+0x6c>)
 800034e:	2200      	movs	r2, #0
 8000350:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <MX_SPI1_Init+0x6c>)
 8000354:	0018      	movs	r0, r3
 8000356:	f001 fd3b 	bl	8001dd0 <HAL_SPI_Init>
 800035a:	1e03      	subs	r3, r0, #0
 800035c:	d001      	beq.n	8000362 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 800035e:	f000 f905 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	20000128 	.word	0x20000128
 800036c:	40013000 	.word	0x40013000

08000370 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <MX_TIM14_Init+0x40>)
 8000376:	4a0f      	ldr	r2, [pc, #60]	; (80003b4 <MX_TIM14_Init+0x44>)
 8000378:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10800 -1 ;
 800037a:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <MX_TIM14_Init+0x40>)
 800037c:	4a0e      	ldr	r2, [pc, #56]	; (80003b8 <MX_TIM14_Init+0x48>)
 800037e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000380:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <MX_TIM14_Init+0x40>)
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000 - 1;
 8000386:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <MX_TIM14_Init+0x40>)
 8000388:	4a0c      	ldr	r2, [pc, #48]	; (80003bc <MX_TIM14_Init+0x4c>)
 800038a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <MX_TIM14_Init+0x40>)
 800038e:	2200      	movs	r2, #0
 8000390:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000392:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <MX_TIM14_Init+0x40>)
 8000394:	2200      	movs	r2, #0
 8000396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <MX_TIM14_Init+0x40>)
 800039a:	0018      	movs	r0, r3
 800039c:	f001 feec 	bl	8002178 <HAL_TIM_Base_Init>
 80003a0:	1e03      	subs	r3, r0, #0
 80003a2:	d001      	beq.n	80003a8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80003a4:	f000 f8e2 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	200002b8 	.word	0x200002b8
 80003b4:	40002000 	.word	0x40002000
 80003b8:	00002a2f 	.word	0x00002a2f
 80003bc:	00001387 	.word	0x00001387

080003c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003c4:	4b14      	ldr	r3, [pc, #80]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003c6:	4a15      	ldr	r2, [pc, #84]	; (800041c <MX_USART2_UART_Init+0x5c>)
 80003c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003ca:	4b13      	ldr	r3, [pc, #76]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003cc:	22e1      	movs	r2, #225	; 0xe1
 80003ce:	0252      	lsls	r2, r2, #9
 80003d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003d2:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003e6:	220c      	movs	r2, #12
 80003e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003fe:	2200      	movs	r2, #0
 8000400:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <MX_USART2_UART_Init+0x58>)
 8000404:	0018      	movs	r0, r3
 8000406:	f001 ff87 	bl	8002318 <HAL_UART_Init>
 800040a:	1e03      	subs	r3, r0, #0
 800040c:	d001      	beq.n	8000412 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800040e:	f000 f8ad 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	2000018c 	.word	0x2000018c
 800041c:	40004400 	.word	0x40004400

08000420 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <MX_DMA_Init+0x38>)
 8000428:	695a      	ldr	r2, [r3, #20]
 800042a:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <MX_DMA_Init+0x38>)
 800042c:	2101      	movs	r1, #1
 800042e:	430a      	orrs	r2, r1
 8000430:	615a      	str	r2, [r3, #20]
 8000432:	4b09      	ldr	r3, [pc, #36]	; (8000458 <MX_DMA_Init+0x38>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	2201      	movs	r2, #1
 8000438:	4013      	ands	r3, r2
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 800043e:	2200      	movs	r2, #0
 8000440:	2100      	movs	r1, #0
 8000442:	200a      	movs	r0, #10
 8000444:	f000 fb92 	bl	8000b6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8000448:	200a      	movs	r0, #10
 800044a:	f000 fba4 	bl	8000b96 <HAL_NVIC_EnableIRQ>

}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	b002      	add	sp, #8
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	40021000 	.word	0x40021000

0800045c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b08b      	sub	sp, #44	; 0x2c
 8000460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000462:	2414      	movs	r4, #20
 8000464:	193b      	adds	r3, r7, r4
 8000466:	0018      	movs	r0, r3
 8000468:	2314      	movs	r3, #20
 800046a:	001a      	movs	r2, r3
 800046c:	2100      	movs	r1, #0
 800046e:	f002 fb73 	bl	8002b58 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000472:	4b3c      	ldr	r3, [pc, #240]	; (8000564 <MX_GPIO_Init+0x108>)
 8000474:	695a      	ldr	r2, [r3, #20]
 8000476:	4b3b      	ldr	r3, [pc, #236]	; (8000564 <MX_GPIO_Init+0x108>)
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	0309      	lsls	r1, r1, #12
 800047c:	430a      	orrs	r2, r1
 800047e:	615a      	str	r2, [r3, #20]
 8000480:	4b38      	ldr	r3, [pc, #224]	; (8000564 <MX_GPIO_Init+0x108>)
 8000482:	695a      	ldr	r2, [r3, #20]
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	031b      	lsls	r3, r3, #12
 8000488:	4013      	ands	r3, r2
 800048a:	613b      	str	r3, [r7, #16]
 800048c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800048e:	4b35      	ldr	r3, [pc, #212]	; (8000564 <MX_GPIO_Init+0x108>)
 8000490:	695a      	ldr	r2, [r3, #20]
 8000492:	4b34      	ldr	r3, [pc, #208]	; (8000564 <MX_GPIO_Init+0x108>)
 8000494:	2180      	movs	r1, #128	; 0x80
 8000496:	03c9      	lsls	r1, r1, #15
 8000498:	430a      	orrs	r2, r1
 800049a:	615a      	str	r2, [r3, #20]
 800049c:	4b31      	ldr	r3, [pc, #196]	; (8000564 <MX_GPIO_Init+0x108>)
 800049e:	695a      	ldr	r2, [r3, #20]
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	03db      	lsls	r3, r3, #15
 80004a4:	4013      	ands	r3, r2
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	4b2e      	ldr	r3, [pc, #184]	; (8000564 <MX_GPIO_Init+0x108>)
 80004ac:	695a      	ldr	r2, [r3, #20]
 80004ae:	4b2d      	ldr	r3, [pc, #180]	; (8000564 <MX_GPIO_Init+0x108>)
 80004b0:	2180      	movs	r1, #128	; 0x80
 80004b2:	0289      	lsls	r1, r1, #10
 80004b4:	430a      	orrs	r2, r1
 80004b6:	615a      	str	r2, [r3, #20]
 80004b8:	4b2a      	ldr	r3, [pc, #168]	; (8000564 <MX_GPIO_Init+0x108>)
 80004ba:	695a      	ldr	r2, [r3, #20]
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	029b      	lsls	r3, r3, #10
 80004c0:	4013      	ands	r3, r2
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c6:	4b27      	ldr	r3, [pc, #156]	; (8000564 <MX_GPIO_Init+0x108>)
 80004c8:	695a      	ldr	r2, [r3, #20]
 80004ca:	4b26      	ldr	r3, [pc, #152]	; (8000564 <MX_GPIO_Init+0x108>)
 80004cc:	2180      	movs	r1, #128	; 0x80
 80004ce:	02c9      	lsls	r1, r1, #11
 80004d0:	430a      	orrs	r2, r1
 80004d2:	615a      	str	r2, [r3, #20]
 80004d4:	4b23      	ldr	r3, [pc, #140]	; (8000564 <MX_GPIO_Init+0x108>)
 80004d6:	695a      	ldr	r2, [r3, #20]
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	02db      	lsls	r3, r3, #11
 80004dc:	4013      	ands	r3, r2
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80004e2:	2390      	movs	r3, #144	; 0x90
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	2200      	movs	r2, #0
 80004e8:	2120      	movs	r1, #32
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 fe52 	bl	8001194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	0192      	lsls	r2, r2, #6
 80004f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	2284      	movs	r2, #132	; 0x84
 80004fc:	0392      	lsls	r2, r2, #14
 80004fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	193b      	adds	r3, r7, r4
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000506:	193b      	adds	r3, r7, r4
 8000508:	4a17      	ldr	r2, [pc, #92]	; (8000568 <MX_GPIO_Init+0x10c>)
 800050a:	0019      	movs	r1, r3
 800050c:	0010      	movs	r0, r2
 800050e:	f000 fcc9 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2210      	movs	r2, #16
 8000516:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000518:	193b      	adds	r3, r7, r4
 800051a:	2284      	movs	r2, #132	; 0x84
 800051c:	0392      	lsls	r2, r2, #14
 800051e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000526:	193a      	adds	r2, r7, r4
 8000528:	2390      	movs	r3, #144	; 0x90
 800052a:	05db      	lsls	r3, r3, #23
 800052c:	0011      	movs	r1, r2
 800052e:	0018      	movs	r0, r3
 8000530:	f000 fcb8 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000534:	0021      	movs	r1, r4
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2220      	movs	r2, #32
 800053a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2201      	movs	r2, #1
 8000540:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054e:	187a      	adds	r2, r7, r1
 8000550:	2390      	movs	r3, #144	; 0x90
 8000552:	05db      	lsls	r3, r3, #23
 8000554:	0011      	movs	r1, r2
 8000556:	0018      	movs	r0, r3
 8000558:	f000 fca4 	bl	8000ea4 <HAL_GPIO_Init>

}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b00b      	add	sp, #44	; 0x2c
 8000562:	bd90      	pop	{r4, r7, pc}
 8000564:	40021000 	.word	0x40021000
 8000568:	48000800 	.word	0x48000800

0800056c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000570:	b672      	cpsid	i
}
 8000572:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000574:	e7fe      	b.n	8000574 <Error_Handler+0x8>
	...

08000578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <HAL_MspInit+0x44>)
 8000580:	699a      	ldr	r2, [r3, #24]
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <HAL_MspInit+0x44>)
 8000584:	2101      	movs	r1, #1
 8000586:	430a      	orrs	r2, r1
 8000588:	619a      	str	r2, [r3, #24]
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <HAL_MspInit+0x44>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	2201      	movs	r2, #1
 8000590:	4013      	ands	r3, r2
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <HAL_MspInit+0x44>)
 8000598:	69da      	ldr	r2, [r3, #28]
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <HAL_MspInit+0x44>)
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	0549      	lsls	r1, r1, #21
 80005a0:	430a      	orrs	r2, r1
 80005a2:	61da      	str	r2, [r3, #28]
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <HAL_MspInit+0x44>)
 80005a6:	69da      	ldr	r2, [r3, #28]
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	055b      	lsls	r3, r3, #21
 80005ac:	4013      	ands	r3, r2
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b002      	add	sp, #8
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	40021000 	.word	0x40021000

080005c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b08b      	sub	sp, #44	; 0x2c
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	2414      	movs	r4, #20
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	0018      	movs	r0, r3
 80005ce:	2314      	movs	r3, #20
 80005d0:	001a      	movs	r2, r3
 80005d2:	2100      	movs	r1, #0
 80005d4:	f002 fac0 	bl	8002b58 <memset>
  if(hspi->Instance==SPI1)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a69      	ldr	r2, [pc, #420]	; (8000784 <HAL_SPI_MspInit+0x1c4>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d000      	beq.n	80005e4 <HAL_SPI_MspInit+0x24>
 80005e2:	e0ca      	b.n	800077a <HAL_SPI_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005e4:	4b68      	ldr	r3, [pc, #416]	; (8000788 <HAL_SPI_MspInit+0x1c8>)
 80005e6:	699a      	ldr	r2, [r3, #24]
 80005e8:	4b67      	ldr	r3, [pc, #412]	; (8000788 <HAL_SPI_MspInit+0x1c8>)
 80005ea:	2180      	movs	r1, #128	; 0x80
 80005ec:	0149      	lsls	r1, r1, #5
 80005ee:	430a      	orrs	r2, r1
 80005f0:	619a      	str	r2, [r3, #24]
 80005f2:	4b65      	ldr	r3, [pc, #404]	; (8000788 <HAL_SPI_MspInit+0x1c8>)
 80005f4:	699a      	ldr	r2, [r3, #24]
 80005f6:	2380      	movs	r3, #128	; 0x80
 80005f8:	015b      	lsls	r3, r3, #5
 80005fa:	4013      	ands	r3, r2
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b61      	ldr	r3, [pc, #388]	; (8000788 <HAL_SPI_MspInit+0x1c8>)
 8000602:	695a      	ldr	r2, [r3, #20]
 8000604:	4b60      	ldr	r3, [pc, #384]	; (8000788 <HAL_SPI_MspInit+0x1c8>)
 8000606:	2180      	movs	r1, #128	; 0x80
 8000608:	0289      	lsls	r1, r1, #10
 800060a:	430a      	orrs	r2, r1
 800060c:	615a      	str	r2, [r3, #20]
 800060e:	4b5e      	ldr	r3, [pc, #376]	; (8000788 <HAL_SPI_MspInit+0x1c8>)
 8000610:	695a      	ldr	r2, [r3, #20]
 8000612:	2380      	movs	r3, #128	; 0x80
 8000614:	029b      	lsls	r3, r3, #10
 8000616:	4013      	ands	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800061c:	4b5a      	ldr	r3, [pc, #360]	; (8000788 <HAL_SPI_MspInit+0x1c8>)
 800061e:	695a      	ldr	r2, [r3, #20]
 8000620:	4b59      	ldr	r3, [pc, #356]	; (8000788 <HAL_SPI_MspInit+0x1c8>)
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	02c9      	lsls	r1, r1, #11
 8000626:	430a      	orrs	r2, r1
 8000628:	615a      	str	r2, [r3, #20]
 800062a:	4b57      	ldr	r3, [pc, #348]	; (8000788 <HAL_SPI_MspInit+0x1c8>)
 800062c:	695a      	ldr	r2, [r3, #20]
 800062e:	2380      	movs	r3, #128	; 0x80
 8000630:	02db      	lsls	r3, r3, #11
 8000632:	4013      	ands	r3, r2
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000638:	193b      	adds	r3, r7, r4
 800063a:	22c0      	movs	r2, #192	; 0xc0
 800063c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063e:	193b      	adds	r3, r7, r4
 8000640:	2202      	movs	r2, #2
 8000642:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	193b      	adds	r3, r7, r4
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064a:	193b      	adds	r3, r7, r4
 800064c:	2203      	movs	r2, #3
 800064e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000650:	193b      	adds	r3, r7, r4
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000656:	193a      	adds	r2, r7, r4
 8000658:	2390      	movs	r3, #144	; 0x90
 800065a:	05db      	lsls	r3, r3, #23
 800065c:	0011      	movs	r1, r2
 800065e:	0018      	movs	r0, r3
 8000660:	f000 fc20 	bl	8000ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000664:	0021      	movs	r1, r4
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2208      	movs	r2, #8
 800066a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2202      	movs	r2, #2
 8000670:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2203      	movs	r2, #3
 800067c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000684:	187b      	adds	r3, r7, r1
 8000686:	4a41      	ldr	r2, [pc, #260]	; (800078c <HAL_SPI_MspInit+0x1cc>)
 8000688:	0019      	movs	r1, r3
 800068a:	0010      	movs	r0, r2
 800068c:	f000 fc0a 	bl	8000ea4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000690:	4b3f      	ldr	r3, [pc, #252]	; (8000790 <HAL_SPI_MspInit+0x1d0>)
 8000692:	4a40      	ldr	r2, [pc, #256]	; (8000794 <HAL_SPI_MspInit+0x1d4>)
 8000694:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000696:	4b3e      	ldr	r3, [pc, #248]	; (8000790 <HAL_SPI_MspInit+0x1d0>)
 8000698:	2200      	movs	r2, #0
 800069a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800069c:	4b3c      	ldr	r3, [pc, #240]	; (8000790 <HAL_SPI_MspInit+0x1d0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006a2:	4b3b      	ldr	r3, [pc, #236]	; (8000790 <HAL_SPI_MspInit+0x1d0>)
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <HAL_SPI_MspInit+0x1d0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006ae:	4b38      	ldr	r3, [pc, #224]	; (8000790 <HAL_SPI_MspInit+0x1d0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <HAL_SPI_MspInit+0x1d0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80006ba:	4b35      	ldr	r3, [pc, #212]	; (8000790 <HAL_SPI_MspInit+0x1d0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80006c0:	4b33      	ldr	r3, [pc, #204]	; (8000790 <HAL_SPI_MspInit+0x1d0>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 fa84 	bl	8000bd0 <HAL_DMA_Init>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 80006cc:	f7ff ff4e 	bl	800056c <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_SPI1_RX);
 80006d0:	4a31      	ldr	r2, [pc, #196]	; (8000798 <HAL_SPI_MspInit+0x1d8>)
 80006d2:	23a8      	movs	r3, #168	; 0xa8
 80006d4:	58d3      	ldr	r3, [r2, r3]
 80006d6:	4930      	ldr	r1, [pc, #192]	; (8000798 <HAL_SPI_MspInit+0x1d8>)
 80006d8:	22f0      	movs	r2, #240	; 0xf0
 80006da:	4393      	bics	r3, r2
 80006dc:	22a8      	movs	r2, #168	; 0xa8
 80006de:	508b      	str	r3, [r1, r2]
 80006e0:	4a2d      	ldr	r2, [pc, #180]	; (8000798 <HAL_SPI_MspInit+0x1d8>)
 80006e2:	23a8      	movs	r3, #168	; 0xa8
 80006e4:	58d3      	ldr	r3, [r2, r3]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <HAL_SPI_MspInit+0x1d8>)
 80006e8:	2230      	movs	r2, #48	; 0x30
 80006ea:	4313      	orrs	r3, r2
 80006ec:	22a8      	movs	r2, #168	; 0xa8
 80006ee:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a27      	ldr	r2, [pc, #156]	; (8000790 <HAL_SPI_MspInit+0x1d0>)
 80006f4:	659a      	str	r2, [r3, #88]	; 0x58
 80006f6:	4b26      	ldr	r3, [pc, #152]	; (8000790 <HAL_SPI_MspInit+0x1d0>)
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <HAL_SPI_MspInit+0x1dc>)
 80006fe:	4a28      	ldr	r2, [pc, #160]	; (80007a0 <HAL_SPI_MspInit+0x1e0>)
 8000700:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <HAL_SPI_MspInit+0x1dc>)
 8000704:	2210      	movs	r2, #16
 8000706:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <HAL_SPI_MspInit+0x1dc>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <HAL_SPI_MspInit+0x1dc>)
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <HAL_SPI_MspInit+0x1dc>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <HAL_SPI_MspInit+0x1dc>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <HAL_SPI_MspInit+0x1dc>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <HAL_SPI_MspInit+0x1dc>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <HAL_SPI_MspInit+0x1dc>)
 800072e:	0018      	movs	r0, r3
 8000730:	f000 fa4e 	bl	8000bd0 <HAL_DMA_Init>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d001      	beq.n	800073c <HAL_SPI_MspInit+0x17c>
    {
      Error_Handler();
 8000738:	f7ff ff18 	bl	800056c <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH3_SPI1_TX);
 800073c:	4a16      	ldr	r2, [pc, #88]	; (8000798 <HAL_SPI_MspInit+0x1d8>)
 800073e:	23a8      	movs	r3, #168	; 0xa8
 8000740:	58d3      	ldr	r3, [r2, r3]
 8000742:	4915      	ldr	r1, [pc, #84]	; (8000798 <HAL_SPI_MspInit+0x1d8>)
 8000744:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <HAL_SPI_MspInit+0x1e4>)
 8000746:	4013      	ands	r3, r2
 8000748:	22a8      	movs	r2, #168	; 0xa8
 800074a:	508b      	str	r3, [r1, r2]
 800074c:	4a12      	ldr	r2, [pc, #72]	; (8000798 <HAL_SPI_MspInit+0x1d8>)
 800074e:	23a8      	movs	r3, #168	; 0xa8
 8000750:	58d3      	ldr	r3, [r2, r3]
 8000752:	4911      	ldr	r1, [pc, #68]	; (8000798 <HAL_SPI_MspInit+0x1d8>)
 8000754:	22c0      	movs	r2, #192	; 0xc0
 8000756:	0092      	lsls	r2, r2, #2
 8000758:	4313      	orrs	r3, r2
 800075a:	22a8      	movs	r2, #168	; 0xa8
 800075c:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a0e      	ldr	r2, [pc, #56]	; (800079c <HAL_SPI_MspInit+0x1dc>)
 8000762:	655a      	str	r2, [r3, #84]	; 0x54
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <HAL_SPI_MspInit+0x1dc>)
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	625a      	str	r2, [r3, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	2019      	movs	r0, #25
 8000770:	f000 f9fc 	bl	8000b6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000774:	2019      	movs	r0, #25
 8000776:	f000 fa0e 	bl	8000b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b00b      	add	sp, #44	; 0x2c
 8000780:	bd90      	pop	{r4, r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	40013000 	.word	0x40013000
 8000788:	40021000 	.word	0x40021000
 800078c:	48000400 	.word	0x48000400
 8000790:	20000274 	.word	0x20000274
 8000794:	4002001c 	.word	0x4002001c
 8000798:	40020000 	.word	0x40020000
 800079c:	20000300 	.word	0x20000300
 80007a0:	40020030 	.word	0x40020030
 80007a4:	fffff0ff 	.word	0xfffff0ff

080007a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <HAL_TIM_Base_MspInit+0x38>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10d      	bne.n	80007d6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <HAL_TIM_Base_MspInit+0x3c>)
 80007bc:	69da      	ldr	r2, [r3, #28]
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <HAL_TIM_Base_MspInit+0x3c>)
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	0049      	lsls	r1, r1, #1
 80007c4:	430a      	orrs	r2, r1
 80007c6:	61da      	str	r2, [r3, #28]
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_TIM_Base_MspInit+0x3c>)
 80007ca:	69da      	ldr	r2, [r3, #28]
 80007cc:	2380      	movs	r3, #128	; 0x80
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4013      	ands	r3, r2
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b004      	add	sp, #16
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	40002000 	.word	0x40002000
 80007e4:	40021000 	.word	0x40021000

080007e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b08b      	sub	sp, #44	; 0x2c
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	2414      	movs	r4, #20
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	0018      	movs	r0, r3
 80007f6:	2314      	movs	r3, #20
 80007f8:	001a      	movs	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f002 f9ac 	bl	8002b58 <memset>
  if(huart->Instance==USART2)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <HAL_UART_MspInit+0x90>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d132      	bne.n	8000870 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <HAL_UART_MspInit+0x94>)
 800080c:	69da      	ldr	r2, [r3, #28]
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <HAL_UART_MspInit+0x94>)
 8000810:	2180      	movs	r1, #128	; 0x80
 8000812:	0289      	lsls	r1, r1, #10
 8000814:	430a      	orrs	r2, r1
 8000816:	61da      	str	r2, [r3, #28]
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <HAL_UART_MspInit+0x94>)
 800081a:	69da      	ldr	r2, [r3, #28]
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	029b      	lsls	r3, r3, #10
 8000820:	4013      	ands	r3, r2
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_UART_MspInit+0x94>)
 8000828:	695a      	ldr	r2, [r3, #20]
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <HAL_UART_MspInit+0x94>)
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	0289      	lsls	r1, r1, #10
 8000830:	430a      	orrs	r2, r1
 8000832:	615a      	str	r2, [r3, #20]
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <HAL_UART_MspInit+0x94>)
 8000836:	695a      	ldr	r2, [r3, #20]
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	029b      	lsls	r3, r3, #10
 800083c:	4013      	ands	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000842:	0021      	movs	r1, r4
 8000844:	187b      	adds	r3, r7, r1
 8000846:	220c      	movs	r2, #12
 8000848:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2202      	movs	r2, #2
 800084e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2201      	movs	r2, #1
 8000860:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	187a      	adds	r2, r7, r1
 8000864:	2390      	movs	r3, #144	; 0x90
 8000866:	05db      	lsls	r3, r3, #23
 8000868:	0011      	movs	r1, r2
 800086a:	0018      	movs	r0, r3
 800086c:	f000 fb1a 	bl	8000ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b00b      	add	sp, #44	; 0x2c
 8000876:	bd90      	pop	{r4, r7, pc}
 8000878:	40004400 	.word	0x40004400
 800087c:	40021000 	.word	0x40021000

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <NMI_Handler+0x4>

08000886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <HardFault_Handler+0x4>

0800088c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a4:	f000 f89a 	bl	80009dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>)
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fa17 	bl	8000cea <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>)
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 fa13 	bl	8000cea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	20000274 	.word	0x20000274
 80008d0:	20000300 	.word	0x20000300

080008d4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <SPI1_IRQHandler+0x14>)
 80008da:	0018      	movs	r0, r3
 80008dc:	f001 fb30 	bl	8001f40 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	20000128 	.word	0x20000128

080008ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <LoopForever+0x6>)
  ldr r1, =_edata
 80008fe:	490e      	ldr	r1, [pc, #56]	; (8000938 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000900:	4a0e      	ldr	r2, [pc, #56]	; (800093c <LoopForever+0xe>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0b      	ldr	r2, [pc, #44]	; (8000940 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000914:	4c0b      	ldr	r4, [pc, #44]	; (8000944 <LoopForever+0x16>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000922:	f7ff ffe3 	bl	80008ec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000926:	f002 f8f3 	bl	8002b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092a:	f7ff fc77 	bl	800021c <main>

0800092e <LoopForever>:

LoopForever:
    b LoopForever
 800092e:	e7fe      	b.n	800092e <LoopForever>
  ldr   r0, =_estack
 8000930:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800093c:	08002bc0 	.word	0x08002bc0
  ldr r2, =_sbss
 8000940:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000944:	2000034c 	.word	0x2000034c

08000948 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC1_COMP_IRQHandler>
	...

0800094c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000950:	4b07      	ldr	r3, [pc, #28]	; (8000970 <HAL_Init+0x24>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_Init+0x24>)
 8000956:	2110      	movs	r1, #16
 8000958:	430a      	orrs	r2, r1
 800095a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800095c:	2000      	movs	r0, #0
 800095e:	f000 f809 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000962:	f7ff fe09 	bl	8000578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000966:	2300      	movs	r3, #0
}
 8000968:	0018      	movs	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	40022000 	.word	0x40022000

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <HAL_InitTick+0x5c>)
 800097e:	681c      	ldr	r4, [r3, #0]
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <HAL_InitTick+0x60>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	0019      	movs	r1, r3
 8000986:	23fa      	movs	r3, #250	; 0xfa
 8000988:	0098      	lsls	r0, r3, #2
 800098a:	f7ff fbbb 	bl	8000104 <__udivsi3>
 800098e:	0003      	movs	r3, r0
 8000990:	0019      	movs	r1, r3
 8000992:	0020      	movs	r0, r4
 8000994:	f7ff fbb6 	bl	8000104 <__udivsi3>
 8000998:	0003      	movs	r3, r0
 800099a:	0018      	movs	r0, r3
 800099c:	f000 f90b 	bl	8000bb6 <HAL_SYSTICK_Config>
 80009a0:	1e03      	subs	r3, r0, #0
 80009a2:	d001      	beq.n	80009a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009a4:	2301      	movs	r3, #1
 80009a6:	e00f      	b.n	80009c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	d80b      	bhi.n	80009c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	2301      	movs	r3, #1
 80009b2:	425b      	negs	r3, r3
 80009b4:	2200      	movs	r2, #0
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 f8d8 	bl	8000b6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_InitTick+0x64>)
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	e000      	b.n	80009c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
}
 80009c8:	0018      	movs	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b003      	add	sp, #12
 80009ce:	bd90      	pop	{r4, r7, pc}
 80009d0:	20000000 	.word	0x20000000
 80009d4:	20000008 	.word	0x20000008
 80009d8:	20000004 	.word	0x20000004

080009dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_IncTick+0x1c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	001a      	movs	r2, r3
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <HAL_IncTick+0x20>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	18d2      	adds	r2, r2, r3
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <HAL_IncTick+0x20>)
 80009ee:	601a      	str	r2, [r3, #0]
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000348 	.word	0x20000348

08000a00 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  return uwTick;
 8000a04:	4b02      	ldr	r3, [pc, #8]	; (8000a10 <HAL_GetTick+0x10>)
 8000a06:	681b      	ldr	r3, [r3, #0]
}
 8000a08:	0018      	movs	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	20000348 	.word	0x20000348

08000a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	0002      	movs	r2, r0
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b7f      	cmp	r3, #127	; 0x7f
 8000a26:	d809      	bhi.n	8000a3c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	231f      	movs	r3, #31
 8000a30:	401a      	ands	r2, r3
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <__NVIC_EnableIRQ+0x30>)
 8000a34:	2101      	movs	r1, #1
 8000a36:	4091      	lsls	r1, r2
 8000a38:	000a      	movs	r2, r1
 8000a3a:	601a      	str	r2, [r3, #0]
  }
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b002      	add	sp, #8
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	e000e100 	.word	0xe000e100

08000a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	0002      	movs	r2, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	1dfb      	adds	r3, r7, #7
 8000a54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a5c:	d828      	bhi.n	8000ab0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a5e:	4a2f      	ldr	r2, [pc, #188]	; (8000b1c <__NVIC_SetPriority+0xd4>)
 8000a60:	1dfb      	adds	r3, r7, #7
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	b25b      	sxtb	r3, r3
 8000a66:	089b      	lsrs	r3, r3, #2
 8000a68:	33c0      	adds	r3, #192	; 0xc0
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	589b      	ldr	r3, [r3, r2]
 8000a6e:	1dfa      	adds	r2, r7, #7
 8000a70:	7812      	ldrb	r2, [r2, #0]
 8000a72:	0011      	movs	r1, r2
 8000a74:	2203      	movs	r2, #3
 8000a76:	400a      	ands	r2, r1
 8000a78:	00d2      	lsls	r2, r2, #3
 8000a7a:	21ff      	movs	r1, #255	; 0xff
 8000a7c:	4091      	lsls	r1, r2
 8000a7e:	000a      	movs	r2, r1
 8000a80:	43d2      	mvns	r2, r2
 8000a82:	401a      	ands	r2, r3
 8000a84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	019b      	lsls	r3, r3, #6
 8000a8a:	22ff      	movs	r2, #255	; 0xff
 8000a8c:	401a      	ands	r2, r3
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	0018      	movs	r0, r3
 8000a94:	2303      	movs	r3, #3
 8000a96:	4003      	ands	r3, r0
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9c:	481f      	ldr	r0, [pc, #124]	; (8000b1c <__NVIC_SetPriority+0xd4>)
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b25b      	sxtb	r3, r3
 8000aa4:	089b      	lsrs	r3, r3, #2
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	33c0      	adds	r3, #192	; 0xc0
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000aae:	e031      	b.n	8000b14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab0:	4a1b      	ldr	r2, [pc, #108]	; (8000b20 <__NVIC_SetPriority+0xd8>)
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	0019      	movs	r1, r3
 8000ab8:	230f      	movs	r3, #15
 8000aba:	400b      	ands	r3, r1
 8000abc:	3b08      	subs	r3, #8
 8000abe:	089b      	lsrs	r3, r3, #2
 8000ac0:	3306      	adds	r3, #6
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	18d3      	adds	r3, r2, r3
 8000ac6:	3304      	adds	r3, #4
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	1dfa      	adds	r2, r7, #7
 8000acc:	7812      	ldrb	r2, [r2, #0]
 8000ace:	0011      	movs	r1, r2
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	400a      	ands	r2, r1
 8000ad4:	00d2      	lsls	r2, r2, #3
 8000ad6:	21ff      	movs	r1, #255	; 0xff
 8000ad8:	4091      	lsls	r1, r2
 8000ada:	000a      	movs	r2, r1
 8000adc:	43d2      	mvns	r2, r2
 8000ade:	401a      	ands	r2, r3
 8000ae0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	019b      	lsls	r3, r3, #6
 8000ae6:	22ff      	movs	r2, #255	; 0xff
 8000ae8:	401a      	ands	r2, r3
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	0018      	movs	r0, r3
 8000af0:	2303      	movs	r3, #3
 8000af2:	4003      	ands	r3, r0
 8000af4:	00db      	lsls	r3, r3, #3
 8000af6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af8:	4809      	ldr	r0, [pc, #36]	; (8000b20 <__NVIC_SetPriority+0xd8>)
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	001c      	movs	r4, r3
 8000b00:	230f      	movs	r3, #15
 8000b02:	4023      	ands	r3, r4
 8000b04:	3b08      	subs	r3, #8
 8000b06:	089b      	lsrs	r3, r3, #2
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	3306      	adds	r3, #6
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	18c3      	adds	r3, r0, r3
 8000b10:	3304      	adds	r3, #4
 8000b12:	601a      	str	r2, [r3, #0]
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b003      	add	sp, #12
 8000b1a:	bd90      	pop	{r4, r7, pc}
 8000b1c:	e000e100 	.word	0xe000e100
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	1e5a      	subs	r2, r3, #1
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	045b      	lsls	r3, r3, #17
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d301      	bcc.n	8000b3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e010      	b.n	8000b5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <SysTick_Config+0x44>)
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	3a01      	subs	r2, #1
 8000b42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b44:	2301      	movs	r3, #1
 8000b46:	425b      	negs	r3, r3
 8000b48:	2103      	movs	r1, #3
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f7ff ff7c 	bl	8000a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <SysTick_Config+0x44>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <SysTick_Config+0x44>)
 8000b58:	2207      	movs	r2, #7
 8000b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	0018      	movs	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b002      	add	sp, #8
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	e000e010 	.word	0xe000e010

08000b6c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
 8000b76:	210f      	movs	r1, #15
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	1c02      	adds	r2, r0, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	b25b      	sxtb	r3, r3
 8000b86:	0011      	movs	r1, r2
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff ff5d 	bl	8000a48 <__NVIC_SetPriority>
}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b004      	add	sp, #16
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	0002      	movs	r2, r0
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff ff33 	bl	8000a14 <__NVIC_EnableIRQ>
}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b002      	add	sp, #8
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff ffaf 	bl	8000b24 <SysTick_Config>
 8000bc6:	0003      	movs	r3, r0
}
 8000bc8:	0018      	movs	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b002      	add	sp, #8
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d101      	bne.n	8000be6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e036      	b.n	8000c54 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2221      	movs	r2, #33	; 0x21
 8000bea:	2102      	movs	r1, #2
 8000bec:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <HAL_DMA_Init+0x8c>)
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69db      	ldr	r3, [r3, #28]
 8000c24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	0018      	movs	r0, r3
 8000c38:	f000 f8fa 	bl	8000e30 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2221      	movs	r2, #33	; 0x21
 8000c46:	2101      	movs	r1, #1
 8000c48:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2220      	movs	r2, #32
 8000c4e:	2100      	movs	r1, #0
 8000c50:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
}  
 8000c54:	0018      	movs	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b004      	add	sp, #16
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	ffffc00f 	.word	0xffffc00f

08000c60 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c68:	210f      	movs	r1, #15
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2221      	movs	r2, #33	; 0x21
 8000c74:	5c9b      	ldrb	r3, [r3, r2]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d006      	beq.n	8000c8a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2204      	movs	r2, #4
 8000c80:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2201      	movs	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]
 8000c88:	e028      	b.n	8000cdc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	210e      	movs	r1, #14
 8000c96:	438a      	bics	r2, r1
 8000c98:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	438a      	bics	r2, r1
 8000ca8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	000a      	movs	r2, r1
 8000cb8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2221      	movs	r2, #33	; 0x21
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2220      	movs	r2, #32
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d004      	beq.n	8000cdc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	0010      	movs	r0, r2
 8000cda:	4798      	blx	r3
    } 
  }
  return status;
 8000cdc:	230f      	movs	r3, #15
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	781b      	ldrb	r3, [r3, #0]
}
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b004      	add	sp, #16
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b084      	sub	sp, #16
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	2204      	movs	r2, #4
 8000d08:	409a      	lsls	r2, r3
 8000d0a:	0013      	movs	r3, r2
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	d024      	beq.n	8000d5c <HAL_DMA_IRQHandler+0x72>
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	2204      	movs	r2, #4
 8000d16:	4013      	ands	r3, r2
 8000d18:	d020      	beq.n	8000d5c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2220      	movs	r2, #32
 8000d22:	4013      	ands	r3, r2
 8000d24:	d107      	bne.n	8000d36 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2104      	movs	r1, #4
 8000d32:	438a      	bics	r2, r1
 8000d34:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d3e:	2104      	movs	r1, #4
 8000d40:	4091      	lsls	r1, r2
 8000d42:	000a      	movs	r2, r1
 8000d44:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d100      	bne.n	8000d50 <HAL_DMA_IRQHandler+0x66>
 8000d4e:	e06a      	b.n	8000e26 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	0010      	movs	r0, r2
 8000d58:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000d5a:	e064      	b.n	8000e26 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	2202      	movs	r2, #2
 8000d62:	409a      	lsls	r2, r3
 8000d64:	0013      	movs	r3, r2
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	d02b      	beq.n	8000dc4 <HAL_DMA_IRQHandler+0xda>
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	2202      	movs	r2, #2
 8000d70:	4013      	ands	r3, r2
 8000d72:	d027      	beq.n	8000dc4 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2220      	movs	r2, #32
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	d10b      	bne.n	8000d98 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	210a      	movs	r1, #10
 8000d8c:	438a      	bics	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2221      	movs	r2, #33	; 0x21
 8000d94:	2101      	movs	r1, #1
 8000d96:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000da0:	2102      	movs	r1, #2
 8000da2:	4091      	lsls	r1, r2
 8000da4:	000a      	movs	r2, r1
 8000da6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2220      	movs	r2, #32
 8000dac:	2100      	movs	r1, #0
 8000dae:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d036      	beq.n	8000e26 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	0010      	movs	r0, r2
 8000dc0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000dc2:	e030      	b.n	8000e26 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	2208      	movs	r2, #8
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	0013      	movs	r3, r2
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	d028      	beq.n	8000e26 <HAL_DMA_IRQHandler+0x13c>
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	2208      	movs	r2, #8
 8000dd8:	4013      	ands	r3, r2
 8000dda:	d024      	beq.n	8000e26 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	210e      	movs	r1, #14
 8000de8:	438a      	bics	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000df4:	2101      	movs	r1, #1
 8000df6:	4091      	lsls	r1, r2
 8000df8:	000a      	movs	r2, r1
 8000dfa:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2221      	movs	r2, #33	; 0x21
 8000e06:	2101      	movs	r1, #1
 8000e08:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2220      	movs	r2, #32
 8000e0e:	2100      	movs	r1, #0
 8000e10:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d005      	beq.n	8000e26 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	0010      	movs	r0, r2
 8000e22:	4798      	blx	r3
    }
   }
}  
 8000e24:	e7ff      	b.n	8000e26 <HAL_DMA_IRQHandler+0x13c>
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b004      	add	sp, #16
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	001a      	movs	r2, r3
 8000e3e:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <DMA_CalcBaseAndBitshift+0x60>)
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d810      	bhi.n	8000e66 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <DMA_CalcBaseAndBitshift+0x64>)
 8000e4a:	4694      	mov	ip, r2
 8000e4c:	4463      	add	r3, ip
 8000e4e:	2114      	movs	r1, #20
 8000e50:	0018      	movs	r0, r3
 8000e52:	f7ff f957 	bl	8000104 <__udivsi3>
 8000e56:	0003      	movs	r3, r0
 8000e58:	009a      	lsls	r2, r3, #2
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <DMA_CalcBaseAndBitshift+0x68>)
 8000e62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000e64:	e00f      	b.n	8000e86 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a0c      	ldr	r2, [pc, #48]	; (8000e9c <DMA_CalcBaseAndBitshift+0x6c>)
 8000e6c:	4694      	mov	ip, r2
 8000e6e:	4463      	add	r3, ip
 8000e70:	2114      	movs	r1, #20
 8000e72:	0018      	movs	r0, r3
 8000e74:	f7ff f946 	bl	8000104 <__udivsi3>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	009a      	lsls	r2, r3, #2
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <DMA_CalcBaseAndBitshift+0x70>)
 8000e84:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b002      	add	sp, #8
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	40020407 	.word	0x40020407
 8000e94:	bffdfff8 	.word	0xbffdfff8
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	bffdfbf8 	.word	0xbffdfbf8
 8000ea0:	40020400 	.word	0x40020400

08000ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb2:	e155      	b.n	8001160 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2101      	movs	r1, #1
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	4091      	lsls	r1, r2
 8000ebe:	000a      	movs	r2, r1
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d100      	bne.n	8000ecc <HAL_GPIO_Init+0x28>
 8000eca:	e146      	b.n	800115a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d005      	beq.n	8000ee4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2203      	movs	r2, #3
 8000ede:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d130      	bne.n	8000f46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	409a      	lsls	r2, r3
 8000ef2:	0013      	movs	r3, r2
 8000ef4:	43da      	mvns	r2, r3
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	409a      	lsls	r2, r3
 8000f06:	0013      	movs	r3, r2
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	43da      	mvns	r2, r3
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	091b      	lsrs	r3, r3, #4
 8000f30:	2201      	movs	r2, #1
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d017      	beq.n	8000f82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	0013      	movs	r3, r2
 8000f62:	43da      	mvns	r2, r3
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	409a      	lsls	r2, r3
 8000f74:	0013      	movs	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2203      	movs	r2, #3
 8000f88:	4013      	ands	r3, r2
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d123      	bne.n	8000fd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	08da      	lsrs	r2, r3, #3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3208      	adds	r2, #8
 8000f96:	0092      	lsls	r2, r2, #2
 8000f98:	58d3      	ldr	r3, [r2, r3]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	2207      	movs	r2, #7
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	0013      	movs	r3, r2
 8000faa:	43da      	mvns	r2, r3
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	691a      	ldr	r2, [r3, #16]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	2107      	movs	r1, #7
 8000fba:	400b      	ands	r3, r1
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	0092      	lsls	r2, r2, #2
 8000fd2:	6939      	ldr	r1, [r7, #16]
 8000fd4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	0013      	movs	r3, r2
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	0013      	movs	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	23c0      	movs	r3, #192	; 0xc0
 8001010:	029b      	lsls	r3, r3, #10
 8001012:	4013      	ands	r3, r2
 8001014:	d100      	bne.n	8001018 <HAL_GPIO_Init+0x174>
 8001016:	e0a0      	b.n	800115a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001018:	4b57      	ldr	r3, [pc, #348]	; (8001178 <HAL_GPIO_Init+0x2d4>)
 800101a:	699a      	ldr	r2, [r3, #24]
 800101c:	4b56      	ldr	r3, [pc, #344]	; (8001178 <HAL_GPIO_Init+0x2d4>)
 800101e:	2101      	movs	r1, #1
 8001020:	430a      	orrs	r2, r1
 8001022:	619a      	str	r2, [r3, #24]
 8001024:	4b54      	ldr	r3, [pc, #336]	; (8001178 <HAL_GPIO_Init+0x2d4>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	2201      	movs	r2, #1
 800102a:	4013      	ands	r3, r2
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001030:	4a52      	ldr	r2, [pc, #328]	; (800117c <HAL_GPIO_Init+0x2d8>)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	3302      	adds	r3, #2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	589b      	ldr	r3, [r3, r2]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2203      	movs	r2, #3
 8001042:	4013      	ands	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	220f      	movs	r2, #15
 8001048:	409a      	lsls	r2, r3
 800104a:	0013      	movs	r3, r2
 800104c:	43da      	mvns	r2, r3
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	2390      	movs	r3, #144	; 0x90
 8001058:	05db      	lsls	r3, r3, #23
 800105a:	429a      	cmp	r2, r3
 800105c:	d019      	beq.n	8001092 <HAL_GPIO_Init+0x1ee>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a47      	ldr	r2, [pc, #284]	; (8001180 <HAL_GPIO_Init+0x2dc>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d013      	beq.n	800108e <HAL_GPIO_Init+0x1ea>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a46      	ldr	r2, [pc, #280]	; (8001184 <HAL_GPIO_Init+0x2e0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d00d      	beq.n	800108a <HAL_GPIO_Init+0x1e6>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a45      	ldr	r2, [pc, #276]	; (8001188 <HAL_GPIO_Init+0x2e4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d007      	beq.n	8001086 <HAL_GPIO_Init+0x1e2>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a44      	ldr	r2, [pc, #272]	; (800118c <HAL_GPIO_Init+0x2e8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d101      	bne.n	8001082 <HAL_GPIO_Init+0x1de>
 800107e:	2304      	movs	r3, #4
 8001080:	e008      	b.n	8001094 <HAL_GPIO_Init+0x1f0>
 8001082:	2305      	movs	r3, #5
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x1f0>
 8001086:	2303      	movs	r3, #3
 8001088:	e004      	b.n	8001094 <HAL_GPIO_Init+0x1f0>
 800108a:	2302      	movs	r3, #2
 800108c:	e002      	b.n	8001094 <HAL_GPIO_Init+0x1f0>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_GPIO_Init+0x1f0>
 8001092:	2300      	movs	r3, #0
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	2103      	movs	r1, #3
 8001098:	400a      	ands	r2, r1
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	4093      	lsls	r3, r2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010a4:	4935      	ldr	r1, [pc, #212]	; (800117c <HAL_GPIO_Init+0x2d8>)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b2:	4b37      	ldr	r3, [pc, #220]	; (8001190 <HAL_GPIO_Init+0x2ec>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	43da      	mvns	r2, r3
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	025b      	lsls	r3, r3, #9
 80010ca:	4013      	ands	r3, r2
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010d6:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <HAL_GPIO_Init+0x2ec>)
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010dc:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <HAL_GPIO_Init+0x2ec>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43da      	mvns	r2, r3
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	029b      	lsls	r3, r3, #10
 80010f4:	4013      	ands	r3, r2
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001100:	4b23      	ldr	r3, [pc, #140]	; (8001190 <HAL_GPIO_Init+0x2ec>)
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001106:	4b22      	ldr	r3, [pc, #136]	; (8001190 <HAL_GPIO_Init+0x2ec>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	43da      	mvns	r2, r3
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	035b      	lsls	r3, r3, #13
 800111e:	4013      	ands	r3, r2
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <HAL_GPIO_Init+0x2ec>)
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <HAL_GPIO_Init+0x2ec>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43da      	mvns	r2, r3
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	039b      	lsls	r3, r3, #14
 8001148:	4013      	ands	r3, r2
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_GPIO_Init+0x2ec>)
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	40da      	lsrs	r2, r3
 8001168:	1e13      	subs	r3, r2, #0
 800116a:	d000      	beq.n	800116e <HAL_GPIO_Init+0x2ca>
 800116c:	e6a2      	b.n	8000eb4 <HAL_GPIO_Init+0x10>
  } 
}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b006      	add	sp, #24
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40021000 	.word	0x40021000
 800117c:	40010000 	.word	0x40010000
 8001180:	48000400 	.word	0x48000400
 8001184:	48000800 	.word	0x48000800
 8001188:	48000c00 	.word	0x48000c00
 800118c:	48001000 	.word	0x48001000
 8001190:	40010400 	.word	0x40010400

08001194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	0008      	movs	r0, r1
 800119e:	0011      	movs	r1, r2
 80011a0:	1cbb      	adds	r3, r7, #2
 80011a2:	1c02      	adds	r2, r0, #0
 80011a4:	801a      	strh	r2, [r3, #0]
 80011a6:	1c7b      	adds	r3, r7, #1
 80011a8:	1c0a      	adds	r2, r1, #0
 80011aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011ac:	1c7b      	adds	r3, r7, #1
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d004      	beq.n	80011be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011b4:	1cbb      	adds	r3, r7, #2
 80011b6:	881a      	ldrh	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011bc:	e003      	b.n	80011c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011be:	1cbb      	adds	r3, r7, #2
 80011c0:	881a      	ldrh	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b002      	add	sp, #8
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d102      	bne.n	80011e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	f000 fb76 	bl	80018d0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2201      	movs	r2, #1
 80011ea:	4013      	ands	r3, r2
 80011ec:	d100      	bne.n	80011f0 <HAL_RCC_OscConfig+0x20>
 80011ee:	e08e      	b.n	800130e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011f0:	4bc5      	ldr	r3, [pc, #788]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	220c      	movs	r2, #12
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d00e      	beq.n	800121a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011fc:	4bc2      	ldr	r3, [pc, #776]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	220c      	movs	r2, #12
 8001202:	4013      	ands	r3, r2
 8001204:	2b08      	cmp	r3, #8
 8001206:	d117      	bne.n	8001238 <HAL_RCC_OscConfig+0x68>
 8001208:	4bbf      	ldr	r3, [pc, #764]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	23c0      	movs	r3, #192	; 0xc0
 800120e:	025b      	lsls	r3, r3, #9
 8001210:	401a      	ands	r2, r3
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	025b      	lsls	r3, r3, #9
 8001216:	429a      	cmp	r2, r3
 8001218:	d10e      	bne.n	8001238 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121a:	4bbb      	ldr	r3, [pc, #748]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	029b      	lsls	r3, r3, #10
 8001222:	4013      	ands	r3, r2
 8001224:	d100      	bne.n	8001228 <HAL_RCC_OscConfig+0x58>
 8001226:	e071      	b.n	800130c <HAL_RCC_OscConfig+0x13c>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d000      	beq.n	8001232 <HAL_RCC_OscConfig+0x62>
 8001230:	e06c      	b.n	800130c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	f000 fb4c 	bl	80018d0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d107      	bne.n	8001250 <HAL_RCC_OscConfig+0x80>
 8001240:	4bb1      	ldr	r3, [pc, #708]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4bb0      	ldr	r3, [pc, #704]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 8001246:	2180      	movs	r1, #128	; 0x80
 8001248:	0249      	lsls	r1, r1, #9
 800124a:	430a      	orrs	r2, r1
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	e02f      	b.n	80012b0 <HAL_RCC_OscConfig+0xe0>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d10c      	bne.n	8001272 <HAL_RCC_OscConfig+0xa2>
 8001258:	4bab      	ldr	r3, [pc, #684]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4baa      	ldr	r3, [pc, #680]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 800125e:	49ab      	ldr	r1, [pc, #684]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 8001260:	400a      	ands	r2, r1
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	4ba8      	ldr	r3, [pc, #672]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4ba7      	ldr	r3, [pc, #668]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 800126a:	49a9      	ldr	r1, [pc, #676]	; (8001510 <HAL_RCC_OscConfig+0x340>)
 800126c:	400a      	ands	r2, r1
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	e01e      	b.n	80012b0 <HAL_RCC_OscConfig+0xe0>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b05      	cmp	r3, #5
 8001278:	d10e      	bne.n	8001298 <HAL_RCC_OscConfig+0xc8>
 800127a:	4ba3      	ldr	r3, [pc, #652]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4ba2      	ldr	r3, [pc, #648]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 8001280:	2180      	movs	r1, #128	; 0x80
 8001282:	02c9      	lsls	r1, r1, #11
 8001284:	430a      	orrs	r2, r1
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	4b9f      	ldr	r3, [pc, #636]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b9e      	ldr	r3, [pc, #632]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 800128e:	2180      	movs	r1, #128	; 0x80
 8001290:	0249      	lsls	r1, r1, #9
 8001292:	430a      	orrs	r2, r1
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	e00b      	b.n	80012b0 <HAL_RCC_OscConfig+0xe0>
 8001298:	4b9b      	ldr	r3, [pc, #620]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b9a      	ldr	r3, [pc, #616]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 800129e:	499b      	ldr	r1, [pc, #620]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 80012a0:	400a      	ands	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	4b98      	ldr	r3, [pc, #608]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b97      	ldr	r3, [pc, #604]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 80012aa:	4999      	ldr	r1, [pc, #612]	; (8001510 <HAL_RCC_OscConfig+0x340>)
 80012ac:	400a      	ands	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d014      	beq.n	80012e2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fba2 	bl	8000a00 <HAL_GetTick>
 80012bc:	0003      	movs	r3, r0
 80012be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c2:	f7ff fb9d 	bl	8000a00 <HAL_GetTick>
 80012c6:	0002      	movs	r2, r0
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b64      	cmp	r3, #100	; 0x64
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e2fd      	b.n	80018d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d4:	4b8c      	ldr	r3, [pc, #560]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	029b      	lsls	r3, r3, #10
 80012dc:	4013      	ands	r3, r2
 80012de:	d0f0      	beq.n	80012c2 <HAL_RCC_OscConfig+0xf2>
 80012e0:	e015      	b.n	800130e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e2:	f7ff fb8d 	bl	8000a00 <HAL_GetTick>
 80012e6:	0003      	movs	r3, r0
 80012e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fb88 	bl	8000a00 <HAL_GetTick>
 80012f0:	0002      	movs	r2, r0
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	; 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e2e8      	b.n	80018d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fe:	4b82      	ldr	r3, [pc, #520]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	029b      	lsls	r3, r3, #10
 8001306:	4013      	ands	r3, r2
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x11c>
 800130a:	e000      	b.n	800130e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2202      	movs	r2, #2
 8001314:	4013      	ands	r3, r2
 8001316:	d100      	bne.n	800131a <HAL_RCC_OscConfig+0x14a>
 8001318:	e06c      	b.n	80013f4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800131a:	4b7b      	ldr	r3, [pc, #492]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	220c      	movs	r2, #12
 8001320:	4013      	ands	r3, r2
 8001322:	d00e      	beq.n	8001342 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001324:	4b78      	ldr	r3, [pc, #480]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	220c      	movs	r2, #12
 800132a:	4013      	ands	r3, r2
 800132c:	2b08      	cmp	r3, #8
 800132e:	d11f      	bne.n	8001370 <HAL_RCC_OscConfig+0x1a0>
 8001330:	4b75      	ldr	r3, [pc, #468]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	23c0      	movs	r3, #192	; 0xc0
 8001336:	025b      	lsls	r3, r3, #9
 8001338:	401a      	ands	r2, r3
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	429a      	cmp	r2, r3
 8001340:	d116      	bne.n	8001370 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001342:	4b71      	ldr	r3, [pc, #452]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2202      	movs	r2, #2
 8001348:	4013      	ands	r3, r2
 800134a:	d005      	beq.n	8001358 <HAL_RCC_OscConfig+0x188>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d001      	beq.n	8001358 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e2bb      	b.n	80018d0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001358:	4b6b      	ldr	r3, [pc, #428]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	22f8      	movs	r2, #248	; 0xf8
 800135e:	4393      	bics	r3, r2
 8001360:	0019      	movs	r1, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	00da      	lsls	r2, r3, #3
 8001368:	4b67      	ldr	r3, [pc, #412]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 800136a:	430a      	orrs	r2, r1
 800136c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	e041      	b.n	80013f4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d024      	beq.n	80013c2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001378:	4b63      	ldr	r3, [pc, #396]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b62      	ldr	r3, [pc, #392]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 800137e:	2101      	movs	r1, #1
 8001380:	430a      	orrs	r2, r1
 8001382:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fb3c 	bl	8000a00 <HAL_GetTick>
 8001388:	0003      	movs	r3, r0
 800138a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800138e:	f7ff fb37 	bl	8000a00 <HAL_GetTick>
 8001392:	0002      	movs	r2, r0
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e297      	b.n	80018d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a0:	4b59      	ldr	r3, [pc, #356]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2202      	movs	r2, #2
 80013a6:	4013      	ands	r3, r2
 80013a8:	d0f1      	beq.n	800138e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013aa:	4b57      	ldr	r3, [pc, #348]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	22f8      	movs	r2, #248	; 0xf8
 80013b0:	4393      	bics	r3, r2
 80013b2:	0019      	movs	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	00da      	lsls	r2, r3, #3
 80013ba:	4b53      	ldr	r3, [pc, #332]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 80013bc:	430a      	orrs	r2, r1
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	e018      	b.n	80013f4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c2:	4b51      	ldr	r3, [pc, #324]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4b50      	ldr	r3, [pc, #320]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 80013c8:	2101      	movs	r1, #1
 80013ca:	438a      	bics	r2, r1
 80013cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ce:	f7ff fb17 	bl	8000a00 <HAL_GetTick>
 80013d2:	0003      	movs	r3, r0
 80013d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d8:	f7ff fb12 	bl	8000a00 <HAL_GetTick>
 80013dc:	0002      	movs	r2, r0
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e272      	b.n	80018d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ea:	4b47      	ldr	r3, [pc, #284]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2202      	movs	r2, #2
 80013f0:	4013      	ands	r3, r2
 80013f2:	d1f1      	bne.n	80013d8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2208      	movs	r2, #8
 80013fa:	4013      	ands	r3, r2
 80013fc:	d036      	beq.n	800146c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d019      	beq.n	800143a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001406:	4b40      	ldr	r3, [pc, #256]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 8001408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800140a:	4b3f      	ldr	r3, [pc, #252]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 800140c:	2101      	movs	r1, #1
 800140e:	430a      	orrs	r2, r1
 8001410:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001412:	f7ff faf5 	bl	8000a00 <HAL_GetTick>
 8001416:	0003      	movs	r3, r0
 8001418:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800141c:	f7ff faf0 	bl	8000a00 <HAL_GetTick>
 8001420:	0002      	movs	r2, r0
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e250      	b.n	80018d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142e:	4b36      	ldr	r3, [pc, #216]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	2202      	movs	r2, #2
 8001434:	4013      	ands	r3, r2
 8001436:	d0f1      	beq.n	800141c <HAL_RCC_OscConfig+0x24c>
 8001438:	e018      	b.n	800146c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800143a:	4b33      	ldr	r3, [pc, #204]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 800143c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800143e:	4b32      	ldr	r3, [pc, #200]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 8001440:	2101      	movs	r1, #1
 8001442:	438a      	bics	r2, r1
 8001444:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001446:	f7ff fadb 	bl	8000a00 <HAL_GetTick>
 800144a:	0003      	movs	r3, r0
 800144c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001450:	f7ff fad6 	bl	8000a00 <HAL_GetTick>
 8001454:	0002      	movs	r2, r0
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e236      	b.n	80018d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001462:	4b29      	ldr	r3, [pc, #164]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 8001464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001466:	2202      	movs	r2, #2
 8001468:	4013      	ands	r3, r2
 800146a:	d1f1      	bne.n	8001450 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2204      	movs	r2, #4
 8001472:	4013      	ands	r3, r2
 8001474:	d100      	bne.n	8001478 <HAL_RCC_OscConfig+0x2a8>
 8001476:	e0b5      	b.n	80015e4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001478:	201f      	movs	r0, #31
 800147a:	183b      	adds	r3, r7, r0
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001480:	4b21      	ldr	r3, [pc, #132]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 8001482:	69da      	ldr	r2, [r3, #28]
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	055b      	lsls	r3, r3, #21
 8001488:	4013      	ands	r3, r2
 800148a:	d110      	bne.n	80014ae <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800148c:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 800148e:	69da      	ldr	r2, [r3, #28]
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 8001492:	2180      	movs	r1, #128	; 0x80
 8001494:	0549      	lsls	r1, r1, #21
 8001496:	430a      	orrs	r2, r1
 8001498:	61da      	str	r2, [r3, #28]
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 800149c:	69da      	ldr	r2, [r3, #28]
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	055b      	lsls	r3, r3, #21
 80014a2:	4013      	ands	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014a8:	183b      	adds	r3, r7, r0
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_RCC_OscConfig+0x344>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4013      	ands	r3, r2
 80014b8:	d11a      	bne.n	80014f0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_RCC_OscConfig+0x344>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_RCC_OscConfig+0x344>)
 80014c0:	2180      	movs	r1, #128	; 0x80
 80014c2:	0049      	lsls	r1, r1, #1
 80014c4:	430a      	orrs	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c8:	f7ff fa9a 	bl	8000a00 <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d2:	f7ff fa95 	bl	8000a00 <HAL_GetTick>
 80014d6:	0002      	movs	r2, r0
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b64      	cmp	r3, #100	; 0x64
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e1f5      	b.n	80018d0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_RCC_OscConfig+0x344>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4013      	ands	r3, r2
 80014ee:	d0f0      	beq.n	80014d2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d10f      	bne.n	8001518 <HAL_RCC_OscConfig+0x348>
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 80014fa:	6a1a      	ldr	r2, [r3, #32]
 80014fc:	4b02      	ldr	r3, [pc, #8]	; (8001508 <HAL_RCC_OscConfig+0x338>)
 80014fe:	2101      	movs	r1, #1
 8001500:	430a      	orrs	r2, r1
 8001502:	621a      	str	r2, [r3, #32]
 8001504:	e036      	b.n	8001574 <HAL_RCC_OscConfig+0x3a4>
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	40021000 	.word	0x40021000
 800150c:	fffeffff 	.word	0xfffeffff
 8001510:	fffbffff 	.word	0xfffbffff
 8001514:	40007000 	.word	0x40007000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10c      	bne.n	800153a <HAL_RCC_OscConfig+0x36a>
 8001520:	4bca      	ldr	r3, [pc, #808]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001522:	6a1a      	ldr	r2, [r3, #32]
 8001524:	4bc9      	ldr	r3, [pc, #804]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001526:	2101      	movs	r1, #1
 8001528:	438a      	bics	r2, r1
 800152a:	621a      	str	r2, [r3, #32]
 800152c:	4bc7      	ldr	r3, [pc, #796]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 800152e:	6a1a      	ldr	r2, [r3, #32]
 8001530:	4bc6      	ldr	r3, [pc, #792]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001532:	2104      	movs	r1, #4
 8001534:	438a      	bics	r2, r1
 8001536:	621a      	str	r2, [r3, #32]
 8001538:	e01c      	b.n	8001574 <HAL_RCC_OscConfig+0x3a4>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b05      	cmp	r3, #5
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0x38c>
 8001542:	4bc2      	ldr	r3, [pc, #776]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001544:	6a1a      	ldr	r2, [r3, #32]
 8001546:	4bc1      	ldr	r3, [pc, #772]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001548:	2104      	movs	r1, #4
 800154a:	430a      	orrs	r2, r1
 800154c:	621a      	str	r2, [r3, #32]
 800154e:	4bbf      	ldr	r3, [pc, #764]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001550:	6a1a      	ldr	r2, [r3, #32]
 8001552:	4bbe      	ldr	r3, [pc, #760]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001554:	2101      	movs	r1, #1
 8001556:	430a      	orrs	r2, r1
 8001558:	621a      	str	r2, [r3, #32]
 800155a:	e00b      	b.n	8001574 <HAL_RCC_OscConfig+0x3a4>
 800155c:	4bbb      	ldr	r3, [pc, #748]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 800155e:	6a1a      	ldr	r2, [r3, #32]
 8001560:	4bba      	ldr	r3, [pc, #744]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001562:	2101      	movs	r1, #1
 8001564:	438a      	bics	r2, r1
 8001566:	621a      	str	r2, [r3, #32]
 8001568:	4bb8      	ldr	r3, [pc, #736]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 800156a:	6a1a      	ldr	r2, [r3, #32]
 800156c:	4bb7      	ldr	r3, [pc, #732]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 800156e:	2104      	movs	r1, #4
 8001570:	438a      	bics	r2, r1
 8001572:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d014      	beq.n	80015a6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157c:	f7ff fa40 	bl	8000a00 <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001584:	e009      	b.n	800159a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f7ff fa3b 	bl	8000a00 <HAL_GetTick>
 800158a:	0002      	movs	r2, r0
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	4aaf      	ldr	r2, [pc, #700]	; (8001850 <HAL_RCC_OscConfig+0x680>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e19a      	b.n	80018d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159a:	4bac      	ldr	r3, [pc, #688]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	2202      	movs	r2, #2
 80015a0:	4013      	ands	r3, r2
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x3b6>
 80015a4:	e013      	b.n	80015ce <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fa2b 	bl	8000a00 <HAL_GetTick>
 80015aa:	0003      	movs	r3, r0
 80015ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ae:	e009      	b.n	80015c4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b0:	f7ff fa26 	bl	8000a00 <HAL_GetTick>
 80015b4:	0002      	movs	r2, r0
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	4aa5      	ldr	r2, [pc, #660]	; (8001850 <HAL_RCC_OscConfig+0x680>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e185      	b.n	80018d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c4:	4ba1      	ldr	r3, [pc, #644]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	2202      	movs	r2, #2
 80015ca:	4013      	ands	r3, r2
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015ce:	231f      	movs	r3, #31
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d105      	bne.n	80015e4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d8:	4b9c      	ldr	r3, [pc, #624]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 80015da:	69da      	ldr	r2, [r3, #28]
 80015dc:	4b9b      	ldr	r3, [pc, #620]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 80015de:	499d      	ldr	r1, [pc, #628]	; (8001854 <HAL_RCC_OscConfig+0x684>)
 80015e0:	400a      	ands	r2, r1
 80015e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2210      	movs	r2, #16
 80015ea:	4013      	ands	r3, r2
 80015ec:	d063      	beq.n	80016b6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d12a      	bne.n	800164c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015f6:	4b95      	ldr	r3, [pc, #596]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 80015f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015fa:	4b94      	ldr	r3, [pc, #592]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 80015fc:	2104      	movs	r1, #4
 80015fe:	430a      	orrs	r2, r1
 8001600:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001602:	4b92      	ldr	r3, [pc, #584]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001606:	4b91      	ldr	r3, [pc, #580]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001608:	2101      	movs	r1, #1
 800160a:	430a      	orrs	r2, r1
 800160c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160e:	f7ff f9f7 	bl	8000a00 <HAL_GetTick>
 8001612:	0003      	movs	r3, r0
 8001614:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001618:	f7ff f9f2 	bl	8000a00 <HAL_GetTick>
 800161c:	0002      	movs	r2, r0
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e152      	b.n	80018d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800162a:	4b88      	ldr	r3, [pc, #544]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 800162c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162e:	2202      	movs	r2, #2
 8001630:	4013      	ands	r3, r2
 8001632:	d0f1      	beq.n	8001618 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001634:	4b85      	ldr	r3, [pc, #532]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001638:	22f8      	movs	r2, #248	; 0xf8
 800163a:	4393      	bics	r3, r2
 800163c:	0019      	movs	r1, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	00da      	lsls	r2, r3, #3
 8001644:	4b81      	ldr	r3, [pc, #516]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001646:	430a      	orrs	r2, r1
 8001648:	635a      	str	r2, [r3, #52]	; 0x34
 800164a:	e034      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	3305      	adds	r3, #5
 8001652:	d111      	bne.n	8001678 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001654:	4b7d      	ldr	r3, [pc, #500]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001658:	4b7c      	ldr	r3, [pc, #496]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 800165a:	2104      	movs	r1, #4
 800165c:	438a      	bics	r2, r1
 800165e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001660:	4b7a      	ldr	r3, [pc, #488]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001664:	22f8      	movs	r2, #248	; 0xf8
 8001666:	4393      	bics	r3, r2
 8001668:	0019      	movs	r1, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	00da      	lsls	r2, r3, #3
 8001670:	4b76      	ldr	r3, [pc, #472]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001672:	430a      	orrs	r2, r1
 8001674:	635a      	str	r2, [r3, #52]	; 0x34
 8001676:	e01e      	b.n	80016b6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001678:	4b74      	ldr	r3, [pc, #464]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 800167a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800167c:	4b73      	ldr	r3, [pc, #460]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 800167e:	2104      	movs	r1, #4
 8001680:	430a      	orrs	r2, r1
 8001682:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001684:	4b71      	ldr	r3, [pc, #452]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001688:	4b70      	ldr	r3, [pc, #448]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 800168a:	2101      	movs	r1, #1
 800168c:	438a      	bics	r2, r1
 800168e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001690:	f7ff f9b6 	bl	8000a00 <HAL_GetTick>
 8001694:	0003      	movs	r3, r0
 8001696:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800169a:	f7ff f9b1 	bl	8000a00 <HAL_GetTick>
 800169e:	0002      	movs	r2, r0
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e111      	b.n	80018d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016ac:	4b67      	ldr	r3, [pc, #412]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 80016ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b0:	2202      	movs	r2, #2
 80016b2:	4013      	ands	r3, r2
 80016b4:	d1f1      	bne.n	800169a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2220      	movs	r2, #32
 80016bc:	4013      	ands	r3, r2
 80016be:	d05c      	beq.n	800177a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80016c0:	4b62      	ldr	r3, [pc, #392]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	220c      	movs	r2, #12
 80016c6:	4013      	ands	r3, r2
 80016c8:	2b0c      	cmp	r3, #12
 80016ca:	d00e      	beq.n	80016ea <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80016cc:	4b5f      	ldr	r3, [pc, #380]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	220c      	movs	r2, #12
 80016d2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d114      	bne.n	8001702 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80016d8:	4b5c      	ldr	r3, [pc, #368]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	23c0      	movs	r3, #192	; 0xc0
 80016de:	025b      	lsls	r3, r3, #9
 80016e0:	401a      	ands	r2, r3
 80016e2:	23c0      	movs	r3, #192	; 0xc0
 80016e4:	025b      	lsls	r3, r3, #9
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d10b      	bne.n	8001702 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80016ea:	4b58      	ldr	r3, [pc, #352]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 80016ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	025b      	lsls	r3, r3, #9
 80016f2:	4013      	ands	r3, r2
 80016f4:	d040      	beq.n	8001778 <HAL_RCC_OscConfig+0x5a8>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d03c      	beq.n	8001778 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e0e6      	b.n	80018d0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d01b      	beq.n	8001742 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800170a:	4b50      	ldr	r3, [pc, #320]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 800170c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800170e:	4b4f      	ldr	r3, [pc, #316]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	0249      	lsls	r1, r1, #9
 8001714:	430a      	orrs	r2, r1
 8001716:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff f972 	bl	8000a00 <HAL_GetTick>
 800171c:	0003      	movs	r3, r0
 800171e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001722:	f7ff f96d 	bl	8000a00 <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e0cd      	b.n	80018d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001734:	4b45      	ldr	r3, [pc, #276]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	025b      	lsls	r3, r3, #9
 800173c:	4013      	ands	r3, r2
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x552>
 8001740:	e01b      	b.n	800177a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001742:	4b42      	ldr	r3, [pc, #264]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001746:	4b41      	ldr	r3, [pc, #260]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001748:	4943      	ldr	r1, [pc, #268]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 800174a:	400a      	ands	r2, r1
 800174c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174e:	f7ff f957 	bl	8000a00 <HAL_GetTick>
 8001752:	0003      	movs	r3, r0
 8001754:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001758:	f7ff f952 	bl	8000a00 <HAL_GetTick>
 800175c:	0002      	movs	r2, r0
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e0b2      	b.n	80018d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800176a:	4b38      	ldr	r3, [pc, #224]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 800176c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	025b      	lsls	r3, r3, #9
 8001772:	4013      	ands	r3, r2
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x588>
 8001776:	e000      	b.n	800177a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001778:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	2b00      	cmp	r3, #0
 8001780:	d100      	bne.n	8001784 <HAL_RCC_OscConfig+0x5b4>
 8001782:	e0a4      	b.n	80018ce <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001784:	4b31      	ldr	r3, [pc, #196]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	220c      	movs	r2, #12
 800178a:	4013      	ands	r3, r2
 800178c:	2b08      	cmp	r3, #8
 800178e:	d100      	bne.n	8001792 <HAL_RCC_OscConfig+0x5c2>
 8001790:	e078      	b.n	8001884 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	2b02      	cmp	r3, #2
 8001798:	d14c      	bne.n	8001834 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179a:	4b2c      	ldr	r3, [pc, #176]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4b2b      	ldr	r3, [pc, #172]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 80017a0:	492e      	ldr	r1, [pc, #184]	; (800185c <HAL_RCC_OscConfig+0x68c>)
 80017a2:	400a      	ands	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff f92b 	bl	8000a00 <HAL_GetTick>
 80017aa:	0003      	movs	r3, r0
 80017ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b0:	f7ff f926 	bl	8000a00 <HAL_GetTick>
 80017b4:	0002      	movs	r2, r0
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e086      	b.n	80018d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c2:	4b22      	ldr	r3, [pc, #136]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	049b      	lsls	r3, r3, #18
 80017ca:	4013      	ands	r3, r2
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ce:	4b1f      	ldr	r3, [pc, #124]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	220f      	movs	r2, #15
 80017d4:	4393      	bics	r3, r2
 80017d6:	0019      	movs	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 80017de:	430a      	orrs	r2, r1
 80017e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	4a1e      	ldr	r2, [pc, #120]	; (8001860 <HAL_RCC_OscConfig+0x690>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	0019      	movs	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	431a      	orrs	r2, r3
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 80017f8:	430a      	orrs	r2, r1
 80017fa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001802:	2180      	movs	r1, #128	; 0x80
 8001804:	0449      	lsls	r1, r1, #17
 8001806:	430a      	orrs	r2, r1
 8001808:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180a:	f7ff f8f9 	bl	8000a00 <HAL_GetTick>
 800180e:	0003      	movs	r3, r0
 8001810:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001814:	f7ff f8f4 	bl	8000a00 <HAL_GetTick>
 8001818:	0002      	movs	r2, r0
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e054      	b.n	80018d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	049b      	lsls	r3, r3, #18
 800182e:	4013      	ands	r3, r2
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x644>
 8001832:	e04c      	b.n	80018ce <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <HAL_RCC_OscConfig+0x67c>)
 800183a:	4908      	ldr	r1, [pc, #32]	; (800185c <HAL_RCC_OscConfig+0x68c>)
 800183c:	400a      	ands	r2, r1
 800183e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff f8de 	bl	8000a00 <HAL_GetTick>
 8001844:	0003      	movs	r3, r0
 8001846:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001848:	e015      	b.n	8001876 <HAL_RCC_OscConfig+0x6a6>
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	40021000 	.word	0x40021000
 8001850:	00001388 	.word	0x00001388
 8001854:	efffffff 	.word	0xefffffff
 8001858:	fffeffff 	.word	0xfffeffff
 800185c:	feffffff 	.word	0xfeffffff
 8001860:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff f8cc 	bl	8000a00 <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e02c      	b.n	80018d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001876:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_RCC_OscConfig+0x708>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	049b      	lsls	r3, r3, #18
 800187e:	4013      	ands	r3, r2
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x694>
 8001882:	e024      	b.n	80018ce <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e01f      	b.n	80018d0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_RCC_OscConfig+0x708>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <HAL_RCC_OscConfig+0x708>)
 8001898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	23c0      	movs	r3, #192	; 0xc0
 80018a0:	025b      	lsls	r3, r3, #9
 80018a2:	401a      	ands	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d10e      	bne.n	80018ca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	220f      	movs	r2, #15
 80018b0:	401a      	ands	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d107      	bne.n	80018ca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	23f0      	movs	r3, #240	; 0xf0
 80018be:	039b      	lsls	r3, r3, #14
 80018c0:	401a      	ands	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d001      	beq.n	80018ce <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	0018      	movs	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	b008      	add	sp, #32
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40021000 	.word	0x40021000

080018dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0bf      	b.n	8001a70 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018f0:	4b61      	ldr	r3, [pc, #388]	; (8001a78 <HAL_RCC_ClockConfig+0x19c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2201      	movs	r2, #1
 80018f6:	4013      	ands	r3, r2
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d911      	bls.n	8001922 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fe:	4b5e      	ldr	r3, [pc, #376]	; (8001a78 <HAL_RCC_ClockConfig+0x19c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2201      	movs	r2, #1
 8001904:	4393      	bics	r3, r2
 8001906:	0019      	movs	r1, r3
 8001908:	4b5b      	ldr	r3, [pc, #364]	; (8001a78 <HAL_RCC_ClockConfig+0x19c>)
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001910:	4b59      	ldr	r3, [pc, #356]	; (8001a78 <HAL_RCC_ClockConfig+0x19c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2201      	movs	r2, #1
 8001916:	4013      	ands	r3, r2
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d001      	beq.n	8001922 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e0a6      	b.n	8001a70 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2202      	movs	r2, #2
 8001928:	4013      	ands	r3, r2
 800192a:	d015      	beq.n	8001958 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2204      	movs	r2, #4
 8001932:	4013      	ands	r3, r2
 8001934:	d006      	beq.n	8001944 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001936:	4b51      	ldr	r3, [pc, #324]	; (8001a7c <HAL_RCC_ClockConfig+0x1a0>)
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <HAL_RCC_ClockConfig+0x1a0>)
 800193c:	21e0      	movs	r1, #224	; 0xe0
 800193e:	00c9      	lsls	r1, r1, #3
 8001940:	430a      	orrs	r2, r1
 8001942:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001944:	4b4d      	ldr	r3, [pc, #308]	; (8001a7c <HAL_RCC_ClockConfig+0x1a0>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	22f0      	movs	r2, #240	; 0xf0
 800194a:	4393      	bics	r3, r2
 800194c:	0019      	movs	r1, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	4b4a      	ldr	r3, [pc, #296]	; (8001a7c <HAL_RCC_ClockConfig+0x1a0>)
 8001954:	430a      	orrs	r2, r1
 8001956:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2201      	movs	r2, #1
 800195e:	4013      	ands	r3, r2
 8001960:	d04c      	beq.n	80019fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d107      	bne.n	800197a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	4b44      	ldr	r3, [pc, #272]	; (8001a7c <HAL_RCC_ClockConfig+0x1a0>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	029b      	lsls	r3, r3, #10
 8001972:	4013      	ands	r3, r2
 8001974:	d120      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e07a      	b.n	8001a70 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001982:	4b3e      	ldr	r3, [pc, #248]	; (8001a7c <HAL_RCC_ClockConfig+0x1a0>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	049b      	lsls	r3, r3, #18
 800198a:	4013      	ands	r3, r2
 800198c:	d114      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e06e      	b.n	8001a70 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b03      	cmp	r3, #3
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800199a:	4b38      	ldr	r3, [pc, #224]	; (8001a7c <HAL_RCC_ClockConfig+0x1a0>)
 800199c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	025b      	lsls	r3, r3, #9
 80019a2:	4013      	ands	r3, r2
 80019a4:	d108      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e062      	b.n	8001a70 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019aa:	4b34      	ldr	r3, [pc, #208]	; (8001a7c <HAL_RCC_ClockConfig+0x1a0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2202      	movs	r2, #2
 80019b0:	4013      	ands	r3, r2
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e05b      	b.n	8001a70 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019b8:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <HAL_RCC_ClockConfig+0x1a0>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2203      	movs	r2, #3
 80019be:	4393      	bics	r3, r2
 80019c0:	0019      	movs	r1, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <HAL_RCC_ClockConfig+0x1a0>)
 80019c8:	430a      	orrs	r2, r1
 80019ca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019cc:	f7ff f818 	bl	8000a00 <HAL_GetTick>
 80019d0:	0003      	movs	r3, r0
 80019d2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d4:	e009      	b.n	80019ea <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d6:	f7ff f813 	bl	8000a00 <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	4a27      	ldr	r2, [pc, #156]	; (8001a80 <HAL_RCC_ClockConfig+0x1a4>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e042      	b.n	8001a70 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ea:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <HAL_RCC_ClockConfig+0x1a0>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	220c      	movs	r2, #12
 80019f0:	401a      	ands	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d1ec      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019fc:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <HAL_RCC_ClockConfig+0x19c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2201      	movs	r2, #1
 8001a02:	4013      	ands	r3, r2
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d211      	bcs.n	8001a2e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_RCC_ClockConfig+0x19c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	4393      	bics	r3, r2
 8001a12:	0019      	movs	r1, r3
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_RCC_ClockConfig+0x19c>)
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_RCC_ClockConfig+0x19c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2201      	movs	r2, #1
 8001a22:	4013      	ands	r3, r2
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d001      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e020      	b.n	8001a70 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2204      	movs	r2, #4
 8001a34:	4013      	ands	r3, r2
 8001a36:	d009      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a38:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <HAL_RCC_ClockConfig+0x1a0>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4a11      	ldr	r2, [pc, #68]	; (8001a84 <HAL_RCC_ClockConfig+0x1a8>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	0019      	movs	r1, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <HAL_RCC_ClockConfig+0x1a0>)
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a4c:	f000 f820 	bl	8001a90 <HAL_RCC_GetSysClockFreq>
 8001a50:	0001      	movs	r1, r0
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_RCC_ClockConfig+0x1a0>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	220f      	movs	r2, #15
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <HAL_RCC_ClockConfig+0x1ac>)
 8001a5e:	5cd3      	ldrb	r3, [r2, r3]
 8001a60:	000a      	movs	r2, r1
 8001a62:	40da      	lsrs	r2, r3
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_RCC_ClockConfig+0x1b0>)
 8001a66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7fe ff83 	bl	8000974 <HAL_InitTick>
  
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	0018      	movs	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b004      	add	sp, #16
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40022000 	.word	0x40022000
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	00001388 	.word	0x00001388
 8001a84:	fffff8ff 	.word	0xfffff8ff
 8001a88:	08002ba0 	.word	0x08002ba0
 8001a8c:	20000000 	.word	0x20000000

08001a90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b08f      	sub	sp, #60	; 0x3c
 8001a94:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001a96:	2314      	movs	r3, #20
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	4a38      	ldr	r2, [pc, #224]	; (8001b7c <HAL_RCC_GetSysClockFreq+0xec>)
 8001a9c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a9e:	c313      	stmia	r3!, {r0, r1, r4}
 8001aa0:	6812      	ldr	r2, [r2, #0]
 8001aa2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	4a36      	ldr	r2, [pc, #216]	; (8001b80 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001aa8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001aaa:	c313      	stmia	r3!, {r0, r1, r4}
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ab8:	2300      	movs	r3, #0
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001ac4:	4b2f      	ldr	r3, [pc, #188]	; (8001b84 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001acc:	220c      	movs	r2, #12
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2b0c      	cmp	r3, #12
 8001ad2:	d047      	beq.n	8001b64 <HAL_RCC_GetSysClockFreq+0xd4>
 8001ad4:	d849      	bhi.n	8001b6a <HAL_RCC_GetSysClockFreq+0xda>
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d002      	beq.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x50>
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d003      	beq.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x56>
 8001ade:	e044      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ae0:	4b29      	ldr	r3, [pc, #164]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ae2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ae4:	e044      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae8:	0c9b      	lsrs	r3, r3, #18
 8001aea:	220f      	movs	r2, #15
 8001aec:	4013      	ands	r3, r2
 8001aee:	2214      	movs	r2, #20
 8001af0:	18ba      	adds	r2, r7, r2
 8001af2:	5cd3      	ldrb	r3, [r2, r3]
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001af6:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	220f      	movs	r2, #15
 8001afc:	4013      	ands	r3, r2
 8001afe:	1d3a      	adds	r2, r7, #4
 8001b00:	5cd3      	ldrb	r3, [r2, r3]
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b06:	23c0      	movs	r3, #192	; 0xc0
 8001b08:	025b      	lsls	r3, r3, #9
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	025b      	lsls	r3, r3, #9
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d109      	bne.n	8001b28 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b16:	481c      	ldr	r0, [pc, #112]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b18:	f7fe faf4 	bl	8000104 <__udivsi3>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	001a      	movs	r2, r3
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	4353      	muls	r3, r2
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
 8001b26:	e01a      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b2a:	23c0      	movs	r3, #192	; 0xc0
 8001b2c:	025b      	lsls	r3, r3, #9
 8001b2e:	401a      	ands	r2, r3
 8001b30:	23c0      	movs	r3, #192	; 0xc0
 8001b32:	025b      	lsls	r3, r3, #9
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d109      	bne.n	8001b4c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b3a:	4814      	ldr	r0, [pc, #80]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b3c:	f7fe fae2 	bl	8000104 <__udivsi3>
 8001b40:	0003      	movs	r3, r0
 8001b42:	001a      	movs	r2, r3
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	4353      	muls	r3, r2
 8001b48:	637b      	str	r3, [r7, #52]	; 0x34
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b4e:	480e      	ldr	r0, [pc, #56]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b50:	f7fe fad8 	bl	8000104 <__udivsi3>
 8001b54:	0003      	movs	r3, r0
 8001b56:	001a      	movs	r2, r3
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	4353      	muls	r3, r2
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b60:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b62:	e005      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b68:	e002      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b6c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b6e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b72:	0018      	movs	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b00f      	add	sp, #60	; 0x3c
 8001b78:	bd90      	pop	{r4, r7, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	08002b80 	.word	0x08002b80
 8001b80:	08002b90 	.word	0x08002b90
 8001b84:	40021000 	.word	0x40021000
 8001b88:	007a1200 	.word	0x007a1200
 8001b8c:	02dc6c00 	.word	0x02dc6c00

08001b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b94:	4b02      	ldr	r3, [pc, #8]	; (8001ba0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	0018      	movs	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	20000000 	.word	0x20000000

08001ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ba8:	f7ff fff2 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bac:	0001      	movs	r1, r0
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	0a1b      	lsrs	r3, r3, #8
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bba:	5cd3      	ldrb	r3, [r2, r3]
 8001bbc:	40d9      	lsrs	r1, r3
 8001bbe:	000b      	movs	r3, r1
}    
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	08002bb0 	.word	0x08002bb0

08001bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	025b      	lsls	r3, r3, #9
 8001be8:	4013      	ands	r3, r2
 8001bea:	d100      	bne.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001bec:	e08e      	b.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001bee:	2017      	movs	r0, #23
 8001bf0:	183b      	adds	r3, r7, r0
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf6:	4b6e      	ldr	r3, [pc, #440]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bf8:	69da      	ldr	r2, [r3, #28]
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	055b      	lsls	r3, r3, #21
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d110      	bne.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	4b6b      	ldr	r3, [pc, #428]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c04:	69da      	ldr	r2, [r3, #28]
 8001c06:	4b6a      	ldr	r3, [pc, #424]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c08:	2180      	movs	r1, #128	; 0x80
 8001c0a:	0549      	lsls	r1, r1, #21
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	61da      	str	r2, [r3, #28]
 8001c10:	4b67      	ldr	r3, [pc, #412]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c12:	69da      	ldr	r2, [r3, #28]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	055b      	lsls	r3, r3, #21
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c1e:	183b      	adds	r3, r7, r0
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c24:	4b63      	ldr	r3, [pc, #396]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d11a      	bne.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c30:	4b60      	ldr	r3, [pc, #384]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b5f      	ldr	r3, [pc, #380]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c36:	2180      	movs	r1, #128	; 0x80
 8001c38:	0049      	lsls	r1, r1, #1
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3e:	f7fe fedf 	bl	8000a00 <HAL_GetTick>
 8001c42:	0003      	movs	r3, r0
 8001c44:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c46:	e008      	b.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c48:	f7fe feda 	bl	8000a00 <HAL_GetTick>
 8001c4c:	0002      	movs	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	; 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e0a6      	b.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5a:	4b56      	ldr	r3, [pc, #344]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4013      	ands	r3, r2
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c66:	4b52      	ldr	r3, [pc, #328]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c68:	6a1a      	ldr	r2, [r3, #32]
 8001c6a:	23c0      	movs	r3, #192	; 0xc0
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4013      	ands	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d034      	beq.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	23c0      	movs	r3, #192	; 0xc0
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4013      	ands	r3, r2
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d02c      	beq.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c88:	4b49      	ldr	r3, [pc, #292]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4a4a      	ldr	r2, [pc, #296]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c92:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c94:	6a1a      	ldr	r2, [r3, #32]
 8001c96:	4b46      	ldr	r3, [pc, #280]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c98:	2180      	movs	r1, #128	; 0x80
 8001c9a:	0249      	lsls	r1, r1, #9
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ca0:	4b43      	ldr	r3, [pc, #268]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ca2:	6a1a      	ldr	r2, [r3, #32]
 8001ca4:	4b42      	ldr	r3, [pc, #264]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ca6:	4945      	ldr	r1, [pc, #276]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001ca8:	400a      	ands	r2, r1
 8001caa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001cac:	4b40      	ldr	r3, [pc, #256]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d013      	beq.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7fe fea1 	bl	8000a00 <HAL_GetTick>
 8001cbe:	0003      	movs	r3, r0
 8001cc0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc2:	e009      	b.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc4:	f7fe fe9c 	bl	8000a00 <HAL_GetTick>
 8001cc8:	0002      	movs	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	4a3c      	ldr	r2, [pc, #240]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e067      	b.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd8:	4b35      	ldr	r3, [pc, #212]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	2202      	movs	r2, #2
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ce2:	4b33      	ldr	r3, [pc, #204]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	4a34      	ldr	r2, [pc, #208]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	0019      	movs	r1, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cf6:	2317      	movs	r3, #23
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d105      	bne.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d00:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d02:	69da      	ldr	r2, [r3, #28]
 8001d04:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d06:	492f      	ldr	r1, [pc, #188]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001d08:	400a      	ands	r2, r1
 8001d0a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2201      	movs	r2, #1
 8001d12:	4013      	ands	r3, r2
 8001d14:	d009      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d16:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	4393      	bics	r3, r2
 8001d1e:	0019      	movs	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d26:	430a      	orrs	r2, r1
 8001d28:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	4013      	ands	r3, r2
 8001d32:	d009      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d34:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	4a23      	ldr	r2, [pc, #140]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	0019      	movs	r1, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d44:	430a      	orrs	r2, r1
 8001d46:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	02db      	lsls	r3, r3, #11
 8001d50:	4013      	ands	r3, r2
 8001d52:	d009      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d54:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691a      	ldr	r2, [r3, #16]
 8001d62:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d64:	430a      	orrs	r2, r1
 8001d66:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d009      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d72:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	2210      	movs	r2, #16
 8001d78:	4393      	bics	r3, r2
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	695a      	ldr	r2, [r3, #20]
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d82:	430a      	orrs	r2, r1
 8001d84:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d009      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	2240      	movs	r2, #64	; 0x40
 8001d98:	4393      	bics	r3, r2
 8001d9a:	0019      	movs	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699a      	ldr	r2, [r3, #24]
 8001da0:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001da2:	430a      	orrs	r2, r1
 8001da4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	0018      	movs	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b006      	add	sp, #24
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40007000 	.word	0x40007000
 8001db8:	fffffcff 	.word	0xfffffcff
 8001dbc:	fffeffff 	.word	0xfffeffff
 8001dc0:	00001388 	.word	0x00001388
 8001dc4:	efffffff 	.word	0xefffffff
 8001dc8:	fffcffff 	.word	0xfffcffff
 8001dcc:	fff3ffff 	.word	0xfff3ffff

08001dd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e0a8      	b.n	8001f34 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	2382      	movs	r3, #130	; 0x82
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d009      	beq.n	8001e0a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	61da      	str	r2, [r3, #28]
 8001dfc:	e005      	b.n	8001e0a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	225d      	movs	r2, #93	; 0x5d
 8001e14:	5c9b      	ldrb	r3, [r3, r2]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d107      	bne.n	8001e2c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	225c      	movs	r2, #92	; 0x5c
 8001e20:	2100      	movs	r1, #0
 8001e22:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	0018      	movs	r0, r3
 8001e28:	f7fe fbca 	bl	80005c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	225d      	movs	r2, #93	; 0x5d
 8001e30:	2102      	movs	r1, #2
 8001e32:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2140      	movs	r1, #64	; 0x40
 8001e40:	438a      	bics	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	23e0      	movs	r3, #224	; 0xe0
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d902      	bls.n	8001e56 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e002      	b.n	8001e5c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	015b      	lsls	r3, r3, #5
 8001e5a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	23f0      	movs	r3, #240	; 0xf0
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d008      	beq.n	8001e7a <HAL_SPI_Init+0xaa>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	23e0      	movs	r3, #224	; 0xe0
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d002      	beq.n	8001e7a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	2382      	movs	r3, #130	; 0x82
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	401a      	ands	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6899      	ldr	r1, [r3, #8]
 8001e88:	2384      	movs	r3, #132	; 0x84
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	400b      	ands	r3, r1
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	2102      	movs	r1, #2
 8001e96:	400b      	ands	r3, r1
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	400b      	ands	r3, r1
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6999      	ldr	r1, [r3, #24]
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	400b      	ands	r3, r1
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	2138      	movs	r1, #56	; 0x38
 8001eb6:	400b      	ands	r3, r1
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	2180      	movs	r1, #128	; 0x80
 8001ec0:	400b      	ands	r3, r1
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	0011      	movs	r1, r2
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	019b      	lsls	r3, r3, #6
 8001ece:	401a      	ands	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	0c1b      	lsrs	r3, r3, #16
 8001ede:	2204      	movs	r2, #4
 8001ee0:	401a      	ands	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	2110      	movs	r1, #16
 8001ee8:	400b      	ands	r3, r1
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef0:	2108      	movs	r1, #8
 8001ef2:	400b      	ands	r3, r1
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68d9      	ldr	r1, [r3, #12]
 8001efa:	23f0      	movs	r3, #240	; 0xf0
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	400b      	ands	r3, r1
 8001f00:	431a      	orrs	r2, r3
 8001f02:	0011      	movs	r1, r2
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	015b      	lsls	r3, r3, #5
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	69da      	ldr	r2, [r3, #28]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4907      	ldr	r1, [pc, #28]	; (8001f3c <HAL_SPI_Init+0x16c>)
 8001f20:	400a      	ands	r2, r1
 8001f22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	225d      	movs	r2, #93	; 0x5d
 8001f2e:	2101      	movs	r1, #1
 8001f30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b004      	add	sp, #16
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	fffff7ff 	.word	0xfffff7ff

08001f40 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	099b      	lsrs	r3, r3, #6
 8001f5c:	001a      	movs	r2, r3
 8001f5e:	2301      	movs	r3, #1
 8001f60:	4013      	ands	r3, r2
 8001f62:	d10f      	bne.n	8001f84 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2201      	movs	r2, #1
 8001f68:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001f6a:	d00b      	beq.n	8001f84 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	099b      	lsrs	r3, r3, #6
 8001f70:	001a      	movs	r2, r3
 8001f72:	2301      	movs	r3, #1
 8001f74:	4013      	ands	r3, r2
 8001f76:	d005      	beq.n	8001f84 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	0010      	movs	r0, r2
 8001f80:	4798      	blx	r3
    return;
 8001f82:	e0d5      	b.n	8002130 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	085b      	lsrs	r3, r3, #1
 8001f88:	001a      	movs	r2, r3
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d00b      	beq.n	8001fa8 <HAL_SPI_IRQHandler+0x68>
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	09db      	lsrs	r3, r3, #7
 8001f94:	001a      	movs	r2, r3
 8001f96:	2301      	movs	r3, #1
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d005      	beq.n	8001fa8 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	0010      	movs	r0, r2
 8001fa4:	4798      	blx	r3
    return;
 8001fa6:	e0c3      	b.n	8002130 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	001a      	movs	r2, r3
 8001fae:	2301      	movs	r3, #1
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d10c      	bne.n	8001fce <HAL_SPI_IRQHandler+0x8e>
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	099b      	lsrs	r3, r3, #6
 8001fb8:	001a      	movs	r2, r3
 8001fba:	2301      	movs	r3, #1
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d106      	bne.n	8001fce <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	001a      	movs	r2, r3
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d100      	bne.n	8001fce <HAL_SPI_IRQHandler+0x8e>
 8001fcc:	e0b0      	b.n	8002130 <HAL_SPI_IRQHandler+0x1f0>
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	095b      	lsrs	r3, r3, #5
 8001fd2:	001a      	movs	r2, r3
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d100      	bne.n	8001fdc <HAL_SPI_IRQHandler+0x9c>
 8001fda:	e0a9      	b.n	8002130 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	099b      	lsrs	r3, r3, #6
 8001fe0:	001a      	movs	r2, r3
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d023      	beq.n	8002030 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	225d      	movs	r2, #93	; 0x5d
 8001fec:	5c9b      	ldrb	r3, [r3, r2]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d011      	beq.n	8002018 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	e00b      	b.n	8002030 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
        return;
 800202e:	e07f      	b.n	8002130 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	001a      	movs	r2, r3
 8002036:	2301      	movs	r3, #1
 8002038:	4013      	ands	r3, r2
 800203a:	d014      	beq.n	8002066 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002040:	2201      	movs	r2, #1
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2140      	movs	r1, #64	; 0x40
 8002060:	438a      	bics	r2, r1
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	001a      	movs	r2, r3
 800206c:	2301      	movs	r3, #1
 800206e:	4013      	ands	r3, r2
 8002070:	d00c      	beq.n	800208c <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002076:	2208      	movs	r2, #8
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002090:	2b00      	cmp	r3, #0
 8002092:	d04c      	beq.n	800212e <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	21e0      	movs	r1, #224	; 0xe0
 80020a0:	438a      	bics	r2, r1
 80020a2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	225d      	movs	r2, #93	; 0x5d
 80020a8:	2101      	movs	r1, #1
 80020aa:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	2202      	movs	r2, #2
 80020b0:	4013      	ands	r3, r2
 80020b2:	d103      	bne.n	80020bc <HAL_SPI_IRQHandler+0x17c>
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	2201      	movs	r2, #1
 80020b8:	4013      	ands	r3, r2
 80020ba:	d032      	beq.n	8002122 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2103      	movs	r1, #3
 80020c8:	438a      	bics	r2, r1
 80020ca:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d010      	beq.n	80020f6 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d8:	4a17      	ldr	r2, [pc, #92]	; (8002138 <HAL_SPI_IRQHandler+0x1f8>)
 80020da:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e0:	0018      	movs	r0, r3
 80020e2:	f7fe fdbd 	bl	8000c60 <HAL_DMA_Abort_IT>
 80020e6:	1e03      	subs	r3, r0, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ee:	2240      	movs	r2, #64	; 0x40
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d016      	beq.n	800212c <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002102:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <HAL_SPI_IRQHandler+0x1f8>)
 8002104:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210a:	0018      	movs	r0, r3
 800210c:	f7fe fda8 	bl	8000c60 <HAL_DMA_Abort_IT>
 8002110:	1e03      	subs	r3, r0, #0
 8002112:	d00b      	beq.n	800212c <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002118:	2240      	movs	r2, #64	; 0x40
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002120:	e004      	b.n	800212c <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	0018      	movs	r0, r3
 8002126:	f000 f809 	bl	800213c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800212a:	e000      	b.n	800212e <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800212c:	46c0      	nop			; (mov r8, r8)
    return;
 800212e:	46c0      	nop			; (mov r8, r8)
  }
}
 8002130:	46bd      	mov	sp, r7
 8002132:	b008      	add	sp, #32
 8002134:	bd80      	pop	{r7, pc}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	0800214d 	.word	0x0800214d

0800213c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002144:	46c0      	nop			; (mov r8, r8)
 8002146:	46bd      	mov	sp, r7
 8002148:	b002      	add	sp, #8
 800214a:	bd80      	pop	{r7, pc}

0800214c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2246      	movs	r2, #70	; 0x46
 800215e:	2100      	movs	r1, #0
 8002160:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	0018      	movs	r0, r3
 800216c:	f7ff ffe6 	bl	800213c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002170:	46c0      	nop			; (mov r8, r8)
 8002172:	46bd      	mov	sp, r7
 8002174:	b004      	add	sp, #16
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e042      	b.n	8002210 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	223d      	movs	r2, #61	; 0x3d
 800218e:	5c9b      	ldrb	r3, [r3, r2]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d107      	bne.n	80021a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	223c      	movs	r2, #60	; 0x3c
 800219a:	2100      	movs	r1, #0
 800219c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	0018      	movs	r0, r3
 80021a2:	f7fe fb01 	bl	80007a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	223d      	movs	r2, #61	; 0x3d
 80021aa:	2102      	movs	r1, #2
 80021ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3304      	adds	r3, #4
 80021b6:	0019      	movs	r1, r3
 80021b8:	0010      	movs	r0, r2
 80021ba:	f000 f82d 	bl	8002218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2246      	movs	r2, #70	; 0x46
 80021c2:	2101      	movs	r1, #1
 80021c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	223e      	movs	r2, #62	; 0x3e
 80021ca:	2101      	movs	r1, #1
 80021cc:	5499      	strb	r1, [r3, r2]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	223f      	movs	r2, #63	; 0x3f
 80021d2:	2101      	movs	r1, #1
 80021d4:	5499      	strb	r1, [r3, r2]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2240      	movs	r2, #64	; 0x40
 80021da:	2101      	movs	r1, #1
 80021dc:	5499      	strb	r1, [r3, r2]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2241      	movs	r2, #65	; 0x41
 80021e2:	2101      	movs	r1, #1
 80021e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2242      	movs	r2, #66	; 0x42
 80021ea:	2101      	movs	r1, #1
 80021ec:	5499      	strb	r1, [r3, r2]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2243      	movs	r2, #67	; 0x43
 80021f2:	2101      	movs	r1, #1
 80021f4:	5499      	strb	r1, [r3, r2]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2244      	movs	r2, #68	; 0x44
 80021fa:	2101      	movs	r1, #1
 80021fc:	5499      	strb	r1, [r3, r2]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2245      	movs	r2, #69	; 0x45
 8002202:	2101      	movs	r1, #1
 8002204:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	223d      	movs	r2, #61	; 0x3d
 800220a:	2101      	movs	r1, #1
 800220c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	0018      	movs	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	b002      	add	sp, #8
 8002216:	bd80      	pop	{r7, pc}

08002218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a34      	ldr	r2, [pc, #208]	; (80022fc <TIM_Base_SetConfig+0xe4>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d008      	beq.n	8002242 <TIM_Base_SetConfig+0x2a>
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	05db      	lsls	r3, r3, #23
 8002236:	429a      	cmp	r2, r3
 8002238:	d003      	beq.n	8002242 <TIM_Base_SetConfig+0x2a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a30      	ldr	r2, [pc, #192]	; (8002300 <TIM_Base_SetConfig+0xe8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d108      	bne.n	8002254 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2270      	movs	r2, #112	; 0x70
 8002246:	4393      	bics	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a29      	ldr	r2, [pc, #164]	; (80022fc <TIM_Base_SetConfig+0xe4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d018      	beq.n	800228e <TIM_Base_SetConfig+0x76>
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	05db      	lsls	r3, r3, #23
 8002262:	429a      	cmp	r2, r3
 8002264:	d013      	beq.n	800228e <TIM_Base_SetConfig+0x76>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a25      	ldr	r2, [pc, #148]	; (8002300 <TIM_Base_SetConfig+0xe8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00f      	beq.n	800228e <TIM_Base_SetConfig+0x76>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a24      	ldr	r2, [pc, #144]	; (8002304 <TIM_Base_SetConfig+0xec>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00b      	beq.n	800228e <TIM_Base_SetConfig+0x76>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a23      	ldr	r2, [pc, #140]	; (8002308 <TIM_Base_SetConfig+0xf0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d007      	beq.n	800228e <TIM_Base_SetConfig+0x76>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a22      	ldr	r2, [pc, #136]	; (800230c <TIM_Base_SetConfig+0xf4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d003      	beq.n	800228e <TIM_Base_SetConfig+0x76>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a21      	ldr	r2, [pc, #132]	; (8002310 <TIM_Base_SetConfig+0xf8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d108      	bne.n	80022a0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4a20      	ldr	r2, [pc, #128]	; (8002314 <TIM_Base_SetConfig+0xfc>)
 8002292:	4013      	ands	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4313      	orrs	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2280      	movs	r2, #128	; 0x80
 80022a4:	4393      	bics	r3, r2
 80022a6:	001a      	movs	r2, r3
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <TIM_Base_SetConfig+0xe4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d00b      	beq.n	80022e6 <TIM_Base_SetConfig+0xce>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a0d      	ldr	r2, [pc, #52]	; (8002308 <TIM_Base_SetConfig+0xf0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d007      	beq.n	80022e6 <TIM_Base_SetConfig+0xce>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a0c      	ldr	r2, [pc, #48]	; (800230c <TIM_Base_SetConfig+0xf4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d003      	beq.n	80022e6 <TIM_Base_SetConfig+0xce>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a0b      	ldr	r2, [pc, #44]	; (8002310 <TIM_Base_SetConfig+0xf8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d103      	bne.n	80022ee <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	691a      	ldr	r2, [r3, #16]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	615a      	str	r2, [r3, #20]
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b004      	add	sp, #16
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40012c00 	.word	0x40012c00
 8002300:	40000400 	.word	0x40000400
 8002304:	40002000 	.word	0x40002000
 8002308:	40014000 	.word	0x40014000
 800230c:	40014400 	.word	0x40014400
 8002310:	40014800 	.word	0x40014800
 8002314:	fffffcff 	.word	0xfffffcff

08002318 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e044      	b.n	80023b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800232e:	2b00      	cmp	r3, #0
 8002330:	d107      	bne.n	8002342 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2274      	movs	r2, #116	; 0x74
 8002336:	2100      	movs	r1, #0
 8002338:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	0018      	movs	r0, r3
 800233e:	f7fe fa53 	bl	80007e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2224      	movs	r2, #36	; 0x24
 8002346:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2101      	movs	r1, #1
 8002354:	438a      	bics	r2, r1
 8002356:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	0018      	movs	r0, r3
 800235c:	f000 f830 	bl	80023c0 <UART_SetConfig>
 8002360:	0003      	movs	r3, r0
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e024      	b.n	80023b4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	0018      	movs	r0, r3
 8002376:	f000 fa0b 	bl	8002790 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	490d      	ldr	r1, [pc, #52]	; (80023bc <HAL_UART_Init+0xa4>)
 8002386:	400a      	ands	r2, r1
 8002388:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	212a      	movs	r1, #42	; 0x2a
 8002396:	438a      	bics	r2, r1
 8002398:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2101      	movs	r1, #1
 80023a6:	430a      	orrs	r2, r1
 80023a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	0018      	movs	r0, r3
 80023ae:	f000 faa3 	bl	80028f8 <UART_CheckIdleState>
 80023b2:	0003      	movs	r3, r0
}
 80023b4:	0018      	movs	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b002      	add	sp, #8
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	ffffb7ff 	.word	0xffffb7ff

080023c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80023c8:	231e      	movs	r3, #30
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4abe      	ldr	r2, [pc, #760]	; (80026e8 <UART_SetConfig+0x328>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	0019      	movs	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	4ab9      	ldr	r2, [pc, #740]	; (80026ec <UART_SetConfig+0x32c>)
 8002406:	4013      	ands	r3, r2
 8002408:	0019      	movs	r1, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	4313      	orrs	r3, r2
 8002424:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	4ab0      	ldr	r2, [pc, #704]	; (80026f0 <UART_SetConfig+0x330>)
 800242e:	4013      	ands	r3, r2
 8002430:	0019      	movs	r1, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	430a      	orrs	r2, r1
 800243a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4aac      	ldr	r2, [pc, #688]	; (80026f4 <UART_SetConfig+0x334>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d127      	bne.n	8002496 <UART_SetConfig+0xd6>
 8002446:	4bac      	ldr	r3, [pc, #688]	; (80026f8 <UART_SetConfig+0x338>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	2203      	movs	r2, #3
 800244c:	4013      	ands	r3, r2
 800244e:	2b03      	cmp	r3, #3
 8002450:	d00d      	beq.n	800246e <UART_SetConfig+0xae>
 8002452:	d81b      	bhi.n	800248c <UART_SetConfig+0xcc>
 8002454:	2b02      	cmp	r3, #2
 8002456:	d014      	beq.n	8002482 <UART_SetConfig+0xc2>
 8002458:	d818      	bhi.n	800248c <UART_SetConfig+0xcc>
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <UART_SetConfig+0xa4>
 800245e:	2b01      	cmp	r3, #1
 8002460:	d00a      	beq.n	8002478 <UART_SetConfig+0xb8>
 8002462:	e013      	b.n	800248c <UART_SetConfig+0xcc>
 8002464:	231f      	movs	r3, #31
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
 800246c:	e0bd      	b.n	80025ea <UART_SetConfig+0x22a>
 800246e:	231f      	movs	r3, #31
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	2202      	movs	r2, #2
 8002474:	701a      	strb	r2, [r3, #0]
 8002476:	e0b8      	b.n	80025ea <UART_SetConfig+0x22a>
 8002478:	231f      	movs	r3, #31
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	2204      	movs	r2, #4
 800247e:	701a      	strb	r2, [r3, #0]
 8002480:	e0b3      	b.n	80025ea <UART_SetConfig+0x22a>
 8002482:	231f      	movs	r3, #31
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	2208      	movs	r2, #8
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	e0ae      	b.n	80025ea <UART_SetConfig+0x22a>
 800248c:	231f      	movs	r3, #31
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	2210      	movs	r2, #16
 8002492:	701a      	strb	r2, [r3, #0]
 8002494:	e0a9      	b.n	80025ea <UART_SetConfig+0x22a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a98      	ldr	r2, [pc, #608]	; (80026fc <UART_SetConfig+0x33c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d134      	bne.n	800250a <UART_SetConfig+0x14a>
 80024a0:	4b95      	ldr	r3, [pc, #596]	; (80026f8 <UART_SetConfig+0x338>)
 80024a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a4:	23c0      	movs	r3, #192	; 0xc0
 80024a6:	029b      	lsls	r3, r3, #10
 80024a8:	4013      	ands	r3, r2
 80024aa:	22c0      	movs	r2, #192	; 0xc0
 80024ac:	0292      	lsls	r2, r2, #10
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d017      	beq.n	80024e2 <UART_SetConfig+0x122>
 80024b2:	22c0      	movs	r2, #192	; 0xc0
 80024b4:	0292      	lsls	r2, r2, #10
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d822      	bhi.n	8002500 <UART_SetConfig+0x140>
 80024ba:	2280      	movs	r2, #128	; 0x80
 80024bc:	0292      	lsls	r2, r2, #10
 80024be:	4293      	cmp	r3, r2
 80024c0:	d019      	beq.n	80024f6 <UART_SetConfig+0x136>
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	0292      	lsls	r2, r2, #10
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d81a      	bhi.n	8002500 <UART_SetConfig+0x140>
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d004      	beq.n	80024d8 <UART_SetConfig+0x118>
 80024ce:	2280      	movs	r2, #128	; 0x80
 80024d0:	0252      	lsls	r2, r2, #9
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00a      	beq.n	80024ec <UART_SetConfig+0x12c>
 80024d6:	e013      	b.n	8002500 <UART_SetConfig+0x140>
 80024d8:	231f      	movs	r3, #31
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
 80024e0:	e083      	b.n	80025ea <UART_SetConfig+0x22a>
 80024e2:	231f      	movs	r3, #31
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	2202      	movs	r2, #2
 80024e8:	701a      	strb	r2, [r3, #0]
 80024ea:	e07e      	b.n	80025ea <UART_SetConfig+0x22a>
 80024ec:	231f      	movs	r3, #31
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	2204      	movs	r2, #4
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	e079      	b.n	80025ea <UART_SetConfig+0x22a>
 80024f6:	231f      	movs	r3, #31
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	2208      	movs	r2, #8
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	e074      	b.n	80025ea <UART_SetConfig+0x22a>
 8002500:	231f      	movs	r3, #31
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	2210      	movs	r2, #16
 8002506:	701a      	strb	r2, [r3, #0]
 8002508:	e06f      	b.n	80025ea <UART_SetConfig+0x22a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a7c      	ldr	r2, [pc, #496]	; (8002700 <UART_SetConfig+0x340>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d134      	bne.n	800257e <UART_SetConfig+0x1be>
 8002514:	4b78      	ldr	r3, [pc, #480]	; (80026f8 <UART_SetConfig+0x338>)
 8002516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002518:	23c0      	movs	r3, #192	; 0xc0
 800251a:	031b      	lsls	r3, r3, #12
 800251c:	4013      	ands	r3, r2
 800251e:	22c0      	movs	r2, #192	; 0xc0
 8002520:	0312      	lsls	r2, r2, #12
 8002522:	4293      	cmp	r3, r2
 8002524:	d017      	beq.n	8002556 <UART_SetConfig+0x196>
 8002526:	22c0      	movs	r2, #192	; 0xc0
 8002528:	0312      	lsls	r2, r2, #12
 800252a:	4293      	cmp	r3, r2
 800252c:	d822      	bhi.n	8002574 <UART_SetConfig+0x1b4>
 800252e:	2280      	movs	r2, #128	; 0x80
 8002530:	0312      	lsls	r2, r2, #12
 8002532:	4293      	cmp	r3, r2
 8002534:	d019      	beq.n	800256a <UART_SetConfig+0x1aa>
 8002536:	2280      	movs	r2, #128	; 0x80
 8002538:	0312      	lsls	r2, r2, #12
 800253a:	4293      	cmp	r3, r2
 800253c:	d81a      	bhi.n	8002574 <UART_SetConfig+0x1b4>
 800253e:	2b00      	cmp	r3, #0
 8002540:	d004      	beq.n	800254c <UART_SetConfig+0x18c>
 8002542:	2280      	movs	r2, #128	; 0x80
 8002544:	02d2      	lsls	r2, r2, #11
 8002546:	4293      	cmp	r3, r2
 8002548:	d00a      	beq.n	8002560 <UART_SetConfig+0x1a0>
 800254a:	e013      	b.n	8002574 <UART_SetConfig+0x1b4>
 800254c:	231f      	movs	r3, #31
 800254e:	18fb      	adds	r3, r7, r3
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	e049      	b.n	80025ea <UART_SetConfig+0x22a>
 8002556:	231f      	movs	r3, #31
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	2202      	movs	r2, #2
 800255c:	701a      	strb	r2, [r3, #0]
 800255e:	e044      	b.n	80025ea <UART_SetConfig+0x22a>
 8002560:	231f      	movs	r3, #31
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	2204      	movs	r2, #4
 8002566:	701a      	strb	r2, [r3, #0]
 8002568:	e03f      	b.n	80025ea <UART_SetConfig+0x22a>
 800256a:	231f      	movs	r3, #31
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	2208      	movs	r2, #8
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	e03a      	b.n	80025ea <UART_SetConfig+0x22a>
 8002574:	231f      	movs	r3, #31
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	2210      	movs	r2, #16
 800257a:	701a      	strb	r2, [r3, #0]
 800257c:	e035      	b.n	80025ea <UART_SetConfig+0x22a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a60      	ldr	r2, [pc, #384]	; (8002704 <UART_SetConfig+0x344>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d104      	bne.n	8002592 <UART_SetConfig+0x1d2>
 8002588:	231f      	movs	r3, #31
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]
 8002590:	e02b      	b.n	80025ea <UART_SetConfig+0x22a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a5c      	ldr	r2, [pc, #368]	; (8002708 <UART_SetConfig+0x348>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d104      	bne.n	80025a6 <UART_SetConfig+0x1e6>
 800259c:	231f      	movs	r3, #31
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
 80025a4:	e021      	b.n	80025ea <UART_SetConfig+0x22a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a58      	ldr	r2, [pc, #352]	; (800270c <UART_SetConfig+0x34c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d104      	bne.n	80025ba <UART_SetConfig+0x1fa>
 80025b0:	231f      	movs	r3, #31
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
 80025b8:	e017      	b.n	80025ea <UART_SetConfig+0x22a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a54      	ldr	r2, [pc, #336]	; (8002710 <UART_SetConfig+0x350>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d104      	bne.n	80025ce <UART_SetConfig+0x20e>
 80025c4:	231f      	movs	r3, #31
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
 80025cc:	e00d      	b.n	80025ea <UART_SetConfig+0x22a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a50      	ldr	r2, [pc, #320]	; (8002714 <UART_SetConfig+0x354>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d104      	bne.n	80025e2 <UART_SetConfig+0x222>
 80025d8:	231f      	movs	r3, #31
 80025da:	18fb      	adds	r3, r7, r3
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
 80025e0:	e003      	b.n	80025ea <UART_SetConfig+0x22a>
 80025e2:	231f      	movs	r3, #31
 80025e4:	18fb      	adds	r3, r7, r3
 80025e6:	2210      	movs	r2, #16
 80025e8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69da      	ldr	r2, [r3, #28]
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	021b      	lsls	r3, r3, #8
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d15d      	bne.n	80026b2 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 80025f6:	231f      	movs	r3, #31
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d015      	beq.n	800262c <UART_SetConfig+0x26c>
 8002600:	dc18      	bgt.n	8002634 <UART_SetConfig+0x274>
 8002602:	2b04      	cmp	r3, #4
 8002604:	d00d      	beq.n	8002622 <UART_SetConfig+0x262>
 8002606:	dc15      	bgt.n	8002634 <UART_SetConfig+0x274>
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <UART_SetConfig+0x252>
 800260c:	2b02      	cmp	r3, #2
 800260e:	d005      	beq.n	800261c <UART_SetConfig+0x25c>
 8002610:	e010      	b.n	8002634 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002612:	f7ff fac7 	bl	8001ba4 <HAL_RCC_GetPCLK1Freq>
 8002616:	0003      	movs	r3, r0
 8002618:	61bb      	str	r3, [r7, #24]
        break;
 800261a:	e012      	b.n	8002642 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800261c:	4b3e      	ldr	r3, [pc, #248]	; (8002718 <UART_SetConfig+0x358>)
 800261e:	61bb      	str	r3, [r7, #24]
        break;
 8002620:	e00f      	b.n	8002642 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002622:	f7ff fa35 	bl	8001a90 <HAL_RCC_GetSysClockFreq>
 8002626:	0003      	movs	r3, r0
 8002628:	61bb      	str	r3, [r7, #24]
        break;
 800262a:	e00a      	b.n	8002642 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	61bb      	str	r3, [r7, #24]
        break;
 8002632:	e006      	b.n	8002642 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002638:	231e      	movs	r3, #30
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	2201      	movs	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]
        break;
 8002640:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d100      	bne.n	800264a <UART_SetConfig+0x28a>
 8002648:	e095      	b.n	8002776 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	005a      	lsls	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	085b      	lsrs	r3, r3, #1
 8002654:	18d2      	adds	r2, r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	0019      	movs	r1, r3
 800265c:	0010      	movs	r0, r2
 800265e:	f7fd fd51 	bl	8000104 <__udivsi3>
 8002662:	0003      	movs	r3, r0
 8002664:	b29b      	uxth	r3, r3
 8002666:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	2b0f      	cmp	r3, #15
 800266c:	d91c      	bls.n	80026a8 <UART_SetConfig+0x2e8>
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	025b      	lsls	r3, r3, #9
 8002674:	429a      	cmp	r2, r3
 8002676:	d217      	bcs.n	80026a8 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	b29a      	uxth	r2, r3
 800267c:	200e      	movs	r0, #14
 800267e:	183b      	adds	r3, r7, r0
 8002680:	210f      	movs	r1, #15
 8002682:	438a      	bics	r2, r1
 8002684:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	085b      	lsrs	r3, r3, #1
 800268a:	b29b      	uxth	r3, r3
 800268c:	2207      	movs	r2, #7
 800268e:	4013      	ands	r3, r2
 8002690:	b299      	uxth	r1, r3
 8002692:	183b      	adds	r3, r7, r0
 8002694:	183a      	adds	r2, r7, r0
 8002696:	8812      	ldrh	r2, [r2, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	183a      	adds	r2, r7, r0
 80026a2:	8812      	ldrh	r2, [r2, #0]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	e066      	b.n	8002776 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80026a8:	231e      	movs	r3, #30
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
 80026b0:	e061      	b.n	8002776 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80026b2:	231f      	movs	r3, #31
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d02f      	beq.n	800271c <UART_SetConfig+0x35c>
 80026bc:	dc32      	bgt.n	8002724 <UART_SetConfig+0x364>
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d00d      	beq.n	80026de <UART_SetConfig+0x31e>
 80026c2:	dc2f      	bgt.n	8002724 <UART_SetConfig+0x364>
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <UART_SetConfig+0x30e>
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d005      	beq.n	80026d8 <UART_SetConfig+0x318>
 80026cc:	e02a      	b.n	8002724 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026ce:	f7ff fa69 	bl	8001ba4 <HAL_RCC_GetPCLK1Freq>
 80026d2:	0003      	movs	r3, r0
 80026d4:	61bb      	str	r3, [r7, #24]
        break;
 80026d6:	e02c      	b.n	8002732 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026d8:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <UART_SetConfig+0x358>)
 80026da:	61bb      	str	r3, [r7, #24]
        break;
 80026dc:	e029      	b.n	8002732 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026de:	f7ff f9d7 	bl	8001a90 <HAL_RCC_GetSysClockFreq>
 80026e2:	0003      	movs	r3, r0
 80026e4:	61bb      	str	r3, [r7, #24]
        break;
 80026e6:	e024      	b.n	8002732 <UART_SetConfig+0x372>
 80026e8:	efff69f3 	.word	0xefff69f3
 80026ec:	ffffcfff 	.word	0xffffcfff
 80026f0:	fffff4ff 	.word	0xfffff4ff
 80026f4:	40013800 	.word	0x40013800
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40004400 	.word	0x40004400
 8002700:	40004800 	.word	0x40004800
 8002704:	40004c00 	.word	0x40004c00
 8002708:	40005000 	.word	0x40005000
 800270c:	40011400 	.word	0x40011400
 8002710:	40011800 	.word	0x40011800
 8002714:	40011c00 	.word	0x40011c00
 8002718:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	61bb      	str	r3, [r7, #24]
        break;
 8002722:	e006      	b.n	8002732 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002728:	231e      	movs	r3, #30
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]
        break;
 8002730:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d01e      	beq.n	8002776 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	085a      	lsrs	r2, r3, #1
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	18d2      	adds	r2, r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	0019      	movs	r1, r3
 8002748:	0010      	movs	r0, r2
 800274a:	f7fd fcdb 	bl	8000104 <__udivsi3>
 800274e:	0003      	movs	r3, r0
 8002750:	b29b      	uxth	r3, r3
 8002752:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	2b0f      	cmp	r3, #15
 8002758:	d909      	bls.n	800276e <UART_SetConfig+0x3ae>
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	025b      	lsls	r3, r3, #9
 8002760:	429a      	cmp	r2, r3
 8002762:	d204      	bcs.n	800276e <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	60da      	str	r2, [r3, #12]
 800276c:	e003      	b.n	8002776 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800276e:	231e      	movs	r3, #30
 8002770:	18fb      	adds	r3, r7, r3
 8002772:	2201      	movs	r2, #1
 8002774:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002782:	231e      	movs	r3, #30
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	781b      	ldrb	r3, [r3, #0]
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b008      	add	sp, #32
 800278e:	bd80      	pop	{r7, pc}

08002790 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	2201      	movs	r2, #1
 800279e:	4013      	ands	r3, r2
 80027a0:	d00b      	beq.n	80027ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4a4a      	ldr	r2, [pc, #296]	; (80028d4 <UART_AdvFeatureConfig+0x144>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	0019      	movs	r1, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	2202      	movs	r2, #2
 80027c0:	4013      	ands	r3, r2
 80027c2:	d00b      	beq.n	80027dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4a43      	ldr	r2, [pc, #268]	; (80028d8 <UART_AdvFeatureConfig+0x148>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	0019      	movs	r1, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	2204      	movs	r2, #4
 80027e2:	4013      	ands	r3, r2
 80027e4:	d00b      	beq.n	80027fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4a3b      	ldr	r2, [pc, #236]	; (80028dc <UART_AdvFeatureConfig+0x14c>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	0019      	movs	r1, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	2208      	movs	r2, #8
 8002804:	4013      	ands	r3, r2
 8002806:	d00b      	beq.n	8002820 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	4a34      	ldr	r2, [pc, #208]	; (80028e0 <UART_AdvFeatureConfig+0x150>)
 8002810:	4013      	ands	r3, r2
 8002812:	0019      	movs	r1, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	2210      	movs	r2, #16
 8002826:	4013      	ands	r3, r2
 8002828:	d00b      	beq.n	8002842 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	4a2c      	ldr	r2, [pc, #176]	; (80028e4 <UART_AdvFeatureConfig+0x154>)
 8002832:	4013      	ands	r3, r2
 8002834:	0019      	movs	r1, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	2220      	movs	r2, #32
 8002848:	4013      	ands	r3, r2
 800284a:	d00b      	beq.n	8002864 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	4a25      	ldr	r2, [pc, #148]	; (80028e8 <UART_AdvFeatureConfig+0x158>)
 8002854:	4013      	ands	r3, r2
 8002856:	0019      	movs	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	2240      	movs	r2, #64	; 0x40
 800286a:	4013      	ands	r3, r2
 800286c:	d01d      	beq.n	80028aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	4a1d      	ldr	r2, [pc, #116]	; (80028ec <UART_AdvFeatureConfig+0x15c>)
 8002876:	4013      	ands	r3, r2
 8002878:	0019      	movs	r1, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	035b      	lsls	r3, r3, #13
 800288e:	429a      	cmp	r2, r3
 8002890:	d10b      	bne.n	80028aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4a15      	ldr	r2, [pc, #84]	; (80028f0 <UART_AdvFeatureConfig+0x160>)
 800289a:	4013      	ands	r3, r2
 800289c:	0019      	movs	r1, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	2280      	movs	r2, #128	; 0x80
 80028b0:	4013      	ands	r3, r2
 80028b2:	d00b      	beq.n	80028cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <UART_AdvFeatureConfig+0x164>)
 80028bc:	4013      	ands	r3, r2
 80028be:	0019      	movs	r1, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	605a      	str	r2, [r3, #4]
  }
}
 80028cc:	46c0      	nop			; (mov r8, r8)
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b002      	add	sp, #8
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	fffdffff 	.word	0xfffdffff
 80028d8:	fffeffff 	.word	0xfffeffff
 80028dc:	fffbffff 	.word	0xfffbffff
 80028e0:	ffff7fff 	.word	0xffff7fff
 80028e4:	ffffefff 	.word	0xffffefff
 80028e8:	ffffdfff 	.word	0xffffdfff
 80028ec:	ffefffff 	.word	0xffefffff
 80028f0:	ff9fffff 	.word	0xff9fffff
 80028f4:	fff7ffff 	.word	0xfff7ffff

080028f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2280      	movs	r2, #128	; 0x80
 8002904:	2100      	movs	r1, #0
 8002906:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002908:	f7fe f87a 	bl	8000a00 <HAL_GetTick>
 800290c:	0003      	movs	r3, r0
 800290e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2208      	movs	r2, #8
 8002918:	4013      	ands	r3, r2
 800291a:	2b08      	cmp	r3, #8
 800291c:	d10c      	bne.n	8002938 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2280      	movs	r2, #128	; 0x80
 8002922:	0391      	lsls	r1, r2, #14
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	4a17      	ldr	r2, [pc, #92]	; (8002984 <UART_CheckIdleState+0x8c>)
 8002928:	9200      	str	r2, [sp, #0]
 800292a:	2200      	movs	r2, #0
 800292c:	f000 f82c 	bl	8002988 <UART_WaitOnFlagUntilTimeout>
 8002930:	1e03      	subs	r3, r0, #0
 8002932:	d001      	beq.n	8002938 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e021      	b.n	800297c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2204      	movs	r2, #4
 8002940:	4013      	ands	r3, r2
 8002942:	2b04      	cmp	r3, #4
 8002944:	d10c      	bne.n	8002960 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2280      	movs	r2, #128	; 0x80
 800294a:	03d1      	lsls	r1, r2, #15
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4a0d      	ldr	r2, [pc, #52]	; (8002984 <UART_CheckIdleState+0x8c>)
 8002950:	9200      	str	r2, [sp, #0]
 8002952:	2200      	movs	r2, #0
 8002954:	f000 f818 	bl	8002988 <UART_WaitOnFlagUntilTimeout>
 8002958:	1e03      	subs	r3, r0, #0
 800295a:	d001      	beq.n	8002960 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e00d      	b.n	800297c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2220      	movs	r2, #32
 800296a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2274      	movs	r2, #116	; 0x74
 8002976:	2100      	movs	r1, #0
 8002978:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	0018      	movs	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	b004      	add	sp, #16
 8002982:	bd80      	pop	{r7, pc}
 8002984:	01ffffff 	.word	0x01ffffff

08002988 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b094      	sub	sp, #80	; 0x50
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	1dfb      	adds	r3, r7, #7
 8002996:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002998:	e0a3      	b.n	8002ae2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800299a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800299c:	3301      	adds	r3, #1
 800299e:	d100      	bne.n	80029a2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80029a0:	e09f      	b.n	8002ae2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a2:	f7fe f82d 	bl	8000a00 <HAL_GetTick>
 80029a6:	0002      	movs	r2, r0
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d302      	bcc.n	80029b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80029b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d13d      	bne.n	8002a34 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029b8:	f3ef 8310 	mrs	r3, PRIMASK
 80029bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80029be:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029c0:	647b      	str	r3, [r7, #68]	; 0x44
 80029c2:	2301      	movs	r3, #1
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c8:	f383 8810 	msr	PRIMASK, r3
}
 80029cc:	46c0      	nop			; (mov r8, r8)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	494c      	ldr	r1, [pc, #304]	; (8002b0c <UART_WaitOnFlagUntilTimeout+0x184>)
 80029da:	400a      	ands	r2, r1
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029e0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e4:	f383 8810 	msr	PRIMASK, r3
}
 80029e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029ea:	f3ef 8310 	mrs	r3, PRIMASK
 80029ee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80029f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f2:	643b      	str	r3, [r7, #64]	; 0x40
 80029f4:	2301      	movs	r3, #1
 80029f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fa:	f383 8810 	msr	PRIMASK, r3
}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	438a      	bics	r2, r1
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a16:	f383 8810 	msr	PRIMASK, r3
}
 8002a1a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2274      	movs	r2, #116	; 0x74
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e067      	b.n	8002b04 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d050      	beq.n	8002ae2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	69da      	ldr	r2, [r3, #28]
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d146      	bne.n	8002ae2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2280      	movs	r2, #128	; 0x80
 8002a5a:	0112      	lsls	r2, r2, #4
 8002a5c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a62:	613b      	str	r3, [r7, #16]
  return(result);
 8002a64:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a68:	2301      	movs	r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f383 8810 	msr	PRIMASK, r3
}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4923      	ldr	r1, [pc, #140]	; (8002b0c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002a80:	400a      	ands	r2, r1
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	f383 8810 	msr	PRIMASK, r3
}
 8002a8e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a90:	f3ef 8310 	mrs	r3, PRIMASK
 8002a94:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a96:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a98:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	f383 8810 	msr	PRIMASK, r3
}
 8002aa4:	46c0      	nop			; (mov r8, r8)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	438a      	bics	r2, r1
 8002ab4:	609a      	str	r2, [r3, #8]
 8002ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	f383 8810 	msr	PRIMASK, r3
}
 8002ac0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2280      	movs	r2, #128	; 0x80
 8002ad2:	2120      	movs	r1, #32
 8002ad4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2274      	movs	r2, #116	; 0x74
 8002ada:	2100      	movs	r1, #0
 8002adc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e010      	b.n	8002b04 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	4013      	ands	r3, r2
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	425a      	negs	r2, r3
 8002af2:	4153      	adcs	r3, r2
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	001a      	movs	r2, r3
 8002af8:	1dfb      	adds	r3, r7, #7
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d100      	bne.n	8002b02 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002b00:	e74b      	b.n	800299a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	0018      	movs	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b014      	add	sp, #80	; 0x50
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	fffffe5f 	.word	0xfffffe5f

08002b10 <__libc_init_array>:
 8002b10:	b570      	push	{r4, r5, r6, lr}
 8002b12:	2600      	movs	r6, #0
 8002b14:	4d0c      	ldr	r5, [pc, #48]	; (8002b48 <__libc_init_array+0x38>)
 8002b16:	4c0d      	ldr	r4, [pc, #52]	; (8002b4c <__libc_init_array+0x3c>)
 8002b18:	1b64      	subs	r4, r4, r5
 8002b1a:	10a4      	asrs	r4, r4, #2
 8002b1c:	42a6      	cmp	r6, r4
 8002b1e:	d109      	bne.n	8002b34 <__libc_init_array+0x24>
 8002b20:	2600      	movs	r6, #0
 8002b22:	f000 f821 	bl	8002b68 <_init>
 8002b26:	4d0a      	ldr	r5, [pc, #40]	; (8002b50 <__libc_init_array+0x40>)
 8002b28:	4c0a      	ldr	r4, [pc, #40]	; (8002b54 <__libc_init_array+0x44>)
 8002b2a:	1b64      	subs	r4, r4, r5
 8002b2c:	10a4      	asrs	r4, r4, #2
 8002b2e:	42a6      	cmp	r6, r4
 8002b30:	d105      	bne.n	8002b3e <__libc_init_array+0x2e>
 8002b32:	bd70      	pop	{r4, r5, r6, pc}
 8002b34:	00b3      	lsls	r3, r6, #2
 8002b36:	58eb      	ldr	r3, [r5, r3]
 8002b38:	4798      	blx	r3
 8002b3a:	3601      	adds	r6, #1
 8002b3c:	e7ee      	b.n	8002b1c <__libc_init_array+0xc>
 8002b3e:	00b3      	lsls	r3, r6, #2
 8002b40:	58eb      	ldr	r3, [r5, r3]
 8002b42:	4798      	blx	r3
 8002b44:	3601      	adds	r6, #1
 8002b46:	e7f2      	b.n	8002b2e <__libc_init_array+0x1e>
 8002b48:	08002bb8 	.word	0x08002bb8
 8002b4c:	08002bb8 	.word	0x08002bb8
 8002b50:	08002bb8 	.word	0x08002bb8
 8002b54:	08002bbc 	.word	0x08002bbc

08002b58 <memset>:
 8002b58:	0003      	movs	r3, r0
 8002b5a:	1882      	adds	r2, r0, r2
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d100      	bne.n	8002b62 <memset+0xa>
 8002b60:	4770      	bx	lr
 8002b62:	7019      	strb	r1, [r3, #0]
 8002b64:	3301      	adds	r3, #1
 8002b66:	e7f9      	b.n	8002b5c <memset+0x4>

08002b68 <_init>:
 8002b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b6e:	bc08      	pop	{r3}
 8002b70:	469e      	mov	lr, r3
 8002b72:	4770      	bx	lr

08002b74 <_fini>:
 8002b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b7a:	bc08      	pop	{r3}
 8002b7c:	469e      	mov	lr, r3
 8002b7e:	4770      	bx	lr
