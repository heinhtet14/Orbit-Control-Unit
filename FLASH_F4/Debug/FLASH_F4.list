
FLASH_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002508  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800269c  0800269c  0001269c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026ac  080026ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080026ac  080026ac  000126ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026b4  080026b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026b4  080026b4  000126b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026b8  080026b8  000126b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  080026c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080026c8  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d0a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ab  00000000  00000000  00027d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  000296f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  00029e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015121  00000000  00000000  0002a530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000086d5  00000000  00000000  0003f651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084af6  00000000  00000000  00047d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc81c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d14  00000000  00000000  000cc870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002684 	.word	0x08002684

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002684 	.word	0x08002684

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b96e 	b.w	80004d8 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468c      	mov	ip, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	f040 8083 	bne.w	800032a <__udivmoddi4+0x116>
 8000224:	428a      	cmp	r2, r1
 8000226:	4617      	mov	r7, r2
 8000228:	d947      	bls.n	80002ba <__udivmoddi4+0xa6>
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	b142      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 8000230:	f1c2 0020 	rsb	r0, r2, #32
 8000234:	fa24 f000 	lsr.w	r0, r4, r0
 8000238:	4091      	lsls	r1, r2
 800023a:	4097      	lsls	r7, r2
 800023c:	ea40 0c01 	orr.w	ip, r0, r1
 8000240:	4094      	lsls	r4, r2
 8000242:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000246:	0c23      	lsrs	r3, r4, #16
 8000248:	fbbc f6f8 	udiv	r6, ip, r8
 800024c:	fa1f fe87 	uxth.w	lr, r7
 8000250:	fb08 c116 	mls	r1, r8, r6, ip
 8000254:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000258:	fb06 f10e 	mul.w	r1, r6, lr
 800025c:	4299      	cmp	r1, r3
 800025e:	d909      	bls.n	8000274 <__udivmoddi4+0x60>
 8000260:	18fb      	adds	r3, r7, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 8119 	bcs.w	800049c <__udivmoddi4+0x288>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 8116 	bls.w	800049c <__udivmoddi4+0x288>
 8000270:	3e02      	subs	r6, #2
 8000272:	443b      	add	r3, r7
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 fe0e 	mul.w	lr, r0, lr
 8000288:	45a6      	cmp	lr, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x8c>
 800028c:	193c      	adds	r4, r7, r4
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 8105 	bcs.w	80004a0 <__udivmoddi4+0x28c>
 8000296:	45a6      	cmp	lr, r4
 8000298:	f240 8102 	bls.w	80004a0 <__udivmoddi4+0x28c>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a4:	eba4 040e 	sub.w	r4, r4, lr
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa0>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	b902      	cbnz	r2, 80002be <__udivmoddi4+0xaa>
 80002bc:	deff      	udf	#255	; 0xff
 80002be:	fab2 f282 	clz	r2, r2
 80002c2:	2a00      	cmp	r2, #0
 80002c4:	d150      	bne.n	8000368 <__udivmoddi4+0x154>
 80002c6:	1bcb      	subs	r3, r1, r7
 80002c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002cc:	fa1f f887 	uxth.w	r8, r7
 80002d0:	2601      	movs	r6, #1
 80002d2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d6:	0c21      	lsrs	r1, r4, #16
 80002d8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e0:	fb08 f30c 	mul.w	r3, r8, ip
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0xe4>
 80002e8:	1879      	adds	r1, r7, r1
 80002ea:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0xe2>
 80002f0:	428b      	cmp	r3, r1
 80002f2:	f200 80e9 	bhi.w	80004c8 <__udivmoddi4+0x2b4>
 80002f6:	4684      	mov	ip, r0
 80002f8:	1ac9      	subs	r1, r1, r3
 80002fa:	b2a3      	uxth	r3, r4
 80002fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000300:	fb0e 1110 	mls	r1, lr, r0, r1
 8000304:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000308:	fb08 f800 	mul.w	r8, r8, r0
 800030c:	45a0      	cmp	r8, r4
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x10c>
 8000310:	193c      	adds	r4, r7, r4
 8000312:	f100 33ff 	add.w	r3, r0, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x10a>
 8000318:	45a0      	cmp	r8, r4
 800031a:	f200 80d9 	bhi.w	80004d0 <__udivmoddi4+0x2bc>
 800031e:	4618      	mov	r0, r3
 8000320:	eba4 0408 	sub.w	r4, r4, r8
 8000324:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000328:	e7bf      	b.n	80002aa <__udivmoddi4+0x96>
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x12e>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80b1 	beq.w	8000496 <__udivmoddi4+0x282>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x1cc>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0x140>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80b8 	bhi.w	80004c4 <__udivmoddi4+0x2b0>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0103 	sbc.w	r1, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	468c      	mov	ip, r1
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0a8      	beq.n	80002b4 <__udivmoddi4+0xa0>
 8000362:	e9c5 4c00 	strd	r4, ip, [r5]
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0xa0>
 8000368:	f1c2 0320 	rsb	r3, r2, #32
 800036c:	fa20 f603 	lsr.w	r6, r0, r3
 8000370:	4097      	lsls	r7, r2
 8000372:	fa01 f002 	lsl.w	r0, r1, r2
 8000376:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037a:	40d9      	lsrs	r1, r3
 800037c:	4330      	orrs	r0, r6
 800037e:	0c03      	lsrs	r3, r0, #16
 8000380:	fbb1 f6fe 	udiv	r6, r1, lr
 8000384:	fa1f f887 	uxth.w	r8, r7
 8000388:	fb0e 1116 	mls	r1, lr, r6, r1
 800038c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000390:	fb06 f108 	mul.w	r1, r6, r8
 8000394:	4299      	cmp	r1, r3
 8000396:	fa04 f402 	lsl.w	r4, r4, r2
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x19c>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 3cff 	add.w	ip, r6, #4294967295
 80003a2:	f080 808d 	bcs.w	80004c0 <__udivmoddi4+0x2ac>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 808a 	bls.w	80004c0 <__udivmoddi4+0x2ac>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b281      	uxth	r1, r0
 80003b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c0:	fb00 f308 	mul.w	r3, r0, r8
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x1c4>
 80003c8:	1879      	adds	r1, r7, r1
 80003ca:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ce:	d273      	bcs.n	80004b8 <__udivmoddi4+0x2a4>
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d971      	bls.n	80004b8 <__udivmoddi4+0x2a4>
 80003d4:	3802      	subs	r0, #2
 80003d6:	4439      	add	r1, r7
 80003d8:	1acb      	subs	r3, r1, r3
 80003da:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003de:	e778      	b.n	80002d2 <__udivmoddi4+0xbe>
 80003e0:	f1c6 0c20 	rsb	ip, r6, #32
 80003e4:	fa03 f406 	lsl.w	r4, r3, r6
 80003e8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003ec:	431c      	orrs	r4, r3
 80003ee:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fa:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fe:	431f      	orrs	r7, r3
 8000400:	0c3b      	lsrs	r3, r7, #16
 8000402:	fbb1 f9fe 	udiv	r9, r1, lr
 8000406:	fa1f f884 	uxth.w	r8, r4
 800040a:	fb0e 1119 	mls	r1, lr, r9, r1
 800040e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000412:	fb09 fa08 	mul.w	sl, r9, r8
 8000416:	458a      	cmp	sl, r1
 8000418:	fa02 f206 	lsl.w	r2, r2, r6
 800041c:	fa00 f306 	lsl.w	r3, r0, r6
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x220>
 8000422:	1861      	adds	r1, r4, r1
 8000424:	f109 30ff 	add.w	r0, r9, #4294967295
 8000428:	d248      	bcs.n	80004bc <__udivmoddi4+0x2a8>
 800042a:	458a      	cmp	sl, r1
 800042c:	d946      	bls.n	80004bc <__udivmoddi4+0x2a8>
 800042e:	f1a9 0902 	sub.w	r9, r9, #2
 8000432:	4421      	add	r1, r4
 8000434:	eba1 010a 	sub.w	r1, r1, sl
 8000438:	b2bf      	uxth	r7, r7
 800043a:	fbb1 f0fe 	udiv	r0, r1, lr
 800043e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000442:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000446:	fb00 f808 	mul.w	r8, r0, r8
 800044a:	45b8      	cmp	r8, r7
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x24a>
 800044e:	19e7      	adds	r7, r4, r7
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d22e      	bcs.n	80004b4 <__udivmoddi4+0x2a0>
 8000456:	45b8      	cmp	r8, r7
 8000458:	d92c      	bls.n	80004b4 <__udivmoddi4+0x2a0>
 800045a:	3802      	subs	r0, #2
 800045c:	4427      	add	r7, r4
 800045e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000462:	eba7 0708 	sub.w	r7, r7, r8
 8000466:	fba0 8902 	umull	r8, r9, r0, r2
 800046a:	454f      	cmp	r7, r9
 800046c:	46c6      	mov	lr, r8
 800046e:	4649      	mov	r1, r9
 8000470:	d31a      	bcc.n	80004a8 <__udivmoddi4+0x294>
 8000472:	d017      	beq.n	80004a4 <__udivmoddi4+0x290>
 8000474:	b15d      	cbz	r5, 800048e <__udivmoddi4+0x27a>
 8000476:	ebb3 020e 	subs.w	r2, r3, lr
 800047a:	eb67 0701 	sbc.w	r7, r7, r1
 800047e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000482:	40f2      	lsrs	r2, r6
 8000484:	ea4c 0202 	orr.w	r2, ip, r2
 8000488:	40f7      	lsrs	r7, r6
 800048a:	e9c5 2700 	strd	r2, r7, [r5]
 800048e:	2600      	movs	r6, #0
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e70b      	b.n	80002b4 <__udivmoddi4+0xa0>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e9      	b.n	8000274 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fd      	b.n	80002a0 <__udivmoddi4+0x8c>
 80004a4:	4543      	cmp	r3, r8
 80004a6:	d2e5      	bcs.n	8000474 <__udivmoddi4+0x260>
 80004a8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ac:	eb69 0104 	sbc.w	r1, r9, r4
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7df      	b.n	8000474 <__udivmoddi4+0x260>
 80004b4:	4608      	mov	r0, r1
 80004b6:	e7d2      	b.n	800045e <__udivmoddi4+0x24a>
 80004b8:	4660      	mov	r0, ip
 80004ba:	e78d      	b.n	80003d8 <__udivmoddi4+0x1c4>
 80004bc:	4681      	mov	r9, r0
 80004be:	e7b9      	b.n	8000434 <__udivmoddi4+0x220>
 80004c0:	4666      	mov	r6, ip
 80004c2:	e775      	b.n	80003b0 <__udivmoddi4+0x19c>
 80004c4:	4630      	mov	r0, r6
 80004c6:	e74a      	b.n	800035e <__udivmoddi4+0x14a>
 80004c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004cc:	4439      	add	r1, r7
 80004ce:	e713      	b.n	80002f8 <__udivmoddi4+0xe4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	443c      	add	r4, r7
 80004d4:	e724      	b.n	8000320 <__udivmoddi4+0x10c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <AMCP3208_read_u16>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t AMCP3208_read_u16(uint8_t channel){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af02      	add	r7, sp, #8
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[3];
	uint8_t aRxBuffer[3];

	aTxBuffer[0] = MCP3208_START_BIT | MCP3208_MODE_SINGLE | ((channel & 0x04) >> 2);
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	109b      	asrs	r3, r3, #2
 80004ea:	b25b      	sxtb	r3, r3
 80004ec:	f003 0301 	and.w	r3, r3, #1
 80004f0:	b25b      	sxtb	r3, r3
 80004f2:	f043 0306 	orr.w	r3, r3, #6
 80004f6:	b25b      	sxtb	r3, r3
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = channel << 6;
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	019b      	lsls	r3, r3, #6
 8000500:	b2db      	uxtb	r3, r3
 8000502:	747b      	strb	r3, [r7, #17]
	aTxBuffer[2] = 0x00;
 8000504:	2300      	movs	r3, #0
 8000506:	74bb      	strb	r3, [r7, #18]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2110      	movs	r1, #16
 800050c:	4813      	ldr	r0, [pc, #76]	; (800055c <AMCP3208_read_u16+0x80>)
 800050e:	f001 f83d 	bl	800158c <HAL_GPIO_WritePin>

	if(HAL_SPI_TransmitReceive(&hspi2,aTxBuffer,aRxBuffer,3,100)!= HAL_OK){
 8000512:	f107 020c 	add.w	r2, r7, #12
 8000516:	f107 0110 	add.w	r1, r7, #16
 800051a:	2364      	movs	r3, #100	; 0x64
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2303      	movs	r3, #3
 8000520:	480f      	ldr	r0, [pc, #60]	; (8000560 <AMCP3208_read_u16+0x84>)
 8000522:	f001 fd16 	bl	8001f52 <HAL_SPI_TransmitReceive>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <AMCP3208_read_u16+0x54>
		Error_Handler();
 800052c:	f000 f962 	bl	80007f4 <Error_Handler>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2110      	movs	r1, #16
 8000534:	4809      	ldr	r0, [pc, #36]	; (800055c <AMCP3208_read_u16+0x80>)
 8000536:	f001 f829 	bl	800158c <HAL_GPIO_WritePin>

	  // RX
	  uint16_t conv_result = ((uint16_t)(aRxBuffer[1] & 0x0f) << 8) | (uint16_t)aRxBuffer[2];
 800053a:	7b7b      	ldrb	r3, [r7, #13]
 800053c:	021b      	lsls	r3, r3, #8
 800053e:	b21b      	sxth	r3, r3
 8000540:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000544:	b21a      	sxth	r2, r3
 8000546:	7bbb      	ldrb	r3, [r7, #14]
 8000548:	b21b      	sxth	r3, r3
 800054a:	4313      	orrs	r3, r2
 800054c:	b21b      	sxth	r3, r3
 800054e:	82fb      	strh	r3, [r7, #22]

	  return conv_result;
 8000550:	8afb      	ldrh	r3, [r7, #22]
	}
 8000552:	4618      	mov	r0, r3
 8000554:	3718      	adds	r7, #24
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40020000 	.word	0x40020000
 8000560:	20000054 	.word	0x20000054

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 fa40 	bl	80009ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f824 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000570:	f000 f8c2 	bl	80006f8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000574:	f000 f88a 	bl	800068c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  adcA[0] = AMCP3208_read_u16(0);
 8000578:	2000      	movs	r0, #0
 800057a:	f7ff ffaf 	bl	80004dc <AMCP3208_read_u16>
 800057e:	4603      	mov	r3, r0
 8000580:	461a      	mov	r2, r3
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <main+0x44>)
 8000584:	801a      	strh	r2, [r3, #0]
  *data = adcA[0];
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <main+0x44>)
 8000588:	881a      	ldrh	r2, [r3, #0]
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <main+0x48>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	601a      	str	r2, [r3, #0]
  Flash_Write_Data(0x08020000,data);
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <main+0x48>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	4806      	ldr	r0, [pc, #24]	; (80005b0 <main+0x4c>)
 8000598:	f001 ffbc 	bl	8002514 <Flash_Write_Data>
  Flash_Read_Data(0x08020000, rx);
 800059c:	4905      	ldr	r1, [pc, #20]	; (80005b4 <main+0x50>)
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <main+0x4c>)
 80005a0:	f002 f824 	bl	80025ec <Flash_Read_Data>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <main+0x40>
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028
 80005ac:	2000003c 	.word	0x2000003c
 80005b0:	08020000 	.word	0x08020000
 80005b4:	200000cc 	.word	0x200000cc

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	; 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 f854 	bl	8002674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b28      	ldr	r3, [pc, #160]	; (8000684 <SystemClock_Config+0xcc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a27      	ldr	r2, [pc, #156]	; (8000684 <SystemClock_Config+0xcc>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b25      	ldr	r3, [pc, #148]	; (8000684 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b22      	ldr	r3, [pc, #136]	; (8000688 <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000604:	4a20      	ldr	r2, [pc, #128]	; (8000688 <SystemClock_Config+0xd0>)
 8000606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000630:	2354      	movs	r3, #84	; 0x54
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000638:	2307      	movs	r3, #7
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f000 ffbd 	bl	80015c0 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800064c:	f000 f8d2 	bl	80007f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2102      	movs	r1, #2
 800066c:	4618      	mov	r0, r3
 800066e:	f001 fa1f 	bl	8001ab0 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000678:	f000 f8bc 	bl	80007f4 <Error_Handler>
  }
}
 800067c:	bf00      	nop
 800067e:	3750      	adds	r7, #80	; 0x50
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000690:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_SPI2_Init+0x64>)
 8000692:	4a18      	ldr	r2, [pc, #96]	; (80006f4 <MX_SPI2_Init+0x68>)
 8000694:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_SPI2_Init+0x64>)
 8000698:	f44f 7282 	mov.w	r2, #260	; 0x104
 800069c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006c0:	2210      	movs	r2, #16
 80006c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006d8:	220a      	movs	r2, #10
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006de:	f001 fbaf 	bl	8001e40 <HAL_SPI_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80006e8:	f000 f884 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000054 	.word	0x20000054
 80006f4:	40003800 	.word	0x40003800

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <MX_GPIO_Init+0xf0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a34      	ldr	r2, [pc, #208]	; (80007e8 <MX_GPIO_Init+0xf0>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <MX_GPIO_Init+0xf0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <MX_GPIO_Init+0xf0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a2d      	ldr	r2, [pc, #180]	; (80007e8 <MX_GPIO_Init+0xf0>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <MX_GPIO_Init+0xf0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <MX_GPIO_Init+0xf0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a26      	ldr	r2, [pc, #152]	; (80007e8 <MX_GPIO_Init+0xf0>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <MX_GPIO_Init+0xf0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <MX_GPIO_Init+0xf0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a1f      	ldr	r2, [pc, #124]	; (80007e8 <MX_GPIO_Init+0xf0>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_GPIO_Init+0xf0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2130      	movs	r1, #48	; 0x30
 8000782:	481a      	ldr	r0, [pc, #104]	; (80007ec <MX_GPIO_Init+0xf4>)
 8000784:	f000 ff02 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	4814      	ldr	r0, [pc, #80]	; (80007f0 <MX_GPIO_Init+0xf8>)
 80007a0:	f000 fd70 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007a4:	230c      	movs	r3, #12
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007b4:	2307      	movs	r3, #7
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	480b      	ldr	r0, [pc, #44]	; (80007ec <MX_GPIO_Init+0xf4>)
 80007c0:	f000 fd60 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 80007c4:	2330      	movs	r3, #48	; 0x30
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_GPIO_Init+0xf4>)
 80007dc:	f000 fd52 	bl	8001284 <HAL_GPIO_Init>

}
 80007e0:	bf00      	nop
 80007e2:	3728      	adds	r7, #40	; 0x28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020000 	.word	0x40020000
 80007f0:	40020800 	.word	0x40020800

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	4a0f      	ldr	r2, [pc, #60]	; (800084c <HAL_MspInit+0x4c>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000814:	6453      	str	r3, [r2, #68]	; 0x44
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a08      	ldr	r2, [pc, #32]	; (800084c <HAL_MspInit+0x4c>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800083e:	2007      	movs	r0, #7
 8000840:	f000 f9f8 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800

08000850 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a28      	ldr	r2, [pc, #160]	; (8000910 <HAL_SPI_MspInit+0xc0>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d14a      	bne.n	8000908 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b27      	ldr	r3, [pc, #156]	; (8000914 <HAL_SPI_MspInit+0xc4>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	4a26      	ldr	r2, [pc, #152]	; (8000914 <HAL_SPI_MspInit+0xc4>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000880:	6413      	str	r3, [r2, #64]	; 0x40
 8000882:	4b24      	ldr	r3, [pc, #144]	; (8000914 <HAL_SPI_MspInit+0xc4>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b20      	ldr	r3, [pc, #128]	; (8000914 <HAL_SPI_MspInit+0xc4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a1f      	ldr	r2, [pc, #124]	; (8000914 <HAL_SPI_MspInit+0xc4>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <HAL_SPI_MspInit+0xc4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <HAL_SPI_MspInit+0xc4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a18      	ldr	r2, [pc, #96]	; (8000914 <HAL_SPI_MspInit+0xc4>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <HAL_SPI_MspInit+0xc4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008c6:	230c      	movs	r3, #12
 80008c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d6:	2305      	movs	r3, #5
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <HAL_SPI_MspInit+0xc8>)
 80008e2:	f000 fccf 	bl	8001284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f8:	2305      	movs	r3, #5
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	4806      	ldr	r0, [pc, #24]	; (800091c <HAL_SPI_MspInit+0xcc>)
 8000904:	f000 fcbe 	bl	8001284 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000908:	bf00      	nop
 800090a:	3728      	adds	r7, #40	; 0x28
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40003800 	.word	0x40003800
 8000914:	40023800 	.word	0x40023800
 8000918:	40020800 	.word	0x40020800
 800091c:	40020400 	.word	0x40020400

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <NMI_Handler+0x4>

08000926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <HardFault_Handler+0x4>

0800092c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <MemManage_Handler+0x4>

08000932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <BusFault_Handler+0x4>

08000938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <UsageFault_Handler+0x4>

0800093e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096c:	f000 f890 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}

08000974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <SystemInit+0x20>)
 800097a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <SystemInit+0x20>)
 8000980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800099c:	480d      	ldr	r0, [pc, #52]	; (80009d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800099e:	490e      	ldr	r1, [pc, #56]	; (80009d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009a0:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009b4:	4c0b      	ldr	r4, [pc, #44]	; (80009e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009c2:	f7ff ffd7 	bl	8000974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009c6:	f001 fe31 	bl	800262c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ca:	f7ff fdcb 	bl	8000564 <main>
  bx  lr    
 80009ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009dc:	080026bc 	.word	0x080026bc
  ldr r2, =_sbss
 80009e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009e4:	20000108 	.word	0x20000108

080009e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC_IRQHandler>
	...

080009ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <HAL_Init+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <HAL_Init+0x40>)
 80009f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <HAL_Init+0x40>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <HAL_Init+0x40>)
 8000a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_Init+0x40>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_Init+0x40>)
 8000a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 f90d 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f000 f808 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a20:	f7ff feee 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023c00 	.word	0x40023c00

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_InitTick+0x54>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0x58>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f917 	bl	8000c82 <HAL_SYSTICK_Config>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00e      	b.n	8000a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d80a      	bhi.n	8000a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f000 f8ed 	bl	8000c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a70:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <HAL_InitTick+0x5c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000004 	.word	0x20000004

08000a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x24>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_IncTick+0x24>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	200000e4 	.word	0x200000e4

08000ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_GetTick+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	200000e4 	.word	0x200000e4

08000ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b02:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <__NVIC_GetPriorityGrouping+0x18>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	f003 0307 	and.w	r3, r3, #7
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	; (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	; (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	; 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	; 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c00:	d301      	bcc.n	8000c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00f      	b.n	8000c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <SysTick_Config+0x40>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0e:	210f      	movs	r1, #15
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f7ff ff8e 	bl	8000b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <SysTick_Config+0x40>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1e:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <SysTick_Config+0x40>)
 8000c20:	2207      	movs	r2, #7
 8000c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	e000e010 	.word	0xe000e010

08000c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff47 	bl	8000ad0 <__NVIC_SetPriorityGrouping>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5c:	f7ff ff5c 	bl	8000b18 <__NVIC_GetPriorityGrouping>
 8000c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f7ff ff8e 	bl	8000b88 <NVIC_EncodePriority>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff5d 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ffb0 	bl	8000bf0 <SysTick_Config>
 8000c90:	4603      	mov	r3, r0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000cae:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <HAL_FLASH_Program+0xa0>)
 8000cb0:	7e1b      	ldrb	r3, [r3, #24]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d101      	bne.n	8000cba <HAL_FLASH_Program+0x1e>
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	e03b      	b.n	8000d32 <HAL_FLASH_Program+0x96>
 8000cba:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <HAL_FLASH_Program+0xa0>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000cc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cc4:	f000 f87c 	bl	8000dc0 <FLASH_WaitForLastOperation>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000ccc:	7dfb      	ldrb	r3, [r7, #23]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d12b      	bne.n	8000d2a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d105      	bne.n	8000ce4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000cd8:	783b      	ldrb	r3, [r7, #0]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	68b8      	ldr	r0, [r7, #8]
 8000cde:	f000 f927 	bl	8000f30 <FLASH_Program_Byte>
 8000ce2:	e016      	b.n	8000d12 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d105      	bne.n	8000cf6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000cea:	883b      	ldrh	r3, [r7, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	68b8      	ldr	r0, [r7, #8]
 8000cf0:	f000 f8fa 	bl	8000ee8 <FLASH_Program_HalfWord>
 8000cf4:	e00d      	b.n	8000d12 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d105      	bne.n	8000d08 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	68b8      	ldr	r0, [r7, #8]
 8000d02:	f000 f8cf 	bl	8000ea4 <FLASH_Program_Word>
 8000d06:	e004      	b.n	8000d12 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d0c:	68b8      	ldr	r0, [r7, #8]
 8000d0e:	f000 f897 	bl	8000e40 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d12:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d16:	f000 f853 	bl	8000dc0 <FLASH_WaitForLastOperation>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_FLASH_Program+0xa4>)
 8000d20:	691b      	ldr	r3, [r3, #16]
 8000d22:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <HAL_FLASH_Program+0xa4>)
 8000d24:	f023 0301 	bic.w	r3, r3, #1
 8000d28:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <HAL_FLASH_Program+0xa0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8000d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200000e8 	.word	0x200000e8
 8000d40:	40023c00 	.word	0x40023c00

08000d44 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_FLASH_Unlock+0x38>)
 8000d50:	691b      	ldr	r3, [r3, #16]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	da0b      	bge.n	8000d6e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_FLASH_Unlock+0x38>)
 8000d58:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <HAL_FLASH_Unlock+0x3c>)
 8000d5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <HAL_FLASH_Unlock+0x38>)
 8000d5e:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <HAL_FLASH_Unlock+0x40>)
 8000d60:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_FLASH_Unlock+0x38>)
 8000d64:	691b      	ldr	r3, [r3, #16]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	da01      	bge.n	8000d6e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	40023c00 	.word	0x40023c00
 8000d80:	45670123 	.word	0x45670123
 8000d84:	cdef89ab 	.word	0xcdef89ab

08000d88 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <HAL_FLASH_Lock+0x1c>)
 8000d8e:	691b      	ldr	r3, [r3, #16]
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <HAL_FLASH_Lock+0x1c>)
 8000d92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d96:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	40023c00 	.word	0x40023c00

08000da8 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <HAL_FLASH_GetError+0x14>)
 8000dae:	69db      	ldr	r3, [r3, #28]
}  
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	200000e8 	.word	0x200000e8

08000dc0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <FLASH_WaitForLastOperation+0x78>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000dd2:	f7ff fe71 	bl	8000ab8 <HAL_GetTick>
 8000dd6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000dd8:	e010      	b.n	8000dfc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de0:	d00c      	beq.n	8000dfc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d007      	beq.n	8000df8 <FLASH_WaitForLastOperation+0x38>
 8000de8:	f7ff fe66 	bl	8000ab8 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d201      	bcs.n	8000dfc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e019      	b.n	8000e30 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <FLASH_WaitForLastOperation+0x7c>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1e8      	bne.n	8000dda <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <FLASH_WaitForLastOperation+0x7c>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d002      	beq.n	8000e1a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <FLASH_WaitForLastOperation+0x7c>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <FLASH_WaitForLastOperation+0x7c>)
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000e26:	f000 f8a5 	bl	8000f74 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e000      	b.n	8000e30 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
  
}  
 8000e30:	4618      	mov	r0, r3
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200000e8 	.word	0x200000e8
 8000e3c:	40023c00 	.word	0x40023c00

08000e40 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <FLASH_Program_DoubleWord+0x60>)
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	4a13      	ldr	r2, [pc, #76]	; (8000ea0 <FLASH_Program_DoubleWord+0x60>)
 8000e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <FLASH_Program_DoubleWord+0x60>)
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	4a10      	ldr	r2, [pc, #64]	; (8000ea0 <FLASH_Program_DoubleWord+0x60>)
 8000e5e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000e62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <FLASH_Program_DoubleWord+0x60>)
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <FLASH_Program_DoubleWord+0x60>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000e76:	f3bf 8f6f 	isb	sy
}
 8000e7a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000e7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e80:	f04f 0200 	mov.w	r2, #0
 8000e84:	f04f 0300 	mov.w	r3, #0
 8000e88:	000a      	movs	r2, r1
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	68f9      	ldr	r1, [r7, #12]
 8000e8e:	3104      	adds	r1, #4
 8000e90:	4613      	mov	r3, r2
 8000e92:	600b      	str	r3, [r1, #0]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	40023c00 	.word	0x40023c00

08000ea4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <FLASH_Program_Word+0x40>)
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	4a0c      	ldr	r2, [pc, #48]	; (8000ee4 <FLASH_Program_Word+0x40>)
 8000eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000eb8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <FLASH_Program_Word+0x40>)
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	4a09      	ldr	r2, [pc, #36]	; (8000ee4 <FLASH_Program_Word+0x40>)
 8000ec0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <FLASH_Program_Word+0x40>)
 8000ec8:	691b      	ldr	r3, [r3, #16]
 8000eca:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <FLASH_Program_Word+0x40>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	601a      	str	r2, [r3, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	40023c00 	.word	0x40023c00

08000ee8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <FLASH_Program_HalfWord+0x44>)
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	4a0c      	ldr	r2, [pc, #48]	; (8000f2c <FLASH_Program_HalfWord+0x44>)
 8000efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000efe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <FLASH_Program_HalfWord+0x44>)
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <FLASH_Program_HalfWord+0x44>)
 8000f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <FLASH_Program_HalfWord+0x44>)
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <FLASH_Program_HalfWord+0x44>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	887a      	ldrh	r2, [r7, #2]
 8000f1c:	801a      	strh	r2, [r3, #0]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40023c00 	.word	0x40023c00

08000f30 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <FLASH_Program_Byte+0x40>)
 8000f3e:	691b      	ldr	r3, [r3, #16]
 8000f40:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <FLASH_Program_Byte+0x40>)
 8000f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <FLASH_Program_Byte+0x40>)
 8000f4a:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <FLASH_Program_Byte+0x40>)
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <FLASH_Program_Byte+0x40>)
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <FLASH_Program_Byte+0x40>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	78fa      	ldrb	r2, [r7, #3]
 8000f60:	701a      	strb	r2, [r3, #0]
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40023c00 	.word	0x40023c00

08000f74 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000f78:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <FLASH_SetErrorCode+0xc4>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	f003 0310 	and.w	r3, r3, #16
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d008      	beq.n	8000f96 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000f84:	4b2d      	ldr	r3, [pc, #180]	; (800103c <FLASH_SetErrorCode+0xc8>)
 8000f86:	69db      	ldr	r3, [r3, #28]
 8000f88:	f043 0310 	orr.w	r3, r3, #16
 8000f8c:	4a2b      	ldr	r2, [pc, #172]	; (800103c <FLASH_SetErrorCode+0xc8>)
 8000f8e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000f90:	4b29      	ldr	r3, [pc, #164]	; (8001038 <FLASH_SetErrorCode+0xc4>)
 8000f92:	2210      	movs	r2, #16
 8000f94:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000f96:	4b28      	ldr	r3, [pc, #160]	; (8001038 <FLASH_SetErrorCode+0xc4>)
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	f003 0320 	and.w	r3, r3, #32
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d008      	beq.n	8000fb4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000fa2:	4b26      	ldr	r3, [pc, #152]	; (800103c <FLASH_SetErrorCode+0xc8>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f043 0308 	orr.w	r3, r3, #8
 8000faa:	4a24      	ldr	r2, [pc, #144]	; (800103c <FLASH_SetErrorCode+0xc8>)
 8000fac:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000fae:	4b22      	ldr	r3, [pc, #136]	; (8001038 <FLASH_SetErrorCode+0xc4>)
 8000fb0:	2220      	movs	r2, #32
 8000fb2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <FLASH_SetErrorCode+0xc4>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d008      	beq.n	8000fd2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <FLASH_SetErrorCode+0xc8>)
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	4a1c      	ldr	r2, [pc, #112]	; (800103c <FLASH_SetErrorCode+0xc8>)
 8000fca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <FLASH_SetErrorCode+0xc4>)
 8000fce:	2240      	movs	r2, #64	; 0x40
 8000fd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <FLASH_SetErrorCode+0xc4>)
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d008      	beq.n	8000ff0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <FLASH_SetErrorCode+0xc8>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f043 0302 	orr.w	r3, r3, #2
 8000fe6:	4a15      	ldr	r2, [pc, #84]	; (800103c <FLASH_SetErrorCode+0xc8>)
 8000fe8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <FLASH_SetErrorCode+0xc4>)
 8000fec:	2280      	movs	r2, #128	; 0x80
 8000fee:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <FLASH_SetErrorCode+0xc4>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d009      	beq.n	8001010 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <FLASH_SetErrorCode+0xc8>)
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <FLASH_SetErrorCode+0xc8>)
 8001006:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <FLASH_SetErrorCode+0xc4>)
 800100a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800100e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <FLASH_SetErrorCode+0xc4>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d008      	beq.n	800102e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <FLASH_SetErrorCode+0xc8>)
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	f043 0320 	orr.w	r3, r3, #32
 8001024:	4a05      	ldr	r2, [pc, #20]	; (800103c <FLASH_SetErrorCode+0xc8>)
 8001026:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <FLASH_SetErrorCode+0xc4>)
 800102a:	2202      	movs	r2, #2
 800102c:	60da      	str	r2, [r3, #12]
  }
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	40023c00 	.word	0x40023c00
 800103c:	200000e8 	.word	0x200000e8

08001040 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001052:	4b31      	ldr	r3, [pc, #196]	; (8001118 <HAL_FLASHEx_Erase+0xd8>)
 8001054:	7e1b      	ldrb	r3, [r3, #24]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d101      	bne.n	800105e <HAL_FLASHEx_Erase+0x1e>
 800105a:	2302      	movs	r3, #2
 800105c:	e058      	b.n	8001110 <HAL_FLASHEx_Erase+0xd0>
 800105e:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <HAL_FLASHEx_Erase+0xd8>)
 8001060:	2201      	movs	r2, #1
 8001062:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001064:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001068:	f7ff feaa 	bl	8000dc0 <FLASH_WaitForLastOperation>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d148      	bne.n	8001108 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d115      	bne.n	80010b2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	4619      	mov	r1, r3
 8001092:	4610      	mov	r0, r2
 8001094:	f000 f844 	bl	8001120 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001098:	f24c 3050 	movw	r0, #50000	; 0xc350
 800109c:	f7ff fe90 	bl	8000dc0 <FLASH_WaitForLastOperation>
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <HAL_FLASHEx_Erase+0xdc>)
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	4a1c      	ldr	r2, [pc, #112]	; (800111c <HAL_FLASHEx_Erase+0xdc>)
 80010aa:	f023 0304 	bic.w	r3, r3, #4
 80010ae:	6113      	str	r3, [r2, #16]
 80010b0:	e028      	b.n	8001104 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	e01c      	b.n	80010f4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	4619      	mov	r1, r3
 80010c2:	68b8      	ldr	r0, [r7, #8]
 80010c4:	f000 f850 	bl	8001168 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010cc:	f7ff fe78 	bl	8000dc0 <FLASH_WaitForLastOperation>
 80010d0:	4603      	mov	r3, r0
 80010d2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <HAL_FLASHEx_Erase+0xdc>)
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	4a10      	ldr	r2, [pc, #64]	; (800111c <HAL_FLASHEx_Erase+0xdc>)
 80010da:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80010de:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	601a      	str	r2, [r3, #0]
          break;
 80010ec:	e00a      	b.n	8001104 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	3301      	adds	r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	4413      	add	r3, r2
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	429a      	cmp	r2, r3
 8001102:	d3da      	bcc.n	80010ba <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001104:	f000 f878 	bl	80011f8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <HAL_FLASHEx_Erase+0xd8>)
 800110a:	2200      	movs	r2, #0
 800110c:	761a      	strb	r2, [r3, #24]

  return status;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200000e8 	.word	0x200000e8
 800111c:	40023c00 	.word	0x40023c00

08001120 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <FLASH_MassErase+0x44>)
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <FLASH_MassErase+0x44>)
 8001132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001136:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <FLASH_MassErase+0x44>)
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	4a09      	ldr	r2, [pc, #36]	; (8001164 <FLASH_MassErase+0x44>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <FLASH_MassErase+0x44>)
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	4313      	orrs	r3, r2
 800114e:	4a05      	ldr	r2, [pc, #20]	; (8001164 <FLASH_MassErase+0x44>)
 8001150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001154:	6113      	str	r3, [r2, #16]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40023c00 	.word	0x40023c00

08001168 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d102      	bne.n	8001184 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	e010      	b.n	80011a6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d103      	bne.n	8001192 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800118a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	e009      	b.n	80011a6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d103      	bne.n	80011a0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	e002      	b.n	80011a6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80011a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <FLASH_Erase_Sector+0x8c>)
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <FLASH_Erase_Sector+0x8c>)
 80011ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <FLASH_Erase_Sector+0x8c>)
 80011b4:	691a      	ldr	r2, [r3, #16]
 80011b6:	490f      	ldr	r1, [pc, #60]	; (80011f4 <FLASH_Erase_Sector+0x8c>)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <FLASH_Erase_Sector+0x8c>)
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	4a0c      	ldr	r2, [pc, #48]	; (80011f4 <FLASH_Erase_Sector+0x8c>)
 80011c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80011c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <FLASH_Erase_Sector+0x8c>)
 80011cc:	691a      	ldr	r2, [r3, #16]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <FLASH_Erase_Sector+0x8c>)
 80011d6:	f043 0302 	orr.w	r3, r3, #2
 80011da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <FLASH_Erase_Sector+0x8c>)
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <FLASH_Erase_Sector+0x8c>)
 80011e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e6:	6113      	str	r3, [r2, #16]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	40023c00 	.word	0x40023c00

080011f8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80011fc:	4b20      	ldr	r3, [pc, #128]	; (8001280 <FLASH_FlushCaches+0x88>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001204:	2b00      	cmp	r3, #0
 8001206:	d017      	beq.n	8001238 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <FLASH_FlushCaches+0x88>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <FLASH_FlushCaches+0x88>)
 800120e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001212:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <FLASH_FlushCaches+0x88>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a19      	ldr	r2, [pc, #100]	; (8001280 <FLASH_FlushCaches+0x88>)
 800121a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <FLASH_FlushCaches+0x88>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a16      	ldr	r2, [pc, #88]	; (8001280 <FLASH_FlushCaches+0x88>)
 8001226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800122a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <FLASH_FlushCaches+0x88>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a13      	ldr	r2, [pc, #76]	; (8001280 <FLASH_FlushCaches+0x88>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001236:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <FLASH_FlushCaches+0x88>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001240:	2b00      	cmp	r3, #0
 8001242:	d017      	beq.n	8001274 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <FLASH_FlushCaches+0x88>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <FLASH_FlushCaches+0x88>)
 800124a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800124e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <FLASH_FlushCaches+0x88>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <FLASH_FlushCaches+0x88>)
 8001256:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <FLASH_FlushCaches+0x88>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a07      	ldr	r2, [pc, #28]	; (8001280 <FLASH_FlushCaches+0x88>)
 8001262:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001266:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <FLASH_FlushCaches+0x88>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a04      	ldr	r2, [pc, #16]	; (8001280 <FLASH_FlushCaches+0x88>)
 800126e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001272:	6013      	str	r3, [r2, #0]
  }
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40023c00 	.word	0x40023c00

08001284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
 800129e:	e159      	b.n	8001554 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012a0:	2201      	movs	r2, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	f040 8148 	bne.w	800154e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d005      	beq.n	80012d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d130      	bne.n	8001338 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	2203      	movs	r2, #3
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800130c:	2201      	movs	r2, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	f003 0201 	and.w	r2, r3, #1
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b03      	cmp	r3, #3
 8001342:	d017      	beq.n	8001374 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d123      	bne.n	80013c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	08da      	lsrs	r2, r3, #3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3208      	adds	r2, #8
 8001388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	220f      	movs	r2, #15
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	08da      	lsrs	r2, r3, #3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3208      	adds	r2, #8
 80013c2:	69b9      	ldr	r1, [r7, #24]
 80013c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0203 	and.w	r2, r3, #3
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80a2 	beq.w	800154e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b57      	ldr	r3, [pc, #348]	; (800156c <HAL_GPIO_Init+0x2e8>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	4a56      	ldr	r2, [pc, #344]	; (800156c <HAL_GPIO_Init+0x2e8>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001418:	6453      	str	r3, [r2, #68]	; 0x44
 800141a:	4b54      	ldr	r3, [pc, #336]	; (800156c <HAL_GPIO_Init+0x2e8>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001426:	4a52      	ldr	r2, [pc, #328]	; (8001570 <HAL_GPIO_Init+0x2ec>)
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3302      	adds	r3, #2
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	220f      	movs	r2, #15
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a49      	ldr	r2, [pc, #292]	; (8001574 <HAL_GPIO_Init+0x2f0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d019      	beq.n	8001486 <HAL_GPIO_Init+0x202>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a48      	ldr	r2, [pc, #288]	; (8001578 <HAL_GPIO_Init+0x2f4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d013      	beq.n	8001482 <HAL_GPIO_Init+0x1fe>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a47      	ldr	r2, [pc, #284]	; (800157c <HAL_GPIO_Init+0x2f8>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d00d      	beq.n	800147e <HAL_GPIO_Init+0x1fa>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a46      	ldr	r2, [pc, #280]	; (8001580 <HAL_GPIO_Init+0x2fc>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d007      	beq.n	800147a <HAL_GPIO_Init+0x1f6>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a45      	ldr	r2, [pc, #276]	; (8001584 <HAL_GPIO_Init+0x300>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d101      	bne.n	8001476 <HAL_GPIO_Init+0x1f2>
 8001472:	2304      	movs	r3, #4
 8001474:	e008      	b.n	8001488 <HAL_GPIO_Init+0x204>
 8001476:	2307      	movs	r3, #7
 8001478:	e006      	b.n	8001488 <HAL_GPIO_Init+0x204>
 800147a:	2303      	movs	r3, #3
 800147c:	e004      	b.n	8001488 <HAL_GPIO_Init+0x204>
 800147e:	2302      	movs	r3, #2
 8001480:	e002      	b.n	8001488 <HAL_GPIO_Init+0x204>
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <HAL_GPIO_Init+0x204>
 8001486:	2300      	movs	r3, #0
 8001488:	69fa      	ldr	r2, [r7, #28]
 800148a:	f002 0203 	and.w	r2, r2, #3
 800148e:	0092      	lsls	r2, r2, #2
 8001490:	4093      	lsls	r3, r2
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001498:	4935      	ldr	r1, [pc, #212]	; (8001570 <HAL_GPIO_Init+0x2ec>)
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	089b      	lsrs	r3, r3, #2
 800149e:	3302      	adds	r3, #2
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a6:	4b38      	ldr	r3, [pc, #224]	; (8001588 <HAL_GPIO_Init+0x304>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ca:	4a2f      	ldr	r2, [pc, #188]	; (8001588 <HAL_GPIO_Init+0x304>)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014d0:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <HAL_GPIO_Init+0x304>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014f4:	4a24      	ldr	r2, [pc, #144]	; (8001588 <HAL_GPIO_Init+0x304>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <HAL_GPIO_Init+0x304>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800151e:	4a1a      	ldr	r2, [pc, #104]	; (8001588 <HAL_GPIO_Init+0x304>)
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001524:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_GPIO_Init+0x304>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001548:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <HAL_GPIO_Init+0x304>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3301      	adds	r3, #1
 8001552:	61fb      	str	r3, [r7, #28]
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	2b0f      	cmp	r3, #15
 8001558:	f67f aea2 	bls.w	80012a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	40013800 	.word	0x40013800
 8001574:	40020000 	.word	0x40020000
 8001578:	40020400 	.word	0x40020400
 800157c:	40020800 	.word	0x40020800
 8001580:	40020c00 	.word	0x40020c00
 8001584:	40021000 	.word	0x40021000
 8001588:	40013c00 	.word	0x40013c00

0800158c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
 8001598:	4613      	mov	r3, r2
 800159a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800159c:	787b      	ldrb	r3, [r7, #1]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a2:	887a      	ldrh	r2, [r7, #2]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015a8:	e003      	b.n	80015b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	041a      	lsls	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	619a      	str	r2, [r3, #24]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e264      	b.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d075      	beq.n	80016ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015de:	4ba3      	ldr	r3, [pc, #652]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d00c      	beq.n	8001604 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ea:	4ba0      	ldr	r3, [pc, #640]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d112      	bne.n	800161c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015f6:	4b9d      	ldr	r3, [pc, #628]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001602:	d10b      	bne.n	800161c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001604:	4b99      	ldr	r3, [pc, #612]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d05b      	beq.n	80016c8 <HAL_RCC_OscConfig+0x108>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d157      	bne.n	80016c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e23f      	b.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001624:	d106      	bne.n	8001634 <HAL_RCC_OscConfig+0x74>
 8001626:	4b91      	ldr	r3, [pc, #580]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a90      	ldr	r2, [pc, #576]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 800162c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e01d      	b.n	8001670 <HAL_RCC_OscConfig+0xb0>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x98>
 800163e:	4b8b      	ldr	r3, [pc, #556]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a8a      	ldr	r2, [pc, #552]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 8001644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	4b88      	ldr	r3, [pc, #544]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a87      	ldr	r2, [pc, #540]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 8001650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e00b      	b.n	8001670 <HAL_RCC_OscConfig+0xb0>
 8001658:	4b84      	ldr	r3, [pc, #528]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a83      	ldr	r2, [pc, #524]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 800165e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b81      	ldr	r3, [pc, #516]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a80      	ldr	r2, [pc, #512]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 800166a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800166e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d013      	beq.n	80016a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fa1e 	bl	8000ab8 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001680:	f7ff fa1a 	bl	8000ab8 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	; 0x64
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e204      	b.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	4b76      	ldr	r3, [pc, #472]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0xc0>
 800169e:	e014      	b.n	80016ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fa0a 	bl	8000ab8 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a8:	f7ff fa06 	bl	8000ab8 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b64      	cmp	r3, #100	; 0x64
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e1f0      	b.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ba:	4b6c      	ldr	r3, [pc, #432]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0xe8>
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d063      	beq.n	800179e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016d6:	4b65      	ldr	r3, [pc, #404]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00b      	beq.n	80016fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016e2:	4b62      	ldr	r3, [pc, #392]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d11c      	bne.n	8001728 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ee:	4b5f      	ldr	r3, [pc, #380]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d116      	bne.n	8001728 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fa:	4b5c      	ldr	r3, [pc, #368]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d005      	beq.n	8001712 <HAL_RCC_OscConfig+0x152>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d001      	beq.n	8001712 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e1c4      	b.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001712:	4b56      	ldr	r3, [pc, #344]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	4952      	ldr	r1, [pc, #328]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 8001722:	4313      	orrs	r3, r2
 8001724:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001726:	e03a      	b.n	800179e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d020      	beq.n	8001772 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001730:	4b4f      	ldr	r3, [pc, #316]	; (8001870 <HAL_RCC_OscConfig+0x2b0>)
 8001732:	2201      	movs	r2, #1
 8001734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001736:	f7ff f9bf 	bl	8000ab8 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800173e:	f7ff f9bb 	bl	8000ab8 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e1a5      	b.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001750:	4b46      	ldr	r3, [pc, #280]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175c:	4b43      	ldr	r3, [pc, #268]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	4940      	ldr	r1, [pc, #256]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 800176c:	4313      	orrs	r3, r2
 800176e:	600b      	str	r3, [r1, #0]
 8001770:	e015      	b.n	800179e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001772:	4b3f      	ldr	r3, [pc, #252]	; (8001870 <HAL_RCC_OscConfig+0x2b0>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7ff f99e 	bl	8000ab8 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001780:	f7ff f99a 	bl	8000ab8 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e184      	b.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001792:	4b36      	ldr	r3, [pc, #216]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d030      	beq.n	800180c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d016      	beq.n	80017e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b2:	4b30      	ldr	r3, [pc, #192]	; (8001874 <HAL_RCC_OscConfig+0x2b4>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b8:	f7ff f97e 	bl	8000ab8 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c0:	f7ff f97a 	bl	8000ab8 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e164      	b.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 80017d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x200>
 80017de:	e015      	b.n	800180c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e0:	4b24      	ldr	r3, [pc, #144]	; (8001874 <HAL_RCC_OscConfig+0x2b4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e6:	f7ff f967 	bl	8000ab8 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ee:	f7ff f963 	bl	8000ab8 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e14d      	b.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 8001802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f0      	bne.n	80017ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 80a0 	beq.w	800195a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10f      	bne.n	800184a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	4a0e      	ldr	r2, [pc, #56]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001838:	6413      	str	r3, [r2, #64]	; 0x40
 800183a:	4b0c      	ldr	r3, [pc, #48]	; (800186c <HAL_RCC_OscConfig+0x2ac>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001846:	2301      	movs	r3, #1
 8001848:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_RCC_OscConfig+0x2b8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001852:	2b00      	cmp	r3, #0
 8001854:	d121      	bne.n	800189a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <HAL_RCC_OscConfig+0x2b8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a07      	ldr	r2, [pc, #28]	; (8001878 <HAL_RCC_OscConfig+0x2b8>)
 800185c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001862:	f7ff f929 	bl	8000ab8 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001868:	e011      	b.n	800188e <HAL_RCC_OscConfig+0x2ce>
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	42470000 	.word	0x42470000
 8001874:	42470e80 	.word	0x42470e80
 8001878:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800187c:	f7ff f91c 	bl	8000ab8 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e106      	b.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188e:	4b85      	ldr	r3, [pc, #532]	; (8001aa4 <HAL_RCC_OscConfig+0x4e4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d106      	bne.n	80018b0 <HAL_RCC_OscConfig+0x2f0>
 80018a2:	4b81      	ldr	r3, [pc, #516]	; (8001aa8 <HAL_RCC_OscConfig+0x4e8>)
 80018a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a6:	4a80      	ldr	r2, [pc, #512]	; (8001aa8 <HAL_RCC_OscConfig+0x4e8>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6713      	str	r3, [r2, #112]	; 0x70
 80018ae:	e01c      	b.n	80018ea <HAL_RCC_OscConfig+0x32a>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b05      	cmp	r3, #5
 80018b6:	d10c      	bne.n	80018d2 <HAL_RCC_OscConfig+0x312>
 80018b8:	4b7b      	ldr	r3, [pc, #492]	; (8001aa8 <HAL_RCC_OscConfig+0x4e8>)
 80018ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018bc:	4a7a      	ldr	r2, [pc, #488]	; (8001aa8 <HAL_RCC_OscConfig+0x4e8>)
 80018be:	f043 0304 	orr.w	r3, r3, #4
 80018c2:	6713      	str	r3, [r2, #112]	; 0x70
 80018c4:	4b78      	ldr	r3, [pc, #480]	; (8001aa8 <HAL_RCC_OscConfig+0x4e8>)
 80018c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c8:	4a77      	ldr	r2, [pc, #476]	; (8001aa8 <HAL_RCC_OscConfig+0x4e8>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6713      	str	r3, [r2, #112]	; 0x70
 80018d0:	e00b      	b.n	80018ea <HAL_RCC_OscConfig+0x32a>
 80018d2:	4b75      	ldr	r3, [pc, #468]	; (8001aa8 <HAL_RCC_OscConfig+0x4e8>)
 80018d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d6:	4a74      	ldr	r2, [pc, #464]	; (8001aa8 <HAL_RCC_OscConfig+0x4e8>)
 80018d8:	f023 0301 	bic.w	r3, r3, #1
 80018dc:	6713      	str	r3, [r2, #112]	; 0x70
 80018de:	4b72      	ldr	r3, [pc, #456]	; (8001aa8 <HAL_RCC_OscConfig+0x4e8>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e2:	4a71      	ldr	r2, [pc, #452]	; (8001aa8 <HAL_RCC_OscConfig+0x4e8>)
 80018e4:	f023 0304 	bic.w	r3, r3, #4
 80018e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d015      	beq.n	800191e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f2:	f7ff f8e1 	bl	8000ab8 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f8:	e00a      	b.n	8001910 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f7ff f8dd 	bl	8000ab8 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	f241 3288 	movw	r2, #5000	; 0x1388
 8001908:	4293      	cmp	r3, r2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e0c5      	b.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001910:	4b65      	ldr	r3, [pc, #404]	; (8001aa8 <HAL_RCC_OscConfig+0x4e8>)
 8001912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0ee      	beq.n	80018fa <HAL_RCC_OscConfig+0x33a>
 800191c:	e014      	b.n	8001948 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191e:	f7ff f8cb 	bl	8000ab8 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001924:	e00a      	b.n	800193c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001926:	f7ff f8c7 	bl	8000ab8 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	f241 3288 	movw	r2, #5000	; 0x1388
 8001934:	4293      	cmp	r3, r2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e0af      	b.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193c:	4b5a      	ldr	r3, [pc, #360]	; (8001aa8 <HAL_RCC_OscConfig+0x4e8>)
 800193e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1ee      	bne.n	8001926 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001948:	7dfb      	ldrb	r3, [r7, #23]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d105      	bne.n	800195a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194e:	4b56      	ldr	r3, [pc, #344]	; (8001aa8 <HAL_RCC_OscConfig+0x4e8>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	4a55      	ldr	r2, [pc, #340]	; (8001aa8 <HAL_RCC_OscConfig+0x4e8>)
 8001954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001958:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 809b 	beq.w	8001a9a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001964:	4b50      	ldr	r3, [pc, #320]	; (8001aa8 <HAL_RCC_OscConfig+0x4e8>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b08      	cmp	r3, #8
 800196e:	d05c      	beq.n	8001a2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d141      	bne.n	80019fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001978:	4b4c      	ldr	r3, [pc, #304]	; (8001aac <HAL_RCC_OscConfig+0x4ec>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197e:	f7ff f89b 	bl	8000ab8 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001986:	f7ff f897 	bl	8000ab8 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e081      	b.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001998:	4b43      	ldr	r3, [pc, #268]	; (8001aa8 <HAL_RCC_OscConfig+0x4e8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f0      	bne.n	8001986 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69da      	ldr	r2, [r3, #28]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	019b      	lsls	r3, r3, #6
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ba:	085b      	lsrs	r3, r3, #1
 80019bc:	3b01      	subs	r3, #1
 80019be:	041b      	lsls	r3, r3, #16
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c6:	061b      	lsls	r3, r3, #24
 80019c8:	4937      	ldr	r1, [pc, #220]	; (8001aa8 <HAL_RCC_OscConfig+0x4e8>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ce:	4b37      	ldr	r3, [pc, #220]	; (8001aac <HAL_RCC_OscConfig+0x4ec>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff f870 	bl	8000ab8 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff f86c 	bl	8000ab8 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e056      	b.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ee:	4b2e      	ldr	r3, [pc, #184]	; (8001aa8 <HAL_RCC_OscConfig+0x4e8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x41c>
 80019fa:	e04e      	b.n	8001a9a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fc:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <HAL_RCC_OscConfig+0x4ec>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7ff f859 	bl	8000ab8 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0a:	f7ff f855 	bl	8000ab8 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e03f      	b.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1c:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <HAL_RCC_OscConfig+0x4e8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f0      	bne.n	8001a0a <HAL_RCC_OscConfig+0x44a>
 8001a28:	e037      	b.n	8001a9a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d101      	bne.n	8001a36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e032      	b.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a36:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <HAL_RCC_OscConfig+0x4e8>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d028      	beq.n	8001a96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d121      	bne.n	8001a96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d11a      	bne.n	8001a96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a66:	4013      	ands	r3, r2
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a6c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d111      	bne.n	8001a96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	085b      	lsrs	r3, r3, #1
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d001      	beq.n	8001a9a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40007000 	.word	0x40007000
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	42470060 	.word	0x42470060

08001ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0cc      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b68      	ldr	r3, [pc, #416]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d90c      	bls.n	8001aec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b65      	ldr	r3, [pc, #404]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b63      	ldr	r3, [pc, #396]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0b8      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d020      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b04:	4b59      	ldr	r3, [pc, #356]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4a58      	ldr	r2, [pc, #352]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b1c:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4a52      	ldr	r2, [pc, #328]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b28:	4b50      	ldr	r3, [pc, #320]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	494d      	ldr	r1, [pc, #308]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d044      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d107      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d119      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e07f      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d003      	beq.n	8001b6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6e:	4b3f      	ldr	r3, [pc, #252]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d109      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e06f      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7e:	4b3b      	ldr	r3, [pc, #236]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e067      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b8e:	4b37      	ldr	r3, [pc, #220]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f023 0203 	bic.w	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	4934      	ldr	r1, [pc, #208]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba0:	f7fe ff8a 	bl	8000ab8 <HAL_GetTick>
 8001ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba6:	e00a      	b.n	8001bbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba8:	f7fe ff86 	bl	8000ab8 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e04f      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 020c 	and.w	r2, r3, #12
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d1eb      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d20c      	bcs.n	8001bf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e032      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	4916      	ldr	r1, [pc, #88]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d009      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	490e      	ldr	r1, [pc, #56]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c36:	f000 f821 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	490a      	ldr	r1, [pc, #40]	; (8001c70 <HAL_RCC_ClockConfig+0x1c0>)
 8001c48:	5ccb      	ldrb	r3, [r1, r3]
 8001c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4e:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe feea 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	0800269c 	.word	0x0800269c
 8001c74:	20000000 	.word	0x20000000
 8001c78:	20000004 	.word	0x20000004

08001c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c80:	b084      	sub	sp, #16
 8001c82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c94:	4b67      	ldr	r3, [pc, #412]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d00d      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x40>
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	f200 80bd 	bhi.w	8001e20 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d002      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d003      	beq.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cae:	e0b7      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cb0:	4b61      	ldr	r3, [pc, #388]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001cb2:	60bb      	str	r3, [r7, #8]
       break;
 8001cb4:	e0b7      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cb6:	4b61      	ldr	r3, [pc, #388]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001cb8:	60bb      	str	r3, [r7, #8]
      break;
 8001cba:	e0b4      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cbc:	4b5d      	ldr	r3, [pc, #372]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cc4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cc6:	4b5b      	ldr	r3, [pc, #364]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d04d      	beq.n	8001d6e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd2:	4b58      	ldr	r3, [pc, #352]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	099b      	lsrs	r3, r3, #6
 8001cd8:	461a      	mov	r2, r3
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ce2:	f04f 0100 	mov.w	r1, #0
 8001ce6:	ea02 0800 	and.w	r8, r2, r0
 8001cea:	ea03 0901 	and.w	r9, r3, r1
 8001cee:	4640      	mov	r0, r8
 8001cf0:	4649      	mov	r1, r9
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	014b      	lsls	r3, r1, #5
 8001cfc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d00:	0142      	lsls	r2, r0, #5
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	ebb0 0008 	subs.w	r0, r0, r8
 8001d0a:	eb61 0109 	sbc.w	r1, r1, r9
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	018b      	lsls	r3, r1, #6
 8001d18:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d1c:	0182      	lsls	r2, r0, #6
 8001d1e:	1a12      	subs	r2, r2, r0
 8001d20:	eb63 0301 	sbc.w	r3, r3, r1
 8001d24:	f04f 0000 	mov.w	r0, #0
 8001d28:	f04f 0100 	mov.w	r1, #0
 8001d2c:	00d9      	lsls	r1, r3, #3
 8001d2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d32:	00d0      	lsls	r0, r2, #3
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	eb12 0208 	adds.w	r2, r2, r8
 8001d3c:	eb43 0309 	adc.w	r3, r3, r9
 8001d40:	f04f 0000 	mov.w	r0, #0
 8001d44:	f04f 0100 	mov.w	r1, #0
 8001d48:	0259      	lsls	r1, r3, #9
 8001d4a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d4e:	0250      	lsls	r0, r2, #9
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f04f 0300 	mov.w	r3, #0
 8001d60:	f7fe fa40 	bl	80001e4 <__aeabi_uldivmod>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4613      	mov	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	e04a      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	099b      	lsrs	r3, r3, #6
 8001d74:	461a      	mov	r2, r3
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d7e:	f04f 0100 	mov.w	r1, #0
 8001d82:	ea02 0400 	and.w	r4, r2, r0
 8001d86:	ea03 0501 	and.w	r5, r3, r1
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	4629      	mov	r1, r5
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	014b      	lsls	r3, r1, #5
 8001d98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d9c:	0142      	lsls	r2, r0, #5
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	1b00      	subs	r0, r0, r4
 8001da4:	eb61 0105 	sbc.w	r1, r1, r5
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	018b      	lsls	r3, r1, #6
 8001db2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001db6:	0182      	lsls	r2, r0, #6
 8001db8:	1a12      	subs	r2, r2, r0
 8001dba:	eb63 0301 	sbc.w	r3, r3, r1
 8001dbe:	f04f 0000 	mov.w	r0, #0
 8001dc2:	f04f 0100 	mov.w	r1, #0
 8001dc6:	00d9      	lsls	r1, r3, #3
 8001dc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dcc:	00d0      	lsls	r0, r2, #3
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	1912      	adds	r2, r2, r4
 8001dd4:	eb45 0303 	adc.w	r3, r5, r3
 8001dd8:	f04f 0000 	mov.w	r0, #0
 8001ddc:	f04f 0100 	mov.w	r1, #0
 8001de0:	0299      	lsls	r1, r3, #10
 8001de2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001de6:	0290      	lsls	r0, r2, #10
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	461a      	mov	r2, r3
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	f7fe f9f4 	bl	80001e4 <__aeabi_uldivmod>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4613      	mov	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	0c1b      	lsrs	r3, r3, #16
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1c:	60bb      	str	r3, [r7, #8]
      break;
 8001e1e:	e002      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001e22:	60bb      	str	r3, [r7, #8]
      break;
 8001e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e26:	68bb      	ldr	r3, [r7, #8]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800
 8001e38:	00f42400 	.word	0x00f42400
 8001e3c:	007a1200 	.word	0x007a1200

08001e40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e07b      	b.n	8001f4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d108      	bne.n	8001e6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e62:	d009      	beq.n	8001e78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]
 8001e6a:	e005      	b.n	8001e78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d106      	bne.n	8001e98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7fe fcdc 	bl	8000850 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efc:	ea42 0103 	orr.w	r1, r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	0c1b      	lsrs	r3, r3, #16
 8001f16:	f003 0104 	and.w	r1, r3, #4
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	f003 0210 	and.w	r2, r3, #16
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	69da      	ldr	r2, [r3, #28]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b08c      	sub	sp, #48	; 0x30
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f60:	2301      	movs	r3, #1
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_SPI_TransmitReceive+0x26>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e18a      	b.n	800228e <HAL_SPI_TransmitReceive+0x33c>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f80:	f7fe fd9a 	bl	8000ab8 <HAL_GetTick>
 8001f84:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001f96:	887b      	ldrh	r3, [r7, #2]
 8001f98:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d00f      	beq.n	8001fc2 <HAL_SPI_TransmitReceive+0x70>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fa8:	d107      	bne.n	8001fba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d103      	bne.n	8001fba <HAL_SPI_TransmitReceive+0x68>
 8001fb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d003      	beq.n	8001fc2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001fc0:	e15b      	b.n	800227a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_SPI_TransmitReceive+0x82>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <HAL_SPI_TransmitReceive+0x82>
 8001fce:	887b      	ldrh	r3, [r7, #2]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d103      	bne.n	8001fdc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001fda:	e14e      	b.n	800227a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d003      	beq.n	8001ff0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2205      	movs	r2, #5
 8001fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	887a      	ldrh	r2, [r7, #2]
 8002000:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	887a      	ldrh	r2, [r7, #2]
 8002006:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	887a      	ldrh	r2, [r7, #2]
 8002012:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	887a      	ldrh	r2, [r7, #2]
 8002018:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002030:	2b40      	cmp	r3, #64	; 0x40
 8002032:	d007      	beq.n	8002044 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002042:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800204c:	d178      	bne.n	8002140 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <HAL_SPI_TransmitReceive+0x10a>
 8002056:	8b7b      	ldrh	r3, [r7, #26]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d166      	bne.n	800212a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	881a      	ldrh	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	1c9a      	adds	r2, r3, #2
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002076:	b29b      	uxth	r3, r3
 8002078:	3b01      	subs	r3, #1
 800207a:	b29a      	uxth	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002080:	e053      	b.n	800212a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b02      	cmp	r3, #2
 800208e:	d11b      	bne.n	80020c8 <HAL_SPI_TransmitReceive+0x176>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002094:	b29b      	uxth	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d016      	beq.n	80020c8 <HAL_SPI_TransmitReceive+0x176>
 800209a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209c:	2b01      	cmp	r3, #1
 800209e:	d113      	bne.n	80020c8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	881a      	ldrh	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	1c9a      	adds	r2, r3, #2
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3b01      	subs	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d119      	bne.n	800210a <HAL_SPI_TransmitReceive+0x1b8>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020da:	b29b      	uxth	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d014      	beq.n	800210a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ea:	b292      	uxth	r2, r2
 80020ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f2:	1c9a      	adds	r2, r3, #2
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002106:	2301      	movs	r3, #1
 8002108:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800210a:	f7fe fcd5 	bl	8000ab8 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002116:	429a      	cmp	r2, r3
 8002118:	d807      	bhi.n	800212a <HAL_SPI_TransmitReceive+0x1d8>
 800211a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d003      	beq.n	800212a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002128:	e0a7      	b.n	800227a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800212e:	b29b      	uxth	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1a6      	bne.n	8002082 <HAL_SPI_TransmitReceive+0x130>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1a1      	bne.n	8002082 <HAL_SPI_TransmitReceive+0x130>
 800213e:	e07c      	b.n	800223a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <HAL_SPI_TransmitReceive+0x1fc>
 8002148:	8b7b      	ldrh	r3, [r7, #26]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d16b      	bne.n	8002226 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	330c      	adds	r3, #12
 8002158:	7812      	ldrb	r2, [r2, #0]
 800215a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800216a:	b29b      	uxth	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002174:	e057      	b.n	8002226 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b02      	cmp	r3, #2
 8002182:	d11c      	bne.n	80021be <HAL_SPI_TransmitReceive+0x26c>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d017      	beq.n	80021be <HAL_SPI_TransmitReceive+0x26c>
 800218e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002190:	2b01      	cmp	r3, #1
 8002192:	d114      	bne.n	80021be <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	330c      	adds	r3, #12
 800219e:	7812      	ldrb	r2, [r2, #0]
 80021a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d119      	bne.n	8002200 <HAL_SPI_TransmitReceive+0x2ae>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d014      	beq.n	8002200 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021fc:	2301      	movs	r3, #1
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002200:	f7fe fc5a 	bl	8000ab8 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800220c:	429a      	cmp	r2, r3
 800220e:	d803      	bhi.n	8002218 <HAL_SPI_TransmitReceive+0x2c6>
 8002210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002216:	d102      	bne.n	800221e <HAL_SPI_TransmitReceive+0x2cc>
 8002218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800221a:	2b00      	cmp	r3, #0
 800221c:	d103      	bne.n	8002226 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002224:	e029      	b.n	800227a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800222a:	b29b      	uxth	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1a2      	bne.n	8002176 <HAL_SPI_TransmitReceive+0x224>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002234:	b29b      	uxth	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d19d      	bne.n	8002176 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800223a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f8b2 	bl	80023a8 <SPI_EndRxTxTransaction>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d006      	beq.n	8002258 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002256:	e010      	b.n	800227a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10b      	bne.n	8002278 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	e000      	b.n	800227a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002278:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800228a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800228e:	4618      	mov	r0, r3
 8002290:	3730      	adds	r7, #48	; 0x30
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	4613      	mov	r3, r2
 80022a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022a8:	f7fe fc06 	bl	8000ab8 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	4413      	add	r3, r2
 80022b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80022b8:	f7fe fbfe 	bl	8000ab8 <HAL_GetTick>
 80022bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022be:	4b39      	ldr	r3, [pc, #228]	; (80023a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	015b      	lsls	r3, r3, #5
 80022c4:	0d1b      	lsrs	r3, r3, #20
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	fb02 f303 	mul.w	r3, r2, r3
 80022cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022ce:	e054      	b.n	800237a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d6:	d050      	beq.n	800237a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022d8:	f7fe fbee 	bl	8000ab8 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d902      	bls.n	80022ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d13d      	bne.n	800236a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80022fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002306:	d111      	bne.n	800232c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002310:	d004      	beq.n	800231c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231a:	d107      	bne.n	800232c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800232a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002334:	d10f      	bne.n	8002356 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002354:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e017      	b.n	800239a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	3b01      	subs	r3, #1
 8002378:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4013      	ands	r3, r2
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	429a      	cmp	r2, r3
 8002388:	bf0c      	ite	eq
 800238a:	2301      	moveq	r3, #1
 800238c:	2300      	movne	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	429a      	cmp	r2, r3
 8002396:	d19b      	bne.n	80022d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3720      	adds	r7, #32
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000000 	.word	0x20000000

080023a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80023b4:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <SPI_EndRxTxTransaction+0x7c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a1b      	ldr	r2, [pc, #108]	; (8002428 <SPI_EndRxTxTransaction+0x80>)
 80023ba:	fba2 2303 	umull	r2, r3, r2, r3
 80023be:	0d5b      	lsrs	r3, r3, #21
 80023c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023c4:	fb02 f303 	mul.w	r3, r2, r3
 80023c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023d2:	d112      	bne.n	80023fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2200      	movs	r2, #0
 80023dc:	2180      	movs	r1, #128	; 0x80
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f7ff ff5a 	bl	8002298 <SPI_WaitFlagStateUntilTimeout>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d016      	beq.n	8002418 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ee:	f043 0220 	orr.w	r2, r3, #32
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e00f      	b.n	800241a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00a      	beq.n	8002416 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	3b01      	subs	r3, #1
 8002404:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002410:	2b80      	cmp	r3, #128	; 0x80
 8002412:	d0f2      	beq.n	80023fa <SPI_EndRxTxTransaction+0x52>
 8002414:	e000      	b.n	8002418 <SPI_EndRxTxTransaction+0x70>
        break;
 8002416:	bf00      	nop
  }

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000000 	.word	0x20000000
 8002428:	165e9f81 	.word	0x165e9f81

0800242c <GetSector>:
#include "string.h"
#include "stdio.h"


//Flash Address Sector Selection
static uint32_t GetSector(uint32_t Address){
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]

	if((Address < 0x08003FFF) && (Address >=  0x08000000))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a2b      	ldr	r2, [pc, #172]	; (80024e8 <GetSector+0xbc>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d805      	bhi.n	800244c <GetSector+0x20>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002446:	d301      	bcc.n	800244c <GetSector+0x20>
	{
		sector = FLASH_SECTOR_0;
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]
	}
	if((Address <  0x08007FFF) && (Address >=  0x08004000))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a27      	ldr	r2, [pc, #156]	; (80024ec <GetSector+0xc0>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d805      	bhi.n	8002460 <GetSector+0x34>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a26      	ldr	r2, [pc, #152]	; (80024f0 <GetSector+0xc4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d301      	bcc.n	8002460 <GetSector+0x34>
	{
		sector = FLASH_SECTOR_1;
 800245c:	2301      	movs	r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
	}
	if((Address < 0x0800BFFF) && (Address >=  0x08008000))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a24      	ldr	r2, [pc, #144]	; (80024f4 <GetSector+0xc8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d805      	bhi.n	8002474 <GetSector+0x48>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a23      	ldr	r2, [pc, #140]	; (80024f8 <GetSector+0xcc>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d301      	bcc.n	8002474 <GetSector+0x48>
	{
		sector = FLASH_SECTOR_2;
 8002470:	2302      	movs	r3, #2
 8002472:	60fb      	str	r3, [r7, #12]
	}
	if((Address < 0x0800FFFF) && (Address >=  0x0800C000))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a21      	ldr	r2, [pc, #132]	; (80024fc <GetSector+0xd0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d205      	bcs.n	8002488 <GetSector+0x5c>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a20      	ldr	r2, [pc, #128]	; (8002500 <GetSector+0xd4>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d301      	bcc.n	8002488 <GetSector+0x5c>
	{
		sector = FLASH_SECTOR_3;
 8002484:	2303      	movs	r3, #3
 8002486:	60fb      	str	r3, [r7, #12]
	}
	if((Address < 0x0801FFFF) && (Address >=  0x08010000))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a1e      	ldr	r2, [pc, #120]	; (8002504 <GetSector+0xd8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d205      	bcs.n	800249c <GetSector+0x70>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a1a      	ldr	r2, [pc, #104]	; (80024fc <GetSector+0xd0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d901      	bls.n	800249c <GetSector+0x70>
	{
		sector = FLASH_SECTOR_4;
 8002498:	2304      	movs	r3, #4
 800249a:	60fb      	str	r3, [r7, #12]
	}
	if((Address < 0x0803FFFF) && (Address >=  0x08020000))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a1a      	ldr	r2, [pc, #104]	; (8002508 <GetSector+0xdc>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d205      	bcs.n	80024b0 <GetSector+0x84>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a17      	ldr	r2, [pc, #92]	; (8002504 <GetSector+0xd8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <GetSector+0x84>
	{
		sector = FLASH_SECTOR_5;
 80024ac:	2305      	movs	r3, #5
 80024ae:	60fb      	str	r3, [r7, #12]
	}
	if((Address < 0x0805FFFF) && (Address >=  0x08040000))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a16      	ldr	r2, [pc, #88]	; (800250c <GetSector+0xe0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d205      	bcs.n	80024c4 <GetSector+0x98>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a13      	ldr	r2, [pc, #76]	; (8002508 <GetSector+0xdc>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <GetSector+0x98>
	{
		sector = FLASH_SECTOR_6;
 80024c0:	2306      	movs	r3, #6
 80024c2:	60fb      	str	r3, [r7, #12]
	}
	if((Address < 0x0807FFFF) && (Address >=  0x08060000))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <GetSector+0xe4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d205      	bcs.n	80024d8 <GetSector+0xac>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a0f      	ldr	r2, [pc, #60]	; (800250c <GetSector+0xe0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d901      	bls.n	80024d8 <GetSector+0xac>
	{
		sector = FLASH_SECTOR_7;
 80024d4:	2307      	movs	r3, #7
 80024d6:	60fb      	str	r3, [r7, #12]
	}

	return sector;
 80024d8:	68fb      	ldr	r3, [r7, #12]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	08003ffe 	.word	0x08003ffe
 80024ec:	08007ffe 	.word	0x08007ffe
 80024f0:	08004000 	.word	0x08004000
 80024f4:	0800bffe 	.word	0x0800bffe
 80024f8:	08008000 	.word	0x08008000
 80024fc:	0800ffff 	.word	0x0800ffff
 8002500:	0800c000 	.word	0x0800c000
 8002504:	0801ffff 	.word	0x0801ffff
 8002508:	0803ffff 	.word	0x0803ffff
 800250c:	0805ffff 	.word	0x0805ffff
 8002510:	0807ffff 	.word	0x0807ffff

08002514 <Flash_Write_Data>:

uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data)
{
 8002514:	b590      	push	{r4, r7, lr}
 8002516:	b089      	sub	sp, #36	; 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
	int num_of_words = (strlen(Data)/4) + ((strlen(Data)%4)!= 0);
 8002522:	6838      	ldr	r0, [r7, #0]
 8002524:	f7fd fe56 	bl	80001d4 <strlen>
 8002528:	4603      	mov	r3, r0
 800252a:	089c      	lsrs	r4, r3, #2
 800252c:	6838      	ldr	r0, [r7, #0]
 800252e:	f7fd fe51 	bl	80001d4 <strlen>
 8002532:	4603      	mov	r3, r0
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b00      	cmp	r3, #0
 800253a:	bf14      	ite	ne
 800253c:	2301      	movne	r3, #1
 800253e:	2300      	moveq	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	4423      	add	r3, r4
 8002544:	61bb      	str	r3, [r7, #24]

	/*Unlock Flash Memory to enable the flash control register access*/
	HAL_FLASH_Unlock();
 8002546:	f7fe fbfd 	bl	8000d44 <HAL_FLASH_Unlock>

	/*Erase the Flash*/
	/*Get the number of sector to erase from 1st sector*/
	uint32_t StartSector = GetSector(StartSectorAddress);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff ff6e 	bl	800242c <GetSector>
 8002550:	6178      	str	r0, [r7, #20]
	uint32_t EndSectorAddress = StartSectorAddress + num_of_words*4;
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	461a      	mov	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4413      	add	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
	uint32_t EndSector = GetSector(EndSectorAddress);
 800255e:	6938      	ldr	r0, [r7, #16]
 8002560:	f7ff ff64 	bl	800242c <GetSector>
 8002564:	60f8      	str	r0, [r7, #12]

	/*Fill EraseInit Structure*/

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8002566:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <Flash_Write_Data+0xd4>)
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800256c:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <Flash_Write_Data+0xd4>)
 800256e:	2202      	movs	r2, #2
 8002570:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector    = StartSector;
 8002572:	4a1d      	ldr	r2, [pc, #116]	; (80025e8 <Flash_Write_Data+0xd4>)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors = (EndSector - StartSector)+1;
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	3301      	adds	r3, #1
 8002580:	4a19      	ldr	r2, [pc, #100]	; (80025e8 <Flash_Write_Data+0xd4>)
 8002582:	60d3      	str	r3, [r2, #12]

	if(HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8002584:	f107 0308 	add.w	r3, r7, #8
 8002588:	4619      	mov	r1, r3
 800258a:	4817      	ldr	r0, [pc, #92]	; (80025e8 <Flash_Write_Data+0xd4>)
 800258c:	f7fe fd58 	bl	8001040 <HAL_FLASHEx_Erase>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d01d      	beq.n	80025d2 <Flash_Write_Data+0xbe>
	{
		return HAL_FLASH_GetError();
 8002596:	f7fe fc07 	bl	8000da8 <HAL_FLASH_GetError>
 800259a:	4603      	mov	r3, r0
 800259c:	e020      	b.n	80025e0 <Flash_Write_Data+0xcc>
	}
	while (sofar<num_of_words){
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	4413      	add	r3, r2
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	461a      	mov	r2, r3
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	2002      	movs	r0, #2
 80025b2:	f7fe fb73 	bl	8000c9c <HAL_FLASH_Program>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d106      	bne.n	80025ca <Flash_Write_Data+0xb6>
		{
			StartSectorAddress += 4;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3304      	adds	r3, #4
 80025c0:	607b      	str	r3, [r7, #4]
			sofar ++;
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3301      	adds	r3, #1
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	e003      	b.n	80025d2 <Flash_Write_Data+0xbe>

		}
		else {
			return HAL_FLASH_GetError();
 80025ca:	f7fe fbed 	bl	8000da8 <HAL_FLASH_GetError>
 80025ce:	4603      	mov	r3, r0
 80025d0:	e006      	b.n	80025e0 <Flash_Write_Data+0xcc>
	while (sofar<num_of_words){
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	dbe1      	blt.n	800259e <Flash_Write_Data+0x8a>
		}

}
	HAL_FLASH_Lock();
 80025da:	f7fe fbd5 	bl	8000d88 <HAL_FLASH_Lock>
	return 0;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3724      	adds	r7, #36	; 0x24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd90      	pop	{r4, r7, pc}
 80025e8:	20000040 	.word	0x20000040

080025ec <Flash_Read_Data>:

void Flash_Read_Data(uint32_t StartSectorAddress,uint32_t *Data){
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]

	while(1){
		*Data = *(uint32_t *)StartSectorAddress;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	601a      	str	r2, [r3, #0]
		if(*Data == 0xffffff){
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8002606:	4293      	cmp	r3, r2
 8002608:	d103      	bne.n	8002612 <Flash_Read_Data+0x26>
			*Data = '\0';
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
			break;
 8002610:	e006      	b.n	8002620 <Flash_Read_Data+0x34>
		}
		StartSectorAddress += 4;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3304      	adds	r3, #4
 8002616:	607b      	str	r3, [r7, #4]
		Data++;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	3304      	adds	r3, #4
 800261c:	603b      	str	r3, [r7, #0]
		*Data = *(uint32_t *)StartSectorAddress;
 800261e:	e7ea      	b.n	80025f6 <Flash_Read_Data+0xa>
	}
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <__libc_init_array>:
 800262c:	b570      	push	{r4, r5, r6, lr}
 800262e:	4d0d      	ldr	r5, [pc, #52]	; (8002664 <__libc_init_array+0x38>)
 8002630:	4c0d      	ldr	r4, [pc, #52]	; (8002668 <__libc_init_array+0x3c>)
 8002632:	1b64      	subs	r4, r4, r5
 8002634:	10a4      	asrs	r4, r4, #2
 8002636:	2600      	movs	r6, #0
 8002638:	42a6      	cmp	r6, r4
 800263a:	d109      	bne.n	8002650 <__libc_init_array+0x24>
 800263c:	4d0b      	ldr	r5, [pc, #44]	; (800266c <__libc_init_array+0x40>)
 800263e:	4c0c      	ldr	r4, [pc, #48]	; (8002670 <__libc_init_array+0x44>)
 8002640:	f000 f820 	bl	8002684 <_init>
 8002644:	1b64      	subs	r4, r4, r5
 8002646:	10a4      	asrs	r4, r4, #2
 8002648:	2600      	movs	r6, #0
 800264a:	42a6      	cmp	r6, r4
 800264c:	d105      	bne.n	800265a <__libc_init_array+0x2e>
 800264e:	bd70      	pop	{r4, r5, r6, pc}
 8002650:	f855 3b04 	ldr.w	r3, [r5], #4
 8002654:	4798      	blx	r3
 8002656:	3601      	adds	r6, #1
 8002658:	e7ee      	b.n	8002638 <__libc_init_array+0xc>
 800265a:	f855 3b04 	ldr.w	r3, [r5], #4
 800265e:	4798      	blx	r3
 8002660:	3601      	adds	r6, #1
 8002662:	e7f2      	b.n	800264a <__libc_init_array+0x1e>
 8002664:	080026b4 	.word	0x080026b4
 8002668:	080026b4 	.word	0x080026b4
 800266c:	080026b4 	.word	0x080026b4
 8002670:	080026b8 	.word	0x080026b8

08002674 <memset>:
 8002674:	4402      	add	r2, r0
 8002676:	4603      	mov	r3, r0
 8002678:	4293      	cmp	r3, r2
 800267a:	d100      	bne.n	800267e <memset+0xa>
 800267c:	4770      	bx	lr
 800267e:	f803 1b01 	strb.w	r1, [r3], #1
 8002682:	e7f9      	b.n	8002678 <memset+0x4>

08002684 <_init>:
 8002684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002686:	bf00      	nop
 8002688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268a:	bc08      	pop	{r3}
 800268c:	469e      	mov	lr, r3
 800268e:	4770      	bx	lr

08002690 <_fini>:
 8002690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002692:	bf00      	nop
 8002694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002696:	bc08      	pop	{r3}
 8002698:	469e      	mov	lr, r3
 800269a:	4770      	bx	lr
