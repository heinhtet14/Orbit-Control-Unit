
i2c-rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d7c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002e38  08002e38  00012e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e70  08002e70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e70  08002e70  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e70  08002e70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e70  08002e70  00012e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e74  08002e74  00012e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08002e84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002e84  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b760  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001819  00000000  00000000  0002b794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  0002cfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000860  00000000  00000000  0002d8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9d9  00000000  00000000  0002e108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf43  00000000  00000000  00048ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a154c  00000000  00000000  00054a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5f70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f78  00000000  00000000  000f5fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002e20 	.word	0x08002e20

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002e20 	.word	0x08002e20

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f000 fa99 	bl	8000758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 f83f 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 f913 	bl	8000454 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800022e:	f000 f8e1 	bl	80003f4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000232:	f000 f89f 	bl	8000374 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_I2C_IsDeviceReady(&hi2c1, 0xD0, 2, 10) == HAL_OK)
 8000236:	4819      	ldr	r0, [pc, #100]	; (800029c <main+0x80>)
 8000238:	230a      	movs	r3, #10
 800023a:	2202      	movs	r2, #2
 800023c:	21d0      	movs	r1, #208	; 0xd0
 800023e:	f001 f81d 	bl	800127c <HAL_I2C_IsDeviceReady>
 8000242:	1e03      	subs	r3, r0, #0
 8000244:	d105      	bne.n	8000252 <main+0x36>
  {
	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 8000246:	2390      	movs	r3, #144	; 0x90
 8000248:	05db      	lsls	r3, r3, #23
 800024a:	2120      	movs	r1, #32
 800024c:	0018      	movs	r0, r3
 800024e:	f000 fd54 	bl	8000cfa <HAL_GPIO_TogglePin>
  }

  Data_I2C[0] = 0x00;
 8000252:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <main+0x84>)
 8000254:	2200      	movs	r2, #0
 8000256:	701a      	strb	r2, [r3, #0]
  Data_I2C[1] = 0x7F;
 8000258:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <main+0x84>)
 800025a:	227f      	movs	r2, #127	; 0x7f
 800025c:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Master_Transmit(&hi2c1, 0xD0, Data_I2C, 2, 10);
 800025e:	4a10      	ldr	r2, [pc, #64]	; (80002a0 <main+0x84>)
 8000260:	480e      	ldr	r0, [pc, #56]	; (800029c <main+0x80>)
 8000262:	230a      	movs	r3, #10
 8000264:	9300      	str	r3, [sp, #0]
 8000266:	2302      	movs	r3, #2
 8000268:	21d0      	movs	r1, #208	; 0xd0
 800026a:	f000 fdf7 	bl	8000e5c <HAL_I2C_Master_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Data_I2C[0] = 0x00;
 800026e:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <main+0x84>)
 8000270:	2200      	movs	r2, #0
 8000272:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, 0xD0, Data_I2C, 1, 10);
 8000274:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <main+0x84>)
 8000276:	4809      	ldr	r0, [pc, #36]	; (800029c <main+0x80>)
 8000278:	230a      	movs	r3, #10
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2301      	movs	r3, #1
 800027e:	21d0      	movs	r1, #208	; 0xd0
 8000280:	f000 fdec 	bl	8000e5c <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, 0xD0, &Data_I2C[1], 1, 10);
 8000284:	4a07      	ldr	r2, [pc, #28]	; (80002a4 <main+0x88>)
 8000286:	4805      	ldr	r0, [pc, #20]	; (800029c <main+0x80>)
 8000288:	230a      	movs	r3, #10
 800028a:	9300      	str	r3, [sp, #0]
 800028c:	2301      	movs	r3, #1
 800028e:	21d0      	movs	r1, #208	; 0xd0
 8000290:	f000 feec 	bl	800106c <HAL_I2C_Master_Receive>

	  HAL_Delay(30);
 8000294:	201e      	movs	r0, #30
 8000296:	f000 fac3 	bl	8000820 <HAL_Delay>
	  Data_I2C[0] = 0x00;
 800029a:	e7e8      	b.n	800026e <main+0x52>
 800029c:	20000028 	.word	0x20000028
 80002a0:	20000074 	.word	0x20000074
 80002a4:	20000075 	.word	0x20000075

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b099      	sub	sp, #100	; 0x64
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	242c      	movs	r4, #44	; 0x2c
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	0018      	movs	r0, r3
 80002b4:	2334      	movs	r3, #52	; 0x34
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f002 fda9 	bl	8002e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	231c      	movs	r3, #28
 80002c0:	18fb      	adds	r3, r7, r3
 80002c2:	0018      	movs	r0, r3
 80002c4:	2310      	movs	r3, #16
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f002 fda1 	bl	8002e10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ce:	003b      	movs	r3, r7
 80002d0:	0018      	movs	r0, r3
 80002d2:	231c      	movs	r3, #28
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f002 fd9a 	bl	8002e10 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002dc:	0021      	movs	r1, r4
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2202      	movs	r2, #2
 80002e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2201      	movs	r2, #1
 80002e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2210      	movs	r2, #16
 80002ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2202      	movs	r2, #2
 80002f4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2280      	movs	r2, #128	; 0x80
 80002fa:	0212      	lsls	r2, r2, #8
 80002fc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	22a0      	movs	r2, #160	; 0xa0
 8000302:	0392      	lsls	r2, r2, #14
 8000304:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2201      	movs	r2, #1
 800030a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030c:	187b      	adds	r3, r7, r1
 800030e:	0018      	movs	r0, r3
 8000310:	f001 fb5e 	bl	80019d0 <HAL_RCC_OscConfig>
 8000314:	1e03      	subs	r3, r0, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000318:	f000 f914 	bl	8000544 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031c:	211c      	movs	r1, #28
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2207      	movs	r2, #7
 8000322:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2202      	movs	r2, #2
 8000328:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2200      	movs	r2, #0
 8000334:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2101      	movs	r1, #1
 800033a:	0018      	movs	r0, r3
 800033c:	f001 fece 	bl	80020dc <HAL_RCC_ClockConfig>
 8000340:	1e03      	subs	r3, r0, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000344:	f000 f8fe 	bl	8000544 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000348:	003b      	movs	r3, r7
 800034a:	2222      	movs	r2, #34	; 0x22
 800034c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800034e:	003b      	movs	r3, r7
 8000350:	2200      	movs	r2, #0
 8000352:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000354:	003b      	movs	r3, r7
 8000356:	2200      	movs	r2, #0
 8000358:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035a:	003b      	movs	r3, r7
 800035c:	0018      	movs	r0, r3
 800035e:	f002 f837 	bl	80023d0 <HAL_RCCEx_PeriphCLKConfig>
 8000362:	1e03      	subs	r3, r0, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000366:	f000 f8ed 	bl	8000544 <Error_Handler>
  }
}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	b019      	add	sp, #100	; 0x64
 8000370:	bd90      	pop	{r4, r7, pc}
	...

08000374 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000378:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <MX_I2C1_Init+0x74>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <MX_I2C1_Init+0x78>)
 800037c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800037e:	4b1a      	ldr	r3, [pc, #104]	; (80003e8 <MX_I2C1_Init+0x74>)
 8000380:	4a1b      	ldr	r2, [pc, #108]	; (80003f0 <MX_I2C1_Init+0x7c>)
 8000382:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000384:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <MX_I2C1_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800038a:	4b17      	ldr	r3, [pc, #92]	; (80003e8 <MX_I2C1_Init+0x74>)
 800038c:	2201      	movs	r2, #1
 800038e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000390:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <MX_I2C1_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000396:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <MX_I2C1_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <MX_I2C1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003a2:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_I2C1_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <MX_I2C1_Init+0x74>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_I2C1_Init+0x74>)
 80003b0:	0018      	movs	r0, r3
 80003b2:	f000 fcbd 	bl	8000d30 <HAL_I2C_Init>
 80003b6:	1e03      	subs	r3, r0, #0
 80003b8:	d001      	beq.n	80003be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003ba:	f000 f8c3 	bl	8000544 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003be:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <MX_I2C1_Init+0x74>)
 80003c0:	2100      	movs	r1, #0
 80003c2:	0018      	movs	r0, r3
 80003c4:	f001 fa6c 	bl	80018a0 <HAL_I2CEx_ConfigAnalogFilter>
 80003c8:	1e03      	subs	r3, r0, #0
 80003ca:	d001      	beq.n	80003d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003cc:	f000 f8ba 	bl	8000544 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <MX_I2C1_Init+0x74>)
 80003d2:	2100      	movs	r1, #0
 80003d4:	0018      	movs	r0, r3
 80003d6:	f001 faaf 	bl	8001938 <HAL_I2CEx_ConfigDigitalFilter>
 80003da:	1e03      	subs	r3, r0, #0
 80003dc:	d001      	beq.n	80003e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003de:	f000 f8b1 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	20000028 	.word	0x20000028
 80003ec:	40005400 	.word	0x40005400
 80003f0:	2000090e 	.word	0x2000090e

080003f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003f8:	4b14      	ldr	r3, [pc, #80]	; (800044c <MX_USART2_UART_Init+0x58>)
 80003fa:	4a15      	ldr	r2, [pc, #84]	; (8000450 <MX_USART2_UART_Init+0x5c>)
 80003fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003fe:	4b13      	ldr	r3, [pc, #76]	; (800044c <MX_USART2_UART_Init+0x58>)
 8000400:	22e1      	movs	r2, #225	; 0xe1
 8000402:	0252      	lsls	r2, r2, #9
 8000404:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000406:	4b11      	ldr	r3, [pc, #68]	; (800044c <MX_USART2_UART_Init+0x58>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800040c:	4b0f      	ldr	r3, [pc, #60]	; (800044c <MX_USART2_UART_Init+0x58>)
 800040e:	2200      	movs	r2, #0
 8000410:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000412:	4b0e      	ldr	r3, [pc, #56]	; (800044c <MX_USART2_UART_Init+0x58>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000418:	4b0c      	ldr	r3, [pc, #48]	; (800044c <MX_USART2_UART_Init+0x58>)
 800041a:	220c      	movs	r2, #12
 800041c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <MX_USART2_UART_Init+0x58>)
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000424:	4b09      	ldr	r3, [pc, #36]	; (800044c <MX_USART2_UART_Init+0x58>)
 8000426:	2200      	movs	r2, #0
 8000428:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <MX_USART2_UART_Init+0x58>)
 800042c:	2200      	movs	r2, #0
 800042e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <MX_USART2_UART_Init+0x58>)
 8000432:	2200      	movs	r2, #0
 8000434:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000436:	4b05      	ldr	r3, [pc, #20]	; (800044c <MX_USART2_UART_Init+0x58>)
 8000438:	0018      	movs	r0, r3
 800043a:	f002 f8c9 	bl	80025d0 <HAL_UART_Init>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d001      	beq.n	8000446 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000442:	f000 f87f 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000078 	.word	0x20000078
 8000450:	40004400 	.word	0x40004400

08000454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b08b      	sub	sp, #44	; 0x2c
 8000458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045a:	2414      	movs	r4, #20
 800045c:	193b      	adds	r3, r7, r4
 800045e:	0018      	movs	r0, r3
 8000460:	2314      	movs	r3, #20
 8000462:	001a      	movs	r2, r3
 8000464:	2100      	movs	r1, #0
 8000466:	f002 fcd3 	bl	8002e10 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046a:	4b34      	ldr	r3, [pc, #208]	; (800053c <MX_GPIO_Init+0xe8>)
 800046c:	695a      	ldr	r2, [r3, #20]
 800046e:	4b33      	ldr	r3, [pc, #204]	; (800053c <MX_GPIO_Init+0xe8>)
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	0309      	lsls	r1, r1, #12
 8000474:	430a      	orrs	r2, r1
 8000476:	615a      	str	r2, [r3, #20]
 8000478:	4b30      	ldr	r3, [pc, #192]	; (800053c <MX_GPIO_Init+0xe8>)
 800047a:	695a      	ldr	r2, [r3, #20]
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	031b      	lsls	r3, r3, #12
 8000480:	4013      	ands	r3, r2
 8000482:	613b      	str	r3, [r7, #16]
 8000484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000486:	4b2d      	ldr	r3, [pc, #180]	; (800053c <MX_GPIO_Init+0xe8>)
 8000488:	695a      	ldr	r2, [r3, #20]
 800048a:	4b2c      	ldr	r3, [pc, #176]	; (800053c <MX_GPIO_Init+0xe8>)
 800048c:	2180      	movs	r1, #128	; 0x80
 800048e:	03c9      	lsls	r1, r1, #15
 8000490:	430a      	orrs	r2, r1
 8000492:	615a      	str	r2, [r3, #20]
 8000494:	4b29      	ldr	r3, [pc, #164]	; (800053c <MX_GPIO_Init+0xe8>)
 8000496:	695a      	ldr	r2, [r3, #20]
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	03db      	lsls	r3, r3, #15
 800049c:	4013      	ands	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b26      	ldr	r3, [pc, #152]	; (800053c <MX_GPIO_Init+0xe8>)
 80004a4:	695a      	ldr	r2, [r3, #20]
 80004a6:	4b25      	ldr	r3, [pc, #148]	; (800053c <MX_GPIO_Init+0xe8>)
 80004a8:	2180      	movs	r1, #128	; 0x80
 80004aa:	0289      	lsls	r1, r1, #10
 80004ac:	430a      	orrs	r2, r1
 80004ae:	615a      	str	r2, [r3, #20]
 80004b0:	4b22      	ldr	r3, [pc, #136]	; (800053c <MX_GPIO_Init+0xe8>)
 80004b2:	695a      	ldr	r2, [r3, #20]
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	029b      	lsls	r3, r3, #10
 80004b8:	4013      	ands	r3, r2
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004be:	4b1f      	ldr	r3, [pc, #124]	; (800053c <MX_GPIO_Init+0xe8>)
 80004c0:	695a      	ldr	r2, [r3, #20]
 80004c2:	4b1e      	ldr	r3, [pc, #120]	; (800053c <MX_GPIO_Init+0xe8>)
 80004c4:	2180      	movs	r1, #128	; 0x80
 80004c6:	02c9      	lsls	r1, r1, #11
 80004c8:	430a      	orrs	r2, r1
 80004ca:	615a      	str	r2, [r3, #20]
 80004cc:	4b1b      	ldr	r3, [pc, #108]	; (800053c <MX_GPIO_Init+0xe8>)
 80004ce:	695a      	ldr	r2, [r3, #20]
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	02db      	lsls	r3, r3, #11
 80004d4:	4013      	ands	r3, r2
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004da:	2390      	movs	r3, #144	; 0x90
 80004dc:	05db      	lsls	r3, r3, #23
 80004de:	2200      	movs	r2, #0
 80004e0:	2120      	movs	r1, #32
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fbec 	bl	8000cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	0192      	lsls	r2, r2, #6
 80004ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	2284      	movs	r2, #132	; 0x84
 80004f4:	0392      	lsls	r2, r2, #14
 80004f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	4a0f      	ldr	r2, [pc, #60]	; (8000540 <MX_GPIO_Init+0xec>)
 8000502:	0019      	movs	r1, r3
 8000504:	0010      	movs	r0, r2
 8000506:	f000 fa63 	bl	80009d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800050a:	0021      	movs	r1, r4
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2220      	movs	r2, #32
 8000510:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2201      	movs	r2, #1
 8000516:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000524:	187a      	adds	r2, r7, r1
 8000526:	2390      	movs	r3, #144	; 0x90
 8000528:	05db      	lsls	r3, r3, #23
 800052a:	0011      	movs	r1, r2
 800052c:	0018      	movs	r0, r3
 800052e:	f000 fa4f 	bl	80009d0 <HAL_GPIO_Init>

}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b00b      	add	sp, #44	; 0x2c
 8000538:	bd90      	pop	{r4, r7, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	40021000 	.word	0x40021000
 8000540:	48000800 	.word	0x48000800

08000544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000548:	b672      	cpsid	i
}
 800054a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800054c:	e7fe      	b.n	800054c <Error_Handler+0x8>
	...

08000550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <HAL_MspInit+0x44>)
 8000558:	699a      	ldr	r2, [r3, #24]
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <HAL_MspInit+0x44>)
 800055c:	2101      	movs	r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	619a      	str	r2, [r3, #24]
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <HAL_MspInit+0x44>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	2201      	movs	r2, #1
 8000568:	4013      	ands	r3, r2
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <HAL_MspInit+0x44>)
 8000570:	69da      	ldr	r2, [r3, #28]
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <HAL_MspInit+0x44>)
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	0549      	lsls	r1, r1, #21
 8000578:	430a      	orrs	r2, r1
 800057a:	61da      	str	r2, [r3, #28]
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <HAL_MspInit+0x44>)
 800057e:	69da      	ldr	r2, [r3, #28]
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	055b      	lsls	r3, r3, #21
 8000584:	4013      	ands	r3, r2
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	b002      	add	sp, #8
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	40021000 	.word	0x40021000

08000598 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b08b      	sub	sp, #44	; 0x2c
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	2414      	movs	r4, #20
 80005a2:	193b      	adds	r3, r7, r4
 80005a4:	0018      	movs	r0, r3
 80005a6:	2314      	movs	r3, #20
 80005a8:	001a      	movs	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	f002 fc30 	bl	8002e10 <memset>
  if(hi2c->Instance==I2C1)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <HAL_I2C_MspInit+0x90>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d132      	bne.n	8000620 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ba:	4b1c      	ldr	r3, [pc, #112]	; (800062c <HAL_I2C_MspInit+0x94>)
 80005bc:	695a      	ldr	r2, [r3, #20]
 80005be:	4b1b      	ldr	r3, [pc, #108]	; (800062c <HAL_I2C_MspInit+0x94>)
 80005c0:	2180      	movs	r1, #128	; 0x80
 80005c2:	02c9      	lsls	r1, r1, #11
 80005c4:	430a      	orrs	r2, r1
 80005c6:	615a      	str	r2, [r3, #20]
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <HAL_I2C_MspInit+0x94>)
 80005ca:	695a      	ldr	r2, [r3, #20]
 80005cc:	2380      	movs	r3, #128	; 0x80
 80005ce:	02db      	lsls	r3, r3, #11
 80005d0:	4013      	ands	r3, r2
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	22c0      	movs	r2, #192	; 0xc0
 80005da:	0092      	lsls	r2, r2, #2
 80005dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005de:	0021      	movs	r1, r4
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2212      	movs	r2, #18
 80005e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2203      	movs	r2, #3
 80005f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2201      	movs	r2, #1
 80005f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	4a0d      	ldr	r2, [pc, #52]	; (8000630 <HAL_I2C_MspInit+0x98>)
 80005fc:	0019      	movs	r1, r3
 80005fe:	0010      	movs	r0, r2
 8000600:	f000 f9e6 	bl	80009d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <HAL_I2C_MspInit+0x94>)
 8000606:	69da      	ldr	r2, [r3, #28]
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <HAL_I2C_MspInit+0x94>)
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	0389      	lsls	r1, r1, #14
 800060e:	430a      	orrs	r2, r1
 8000610:	61da      	str	r2, [r3, #28]
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <HAL_I2C_MspInit+0x94>)
 8000614:	69da      	ldr	r2, [r3, #28]
 8000616:	2380      	movs	r3, #128	; 0x80
 8000618:	039b      	lsls	r3, r3, #14
 800061a:	4013      	ands	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b00b      	add	sp, #44	; 0x2c
 8000626:	bd90      	pop	{r4, r7, pc}
 8000628:	40005400 	.word	0x40005400
 800062c:	40021000 	.word	0x40021000
 8000630:	48000400 	.word	0x48000400

08000634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b08b      	sub	sp, #44	; 0x2c
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	2414      	movs	r4, #20
 800063e:	193b      	adds	r3, r7, r4
 8000640:	0018      	movs	r0, r3
 8000642:	2314      	movs	r3, #20
 8000644:	001a      	movs	r2, r3
 8000646:	2100      	movs	r1, #0
 8000648:	f002 fbe2 	bl	8002e10 <memset>
  if(huart->Instance==USART2)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a1c      	ldr	r2, [pc, #112]	; (80006c4 <HAL_UART_MspInit+0x90>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d132      	bne.n	80006bc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <HAL_UART_MspInit+0x94>)
 8000658:	69da      	ldr	r2, [r3, #28]
 800065a:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <HAL_UART_MspInit+0x94>)
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	0289      	lsls	r1, r1, #10
 8000660:	430a      	orrs	r2, r1
 8000662:	61da      	str	r2, [r3, #28]
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <HAL_UART_MspInit+0x94>)
 8000666:	69da      	ldr	r2, [r3, #28]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	029b      	lsls	r3, r3, #10
 800066c:	4013      	ands	r3, r2
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <HAL_UART_MspInit+0x94>)
 8000674:	695a      	ldr	r2, [r3, #20]
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <HAL_UART_MspInit+0x94>)
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	0289      	lsls	r1, r1, #10
 800067c:	430a      	orrs	r2, r1
 800067e:	615a      	str	r2, [r3, #20]
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <HAL_UART_MspInit+0x94>)
 8000682:	695a      	ldr	r2, [r3, #20]
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	029b      	lsls	r3, r3, #10
 8000688:	4013      	ands	r3, r2
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800068e:	0021      	movs	r1, r4
 8000690:	187b      	adds	r3, r7, r1
 8000692:	220c      	movs	r2, #12
 8000694:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2202      	movs	r2, #2
 800069a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2201      	movs	r2, #1
 80006ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	187a      	adds	r2, r7, r1
 80006b0:	2390      	movs	r3, #144	; 0x90
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	0011      	movs	r1, r2
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 f98a 	bl	80009d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b00b      	add	sp, #44	; 0x2c
 80006c2:	bd90      	pop	{r4, r7, pc}
 80006c4:	40004400 	.word	0x40004400
 80006c8:	40021000 	.word	0x40021000

080006cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <NMI_Handler+0x4>

080006d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <HardFault_Handler+0x4>

080006d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f0:	f000 f87a 	bl	80007e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000706:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000708:	480d      	ldr	r0, [pc, #52]	; (8000740 <LoopForever+0x6>)
  ldr r1, =_edata
 800070a:	490e      	ldr	r1, [pc, #56]	; (8000744 <LoopForever+0xa>)
  ldr r2, =_sidata
 800070c:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <LoopForever+0xe>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000710:	e002      	b.n	8000718 <LoopCopyDataInit>

08000712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000716:	3304      	adds	r3, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800071c:	d3f9      	bcc.n	8000712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071e:	4a0b      	ldr	r2, [pc, #44]	; (800074c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000720:	4c0b      	ldr	r4, [pc, #44]	; (8000750 <LoopForever+0x16>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000724:	e001      	b.n	800072a <LoopFillZerobss>

08000726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000728:	3204      	adds	r2, #4

0800072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800072c:	d3fb      	bcc.n	8000726 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800072e:	f7ff ffe4 	bl	80006fa <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000732:	f002 fb49 	bl	8002dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000736:	f7ff fd71 	bl	800021c <main>

0800073a <LoopForever>:

LoopForever:
    b LoopForever
 800073a:	e7fe      	b.n	800073a <LoopForever>
  ldr   r0, =_estack
 800073c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000744:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000748:	08002e78 	.word	0x08002e78
  ldr r2, =_sbss
 800074c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000750:	20000100 	.word	0x20000100

08000754 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000754:	e7fe      	b.n	8000754 <ADC1_COMP_IRQHandler>
	...

08000758 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <HAL_Init+0x24>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_Init+0x24>)
 8000762:	2110      	movs	r1, #16
 8000764:	430a      	orrs	r2, r1
 8000766:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000768:	2000      	movs	r0, #0
 800076a:	f000 f809 	bl	8000780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800076e:	f7ff feef 	bl	8000550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000772:	2300      	movs	r3, #0
}
 8000774:	0018      	movs	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	40022000 	.word	0x40022000

08000780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <HAL_InitTick+0x5c>)
 800078a:	681c      	ldr	r4, [r3, #0]
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <HAL_InitTick+0x60>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	0019      	movs	r1, r3
 8000792:	23fa      	movs	r3, #250	; 0xfa
 8000794:	0098      	lsls	r0, r3, #2
 8000796:	f7ff fcb5 	bl	8000104 <__udivsi3>
 800079a:	0003      	movs	r3, r0
 800079c:	0019      	movs	r1, r3
 800079e:	0020      	movs	r0, r4
 80007a0:	f7ff fcb0 	bl	8000104 <__udivsi3>
 80007a4:	0003      	movs	r3, r0
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 f905 	bl	80009b6 <HAL_SYSTICK_Config>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007b0:	2301      	movs	r3, #1
 80007b2:	e00f      	b.n	80007d4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b03      	cmp	r3, #3
 80007b8:	d80b      	bhi.n	80007d2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	2301      	movs	r3, #1
 80007be:	425b      	negs	r3, r3
 80007c0:	2200      	movs	r2, #0
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 f8e2 	bl	800098c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_InitTick+0x64>)
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007ce:	2300      	movs	r3, #0
 80007d0:	e000      	b.n	80007d4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
}
 80007d4:	0018      	movs	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b003      	add	sp, #12
 80007da:	bd90      	pop	{r4, r7, pc}
 80007dc:	20000000 	.word	0x20000000
 80007e0:	20000008 	.word	0x20000008
 80007e4:	20000004 	.word	0x20000004

080007e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <HAL_IncTick+0x1c>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	001a      	movs	r2, r3
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <HAL_IncTick+0x20>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	18d2      	adds	r2, r2, r3
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <HAL_IncTick+0x20>)
 80007fa:	601a      	str	r2, [r3, #0]
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	20000008 	.word	0x20000008
 8000808:	200000fc 	.word	0x200000fc

0800080c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  return uwTick;
 8000810:	4b02      	ldr	r3, [pc, #8]	; (800081c <HAL_GetTick+0x10>)
 8000812:	681b      	ldr	r3, [r3, #0]
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	200000fc 	.word	0x200000fc

08000820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000828:	f7ff fff0 	bl	800080c <HAL_GetTick>
 800082c:	0003      	movs	r3, r0
 800082e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	3301      	adds	r3, #1
 8000838:	d005      	beq.n	8000846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_Delay+0x44>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	001a      	movs	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	189b      	adds	r3, r3, r2
 8000844:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	f7ff ffe0 	bl	800080c <HAL_GetTick>
 800084c:	0002      	movs	r2, r0
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	429a      	cmp	r2, r3
 8000856:	d8f7      	bhi.n	8000848 <HAL_Delay+0x28>
  {
  }
}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b004      	add	sp, #16
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	20000008 	.word	0x20000008

08000868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	0002      	movs	r2, r0
 8000870:	6039      	str	r1, [r7, #0]
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b7f      	cmp	r3, #127	; 0x7f
 800087c:	d828      	bhi.n	80008d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800087e:	4a2f      	ldr	r2, [pc, #188]	; (800093c <__NVIC_SetPriority+0xd4>)
 8000880:	1dfb      	adds	r3, r7, #7
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b25b      	sxtb	r3, r3
 8000886:	089b      	lsrs	r3, r3, #2
 8000888:	33c0      	adds	r3, #192	; 0xc0
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	589b      	ldr	r3, [r3, r2]
 800088e:	1dfa      	adds	r2, r7, #7
 8000890:	7812      	ldrb	r2, [r2, #0]
 8000892:	0011      	movs	r1, r2
 8000894:	2203      	movs	r2, #3
 8000896:	400a      	ands	r2, r1
 8000898:	00d2      	lsls	r2, r2, #3
 800089a:	21ff      	movs	r1, #255	; 0xff
 800089c:	4091      	lsls	r1, r2
 800089e:	000a      	movs	r2, r1
 80008a0:	43d2      	mvns	r2, r2
 80008a2:	401a      	ands	r2, r3
 80008a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	019b      	lsls	r3, r3, #6
 80008aa:	22ff      	movs	r2, #255	; 0xff
 80008ac:	401a      	ands	r2, r3
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	0018      	movs	r0, r3
 80008b4:	2303      	movs	r3, #3
 80008b6:	4003      	ands	r3, r0
 80008b8:	00db      	lsls	r3, r3, #3
 80008ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008bc:	481f      	ldr	r0, [pc, #124]	; (800093c <__NVIC_SetPriority+0xd4>)
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	b25b      	sxtb	r3, r3
 80008c4:	089b      	lsrs	r3, r3, #2
 80008c6:	430a      	orrs	r2, r1
 80008c8:	33c0      	adds	r3, #192	; 0xc0
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008ce:	e031      	b.n	8000934 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d0:	4a1b      	ldr	r2, [pc, #108]	; (8000940 <__NVIC_SetPriority+0xd8>)
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	0019      	movs	r1, r3
 80008d8:	230f      	movs	r3, #15
 80008da:	400b      	ands	r3, r1
 80008dc:	3b08      	subs	r3, #8
 80008de:	089b      	lsrs	r3, r3, #2
 80008e0:	3306      	adds	r3, #6
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	18d3      	adds	r3, r2, r3
 80008e6:	3304      	adds	r3, #4
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	1dfa      	adds	r2, r7, #7
 80008ec:	7812      	ldrb	r2, [r2, #0]
 80008ee:	0011      	movs	r1, r2
 80008f0:	2203      	movs	r2, #3
 80008f2:	400a      	ands	r2, r1
 80008f4:	00d2      	lsls	r2, r2, #3
 80008f6:	21ff      	movs	r1, #255	; 0xff
 80008f8:	4091      	lsls	r1, r2
 80008fa:	000a      	movs	r2, r1
 80008fc:	43d2      	mvns	r2, r2
 80008fe:	401a      	ands	r2, r3
 8000900:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	019b      	lsls	r3, r3, #6
 8000906:	22ff      	movs	r2, #255	; 0xff
 8000908:	401a      	ands	r2, r3
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	0018      	movs	r0, r3
 8000910:	2303      	movs	r3, #3
 8000912:	4003      	ands	r3, r0
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000918:	4809      	ldr	r0, [pc, #36]	; (8000940 <__NVIC_SetPriority+0xd8>)
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	001c      	movs	r4, r3
 8000920:	230f      	movs	r3, #15
 8000922:	4023      	ands	r3, r4
 8000924:	3b08      	subs	r3, #8
 8000926:	089b      	lsrs	r3, r3, #2
 8000928:	430a      	orrs	r2, r1
 800092a:	3306      	adds	r3, #6
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	18c3      	adds	r3, r0, r3
 8000930:	3304      	adds	r3, #4
 8000932:	601a      	str	r2, [r3, #0]
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b003      	add	sp, #12
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	e000e100 	.word	0xe000e100
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	1e5a      	subs	r2, r3, #1
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	045b      	lsls	r3, r3, #17
 8000954:	429a      	cmp	r2, r3
 8000956:	d301      	bcc.n	800095c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000958:	2301      	movs	r3, #1
 800095a:	e010      	b.n	800097e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <SysTick_Config+0x44>)
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	3a01      	subs	r2, #1
 8000962:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000964:	2301      	movs	r3, #1
 8000966:	425b      	negs	r3, r3
 8000968:	2103      	movs	r1, #3
 800096a:	0018      	movs	r0, r3
 800096c:	f7ff ff7c 	bl	8000868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <SysTick_Config+0x44>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000976:	4b04      	ldr	r3, [pc, #16]	; (8000988 <SysTick_Config+0x44>)
 8000978:	2207      	movs	r2, #7
 800097a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800097c:	2300      	movs	r3, #0
}
 800097e:	0018      	movs	r0, r3
 8000980:	46bd      	mov	sp, r7
 8000982:	b002      	add	sp, #8
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	e000e010 	.word	0xe000e010

0800098c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
 8000996:	210f      	movs	r1, #15
 8000998:	187b      	adds	r3, r7, r1
 800099a:	1c02      	adds	r2, r0, #0
 800099c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b25b      	sxtb	r3, r3
 80009a6:	0011      	movs	r1, r2
 80009a8:	0018      	movs	r0, r3
 80009aa:	f7ff ff5d 	bl	8000868 <__NVIC_SetPriority>
}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b004      	add	sp, #16
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff ffbf 	bl	8000944 <SysTick_Config>
 80009c6:	0003      	movs	r3, r0
}
 80009c8:	0018      	movs	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b002      	add	sp, #8
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009de:	e155      	b.n	8000c8c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2101      	movs	r1, #1
 80009e6:	697a      	ldr	r2, [r7, #20]
 80009e8:	4091      	lsls	r1, r2
 80009ea:	000a      	movs	r2, r1
 80009ec:	4013      	ands	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d100      	bne.n	80009f8 <HAL_GPIO_Init+0x28>
 80009f6:	e146      	b.n	8000c86 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	2203      	movs	r2, #3
 80009fe:	4013      	ands	r3, r2
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d005      	beq.n	8000a10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	2203      	movs	r2, #3
 8000a0a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d130      	bne.n	8000a72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	409a      	lsls	r2, r3
 8000a1e:	0013      	movs	r3, r2
 8000a20:	43da      	mvns	r2, r3
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	68da      	ldr	r2, [r3, #12]
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	409a      	lsls	r2, r3
 8000a32:	0013      	movs	r3, r2
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a46:	2201      	movs	r2, #1
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	409a      	lsls	r2, r3
 8000a4c:	0013      	movs	r3, r2
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	091b      	lsrs	r3, r3, #4
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	401a      	ands	r2, r3
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	409a      	lsls	r2, r3
 8000a64:	0013      	movs	r3, r2
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	2203      	movs	r2, #3
 8000a78:	4013      	ands	r3, r2
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	d017      	beq.n	8000aae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	2203      	movs	r2, #3
 8000a8a:	409a      	lsls	r2, r3
 8000a8c:	0013      	movs	r3, r2
 8000a8e:	43da      	mvns	r2, r3
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	4013      	ands	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	689a      	ldr	r2, [r3, #8]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	0013      	movs	r3, r2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d123      	bne.n	8000b02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	08da      	lsrs	r2, r3, #3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3208      	adds	r2, #8
 8000ac2:	0092      	lsls	r2, r2, #2
 8000ac4:	58d3      	ldr	r3, [r2, r3]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	2207      	movs	r2, #7
 8000acc:	4013      	ands	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	220f      	movs	r2, #15
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	0013      	movs	r3, r2
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	4013      	ands	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	691a      	ldr	r2, [r3, #16]
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	2107      	movs	r1, #7
 8000ae6:	400b      	ands	r3, r1
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	409a      	lsls	r2, r3
 8000aec:	0013      	movs	r3, r2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	08da      	lsrs	r2, r3, #3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3208      	adds	r2, #8
 8000afc:	0092      	lsls	r2, r2, #2
 8000afe:	6939      	ldr	r1, [r7, #16]
 8000b00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	409a      	lsls	r2, r3
 8000b10:	0013      	movs	r3, r2
 8000b12:	43da      	mvns	r2, r3
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	2203      	movs	r2, #3
 8000b20:	401a      	ands	r2, r3
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	409a      	lsls	r2, r3
 8000b28:	0013      	movs	r3, r2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	23c0      	movs	r3, #192	; 0xc0
 8000b3c:	029b      	lsls	r3, r3, #10
 8000b3e:	4013      	ands	r3, r2
 8000b40:	d100      	bne.n	8000b44 <HAL_GPIO_Init+0x174>
 8000b42:	e0a0      	b.n	8000c86 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b44:	4b57      	ldr	r3, [pc, #348]	; (8000ca4 <HAL_GPIO_Init+0x2d4>)
 8000b46:	699a      	ldr	r2, [r3, #24]
 8000b48:	4b56      	ldr	r3, [pc, #344]	; (8000ca4 <HAL_GPIO_Init+0x2d4>)
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	619a      	str	r2, [r3, #24]
 8000b50:	4b54      	ldr	r3, [pc, #336]	; (8000ca4 <HAL_GPIO_Init+0x2d4>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	2201      	movs	r2, #1
 8000b56:	4013      	ands	r3, r2
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b5c:	4a52      	ldr	r2, [pc, #328]	; (8000ca8 <HAL_GPIO_Init+0x2d8>)
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	089b      	lsrs	r3, r3, #2
 8000b62:	3302      	adds	r3, #2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	589b      	ldr	r3, [r3, r2]
 8000b68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	4013      	ands	r3, r2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	220f      	movs	r2, #15
 8000b74:	409a      	lsls	r2, r3
 8000b76:	0013      	movs	r3, r2
 8000b78:	43da      	mvns	r2, r3
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	2390      	movs	r3, #144	; 0x90
 8000b84:	05db      	lsls	r3, r3, #23
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d019      	beq.n	8000bbe <HAL_GPIO_Init+0x1ee>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a47      	ldr	r2, [pc, #284]	; (8000cac <HAL_GPIO_Init+0x2dc>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d013      	beq.n	8000bba <HAL_GPIO_Init+0x1ea>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a46      	ldr	r2, [pc, #280]	; (8000cb0 <HAL_GPIO_Init+0x2e0>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d00d      	beq.n	8000bb6 <HAL_GPIO_Init+0x1e6>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a45      	ldr	r2, [pc, #276]	; (8000cb4 <HAL_GPIO_Init+0x2e4>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d007      	beq.n	8000bb2 <HAL_GPIO_Init+0x1e2>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a44      	ldr	r2, [pc, #272]	; (8000cb8 <HAL_GPIO_Init+0x2e8>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d101      	bne.n	8000bae <HAL_GPIO_Init+0x1de>
 8000baa:	2304      	movs	r3, #4
 8000bac:	e008      	b.n	8000bc0 <HAL_GPIO_Init+0x1f0>
 8000bae:	2305      	movs	r3, #5
 8000bb0:	e006      	b.n	8000bc0 <HAL_GPIO_Init+0x1f0>
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	e004      	b.n	8000bc0 <HAL_GPIO_Init+0x1f0>
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	e002      	b.n	8000bc0 <HAL_GPIO_Init+0x1f0>
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e000      	b.n	8000bc0 <HAL_GPIO_Init+0x1f0>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	2103      	movs	r1, #3
 8000bc4:	400a      	ands	r2, r1
 8000bc6:	0092      	lsls	r2, r2, #2
 8000bc8:	4093      	lsls	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bd0:	4935      	ldr	r1, [pc, #212]	; (8000ca8 <HAL_GPIO_Init+0x2d8>)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	089b      	lsrs	r3, r3, #2
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bde:	4b37      	ldr	r3, [pc, #220]	; (8000cbc <HAL_GPIO_Init+0x2ec>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	43da      	mvns	r2, r3
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	025b      	lsls	r3, r3, #9
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	d003      	beq.n	8000c02 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c02:	4b2e      	ldr	r3, [pc, #184]	; (8000cbc <HAL_GPIO_Init+0x2ec>)
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c08:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <HAL_GPIO_Init+0x2ec>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	43da      	mvns	r2, r3
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	029b      	lsls	r3, r3, #10
 8000c20:	4013      	ands	r3, r2
 8000c22:	d003      	beq.n	8000c2c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c2c:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <HAL_GPIO_Init+0x2ec>)
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c32:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <HAL_GPIO_Init+0x2ec>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	035b      	lsls	r3, r3, #13
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	d003      	beq.n	8000c56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <HAL_GPIO_Init+0x2ec>)
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <HAL_GPIO_Init+0x2ec>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	43da      	mvns	r2, r3
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	039b      	lsls	r3, r3, #14
 8000c74:	4013      	ands	r3, r2
 8000c76:	d003      	beq.n	8000c80 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_GPIO_Init+0x2ec>)
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	40da      	lsrs	r2, r3
 8000c94:	1e13      	subs	r3, r2, #0
 8000c96:	d000      	beq.n	8000c9a <HAL_GPIO_Init+0x2ca>
 8000c98:	e6a2      	b.n	80009e0 <HAL_GPIO_Init+0x10>
  } 
}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b006      	add	sp, #24
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010000 	.word	0x40010000
 8000cac:	48000400 	.word	0x48000400
 8000cb0:	48000800 	.word	0x48000800
 8000cb4:	48000c00 	.word	0x48000c00
 8000cb8:	48001000 	.word	0x48001000
 8000cbc:	40010400 	.word	0x40010400

08000cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	0008      	movs	r0, r1
 8000cca:	0011      	movs	r1, r2
 8000ccc:	1cbb      	adds	r3, r7, #2
 8000cce:	1c02      	adds	r2, r0, #0
 8000cd0:	801a      	strh	r2, [r3, #0]
 8000cd2:	1c7b      	adds	r3, r7, #1
 8000cd4:	1c0a      	adds	r2, r1, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cd8:	1c7b      	adds	r3, r7, #1
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d004      	beq.n	8000cea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ce0:	1cbb      	adds	r3, r7, #2
 8000ce2:	881a      	ldrh	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ce8:	e003      	b.n	8000cf2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cea:	1cbb      	adds	r3, r7, #2
 8000cec:	881a      	ldrh	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b084      	sub	sp, #16
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	000a      	movs	r2, r1
 8000d04:	1cbb      	adds	r3, r7, #2
 8000d06:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d0e:	1cbb      	adds	r3, r7, #2
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	4013      	ands	r3, r2
 8000d16:	041a      	lsls	r2, r3, #16
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	1cb9      	adds	r1, r7, #2
 8000d1e:	8809      	ldrh	r1, [r1, #0]
 8000d20:	400b      	ands	r3, r1
 8000d22:	431a      	orrs	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	619a      	str	r2, [r3, #24]
}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b004      	add	sp, #16
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e082      	b.n	8000e48 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2241      	movs	r2, #65	; 0x41
 8000d46:	5c9b      	ldrb	r3, [r3, r2]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d107      	bne.n	8000d5e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2240      	movs	r2, #64	; 0x40
 8000d52:	2100      	movs	r1, #0
 8000d54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f7ff fc1d 	bl	8000598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2241      	movs	r2, #65	; 0x41
 8000d62:	2124      	movs	r1, #36	; 0x24
 8000d64:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2101      	movs	r1, #1
 8000d72:	438a      	bics	r2, r1
 8000d74:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4934      	ldr	r1, [pc, #208]	; (8000e50 <HAL_I2C_Init+0x120>)
 8000d80:	400a      	ands	r2, r1
 8000d82:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4931      	ldr	r1, [pc, #196]	; (8000e54 <HAL_I2C_Init+0x124>)
 8000d90:	400a      	ands	r2, r1
 8000d92:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d108      	bne.n	8000dae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2180      	movs	r1, #128	; 0x80
 8000da6:	0209      	lsls	r1, r1, #8
 8000da8:	430a      	orrs	r2, r1
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	e007      	b.n	8000dbe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2184      	movs	r1, #132	; 0x84
 8000db8:	0209      	lsls	r1, r1, #8
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d104      	bne.n	8000dd0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2280      	movs	r2, #128	; 0x80
 8000dcc:	0112      	lsls	r2, r2, #4
 8000dce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	491f      	ldr	r1, [pc, #124]	; (8000e58 <HAL_I2C_Init+0x128>)
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	491a      	ldr	r1, [pc, #104]	; (8000e54 <HAL_I2C_Init+0x124>)
 8000dec:	400a      	ands	r2, r1
 8000dee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	691a      	ldr	r2, [r3, #16]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	430a      	orrs	r2, r1
 8000e08:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69d9      	ldr	r1, [r3, #28]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6a1a      	ldr	r2, [r3, #32]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	430a      	orrs	r2, r1
 8000e18:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2101      	movs	r1, #1
 8000e26:	430a      	orrs	r2, r1
 8000e28:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2241      	movs	r2, #65	; 0x41
 8000e34:	2120      	movs	r1, #32
 8000e36:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2242      	movs	r2, #66	; 0x42
 8000e42:	2100      	movs	r1, #0
 8000e44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	f0ffffff 	.word	0xf0ffffff
 8000e54:	ffff7fff 	.word	0xffff7fff
 8000e58:	02008000 	.word	0x02008000

08000e5c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af02      	add	r7, sp, #8
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	0008      	movs	r0, r1
 8000e66:	607a      	str	r2, [r7, #4]
 8000e68:	0019      	movs	r1, r3
 8000e6a:	230a      	movs	r3, #10
 8000e6c:	18fb      	adds	r3, r7, r3
 8000e6e:	1c02      	adds	r2, r0, #0
 8000e70:	801a      	strh	r2, [r3, #0]
 8000e72:	2308      	movs	r3, #8
 8000e74:	18fb      	adds	r3, r7, r3
 8000e76:	1c0a      	adds	r2, r1, #0
 8000e78:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2241      	movs	r2, #65	; 0x41
 8000e7e:	5c9b      	ldrb	r3, [r3, r2]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b20      	cmp	r3, #32
 8000e84:	d000      	beq.n	8000e88 <HAL_I2C_Master_Transmit+0x2c>
 8000e86:	e0e7      	b.n	8001058 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2240      	movs	r2, #64	; 0x40
 8000e8c:	5c9b      	ldrb	r3, [r3, r2]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d101      	bne.n	8000e96 <HAL_I2C_Master_Transmit+0x3a>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e0e1      	b.n	800105a <HAL_I2C_Master_Transmit+0x1fe>
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2240      	movs	r2, #64	; 0x40
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e9e:	f7ff fcb5 	bl	800080c <HAL_GetTick>
 8000ea2:	0003      	movs	r3, r0
 8000ea4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	0219      	lsls	r1, r3, #8
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2319      	movs	r3, #25
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f000 fb1e 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 8000eb8:	1e03      	subs	r3, r0, #0
 8000eba:	d001      	beq.n	8000ec0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e0cc      	b.n	800105a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2241      	movs	r2, #65	; 0x41
 8000ec4:	2121      	movs	r1, #33	; 0x21
 8000ec6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2242      	movs	r2, #66	; 0x42
 8000ecc:	2110      	movs	r1, #16
 8000ece:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2208      	movs	r2, #8
 8000ee0:	18ba      	adds	r2, r7, r2
 8000ee2:	8812      	ldrh	r2, [r2, #0]
 8000ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	2bff      	cmp	r3, #255	; 0xff
 8000ef4:	d911      	bls.n	8000f1a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	22ff      	movs	r2, #255	; 0xff
 8000efa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	045c      	lsls	r4, r3, #17
 8000f06:	230a      	movs	r3, #10
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	8819      	ldrh	r1, [r3, #0]
 8000f0c:	68f8      	ldr	r0, [r7, #12]
 8000f0e:	4b55      	ldr	r3, [pc, #340]	; (8001064 <HAL_I2C_Master_Transmit+0x208>)
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	0023      	movs	r3, r4
 8000f14:	f000 fc8e 	bl	8001834 <I2C_TransferConfig>
 8000f18:	e075      	b.n	8001006 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	049c      	lsls	r4, r3, #18
 8000f2e:	230a      	movs	r3, #10
 8000f30:	18fb      	adds	r3, r7, r3
 8000f32:	8819      	ldrh	r1, [r3, #0]
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	4b4b      	ldr	r3, [pc, #300]	; (8001064 <HAL_I2C_Master_Transmit+0x208>)
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	0023      	movs	r3, r4
 8000f3c:	f000 fc7a 	bl	8001834 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000f40:	e061      	b.n	8001006 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f000 fb12 	bl	8001572 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f4e:	1e03      	subs	r3, r0, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e081      	b.n	800105a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5a:	781a      	ldrb	r2, [r3, #0]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f66:	1c5a      	adds	r2, r3, #1
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	3b01      	subs	r3, #1
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d03a      	beq.n	8001006 <HAL_I2C_Master_Transmit+0x1aa>
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d136      	bne.n	8001006 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	0013      	movs	r3, r2
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	f000 faa5 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 8000faa:	1e03      	subs	r3, r0, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e053      	b.n	800105a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	2bff      	cmp	r3, #255	; 0xff
 8000fba:	d911      	bls.n	8000fe0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	22ff      	movs	r2, #255	; 0xff
 8000fc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	045c      	lsls	r4, r3, #17
 8000fcc:	230a      	movs	r3, #10
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	8819      	ldrh	r1, [r3, #0]
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	0023      	movs	r3, r4
 8000fda:	f000 fc2b 	bl	8001834 <I2C_TransferConfig>
 8000fde:	e012      	b.n	8001006 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	049c      	lsls	r4, r3, #18
 8000ff4:	230a      	movs	r3, #10
 8000ff6:	18fb      	adds	r3, r7, r3
 8000ff8:	8819      	ldrh	r1, [r3, #0]
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	0023      	movs	r3, r4
 8001002:	f000 fc17 	bl	8001834 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800100a:	b29b      	uxth	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d198      	bne.n	8000f42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	0018      	movs	r0, r3
 8001018:	f000 faea 	bl	80015f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800101c:	1e03      	subs	r3, r0, #0
 800101e:	d001      	beq.n	8001024 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e01a      	b.n	800105a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2220      	movs	r2, #32
 800102a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	490c      	ldr	r1, [pc, #48]	; (8001068 <HAL_I2C_Master_Transmit+0x20c>)
 8001038:	400a      	ands	r2, r1
 800103a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2241      	movs	r2, #65	; 0x41
 8001040:	2120      	movs	r1, #32
 8001042:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2242      	movs	r2, #66	; 0x42
 8001048:	2100      	movs	r1, #0
 800104a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2240      	movs	r2, #64	; 0x40
 8001050:	2100      	movs	r1, #0
 8001052:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	e000      	b.n	800105a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001058:	2302      	movs	r3, #2
  }
}
 800105a:	0018      	movs	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	b007      	add	sp, #28
 8001060:	bd90      	pop	{r4, r7, pc}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	80002000 	.word	0x80002000
 8001068:	fe00e800 	.word	0xfe00e800

0800106c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af02      	add	r7, sp, #8
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	0008      	movs	r0, r1
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	0019      	movs	r1, r3
 800107a:	230a      	movs	r3, #10
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	1c02      	adds	r2, r0, #0
 8001080:	801a      	strh	r2, [r3, #0]
 8001082:	2308      	movs	r3, #8
 8001084:	18fb      	adds	r3, r7, r3
 8001086:	1c0a      	adds	r2, r1, #0
 8001088:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2241      	movs	r2, #65	; 0x41
 800108e:	5c9b      	ldrb	r3, [r3, r2]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b20      	cmp	r3, #32
 8001094:	d000      	beq.n	8001098 <HAL_I2C_Master_Receive+0x2c>
 8001096:	e0e8      	b.n	800126a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2240      	movs	r2, #64	; 0x40
 800109c:	5c9b      	ldrb	r3, [r3, r2]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d101      	bne.n	80010a6 <HAL_I2C_Master_Receive+0x3a>
 80010a2:	2302      	movs	r3, #2
 80010a4:	e0e2      	b.n	800126c <HAL_I2C_Master_Receive+0x200>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2240      	movs	r2, #64	; 0x40
 80010aa:	2101      	movs	r1, #1
 80010ac:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80010ae:	f7ff fbad 	bl	800080c <HAL_GetTick>
 80010b2:	0003      	movs	r3, r0
 80010b4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	0219      	lsls	r1, r3, #8
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2319      	movs	r3, #25
 80010c2:	2201      	movs	r2, #1
 80010c4:	f000 fa16 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 80010c8:	1e03      	subs	r3, r0, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e0cd      	b.n	800126c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2241      	movs	r2, #65	; 0x41
 80010d4:	2122      	movs	r1, #34	; 0x22
 80010d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2242      	movs	r2, #66	; 0x42
 80010dc:	2110      	movs	r1, #16
 80010de:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2200      	movs	r2, #0
 80010e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2208      	movs	r2, #8
 80010f0:	18ba      	adds	r2, r7, r2
 80010f2:	8812      	ldrh	r2, [r2, #0]
 80010f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2200      	movs	r2, #0
 80010fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001100:	b29b      	uxth	r3, r3
 8001102:	2bff      	cmp	r3, #255	; 0xff
 8001104:	d911      	bls.n	800112a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	22ff      	movs	r2, #255	; 0xff
 800110a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001110:	b2da      	uxtb	r2, r3
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	045c      	lsls	r4, r3, #17
 8001116:	230a      	movs	r3, #10
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	8819      	ldrh	r1, [r3, #0]
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	4b55      	ldr	r3, [pc, #340]	; (8001274 <HAL_I2C_Master_Receive+0x208>)
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	0023      	movs	r3, r4
 8001124:	f000 fb86 	bl	8001834 <I2C_TransferConfig>
 8001128:	e076      	b.n	8001218 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800112e:	b29a      	uxth	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001138:	b2da      	uxtb	r2, r3
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	049c      	lsls	r4, r3, #18
 800113e:	230a      	movs	r3, #10
 8001140:	18fb      	adds	r3, r7, r3
 8001142:	8819      	ldrh	r1, [r3, #0]
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	4b4b      	ldr	r3, [pc, #300]	; (8001274 <HAL_I2C_Master_Receive+0x208>)
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	0023      	movs	r3, r4
 800114c:	f000 fb72 	bl	8001834 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001150:	e062      	b.n	8001218 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	0018      	movs	r0, r3
 800115a:	f000 fa85 	bl	8001668 <I2C_WaitOnRXNEFlagUntilTimeout>
 800115e:	1e03      	subs	r3, r0, #0
 8001160:	d001      	beq.n	8001166 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e082      	b.n	800126c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001182:	3b01      	subs	r3, #1
 8001184:	b29a      	uxth	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800118e:	b29b      	uxth	r3, r3
 8001190:	3b01      	subs	r3, #1
 8001192:	b29a      	uxth	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800119c:	b29b      	uxth	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d03a      	beq.n	8001218 <HAL_I2C_Master_Receive+0x1ac>
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d136      	bne.n	8001218 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	0013      	movs	r3, r2
 80011b4:	2200      	movs	r2, #0
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	f000 f99c 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 80011bc:	1e03      	subs	r3, r0, #0
 80011be:	d001      	beq.n	80011c4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e053      	b.n	800126c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	2bff      	cmp	r3, #255	; 0xff
 80011cc:	d911      	bls.n	80011f2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	22ff      	movs	r2, #255	; 0xff
 80011d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	2380      	movs	r3, #128	; 0x80
 80011dc:	045c      	lsls	r4, r3, #17
 80011de:	230a      	movs	r3, #10
 80011e0:	18fb      	adds	r3, r7, r3
 80011e2:	8819      	ldrh	r1, [r3, #0]
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	2300      	movs	r3, #0
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	0023      	movs	r3, r4
 80011ec:	f000 fb22 	bl	8001834 <I2C_TransferConfig>
 80011f0:	e012      	b.n	8001218 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001200:	b2da      	uxtb	r2, r3
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	049c      	lsls	r4, r3, #18
 8001206:	230a      	movs	r3, #10
 8001208:	18fb      	adds	r3, r7, r3
 800120a:	8819      	ldrh	r1, [r3, #0]
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	2300      	movs	r3, #0
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	0023      	movs	r3, r4
 8001214:	f000 fb0e 	bl	8001834 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800121c:	b29b      	uxth	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d197      	bne.n	8001152 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	0018      	movs	r0, r3
 800122a:	f000 f9e1 	bl	80015f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800122e:	1e03      	subs	r3, r0, #0
 8001230:	d001      	beq.n	8001236 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e01a      	b.n	800126c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2220      	movs	r2, #32
 800123c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	490b      	ldr	r1, [pc, #44]	; (8001278 <HAL_I2C_Master_Receive+0x20c>)
 800124a:	400a      	ands	r2, r1
 800124c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2241      	movs	r2, #65	; 0x41
 8001252:	2120      	movs	r1, #32
 8001254:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2242      	movs	r2, #66	; 0x42
 800125a:	2100      	movs	r1, #0
 800125c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2240      	movs	r2, #64	; 0x40
 8001262:	2100      	movs	r1, #0
 8001264:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	e000      	b.n	800126c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800126a:	2302      	movs	r3, #2
  }
}
 800126c:	0018      	movs	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	b007      	add	sp, #28
 8001272:	bd90      	pop	{r4, r7, pc}
 8001274:	80002400 	.word	0x80002400
 8001278:	fe00e800 	.word	0xfe00e800

0800127c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af02      	add	r7, sp, #8
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	230a      	movs	r3, #10
 800128a:	18fb      	adds	r3, r7, r3
 800128c:	1c0a      	adds	r2, r1, #0
 800128e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2241      	movs	r2, #65	; 0x41
 8001298:	5c9b      	ldrb	r3, [r3, r2]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b20      	cmp	r3, #32
 800129e:	d000      	beq.n	80012a2 <HAL_I2C_IsDeviceReady+0x26>
 80012a0:	e0fe      	b.n	80014a0 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	699a      	ldr	r2, [r3, #24]
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	401a      	ands	r2, r3
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d101      	bne.n	80012ba <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80012b6:	2302      	movs	r3, #2
 80012b8:	e0f3      	b.n	80014a2 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2240      	movs	r2, #64	; 0x40
 80012be:	5c9b      	ldrb	r3, [r3, r2]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d101      	bne.n	80012c8 <HAL_I2C_IsDeviceReady+0x4c>
 80012c4:	2302      	movs	r3, #2
 80012c6:	e0ec      	b.n	80014a2 <HAL_I2C_IsDeviceReady+0x226>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2240      	movs	r2, #64	; 0x40
 80012cc:	2101      	movs	r1, #1
 80012ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2241      	movs	r2, #65	; 0x41
 80012d4:	2124      	movs	r1, #36	; 0x24
 80012d6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d107      	bne.n	80012f6 <HAL_I2C_IsDeviceReady+0x7a>
 80012e6:	230a      	movs	r3, #10
 80012e8:	18fb      	adds	r3, r7, r3
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	059b      	lsls	r3, r3, #22
 80012ee:	0d9b      	lsrs	r3, r3, #22
 80012f0:	4a6e      	ldr	r2, [pc, #440]	; (80014ac <HAL_I2C_IsDeviceReady+0x230>)
 80012f2:	431a      	orrs	r2, r3
 80012f4:	e007      	b.n	8001306 <HAL_I2C_IsDeviceReady+0x8a>
 80012f6:	230a      	movs	r3, #10
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	059b      	lsls	r3, r3, #22
 80012fe:	0d9b      	lsrs	r3, r3, #22
 8001300:	22a0      	movs	r2, #160	; 0xa0
 8001302:	0192      	lsls	r2, r2, #6
 8001304:	431a      	orrs	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800130c:	f7ff fa7e 	bl	800080c <HAL_GetTick>
 8001310:	0003      	movs	r3, r0
 8001312:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	2220      	movs	r2, #32
 800131c:	4013      	ands	r3, r2
 800131e:	3b20      	subs	r3, #32
 8001320:	425a      	negs	r2, r3
 8001322:	4153      	adcs	r3, r2
 8001324:	b2da      	uxtb	r2, r3
 8001326:	231f      	movs	r3, #31
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	2210      	movs	r2, #16
 8001334:	4013      	ands	r3, r2
 8001336:	3b10      	subs	r3, #16
 8001338:	425a      	negs	r2, r3
 800133a:	4153      	adcs	r3, r2
 800133c:	b2da      	uxtb	r2, r3
 800133e:	231e      	movs	r3, #30
 8001340:	18fb      	adds	r3, r7, r3
 8001342:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001344:	e035      	b.n	80013b2 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	d01a      	beq.n	8001382 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800134c:	f7ff fa5e 	bl	800080c <HAL_GetTick>
 8001350:	0002      	movs	r2, r0
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	d302      	bcc.n	8001362 <HAL_I2C_IsDeviceReady+0xe6>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10f      	bne.n	8001382 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2241      	movs	r2, #65	; 0x41
 8001366:	2120      	movs	r1, #32
 8001368:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	2220      	movs	r2, #32
 8001370:	431a      	orrs	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2240      	movs	r2, #64	; 0x40
 800137a:	2100      	movs	r1, #0
 800137c:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e08f      	b.n	80014a2 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	2220      	movs	r2, #32
 800138a:	4013      	ands	r3, r2
 800138c:	3b20      	subs	r3, #32
 800138e:	425a      	negs	r2, r3
 8001390:	4153      	adcs	r3, r2
 8001392:	b2da      	uxtb	r2, r3
 8001394:	231f      	movs	r3, #31
 8001396:	18fb      	adds	r3, r7, r3
 8001398:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	2210      	movs	r2, #16
 80013a2:	4013      	ands	r3, r2
 80013a4:	3b10      	subs	r3, #16
 80013a6:	425a      	negs	r2, r3
 80013a8:	4153      	adcs	r3, r2
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	231e      	movs	r3, #30
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80013b2:	231f      	movs	r3, #31
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d104      	bne.n	80013c6 <HAL_I2C_IsDeviceReady+0x14a>
 80013bc:	231e      	movs	r3, #30
 80013be:	18fb      	adds	r3, r7, r3
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0bf      	beq.n	8001346 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	2210      	movs	r2, #16
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b10      	cmp	r3, #16
 80013d2:	d01a      	beq.n	800140a <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	0013      	movs	r3, r2
 80013de:	2200      	movs	r2, #0
 80013e0:	2120      	movs	r1, #32
 80013e2:	f000 f887 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 80013e6:	1e03      	subs	r3, r0, #0
 80013e8:	d001      	beq.n	80013ee <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e059      	b.n	80014a2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2220      	movs	r2, #32
 80013f4:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2241      	movs	r2, #65	; 0x41
 80013fa:	2120      	movs	r1, #32
 80013fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2240      	movs	r2, #64	; 0x40
 8001402:	2100      	movs	r1, #0
 8001404:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e04b      	b.n	80014a2 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	0013      	movs	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	2120      	movs	r1, #32
 8001418:	f000 f86c 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 800141c:	1e03      	subs	r3, r0, #0
 800141e:	d001      	beq.n	8001424 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e03e      	b.n	80014a2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2210      	movs	r2, #16
 800142a:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2220      	movs	r2, #32
 8001432:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	429a      	cmp	r2, r3
 800143a:	d119      	bne.n	8001470 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2180      	movs	r1, #128	; 0x80
 8001448:	01c9      	lsls	r1, r1, #7
 800144a:	430a      	orrs	r2, r1
 800144c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	0013      	movs	r3, r2
 8001458:	2200      	movs	r2, #0
 800145a:	2120      	movs	r1, #32
 800145c:	f000 f84a 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 8001460:	1e03      	subs	r3, r0, #0
 8001462:	d001      	beq.n	8001468 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e01c      	b.n	80014a2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2220      	movs	r2, #32
 800146e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	3301      	adds	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	429a      	cmp	r2, r3
 800147c:	d900      	bls.n	8001480 <HAL_I2C_IsDeviceReady+0x204>
 800147e:	e72e      	b.n	80012de <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2241      	movs	r2, #65	; 0x41
 8001484:	2120      	movs	r1, #32
 8001486:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148c:	2220      	movs	r2, #32
 800148e:	431a      	orrs	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2240      	movs	r2, #64	; 0x40
 8001498:	2100      	movs	r1, #0
 800149a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 80014a0:	2302      	movs	r3, #2
  }
}
 80014a2:	0018      	movs	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b008      	add	sp, #32
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	02002000 	.word	0x02002000

080014b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	2202      	movs	r2, #2
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d103      	bne.n	80014ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2200      	movs	r2, #0
 80014cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	2201      	movs	r2, #1
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d007      	beq.n	80014ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	699a      	ldr	r2, [r3, #24]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2101      	movs	r1, #1
 80014e8:	430a      	orrs	r2, r1
 80014ea:	619a      	str	r2, [r3, #24]
  }
}
 80014ec:	46c0      	nop			; (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b002      	add	sp, #8
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	1dfb      	adds	r3, r7, #7
 8001502:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001504:	e021      	b.n	800154a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	d01e      	beq.n	800154a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800150c:	f7ff f97e 	bl	800080c <HAL_GetTick>
 8001510:	0002      	movs	r2, r0
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d302      	bcc.n	8001522 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d113      	bne.n	800154a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	2220      	movs	r2, #32
 8001528:	431a      	orrs	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2241      	movs	r2, #65	; 0x41
 8001532:	2120      	movs	r1, #32
 8001534:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2242      	movs	r2, #66	; 0x42
 800153a:	2100      	movs	r1, #0
 800153c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2240      	movs	r2, #64	; 0x40
 8001542:	2100      	movs	r1, #0
 8001544:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e00f      	b.n	800156a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	68ba      	ldr	r2, [r7, #8]
 8001552:	4013      	ands	r3, r2
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	425a      	negs	r2, r3
 800155a:	4153      	adcs	r3, r2
 800155c:	b2db      	uxtb	r3, r3
 800155e:	001a      	movs	r2, r3
 8001560:	1dfb      	adds	r3, r7, #7
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d0ce      	beq.n	8001506 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	0018      	movs	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	b004      	add	sp, #16
 8001570:	bd80      	pop	{r7, pc}

08001572 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800157e:	e02b      	b.n	80015d8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	68b9      	ldr	r1, [r7, #8]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	0018      	movs	r0, r3
 8001588:	f000 f8da 	bl	8001740 <I2C_IsAcknowledgeFailed>
 800158c:	1e03      	subs	r3, r0, #0
 800158e:	d001      	beq.n	8001594 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e029      	b.n	80015e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	3301      	adds	r3, #1
 8001598:	d01e      	beq.n	80015d8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800159a:	f7ff f937 	bl	800080c <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d302      	bcc.n	80015b0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d113      	bne.n	80015d8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	2220      	movs	r2, #32
 80015b6:	431a      	orrs	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2241      	movs	r2, #65	; 0x41
 80015c0:	2120      	movs	r1, #32
 80015c2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2242      	movs	r2, #66	; 0x42
 80015c8:	2100      	movs	r1, #0
 80015ca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2240      	movs	r2, #64	; 0x40
 80015d0:	2100      	movs	r1, #0
 80015d2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e007      	b.n	80015e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2202      	movs	r2, #2
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d1cc      	bne.n	8001580 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	0018      	movs	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b004      	add	sp, #16
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015fc:	e028      	b.n	8001650 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	0018      	movs	r0, r3
 8001606:	f000 f89b 	bl	8001740 <I2C_IsAcknowledgeFailed>
 800160a:	1e03      	subs	r3, r0, #0
 800160c:	d001      	beq.n	8001612 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e026      	b.n	8001660 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001612:	f7ff f8fb 	bl	800080c <HAL_GetTick>
 8001616:	0002      	movs	r2, r0
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	429a      	cmp	r2, r3
 8001620:	d302      	bcc.n	8001628 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d113      	bne.n	8001650 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162c:	2220      	movs	r2, #32
 800162e:	431a      	orrs	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2241      	movs	r2, #65	; 0x41
 8001638:	2120      	movs	r1, #32
 800163a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2242      	movs	r2, #66	; 0x42
 8001640:	2100      	movs	r1, #0
 8001642:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2240      	movs	r2, #64	; 0x40
 8001648:	2100      	movs	r1, #0
 800164a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e007      	b.n	8001660 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2220      	movs	r2, #32
 8001658:	4013      	ands	r3, r2
 800165a:	2b20      	cmp	r3, #32
 800165c:	d1cf      	bne.n	80015fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	0018      	movs	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	b004      	add	sp, #16
 8001666:	bd80      	pop	{r7, pc}

08001668 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001674:	e055      	b.n	8001722 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	0018      	movs	r0, r3
 800167e:	f000 f85f 	bl	8001740 <I2C_IsAcknowledgeFailed>
 8001682:	1e03      	subs	r3, r0, #0
 8001684:	d001      	beq.n	800168a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e053      	b.n	8001732 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2220      	movs	r2, #32
 8001692:	4013      	ands	r3, r2
 8001694:	2b20      	cmp	r3, #32
 8001696:	d129      	bne.n	80016ec <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	2204      	movs	r2, #4
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d105      	bne.n	80016b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e03f      	b.n	8001732 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2220      	movs	r2, #32
 80016b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	491d      	ldr	r1, [pc, #116]	; (800173c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80016c6:	400a      	ands	r2, r1
 80016c8:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2241      	movs	r2, #65	; 0x41
 80016d4:	2120      	movs	r1, #32
 80016d6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2242      	movs	r2, #66	; 0x42
 80016dc:	2100      	movs	r1, #0
 80016de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2240      	movs	r2, #64	; 0x40
 80016e4:	2100      	movs	r1, #0
 80016e6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e022      	b.n	8001732 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ec:	f7ff f88e 	bl	800080c <HAL_GetTick>
 80016f0:	0002      	movs	r2, r0
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d302      	bcc.n	8001702 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10f      	bne.n	8001722 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	2220      	movs	r2, #32
 8001708:	431a      	orrs	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2241      	movs	r2, #65	; 0x41
 8001712:	2120      	movs	r1, #32
 8001714:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2240      	movs	r2, #64	; 0x40
 800171a:	2100      	movs	r1, #0
 800171c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e007      	b.n	8001732 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	2204      	movs	r2, #4
 800172a:	4013      	ands	r3, r2
 800172c:	2b04      	cmp	r3, #4
 800172e:	d1a2      	bne.n	8001676 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	0018      	movs	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	b004      	add	sp, #16
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	fe00e800 	.word	0xfe00e800

08001740 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2210      	movs	r2, #16
 8001754:	4013      	ands	r3, r2
 8001756:	2b10      	cmp	r3, #16
 8001758:	d164      	bne.n	8001824 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	049b      	lsls	r3, r3, #18
 8001764:	401a      	ands	r2, r3
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	049b      	lsls	r3, r3, #18
 800176a:	429a      	cmp	r2, r3
 800176c:	d02b      	beq.n	80017c6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2180      	movs	r1, #128	; 0x80
 800177a:	01c9      	lsls	r1, r1, #7
 800177c:	430a      	orrs	r2, r1
 800177e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001780:	e021      	b.n	80017c6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	3301      	adds	r3, #1
 8001786:	d01e      	beq.n	80017c6 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001788:	f7ff f840 	bl	800080c <HAL_GetTick>
 800178c:	0002      	movs	r2, r0
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	429a      	cmp	r2, r3
 8001796:	d302      	bcc.n	800179e <I2C_IsAcknowledgeFailed+0x5e>
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d113      	bne.n	80017c6 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	2220      	movs	r2, #32
 80017a4:	431a      	orrs	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2241      	movs	r2, #65	; 0x41
 80017ae:	2120      	movs	r1, #32
 80017b0:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2242      	movs	r2, #66	; 0x42
 80017b6:	2100      	movs	r1, #0
 80017b8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2240      	movs	r2, #64	; 0x40
 80017be:	2100      	movs	r1, #0
 80017c0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e02f      	b.n	8001826 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	2220      	movs	r2, #32
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b20      	cmp	r3, #32
 80017d2:	d1d6      	bne.n	8001782 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2210      	movs	r2, #16
 80017da:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2220      	movs	r2, #32
 80017e2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	0018      	movs	r0, r3
 80017e8:	f7ff fe62 	bl	80014b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	490e      	ldr	r1, [pc, #56]	; (8001830 <I2C_IsAcknowledgeFailed+0xf0>)
 80017f8:	400a      	ands	r2, r1
 80017fa:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	2204      	movs	r2, #4
 8001802:	431a      	orrs	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2241      	movs	r2, #65	; 0x41
 800180c:	2120      	movs	r1, #32
 800180e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2242      	movs	r2, #66	; 0x42
 8001814:	2100      	movs	r1, #0
 8001816:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2240      	movs	r2, #64	; 0x40
 800181c:	2100      	movs	r1, #0
 800181e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	0018      	movs	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	b004      	add	sp, #16
 800182c:	bd80      	pop	{r7, pc}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	fe00e800 	.word	0xfe00e800

08001834 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	0008      	movs	r0, r1
 800183e:	0011      	movs	r1, r2
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	240a      	movs	r4, #10
 8001844:	193b      	adds	r3, r7, r4
 8001846:	1c02      	adds	r2, r0, #0
 8001848:	801a      	strh	r2, [r3, #0]
 800184a:	2009      	movs	r0, #9
 800184c:	183b      	adds	r3, r7, r0
 800184e:	1c0a      	adds	r2, r1, #0
 8001850:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	6a3a      	ldr	r2, [r7, #32]
 800185a:	0d51      	lsrs	r1, r2, #21
 800185c:	2280      	movs	r2, #128	; 0x80
 800185e:	00d2      	lsls	r2, r2, #3
 8001860:	400a      	ands	r2, r1
 8001862:	490e      	ldr	r1, [pc, #56]	; (800189c <I2C_TransferConfig+0x68>)
 8001864:	430a      	orrs	r2, r1
 8001866:	43d2      	mvns	r2, r2
 8001868:	401a      	ands	r2, r3
 800186a:	0011      	movs	r1, r2
 800186c:	193b      	adds	r3, r7, r4
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	059b      	lsls	r3, r3, #22
 8001872:	0d9a      	lsrs	r2, r3, #22
 8001874:	183b      	adds	r3, r7, r0
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	0418      	lsls	r0, r3, #16
 800187a:	23ff      	movs	r3, #255	; 0xff
 800187c:	041b      	lsls	r3, r3, #16
 800187e:	4003      	ands	r3, r0
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	431a      	orrs	r2, r3
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	431a      	orrs	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	b005      	add	sp, #20
 8001898:	bd90      	pop	{r4, r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	03ff63ff 	.word	0x03ff63ff

080018a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2241      	movs	r2, #65	; 0x41
 80018ae:	5c9b      	ldrb	r3, [r3, r2]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b20      	cmp	r3, #32
 80018b4:	d138      	bne.n	8001928 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2240      	movs	r2, #64	; 0x40
 80018ba:	5c9b      	ldrb	r3, [r3, r2]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d101      	bne.n	80018c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e032      	b.n	800192a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2240      	movs	r2, #64	; 0x40
 80018c8:	2101      	movs	r1, #1
 80018ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2241      	movs	r2, #65	; 0x41
 80018d0:	2124      	movs	r1, #36	; 0x24
 80018d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2101      	movs	r1, #1
 80018e0:	438a      	bics	r2, r1
 80018e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4911      	ldr	r1, [pc, #68]	; (8001934 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80018f0:	400a      	ands	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6819      	ldr	r1, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2101      	movs	r1, #1
 8001910:	430a      	orrs	r2, r1
 8001912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2241      	movs	r2, #65	; 0x41
 8001918:	2120      	movs	r1, #32
 800191a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2240      	movs	r2, #64	; 0x40
 8001920:	2100      	movs	r1, #0
 8001922:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	e000      	b.n	800192a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001928:	2302      	movs	r3, #2
  }
}
 800192a:	0018      	movs	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	b002      	add	sp, #8
 8001930:	bd80      	pop	{r7, pc}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	ffffefff 	.word	0xffffefff

08001938 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2241      	movs	r2, #65	; 0x41
 8001946:	5c9b      	ldrb	r3, [r3, r2]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b20      	cmp	r3, #32
 800194c:	d139      	bne.n	80019c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2240      	movs	r2, #64	; 0x40
 8001952:	5c9b      	ldrb	r3, [r3, r2]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d101      	bne.n	800195c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001958:	2302      	movs	r3, #2
 800195a:	e033      	b.n	80019c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2240      	movs	r2, #64	; 0x40
 8001960:	2101      	movs	r1, #1
 8001962:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2241      	movs	r2, #65	; 0x41
 8001968:	2124      	movs	r1, #36	; 0x24
 800196a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2101      	movs	r1, #1
 8001978:	438a      	bics	r2, r1
 800197a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4a11      	ldr	r2, [pc, #68]	; (80019cc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001988:	4013      	ands	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2101      	movs	r1, #1
 80019aa:	430a      	orrs	r2, r1
 80019ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2241      	movs	r2, #65	; 0x41
 80019b2:	2120      	movs	r1, #32
 80019b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2240      	movs	r2, #64	; 0x40
 80019ba:	2100      	movs	r1, #0
 80019bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	e000      	b.n	80019c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019c2:	2302      	movs	r3, #2
  }
}
 80019c4:	0018      	movs	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b004      	add	sp, #16
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	fffff0ff 	.word	0xfffff0ff

080019d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d102      	bne.n	80019e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	f000 fb76 	bl	80020d0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2201      	movs	r2, #1
 80019ea:	4013      	ands	r3, r2
 80019ec:	d100      	bne.n	80019f0 <HAL_RCC_OscConfig+0x20>
 80019ee:	e08e      	b.n	8001b0e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019f0:	4bc5      	ldr	r3, [pc, #788]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	220c      	movs	r2, #12
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d00e      	beq.n	8001a1a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019fc:	4bc2      	ldr	r3, [pc, #776]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	220c      	movs	r2, #12
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d117      	bne.n	8001a38 <HAL_RCC_OscConfig+0x68>
 8001a08:	4bbf      	ldr	r3, [pc, #764]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	23c0      	movs	r3, #192	; 0xc0
 8001a0e:	025b      	lsls	r3, r3, #9
 8001a10:	401a      	ands	r2, r3
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	025b      	lsls	r3, r3, #9
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d10e      	bne.n	8001a38 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1a:	4bbb      	ldr	r3, [pc, #748]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	029b      	lsls	r3, r3, #10
 8001a22:	4013      	ands	r3, r2
 8001a24:	d100      	bne.n	8001a28 <HAL_RCC_OscConfig+0x58>
 8001a26:	e071      	b.n	8001b0c <HAL_RCC_OscConfig+0x13c>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d000      	beq.n	8001a32 <HAL_RCC_OscConfig+0x62>
 8001a30:	e06c      	b.n	8001b0c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	f000 fb4c 	bl	80020d0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d107      	bne.n	8001a50 <HAL_RCC_OscConfig+0x80>
 8001a40:	4bb1      	ldr	r3, [pc, #708]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4bb0      	ldr	r3, [pc, #704]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001a46:	2180      	movs	r1, #128	; 0x80
 8001a48:	0249      	lsls	r1, r1, #9
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e02f      	b.n	8001ab0 <HAL_RCC_OscConfig+0xe0>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10c      	bne.n	8001a72 <HAL_RCC_OscConfig+0xa2>
 8001a58:	4bab      	ldr	r3, [pc, #684]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4baa      	ldr	r3, [pc, #680]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001a5e:	49ab      	ldr	r1, [pc, #684]	; (8001d0c <HAL_RCC_OscConfig+0x33c>)
 8001a60:	400a      	ands	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	4ba8      	ldr	r3, [pc, #672]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4ba7      	ldr	r3, [pc, #668]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001a6a:	49a9      	ldr	r1, [pc, #676]	; (8001d10 <HAL_RCC_OscConfig+0x340>)
 8001a6c:	400a      	ands	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	e01e      	b.n	8001ab0 <HAL_RCC_OscConfig+0xe0>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b05      	cmp	r3, #5
 8001a78:	d10e      	bne.n	8001a98 <HAL_RCC_OscConfig+0xc8>
 8001a7a:	4ba3      	ldr	r3, [pc, #652]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	4ba2      	ldr	r3, [pc, #648]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001a80:	2180      	movs	r1, #128	; 0x80
 8001a82:	02c9      	lsls	r1, r1, #11
 8001a84:	430a      	orrs	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	4b9f      	ldr	r3, [pc, #636]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b9e      	ldr	r3, [pc, #632]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001a8e:	2180      	movs	r1, #128	; 0x80
 8001a90:	0249      	lsls	r1, r1, #9
 8001a92:	430a      	orrs	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	e00b      	b.n	8001ab0 <HAL_RCC_OscConfig+0xe0>
 8001a98:	4b9b      	ldr	r3, [pc, #620]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b9a      	ldr	r3, [pc, #616]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001a9e:	499b      	ldr	r1, [pc, #620]	; (8001d0c <HAL_RCC_OscConfig+0x33c>)
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	4b98      	ldr	r3, [pc, #608]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b97      	ldr	r3, [pc, #604]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001aaa:	4999      	ldr	r1, [pc, #612]	; (8001d10 <HAL_RCC_OscConfig+0x340>)
 8001aac:	400a      	ands	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d014      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7fe fea8 	bl	800080c <HAL_GetTick>
 8001abc:	0003      	movs	r3, r0
 8001abe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac2:	f7fe fea3 	bl	800080c <HAL_GetTick>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b64      	cmp	r3, #100	; 0x64
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e2fd      	b.n	80020d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad4:	4b8c      	ldr	r3, [pc, #560]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	029b      	lsls	r3, r3, #10
 8001adc:	4013      	ands	r3, r2
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0xf2>
 8001ae0:	e015      	b.n	8001b0e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae2:	f7fe fe93 	bl	800080c <HAL_GetTick>
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aec:	f7fe fe8e 	bl	800080c <HAL_GetTick>
 8001af0:	0002      	movs	r2, r0
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b64      	cmp	r3, #100	; 0x64
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e2e8      	b.n	80020d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afe:	4b82      	ldr	r3, [pc, #520]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	029b      	lsls	r3, r3, #10
 8001b06:	4013      	ands	r3, r2
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x11c>
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2202      	movs	r2, #2
 8001b14:	4013      	ands	r3, r2
 8001b16:	d100      	bne.n	8001b1a <HAL_RCC_OscConfig+0x14a>
 8001b18:	e06c      	b.n	8001bf4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b1a:	4b7b      	ldr	r3, [pc, #492]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	220c      	movs	r2, #12
 8001b20:	4013      	ands	r3, r2
 8001b22:	d00e      	beq.n	8001b42 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b24:	4b78      	ldr	r3, [pc, #480]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	220c      	movs	r2, #12
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d11f      	bne.n	8001b70 <HAL_RCC_OscConfig+0x1a0>
 8001b30:	4b75      	ldr	r3, [pc, #468]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	23c0      	movs	r3, #192	; 0xc0
 8001b36:	025b      	lsls	r3, r3, #9
 8001b38:	401a      	ands	r2, r3
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d116      	bne.n	8001b70 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b42:	4b71      	ldr	r3, [pc, #452]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2202      	movs	r2, #2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_OscConfig+0x188>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e2bb      	b.n	80020d0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b58:	4b6b      	ldr	r3, [pc, #428]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	22f8      	movs	r2, #248	; 0xf8
 8001b5e:	4393      	bics	r3, r2
 8001b60:	0019      	movs	r1, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	00da      	lsls	r2, r3, #3
 8001b68:	4b67      	ldr	r3, [pc, #412]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6e:	e041      	b.n	8001bf4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d024      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b78:	4b63      	ldr	r3, [pc, #396]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b62      	ldr	r3, [pc, #392]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001b7e:	2101      	movs	r1, #1
 8001b80:	430a      	orrs	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7fe fe42 	bl	800080c <HAL_GetTick>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b8e:	f7fe fe3d 	bl	800080c <HAL_GetTick>
 8001b92:	0002      	movs	r2, r0
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e297      	b.n	80020d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba0:	4b59      	ldr	r3, [pc, #356]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d0f1      	beq.n	8001b8e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001baa:	4b57      	ldr	r3, [pc, #348]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	22f8      	movs	r2, #248	; 0xf8
 8001bb0:	4393      	bics	r3, r2
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	00da      	lsls	r2, r3, #3
 8001bba:	4b53      	ldr	r3, [pc, #332]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	e018      	b.n	8001bf4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bc2:	4b51      	ldr	r3, [pc, #324]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4b50      	ldr	r3, [pc, #320]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001bc8:	2101      	movs	r1, #1
 8001bca:	438a      	bics	r2, r1
 8001bcc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7fe fe1d 	bl	800080c <HAL_GetTick>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd8:	f7fe fe18 	bl	800080c <HAL_GetTick>
 8001bdc:	0002      	movs	r2, r0
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e272      	b.n	80020d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bea:	4b47      	ldr	r3, [pc, #284]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d1f1      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2208      	movs	r2, #8
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d036      	beq.n	8001c6c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d019      	beq.n	8001c3a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c06:	4b40      	ldr	r3, [pc, #256]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001c08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c0a:	4b3f      	ldr	r3, [pc, #252]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c12:	f7fe fdfb 	bl	800080c <HAL_GetTick>
 8001c16:	0003      	movs	r3, r0
 8001c18:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c1c:	f7fe fdf6 	bl	800080c <HAL_GetTick>
 8001c20:	0002      	movs	r2, r0
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e250      	b.n	80020d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2e:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	2202      	movs	r2, #2
 8001c34:	4013      	ands	r3, r2
 8001c36:	d0f1      	beq.n	8001c1c <HAL_RCC_OscConfig+0x24c>
 8001c38:	e018      	b.n	8001c6c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c3a:	4b33      	ldr	r3, [pc, #204]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c3e:	4b32      	ldr	r3, [pc, #200]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001c40:	2101      	movs	r1, #1
 8001c42:	438a      	bics	r2, r1
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c46:	f7fe fde1 	bl	800080c <HAL_GetTick>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c50:	f7fe fddc 	bl	800080c <HAL_GetTick>
 8001c54:	0002      	movs	r2, r0
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e236      	b.n	80020d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c62:	4b29      	ldr	r3, [pc, #164]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	2202      	movs	r2, #2
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d1f1      	bne.n	8001c50 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2204      	movs	r2, #4
 8001c72:	4013      	ands	r3, r2
 8001c74:	d100      	bne.n	8001c78 <HAL_RCC_OscConfig+0x2a8>
 8001c76:	e0b5      	b.n	8001de4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c78:	201f      	movs	r0, #31
 8001c7a:	183b      	adds	r3, r7, r0
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c80:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001c82:	69da      	ldr	r2, [r3, #28]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	055b      	lsls	r3, r3, #21
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d110      	bne.n	8001cae <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001c8e:	69da      	ldr	r2, [r3, #28]
 8001c90:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001c92:	2180      	movs	r1, #128	; 0x80
 8001c94:	0549      	lsls	r1, r1, #21
 8001c96:	430a      	orrs	r2, r1
 8001c98:	61da      	str	r2, [r3, #28]
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001c9c:	69da      	ldr	r2, [r3, #28]
 8001c9e:	2380      	movs	r3, #128	; 0x80
 8001ca0:	055b      	lsls	r3, r3, #21
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ca8:	183b      	adds	r3, r7, r0
 8001caa:	2201      	movs	r2, #1
 8001cac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cae:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <HAL_RCC_OscConfig+0x344>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d11a      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <HAL_RCC_OscConfig+0x344>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <HAL_RCC_OscConfig+0x344>)
 8001cc0:	2180      	movs	r1, #128	; 0x80
 8001cc2:	0049      	lsls	r1, r1, #1
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc8:	f7fe fda0 	bl	800080c <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd2:	f7fe fd9b 	bl	800080c <HAL_GetTick>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b64      	cmp	r3, #100	; 0x64
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e1f5      	b.n	80020d0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_RCC_OscConfig+0x344>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4013      	ands	r3, r2
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d10f      	bne.n	8001d18 <HAL_RCC_OscConfig+0x348>
 8001cf8:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001cfa:	6a1a      	ldr	r2, [r3, #32]
 8001cfc:	4b02      	ldr	r3, [pc, #8]	; (8001d08 <HAL_RCC_OscConfig+0x338>)
 8001cfe:	2101      	movs	r1, #1
 8001d00:	430a      	orrs	r2, r1
 8001d02:	621a      	str	r2, [r3, #32]
 8001d04:	e036      	b.n	8001d74 <HAL_RCC_OscConfig+0x3a4>
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	fffeffff 	.word	0xfffeffff
 8001d10:	fffbffff 	.word	0xfffbffff
 8001d14:	40007000 	.word	0x40007000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10c      	bne.n	8001d3a <HAL_RCC_OscConfig+0x36a>
 8001d20:	4bca      	ldr	r3, [pc, #808]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001d22:	6a1a      	ldr	r2, [r3, #32]
 8001d24:	4bc9      	ldr	r3, [pc, #804]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001d26:	2101      	movs	r1, #1
 8001d28:	438a      	bics	r2, r1
 8001d2a:	621a      	str	r2, [r3, #32]
 8001d2c:	4bc7      	ldr	r3, [pc, #796]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001d2e:	6a1a      	ldr	r2, [r3, #32]
 8001d30:	4bc6      	ldr	r3, [pc, #792]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001d32:	2104      	movs	r1, #4
 8001d34:	438a      	bics	r2, r1
 8001d36:	621a      	str	r2, [r3, #32]
 8001d38:	e01c      	b.n	8001d74 <HAL_RCC_OscConfig+0x3a4>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b05      	cmp	r3, #5
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x38c>
 8001d42:	4bc2      	ldr	r3, [pc, #776]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001d44:	6a1a      	ldr	r2, [r3, #32]
 8001d46:	4bc1      	ldr	r3, [pc, #772]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001d48:	2104      	movs	r1, #4
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	621a      	str	r2, [r3, #32]
 8001d4e:	4bbf      	ldr	r3, [pc, #764]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001d50:	6a1a      	ldr	r2, [r3, #32]
 8001d52:	4bbe      	ldr	r3, [pc, #760]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001d54:	2101      	movs	r1, #1
 8001d56:	430a      	orrs	r2, r1
 8001d58:	621a      	str	r2, [r3, #32]
 8001d5a:	e00b      	b.n	8001d74 <HAL_RCC_OscConfig+0x3a4>
 8001d5c:	4bbb      	ldr	r3, [pc, #748]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001d5e:	6a1a      	ldr	r2, [r3, #32]
 8001d60:	4bba      	ldr	r3, [pc, #744]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001d62:	2101      	movs	r1, #1
 8001d64:	438a      	bics	r2, r1
 8001d66:	621a      	str	r2, [r3, #32]
 8001d68:	4bb8      	ldr	r3, [pc, #736]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001d6a:	6a1a      	ldr	r2, [r3, #32]
 8001d6c:	4bb7      	ldr	r3, [pc, #732]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001d6e:	2104      	movs	r1, #4
 8001d70:	438a      	bics	r2, r1
 8001d72:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d014      	beq.n	8001da6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7c:	f7fe fd46 	bl	800080c <HAL_GetTick>
 8001d80:	0003      	movs	r3, r0
 8001d82:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d84:	e009      	b.n	8001d9a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d86:	f7fe fd41 	bl	800080c <HAL_GetTick>
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	4aaf      	ldr	r2, [pc, #700]	; (8002050 <HAL_RCC_OscConfig+0x680>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e19a      	b.n	80020d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9a:	4bac      	ldr	r3, [pc, #688]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	4013      	ands	r3, r2
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x3b6>
 8001da4:	e013      	b.n	8001dce <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da6:	f7fe fd31 	bl	800080c <HAL_GetTick>
 8001daa:	0003      	movs	r3, r0
 8001dac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dae:	e009      	b.n	8001dc4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db0:	f7fe fd2c 	bl	800080c <HAL_GetTick>
 8001db4:	0002      	movs	r2, r0
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	4aa5      	ldr	r2, [pc, #660]	; (8002050 <HAL_RCC_OscConfig+0x680>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e185      	b.n	80020d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc4:	4ba1      	ldr	r3, [pc, #644]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dce:	231f      	movs	r3, #31
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d105      	bne.n	8001de4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd8:	4b9c      	ldr	r3, [pc, #624]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001dda:	69da      	ldr	r2, [r3, #28]
 8001ddc:	4b9b      	ldr	r3, [pc, #620]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001dde:	499d      	ldr	r1, [pc, #628]	; (8002054 <HAL_RCC_OscConfig+0x684>)
 8001de0:	400a      	ands	r2, r1
 8001de2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2210      	movs	r2, #16
 8001dea:	4013      	ands	r3, r2
 8001dec:	d063      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d12a      	bne.n	8001e4c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001df6:	4b95      	ldr	r3, [pc, #596]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dfa:	4b94      	ldr	r3, [pc, #592]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001dfc:	2104      	movs	r1, #4
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001e02:	4b92      	ldr	r3, [pc, #584]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e06:	4b91      	ldr	r3, [pc, #580]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001e08:	2101      	movs	r1, #1
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0e:	f7fe fcfd 	bl	800080c <HAL_GetTick>
 8001e12:	0003      	movs	r3, r0
 8001e14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e18:	f7fe fcf8 	bl	800080c <HAL_GetTick>
 8001e1c:	0002      	movs	r2, r0
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e152      	b.n	80020d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e2a:	4b88      	ldr	r3, [pc, #544]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2e:	2202      	movs	r2, #2
 8001e30:	4013      	ands	r3, r2
 8001e32:	d0f1      	beq.n	8001e18 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e34:	4b85      	ldr	r3, [pc, #532]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e38:	22f8      	movs	r2, #248	; 0xf8
 8001e3a:	4393      	bics	r3, r2
 8001e3c:	0019      	movs	r1, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	00da      	lsls	r2, r3, #3
 8001e44:	4b81      	ldr	r3, [pc, #516]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001e46:	430a      	orrs	r2, r1
 8001e48:	635a      	str	r2, [r3, #52]	; 0x34
 8001e4a:	e034      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	3305      	adds	r3, #5
 8001e52:	d111      	bne.n	8001e78 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e54:	4b7d      	ldr	r3, [pc, #500]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e58:	4b7c      	ldr	r3, [pc, #496]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001e5a:	2104      	movs	r1, #4
 8001e5c:	438a      	bics	r2, r1
 8001e5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e60:	4b7a      	ldr	r3, [pc, #488]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e64:	22f8      	movs	r2, #248	; 0xf8
 8001e66:	4393      	bics	r3, r2
 8001e68:	0019      	movs	r1, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	00da      	lsls	r2, r3, #3
 8001e70:	4b76      	ldr	r3, [pc, #472]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001e72:	430a      	orrs	r2, r1
 8001e74:	635a      	str	r2, [r3, #52]	; 0x34
 8001e76:	e01e      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e78:	4b74      	ldr	r3, [pc, #464]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e7c:	4b73      	ldr	r3, [pc, #460]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001e7e:	2104      	movs	r1, #4
 8001e80:	430a      	orrs	r2, r1
 8001e82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e84:	4b71      	ldr	r3, [pc, #452]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e88:	4b70      	ldr	r3, [pc, #448]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	438a      	bics	r2, r1
 8001e8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e90:	f7fe fcbc 	bl	800080c <HAL_GetTick>
 8001e94:	0003      	movs	r3, r0
 8001e96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e9a:	f7fe fcb7 	bl	800080c <HAL_GetTick>
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e111      	b.n	80020d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001eac:	4b67      	ldr	r3, [pc, #412]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d1f1      	bne.n	8001e9a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d05c      	beq.n	8001f7a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001ec0:	4b62      	ldr	r3, [pc, #392]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	220c      	movs	r2, #12
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b0c      	cmp	r3, #12
 8001eca:	d00e      	beq.n	8001eea <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001ecc:	4b5f      	ldr	r3, [pc, #380]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	220c      	movs	r2, #12
 8001ed2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d114      	bne.n	8001f02 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001ed8:	4b5c      	ldr	r3, [pc, #368]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	23c0      	movs	r3, #192	; 0xc0
 8001ede:	025b      	lsls	r3, r3, #9
 8001ee0:	401a      	ands	r2, r3
 8001ee2:	23c0      	movs	r3, #192	; 0xc0
 8001ee4:	025b      	lsls	r3, r3, #9
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d10b      	bne.n	8001f02 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001eea:	4b58      	ldr	r3, [pc, #352]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	025b      	lsls	r3, r3, #9
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d040      	beq.n	8001f78 <HAL_RCC_OscConfig+0x5a8>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d03c      	beq.n	8001f78 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0e6      	b.n	80020d0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d01b      	beq.n	8001f42 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001f0a:	4b50      	ldr	r3, [pc, #320]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f0e:	4b4f      	ldr	r3, [pc, #316]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001f10:	2180      	movs	r1, #128	; 0x80
 8001f12:	0249      	lsls	r1, r1, #9
 8001f14:	430a      	orrs	r2, r1
 8001f16:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7fe fc78 	bl	800080c <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f22:	f7fe fc73 	bl	800080c <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e0cd      	b.n	80020d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f34:	4b45      	ldr	r3, [pc, #276]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	025b      	lsls	r3, r3, #9
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x552>
 8001f40:	e01b      	b.n	8001f7a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001f42:	4b42      	ldr	r3, [pc, #264]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f46:	4b41      	ldr	r3, [pc, #260]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001f48:	4943      	ldr	r1, [pc, #268]	; (8002058 <HAL_RCC_OscConfig+0x688>)
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4e:	f7fe fc5d 	bl	800080c <HAL_GetTick>
 8001f52:	0003      	movs	r3, r0
 8001f54:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f58:	f7fe fc58 	bl	800080c <HAL_GetTick>
 8001f5c:	0002      	movs	r2, r0
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e0b2      	b.n	80020d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001f6a:	4b38      	ldr	r3, [pc, #224]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	025b      	lsls	r3, r3, #9
 8001f72:	4013      	ands	r3, r2
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x588>
 8001f76:	e000      	b.n	8001f7a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001f78:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d100      	bne.n	8001f84 <HAL_RCC_OscConfig+0x5b4>
 8001f82:	e0a4      	b.n	80020ce <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f84:	4b31      	ldr	r3, [pc, #196]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	220c      	movs	r2, #12
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d100      	bne.n	8001f92 <HAL_RCC_OscConfig+0x5c2>
 8001f90:	e078      	b.n	8002084 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d14c      	bne.n	8002034 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9a:	4b2c      	ldr	r3, [pc, #176]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	4b2b      	ldr	r3, [pc, #172]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001fa0:	492e      	ldr	r1, [pc, #184]	; (800205c <HAL_RCC_OscConfig+0x68c>)
 8001fa2:	400a      	ands	r2, r1
 8001fa4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa6:	f7fe fc31 	bl	800080c <HAL_GetTick>
 8001faa:	0003      	movs	r3, r0
 8001fac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7fe fc2c 	bl	800080c <HAL_GetTick>
 8001fb4:	0002      	movs	r2, r0
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e086      	b.n	80020d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	049b      	lsls	r3, r3, #18
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fce:	4b1f      	ldr	r3, [pc, #124]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd2:	220f      	movs	r2, #15
 8001fd4:	4393      	bics	r3, r2
 8001fd6:	0019      	movs	r1, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fe2:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	4a1e      	ldr	r2, [pc, #120]	; (8002060 <HAL_RCC_OscConfig+0x690>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	0019      	movs	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ffc:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8002002:	2180      	movs	r1, #128	; 0x80
 8002004:	0449      	lsls	r1, r1, #17
 8002006:	430a      	orrs	r2, r1
 8002008:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7fe fbff 	bl	800080c <HAL_GetTick>
 800200e:	0003      	movs	r3, r0
 8002010:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002014:	f7fe fbfa 	bl	800080c <HAL_GetTick>
 8002018:	0002      	movs	r2, r0
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e054      	b.n	80020d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	049b      	lsls	r3, r3, #18
 800202e:	4013      	ands	r3, r2
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0x644>
 8002032:	e04c      	b.n	80020ce <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <HAL_RCC_OscConfig+0x67c>)
 800203a:	4908      	ldr	r1, [pc, #32]	; (800205c <HAL_RCC_OscConfig+0x68c>)
 800203c:	400a      	ands	r2, r1
 800203e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7fe fbe4 	bl	800080c <HAL_GetTick>
 8002044:	0003      	movs	r3, r0
 8002046:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002048:	e015      	b.n	8002076 <HAL_RCC_OscConfig+0x6a6>
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	40021000 	.word	0x40021000
 8002050:	00001388 	.word	0x00001388
 8002054:	efffffff 	.word	0xefffffff
 8002058:	fffeffff 	.word	0xfffeffff
 800205c:	feffffff 	.word	0xfeffffff
 8002060:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002064:	f7fe fbd2 	bl	800080c <HAL_GetTick>
 8002068:	0002      	movs	r2, r0
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e02c      	b.n	80020d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <HAL_RCC_OscConfig+0x708>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	049b      	lsls	r3, r3, #18
 800207e:	4013      	ands	r3, r2
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x694>
 8002082:	e024      	b.n	80020ce <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e01f      	b.n	80020d0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_RCC_OscConfig+0x708>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_RCC_OscConfig+0x708>)
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	23c0      	movs	r3, #192	; 0xc0
 80020a0:	025b      	lsls	r3, r3, #9
 80020a2:	401a      	ands	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d10e      	bne.n	80020ca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	220f      	movs	r2, #15
 80020b0:	401a      	ands	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d107      	bne.n	80020ca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	23f0      	movs	r3, #240	; 0xf0
 80020be:	039b      	lsls	r3, r3, #14
 80020c0:	401a      	ands	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d001      	beq.n	80020ce <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	0018      	movs	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b008      	add	sp, #32
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000

080020dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0bf      	b.n	8002270 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020f0:	4b61      	ldr	r3, [pc, #388]	; (8002278 <HAL_RCC_ClockConfig+0x19c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2201      	movs	r2, #1
 80020f6:	4013      	ands	r3, r2
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d911      	bls.n	8002122 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b5e      	ldr	r3, [pc, #376]	; (8002278 <HAL_RCC_ClockConfig+0x19c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2201      	movs	r2, #1
 8002104:	4393      	bics	r3, r2
 8002106:	0019      	movs	r1, r3
 8002108:	4b5b      	ldr	r3, [pc, #364]	; (8002278 <HAL_RCC_ClockConfig+0x19c>)
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002110:	4b59      	ldr	r3, [pc, #356]	; (8002278 <HAL_RCC_ClockConfig+0x19c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2201      	movs	r2, #1
 8002116:	4013      	ands	r3, r2
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d001      	beq.n	8002122 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e0a6      	b.n	8002270 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2202      	movs	r2, #2
 8002128:	4013      	ands	r3, r2
 800212a:	d015      	beq.n	8002158 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2204      	movs	r2, #4
 8002132:	4013      	ands	r3, r2
 8002134:	d006      	beq.n	8002144 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002136:	4b51      	ldr	r3, [pc, #324]	; (800227c <HAL_RCC_ClockConfig+0x1a0>)
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	4b50      	ldr	r3, [pc, #320]	; (800227c <HAL_RCC_ClockConfig+0x1a0>)
 800213c:	21e0      	movs	r1, #224	; 0xe0
 800213e:	00c9      	lsls	r1, r1, #3
 8002140:	430a      	orrs	r2, r1
 8002142:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002144:	4b4d      	ldr	r3, [pc, #308]	; (800227c <HAL_RCC_ClockConfig+0x1a0>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	22f0      	movs	r2, #240	; 0xf0
 800214a:	4393      	bics	r3, r2
 800214c:	0019      	movs	r1, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	4b4a      	ldr	r3, [pc, #296]	; (800227c <HAL_RCC_ClockConfig+0x1a0>)
 8002154:	430a      	orrs	r2, r1
 8002156:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2201      	movs	r2, #1
 800215e:	4013      	ands	r3, r2
 8002160:	d04c      	beq.n	80021fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d107      	bne.n	800217a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	4b44      	ldr	r3, [pc, #272]	; (800227c <HAL_RCC_ClockConfig+0x1a0>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	029b      	lsls	r3, r3, #10
 8002172:	4013      	ands	r3, r2
 8002174:	d120      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e07a      	b.n	8002270 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d107      	bne.n	8002192 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002182:	4b3e      	ldr	r3, [pc, #248]	; (800227c <HAL_RCC_ClockConfig+0x1a0>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	049b      	lsls	r3, r3, #18
 800218a:	4013      	ands	r3, r2
 800218c:	d114      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e06e      	b.n	8002270 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d107      	bne.n	80021aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800219a:	4b38      	ldr	r3, [pc, #224]	; (800227c <HAL_RCC_ClockConfig+0x1a0>)
 800219c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	025b      	lsls	r3, r3, #9
 80021a2:	4013      	ands	r3, r2
 80021a4:	d108      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e062      	b.n	8002270 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021aa:	4b34      	ldr	r3, [pc, #208]	; (800227c <HAL_RCC_ClockConfig+0x1a0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2202      	movs	r2, #2
 80021b0:	4013      	ands	r3, r2
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e05b      	b.n	8002270 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021b8:	4b30      	ldr	r3, [pc, #192]	; (800227c <HAL_RCC_ClockConfig+0x1a0>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2203      	movs	r2, #3
 80021be:	4393      	bics	r3, r2
 80021c0:	0019      	movs	r1, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	4b2d      	ldr	r3, [pc, #180]	; (800227c <HAL_RCC_ClockConfig+0x1a0>)
 80021c8:	430a      	orrs	r2, r1
 80021ca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021cc:	f7fe fb1e 	bl	800080c <HAL_GetTick>
 80021d0:	0003      	movs	r3, r0
 80021d2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d4:	e009      	b.n	80021ea <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d6:	f7fe fb19 	bl	800080c <HAL_GetTick>
 80021da:	0002      	movs	r2, r0
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	4a27      	ldr	r2, [pc, #156]	; (8002280 <HAL_RCC_ClockConfig+0x1a4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e042      	b.n	8002270 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ea:	4b24      	ldr	r3, [pc, #144]	; (800227c <HAL_RCC_ClockConfig+0x1a0>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	220c      	movs	r2, #12
 80021f0:	401a      	ands	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d1ec      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021fc:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <HAL_RCC_ClockConfig+0x19c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2201      	movs	r2, #1
 8002202:	4013      	ands	r3, r2
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d211      	bcs.n	800222e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_RCC_ClockConfig+0x19c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2201      	movs	r2, #1
 8002210:	4393      	bics	r3, r2
 8002212:	0019      	movs	r1, r3
 8002214:	4b18      	ldr	r3, [pc, #96]	; (8002278 <HAL_RCC_ClockConfig+0x19c>)
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221c:	4b16      	ldr	r3, [pc, #88]	; (8002278 <HAL_RCC_ClockConfig+0x19c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2201      	movs	r2, #1
 8002222:	4013      	ands	r3, r2
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d001      	beq.n	800222e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e020      	b.n	8002270 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2204      	movs	r2, #4
 8002234:	4013      	ands	r3, r2
 8002236:	d009      	beq.n	800224c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002238:	4b10      	ldr	r3, [pc, #64]	; (800227c <HAL_RCC_ClockConfig+0x1a0>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	4a11      	ldr	r2, [pc, #68]	; (8002284 <HAL_RCC_ClockConfig+0x1a8>)
 800223e:	4013      	ands	r3, r2
 8002240:	0019      	movs	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <HAL_RCC_ClockConfig+0x1a0>)
 8002248:	430a      	orrs	r2, r1
 800224a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800224c:	f000 f820 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8002250:	0001      	movs	r1, r0
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_RCC_ClockConfig+0x1a0>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	091b      	lsrs	r3, r3, #4
 8002258:	220f      	movs	r2, #15
 800225a:	4013      	ands	r3, r2
 800225c:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <HAL_RCC_ClockConfig+0x1ac>)
 800225e:	5cd3      	ldrb	r3, [r2, r3]
 8002260:	000a      	movs	r2, r1
 8002262:	40da      	lsrs	r2, r3
 8002264:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_RCC_ClockConfig+0x1b0>)
 8002266:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002268:	2000      	movs	r0, #0
 800226a:	f7fe fa89 	bl	8000780 <HAL_InitTick>
  
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	0018      	movs	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	b004      	add	sp, #16
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40022000 	.word	0x40022000
 800227c:	40021000 	.word	0x40021000
 8002280:	00001388 	.word	0x00001388
 8002284:	fffff8ff 	.word	0xfffff8ff
 8002288:	08002e58 	.word	0x08002e58
 800228c:	20000000 	.word	0x20000000

08002290 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b08f      	sub	sp, #60	; 0x3c
 8002294:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002296:	2314      	movs	r3, #20
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	4a38      	ldr	r2, [pc, #224]	; (800237c <HAL_RCC_GetSysClockFreq+0xec>)
 800229c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800229e:	c313      	stmia	r3!, {r0, r1, r4}
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	4a36      	ldr	r2, [pc, #216]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf0>)
 80022a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022aa:	c313      	stmia	r3!, {r0, r1, r4}
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022b4:	2300      	movs	r3, #0
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022b8:	2300      	movs	r3, #0
 80022ba:	637b      	str	r3, [r7, #52]	; 0x34
 80022bc:	2300      	movs	r3, #0
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80022c4:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <HAL_RCC_GetSysClockFreq+0xf4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	220c      	movs	r2, #12
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b0c      	cmp	r3, #12
 80022d2:	d047      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0xd4>
 80022d4:	d849      	bhi.n	800236a <HAL_RCC_GetSysClockFreq+0xda>
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d002      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0x50>
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d003      	beq.n	80022e6 <HAL_RCC_GetSysClockFreq+0x56>
 80022de:	e044      	b.n	800236a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022e0:	4b29      	ldr	r3, [pc, #164]	; (8002388 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022e4:	e044      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80022e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e8:	0c9b      	lsrs	r3, r3, #18
 80022ea:	220f      	movs	r2, #15
 80022ec:	4013      	ands	r3, r2
 80022ee:	2214      	movs	r2, #20
 80022f0:	18ba      	adds	r2, r7, r2
 80022f2:	5cd3      	ldrb	r3, [r2, r3]
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80022f6:	4b23      	ldr	r3, [pc, #140]	; (8002384 <HAL_RCC_GetSysClockFreq+0xf4>)
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	220f      	movs	r2, #15
 80022fc:	4013      	ands	r3, r2
 80022fe:	1d3a      	adds	r2, r7, #4
 8002300:	5cd3      	ldrb	r3, [r2, r3]
 8002302:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002306:	23c0      	movs	r3, #192	; 0xc0
 8002308:	025b      	lsls	r3, r3, #9
 800230a:	401a      	ands	r2, r3
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	025b      	lsls	r3, r3, #9
 8002310:	429a      	cmp	r2, r3
 8002312:	d109      	bne.n	8002328 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002314:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002316:	481c      	ldr	r0, [pc, #112]	; (8002388 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002318:	f7fd fef4 	bl	8000104 <__udivsi3>
 800231c:	0003      	movs	r3, r0
 800231e:	001a      	movs	r2, r3
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	4353      	muls	r3, r2
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
 8002326:	e01a      	b.n	800235e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800232a:	23c0      	movs	r3, #192	; 0xc0
 800232c:	025b      	lsls	r3, r3, #9
 800232e:	401a      	ands	r2, r3
 8002330:	23c0      	movs	r3, #192	; 0xc0
 8002332:	025b      	lsls	r3, r3, #9
 8002334:	429a      	cmp	r2, r3
 8002336:	d109      	bne.n	800234c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002338:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800233a:	4814      	ldr	r0, [pc, #80]	; (800238c <HAL_RCC_GetSysClockFreq+0xfc>)
 800233c:	f7fd fee2 	bl	8000104 <__udivsi3>
 8002340:	0003      	movs	r3, r0
 8002342:	001a      	movs	r2, r3
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	4353      	muls	r3, r2
 8002348:	637b      	str	r3, [r7, #52]	; 0x34
 800234a:	e008      	b.n	800235e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800234c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800234e:	480e      	ldr	r0, [pc, #56]	; (8002388 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002350:	f7fd fed8 	bl	8000104 <__udivsi3>
 8002354:	0003      	movs	r3, r0
 8002356:	001a      	movs	r2, r3
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	4353      	muls	r3, r2
 800235c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800235e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002360:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002362:	e005      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002364:	4b09      	ldr	r3, [pc, #36]	; (800238c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002366:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002368:	e002      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800236a:	4b07      	ldr	r3, [pc, #28]	; (8002388 <HAL_RCC_GetSysClockFreq+0xf8>)
 800236c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800236e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002372:	0018      	movs	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	b00f      	add	sp, #60	; 0x3c
 8002378:	bd90      	pop	{r4, r7, pc}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	08002e38 	.word	0x08002e38
 8002380:	08002e48 	.word	0x08002e48
 8002384:	40021000 	.word	0x40021000
 8002388:	007a1200 	.word	0x007a1200
 800238c:	02dc6c00 	.word	0x02dc6c00

08002390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002394:	4b02      	ldr	r3, [pc, #8]	; (80023a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	0018      	movs	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	20000000 	.word	0x20000000

080023a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80023a8:	f7ff fff2 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023ac:	0001      	movs	r1, r0
 80023ae:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	0a1b      	lsrs	r3, r3, #8
 80023b4:	2207      	movs	r2, #7
 80023b6:	4013      	ands	r3, r2
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80023ba:	5cd3      	ldrb	r3, [r2, r3]
 80023bc:	40d9      	lsrs	r1, r3
 80023be:	000b      	movs	r3, r1
}    
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	40021000 	.word	0x40021000
 80023cc:	08002e68 	.word	0x08002e68

080023d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	025b      	lsls	r3, r3, #9
 80023e8:	4013      	ands	r3, r2
 80023ea:	d100      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80023ec:	e08e      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80023ee:	2017      	movs	r0, #23
 80023f0:	183b      	adds	r3, r7, r0
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f6:	4b6e      	ldr	r3, [pc, #440]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023f8:	69da      	ldr	r2, [r3, #28]
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	055b      	lsls	r3, r3, #21
 80023fe:	4013      	ands	r3, r2
 8002400:	d110      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	4b6b      	ldr	r3, [pc, #428]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	4b6a      	ldr	r3, [pc, #424]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002408:	2180      	movs	r1, #128	; 0x80
 800240a:	0549      	lsls	r1, r1, #21
 800240c:	430a      	orrs	r2, r1
 800240e:	61da      	str	r2, [r3, #28]
 8002410:	4b67      	ldr	r3, [pc, #412]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002412:	69da      	ldr	r2, [r3, #28]
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	055b      	lsls	r3, r3, #21
 8002418:	4013      	ands	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241e:	183b      	adds	r3, r7, r0
 8002420:	2201      	movs	r2, #1
 8002422:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	4b63      	ldr	r3, [pc, #396]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4013      	ands	r3, r2
 800242e:	d11a      	bne.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002430:	4b60      	ldr	r3, [pc, #384]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b5f      	ldr	r3, [pc, #380]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002436:	2180      	movs	r1, #128	; 0x80
 8002438:	0049      	lsls	r1, r1, #1
 800243a:	430a      	orrs	r2, r1
 800243c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243e:	f7fe f9e5 	bl	800080c <HAL_GetTick>
 8002442:	0003      	movs	r3, r0
 8002444:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002446:	e008      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002448:	f7fe f9e0 	bl	800080c <HAL_GetTick>
 800244c:	0002      	movs	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	; 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e0a6      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245a:	4b56      	ldr	r3, [pc, #344]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4013      	ands	r3, r2
 8002464:	d0f0      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002466:	4b52      	ldr	r3, [pc, #328]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002468:	6a1a      	ldr	r2, [r3, #32]
 800246a:	23c0      	movs	r3, #192	; 0xc0
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4013      	ands	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d034      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	23c0      	movs	r3, #192	; 0xc0
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4013      	ands	r3, r2
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	429a      	cmp	r2, r3
 8002486:	d02c      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002488:	4b49      	ldr	r3, [pc, #292]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4a4a      	ldr	r2, [pc, #296]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800248e:	4013      	ands	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002492:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002494:	6a1a      	ldr	r2, [r3, #32]
 8002496:	4b46      	ldr	r3, [pc, #280]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002498:	2180      	movs	r1, #128	; 0x80
 800249a:	0249      	lsls	r1, r1, #9
 800249c:	430a      	orrs	r2, r1
 800249e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024a0:	4b43      	ldr	r3, [pc, #268]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024a2:	6a1a      	ldr	r2, [r3, #32]
 80024a4:	4b42      	ldr	r3, [pc, #264]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024a6:	4945      	ldr	r1, [pc, #276]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80024a8:	400a      	ands	r2, r1
 80024aa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024ac:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2201      	movs	r2, #1
 80024b6:	4013      	ands	r3, r2
 80024b8:	d013      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7fe f9a7 	bl	800080c <HAL_GetTick>
 80024be:	0003      	movs	r3, r0
 80024c0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c2:	e009      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c4:	f7fe f9a2 	bl	800080c <HAL_GetTick>
 80024c8:	0002      	movs	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	4a3c      	ldr	r2, [pc, #240]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e067      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d8:	4b35      	ldr	r3, [pc, #212]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	2202      	movs	r2, #2
 80024de:	4013      	ands	r3, r2
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024e2:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	4a34      	ldr	r2, [pc, #208]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	0019      	movs	r1, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024f2:	430a      	orrs	r2, r1
 80024f4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024f6:	2317      	movs	r3, #23
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d105      	bne.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002500:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002502:	69da      	ldr	r2, [r3, #28]
 8002504:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002506:	492f      	ldr	r1, [pc, #188]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002508:	400a      	ands	r2, r1
 800250a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2201      	movs	r2, #1
 8002512:	4013      	ands	r3, r2
 8002514:	d009      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002516:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	2203      	movs	r2, #3
 800251c:	4393      	bics	r3, r2
 800251e:	0019      	movs	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002526:	430a      	orrs	r2, r1
 8002528:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2202      	movs	r2, #2
 8002530:	4013      	ands	r3, r2
 8002532:	d009      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002534:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	4a23      	ldr	r2, [pc, #140]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800253a:	4013      	ands	r3, r2
 800253c:	0019      	movs	r1, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002544:	430a      	orrs	r2, r1
 8002546:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	02db      	lsls	r3, r3, #11
 8002550:	4013      	ands	r3, r2
 8002552:	d009      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002554:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002558:	4a1c      	ldr	r2, [pc, #112]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800255a:	4013      	ands	r3, r2
 800255c:	0019      	movs	r1, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002564:	430a      	orrs	r2, r1
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2220      	movs	r2, #32
 800256e:	4013      	ands	r3, r2
 8002570:	d009      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002572:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	2210      	movs	r2, #16
 8002578:	4393      	bics	r3, r2
 800257a:	0019      	movs	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	695a      	ldr	r2, [r3, #20]
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002582:	430a      	orrs	r2, r1
 8002584:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4013      	ands	r3, r2
 8002590:	d009      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002592:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	2240      	movs	r2, #64	; 0x40
 8002598:	4393      	bics	r3, r2
 800259a:	0019      	movs	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699a      	ldr	r2, [r3, #24]
 80025a0:	4b03      	ldr	r3, [pc, #12]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025a2:	430a      	orrs	r2, r1
 80025a4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	0018      	movs	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b006      	add	sp, #24
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40007000 	.word	0x40007000
 80025b8:	fffffcff 	.word	0xfffffcff
 80025bc:	fffeffff 	.word	0xfffeffff
 80025c0:	00001388 	.word	0x00001388
 80025c4:	efffffff 	.word	0xefffffff
 80025c8:	fffcffff 	.word	0xfffcffff
 80025cc:	fff3ffff 	.word	0xfff3ffff

080025d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e044      	b.n	800266c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d107      	bne.n	80025fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2274      	movs	r2, #116	; 0x74
 80025ee:	2100      	movs	r1, #0
 80025f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	0018      	movs	r0, r3
 80025f6:	f7fe f81d 	bl	8000634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2224      	movs	r2, #36	; 0x24
 80025fe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2101      	movs	r1, #1
 800260c:	438a      	bics	r2, r1
 800260e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	0018      	movs	r0, r3
 8002614:	f000 f830 	bl	8002678 <UART_SetConfig>
 8002618:	0003      	movs	r3, r0
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e024      	b.n	800266c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	0018      	movs	r0, r3
 800262e:	f000 fa0b 	bl	8002a48 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	490d      	ldr	r1, [pc, #52]	; (8002674 <HAL_UART_Init+0xa4>)
 800263e:	400a      	ands	r2, r1
 8002640:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	212a      	movs	r1, #42	; 0x2a
 800264e:	438a      	bics	r2, r1
 8002650:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2101      	movs	r1, #1
 800265e:	430a      	orrs	r2, r1
 8002660:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	0018      	movs	r0, r3
 8002666:	f000 faa3 	bl	8002bb0 <UART_CheckIdleState>
 800266a:	0003      	movs	r3, r0
}
 800266c:	0018      	movs	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	b002      	add	sp, #8
 8002672:	bd80      	pop	{r7, pc}
 8002674:	ffffb7ff 	.word	0xffffb7ff

08002678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002680:	231e      	movs	r3, #30
 8002682:	18fb      	adds	r3, r7, r3
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	4313      	orrs	r3, r2
 800269e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4abe      	ldr	r2, [pc, #760]	; (80029a0 <UART_SetConfig+0x328>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	0019      	movs	r1, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4ab9      	ldr	r2, [pc, #740]	; (80029a4 <UART_SetConfig+0x32c>)
 80026be:	4013      	ands	r3, r2
 80026c0:	0019      	movs	r1, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	4313      	orrs	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4ab0      	ldr	r2, [pc, #704]	; (80029a8 <UART_SetConfig+0x330>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	0019      	movs	r1, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4aac      	ldr	r2, [pc, #688]	; (80029ac <UART_SetConfig+0x334>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d127      	bne.n	800274e <UART_SetConfig+0xd6>
 80026fe:	4bac      	ldr	r3, [pc, #688]	; (80029b0 <UART_SetConfig+0x338>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	2203      	movs	r2, #3
 8002704:	4013      	ands	r3, r2
 8002706:	2b03      	cmp	r3, #3
 8002708:	d00d      	beq.n	8002726 <UART_SetConfig+0xae>
 800270a:	d81b      	bhi.n	8002744 <UART_SetConfig+0xcc>
 800270c:	2b02      	cmp	r3, #2
 800270e:	d014      	beq.n	800273a <UART_SetConfig+0xc2>
 8002710:	d818      	bhi.n	8002744 <UART_SetConfig+0xcc>
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <UART_SetConfig+0xa4>
 8002716:	2b01      	cmp	r3, #1
 8002718:	d00a      	beq.n	8002730 <UART_SetConfig+0xb8>
 800271a:	e013      	b.n	8002744 <UART_SetConfig+0xcc>
 800271c:	231f      	movs	r3, #31
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	e0bd      	b.n	80028a2 <UART_SetConfig+0x22a>
 8002726:	231f      	movs	r3, #31
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	2202      	movs	r2, #2
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	e0b8      	b.n	80028a2 <UART_SetConfig+0x22a>
 8002730:	231f      	movs	r3, #31
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	2204      	movs	r2, #4
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	e0b3      	b.n	80028a2 <UART_SetConfig+0x22a>
 800273a:	231f      	movs	r3, #31
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	2208      	movs	r2, #8
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	e0ae      	b.n	80028a2 <UART_SetConfig+0x22a>
 8002744:	231f      	movs	r3, #31
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	2210      	movs	r2, #16
 800274a:	701a      	strb	r2, [r3, #0]
 800274c:	e0a9      	b.n	80028a2 <UART_SetConfig+0x22a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a98      	ldr	r2, [pc, #608]	; (80029b4 <UART_SetConfig+0x33c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d134      	bne.n	80027c2 <UART_SetConfig+0x14a>
 8002758:	4b95      	ldr	r3, [pc, #596]	; (80029b0 <UART_SetConfig+0x338>)
 800275a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800275c:	23c0      	movs	r3, #192	; 0xc0
 800275e:	029b      	lsls	r3, r3, #10
 8002760:	4013      	ands	r3, r2
 8002762:	22c0      	movs	r2, #192	; 0xc0
 8002764:	0292      	lsls	r2, r2, #10
 8002766:	4293      	cmp	r3, r2
 8002768:	d017      	beq.n	800279a <UART_SetConfig+0x122>
 800276a:	22c0      	movs	r2, #192	; 0xc0
 800276c:	0292      	lsls	r2, r2, #10
 800276e:	4293      	cmp	r3, r2
 8002770:	d822      	bhi.n	80027b8 <UART_SetConfig+0x140>
 8002772:	2280      	movs	r2, #128	; 0x80
 8002774:	0292      	lsls	r2, r2, #10
 8002776:	4293      	cmp	r3, r2
 8002778:	d019      	beq.n	80027ae <UART_SetConfig+0x136>
 800277a:	2280      	movs	r2, #128	; 0x80
 800277c:	0292      	lsls	r2, r2, #10
 800277e:	4293      	cmp	r3, r2
 8002780:	d81a      	bhi.n	80027b8 <UART_SetConfig+0x140>
 8002782:	2b00      	cmp	r3, #0
 8002784:	d004      	beq.n	8002790 <UART_SetConfig+0x118>
 8002786:	2280      	movs	r2, #128	; 0x80
 8002788:	0252      	lsls	r2, r2, #9
 800278a:	4293      	cmp	r3, r2
 800278c:	d00a      	beq.n	80027a4 <UART_SetConfig+0x12c>
 800278e:	e013      	b.n	80027b8 <UART_SetConfig+0x140>
 8002790:	231f      	movs	r3, #31
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
 8002798:	e083      	b.n	80028a2 <UART_SetConfig+0x22a>
 800279a:	231f      	movs	r3, #31
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	2202      	movs	r2, #2
 80027a0:	701a      	strb	r2, [r3, #0]
 80027a2:	e07e      	b.n	80028a2 <UART_SetConfig+0x22a>
 80027a4:	231f      	movs	r3, #31
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	2204      	movs	r2, #4
 80027aa:	701a      	strb	r2, [r3, #0]
 80027ac:	e079      	b.n	80028a2 <UART_SetConfig+0x22a>
 80027ae:	231f      	movs	r3, #31
 80027b0:	18fb      	adds	r3, r7, r3
 80027b2:	2208      	movs	r2, #8
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	e074      	b.n	80028a2 <UART_SetConfig+0x22a>
 80027b8:	231f      	movs	r3, #31
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	2210      	movs	r2, #16
 80027be:	701a      	strb	r2, [r3, #0]
 80027c0:	e06f      	b.n	80028a2 <UART_SetConfig+0x22a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a7c      	ldr	r2, [pc, #496]	; (80029b8 <UART_SetConfig+0x340>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d134      	bne.n	8002836 <UART_SetConfig+0x1be>
 80027cc:	4b78      	ldr	r3, [pc, #480]	; (80029b0 <UART_SetConfig+0x338>)
 80027ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027d0:	23c0      	movs	r3, #192	; 0xc0
 80027d2:	031b      	lsls	r3, r3, #12
 80027d4:	4013      	ands	r3, r2
 80027d6:	22c0      	movs	r2, #192	; 0xc0
 80027d8:	0312      	lsls	r2, r2, #12
 80027da:	4293      	cmp	r3, r2
 80027dc:	d017      	beq.n	800280e <UART_SetConfig+0x196>
 80027de:	22c0      	movs	r2, #192	; 0xc0
 80027e0:	0312      	lsls	r2, r2, #12
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d822      	bhi.n	800282c <UART_SetConfig+0x1b4>
 80027e6:	2280      	movs	r2, #128	; 0x80
 80027e8:	0312      	lsls	r2, r2, #12
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d019      	beq.n	8002822 <UART_SetConfig+0x1aa>
 80027ee:	2280      	movs	r2, #128	; 0x80
 80027f0:	0312      	lsls	r2, r2, #12
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d81a      	bhi.n	800282c <UART_SetConfig+0x1b4>
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d004      	beq.n	8002804 <UART_SetConfig+0x18c>
 80027fa:	2280      	movs	r2, #128	; 0x80
 80027fc:	02d2      	lsls	r2, r2, #11
 80027fe:	4293      	cmp	r3, r2
 8002800:	d00a      	beq.n	8002818 <UART_SetConfig+0x1a0>
 8002802:	e013      	b.n	800282c <UART_SetConfig+0x1b4>
 8002804:	231f      	movs	r3, #31
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
 800280c:	e049      	b.n	80028a2 <UART_SetConfig+0x22a>
 800280e:	231f      	movs	r3, #31
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	2202      	movs	r2, #2
 8002814:	701a      	strb	r2, [r3, #0]
 8002816:	e044      	b.n	80028a2 <UART_SetConfig+0x22a>
 8002818:	231f      	movs	r3, #31
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	2204      	movs	r2, #4
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	e03f      	b.n	80028a2 <UART_SetConfig+0x22a>
 8002822:	231f      	movs	r3, #31
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	2208      	movs	r2, #8
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	e03a      	b.n	80028a2 <UART_SetConfig+0x22a>
 800282c:	231f      	movs	r3, #31
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	2210      	movs	r2, #16
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	e035      	b.n	80028a2 <UART_SetConfig+0x22a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a60      	ldr	r2, [pc, #384]	; (80029bc <UART_SetConfig+0x344>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d104      	bne.n	800284a <UART_SetConfig+0x1d2>
 8002840:	231f      	movs	r3, #31
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	e02b      	b.n	80028a2 <UART_SetConfig+0x22a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a5c      	ldr	r2, [pc, #368]	; (80029c0 <UART_SetConfig+0x348>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d104      	bne.n	800285e <UART_SetConfig+0x1e6>
 8002854:	231f      	movs	r3, #31
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
 800285c:	e021      	b.n	80028a2 <UART_SetConfig+0x22a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a58      	ldr	r2, [pc, #352]	; (80029c4 <UART_SetConfig+0x34c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d104      	bne.n	8002872 <UART_SetConfig+0x1fa>
 8002868:	231f      	movs	r3, #31
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
 8002870:	e017      	b.n	80028a2 <UART_SetConfig+0x22a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a54      	ldr	r2, [pc, #336]	; (80029c8 <UART_SetConfig+0x350>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d104      	bne.n	8002886 <UART_SetConfig+0x20e>
 800287c:	231f      	movs	r3, #31
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
 8002884:	e00d      	b.n	80028a2 <UART_SetConfig+0x22a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a50      	ldr	r2, [pc, #320]	; (80029cc <UART_SetConfig+0x354>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d104      	bne.n	800289a <UART_SetConfig+0x222>
 8002890:	231f      	movs	r3, #31
 8002892:	18fb      	adds	r3, r7, r3
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
 8002898:	e003      	b.n	80028a2 <UART_SetConfig+0x22a>
 800289a:	231f      	movs	r3, #31
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	2210      	movs	r2, #16
 80028a0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69da      	ldr	r2, [r3, #28]
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	021b      	lsls	r3, r3, #8
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d15d      	bne.n	800296a <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 80028ae:	231f      	movs	r3, #31
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d015      	beq.n	80028e4 <UART_SetConfig+0x26c>
 80028b8:	dc18      	bgt.n	80028ec <UART_SetConfig+0x274>
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d00d      	beq.n	80028da <UART_SetConfig+0x262>
 80028be:	dc15      	bgt.n	80028ec <UART_SetConfig+0x274>
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <UART_SetConfig+0x252>
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d005      	beq.n	80028d4 <UART_SetConfig+0x25c>
 80028c8:	e010      	b.n	80028ec <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028ca:	f7ff fd6b 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 80028ce:	0003      	movs	r3, r0
 80028d0:	61bb      	str	r3, [r7, #24]
        break;
 80028d2:	e012      	b.n	80028fa <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028d4:	4b3e      	ldr	r3, [pc, #248]	; (80029d0 <UART_SetConfig+0x358>)
 80028d6:	61bb      	str	r3, [r7, #24]
        break;
 80028d8:	e00f      	b.n	80028fa <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028da:	f7ff fcd9 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 80028de:	0003      	movs	r3, r0
 80028e0:	61bb      	str	r3, [r7, #24]
        break;
 80028e2:	e00a      	b.n	80028fa <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	61bb      	str	r3, [r7, #24]
        break;
 80028ea:	e006      	b.n	80028fa <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80028f0:	231e      	movs	r3, #30
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	2201      	movs	r2, #1
 80028f6:	701a      	strb	r2, [r3, #0]
        break;
 80028f8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d100      	bne.n	8002902 <UART_SetConfig+0x28a>
 8002900:	e095      	b.n	8002a2e <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	005a      	lsls	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	085b      	lsrs	r3, r3, #1
 800290c:	18d2      	adds	r2, r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	0019      	movs	r1, r3
 8002914:	0010      	movs	r0, r2
 8002916:	f7fd fbf5 	bl	8000104 <__udivsi3>
 800291a:	0003      	movs	r3, r0
 800291c:	b29b      	uxth	r3, r3
 800291e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	2b0f      	cmp	r3, #15
 8002924:	d91c      	bls.n	8002960 <UART_SetConfig+0x2e8>
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	025b      	lsls	r3, r3, #9
 800292c:	429a      	cmp	r2, r3
 800292e:	d217      	bcs.n	8002960 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	b29a      	uxth	r2, r3
 8002934:	200e      	movs	r0, #14
 8002936:	183b      	adds	r3, r7, r0
 8002938:	210f      	movs	r1, #15
 800293a:	438a      	bics	r2, r1
 800293c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	085b      	lsrs	r3, r3, #1
 8002942:	b29b      	uxth	r3, r3
 8002944:	2207      	movs	r2, #7
 8002946:	4013      	ands	r3, r2
 8002948:	b299      	uxth	r1, r3
 800294a:	183b      	adds	r3, r7, r0
 800294c:	183a      	adds	r2, r7, r0
 800294e:	8812      	ldrh	r2, [r2, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	183a      	adds	r2, r7, r0
 800295a:	8812      	ldrh	r2, [r2, #0]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	e066      	b.n	8002a2e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002960:	231e      	movs	r3, #30
 8002962:	18fb      	adds	r3, r7, r3
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
 8002968:	e061      	b.n	8002a2e <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800296a:	231f      	movs	r3, #31
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b08      	cmp	r3, #8
 8002972:	d02f      	beq.n	80029d4 <UART_SetConfig+0x35c>
 8002974:	dc32      	bgt.n	80029dc <UART_SetConfig+0x364>
 8002976:	2b04      	cmp	r3, #4
 8002978:	d00d      	beq.n	8002996 <UART_SetConfig+0x31e>
 800297a:	dc2f      	bgt.n	80029dc <UART_SetConfig+0x364>
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <UART_SetConfig+0x30e>
 8002980:	2b02      	cmp	r3, #2
 8002982:	d005      	beq.n	8002990 <UART_SetConfig+0x318>
 8002984:	e02a      	b.n	80029dc <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002986:	f7ff fd0d 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 800298a:	0003      	movs	r3, r0
 800298c:	61bb      	str	r3, [r7, #24]
        break;
 800298e:	e02c      	b.n	80029ea <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <UART_SetConfig+0x358>)
 8002992:	61bb      	str	r3, [r7, #24]
        break;
 8002994:	e029      	b.n	80029ea <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002996:	f7ff fc7b 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 800299a:	0003      	movs	r3, r0
 800299c:	61bb      	str	r3, [r7, #24]
        break;
 800299e:	e024      	b.n	80029ea <UART_SetConfig+0x372>
 80029a0:	efff69f3 	.word	0xefff69f3
 80029a4:	ffffcfff 	.word	0xffffcfff
 80029a8:	fffff4ff 	.word	0xfffff4ff
 80029ac:	40013800 	.word	0x40013800
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40004400 	.word	0x40004400
 80029b8:	40004800 	.word	0x40004800
 80029bc:	40004c00 	.word	0x40004c00
 80029c0:	40005000 	.word	0x40005000
 80029c4:	40011400 	.word	0x40011400
 80029c8:	40011800 	.word	0x40011800
 80029cc:	40011c00 	.word	0x40011c00
 80029d0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	61bb      	str	r3, [r7, #24]
        break;
 80029da:	e006      	b.n	80029ea <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029e0:	231e      	movs	r3, #30
 80029e2:	18fb      	adds	r3, r7, r3
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
        break;
 80029e8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01e      	beq.n	8002a2e <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	085a      	lsrs	r2, r3, #1
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	18d2      	adds	r2, r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	0019      	movs	r1, r3
 8002a00:	0010      	movs	r0, r2
 8002a02:	f7fd fb7f 	bl	8000104 <__udivsi3>
 8002a06:	0003      	movs	r3, r0
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	2b0f      	cmp	r3, #15
 8002a10:	d909      	bls.n	8002a26 <UART_SetConfig+0x3ae>
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	025b      	lsls	r3, r3, #9
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d204      	bcs.n	8002a26 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	60da      	str	r2, [r3, #12]
 8002a24:	e003      	b.n	8002a2e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002a26:	231e      	movs	r3, #30
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002a3a:	231e      	movs	r3, #30
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	781b      	ldrb	r3, [r3, #0]
}
 8002a40:	0018      	movs	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b008      	add	sp, #32
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	2201      	movs	r2, #1
 8002a56:	4013      	ands	r3, r2
 8002a58:	d00b      	beq.n	8002a72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4a4a      	ldr	r2, [pc, #296]	; (8002b8c <UART_AdvFeatureConfig+0x144>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	0019      	movs	r1, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	2202      	movs	r2, #2
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d00b      	beq.n	8002a94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4a43      	ldr	r2, [pc, #268]	; (8002b90 <UART_AdvFeatureConfig+0x148>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	0019      	movs	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	2204      	movs	r2, #4
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d00b      	beq.n	8002ab6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4a3b      	ldr	r2, [pc, #236]	; (8002b94 <UART_AdvFeatureConfig+0x14c>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	2208      	movs	r2, #8
 8002abc:	4013      	ands	r3, r2
 8002abe:	d00b      	beq.n	8002ad8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	4a34      	ldr	r2, [pc, #208]	; (8002b98 <UART_AdvFeatureConfig+0x150>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	0019      	movs	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	2210      	movs	r2, #16
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d00b      	beq.n	8002afa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a2c      	ldr	r2, [pc, #176]	; (8002b9c <UART_AdvFeatureConfig+0x154>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	2220      	movs	r2, #32
 8002b00:	4013      	ands	r3, r2
 8002b02:	d00b      	beq.n	8002b1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	4a25      	ldr	r2, [pc, #148]	; (8002ba0 <UART_AdvFeatureConfig+0x158>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	0019      	movs	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	2240      	movs	r2, #64	; 0x40
 8002b22:	4013      	ands	r3, r2
 8002b24:	d01d      	beq.n	8002b62 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ba4 <UART_AdvFeatureConfig+0x15c>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	0019      	movs	r1, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	035b      	lsls	r3, r3, #13
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d10b      	bne.n	8002b62 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4a15      	ldr	r2, [pc, #84]	; (8002ba8 <UART_AdvFeatureConfig+0x160>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	0019      	movs	r1, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	2280      	movs	r2, #128	; 0x80
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d00b      	beq.n	8002b84 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4a0e      	ldr	r2, [pc, #56]	; (8002bac <UART_AdvFeatureConfig+0x164>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	0019      	movs	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	605a      	str	r2, [r3, #4]
  }
}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	fffdffff 	.word	0xfffdffff
 8002b90:	fffeffff 	.word	0xfffeffff
 8002b94:	fffbffff 	.word	0xfffbffff
 8002b98:	ffff7fff 	.word	0xffff7fff
 8002b9c:	ffffefff 	.word	0xffffefff
 8002ba0:	ffffdfff 	.word	0xffffdfff
 8002ba4:	ffefffff 	.word	0xffefffff
 8002ba8:	ff9fffff 	.word	0xff9fffff
 8002bac:	fff7ffff 	.word	0xfff7ffff

08002bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2280      	movs	r2, #128	; 0x80
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002bc0:	f7fd fe24 	bl	800080c <HAL_GetTick>
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2208      	movs	r2, #8
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d10c      	bne.n	8002bf0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	0391      	lsls	r1, r2, #14
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	4a17      	ldr	r2, [pc, #92]	; (8002c3c <UART_CheckIdleState+0x8c>)
 8002be0:	9200      	str	r2, [sp, #0]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f000 f82c 	bl	8002c40 <UART_WaitOnFlagUntilTimeout>
 8002be8:	1e03      	subs	r3, r0, #0
 8002bea:	d001      	beq.n	8002bf0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e021      	b.n	8002c34 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2204      	movs	r2, #4
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d10c      	bne.n	8002c18 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	03d1      	lsls	r1, r2, #15
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	4a0d      	ldr	r2, [pc, #52]	; (8002c3c <UART_CheckIdleState+0x8c>)
 8002c08:	9200      	str	r2, [sp, #0]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f000 f818 	bl	8002c40 <UART_WaitOnFlagUntilTimeout>
 8002c10:	1e03      	subs	r3, r0, #0
 8002c12:	d001      	beq.n	8002c18 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e00d      	b.n	8002c34 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2220      	movs	r2, #32
 8002c22:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2274      	movs	r2, #116	; 0x74
 8002c2e:	2100      	movs	r1, #0
 8002c30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b004      	add	sp, #16
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	01ffffff 	.word	0x01ffffff

08002c40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b094      	sub	sp, #80	; 0x50
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	1dfb      	adds	r3, r7, #7
 8002c4e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c50:	e0a3      	b.n	8002d9a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c54:	3301      	adds	r3, #1
 8002c56:	d100      	bne.n	8002c5a <UART_WaitOnFlagUntilTimeout+0x1a>
 8002c58:	e09f      	b.n	8002d9a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5a:	f7fd fdd7 	bl	800080c <HAL_GetTick>
 8002c5e:	0002      	movs	r2, r0
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d302      	bcc.n	8002c70 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d13d      	bne.n	8002cec <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c70:	f3ef 8310 	mrs	r3, PRIMASK
 8002c74:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c78:	647b      	str	r3, [r7, #68]	; 0x44
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c80:	f383 8810 	msr	PRIMASK, r3
}
 8002c84:	46c0      	nop			; (mov r8, r8)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	494c      	ldr	r1, [pc, #304]	; (8002dc4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002c92:	400a      	ands	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c98:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ca0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ca6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002caa:	643b      	str	r3, [r7, #64]	; 0x40
 8002cac:	2301      	movs	r3, #1
 8002cae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb2:	f383 8810 	msr	PRIMASK, r3
}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	438a      	bics	r2, r1
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cce:	f383 8810 	msr	PRIMASK, r3
}
 8002cd2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2274      	movs	r2, #116	; 0x74
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e067      	b.n	8002dbc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d050      	beq.n	8002d9a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	69da      	ldr	r2, [r3, #28]
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	401a      	ands	r2, r3
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d146      	bne.n	8002d9a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2280      	movs	r2, #128	; 0x80
 8002d12:	0112      	lsls	r2, r2, #4
 8002d14:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d16:	f3ef 8310 	mrs	r3, PRIMASK
 8002d1a:	613b      	str	r3, [r7, #16]
  return(result);
 8002d1c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d20:	2301      	movs	r3, #1
 8002d22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f383 8810 	msr	PRIMASK, r3
}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4923      	ldr	r1, [pc, #140]	; (8002dc4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002d38:	400a      	ands	r2, r1
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	f383 8810 	msr	PRIMASK, r3
}
 8002d46:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d48:	f3ef 8310 	mrs	r3, PRIMASK
 8002d4c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002d4e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d50:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d52:	2301      	movs	r3, #1
 8002d54:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	f383 8810 	msr	PRIMASK, r3
}
 8002d5c:	46c0      	nop			; (mov r8, r8)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2101      	movs	r1, #1
 8002d6a:	438a      	bics	r2, r1
 8002d6c:	609a      	str	r2, [r3, #8]
 8002d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	f383 8810 	msr	PRIMASK, r3
}
 8002d78:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2220      	movs	r2, #32
 8002d84:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2280      	movs	r2, #128	; 0x80
 8002d8a:	2120      	movs	r1, #32
 8002d8c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2274      	movs	r2, #116	; 0x74
 8002d92:	2100      	movs	r1, #0
 8002d94:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e010      	b.n	8002dbc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	4013      	ands	r3, r2
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	425a      	negs	r2, r3
 8002daa:	4153      	adcs	r3, r2
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	001a      	movs	r2, r3
 8002db0:	1dfb      	adds	r3, r7, #7
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d100      	bne.n	8002dba <UART_WaitOnFlagUntilTimeout+0x17a>
 8002db8:	e74b      	b.n	8002c52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b014      	add	sp, #80	; 0x50
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	fffffe5f 	.word	0xfffffe5f

08002dc8 <__libc_init_array>:
 8002dc8:	b570      	push	{r4, r5, r6, lr}
 8002dca:	2600      	movs	r6, #0
 8002dcc:	4d0c      	ldr	r5, [pc, #48]	; (8002e00 <__libc_init_array+0x38>)
 8002dce:	4c0d      	ldr	r4, [pc, #52]	; (8002e04 <__libc_init_array+0x3c>)
 8002dd0:	1b64      	subs	r4, r4, r5
 8002dd2:	10a4      	asrs	r4, r4, #2
 8002dd4:	42a6      	cmp	r6, r4
 8002dd6:	d109      	bne.n	8002dec <__libc_init_array+0x24>
 8002dd8:	2600      	movs	r6, #0
 8002dda:	f000 f821 	bl	8002e20 <_init>
 8002dde:	4d0a      	ldr	r5, [pc, #40]	; (8002e08 <__libc_init_array+0x40>)
 8002de0:	4c0a      	ldr	r4, [pc, #40]	; (8002e0c <__libc_init_array+0x44>)
 8002de2:	1b64      	subs	r4, r4, r5
 8002de4:	10a4      	asrs	r4, r4, #2
 8002de6:	42a6      	cmp	r6, r4
 8002de8:	d105      	bne.n	8002df6 <__libc_init_array+0x2e>
 8002dea:	bd70      	pop	{r4, r5, r6, pc}
 8002dec:	00b3      	lsls	r3, r6, #2
 8002dee:	58eb      	ldr	r3, [r5, r3]
 8002df0:	4798      	blx	r3
 8002df2:	3601      	adds	r6, #1
 8002df4:	e7ee      	b.n	8002dd4 <__libc_init_array+0xc>
 8002df6:	00b3      	lsls	r3, r6, #2
 8002df8:	58eb      	ldr	r3, [r5, r3]
 8002dfa:	4798      	blx	r3
 8002dfc:	3601      	adds	r6, #1
 8002dfe:	e7f2      	b.n	8002de6 <__libc_init_array+0x1e>
 8002e00:	08002e70 	.word	0x08002e70
 8002e04:	08002e70 	.word	0x08002e70
 8002e08:	08002e70 	.word	0x08002e70
 8002e0c:	08002e74 	.word	0x08002e74

08002e10 <memset>:
 8002e10:	0003      	movs	r3, r0
 8002e12:	1882      	adds	r2, r0, r2
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d100      	bne.n	8002e1a <memset+0xa>
 8002e18:	4770      	bx	lr
 8002e1a:	7019      	strb	r1, [r3, #0]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	e7f9      	b.n	8002e14 <memset+0x4>

08002e20 <_init>:
 8002e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e26:	bc08      	pop	{r3}
 8002e28:	469e      	mov	lr, r3
 8002e2a:	4770      	bx	lr

08002e2c <_fini>:
 8002e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e32:	bc08      	pop	{r3}
 8002e34:	469e      	mov	lr, r3
 8002e36:	4770      	bx	lr
