
dma_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004928  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080049e4  080049e4  000149e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a1c  08004a1c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004a1c  08004a1c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a1c  08004a1c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a1c  08004a1c  00014a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a20  08004a20  00014a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000014  08004a38  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08004a38  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5f7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dcd  00000000  00000000  0002d633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002f400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002fe10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae24  00000000  00000000  00030768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d88d  00000000  00000000  0004b58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1b22  00000000  00000000  00058e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa93b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002330  00000000  00000000  000fa990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080049cc 	.word	0x080049cc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	080049cc 	.word	0x080049cc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f000 fbbb 	bl	800099c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 f823 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 f94f 	bl	80004cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800022e:	f000 f8c7 	bl	80003c0 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000232:	f000 f925 	bl	8000480 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000236:	f000 f8f3 	bl	8000420 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 800023a:	f000 f881 	bl	8000340 <MX_I2C2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	for(int i = 0; i <4 ; i++)
 800023e:	2300      	movs	r3, #0
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	e00b      	b.n	800025c <main+0x40>
	{
		HAL_I2C_Master_Receive_DMA(&hi2c2, dev_add[i], temp_buffer, 7);
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <main+0x48>)
 8000246:	687a      	ldr	r2, [r7, #4]
 8000248:	0052      	lsls	r2, r2, #1
 800024a:	5ad1      	ldrh	r1, [r2, r3]
 800024c:	4a06      	ldr	r2, [pc, #24]	; (8000268 <main+0x4c>)
 800024e:	4807      	ldr	r0, [pc, #28]	; (800026c <main+0x50>)
 8000250:	2307      	movs	r3, #7
 8000252:	f001 f951 	bl	80014f8 <HAL_I2C_Master_Receive_DMA>
	for(int i = 0; i <4 ; i++)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	3301      	adds	r3, #1
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b03      	cmp	r3, #3
 8000260:	ddf0      	ble.n	8000244 <main+0x28>
 8000262:	e7ec      	b.n	800023e <main+0x22>
 8000264:	20000000 	.word	0x20000000
 8000268:	20000258 	.word	0x20000258
 800026c:	200000fc 	.word	0x200000fc

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b590      	push	{r4, r7, lr}
 8000272:	b099      	sub	sp, #100	; 0x64
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	242c      	movs	r4, #44	; 0x2c
 8000278:	193b      	adds	r3, r7, r4
 800027a:	0018      	movs	r0, r3
 800027c:	2334      	movs	r3, #52	; 0x34
 800027e:	001a      	movs	r2, r3
 8000280:	2100      	movs	r1, #0
 8000282:	f004 fb9b 	bl	80049bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000286:	231c      	movs	r3, #28
 8000288:	18fb      	adds	r3, r7, r3
 800028a:	0018      	movs	r0, r3
 800028c:	2310      	movs	r3, #16
 800028e:	001a      	movs	r2, r3
 8000290:	2100      	movs	r1, #0
 8000292:	f004 fb93 	bl	80049bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000296:	003b      	movs	r3, r7
 8000298:	0018      	movs	r0, r3
 800029a:	231c      	movs	r3, #28
 800029c:	001a      	movs	r2, r3
 800029e:	2100      	movs	r1, #0
 80002a0:	f004 fb8c 	bl	80049bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a4:	0021      	movs	r1, r4
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2202      	movs	r2, #2
 80002aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2201      	movs	r2, #1
 80002b0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2210      	movs	r2, #16
 80002b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2202      	movs	r2, #2
 80002bc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2280      	movs	r2, #128	; 0x80
 80002c2:	0212      	lsls	r2, r2, #8
 80002c4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	22a0      	movs	r2, #160	; 0xa0
 80002ca:	0392      	lsls	r2, r2, #14
 80002cc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2201      	movs	r2, #1
 80002d2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	0018      	movs	r0, r3
 80002d8:	f002 fdb0 	bl	8002e3c <HAL_RCC_OscConfig>
 80002dc:	1e03      	subs	r3, r0, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002e0:	f000 f96c 	bl	80005bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e4:	211c      	movs	r1, #28
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2207      	movs	r2, #7
 80002ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2202      	movs	r2, #2
 80002f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2200      	movs	r2, #0
 80002fc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2101      	movs	r1, #1
 8000302:	0018      	movs	r0, r3
 8000304:	f003 f920 	bl	8003548 <HAL_RCC_ClockConfig>
 8000308:	1e03      	subs	r3, r0, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800030c:	f000 f956 	bl	80005bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2;
 8000310:	003b      	movs	r3, r7
 8000312:	4a0a      	ldr	r2, [pc, #40]	; (800033c <SystemClock_Config+0xcc>)
 8000314:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000316:	003b      	movs	r3, r7
 8000318:	2200      	movs	r2, #0
 800031a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800031c:	003b      	movs	r3, r7
 800031e:	2200      	movs	r2, #0
 8000320:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000322:	003b      	movs	r3, r7
 8000324:	0018      	movs	r0, r3
 8000326:	f003 fa89 	bl	800383c <HAL_RCCEx_PeriphCLKConfig>
 800032a:	1e03      	subs	r3, r0, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800032e:	f000 f945 	bl	80005bc <Error_Handler>
  }
}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	46bd      	mov	sp, r7
 8000336:	b019      	add	sp, #100	; 0x64
 8000338:	bd90      	pop	{r4, r7, pc}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	00040002 	.word	0x00040002

08000340 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000344:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <MX_I2C2_Init+0x74>)
 8000346:	4a1c      	ldr	r2, [pc, #112]	; (80003b8 <MX_I2C2_Init+0x78>)
 8000348:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800034a:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <MX_I2C2_Init+0x74>)
 800034c:	4a1b      	ldr	r2, [pc, #108]	; (80003bc <MX_I2C2_Init+0x7c>)
 800034e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000350:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <MX_I2C2_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000356:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <MX_I2C2_Init+0x74>)
 8000358:	2201      	movs	r2, #1
 800035a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800035c:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <MX_I2C2_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000362:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <MX_I2C2_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000368:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <MX_I2C2_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800036e:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <MX_I2C2_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <MX_I2C2_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <MX_I2C2_Init+0x74>)
 800037c:	0018      	movs	r0, r3
 800037e:	f001 f825 	bl	80013cc <HAL_I2C_Init>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000386:	f000 f919 	bl	80005bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800038a:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <MX_I2C2_Init+0x74>)
 800038c:	2100      	movs	r1, #0
 800038e:	0018      	movs	r0, r3
 8000390:	f002 fcbc 	bl	8002d0c <HAL_I2CEx_ConfigAnalogFilter>
 8000394:	1e03      	subs	r3, r0, #0
 8000396:	d001      	beq.n	800039c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000398:	f000 f910 	bl	80005bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <MX_I2C2_Init+0x74>)
 800039e:	2100      	movs	r1, #0
 80003a0:	0018      	movs	r0, r3
 80003a2:	f002 fcff 	bl	8002da4 <HAL_I2CEx_ConfigDigitalFilter>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d001      	beq.n	80003ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003aa:	f000 f907 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	200000fc 	.word	0x200000fc
 80003b8:	40005800 	.word	0x40005800
 80003bc:	20303e5d 	.word	0x20303e5d

080003c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003c4:	4b14      	ldr	r3, [pc, #80]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003c6:	4a15      	ldr	r2, [pc, #84]	; (800041c <MX_USART2_UART_Init+0x5c>)
 80003c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003ca:	4b13      	ldr	r3, [pc, #76]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003cc:	22e1      	movs	r2, #225	; 0xe1
 80003ce:	0252      	lsls	r2, r2, #9
 80003d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003d2:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003e6:	220c      	movs	r2, #12
 80003e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003fe:	2200      	movs	r2, #0
 8000400:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <MX_USART2_UART_Init+0x58>)
 8000404:	0018      	movs	r0, r3
 8000406:	f003 fb19 	bl	8003a3c <HAL_UART_Init>
 800040a:	1e03      	subs	r3, r0, #0
 800040c:	d001      	beq.n	8000412 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800040e:	f000 f8d5 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	200001d4 	.word	0x200001d4
 800041c:	40004400 	.word	0x40004400

08000420 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <MX_USART3_UART_Init+0x58>)
 8000426:	4a15      	ldr	r2, [pc, #84]	; (800047c <MX_USART3_UART_Init+0x5c>)
 8000428:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 800042a:	4b13      	ldr	r3, [pc, #76]	; (8000478 <MX_USART3_UART_Init+0x58>)
 800042c:	2296      	movs	r2, #150	; 0x96
 800042e:	01d2      	lsls	r2, r2, #7
 8000430:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000432:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_USART3_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000438:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <MX_USART3_UART_Init+0x58>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_USART3_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_USART3_UART_Init+0x58>)
 8000446:	220c      	movs	r2, #12
 8000448:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <MX_USART3_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_USART3_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <MX_USART3_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_USART3_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000462:	4b05      	ldr	r3, [pc, #20]	; (8000478 <MX_USART3_UART_Init+0x58>)
 8000464:	0018      	movs	r0, r3
 8000466:	f003 fae9 	bl	8003a3c <HAL_UART_Init>
 800046a:	1e03      	subs	r3, r0, #0
 800046c:	d001      	beq.n	8000472 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800046e:	f000 f8a5 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000074 	.word	0x20000074
 800047c:	40004800 	.word	0x40004800

08000480 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <MX_DMA_Init+0x48>)
 8000488:	695a      	ldr	r2, [r3, #20]
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <MX_DMA_Init+0x48>)
 800048c:	2101      	movs	r1, #1
 800048e:	430a      	orrs	r2, r1
 8000490:	615a      	str	r2, [r3, #20]
 8000492:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <MX_DMA_Init+0x48>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	2201      	movs	r2, #1
 8000498:	4013      	ands	r3, r2
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 800049e:	2200      	movs	r2, #0
 80004a0:	2100      	movs	r1, #0
 80004a2:	2009      	movs	r0, #9
 80004a4:	f000 fb8a 	bl	8000bbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 80004a8:	2009      	movs	r0, #9
 80004aa:	f000 fb9c 	bl	8000be6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch3_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, 0, 0);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2100      	movs	r1, #0
 80004b2:	200b      	movs	r0, #11
 80004b4:	f000 fb82 	bl	8000bbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 80004b8:	200b      	movs	r0, #11
 80004ba:	f000 fb94 	bl	8000be6 <HAL_NVIC_EnableIRQ>

}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	b002      	add	sp, #8
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	40021000 	.word	0x40021000

080004cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b08b      	sub	sp, #44	; 0x2c
 80004d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	2414      	movs	r4, #20
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	0018      	movs	r0, r3
 80004d8:	2314      	movs	r3, #20
 80004da:	001a      	movs	r2, r3
 80004dc:	2100      	movs	r1, #0
 80004de:	f004 fa6d 	bl	80049bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b34      	ldr	r3, [pc, #208]	; (80005b4 <MX_GPIO_Init+0xe8>)
 80004e4:	695a      	ldr	r2, [r3, #20]
 80004e6:	4b33      	ldr	r3, [pc, #204]	; (80005b4 <MX_GPIO_Init+0xe8>)
 80004e8:	2180      	movs	r1, #128	; 0x80
 80004ea:	0309      	lsls	r1, r1, #12
 80004ec:	430a      	orrs	r2, r1
 80004ee:	615a      	str	r2, [r3, #20]
 80004f0:	4b30      	ldr	r3, [pc, #192]	; (80005b4 <MX_GPIO_Init+0xe8>)
 80004f2:	695a      	ldr	r2, [r3, #20]
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	031b      	lsls	r3, r3, #12
 80004f8:	4013      	ands	r3, r2
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004fe:	4b2d      	ldr	r3, [pc, #180]	; (80005b4 <MX_GPIO_Init+0xe8>)
 8000500:	695a      	ldr	r2, [r3, #20]
 8000502:	4b2c      	ldr	r3, [pc, #176]	; (80005b4 <MX_GPIO_Init+0xe8>)
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	03c9      	lsls	r1, r1, #15
 8000508:	430a      	orrs	r2, r1
 800050a:	615a      	str	r2, [r3, #20]
 800050c:	4b29      	ldr	r3, [pc, #164]	; (80005b4 <MX_GPIO_Init+0xe8>)
 800050e:	695a      	ldr	r2, [r3, #20]
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	03db      	lsls	r3, r3, #15
 8000514:	4013      	ands	r3, r2
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051a:	4b26      	ldr	r3, [pc, #152]	; (80005b4 <MX_GPIO_Init+0xe8>)
 800051c:	695a      	ldr	r2, [r3, #20]
 800051e:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <MX_GPIO_Init+0xe8>)
 8000520:	2180      	movs	r1, #128	; 0x80
 8000522:	0289      	lsls	r1, r1, #10
 8000524:	430a      	orrs	r2, r1
 8000526:	615a      	str	r2, [r3, #20]
 8000528:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <MX_GPIO_Init+0xe8>)
 800052a:	695a      	ldr	r2, [r3, #20]
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	029b      	lsls	r3, r3, #10
 8000530:	4013      	ands	r3, r2
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000536:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <MX_GPIO_Init+0xe8>)
 8000538:	695a      	ldr	r2, [r3, #20]
 800053a:	4b1e      	ldr	r3, [pc, #120]	; (80005b4 <MX_GPIO_Init+0xe8>)
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	02c9      	lsls	r1, r1, #11
 8000540:	430a      	orrs	r2, r1
 8000542:	615a      	str	r2, [r3, #20]
 8000544:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <MX_GPIO_Init+0xe8>)
 8000546:	695a      	ldr	r2, [r3, #20]
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	02db      	lsls	r3, r3, #11
 800054c:	4013      	ands	r3, r2
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000552:	2390      	movs	r3, #144	; 0x90
 8000554:	05db      	lsls	r3, r3, #23
 8000556:	2200      	movs	r2, #0
 8000558:	2120      	movs	r1, #32
 800055a:	0018      	movs	r0, r3
 800055c:	f000 ff18 	bl	8001390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000560:	193b      	adds	r3, r7, r4
 8000562:	2280      	movs	r2, #128	; 0x80
 8000564:	0192      	lsls	r2, r2, #6
 8000566:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000568:	193b      	adds	r3, r7, r4
 800056a:	2284      	movs	r2, #132	; 0x84
 800056c:	0392      	lsls	r2, r2, #14
 800056e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	193b      	adds	r3, r7, r4
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000576:	193b      	adds	r3, r7, r4
 8000578:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <MX_GPIO_Init+0xec>)
 800057a:	0019      	movs	r1, r3
 800057c:	0010      	movs	r0, r2
 800057e:	f000 fd8f 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000582:	0021      	movs	r1, r4
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2220      	movs	r2, #32
 8000588:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2201      	movs	r2, #1
 800058e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	187a      	adds	r2, r7, r1
 800059e:	2390      	movs	r3, #144	; 0x90
 80005a0:	05db      	lsls	r3, r3, #23
 80005a2:	0011      	movs	r1, r2
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 fd7b 	bl	80010a0 <HAL_GPIO_Init>

}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b00b      	add	sp, #44	; 0x2c
 80005b0:	bd90      	pop	{r4, r7, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	40021000 	.word	0x40021000
 80005b8:	48000800 	.word	0x48000800

080005bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c0:	b672      	cpsid	i
}
 80005c2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <Error_Handler+0x8>
	...

080005c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <HAL_MspInit+0x44>)
 80005d0:	699a      	ldr	r2, [r3, #24]
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <HAL_MspInit+0x44>)
 80005d4:	2101      	movs	r1, #1
 80005d6:	430a      	orrs	r2, r1
 80005d8:	619a      	str	r2, [r3, #24]
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <HAL_MspInit+0x44>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	2201      	movs	r2, #1
 80005e0:	4013      	ands	r3, r2
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <HAL_MspInit+0x44>)
 80005e8:	69da      	ldr	r2, [r3, #28]
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <HAL_MspInit+0x44>)
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	0549      	lsls	r1, r1, #21
 80005f0:	430a      	orrs	r2, r1
 80005f2:	61da      	str	r2, [r3, #28]
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <HAL_MspInit+0x44>)
 80005f6:	69da      	ldr	r2, [r3, #28]
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	055b      	lsls	r3, r3, #21
 80005fc:	4013      	ands	r3, r2
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b002      	add	sp, #8
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	40021000 	.word	0x40021000

08000610 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b08b      	sub	sp, #44	; 0x2c
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	2414      	movs	r4, #20
 800061a:	193b      	adds	r3, r7, r4
 800061c:	0018      	movs	r0, r3
 800061e:	2314      	movs	r3, #20
 8000620:	001a      	movs	r2, r3
 8000622:	2100      	movs	r1, #0
 8000624:	f004 f9ca 	bl	80049bc <memset>
  if(hi2c->Instance==I2C2)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a38      	ldr	r2, [pc, #224]	; (8000710 <HAL_I2C_MspInit+0x100>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d169      	bne.n	8000706 <HAL_I2C_MspInit+0xf6>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b38      	ldr	r3, [pc, #224]	; (8000714 <HAL_I2C_MspInit+0x104>)
 8000634:	695a      	ldr	r2, [r3, #20]
 8000636:	4b37      	ldr	r3, [pc, #220]	; (8000714 <HAL_I2C_MspInit+0x104>)
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	02c9      	lsls	r1, r1, #11
 800063c:	430a      	orrs	r2, r1
 800063e:	615a      	str	r2, [r3, #20]
 8000640:	4b34      	ldr	r3, [pc, #208]	; (8000714 <HAL_I2C_MspInit+0x104>)
 8000642:	695a      	ldr	r2, [r3, #20]
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	02db      	lsls	r3, r3, #11
 8000648:	4013      	ands	r3, r2
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800064e:	193b      	adds	r3, r7, r4
 8000650:	22c0      	movs	r2, #192	; 0xc0
 8000652:	0112      	lsls	r2, r2, #4
 8000654:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000656:	0021      	movs	r1, r4
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2212      	movs	r2, #18
 800065c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2203      	movs	r2, #3
 8000668:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2201      	movs	r2, #1
 800066e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000670:	187b      	adds	r3, r7, r1
 8000672:	4a29      	ldr	r2, [pc, #164]	; (8000718 <HAL_I2C_MspInit+0x108>)
 8000674:	0019      	movs	r1, r3
 8000676:	0010      	movs	r0, r2
 8000678:	f000 fd12 	bl	80010a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800067c:	4b25      	ldr	r3, [pc, #148]	; (8000714 <HAL_I2C_MspInit+0x104>)
 800067e:	69da      	ldr	r2, [r3, #28]
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <HAL_I2C_MspInit+0x104>)
 8000682:	2180      	movs	r1, #128	; 0x80
 8000684:	03c9      	lsls	r1, r1, #15
 8000686:	430a      	orrs	r2, r1
 8000688:	61da      	str	r2, [r3, #28]
 800068a:	4b22      	ldr	r3, [pc, #136]	; (8000714 <HAL_I2C_MspInit+0x104>)
 800068c:	69da      	ldr	r2, [r3, #28]
 800068e:	2380      	movs	r3, #128	; 0x80
 8000690:	03db      	lsls	r3, r3, #15
 8000692:	4013      	ands	r3, r2
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 8000698:	4b20      	ldr	r3, [pc, #128]	; (800071c <HAL_I2C_MspInit+0x10c>)
 800069a:	4a21      	ldr	r2, [pc, #132]	; (8000720 <HAL_I2C_MspInit+0x110>)
 800069c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <HAL_I2C_MspInit+0x10c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <HAL_I2C_MspInit+0x10c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <HAL_I2C_MspInit+0x10c>)
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <HAL_I2C_MspInit+0x10c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <HAL_I2C_MspInit+0x10c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <HAL_I2C_MspInit+0x10c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <HAL_I2C_MspInit+0x10c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <HAL_I2C_MspInit+0x10c>)
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 faa8 	bl	8000c20 <HAL_DMA_Init>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <HAL_I2C_MspInit+0xc8>
    {
      Error_Handler();
 80006d4:	f7ff ff72 	bl	80005bc <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH5_I2C2_RX);
 80006d8:	4a12      	ldr	r2, [pc, #72]	; (8000724 <HAL_I2C_MspInit+0x114>)
 80006da:	23a8      	movs	r3, #168	; 0xa8
 80006dc:	58d3      	ldr	r3, [r2, r3]
 80006de:	4911      	ldr	r1, [pc, #68]	; (8000724 <HAL_I2C_MspInit+0x114>)
 80006e0:	4a11      	ldr	r2, [pc, #68]	; (8000728 <HAL_I2C_MspInit+0x118>)
 80006e2:	4013      	ands	r3, r2
 80006e4:	22a8      	movs	r2, #168	; 0xa8
 80006e6:	508b      	str	r3, [r1, r2]
 80006e8:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <HAL_I2C_MspInit+0x114>)
 80006ea:	23a8      	movs	r3, #168	; 0xa8
 80006ec:	58d3      	ldr	r3, [r2, r3]
 80006ee:	490d      	ldr	r1, [pc, #52]	; (8000724 <HAL_I2C_MspInit+0x114>)
 80006f0:	2280      	movs	r2, #128	; 0x80
 80006f2:	0292      	lsls	r2, r2, #10
 80006f4:	4313      	orrs	r3, r2
 80006f6:	22a8      	movs	r2, #168	; 0xa8
 80006f8:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a07      	ldr	r2, [pc, #28]	; (800071c <HAL_I2C_MspInit+0x10c>)
 80006fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_I2C_MspInit+0x10c>)
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b00b      	add	sp, #44	; 0x2c
 800070c:	bd90      	pop	{r4, r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	40005800 	.word	0x40005800
 8000714:	40021000 	.word	0x40021000
 8000718:	48000400 	.word	0x48000400
 800071c:	20000148 	.word	0x20000148
 8000720:	40020058 	.word	0x40020058
 8000724:	40020000 	.word	0x40020000
 8000728:	fff0ffff 	.word	0xfff0ffff

0800072c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b08d      	sub	sp, #52	; 0x34
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	241c      	movs	r4, #28
 8000736:	193b      	adds	r3, r7, r4
 8000738:	0018      	movs	r0, r3
 800073a:	2314      	movs	r3, #20
 800073c:	001a      	movs	r2, r3
 800073e:	2100      	movs	r1, #0
 8000740:	f004 f93c 	bl	80049bc <memset>
  if(huart->Instance==USART2)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a57      	ldr	r2, [pc, #348]	; (80008a8 <HAL_UART_MspInit+0x17c>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d133      	bne.n	80007b6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800074e:	4b57      	ldr	r3, [pc, #348]	; (80008ac <HAL_UART_MspInit+0x180>)
 8000750:	69da      	ldr	r2, [r3, #28]
 8000752:	4b56      	ldr	r3, [pc, #344]	; (80008ac <HAL_UART_MspInit+0x180>)
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	0289      	lsls	r1, r1, #10
 8000758:	430a      	orrs	r2, r1
 800075a:	61da      	str	r2, [r3, #28]
 800075c:	4b53      	ldr	r3, [pc, #332]	; (80008ac <HAL_UART_MspInit+0x180>)
 800075e:	69da      	ldr	r2, [r3, #28]
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	029b      	lsls	r3, r3, #10
 8000764:	4013      	ands	r3, r2
 8000766:	61bb      	str	r3, [r7, #24]
 8000768:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b50      	ldr	r3, [pc, #320]	; (80008ac <HAL_UART_MspInit+0x180>)
 800076c:	695a      	ldr	r2, [r3, #20]
 800076e:	4b4f      	ldr	r3, [pc, #316]	; (80008ac <HAL_UART_MspInit+0x180>)
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	0289      	lsls	r1, r1, #10
 8000774:	430a      	orrs	r2, r1
 8000776:	615a      	str	r2, [r3, #20]
 8000778:	4b4c      	ldr	r3, [pc, #304]	; (80008ac <HAL_UART_MspInit+0x180>)
 800077a:	695a      	ldr	r2, [r3, #20]
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	029b      	lsls	r3, r3, #10
 8000780:	4013      	ands	r3, r2
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000786:	0021      	movs	r1, r4
 8000788:	187b      	adds	r3, r7, r1
 800078a:	220c      	movs	r2, #12
 800078c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2202      	movs	r2, #2
 8000792:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2201      	movs	r2, #1
 80007a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	187a      	adds	r2, r7, r1
 80007a8:	2390      	movs	r3, #144	; 0x90
 80007aa:	05db      	lsls	r3, r3, #23
 80007ac:	0011      	movs	r1, r2
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 fc76 	bl	80010a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80007b4:	e074      	b.n	80008a0 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART3)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a3d      	ldr	r2, [pc, #244]	; (80008b0 <HAL_UART_MspInit+0x184>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d16f      	bne.n	80008a0 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART3_CLK_ENABLE();
 80007c0:	4b3a      	ldr	r3, [pc, #232]	; (80008ac <HAL_UART_MspInit+0x180>)
 80007c2:	69da      	ldr	r2, [r3, #28]
 80007c4:	4b39      	ldr	r3, [pc, #228]	; (80008ac <HAL_UART_MspInit+0x180>)
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	02c9      	lsls	r1, r1, #11
 80007ca:	430a      	orrs	r2, r1
 80007cc:	61da      	str	r2, [r3, #28]
 80007ce:	4b37      	ldr	r3, [pc, #220]	; (80008ac <HAL_UART_MspInit+0x180>)
 80007d0:	69da      	ldr	r2, [r3, #28]
 80007d2:	2380      	movs	r3, #128	; 0x80
 80007d4:	02db      	lsls	r3, r3, #11
 80007d6:	4013      	ands	r3, r2
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007dc:	4b33      	ldr	r3, [pc, #204]	; (80008ac <HAL_UART_MspInit+0x180>)
 80007de:	695a      	ldr	r2, [r3, #20]
 80007e0:	4b32      	ldr	r3, [pc, #200]	; (80008ac <HAL_UART_MspInit+0x180>)
 80007e2:	2180      	movs	r1, #128	; 0x80
 80007e4:	0309      	lsls	r1, r1, #12
 80007e6:	430a      	orrs	r2, r1
 80007e8:	615a      	str	r2, [r3, #20]
 80007ea:	4b30      	ldr	r3, [pc, #192]	; (80008ac <HAL_UART_MspInit+0x180>)
 80007ec:	695a      	ldr	r2, [r3, #20]
 80007ee:	2380      	movs	r3, #128	; 0x80
 80007f0:	031b      	lsls	r3, r3, #12
 80007f2:	4013      	ands	r3, r2
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80007f8:	211c      	movs	r1, #28
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2230      	movs	r2, #48	; 0x30
 80007fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2202      	movs	r2, #2
 8000804:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2203      	movs	r2, #3
 8000810:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2201      	movs	r2, #1
 8000816:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000818:	187b      	adds	r3, r7, r1
 800081a:	4a26      	ldr	r2, [pc, #152]	; (80008b4 <HAL_UART_MspInit+0x188>)
 800081c:	0019      	movs	r1, r3
 800081e:	0010      	movs	r0, r2
 8000820:	f000 fc3e 	bl	80010a0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8000824:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <HAL_UART_MspInit+0x18c>)
 8000826:	4a25      	ldr	r2, [pc, #148]	; (80008bc <HAL_UART_MspInit+0x190>)
 8000828:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <HAL_UART_MspInit+0x18c>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <HAL_UART_MspInit+0x18c>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <HAL_UART_MspInit+0x18c>)
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <HAL_UART_MspInit+0x18c>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000842:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <HAL_UART_MspInit+0x18c>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <HAL_UART_MspInit+0x18c>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <HAL_UART_MspInit+0x18c>)
 8000850:	2200      	movs	r2, #0
 8000852:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_UART_MspInit+0x18c>)
 8000856:	0018      	movs	r0, r3
 8000858:	f000 f9e2 	bl	8000c20 <HAL_DMA_Init>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8000860:	f7ff feac 	bl	80005bc <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 8000864:	4a16      	ldr	r2, [pc, #88]	; (80008c0 <HAL_UART_MspInit+0x194>)
 8000866:	23a8      	movs	r3, #168	; 0xa8
 8000868:	58d3      	ldr	r3, [r2, r3]
 800086a:	4915      	ldr	r1, [pc, #84]	; (80008c0 <HAL_UART_MspInit+0x194>)
 800086c:	220f      	movs	r2, #15
 800086e:	4393      	bics	r3, r2
 8000870:	22a8      	movs	r2, #168	; 0xa8
 8000872:	508b      	str	r3, [r1, r2]
 8000874:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <HAL_UART_MspInit+0x194>)
 8000876:	23a8      	movs	r3, #168	; 0xa8
 8000878:	58d3      	ldr	r3, [r2, r3]
 800087a:	4911      	ldr	r1, [pc, #68]	; (80008c0 <HAL_UART_MspInit+0x194>)
 800087c:	220a      	movs	r2, #10
 800087e:	4313      	orrs	r3, r2
 8000880:	22a8      	movs	r2, #168	; 0xa8
 8000882:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a0c      	ldr	r2, [pc, #48]	; (80008b8 <HAL_UART_MspInit+0x18c>)
 8000888:	671a      	str	r2, [r3, #112]	; 0x70
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <HAL_UART_MspInit+0x18c>)
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_8_IRQn, 0, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2100      	movs	r1, #0
 8000894:	201d      	movs	r0, #29
 8000896:	f000 f991 	bl	8000bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800089a:	201d      	movs	r0, #29
 800089c:	f000 f9a3 	bl	8000be6 <HAL_NVIC_EnableIRQ>
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b00d      	add	sp, #52	; 0x34
 80008a6:	bd90      	pop	{r4, r7, pc}
 80008a8:	40004400 	.word	0x40004400
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40004800 	.word	0x40004800
 80008b4:	48000800 	.word	0x48000800
 80008b8:	20000030 	.word	0x20000030
 80008bc:	40020008 	.word	0x40020008
 80008c0:	40020000 	.word	0x40020000

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e8:	f000 f8a0 	bl	8000a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <DMA1_Ch1_IRQHandler+0x14>)
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 fabb 	bl	8000e76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	20000030 	.word	0x20000030

0800090c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x14>)
 8000912:	0018      	movs	r0, r3
 8000914:	f000 faaf 	bl	8000e76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */
}
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	20000148 	.word	0x20000148

08000924 <USART3_8_IRQHandler>:

/**
  * @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_8_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_8_IRQn 0 */

  /* USER CODE END USART3_8_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <USART3_8_IRQHandler+0x14>)
 800092a:	0018      	movs	r0, r3
 800092c:	f003 f8da 	bl	8003ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_8_IRQn 1 */

  /* USER CODE END USART3_8_IRQn 1 */
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	20000074 	.word	0x20000074

0800093c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000948:	480d      	ldr	r0, [pc, #52]	; (8000980 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800094a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <LoopForever+0x6>)
  ldr r1, =_edata
 800094e:	490e      	ldr	r1, [pc, #56]	; (8000988 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000950:	4a0e      	ldr	r2, [pc, #56]	; (800098c <LoopForever+0xe>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000964:	4c0b      	ldr	r4, [pc, #44]	; (8000994 <LoopForever+0x16>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000972:	f7ff ffe3 	bl	800093c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000976:	f003 fffd 	bl	8004974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800097a:	f7ff fc4f 	bl	800021c <main>

0800097e <LoopForever>:

LoopForever:
    b LoopForever
 800097e:	e7fe      	b.n	800097e <LoopForever>
  ldr   r0, =_estack
 8000980:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000988:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800098c:	08004a24 	.word	0x08004a24
  ldr r2, =_sbss
 8000990:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000994:	20000260 	.word	0x20000260

08000998 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000998:	e7fe      	b.n	8000998 <ADC1_COMP_IRQHandler>
	...

0800099c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <HAL_Init+0x24>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_Init+0x24>)
 80009a6:	2110      	movs	r1, #16
 80009a8:	430a      	orrs	r2, r1
 80009aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009ac:	2000      	movs	r0, #0
 80009ae:	f000 f809 	bl	80009c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b2:	f7ff fe09 	bl	80005c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	0018      	movs	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	40022000 	.word	0x40022000

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <HAL_InitTick+0x5c>)
 80009ce:	681c      	ldr	r4, [r3, #0]
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_InitTick+0x60>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	0019      	movs	r1, r3
 80009d6:	23fa      	movs	r3, #250	; 0xfa
 80009d8:	0098      	lsls	r0, r3, #2
 80009da:	f7ff fb93 	bl	8000104 <__udivsi3>
 80009de:	0003      	movs	r3, r0
 80009e0:	0019      	movs	r1, r3
 80009e2:	0020      	movs	r0, r4
 80009e4:	f7ff fb8e 	bl	8000104 <__udivsi3>
 80009e8:	0003      	movs	r3, r0
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 f90b 	bl	8000c06 <HAL_SYSTICK_Config>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	e00f      	b.n	8000a18 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b03      	cmp	r3, #3
 80009fc:	d80b      	bhi.n	8000a16 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	2301      	movs	r3, #1
 8000a02:	425b      	negs	r3, r3
 8000a04:	2200      	movs	r2, #0
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 f8d8 	bl	8000bbc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_InitTick+0x64>)
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e000      	b.n	8000a18 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	0018      	movs	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b003      	add	sp, #12
 8000a1e:	bd90      	pop	{r4, r7, pc}
 8000a20:	20000008 	.word	0x20000008
 8000a24:	20000010 	.word	0x20000010
 8000a28:	2000000c 	.word	0x2000000c

08000a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <HAL_IncTick+0x1c>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	001a      	movs	r2, r3
 8000a36:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_IncTick+0x20>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	18d2      	adds	r2, r2, r3
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <HAL_IncTick+0x20>)
 8000a3e:	601a      	str	r2, [r3, #0]
}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	20000010 	.word	0x20000010
 8000a4c:	2000025c 	.word	0x2000025c

08000a50 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  return uwTick;
 8000a54:	4b02      	ldr	r3, [pc, #8]	; (8000a60 <HAL_GetTick+0x10>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	0018      	movs	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	2000025c 	.word	0x2000025c

08000a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	0002      	movs	r2, r0
 8000a6c:	1dfb      	adds	r3, r7, #7
 8000a6e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b7f      	cmp	r3, #127	; 0x7f
 8000a76:	d809      	bhi.n	8000a8c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	231f      	movs	r3, #31
 8000a80:	401a      	ands	r2, r3
 8000a82:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <__NVIC_EnableIRQ+0x30>)
 8000a84:	2101      	movs	r1, #1
 8000a86:	4091      	lsls	r1, r2
 8000a88:	000a      	movs	r2, r1
 8000a8a:	601a      	str	r2, [r3, #0]
  }
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b002      	add	sp, #8
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	e000e100 	.word	0xe000e100

08000a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	0002      	movs	r2, r0
 8000aa0:	6039      	str	r1, [r7, #0]
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b7f      	cmp	r3, #127	; 0x7f
 8000aac:	d828      	bhi.n	8000b00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aae:	4a2f      	ldr	r2, [pc, #188]	; (8000b6c <__NVIC_SetPriority+0xd4>)
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b25b      	sxtb	r3, r3
 8000ab6:	089b      	lsrs	r3, r3, #2
 8000ab8:	33c0      	adds	r3, #192	; 0xc0
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	589b      	ldr	r3, [r3, r2]
 8000abe:	1dfa      	adds	r2, r7, #7
 8000ac0:	7812      	ldrb	r2, [r2, #0]
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	400a      	ands	r2, r1
 8000ac8:	00d2      	lsls	r2, r2, #3
 8000aca:	21ff      	movs	r1, #255	; 0xff
 8000acc:	4091      	lsls	r1, r2
 8000ace:	000a      	movs	r2, r1
 8000ad0:	43d2      	mvns	r2, r2
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	019b      	lsls	r3, r3, #6
 8000ada:	22ff      	movs	r2, #255	; 0xff
 8000adc:	401a      	ands	r2, r3
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	4003      	ands	r3, r0
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aec:	481f      	ldr	r0, [pc, #124]	; (8000b6c <__NVIC_SetPriority+0xd4>)
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	430a      	orrs	r2, r1
 8000af8:	33c0      	adds	r3, #192	; 0xc0
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000afe:	e031      	b.n	8000b64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b00:	4a1b      	ldr	r2, [pc, #108]	; (8000b70 <__NVIC_SetPriority+0xd8>)
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	0019      	movs	r1, r3
 8000b08:	230f      	movs	r3, #15
 8000b0a:	400b      	ands	r3, r1
 8000b0c:	3b08      	subs	r3, #8
 8000b0e:	089b      	lsrs	r3, r3, #2
 8000b10:	3306      	adds	r3, #6
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	18d3      	adds	r3, r2, r3
 8000b16:	3304      	adds	r3, #4
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	1dfa      	adds	r2, r7, #7
 8000b1c:	7812      	ldrb	r2, [r2, #0]
 8000b1e:	0011      	movs	r1, r2
 8000b20:	2203      	movs	r2, #3
 8000b22:	400a      	ands	r2, r1
 8000b24:	00d2      	lsls	r2, r2, #3
 8000b26:	21ff      	movs	r1, #255	; 0xff
 8000b28:	4091      	lsls	r1, r2
 8000b2a:	000a      	movs	r2, r1
 8000b2c:	43d2      	mvns	r2, r2
 8000b2e:	401a      	ands	r2, r3
 8000b30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	019b      	lsls	r3, r3, #6
 8000b36:	22ff      	movs	r2, #255	; 0xff
 8000b38:	401a      	ands	r2, r3
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	0018      	movs	r0, r3
 8000b40:	2303      	movs	r3, #3
 8000b42:	4003      	ands	r3, r0
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b48:	4809      	ldr	r0, [pc, #36]	; (8000b70 <__NVIC_SetPriority+0xd8>)
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	001c      	movs	r4, r3
 8000b50:	230f      	movs	r3, #15
 8000b52:	4023      	ands	r3, r4
 8000b54:	3b08      	subs	r3, #8
 8000b56:	089b      	lsrs	r3, r3, #2
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	3306      	adds	r3, #6
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	18c3      	adds	r3, r0, r3
 8000b60:	3304      	adds	r3, #4
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b003      	add	sp, #12
 8000b6a:	bd90      	pop	{r4, r7, pc}
 8000b6c:	e000e100 	.word	0xe000e100
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	1e5a      	subs	r2, r3, #1
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	045b      	lsls	r3, r3, #17
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d301      	bcc.n	8000b8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e010      	b.n	8000bae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <SysTick_Config+0x44>)
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	3a01      	subs	r2, #1
 8000b92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b94:	2301      	movs	r3, #1
 8000b96:	425b      	negs	r3, r3
 8000b98:	2103      	movs	r1, #3
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f7ff ff7c 	bl	8000a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <SysTick_Config+0x44>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <SysTick_Config+0x44>)
 8000ba8:	2207      	movs	r2, #7
 8000baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	0018      	movs	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b002      	add	sp, #8
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	e000e010 	.word	0xe000e010

08000bbc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	1c02      	adds	r2, r0, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	0011      	movs	r1, r2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff ff5d 	bl	8000a98 <__NVIC_SetPriority>
}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b004      	add	sp, #16
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	0002      	movs	r2, r0
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b25b      	sxtb	r3, r3
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f7ff ff33 	bl	8000a64 <__NVIC_EnableIRQ>
}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b002      	add	sp, #8
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff ffaf 	bl	8000b74 <SysTick_Config>
 8000c16:	0003      	movs	r3, r0
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b002      	add	sp, #8
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d101      	bne.n	8000c36 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e036      	b.n	8000ca4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2221      	movs	r2, #33	; 0x21
 8000c3a:	2102      	movs	r1, #2
 8000c3c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	4a18      	ldr	r2, [pc, #96]	; (8000cac <HAL_DMA_Init+0x8c>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	695b      	ldr	r3, [r3, #20]
 8000c68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	69db      	ldr	r3, [r3, #28]
 8000c74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	0018      	movs	r0, r3
 8000c88:	f000 f9d0 	bl	800102c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2221      	movs	r2, #33	; 0x21
 8000c96:	2101      	movs	r1, #1
 8000c98:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2220      	movs	r2, #32
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
}  
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b004      	add	sp, #16
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	ffffc00f 	.word	0xffffc00f

08000cb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000cbe:	2317      	movs	r3, #23
 8000cc0:	18fb      	adds	r3, r7, r3
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2220      	movs	r2, #32
 8000cca:	5c9b      	ldrb	r3, [r3, r2]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d101      	bne.n	8000cd4 <HAL_DMA_Start_IT+0x24>
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	e04f      	b.n	8000d74 <HAL_DMA_Start_IT+0xc4>
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2220      	movs	r2, #32
 8000cd8:	2101      	movs	r1, #1
 8000cda:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2221      	movs	r2, #33	; 0x21
 8000ce0:	5c9b      	ldrb	r3, [r3, r2]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d13a      	bne.n	8000d5e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2221      	movs	r2, #33	; 0x21
 8000cec:	2102      	movs	r1, #2
 8000cee:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2101      	movs	r1, #1
 8000d02:	438a      	bics	r2, r1
 8000d04:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	68b9      	ldr	r1, [r7, #8]
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f000 f960 	bl	8000fd2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d008      	beq.n	8000d2c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	210e      	movs	r1, #14
 8000d26:	430a      	orrs	r2, r1
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e00f      	b.n	8000d4c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	210a      	movs	r1, #10
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2104      	movs	r1, #4
 8000d48:	438a      	bics	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2101      	movs	r1, #1
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	e007      	b.n	8000d6e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2220      	movs	r2, #32
 8000d62:	2100      	movs	r1, #0
 8000d64:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000d66:	2317      	movs	r3, #23
 8000d68:	18fb      	adds	r3, r7, r3
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000d6e:	2317      	movs	r3, #23
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	781b      	ldrb	r3, [r3, #0]
} 
 8000d74:	0018      	movs	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b006      	add	sp, #24
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2221      	movs	r2, #33	; 0x21
 8000d88:	5c9b      	ldrb	r3, [r3, r2]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d008      	beq.n	8000da2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2204      	movs	r2, #4
 8000d94:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2220      	movs	r2, #32
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e020      	b.n	8000de4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	210e      	movs	r1, #14
 8000dae:	438a      	bics	r2, r1
 8000db0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	438a      	bics	r2, r1
 8000dc0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4091      	lsls	r1, r2
 8000dce:	000a      	movs	r2, r1
 8000dd0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2221      	movs	r2, #33	; 0x21
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2220      	movs	r2, #32
 8000dde:	2100      	movs	r1, #0
 8000de0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	0018      	movs	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b002      	add	sp, #8
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000df4:	210f      	movs	r1, #15
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2221      	movs	r2, #33	; 0x21
 8000e00:	5c9b      	ldrb	r3, [r3, r2]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d006      	beq.n	8000e16 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
 8000e14:	e028      	b.n	8000e68 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	210e      	movs	r1, #14
 8000e22:	438a      	bics	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2101      	movs	r1, #1
 8000e32:	438a      	bics	r2, r1
 8000e34:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e3e:	2101      	movs	r1, #1
 8000e40:	4091      	lsls	r1, r2
 8000e42:	000a      	movs	r2, r1
 8000e44:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2221      	movs	r2, #33	; 0x21
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2220      	movs	r2, #32
 8000e52:	2100      	movs	r1, #0
 8000e54:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d004      	beq.n	8000e68 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	0010      	movs	r0, r2
 8000e66:	4798      	blx	r3
    } 
  }
  return status;
 8000e68:	230f      	movs	r3, #15
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	781b      	ldrb	r3, [r3, #0]
}
 8000e6e:	0018      	movs	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b004      	add	sp, #16
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	2204      	movs	r2, #4
 8000e94:	409a      	lsls	r2, r3
 8000e96:	0013      	movs	r3, r2
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	d024      	beq.n	8000ee8 <HAL_DMA_IRQHandler+0x72>
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d020      	beq.n	8000ee8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2220      	movs	r2, #32
 8000eae:	4013      	ands	r3, r2
 8000eb0:	d107      	bne.n	8000ec2 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	438a      	bics	r2, r1
 8000ec0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eca:	2104      	movs	r1, #4
 8000ecc:	4091      	lsls	r1, r2
 8000ece:	000a      	movs	r2, r1
 8000ed0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d100      	bne.n	8000edc <HAL_DMA_IRQHandler+0x66>
 8000eda:	e06a      	b.n	8000fb2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	0010      	movs	r0, r2
 8000ee4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ee6:	e064      	b.n	8000fb2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	2202      	movs	r2, #2
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	0013      	movs	r3, r2
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d02b      	beq.n	8000f50 <HAL_DMA_IRQHandler+0xda>
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	2202      	movs	r2, #2
 8000efc:	4013      	ands	r3, r2
 8000efe:	d027      	beq.n	8000f50 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2220      	movs	r2, #32
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d10b      	bne.n	8000f24 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	210a      	movs	r1, #10
 8000f18:	438a      	bics	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2221      	movs	r2, #33	; 0x21
 8000f20:	2101      	movs	r1, #1
 8000f22:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	4091      	lsls	r1, r2
 8000f30:	000a      	movs	r2, r1
 8000f32:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2220      	movs	r2, #32
 8000f38:	2100      	movs	r1, #0
 8000f3a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d036      	beq.n	8000fb2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	0010      	movs	r0, r2
 8000f4c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000f4e:	e030      	b.n	8000fb2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	2208      	movs	r2, #8
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d028      	beq.n	8000fb2 <HAL_DMA_IRQHandler+0x13c>
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	2208      	movs	r2, #8
 8000f64:	4013      	ands	r3, r2
 8000f66:	d024      	beq.n	8000fb2 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	210e      	movs	r1, #14
 8000f74:	438a      	bics	r2, r1
 8000f76:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f80:	2101      	movs	r1, #1
 8000f82:	4091      	lsls	r1, r2
 8000f84:	000a      	movs	r2, r1
 8000f86:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2221      	movs	r2, #33	; 0x21
 8000f92:	2101      	movs	r1, #1
 8000f94:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2220      	movs	r2, #32
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d005      	beq.n	8000fb2 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	0010      	movs	r0, r2
 8000fae:	4798      	blx	r3
    }
   }
}  
 8000fb0:	e7ff      	b.n	8000fb2 <HAL_DMA_IRQHandler+0x13c>
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b004      	add	sp, #16
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2221      	movs	r2, #33	; 0x21
 8000fc6:	5c9b      	ldrb	r3, [r3, r2]
 8000fc8:	b2db      	uxtb	r3, r3
}
 8000fca:	0018      	movs	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b002      	add	sp, #8
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	60f8      	str	r0, [r7, #12]
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe8:	2101      	movs	r1, #1
 8000fea:	4091      	lsls	r1, r2
 8000fec:	000a      	movs	r2, r1
 8000fee:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b10      	cmp	r3, #16
 8000ffe:	d108      	bne.n	8001012 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001010:	e007      	b.n	8001022 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	60da      	str	r2, [r3, #12]
}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b004      	add	sp, #16
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	001a      	movs	r2, r3
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <DMA_CalcBaseAndBitshift+0x60>)
 800103c:	429a      	cmp	r2, r3
 800103e:	d810      	bhi.n	8001062 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a12      	ldr	r2, [pc, #72]	; (8001090 <DMA_CalcBaseAndBitshift+0x64>)
 8001046:	4694      	mov	ip, r2
 8001048:	4463      	add	r3, ip
 800104a:	2114      	movs	r1, #20
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff f859 	bl	8000104 <__udivsi3>
 8001052:	0003      	movs	r3, r0
 8001054:	009a      	lsls	r2, r3, #2
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <DMA_CalcBaseAndBitshift+0x68>)
 800105e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001060:	e00f      	b.n	8001082 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <DMA_CalcBaseAndBitshift+0x6c>)
 8001068:	4694      	mov	ip, r2
 800106a:	4463      	add	r3, ip
 800106c:	2114      	movs	r1, #20
 800106e:	0018      	movs	r0, r3
 8001070:	f7ff f848 	bl	8000104 <__udivsi3>
 8001074:	0003      	movs	r3, r0
 8001076:	009a      	lsls	r2, r3, #2
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a07      	ldr	r2, [pc, #28]	; (800109c <DMA_CalcBaseAndBitshift+0x70>)
 8001080:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b002      	add	sp, #8
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	40020407 	.word	0x40020407
 8001090:	bffdfff8 	.word	0xbffdfff8
 8001094:	40020000 	.word	0x40020000
 8001098:	bffdfbf8 	.word	0xbffdfbf8
 800109c:	40020400 	.word	0x40020400

080010a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ae:	e155      	b.n	800135c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2101      	movs	r1, #1
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	4091      	lsls	r1, r2
 80010ba:	000a      	movs	r2, r1
 80010bc:	4013      	ands	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d100      	bne.n	80010c8 <HAL_GPIO_Init+0x28>
 80010c6:	e146      	b.n	8001356 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2203      	movs	r2, #3
 80010ce:	4013      	ands	r3, r2
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d005      	beq.n	80010e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2203      	movs	r2, #3
 80010da:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d130      	bne.n	8001142 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	409a      	lsls	r2, r3
 80010ee:	0013      	movs	r3, r2
 80010f0:	43da      	mvns	r2, r3
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	409a      	lsls	r2, r3
 8001102:	0013      	movs	r3, r2
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001116:	2201      	movs	r2, #1
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
 800111c:	0013      	movs	r3, r2
 800111e:	43da      	mvns	r2, r3
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	2201      	movs	r2, #1
 800112e:	401a      	ands	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
 8001134:	0013      	movs	r3, r2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2203      	movs	r2, #3
 8001148:	4013      	ands	r3, r2
 800114a:	2b03      	cmp	r3, #3
 800114c:	d017      	beq.n	800117e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2203      	movs	r2, #3
 800115a:	409a      	lsls	r2, r3
 800115c:	0013      	movs	r3, r2
 800115e:	43da      	mvns	r2, r3
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	409a      	lsls	r2, r3
 8001170:	0013      	movs	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2203      	movs	r2, #3
 8001184:	4013      	ands	r3, r2
 8001186:	2b02      	cmp	r3, #2
 8001188:	d123      	bne.n	80011d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	58d3      	ldr	r3, [r2, r3]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	2207      	movs	r2, #7
 800119c:	4013      	ands	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	220f      	movs	r2, #15
 80011a2:	409a      	lsls	r2, r3
 80011a4:	0013      	movs	r3, r2
 80011a6:	43da      	mvns	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	691a      	ldr	r2, [r3, #16]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	2107      	movs	r1, #7
 80011b6:	400b      	ands	r3, r1
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	409a      	lsls	r2, r3
 80011bc:	0013      	movs	r3, r2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	08da      	lsrs	r2, r3, #3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3208      	adds	r2, #8
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	6939      	ldr	r1, [r7, #16]
 80011d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	409a      	lsls	r2, r3
 80011e0:	0013      	movs	r3, r2
 80011e2:	43da      	mvns	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2203      	movs	r2, #3
 80011f0:	401a      	ands	r2, r3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	409a      	lsls	r2, r3
 80011f8:	0013      	movs	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	23c0      	movs	r3, #192	; 0xc0
 800120c:	029b      	lsls	r3, r3, #10
 800120e:	4013      	ands	r3, r2
 8001210:	d100      	bne.n	8001214 <HAL_GPIO_Init+0x174>
 8001212:	e0a0      	b.n	8001356 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001214:	4b57      	ldr	r3, [pc, #348]	; (8001374 <HAL_GPIO_Init+0x2d4>)
 8001216:	699a      	ldr	r2, [r3, #24]
 8001218:	4b56      	ldr	r3, [pc, #344]	; (8001374 <HAL_GPIO_Init+0x2d4>)
 800121a:	2101      	movs	r1, #1
 800121c:	430a      	orrs	r2, r1
 800121e:	619a      	str	r2, [r3, #24]
 8001220:	4b54      	ldr	r3, [pc, #336]	; (8001374 <HAL_GPIO_Init+0x2d4>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	2201      	movs	r2, #1
 8001226:	4013      	ands	r3, r2
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800122c:	4a52      	ldr	r2, [pc, #328]	; (8001378 <HAL_GPIO_Init+0x2d8>)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	3302      	adds	r3, #2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	589b      	ldr	r3, [r3, r2]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	2203      	movs	r2, #3
 800123e:	4013      	ands	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	220f      	movs	r2, #15
 8001244:	409a      	lsls	r2, r3
 8001246:	0013      	movs	r3, r2
 8001248:	43da      	mvns	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	2390      	movs	r3, #144	; 0x90
 8001254:	05db      	lsls	r3, r3, #23
 8001256:	429a      	cmp	r2, r3
 8001258:	d019      	beq.n	800128e <HAL_GPIO_Init+0x1ee>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a47      	ldr	r2, [pc, #284]	; (800137c <HAL_GPIO_Init+0x2dc>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x1ea>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a46      	ldr	r2, [pc, #280]	; (8001380 <HAL_GPIO_Init+0x2e0>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x1e6>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a45      	ldr	r2, [pc, #276]	; (8001384 <HAL_GPIO_Init+0x2e4>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x1e2>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a44      	ldr	r2, [pc, #272]	; (8001388 <HAL_GPIO_Init+0x2e8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x1de>
 800127a:	2304      	movs	r3, #4
 800127c:	e008      	b.n	8001290 <HAL_GPIO_Init+0x1f0>
 800127e:	2305      	movs	r3, #5
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x1f0>
 8001282:	2303      	movs	r3, #3
 8001284:	e004      	b.n	8001290 <HAL_GPIO_Init+0x1f0>
 8001286:	2302      	movs	r3, #2
 8001288:	e002      	b.n	8001290 <HAL_GPIO_Init+0x1f0>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <HAL_GPIO_Init+0x1f0>
 800128e:	2300      	movs	r3, #0
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	2103      	movs	r1, #3
 8001294:	400a      	ands	r2, r1
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4093      	lsls	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012a0:	4935      	ldr	r1, [pc, #212]	; (8001378 <HAL_GPIO_Init+0x2d8>)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ae:	4b37      	ldr	r3, [pc, #220]	; (800138c <HAL_GPIO_Init+0x2ec>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43da      	mvns	r2, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	025b      	lsls	r3, r3, #9
 80012c6:	4013      	ands	r3, r2
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012d2:	4b2e      	ldr	r3, [pc, #184]	; (800138c <HAL_GPIO_Init+0x2ec>)
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012d8:	4b2c      	ldr	r3, [pc, #176]	; (800138c <HAL_GPIO_Init+0x2ec>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	43da      	mvns	r2, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	029b      	lsls	r3, r3, #10
 80012f0:	4013      	ands	r3, r2
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012fc:	4b23      	ldr	r3, [pc, #140]	; (800138c <HAL_GPIO_Init+0x2ec>)
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001302:	4b22      	ldr	r3, [pc, #136]	; (800138c <HAL_GPIO_Init+0x2ec>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	43da      	mvns	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	035b      	lsls	r3, r3, #13
 800131a:	4013      	ands	r3, r2
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <HAL_GPIO_Init+0x2ec>)
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <HAL_GPIO_Init+0x2ec>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	43da      	mvns	r2, r3
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	039b      	lsls	r3, r3, #14
 8001344:	4013      	ands	r3, r2
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <HAL_GPIO_Init+0x2ec>)
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	40da      	lsrs	r2, r3
 8001364:	1e13      	subs	r3, r2, #0
 8001366:	d000      	beq.n	800136a <HAL_GPIO_Init+0x2ca>
 8001368:	e6a2      	b.n	80010b0 <HAL_GPIO_Init+0x10>
  } 
}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	46c0      	nop			; (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b006      	add	sp, #24
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	40010000 	.word	0x40010000
 800137c:	48000400 	.word	0x48000400
 8001380:	48000800 	.word	0x48000800
 8001384:	48000c00 	.word	0x48000c00
 8001388:	48001000 	.word	0x48001000
 800138c:	40010400 	.word	0x40010400

08001390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	0008      	movs	r0, r1
 800139a:	0011      	movs	r1, r2
 800139c:	1cbb      	adds	r3, r7, #2
 800139e:	1c02      	adds	r2, r0, #0
 80013a0:	801a      	strh	r2, [r3, #0]
 80013a2:	1c7b      	adds	r3, r7, #1
 80013a4:	1c0a      	adds	r2, r1, #0
 80013a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a8:	1c7b      	adds	r3, r7, #1
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d004      	beq.n	80013ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013b0:	1cbb      	adds	r3, r7, #2
 80013b2:	881a      	ldrh	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013b8:	e003      	b.n	80013c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ba:	1cbb      	adds	r3, r7, #2
 80013bc:	881a      	ldrh	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b002      	add	sp, #8
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e082      	b.n	80014e4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2241      	movs	r2, #65	; 0x41
 80013e2:	5c9b      	ldrb	r3, [r3, r2]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d107      	bne.n	80013fa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2240      	movs	r2, #64	; 0x40
 80013ee:	2100      	movs	r1, #0
 80013f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7ff f90b 	bl	8000610 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2241      	movs	r2, #65	; 0x41
 80013fe:	2124      	movs	r1, #36	; 0x24
 8001400:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2101      	movs	r1, #1
 800140e:	438a      	bics	r2, r1
 8001410:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4934      	ldr	r1, [pc, #208]	; (80014ec <HAL_I2C_Init+0x120>)
 800141c:	400a      	ands	r2, r1
 800141e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4931      	ldr	r1, [pc, #196]	; (80014f0 <HAL_I2C_Init+0x124>)
 800142c:	400a      	ands	r2, r1
 800142e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d108      	bne.n	800144a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2180      	movs	r1, #128	; 0x80
 8001442:	0209      	lsls	r1, r1, #8
 8001444:	430a      	orrs	r2, r1
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	e007      	b.n	800145a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2184      	movs	r1, #132	; 0x84
 8001454:	0209      	lsls	r1, r1, #8
 8001456:	430a      	orrs	r2, r1
 8001458:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d104      	bne.n	800146c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2280      	movs	r2, #128	; 0x80
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	491f      	ldr	r1, [pc, #124]	; (80014f4 <HAL_I2C_Init+0x128>)
 8001478:	430a      	orrs	r2, r1
 800147a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	491a      	ldr	r1, [pc, #104]	; (80014f0 <HAL_I2C_Init+0x124>)
 8001488:	400a      	ands	r2, r1
 800148a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691a      	ldr	r2, [r3, #16]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	431a      	orrs	r2, r3
 8001496:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69d9      	ldr	r1, [r3, #28]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a1a      	ldr	r2, [r3, #32]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2101      	movs	r1, #1
 80014c2:	430a      	orrs	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2241      	movs	r2, #65	; 0x41
 80014d0:	2120      	movs	r1, #32
 80014d2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2242      	movs	r2, #66	; 0x42
 80014de:	2100      	movs	r1, #0
 80014e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	0018      	movs	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b002      	add	sp, #8
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	f0ffffff 	.word	0xf0ffffff
 80014f0:	ffff7fff 	.word	0xffff7fff
 80014f4:	02008000 	.word	0x02008000

080014f8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80014f8:	b5b0      	push	{r4, r5, r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af02      	add	r7, sp, #8
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	0008      	movs	r0, r1
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	0019      	movs	r1, r3
 8001506:	230a      	movs	r3, #10
 8001508:	18fb      	adds	r3, r7, r3
 800150a:	1c02      	adds	r2, r0, #0
 800150c:	801a      	strh	r2, [r3, #0]
 800150e:	2308      	movs	r3, #8
 8001510:	18fb      	adds	r3, r7, r3
 8001512:	1c0a      	adds	r2, r1, #0
 8001514:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2241      	movs	r2, #65	; 0x41
 800151a:	5c9b      	ldrb	r3, [r3, r2]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b20      	cmp	r3, #32
 8001520:	d000      	beq.n	8001524 <HAL_I2C_Master_Receive_DMA+0x2c>
 8001522:	e0dd      	b.n	80016e0 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	699a      	ldr	r2, [r3, #24]
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	401a      	ands	r2, r3
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	429a      	cmp	r2, r3
 8001536:	d101      	bne.n	800153c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8001538:	2302      	movs	r3, #2
 800153a:	e0d2      	b.n	80016e2 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2240      	movs	r2, #64	; 0x40
 8001540:	5c9b      	ldrb	r3, [r3, r2]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_I2C_Master_Receive_DMA+0x52>
 8001546:	2302      	movs	r3, #2
 8001548:	e0cb      	b.n	80016e2 <HAL_I2C_Master_Receive_DMA+0x1ea>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2240      	movs	r2, #64	; 0x40
 800154e:	2101      	movs	r1, #1
 8001550:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2241      	movs	r2, #65	; 0x41
 8001556:	2122      	movs	r1, #34	; 0x22
 8001558:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2242      	movs	r2, #66	; 0x42
 800155e:	2110      	movs	r1, #16
 8001560:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2208      	movs	r2, #8
 8001572:	18ba      	adds	r2, r7, r2
 8001574:	8812      	ldrh	r2, [r2, #0]
 8001576:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4a5c      	ldr	r2, [pc, #368]	; (80016ec <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800157c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4a5b      	ldr	r2, [pc, #364]	; (80016f0 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8001582:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001588:	b29b      	uxth	r3, r3
 800158a:	2bff      	cmp	r3, #255	; 0xff
 800158c:	d906      	bls.n	800159c <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	22ff      	movs	r2, #255	; 0xff
 8001592:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	045b      	lsls	r3, r3, #17
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e007      	b.n	80015ac <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	049b      	lsls	r3, r3, #18
 80015aa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d100      	bne.n	80015b6 <HAL_I2C_Master_Receive_DMA+0xbe>
 80015b4:	e078      	b.n	80016a8 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d023      	beq.n	8001606 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c2:	4a4c      	ldr	r2, [pc, #304]	; (80016f4 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ca:	4a4b      	ldr	r2, [pc, #300]	; (80016f8 <HAL_I2C_Master_Receive_DMA+0x200>)
 80015cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d2:	2200      	movs	r2, #0
 80015d4:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015da:	2200      	movs	r2, #0
 80015dc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	3324      	adds	r3, #36	; 0x24
 80015e8:	0019      	movs	r1, r3
 80015ea:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80015f0:	2513      	movs	r5, #19
 80015f2:	197c      	adds	r4, r7, r5
 80015f4:	f7ff fb5c 	bl	8000cb0 <HAL_DMA_Start_IT>
 80015f8:	0003      	movs	r3, r0
 80015fa:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80015fc:	197b      	adds	r3, r7, r5
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d13d      	bne.n	8001680 <HAL_I2C_Master_Receive_DMA+0x188>
 8001604:	e013      	b.n	800162e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2241      	movs	r2, #65	; 0x41
 800160a:	2120      	movs	r1, #32
 800160c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2242      	movs	r2, #66	; 0x42
 8001612:	2100      	movs	r1, #0
 8001614:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	2280      	movs	r2, #128	; 0x80
 800161c:	431a      	orrs	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2240      	movs	r2, #64	; 0x40
 8001626:	2100      	movs	r1, #0
 8001628:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e059      	b.n	80016e2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001632:	b2da      	uxtb	r2, r3
 8001634:	697c      	ldr	r4, [r7, #20]
 8001636:	230a      	movs	r3, #10
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	8819      	ldrh	r1, [r3, #0]
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <HAL_I2C_Master_Receive_DMA+0x204>)
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	0023      	movs	r3, r4
 8001644:	f001 fa60 	bl	8002b08 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800164c:	b29a      	uxth	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	b29a      	uxth	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2240      	movs	r2, #64	; 0x40
 800165e:	2100      	movs	r1, #0
 8001660:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2110      	movs	r1, #16
 8001666:	0018      	movs	r0, r3
 8001668:	f001 fa84 	bl	8002b74 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2180      	movs	r1, #128	; 0x80
 8001678:	0209      	lsls	r1, r1, #8
 800167a:	430a      	orrs	r2, r1
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e02d      	b.n	80016dc <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2241      	movs	r2, #65	; 0x41
 8001684:	2120      	movs	r1, #32
 8001686:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2242      	movs	r2, #66	; 0x42
 800168c:	2100      	movs	r1, #0
 800168e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001694:	2210      	movs	r2, #16
 8001696:	431a      	orrs	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2240      	movs	r2, #64	; 0x40
 80016a0:	2100      	movs	r1, #0
 80016a2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e01c      	b.n	80016e2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4a15      	ldr	r2, [pc, #84]	; (8001700 <HAL_I2C_Master_Receive_DMA+0x208>)
 80016ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	049c      	lsls	r4, r3, #18
 80016b8:	230a      	movs	r3, #10
 80016ba:	18fb      	adds	r3, r7, r3
 80016bc:	8819      	ldrh	r1, [r3, #0]
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <HAL_I2C_Master_Receive_DMA+0x204>)
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	0023      	movs	r3, r4
 80016c6:	f001 fa1f 	bl	8002b08 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2240      	movs	r2, #64	; 0x40
 80016ce:	2100      	movs	r1, #0
 80016d0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2101      	movs	r1, #1
 80016d6:	0018      	movs	r0, r3
 80016d8:	f001 fa4c 	bl	8002b74 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80016dc:	2300      	movs	r3, #0
 80016de:	e000      	b.n	80016e2 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80016e0:	2302      	movs	r3, #2
  }
}
 80016e2:	0018      	movs	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b006      	add	sp, #24
 80016e8:	bdb0      	pop	{r4, r5, r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	ffff0000 	.word	0xffff0000
 80016f0:	08001c61 	.word	0x08001c61
 80016f4:	080029f9 	.word	0x080029f9
 80016f8:	08002a99 	.word	0x08002a99
 80016fc:	80002400 	.word	0x80002400
 8001700:	080017b5 	.word	0x080017b5

08001704 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800170c:	46c0      	nop			; (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	b002      	add	sp, #8
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800171c:	46c0      	nop			; (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	b002      	add	sp, #8
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	b002      	add	sp, #8
 8001732:	bd80      	pop	{r7, pc}

08001734 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b002      	add	sp, #8
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	0008      	movs	r0, r1
 800174e:	0011      	movs	r1, r2
 8001750:	1cfb      	adds	r3, r7, #3
 8001752:	1c02      	adds	r2, r0, #0
 8001754:	701a      	strb	r2, [r3, #0]
 8001756:	003b      	movs	r3, r7
 8001758:	1c0a      	adds	r2, r1, #0
 800175a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800175c:	46c0      	nop			; (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	b002      	add	sp, #8
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800176c:	46c0      	nop			; (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	b002      	add	sp, #8
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800177c:	46c0      	nop			; (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	b002      	add	sp, #8
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800178c:	46c0      	nop			; (mov r8, r8)
 800178e:	46bd      	mov	sp, r7
 8001790:	b002      	add	sp, #8
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800179c:	46c0      	nop			; (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	b002      	add	sp, #8
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b002      	add	sp, #8
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af02      	add	r7, sp, #8
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2240      	movs	r2, #64	; 0x40
 80017c8:	5c9b      	ldrb	r3, [r3, r2]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <I2C_Master_ISR_IT+0x1e>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e12b      	b.n	8001a2a <I2C_Master_ISR_IT+0x276>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2240      	movs	r2, #64	; 0x40
 80017d6:	2101      	movs	r1, #1
 80017d8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	001a      	movs	r2, r3
 80017e0:	2301      	movs	r3, #1
 80017e2:	4013      	ands	r3, r2
 80017e4:	d014      	beq.n	8001810 <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	001a      	movs	r2, r3
 80017ec:	2301      	movs	r3, #1
 80017ee:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80017f0:	d00e      	beq.n	8001810 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2210      	movs	r2, #16
 80017f8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	2204      	movs	r2, #4
 8001800:	431a      	orrs	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	0018      	movs	r0, r3
 800180a:	f001 f8d2 	bl	80029b2 <I2C_Flush_TXDR>
 800180e:	e0f5      	b.n	80019fc <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	089b      	lsrs	r3, r3, #2
 8001814:	001a      	movs	r2, r3
 8001816:	2301      	movs	r3, #1
 8001818:	4013      	ands	r3, r2
 800181a:	d023      	beq.n	8001864 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	089b      	lsrs	r3, r3, #2
 8001820:	001a      	movs	r2, r3
 8001822:	2301      	movs	r3, #1
 8001824:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001826:	d01d      	beq.n	8001864 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2204      	movs	r2, #4
 800182c:	4393      	bics	r3, r2
 800182e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184c:	3b01      	subs	r3, #1
 800184e:	b29a      	uxth	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001858:	b29b      	uxth	r3, r3
 800185a:	3b01      	subs	r3, #1
 800185c:	b29a      	uxth	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001862:	e0cb      	b.n	80019fc <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	085b      	lsrs	r3, r3, #1
 8001868:	001a      	movs	r2, r3
 800186a:	2301      	movs	r3, #1
 800186c:	4013      	ands	r3, r2
 800186e:	d01e      	beq.n	80018ae <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	085b      	lsrs	r3, r3, #1
 8001874:	001a      	movs	r2, r3
 8001876:	2301      	movs	r3, #1
 8001878:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800187a:	d018      	beq.n	80018ae <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	781a      	ldrb	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001896:	3b01      	subs	r3, #1
 8001898:	b29a      	uxth	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	3b01      	subs	r3, #1
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018ac:	e0a6      	b.n	80019fc <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	09db      	lsrs	r3, r3, #7
 80018b2:	001a      	movs	r2, r3
 80018b4:	2301      	movs	r3, #1
 80018b6:	4013      	ands	r3, r2
 80018b8:	d100      	bne.n	80018bc <I2C_Master_ISR_IT+0x108>
 80018ba:	e06b      	b.n	8001994 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	099b      	lsrs	r3, r3, #6
 80018c0:	001a      	movs	r2, r3
 80018c2:	2301      	movs	r3, #1
 80018c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80018c6:	d065      	beq.n	8001994 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d04a      	beq.n	8001968 <I2C_Master_ISR_IT+0x1b4>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d146      	bne.n	8001968 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	2112      	movs	r1, #18
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	0592      	lsls	r2, r2, #22
 80018e8:	0d92      	lsrs	r2, r2, #22
 80018ea:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	2bff      	cmp	r3, #255	; 0xff
 80018f4:	d910      	bls.n	8001918 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	22ff      	movs	r2, #255	; 0xff
 80018fa:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001900:	b2da      	uxtb	r2, r3
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	045c      	lsls	r4, r3, #17
 8001906:	187b      	adds	r3, r7, r1
 8001908:	8819      	ldrh	r1, [r3, #0]
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	2300      	movs	r3, #0
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	0023      	movs	r3, r4
 8001912:	f001 f8f9 	bl	8002b08 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001916:	e03c      	b.n	8001992 <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001926:	4a43      	ldr	r2, [pc, #268]	; (8001a34 <I2C_Master_ISR_IT+0x280>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d00e      	beq.n	800194a <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001930:	b2da      	uxtb	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001936:	2312      	movs	r3, #18
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	8819      	ldrh	r1, [r3, #0]
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	2300      	movs	r3, #0
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	0023      	movs	r3, r4
 8001944:	f001 f8e0 	bl	8002b08 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001948:	e023      	b.n	8001992 <I2C_Master_ISR_IT+0x1de>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194e:	b2da      	uxtb	r2, r3
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	049c      	lsls	r4, r3, #18
 8001954:	2312      	movs	r3, #18
 8001956:	18fb      	adds	r3, r7, r3
 8001958:	8819      	ldrh	r1, [r3, #0]
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	2300      	movs	r3, #0
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	0023      	movs	r3, r4
 8001962:	f001 f8d1 	bl	8002b08 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001966:	e014      	b.n	8001992 <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	049b      	lsls	r3, r3, #18
 8001972:	401a      	ands	r2, r3
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	049b      	lsls	r3, r3, #18
 8001978:	429a      	cmp	r2, r3
 800197a:	d004      	beq.n	8001986 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	0018      	movs	r0, r3
 8001980:	f000 fc14 	bl	80021ac <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001984:	e03a      	b.n	80019fc <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2140      	movs	r1, #64	; 0x40
 800198a:	0018      	movs	r0, r3
 800198c:	f000 ff06 	bl	800279c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001990:	e034      	b.n	80019fc <I2C_Master_ISR_IT+0x248>
 8001992:	e033      	b.n	80019fc <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	099b      	lsrs	r3, r3, #6
 8001998:	001a      	movs	r2, r3
 800199a:	2301      	movs	r3, #1
 800199c:	4013      	ands	r3, r2
 800199e:	d02d      	beq.n	80019fc <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	099b      	lsrs	r3, r3, #6
 80019a4:	001a      	movs	r2, r3
 80019a6:	2301      	movs	r3, #1
 80019a8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80019aa:	d027      	beq.n	80019fc <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d11d      	bne.n	80019f2 <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	049b      	lsls	r3, r3, #18
 80019c0:	401a      	ands	r2, r3
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	049b      	lsls	r3, r3, #18
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d018      	beq.n	80019fc <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	4a19      	ldr	r2, [pc, #100]	; (8001a34 <I2C_Master_ISR_IT+0x280>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d109      	bne.n	80019e8 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	01c9      	lsls	r1, r1, #7
 80019e2:	430a      	orrs	r2, r1
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	e009      	b.n	80019fc <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	0018      	movs	r0, r3
 80019ec:	f000 fbde 	bl	80021ac <I2C_ITMasterSeqCplt>
 80019f0:	e004      	b.n	80019fc <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2140      	movs	r1, #64	; 0x40
 80019f6:	0018      	movs	r0, r3
 80019f8:	f000 fed0 	bl	800279c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	001a      	movs	r2, r3
 8001a02:	2301      	movs	r3, #1
 8001a04:	4013      	ands	r3, r2
 8001a06:	d00b      	beq.n	8001a20 <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	001a      	movs	r2, r3
 8001a0e:	2301      	movs	r3, #1
 8001a10:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a12:	d005      	beq.n	8001a20 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	0011      	movs	r1, r2
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f000 fc6e 	bl	80022fc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2240      	movs	r2, #64	; 0x40
 8001a24:	2100      	movs	r1, #0
 8001a26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b007      	add	sp, #28
 8001a30:	bd90      	pop	{r4, r7, pc}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	ffff0000 	.word	0xffff0000

08001a38 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2240      	movs	r2, #64	; 0x40
 8001a52:	5c9b      	ldrb	r3, [r3, r2]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <I2C_Slave_ISR_IT+0x24>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e0fa      	b.n	8001c52 <I2C_Slave_ISR_IT+0x21a>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2240      	movs	r2, #64	; 0x40
 8001a60:	2101      	movs	r1, #1
 8001a62:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	001a      	movs	r2, r3
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d00b      	beq.n	8001a88 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	001a      	movs	r2, r3
 8001a76:	2301      	movs	r3, #1
 8001a78:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a7a:	d005      	beq.n	8001a88 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	0011      	movs	r1, r2
 8001a82:	0018      	movs	r0, r3
 8001a84:	f000 fd0c 	bl	80024a0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	091b      	lsrs	r3, r3, #4
 8001a8c:	001a      	movs	r2, r3
 8001a8e:	2301      	movs	r3, #1
 8001a90:	4013      	ands	r3, r2
 8001a92:	d054      	beq.n	8001b3e <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	091b      	lsrs	r3, r3, #4
 8001a98:	001a      	movs	r2, r3
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001a9e:	d04e      	beq.n	8001b3e <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d12d      	bne.n	8001b06 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2241      	movs	r2, #65	; 0x41
 8001aae:	5c9b      	ldrb	r3, [r3, r2]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b28      	cmp	r3, #40	; 0x28
 8001ab4:	d10b      	bne.n	8001ace <I2C_Slave_ISR_IT+0x96>
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	049b      	lsls	r3, r3, #18
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d106      	bne.n	8001ace <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	0011      	movs	r1, r2
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f000 fe0e 	bl	80026e8 <I2C_ITListenCplt>
 8001acc:	e036      	b.n	8001b3c <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2241      	movs	r2, #65	; 0x41
 8001ad2:	5c9b      	ldrb	r3, [r3, r2]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b29      	cmp	r3, #41	; 0x29
 8001ad8:	d110      	bne.n	8001afc <I2C_Slave_ISR_IT+0xc4>
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	4a5f      	ldr	r2, [pc, #380]	; (8001c5c <I2C_Slave_ISR_IT+0x224>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00c      	beq.n	8001afc <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2210      	movs	r2, #16
 8001ae8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	0018      	movs	r0, r3
 8001aee:	f000 ff60 	bl	80029b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	0018      	movs	r0, r3
 8001af6:	f000 fb9b 	bl	8002230 <I2C_ITSlaveSeqCplt>
 8001afa:	e01f      	b.n	8001b3c <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2210      	movs	r2, #16
 8001b02:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001b04:	e09d      	b.n	8001c42 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2210      	movs	r2, #16
 8001b0c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	2204      	movs	r2, #4
 8001b14:	431a      	orrs	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <I2C_Slave_ISR_IT+0xf4>
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	2380      	movs	r3, #128	; 0x80
 8001b24:	045b      	lsls	r3, r3, #17
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d000      	beq.n	8001b2c <I2C_Slave_ISR_IT+0xf4>
 8001b2a:	e08a      	b.n	8001c42 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	0011      	movs	r1, r2
 8001b34:	0018      	movs	r0, r3
 8001b36:	f000 fe31 	bl	800279c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001b3a:	e082      	b.n	8001c42 <I2C_Slave_ISR_IT+0x20a>
 8001b3c:	e081      	b.n	8001c42 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	001a      	movs	r2, r3
 8001b44:	2301      	movs	r3, #1
 8001b46:	4013      	ands	r3, r2
 8001b48:	d031      	beq.n	8001bae <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	089b      	lsrs	r3, r3, #2
 8001b4e:	001a      	movs	r2, r3
 8001b50:	2301      	movs	r3, #1
 8001b52:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001b54:	d02b      	beq.n	8001bae <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d018      	beq.n	8001b92 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d154      	bne.n	8001c46 <I2C_Slave_ISR_IT+0x20e>
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	4a2f      	ldr	r2, [pc, #188]	; (8001c5c <I2C_Slave_ISR_IT+0x224>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d050      	beq.n	8001c46 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f000 fb42 	bl	8002230 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001bac:	e04b      	b.n	8001c46 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	08db      	lsrs	r3, r3, #3
 8001bb2:	001a      	movs	r2, r3
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d00c      	beq.n	8001bd4 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	08db      	lsrs	r3, r3, #3
 8001bbe:	001a      	movs	r2, r3
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001bc4:	d006      	beq.n	8001bd4 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	0011      	movs	r1, r2
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f000 fa49 	bl	8002064 <I2C_ITAddrCplt>
 8001bd2:	e039      	b.n	8001c48 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	085b      	lsrs	r3, r3, #1
 8001bd8:	001a      	movs	r2, r3
 8001bda:	2301      	movs	r3, #1
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d033      	beq.n	8001c48 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	085b      	lsrs	r3, r3, #1
 8001be4:	001a      	movs	r2, r3
 8001be6:	2301      	movs	r3, #1
 8001be8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001bea:	d02d      	beq.n	8001c48 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d018      	beq.n	8001c28 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	781a      	ldrb	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	3b01      	subs	r3, #1
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	851a      	strh	r2, [r3, #40]	; 0x28
 8001c26:	e00f      	b.n	8001c48 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	045b      	lsls	r3, r3, #17
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d002      	beq.n	8001c38 <I2C_Slave_ISR_IT+0x200>
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d107      	bne.n	8001c48 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f000 faf8 	bl	8002230 <I2C_ITSlaveSeqCplt>
 8001c40:	e002      	b.n	8001c48 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	e000      	b.n	8001c48 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8001c46:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2240      	movs	r2, #64	; 0x40
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	0018      	movs	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b006      	add	sp, #24
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	ffff0000 	.word	0xffff0000

08001c60 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b089      	sub	sp, #36	; 0x24
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2240      	movs	r2, #64	; 0x40
 8001c70:	5c9b      	ldrb	r3, [r3, r2]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <I2C_Master_ISR_DMA+0x1a>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e0f7      	b.n	8001e6a <I2C_Master_ISR_DMA+0x20a>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2240      	movs	r2, #64	; 0x40
 8001c7e:	2101      	movs	r1, #1
 8001c80:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	001a      	movs	r2, r3
 8001c88:	2301      	movs	r3, #1
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d019      	beq.n	8001cc2 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	001a      	movs	r2, r3
 8001c94:	2301      	movs	r3, #1
 8001c96:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001c98:	d013      	beq.n	8001cc2 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2210      	movs	r2, #16
 8001ca0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2120      	movs	r1, #32
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f000 ff5e 	bl	8002b74 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f000 fe79 	bl	80029b2 <I2C_Flush_TXDR>
 8001cc0:	e0ce      	b.n	8001e60 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	09db      	lsrs	r3, r3, #7
 8001cc6:	001a      	movs	r2, r3
 8001cc8:	2301      	movs	r3, #1
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d100      	bne.n	8001cd0 <I2C_Master_ISR_DMA+0x70>
 8001cce:	e07e      	b.n	8001dce <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	099b      	lsrs	r3, r3, #6
 8001cd4:	001a      	movs	r2, r3
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001cda:	d100      	bne.n	8001cde <I2C_Master_ISR_DMA+0x7e>
 8001cdc:	e077      	b.n	8001dce <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2140      	movs	r1, #64	; 0x40
 8001cea:	438a      	bics	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d055      	beq.n	8001da4 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	2312      	movs	r3, #18
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	0592      	lsls	r2, r2, #22
 8001d06:	0d92      	lsrs	r2, r2, #22
 8001d08:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	2bff      	cmp	r3, #255	; 0xff
 8001d12:	d906      	bls.n	8001d22 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	22ff      	movs	r2, #255	; 0xff
 8001d18:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	045b      	lsls	r3, r3, #17
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	e010      	b.n	8001d44 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d30:	4a50      	ldr	r2, [pc, #320]	; (8001e74 <I2C_Master_ISR_DMA+0x214>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d003      	beq.n	8001d3e <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	e002      	b.n	8001d44 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	049b      	lsls	r3, r3, #18
 8001d42:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	697c      	ldr	r4, [r7, #20]
 8001d4c:	2312      	movs	r3, #18
 8001d4e:	18fb      	adds	r3, r7, r3
 8001d50:	8819      	ldrh	r1, [r3, #0]
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	2300      	movs	r3, #0
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	0023      	movs	r3, r4
 8001d5a:	f000 fed5 	bl	8002b08 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2241      	movs	r2, #65	; 0x41
 8001d74:	5c9b      	ldrb	r3, [r3, r2]
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b22      	cmp	r3, #34	; 0x22
 8001d7a:	d109      	bne.n	8001d90 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2180      	movs	r1, #128	; 0x80
 8001d88:	0209      	lsls	r1, r1, #8
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001d8e:	e067      	b.n	8001e60 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2180      	movs	r1, #128	; 0x80
 8001d9c:	01c9      	lsls	r1, r1, #7
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001da2:	e05d      	b.n	8001e60 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	049b      	lsls	r3, r3, #18
 8001dae:	401a      	ands	r2, r3
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	049b      	lsls	r3, r3, #18
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d004      	beq.n	8001dc2 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f000 f9f6 	bl	80021ac <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001dc0:	e04e      	b.n	8001e60 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2140      	movs	r1, #64	; 0x40
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f000 fce8 	bl	800279c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001dcc:	e048      	b.n	8001e60 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	099b      	lsrs	r3, r3, #6
 8001dd2:	001a      	movs	r2, r3
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d02e      	beq.n	8001e38 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	099b      	lsrs	r3, r3, #6
 8001dde:	001a      	movs	r2, r3
 8001de0:	2301      	movs	r3, #1
 8001de2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001de4:	d028      	beq.n	8001e38 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d11d      	bne.n	8001e2c <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	049b      	lsls	r3, r3, #18
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	049b      	lsls	r3, r3, #18
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d02c      	beq.n	8001e5e <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	4a1a      	ldr	r2, [pc, #104]	; (8001e74 <I2C_Master_ISR_DMA+0x214>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d109      	bne.n	8001e22 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2180      	movs	r1, #128	; 0x80
 8001e1a:	01c9      	lsls	r1, r1, #7
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001e20:	e01d      	b.n	8001e5e <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	0018      	movs	r0, r3
 8001e26:	f000 f9c1 	bl	80021ac <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001e2a:	e018      	b.n	8001e5e <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2140      	movs	r1, #64	; 0x40
 8001e30:	0018      	movs	r0, r3
 8001e32:	f000 fcb3 	bl	800279c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001e36:	e012      	b.n	8001e5e <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	095b      	lsrs	r3, r3, #5
 8001e3c:	001a      	movs	r2, r3
 8001e3e:	2301      	movs	r3, #1
 8001e40:	4013      	ands	r3, r2
 8001e42:	d00d      	beq.n	8001e60 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	001a      	movs	r2, r3
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e4e:	d007      	beq.n	8001e60 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	0011      	movs	r1, r2
 8001e56:	0018      	movs	r0, r3
 8001e58:	f000 fa50 	bl	80022fc <I2C_ITMasterCplt>
 8001e5c:	e000      	b.n	8001e60 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8001e5e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2240      	movs	r2, #64	; 0x40
 8001e64:	2100      	movs	r1, #0
 8001e66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b007      	add	sp, #28
 8001e70:	bd90      	pop	{r4, r7, pc}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	ffff0000 	.word	0xffff0000

08001e78 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2240      	movs	r2, #64	; 0x40
 8001e92:	5c9b      	ldrb	r3, [r3, r2]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <I2C_Slave_ISR_DMA+0x24>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e0dd      	b.n	8002058 <I2C_Slave_ISR_DMA+0x1e0>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2240      	movs	r2, #64	; 0x40
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	001a      	movs	r2, r3
 8001eaa:	2301      	movs	r3, #1
 8001eac:	4013      	ands	r3, r2
 8001eae:	d00b      	beq.n	8001ec8 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	001a      	movs	r2, r3
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001eba:	d005      	beq.n	8001ec8 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	0011      	movs	r1, r2
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f000 faec 	bl	80024a0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	091b      	lsrs	r3, r3, #4
 8001ecc:	001a      	movs	r2, r3
 8001ece:	2301      	movs	r3, #1
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d100      	bne.n	8001ed6 <I2C_Slave_ISR_DMA+0x5e>
 8001ed4:	e0a9      	b.n	800202a <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	001a      	movs	r2, r3
 8001edc:	2301      	movs	r3, #1
 8001ede:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001ee0:	d100      	bne.n	8001ee4 <I2C_Slave_ISR_DMA+0x6c>
 8001ee2:	e0a2      	b.n	800202a <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	0b9b      	lsrs	r3, r3, #14
 8001ee8:	001a      	movs	r2, r3
 8001eea:	2301      	movs	r3, #1
 8001eec:	4013      	ands	r3, r2
 8001eee:	d106      	bne.n	8001efe <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	0bdb      	lsrs	r3, r3, #15
 8001ef4:	001a      	movs	r2, r3
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001efa:	d100      	bne.n	8001efe <I2C_Slave_ISR_DMA+0x86>
 8001efc:	e08e      	b.n	800201c <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00d      	beq.n	8001f22 <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	0bdb      	lsrs	r3, r3, #15
 8001f0a:	001a      	movs	r2, r3
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d007      	beq.n	8001f22 <I2C_Slave_ISR_DMA+0xaa>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00d      	beq.n	8001f46 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	0b9b      	lsrs	r3, r3, #14
 8001f2e:	001a      	movs	r2, r3
 8001f30:	2301      	movs	r3, #1
 8001f32:	4013      	ands	r3, r2
 8001f34:	d007      	beq.n	8001f46 <I2C_Slave_ISR_DMA+0xce>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8001f42:	2301      	movs	r3, #1
 8001f44:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d12d      	bne.n	8001fa8 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2241      	movs	r2, #65	; 0x41
 8001f50:	5c9b      	ldrb	r3, [r3, r2]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b28      	cmp	r3, #40	; 0x28
 8001f56:	d10b      	bne.n	8001f70 <I2C_Slave_ISR_DMA+0xf8>
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	049b      	lsls	r3, r3, #18
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d106      	bne.n	8001f70 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	0011      	movs	r1, r2
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f000 fbbd 	bl	80026e8 <I2C_ITListenCplt>
 8001f6e:	e054      	b.n	800201a <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2241      	movs	r2, #65	; 0x41
 8001f74:	5c9b      	ldrb	r3, [r3, r2]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b29      	cmp	r3, #41	; 0x29
 8001f7a:	d110      	bne.n	8001f9e <I2C_Slave_ISR_DMA+0x126>
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	4a38      	ldr	r2, [pc, #224]	; (8002060 <I2C_Slave_ISR_DMA+0x1e8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d00c      	beq.n	8001f9e <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2210      	movs	r2, #16
 8001f8a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f000 fd0f 	bl	80029b2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	0018      	movs	r0, r3
 8001f98:	f000 f94a 	bl	8002230 <I2C_ITSlaveSeqCplt>
 8001f9c:	e03d      	b.n	800201a <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2210      	movs	r2, #16
 8001fa4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001fa6:	e03e      	b.n	8002026 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2210      	movs	r2, #16
 8001fae:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001fbc:	2317      	movs	r3, #23
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	2141      	movs	r1, #65	; 0x41
 8001fc4:	5c52      	ldrb	r2, [r2, r1]
 8001fc6:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d004      	beq.n	8001fd8 <I2C_Slave_ISR_DMA+0x160>
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	045b      	lsls	r3, r3, #17
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d126      	bne.n	8002026 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001fd8:	2217      	movs	r2, #23
 8001fda:	18bb      	adds	r3, r7, r2
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b21      	cmp	r3, #33	; 0x21
 8001fe0:	d003      	beq.n	8001fea <I2C_Slave_ISR_DMA+0x172>
 8001fe2:	18bb      	adds	r3, r7, r2
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b29      	cmp	r3, #41	; 0x29
 8001fe8:	d103      	bne.n	8001ff2 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2221      	movs	r2, #33	; 0x21
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30
 8001ff0:	e00b      	b.n	800200a <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001ff2:	2217      	movs	r2, #23
 8001ff4:	18bb      	adds	r3, r7, r2
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b22      	cmp	r3, #34	; 0x22
 8001ffa:	d003      	beq.n	8002004 <I2C_Slave_ISR_DMA+0x18c>
 8001ffc:	18bb      	adds	r3, r7, r2
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b2a      	cmp	r3, #42	; 0x2a
 8002002:	d102      	bne.n	800200a <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2222      	movs	r2, #34	; 0x22
 8002008:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	0011      	movs	r1, r2
 8002012:	0018      	movs	r0, r3
 8002014:	f000 fbc2 	bl	800279c <I2C_ITError>
      if (treatdmanack == 1U)
 8002018:	e005      	b.n	8002026 <I2C_Slave_ISR_DMA+0x1ae>
 800201a:	e004      	b.n	8002026 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2210      	movs	r2, #16
 8002022:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002024:	e013      	b.n	800204e <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8002026:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002028:	e011      	b.n	800204e <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	08db      	lsrs	r3, r3, #3
 800202e:	001a      	movs	r2, r3
 8002030:	2301      	movs	r3, #1
 8002032:	4013      	ands	r3, r2
 8002034:	d00b      	beq.n	800204e <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	08db      	lsrs	r3, r3, #3
 800203a:	001a      	movs	r2, r3
 800203c:	2301      	movs	r3, #1
 800203e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002040:	d005      	beq.n	800204e <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	0011      	movs	r1, r2
 8002048:	0018      	movs	r0, r3
 800204a:	f000 f80b 	bl	8002064 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2240      	movs	r2, #64	; 0x40
 8002052:	2100      	movs	r1, #0
 8002054:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	0018      	movs	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	b008      	add	sp, #32
 800205e:	bd80      	pop	{r7, pc}
 8002060:	ffff0000 	.word	0xffff0000

08002064 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002064:	b5b0      	push	{r4, r5, r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2241      	movs	r2, #65	; 0x41
 8002072:	5c9b      	ldrb	r3, [r3, r2]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	001a      	movs	r2, r3
 8002078:	2328      	movs	r3, #40	; 0x28
 800207a:	4013      	ands	r3, r2
 800207c:	2b28      	cmp	r3, #40	; 0x28
 800207e:	d000      	beq.n	8002082 <I2C_ITAddrCplt+0x1e>
 8002080:	e088      	b.n	8002194 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	0c1b      	lsrs	r3, r3, #16
 800208a:	b2da      	uxtb	r2, r3
 800208c:	250f      	movs	r5, #15
 800208e:	197b      	adds	r3, r7, r5
 8002090:	2101      	movs	r1, #1
 8002092:	400a      	ands	r2, r1
 8002094:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	0c1b      	lsrs	r3, r3, #16
 800209e:	b29a      	uxth	r2, r3
 80020a0:	200c      	movs	r0, #12
 80020a2:	183b      	adds	r3, r7, r0
 80020a4:	21fe      	movs	r1, #254	; 0xfe
 80020a6:	400a      	ands	r2, r1
 80020a8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	240a      	movs	r4, #10
 80020b4:	193b      	adds	r3, r7, r4
 80020b6:	0592      	lsls	r2, r2, #22
 80020b8:	0d92      	lsrs	r2, r2, #22
 80020ba:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	2308      	movs	r3, #8
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	21fe      	movs	r1, #254	; 0xfe
 80020ca:	400a      	ands	r2, r1
 80020cc:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d148      	bne.n	8002168 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80020d6:	0021      	movs	r1, r4
 80020d8:	187b      	adds	r3, r7, r1
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	09db      	lsrs	r3, r3, #7
 80020de:	b29a      	uxth	r2, r3
 80020e0:	183b      	adds	r3, r7, r0
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	4053      	eors	r3, r2
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	001a      	movs	r2, r3
 80020ea:	2306      	movs	r3, #6
 80020ec:	4013      	ands	r3, r2
 80020ee:	d120      	bne.n	8002132 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80020f0:	183b      	adds	r3, r7, r0
 80020f2:	187a      	adds	r2, r7, r1
 80020f4:	8812      	ldrh	r2, [r2, #0]
 80020f6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002106:	2b02      	cmp	r3, #2
 8002108:	d14c      	bne.n	80021a4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2208      	movs	r2, #8
 8002116:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2240      	movs	r2, #64	; 0x40
 800211c:	2100      	movs	r1, #0
 800211e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002120:	183b      	adds	r3, r7, r0
 8002122:	881a      	ldrh	r2, [r3, #0]
 8002124:	197b      	adds	r3, r7, r5
 8002126:	7819      	ldrb	r1, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	0018      	movs	r0, r3
 800212c:	f7ff fb0a 	bl	8001744 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002130:	e038      	b.n	80021a4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8002132:	240c      	movs	r4, #12
 8002134:	193b      	adds	r3, r7, r4
 8002136:	2208      	movs	r2, #8
 8002138:	18ba      	adds	r2, r7, r2
 800213a:	8812      	ldrh	r2, [r2, #0]
 800213c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	021a      	lsls	r2, r3, #8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	0011      	movs	r1, r2
 8002146:	0018      	movs	r0, r3
 8002148:	f000 fd7c 	bl	8002c44 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2240      	movs	r2, #64	; 0x40
 8002150:	2100      	movs	r1, #0
 8002152:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002154:	193b      	adds	r3, r7, r4
 8002156:	881a      	ldrh	r2, [r3, #0]
 8002158:	230f      	movs	r3, #15
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	7819      	ldrb	r1, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	0018      	movs	r0, r3
 8002162:	f7ff faef 	bl	8001744 <HAL_I2C_AddrCallback>
}
 8002166:	e01d      	b.n	80021a4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002168:	2380      	movs	r3, #128	; 0x80
 800216a:	021a      	lsls	r2, r3, #8
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	0011      	movs	r1, r2
 8002170:	0018      	movs	r0, r3
 8002172:	f000 fd67 	bl	8002c44 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2240      	movs	r2, #64	; 0x40
 800217a:	2100      	movs	r1, #0
 800217c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800217e:	230c      	movs	r3, #12
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	881a      	ldrh	r2, [r3, #0]
 8002184:	230f      	movs	r3, #15
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	7819      	ldrb	r1, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	0018      	movs	r0, r3
 800218e:	f7ff fad9 	bl	8001744 <HAL_I2C_AddrCallback>
}
 8002192:	e007      	b.n	80021a4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2208      	movs	r2, #8
 800219a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2240      	movs	r2, #64	; 0x40
 80021a0:	2100      	movs	r1, #0
 80021a2:	5499      	strb	r1, [r3, r2]
}
 80021a4:	46c0      	nop			; (mov r8, r8)
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b004      	add	sp, #16
 80021aa:	bdb0      	pop	{r4, r5, r7, pc}

080021ac <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2242      	movs	r2, #66	; 0x42
 80021b8:	2100      	movs	r1, #0
 80021ba:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2241      	movs	r2, #65	; 0x41
 80021c0:	5c9b      	ldrb	r3, [r3, r2]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b21      	cmp	r3, #33	; 0x21
 80021c6:	d117      	bne.n	80021f8 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2241      	movs	r2, #65	; 0x41
 80021cc:	2120      	movs	r1, #32
 80021ce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2211      	movs	r2, #17
 80021d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2101      	movs	r1, #1
 80021e0:	0018      	movs	r0, r3
 80021e2:	f000 fd2f 	bl	8002c44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2240      	movs	r2, #64	; 0x40
 80021ea:	2100      	movs	r1, #0
 80021ec:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	0018      	movs	r0, r3
 80021f2:	f7ff fa87 	bl	8001704 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80021f6:	e016      	b.n	8002226 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2241      	movs	r2, #65	; 0x41
 80021fc:	2120      	movs	r1, #32
 80021fe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2212      	movs	r2, #18
 8002204:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2102      	movs	r1, #2
 8002210:	0018      	movs	r0, r3
 8002212:	f000 fd17 	bl	8002c44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2240      	movs	r2, #64	; 0x40
 800221a:	2100      	movs	r1, #0
 800221c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	0018      	movs	r0, r3
 8002222:	f7ff fa77 	bl	8001714 <HAL_I2C_MasterRxCpltCallback>
}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	46bd      	mov	sp, r7
 800222a:	b002      	add	sp, #8
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2242      	movs	r2, #66	; 0x42
 8002244:	2100      	movs	r1, #0
 8002246:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	0b9b      	lsrs	r3, r3, #14
 800224c:	001a      	movs	r2, r3
 800224e:	2301      	movs	r3, #1
 8002250:	4013      	ands	r3, r2
 8002252:	d008      	beq.n	8002266 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4925      	ldr	r1, [pc, #148]	; (80022f4 <I2C_ITSlaveSeqCplt+0xc4>)
 8002260:	400a      	ands	r2, r1
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	e00d      	b.n	8002282 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	0bdb      	lsrs	r3, r3, #15
 800226a:	001a      	movs	r2, r3
 800226c:	2301      	movs	r3, #1
 800226e:	4013      	ands	r3, r2
 8002270:	d007      	beq.n	8002282 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	491e      	ldr	r1, [pc, #120]	; (80022f8 <I2C_ITSlaveSeqCplt+0xc8>)
 800227e:	400a      	ands	r2, r1
 8002280:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2241      	movs	r2, #65	; 0x41
 8002286:	5c9b      	ldrb	r3, [r3, r2]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b29      	cmp	r3, #41	; 0x29
 800228c:	d114      	bne.n	80022b8 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2241      	movs	r2, #65	; 0x41
 8002292:	2128      	movs	r1, #40	; 0x28
 8002294:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2221      	movs	r2, #33	; 0x21
 800229a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2101      	movs	r1, #1
 80022a0:	0018      	movs	r0, r3
 80022a2:	f000 fccf 	bl	8002c44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2240      	movs	r2, #64	; 0x40
 80022aa:	2100      	movs	r1, #0
 80022ac:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	0018      	movs	r0, r3
 80022b2:	f7ff fa37 	bl	8001724 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80022b6:	e019      	b.n	80022ec <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2241      	movs	r2, #65	; 0x41
 80022bc:	5c9b      	ldrb	r3, [r3, r2]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b2a      	cmp	r3, #42	; 0x2a
 80022c2:	d113      	bne.n	80022ec <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2241      	movs	r2, #65	; 0x41
 80022c8:	2128      	movs	r1, #40	; 0x28
 80022ca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2222      	movs	r2, #34	; 0x22
 80022d0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2102      	movs	r1, #2
 80022d6:	0018      	movs	r0, r3
 80022d8:	f000 fcb4 	bl	8002c44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2240      	movs	r2, #64	; 0x40
 80022e0:	2100      	movs	r1, #0
 80022e2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	0018      	movs	r0, r3
 80022e8:	f7ff fa24 	bl	8001734 <HAL_I2C_SlaveRxCpltCallback>
}
 80022ec:	46c0      	nop			; (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b004      	add	sp, #16
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	ffffbfff 	.word	0xffffbfff
 80022f8:	ffff7fff 	.word	0xffff7fff

080022fc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2220      	movs	r2, #32
 8002310:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2241      	movs	r2, #65	; 0x41
 8002316:	5c9b      	ldrb	r3, [r3, r2]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b21      	cmp	r3, #33	; 0x21
 800231c:	d108      	bne.n	8002330 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2101      	movs	r1, #1
 8002322:	0018      	movs	r0, r3
 8002324:	f000 fc8e 	bl	8002c44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2211      	movs	r2, #17
 800232c:	631a      	str	r2, [r3, #48]	; 0x30
 800232e:	e00d      	b.n	800234c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2241      	movs	r2, #65	; 0x41
 8002334:	5c9b      	ldrb	r3, [r3, r2]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b22      	cmp	r3, #34	; 0x22
 800233a:	d107      	bne.n	800234c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2102      	movs	r1, #2
 8002340:	0018      	movs	r0, r3
 8002342:	f000 fc7f 	bl	8002c44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2212      	movs	r2, #18
 800234a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4950      	ldr	r1, [pc, #320]	; (8002498 <I2C_ITMasterCplt+0x19c>)
 8002358:	400a      	ands	r2, r1
 800235a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4d      	ldr	r2, [pc, #308]	; (800249c <I2C_ITMasterCplt+0x1a0>)
 8002366:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	001a      	movs	r2, r3
 800236e:	2301      	movs	r3, #1
 8002370:	4013      	ands	r3, r2
 8002372:	d009      	beq.n	8002388 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2210      	movs	r2, #16
 800237a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002380:	2204      	movs	r2, #4
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2241      	movs	r2, #65	; 0x41
 800238c:	5c9b      	ldrb	r3, [r3, r2]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b60      	cmp	r3, #96	; 0x60
 8002392:	d10b      	bne.n	80023ac <I2C_ITMasterCplt+0xb0>
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	089b      	lsrs	r3, r3, #2
 8002398:	001a      	movs	r2, r3
 800239a:	2301      	movs	r3, #1
 800239c:	4013      	ands	r3, r2
 800239e:	d005      	beq.n	80023ac <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80023aa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	0018      	movs	r0, r3
 80023b0:	f000 faff 	bl	80029b2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b8:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2241      	movs	r2, #65	; 0x41
 80023be:	5c9b      	ldrb	r3, [r3, r2]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b60      	cmp	r3, #96	; 0x60
 80023c4:	d002      	beq.n	80023cc <I2C_ITMasterCplt+0xd0>
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d007      	beq.n	80023dc <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	0011      	movs	r1, r2
 80023d4:	0018      	movs	r0, r3
 80023d6:	f000 f9e1 	bl	800279c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80023da:	e058      	b.n	800248e <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2241      	movs	r2, #65	; 0x41
 80023e0:	5c9b      	ldrb	r3, [r3, r2]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b21      	cmp	r3, #33	; 0x21
 80023e6:	d126      	bne.n	8002436 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2241      	movs	r2, #65	; 0x41
 80023ec:	2120      	movs	r1, #32
 80023ee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2242      	movs	r2, #66	; 0x42
 80023fa:	5c9b      	ldrb	r3, [r3, r2]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b40      	cmp	r3, #64	; 0x40
 8002400:	d10c      	bne.n	800241c <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2242      	movs	r2, #66	; 0x42
 8002406:	2100      	movs	r1, #0
 8002408:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2240      	movs	r2, #64	; 0x40
 800240e:	2100      	movs	r1, #0
 8002410:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	0018      	movs	r0, r3
 8002416:	f7ff f9ad 	bl	8001774 <HAL_I2C_MemTxCpltCallback>
}
 800241a:	e038      	b.n	800248e <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2242      	movs	r2, #66	; 0x42
 8002420:	2100      	movs	r1, #0
 8002422:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2240      	movs	r2, #64	; 0x40
 8002428:	2100      	movs	r1, #0
 800242a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	0018      	movs	r0, r3
 8002430:	f7ff f968 	bl	8001704 <HAL_I2C_MasterTxCpltCallback>
}
 8002434:	e02b      	b.n	800248e <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2241      	movs	r2, #65	; 0x41
 800243a:	5c9b      	ldrb	r3, [r3, r2]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b22      	cmp	r3, #34	; 0x22
 8002440:	d125      	bne.n	800248e <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2241      	movs	r2, #65	; 0x41
 8002446:	2120      	movs	r1, #32
 8002448:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2242      	movs	r2, #66	; 0x42
 8002454:	5c9b      	ldrb	r3, [r3, r2]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b40      	cmp	r3, #64	; 0x40
 800245a:	d10c      	bne.n	8002476 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2242      	movs	r2, #66	; 0x42
 8002460:	2100      	movs	r1, #0
 8002462:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2240      	movs	r2, #64	; 0x40
 8002468:	2100      	movs	r1, #0
 800246a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	0018      	movs	r0, r3
 8002470:	f7ff f988 	bl	8001784 <HAL_I2C_MemRxCpltCallback>
}
 8002474:	e00b      	b.n	800248e <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2242      	movs	r2, #66	; 0x42
 800247a:	2100      	movs	r1, #0
 800247c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2240      	movs	r2, #64	; 0x40
 8002482:	2100      	movs	r1, #0
 8002484:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	0018      	movs	r0, r3
 800248a:	f7ff f943 	bl	8001714 <HAL_I2C_MasterRxCpltCallback>
}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	46bd      	mov	sp, r7
 8002492:	b006      	add	sp, #24
 8002494:	bd80      	pop	{r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	fe00e800 	.word	0xfe00e800
 800249c:	ffff0000 	.word	0xffff0000

080024a0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80024b6:	200f      	movs	r0, #15
 80024b8:	183b      	adds	r3, r7, r0
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	2141      	movs	r1, #65	; 0x41
 80024be:	5c52      	ldrb	r2, [r2, r1]
 80024c0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2220      	movs	r2, #32
 80024c8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80024ca:	183b      	adds	r3, r7, r0
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b21      	cmp	r3, #33	; 0x21
 80024d0:	d003      	beq.n	80024da <I2C_ITSlaveCplt+0x3a>
 80024d2:	183b      	adds	r3, r7, r0
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b29      	cmp	r3, #41	; 0x29
 80024d8:	d109      	bne.n	80024ee <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80024da:	4a7d      	ldr	r2, [pc, #500]	; (80026d0 <I2C_ITSlaveCplt+0x230>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	0011      	movs	r1, r2
 80024e0:	0018      	movs	r0, r3
 80024e2:	f000 fbaf 	bl	8002c44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2221      	movs	r2, #33	; 0x21
 80024ea:	631a      	str	r2, [r3, #48]	; 0x30
 80024ec:	e011      	b.n	8002512 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80024ee:	220f      	movs	r2, #15
 80024f0:	18bb      	adds	r3, r7, r2
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b22      	cmp	r3, #34	; 0x22
 80024f6:	d003      	beq.n	8002500 <I2C_ITSlaveCplt+0x60>
 80024f8:	18bb      	adds	r3, r7, r2
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b2a      	cmp	r3, #42	; 0x2a
 80024fe:	d108      	bne.n	8002512 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002500:	4a74      	ldr	r2, [pc, #464]	; (80026d4 <I2C_ITSlaveCplt+0x234>)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	0011      	movs	r1, r2
 8002506:	0018      	movs	r0, r3
 8002508:	f000 fb9c 	bl	8002c44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2222      	movs	r2, #34	; 0x22
 8002510:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2180      	movs	r1, #128	; 0x80
 800251e:	0209      	lsls	r1, r1, #8
 8002520:	430a      	orrs	r2, r1
 8002522:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	496a      	ldr	r1, [pc, #424]	; (80026d8 <I2C_ITSlaveCplt+0x238>)
 8002530:	400a      	ands	r2, r1
 8002532:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	0018      	movs	r0, r3
 8002538:	f000 fa3b 	bl	80029b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	0b9b      	lsrs	r3, r3, #14
 8002540:	001a      	movs	r2, r3
 8002542:	2301      	movs	r3, #1
 8002544:	4013      	ands	r3, r2
 8002546:	d013      	beq.n	8002570 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4962      	ldr	r1, [pc, #392]	; (80026dc <I2C_ITSlaveCplt+0x23c>)
 8002554:	400a      	ands	r2, r1
 8002556:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255c:	2b00      	cmp	r3, #0
 800255e:	d020      	beq.n	80025a2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	b29a      	uxth	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800256e:	e018      	b.n	80025a2 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	0bdb      	lsrs	r3, r3, #15
 8002574:	001a      	movs	r2, r3
 8002576:	2301      	movs	r3, #1
 8002578:	4013      	ands	r3, r2
 800257a:	d012      	beq.n	80025a2 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4956      	ldr	r1, [pc, #344]	; (80026e0 <I2C_ITSlaveCplt+0x240>)
 8002588:	400a      	ands	r2, r1
 800258a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d006      	beq.n	80025a2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	b29a      	uxth	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	089b      	lsrs	r3, r3, #2
 80025a6:	001a      	movs	r2, r3
 80025a8:	2301      	movs	r3, #1
 80025aa:	4013      	ands	r3, r2
 80025ac:	d020      	beq.n	80025f0 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2204      	movs	r2, #4
 80025b2:	4393      	bics	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00c      	beq.n	80025f0 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	2204      	movs	r2, #4
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2242      	movs	r2, #66	; 0x42
 800260a:	2100      	movs	r1, #0
 800260c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002618:	2b00      	cmp	r3, #0
 800261a:	d013      	beq.n	8002644 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	0011      	movs	r1, r2
 8002624:	0018      	movs	r0, r3
 8002626:	f000 f8b9 	bl	800279c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2241      	movs	r2, #65	; 0x41
 800262e:	5c9b      	ldrb	r3, [r3, r2]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b28      	cmp	r3, #40	; 0x28
 8002634:	d147      	bne.n	80026c6 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	0011      	movs	r1, r2
 800263c:	0018      	movs	r0, r3
 800263e:	f000 f853 	bl	80026e8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002642:	e040      	b.n	80026c6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	4a26      	ldr	r2, [pc, #152]	; (80026e4 <I2C_ITSlaveCplt+0x244>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d016      	beq.n	800267c <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	0018      	movs	r0, r3
 8002652:	f7ff fded 	bl	8002230 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a22      	ldr	r2, [pc, #136]	; (80026e4 <I2C_ITSlaveCplt+0x244>)
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2241      	movs	r2, #65	; 0x41
 8002660:	2120      	movs	r1, #32
 8002662:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2240      	movs	r2, #64	; 0x40
 800266e:	2100      	movs	r1, #0
 8002670:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	0018      	movs	r0, r3
 8002676:	f7ff f875 	bl	8001764 <HAL_I2C_ListenCpltCallback>
}
 800267a:	e024      	b.n	80026c6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2241      	movs	r2, #65	; 0x41
 8002680:	5c9b      	ldrb	r3, [r3, r2]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b22      	cmp	r3, #34	; 0x22
 8002686:	d10f      	bne.n	80026a8 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2241      	movs	r2, #65	; 0x41
 800268c:	2120      	movs	r1, #32
 800268e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2240      	movs	r2, #64	; 0x40
 800269a:	2100      	movs	r1, #0
 800269c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	0018      	movs	r0, r3
 80026a2:	f7ff f847 	bl	8001734 <HAL_I2C_SlaveRxCpltCallback>
}
 80026a6:	e00e      	b.n	80026c6 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2241      	movs	r2, #65	; 0x41
 80026ac:	2120      	movs	r1, #32
 80026ae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2240      	movs	r2, #64	; 0x40
 80026ba:	2100      	movs	r1, #0
 80026bc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	0018      	movs	r0, r3
 80026c2:	f7ff f82f 	bl	8001724 <HAL_I2C_SlaveTxCpltCallback>
}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b006      	add	sp, #24
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	00008001 	.word	0x00008001
 80026d4:	00008002 	.word	0x00008002
 80026d8:	fe00e800 	.word	0xfe00e800
 80026dc:	ffffbfff 	.word	0xffffbfff
 80026e0:	ffff7fff 	.word	0xffff7fff
 80026e4:	ffff0000 	.word	0xffff0000

080026e8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a27      	ldr	r2, [pc, #156]	; (8002794 <I2C_ITListenCplt+0xac>)
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2241      	movs	r2, #65	; 0x41
 8002702:	2120      	movs	r1, #32
 8002704:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2242      	movs	r2, #66	; 0x42
 800270a:	2100      	movs	r1, #0
 800270c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	089b      	lsrs	r3, r3, #2
 8002718:	001a      	movs	r2, r3
 800271a:	2301      	movs	r3, #1
 800271c:	4013      	ands	r3, r2
 800271e:	d022      	beq.n	8002766 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273c:	2b00      	cmp	r3, #0
 800273e:	d012      	beq.n	8002766 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	2204      	movs	r2, #4
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002766:	4a0c      	ldr	r2, [pc, #48]	; (8002798 <I2C_ITListenCplt+0xb0>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	0011      	movs	r1, r2
 800276c:	0018      	movs	r0, r3
 800276e:	f000 fa69 	bl	8002c44 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2210      	movs	r2, #16
 8002778:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2240      	movs	r2, #64	; 0x40
 800277e:	2100      	movs	r1, #0
 8002780:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	0018      	movs	r0, r3
 8002786:	f7fe ffed 	bl	8001764 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	46bd      	mov	sp, r7
 800278e:	b002      	add	sp, #8
 8002790:	bd80      	pop	{r7, pc}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	ffff0000 	.word	0xffff0000
 8002798:	00008003 	.word	0x00008003

0800279c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80027a6:	200f      	movs	r0, #15
 80027a8:	183b      	adds	r3, r7, r0
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	2141      	movs	r1, #65	; 0x41
 80027ae:	5c52      	ldrb	r2, [r2, r1]
 80027b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2242      	movs	r2, #66	; 0x42
 80027b6:	2100      	movs	r1, #0
 80027b8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a62      	ldr	r2, [pc, #392]	; (8002948 <I2C_ITError+0x1ac>)
 80027be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80027d2:	183b      	adds	r3, r7, r0
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b28      	cmp	r3, #40	; 0x28
 80027d8:	d007      	beq.n	80027ea <I2C_ITError+0x4e>
 80027da:	183b      	adds	r3, r7, r0
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b29      	cmp	r3, #41	; 0x29
 80027e0:	d003      	beq.n	80027ea <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80027e2:	183b      	adds	r3, r7, r0
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b2a      	cmp	r3, #42	; 0x2a
 80027e8:	d10c      	bne.n	8002804 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2103      	movs	r1, #3
 80027ee:	0018      	movs	r0, r3
 80027f0:	f000 fa28 	bl	8002c44 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2241      	movs	r2, #65	; 0x41
 80027f8:	2128      	movs	r1, #40	; 0x28
 80027fa:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a53      	ldr	r2, [pc, #332]	; (800294c <I2C_ITError+0x1b0>)
 8002800:	635a      	str	r2, [r3, #52]	; 0x34
 8002802:	e012      	b.n	800282a <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002804:	4a52      	ldr	r2, [pc, #328]	; (8002950 <I2C_ITError+0x1b4>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	0011      	movs	r1, r2
 800280a:	0018      	movs	r0, r3
 800280c:	f000 fa1a 	bl	8002c44 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2241      	movs	r2, #65	; 0x41
 8002814:	5c9b      	ldrb	r3, [r3, r2]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b60      	cmp	r3, #96	; 0x60
 800281a:	d003      	beq.n	8002824 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2241      	movs	r2, #65	; 0x41
 8002820:	2120      	movs	r1, #32
 8002822:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	2b00      	cmp	r3, #0
 8002836:	d03b      	beq.n	80028b0 <I2C_ITError+0x114>
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b11      	cmp	r3, #17
 800283c:	d002      	beq.n	8002844 <I2C_ITError+0xa8>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b21      	cmp	r3, #33	; 0x21
 8002842:	d135      	bne.n	80028b0 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	01db      	lsls	r3, r3, #7
 800284e:	401a      	ands	r2, r3
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	01db      	lsls	r3, r3, #7
 8002854:	429a      	cmp	r2, r3
 8002856:	d107      	bne.n	8002868 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	493c      	ldr	r1, [pc, #240]	; (8002954 <I2C_ITError+0x1b8>)
 8002864:	400a      	ands	r2, r1
 8002866:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	0018      	movs	r0, r3
 800286e:	f7fe fba4 	bl	8000fba <HAL_DMA_GetState>
 8002872:	0003      	movs	r3, r0
 8002874:	2b01      	cmp	r3, #1
 8002876:	d016      	beq.n	80028a6 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	4a36      	ldr	r2, [pc, #216]	; (8002958 <I2C_ITError+0x1bc>)
 800287e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2240      	movs	r2, #64	; 0x40
 8002884:	2100      	movs	r1, #0
 8002886:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288c:	0018      	movs	r0, r3
 800288e:	f7fe faad 	bl	8000dec <HAL_DMA_Abort_IT>
 8002892:	1e03      	subs	r3, r0, #0
 8002894:	d051      	beq.n	800293a <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a0:	0018      	movs	r0, r3
 80028a2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80028a4:	e049      	b.n	800293a <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f000 f859 	bl	8002960 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80028ae:	e044      	b.n	800293a <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d03b      	beq.n	8002930 <I2C_ITError+0x194>
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b12      	cmp	r3, #18
 80028bc:	d002      	beq.n	80028c4 <I2C_ITError+0x128>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b22      	cmp	r3, #34	; 0x22
 80028c2:	d135      	bne.n	8002930 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	2380      	movs	r3, #128	; 0x80
 80028cc:	021b      	lsls	r3, r3, #8
 80028ce:	401a      	ands	r2, r3
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d107      	bne.n	80028e8 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	491e      	ldr	r1, [pc, #120]	; (800295c <I2C_ITError+0x1c0>)
 80028e4:	400a      	ands	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ec:	0018      	movs	r0, r3
 80028ee:	f7fe fb64 	bl	8000fba <HAL_DMA_GetState>
 80028f2:	0003      	movs	r3, r0
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d016      	beq.n	8002926 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fc:	4a16      	ldr	r2, [pc, #88]	; (8002958 <I2C_ITError+0x1bc>)
 80028fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2240      	movs	r2, #64	; 0x40
 8002904:	2100      	movs	r1, #0
 8002906:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290c:	0018      	movs	r0, r3
 800290e:	f7fe fa6d 	bl	8000dec <HAL_DMA_Abort_IT>
 8002912:	1e03      	subs	r3, r0, #0
 8002914:	d013      	beq.n	800293e <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	0018      	movs	r0, r3
 8002922:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002924:	e00b      	b.n	800293e <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	0018      	movs	r0, r3
 800292a:	f000 f819 	bl	8002960 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800292e:	e006      	b.n	800293e <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	0018      	movs	r0, r3
 8002934:	f000 f814 	bl	8002960 <I2C_TreatErrorCallback>
  }
}
 8002938:	e002      	b.n	8002940 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	e000      	b.n	8002940 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800293e:	46c0      	nop			; (mov r8, r8)
}
 8002940:	46c0      	nop			; (mov r8, r8)
 8002942:	46bd      	mov	sp, r7
 8002944:	b004      	add	sp, #16
 8002946:	bd80      	pop	{r7, pc}
 8002948:	ffff0000 	.word	0xffff0000
 800294c:	08001a39 	.word	0x08001a39
 8002950:	00008003 	.word	0x00008003
 8002954:	ffffbfff 	.word	0xffffbfff
 8002958:	08002acb 	.word	0x08002acb
 800295c:	ffff7fff 	.word	0xffff7fff

08002960 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2241      	movs	r2, #65	; 0x41
 800296c:	5c9b      	ldrb	r3, [r3, r2]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b60      	cmp	r3, #96	; 0x60
 8002972:	d10f      	bne.n	8002994 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2241      	movs	r2, #65	; 0x41
 8002978:	2120      	movs	r1, #32
 800297a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2240      	movs	r2, #64	; 0x40
 8002986:	2100      	movs	r1, #0
 8002988:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	0018      	movs	r0, r3
 800298e:	f7fe ff09 	bl	80017a4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002992:	e00a      	b.n	80029aa <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2240      	movs	r2, #64	; 0x40
 800299e:	2100      	movs	r1, #0
 80029a0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	0018      	movs	r0, r3
 80029a6:	f7fe fef5 	bl	8001794 <HAL_I2C_ErrorCallback>
}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b002      	add	sp, #8
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	2202      	movs	r2, #2
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d103      	bne.n	80029d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2200      	movs	r2, #0
 80029ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2201      	movs	r2, #1
 80029d8:	4013      	ands	r3, r2
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d007      	beq.n	80029ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699a      	ldr	r2, [r3, #24]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2101      	movs	r1, #1
 80029ea:	430a      	orrs	r2, r1
 80029ec:	619a      	str	r2, [r3, #24]
  }
}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b002      	add	sp, #8
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4920      	ldr	r1, [pc, #128]	; (8002a94 <I2C_DMAMasterReceiveCplt+0x9c>)
 8002a12:	400a      	ands	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d105      	bne.n	8002a2c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2120      	movs	r1, #32
 8002a24:	0018      	movs	r0, r3
 8002a26:	f000 f8a5 	bl	8002b74 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8002a2a:	e02e      	b.n	8002a8a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8002a34:	189a      	adds	r2, r3, r2
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2bff      	cmp	r3, #255	; 0xff
 8002a42:	d903      	bls.n	8002a4c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	22ff      	movs	r2, #255	; 0xff
 8002a48:	851a      	strh	r2, [r3, #40]	; 0x28
 8002a4a:	e004      	b.n	8002a56 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	3324      	adds	r3, #36	; 0x24
 8002a60:	0019      	movs	r1, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8002a6c:	f7fe f920 	bl	8000cb0 <HAL_DMA_Start_IT>
 8002a70:	1e03      	subs	r3, r0, #0
 8002a72:	d005      	beq.n	8002a80 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2110      	movs	r1, #16
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f7ff fe8f 	bl	800279c <I2C_ITError>
}
 8002a7e:	e004      	b.n	8002a8a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2140      	movs	r1, #64	; 0x40
 8002a84:	0018      	movs	r0, r3
 8002a86:	f000 f875 	bl	8002b74 <I2C_Enable_IRQ>
}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b004      	add	sp, #16
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	ffff7fff 	.word	0xffff7fff

08002a98 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2180      	movs	r1, #128	; 0x80
 8002ab2:	0209      	lsls	r1, r1, #8
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2110      	movs	r1, #16
 8002abc:	0018      	movs	r0, r3
 8002abe:	f7ff fe6d 	bl	800279c <I2C_ITError>
}
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b004      	add	sp, #16
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af4:	2200      	movs	r2, #0
 8002af6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	0018      	movs	r0, r3
 8002afc:	f7ff ff30 	bl	8002960 <I2C_TreatErrorCallback>
}
 8002b00:	46c0      	nop			; (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b004      	add	sp, #16
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	0008      	movs	r0, r1
 8002b12:	0011      	movs	r1, r2
 8002b14:	607b      	str	r3, [r7, #4]
 8002b16:	240a      	movs	r4, #10
 8002b18:	193b      	adds	r3, r7, r4
 8002b1a:	1c02      	adds	r2, r0, #0
 8002b1c:	801a      	strh	r2, [r3, #0]
 8002b1e:	2009      	movs	r0, #9
 8002b20:	183b      	adds	r3, r7, r0
 8002b22:	1c0a      	adds	r2, r1, #0
 8002b24:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	6a3a      	ldr	r2, [r7, #32]
 8002b2e:	0d51      	lsrs	r1, r2, #21
 8002b30:	2280      	movs	r2, #128	; 0x80
 8002b32:	00d2      	lsls	r2, r2, #3
 8002b34:	400a      	ands	r2, r1
 8002b36:	490e      	ldr	r1, [pc, #56]	; (8002b70 <I2C_TransferConfig+0x68>)
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	43d2      	mvns	r2, r2
 8002b3c:	401a      	ands	r2, r3
 8002b3e:	0011      	movs	r1, r2
 8002b40:	193b      	adds	r3, r7, r4
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	059b      	lsls	r3, r3, #22
 8002b46:	0d9a      	lsrs	r2, r3, #22
 8002b48:	183b      	adds	r3, r7, r0
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	0418      	lsls	r0, r3, #16
 8002b4e:	23ff      	movs	r3, #255	; 0xff
 8002b50:	041b      	lsls	r3, r3, #16
 8002b52:	4003      	ands	r3, r0
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	b005      	add	sp, #20
 8002b6c:	bd90      	pop	{r4, r7, pc}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	03ff63ff 	.word	0x03ff63ff

08002b74 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	000a      	movs	r2, r1
 8002b7e:	1cbb      	adds	r3, r7, #2
 8002b80:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b8a:	4b2c      	ldr	r3, [pc, #176]	; (8002c3c <I2C_Enable_IRQ+0xc8>)
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d004      	beq.n	8002b9a <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002b94:	4b2a      	ldr	r3, [pc, #168]	; (8002c40 <I2C_Enable_IRQ+0xcc>)
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d121      	bne.n	8002bde <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002b9a:	1cbb      	adds	r3, r7, #2
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	5e9b      	ldrsh	r3, [r3, r2]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	da03      	bge.n	8002bac <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	22b8      	movs	r2, #184	; 0xb8
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002bac:	1cbb      	adds	r3, r7, #2
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	2b10      	cmp	r3, #16
 8002bb2:	d103      	bne.n	8002bbc <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2290      	movs	r2, #144	; 0x90
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002bbc:	1cbb      	adds	r3, r7, #2
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	d103      	bne.n	8002bcc <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2260      	movs	r2, #96	; 0x60
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002bcc:	1cbb      	adds	r3, r7, #2
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	2b40      	cmp	r3, #64	; 0x40
 8002bd2:	d127      	bne.n	8002c24 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2240      	movs	r2, #64	; 0x40
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002bdc:	e022      	b.n	8002c24 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002bde:	1cbb      	adds	r3, r7, #2
 8002be0:	2200      	movs	r2, #0
 8002be2:	5e9b      	ldrsh	r3, [r3, r2]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	da03      	bge.n	8002bf0 <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	22b8      	movs	r2, #184	; 0xb8
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002bf0:	1cbb      	adds	r3, r7, #2
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d003      	beq.n	8002c02 <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	22f2      	movs	r2, #242	; 0xf2
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002c02:	1cbb      	adds	r3, r7, #2
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	2202      	movs	r2, #2
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d003      	beq.n	8002c14 <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	22f4      	movs	r2, #244	; 0xf4
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002c14:	1cbb      	adds	r3, r7, #2
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d103      	bne.n	8002c24 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6819      	ldr	r1, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]
}
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b004      	add	sp, #16
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	08001c61 	.word	0x08001c61
 8002c40:	08001e79 	.word	0x08001e79

08002c44 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	000a      	movs	r2, r1
 8002c4e:	1cbb      	adds	r3, r7, #2
 8002c50:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002c56:	1cbb      	adds	r3, r7, #2
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d010      	beq.n	8002c82 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2242      	movs	r2, #66	; 0x42
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2241      	movs	r2, #65	; 0x41
 8002c6c:	5c9b      	ldrb	r3, [r3, r2]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	001a      	movs	r2, r3
 8002c72:	2328      	movs	r3, #40	; 0x28
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b28      	cmp	r3, #40	; 0x28
 8002c78:	d003      	beq.n	8002c82 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	22b0      	movs	r2, #176	; 0xb0
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002c82:	1cbb      	adds	r3, r7, #2
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	2202      	movs	r2, #2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d010      	beq.n	8002cae <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2244      	movs	r2, #68	; 0x44
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2241      	movs	r2, #65	; 0x41
 8002c98:	5c9b      	ldrb	r3, [r3, r2]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	001a      	movs	r2, r3
 8002c9e:	2328      	movs	r3, #40	; 0x28
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b28      	cmp	r3, #40	; 0x28
 8002ca4:	d003      	beq.n	8002cae <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	22b0      	movs	r2, #176	; 0xb0
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002cae:	1cbb      	adds	r3, r7, #2
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	5e9b      	ldrsh	r3, [r3, r2]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	da03      	bge.n	8002cc0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	22b8      	movs	r2, #184	; 0xb8
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002cc0:	1cbb      	adds	r3, r7, #2
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	2b10      	cmp	r3, #16
 8002cc6:	d103      	bne.n	8002cd0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2290      	movs	r2, #144	; 0x90
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002cd0:	1cbb      	adds	r3, r7, #2
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d103      	bne.n	8002ce0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002ce0:	1cbb      	adds	r3, r7, #2
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	2b40      	cmp	r3, #64	; 0x40
 8002ce6:	d103      	bne.n	8002cf0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2240      	movs	r2, #64	; 0x40
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	43d9      	mvns	r1, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	400a      	ands	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]
}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b004      	add	sp, #16
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2241      	movs	r2, #65	; 0x41
 8002d1a:	5c9b      	ldrb	r3, [r3, r2]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	d138      	bne.n	8002d94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2240      	movs	r2, #64	; 0x40
 8002d26:	5c9b      	ldrb	r3, [r3, r2]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e032      	b.n	8002d96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2240      	movs	r2, #64	; 0x40
 8002d34:	2101      	movs	r1, #1
 8002d36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2241      	movs	r2, #65	; 0x41
 8002d3c:	2124      	movs	r1, #36	; 0x24
 8002d3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	438a      	bics	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4911      	ldr	r1, [pc, #68]	; (8002da0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002d5c:	400a      	ands	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2241      	movs	r2, #65	; 0x41
 8002d84:	2120      	movs	r1, #32
 8002d86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2240      	movs	r2, #64	; 0x40
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e000      	b.n	8002d96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d94:	2302      	movs	r3, #2
  }
}
 8002d96:	0018      	movs	r0, r3
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	b002      	add	sp, #8
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	ffffefff 	.word	0xffffefff

08002da4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2241      	movs	r2, #65	; 0x41
 8002db2:	5c9b      	ldrb	r3, [r3, r2]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	d139      	bne.n	8002e2e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2240      	movs	r2, #64	; 0x40
 8002dbe:	5c9b      	ldrb	r3, [r3, r2]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e033      	b.n	8002e30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2240      	movs	r2, #64	; 0x40
 8002dcc:	2101      	movs	r1, #1
 8002dce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2241      	movs	r2, #65	; 0x41
 8002dd4:	2124      	movs	r1, #36	; 0x24
 8002dd6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2101      	movs	r1, #1
 8002de4:	438a      	bics	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4a11      	ldr	r2, [pc, #68]	; (8002e38 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2101      	movs	r1, #1
 8002e16:	430a      	orrs	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2241      	movs	r2, #65	; 0x41
 8002e1e:	2120      	movs	r1, #32
 8002e20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2240      	movs	r2, #64	; 0x40
 8002e26:	2100      	movs	r1, #0
 8002e28:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e000      	b.n	8002e30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e2e:	2302      	movs	r3, #2
  }
}
 8002e30:	0018      	movs	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b004      	add	sp, #16
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	fffff0ff 	.word	0xfffff0ff

08002e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d102      	bne.n	8002e50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	f000 fb76 	bl	800353c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2201      	movs	r2, #1
 8002e56:	4013      	ands	r3, r2
 8002e58:	d100      	bne.n	8002e5c <HAL_RCC_OscConfig+0x20>
 8002e5a:	e08e      	b.n	8002f7a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e5c:	4bc5      	ldr	r3, [pc, #788]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	220c      	movs	r2, #12
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d00e      	beq.n	8002e86 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e68:	4bc2      	ldr	r3, [pc, #776]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	220c      	movs	r2, #12
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d117      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x68>
 8002e74:	4bbf      	ldr	r3, [pc, #764]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	23c0      	movs	r3, #192	; 0xc0
 8002e7a:	025b      	lsls	r3, r3, #9
 8002e7c:	401a      	ands	r2, r3
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	025b      	lsls	r3, r3, #9
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d10e      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e86:	4bbb      	ldr	r3, [pc, #748]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	2380      	movs	r3, #128	; 0x80
 8002e8c:	029b      	lsls	r3, r3, #10
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d100      	bne.n	8002e94 <HAL_RCC_OscConfig+0x58>
 8002e92:	e071      	b.n	8002f78 <HAL_RCC_OscConfig+0x13c>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d000      	beq.n	8002e9e <HAL_RCC_OscConfig+0x62>
 8002e9c:	e06c      	b.n	8002f78 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f000 fb4c 	bl	800353c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d107      	bne.n	8002ebc <HAL_RCC_OscConfig+0x80>
 8002eac:	4bb1      	ldr	r3, [pc, #708]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4bb0      	ldr	r3, [pc, #704]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002eb2:	2180      	movs	r1, #128	; 0x80
 8002eb4:	0249      	lsls	r1, r1, #9
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	e02f      	b.n	8002f1c <HAL_RCC_OscConfig+0xe0>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10c      	bne.n	8002ede <HAL_RCC_OscConfig+0xa2>
 8002ec4:	4bab      	ldr	r3, [pc, #684]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4baa      	ldr	r3, [pc, #680]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002eca:	49ab      	ldr	r1, [pc, #684]	; (8003178 <HAL_RCC_OscConfig+0x33c>)
 8002ecc:	400a      	ands	r2, r1
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	4ba8      	ldr	r3, [pc, #672]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4ba7      	ldr	r3, [pc, #668]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002ed6:	49a9      	ldr	r1, [pc, #676]	; (800317c <HAL_RCC_OscConfig+0x340>)
 8002ed8:	400a      	ands	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	e01e      	b.n	8002f1c <HAL_RCC_OscConfig+0xe0>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b05      	cmp	r3, #5
 8002ee4:	d10e      	bne.n	8002f04 <HAL_RCC_OscConfig+0xc8>
 8002ee6:	4ba3      	ldr	r3, [pc, #652]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4ba2      	ldr	r3, [pc, #648]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002eec:	2180      	movs	r1, #128	; 0x80
 8002eee:	02c9      	lsls	r1, r1, #11
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	4b9f      	ldr	r3, [pc, #636]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b9e      	ldr	r3, [pc, #632]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002efa:	2180      	movs	r1, #128	; 0x80
 8002efc:	0249      	lsls	r1, r1, #9
 8002efe:	430a      	orrs	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	e00b      	b.n	8002f1c <HAL_RCC_OscConfig+0xe0>
 8002f04:	4b9b      	ldr	r3, [pc, #620]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b9a      	ldr	r3, [pc, #616]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002f0a:	499b      	ldr	r1, [pc, #620]	; (8003178 <HAL_RCC_OscConfig+0x33c>)
 8002f0c:	400a      	ands	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	4b98      	ldr	r3, [pc, #608]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b97      	ldr	r3, [pc, #604]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002f16:	4999      	ldr	r1, [pc, #612]	; (800317c <HAL_RCC_OscConfig+0x340>)
 8002f18:	400a      	ands	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d014      	beq.n	8002f4e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f24:	f7fd fd94 	bl	8000a50 <HAL_GetTick>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f2e:	f7fd fd8f 	bl	8000a50 <HAL_GetTick>
 8002f32:	0002      	movs	r2, r0
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b64      	cmp	r3, #100	; 0x64
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e2fd      	b.n	800353c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f40:	4b8c      	ldr	r3, [pc, #560]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	029b      	lsls	r3, r3, #10
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0xf2>
 8002f4c:	e015      	b.n	8002f7a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4e:	f7fd fd7f 	bl	8000a50 <HAL_GetTick>
 8002f52:	0003      	movs	r3, r0
 8002f54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fd fd7a 	bl	8000a50 <HAL_GetTick>
 8002f5c:	0002      	movs	r2, r0
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	; 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e2e8      	b.n	800353c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	4b82      	ldr	r3, [pc, #520]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	029b      	lsls	r3, r3, #10
 8002f72:	4013      	ands	r3, r2
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x11c>
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f78:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	4013      	ands	r3, r2
 8002f82:	d100      	bne.n	8002f86 <HAL_RCC_OscConfig+0x14a>
 8002f84:	e06c      	b.n	8003060 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f86:	4b7b      	ldr	r3, [pc, #492]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	220c      	movs	r2, #12
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d00e      	beq.n	8002fae <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f90:	4b78      	ldr	r3, [pc, #480]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	220c      	movs	r2, #12
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d11f      	bne.n	8002fdc <HAL_RCC_OscConfig+0x1a0>
 8002f9c:	4b75      	ldr	r3, [pc, #468]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	23c0      	movs	r3, #192	; 0xc0
 8002fa2:	025b      	lsls	r3, r3, #9
 8002fa4:	401a      	ands	r2, r3
 8002fa6:	2380      	movs	r3, #128	; 0x80
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d116      	bne.n	8002fdc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fae:	4b71      	ldr	r3, [pc, #452]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d005      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x188>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e2bb      	b.n	800353c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc4:	4b6b      	ldr	r3, [pc, #428]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	22f8      	movs	r2, #248	; 0xf8
 8002fca:	4393      	bics	r3, r2
 8002fcc:	0019      	movs	r1, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	00da      	lsls	r2, r3, #3
 8002fd4:	4b67      	ldr	r3, [pc, #412]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fda:	e041      	b.n	8003060 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d024      	beq.n	800302e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe4:	4b63      	ldr	r3, [pc, #396]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	4b62      	ldr	r3, [pc, #392]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002fea:	2101      	movs	r1, #1
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7fd fd2e 	bl	8000a50 <HAL_GetTick>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ffa:	f7fd fd29 	bl	8000a50 <HAL_GetTick>
 8002ffe:	0002      	movs	r2, r0
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e297      	b.n	800353c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300c:	4b59      	ldr	r3, [pc, #356]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2202      	movs	r2, #2
 8003012:	4013      	ands	r3, r2
 8003014:	d0f1      	beq.n	8002ffa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003016:	4b57      	ldr	r3, [pc, #348]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	22f8      	movs	r2, #248	; 0xf8
 800301c:	4393      	bics	r3, r2
 800301e:	0019      	movs	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	00da      	lsls	r2, r3, #3
 8003026:	4b53      	ldr	r3, [pc, #332]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8003028:	430a      	orrs	r2, r1
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	e018      	b.n	8003060 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302e:	4b51      	ldr	r3, [pc, #324]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4b50      	ldr	r3, [pc, #320]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8003034:	2101      	movs	r1, #1
 8003036:	438a      	bics	r2, r1
 8003038:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303a:	f7fd fd09 	bl	8000a50 <HAL_GetTick>
 800303e:	0003      	movs	r3, r0
 8003040:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003044:	f7fd fd04 	bl	8000a50 <HAL_GetTick>
 8003048:	0002      	movs	r2, r0
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e272      	b.n	800353c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003056:	4b47      	ldr	r3, [pc, #284]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2202      	movs	r2, #2
 800305c:	4013      	ands	r3, r2
 800305e:	d1f1      	bne.n	8003044 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2208      	movs	r2, #8
 8003066:	4013      	ands	r3, r2
 8003068:	d036      	beq.n	80030d8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d019      	beq.n	80030a6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003072:	4b40      	ldr	r3, [pc, #256]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8003074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003076:	4b3f      	ldr	r3, [pc, #252]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8003078:	2101      	movs	r1, #1
 800307a:	430a      	orrs	r2, r1
 800307c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307e:	f7fd fce7 	bl	8000a50 <HAL_GetTick>
 8003082:	0003      	movs	r3, r0
 8003084:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003088:	f7fd fce2 	bl	8000a50 <HAL_GetTick>
 800308c:	0002      	movs	r2, r0
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e250      	b.n	800353c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309a:	4b36      	ldr	r3, [pc, #216]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	2202      	movs	r2, #2
 80030a0:	4013      	ands	r3, r2
 80030a2:	d0f1      	beq.n	8003088 <HAL_RCC_OscConfig+0x24c>
 80030a4:	e018      	b.n	80030d8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a6:	4b33      	ldr	r3, [pc, #204]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 80030a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030aa:	4b32      	ldr	r3, [pc, #200]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 80030ac:	2101      	movs	r1, #1
 80030ae:	438a      	bics	r2, r1
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b2:	f7fd fccd 	bl	8000a50 <HAL_GetTick>
 80030b6:	0003      	movs	r3, r0
 80030b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030bc:	f7fd fcc8 	bl	8000a50 <HAL_GetTick>
 80030c0:	0002      	movs	r2, r0
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e236      	b.n	800353c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ce:	4b29      	ldr	r3, [pc, #164]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	2202      	movs	r2, #2
 80030d4:	4013      	ands	r3, r2
 80030d6:	d1f1      	bne.n	80030bc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2204      	movs	r2, #4
 80030de:	4013      	ands	r3, r2
 80030e0:	d100      	bne.n	80030e4 <HAL_RCC_OscConfig+0x2a8>
 80030e2:	e0b5      	b.n	8003250 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e4:	201f      	movs	r0, #31
 80030e6:	183b      	adds	r3, r7, r0
 80030e8:	2200      	movs	r2, #0
 80030ea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ec:	4b21      	ldr	r3, [pc, #132]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 80030ee:	69da      	ldr	r2, [r3, #28]
 80030f0:	2380      	movs	r3, #128	; 0x80
 80030f2:	055b      	lsls	r3, r3, #21
 80030f4:	4013      	ands	r3, r2
 80030f6:	d110      	bne.n	800311a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f8:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 80030fa:	69da      	ldr	r2, [r3, #28]
 80030fc:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 80030fe:	2180      	movs	r1, #128	; 0x80
 8003100:	0549      	lsls	r1, r1, #21
 8003102:	430a      	orrs	r2, r1
 8003104:	61da      	str	r2, [r3, #28]
 8003106:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8003108:	69da      	ldr	r2, [r3, #28]
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	055b      	lsls	r3, r3, #21
 800310e:	4013      	ands	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003114:	183b      	adds	r3, r7, r0
 8003116:	2201      	movs	r2, #1
 8003118:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311a:	4b19      	ldr	r3, [pc, #100]	; (8003180 <HAL_RCC_OscConfig+0x344>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4013      	ands	r3, r2
 8003124:	d11a      	bne.n	800315c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003126:	4b16      	ldr	r3, [pc, #88]	; (8003180 <HAL_RCC_OscConfig+0x344>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4b15      	ldr	r3, [pc, #84]	; (8003180 <HAL_RCC_OscConfig+0x344>)
 800312c:	2180      	movs	r1, #128	; 0x80
 800312e:	0049      	lsls	r1, r1, #1
 8003130:	430a      	orrs	r2, r1
 8003132:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003134:	f7fd fc8c 	bl	8000a50 <HAL_GetTick>
 8003138:	0003      	movs	r3, r0
 800313a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313e:	f7fd fc87 	bl	8000a50 <HAL_GetTick>
 8003142:	0002      	movs	r2, r0
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b64      	cmp	r3, #100	; 0x64
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e1f5      	b.n	800353c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HAL_RCC_OscConfig+0x344>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	4013      	ands	r3, r2
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d10f      	bne.n	8003184 <HAL_RCC_OscConfig+0x348>
 8003164:	4b03      	ldr	r3, [pc, #12]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8003166:	6a1a      	ldr	r2, [r3, #32]
 8003168:	4b02      	ldr	r3, [pc, #8]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 800316a:	2101      	movs	r1, #1
 800316c:	430a      	orrs	r2, r1
 800316e:	621a      	str	r2, [r3, #32]
 8003170:	e036      	b.n	80031e0 <HAL_RCC_OscConfig+0x3a4>
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	40021000 	.word	0x40021000
 8003178:	fffeffff 	.word	0xfffeffff
 800317c:	fffbffff 	.word	0xfffbffff
 8003180:	40007000 	.word	0x40007000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10c      	bne.n	80031a6 <HAL_RCC_OscConfig+0x36a>
 800318c:	4bca      	ldr	r3, [pc, #808]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800318e:	6a1a      	ldr	r2, [r3, #32]
 8003190:	4bc9      	ldr	r3, [pc, #804]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003192:	2101      	movs	r1, #1
 8003194:	438a      	bics	r2, r1
 8003196:	621a      	str	r2, [r3, #32]
 8003198:	4bc7      	ldr	r3, [pc, #796]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800319a:	6a1a      	ldr	r2, [r3, #32]
 800319c:	4bc6      	ldr	r3, [pc, #792]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800319e:	2104      	movs	r1, #4
 80031a0:	438a      	bics	r2, r1
 80031a2:	621a      	str	r2, [r3, #32]
 80031a4:	e01c      	b.n	80031e0 <HAL_RCC_OscConfig+0x3a4>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2b05      	cmp	r3, #5
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x38c>
 80031ae:	4bc2      	ldr	r3, [pc, #776]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80031b0:	6a1a      	ldr	r2, [r3, #32]
 80031b2:	4bc1      	ldr	r3, [pc, #772]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80031b4:	2104      	movs	r1, #4
 80031b6:	430a      	orrs	r2, r1
 80031b8:	621a      	str	r2, [r3, #32]
 80031ba:	4bbf      	ldr	r3, [pc, #764]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80031bc:	6a1a      	ldr	r2, [r3, #32]
 80031be:	4bbe      	ldr	r3, [pc, #760]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80031c0:	2101      	movs	r1, #1
 80031c2:	430a      	orrs	r2, r1
 80031c4:	621a      	str	r2, [r3, #32]
 80031c6:	e00b      	b.n	80031e0 <HAL_RCC_OscConfig+0x3a4>
 80031c8:	4bbb      	ldr	r3, [pc, #748]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80031ca:	6a1a      	ldr	r2, [r3, #32]
 80031cc:	4bba      	ldr	r3, [pc, #744]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80031ce:	2101      	movs	r1, #1
 80031d0:	438a      	bics	r2, r1
 80031d2:	621a      	str	r2, [r3, #32]
 80031d4:	4bb8      	ldr	r3, [pc, #736]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80031d6:	6a1a      	ldr	r2, [r3, #32]
 80031d8:	4bb7      	ldr	r3, [pc, #732]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80031da:	2104      	movs	r1, #4
 80031dc:	438a      	bics	r2, r1
 80031de:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d014      	beq.n	8003212 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e8:	f7fd fc32 	bl	8000a50 <HAL_GetTick>
 80031ec:	0003      	movs	r3, r0
 80031ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f0:	e009      	b.n	8003206 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f2:	f7fd fc2d 	bl	8000a50 <HAL_GetTick>
 80031f6:	0002      	movs	r2, r0
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	4aaf      	ldr	r2, [pc, #700]	; (80034bc <HAL_RCC_OscConfig+0x680>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e19a      	b.n	800353c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003206:	4bac      	ldr	r3, [pc, #688]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	2202      	movs	r2, #2
 800320c:	4013      	ands	r3, r2
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x3b6>
 8003210:	e013      	b.n	800323a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003212:	f7fd fc1d 	bl	8000a50 <HAL_GetTick>
 8003216:	0003      	movs	r3, r0
 8003218:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800321a:	e009      	b.n	8003230 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800321c:	f7fd fc18 	bl	8000a50 <HAL_GetTick>
 8003220:	0002      	movs	r2, r0
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	4aa5      	ldr	r2, [pc, #660]	; (80034bc <HAL_RCC_OscConfig+0x680>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e185      	b.n	800353c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003230:	4ba1      	ldr	r3, [pc, #644]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	2202      	movs	r2, #2
 8003236:	4013      	ands	r3, r2
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800323a:	231f      	movs	r3, #31
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d105      	bne.n	8003250 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003244:	4b9c      	ldr	r3, [pc, #624]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	4b9b      	ldr	r3, [pc, #620]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800324a:	499d      	ldr	r1, [pc, #628]	; (80034c0 <HAL_RCC_OscConfig+0x684>)
 800324c:	400a      	ands	r2, r1
 800324e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2210      	movs	r2, #16
 8003256:	4013      	ands	r3, r2
 8003258:	d063      	beq.n	8003322 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d12a      	bne.n	80032b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003262:	4b95      	ldr	r3, [pc, #596]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003266:	4b94      	ldr	r3, [pc, #592]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003268:	2104      	movs	r1, #4
 800326a:	430a      	orrs	r2, r1
 800326c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800326e:	4b92      	ldr	r3, [pc, #584]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003272:	4b91      	ldr	r3, [pc, #580]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003274:	2101      	movs	r1, #1
 8003276:	430a      	orrs	r2, r1
 8003278:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327a:	f7fd fbe9 	bl	8000a50 <HAL_GetTick>
 800327e:	0003      	movs	r3, r0
 8003280:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003284:	f7fd fbe4 	bl	8000a50 <HAL_GetTick>
 8003288:	0002      	movs	r2, r0
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e152      	b.n	800353c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003296:	4b88      	ldr	r3, [pc, #544]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329a:	2202      	movs	r2, #2
 800329c:	4013      	ands	r3, r2
 800329e:	d0f1      	beq.n	8003284 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032a0:	4b85      	ldr	r3, [pc, #532]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80032a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a4:	22f8      	movs	r2, #248	; 0xf8
 80032a6:	4393      	bics	r3, r2
 80032a8:	0019      	movs	r1, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	00da      	lsls	r2, r3, #3
 80032b0:	4b81      	ldr	r3, [pc, #516]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80032b2:	430a      	orrs	r2, r1
 80032b4:	635a      	str	r2, [r3, #52]	; 0x34
 80032b6:	e034      	b.n	8003322 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	3305      	adds	r3, #5
 80032be:	d111      	bne.n	80032e4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80032c0:	4b7d      	ldr	r3, [pc, #500]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80032c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c4:	4b7c      	ldr	r3, [pc, #496]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80032c6:	2104      	movs	r1, #4
 80032c8:	438a      	bics	r2, r1
 80032ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032cc:	4b7a      	ldr	r3, [pc, #488]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80032ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d0:	22f8      	movs	r2, #248	; 0xf8
 80032d2:	4393      	bics	r3, r2
 80032d4:	0019      	movs	r1, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	00da      	lsls	r2, r3, #3
 80032dc:	4b76      	ldr	r3, [pc, #472]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80032de:	430a      	orrs	r2, r1
 80032e0:	635a      	str	r2, [r3, #52]	; 0x34
 80032e2:	e01e      	b.n	8003322 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80032e4:	4b74      	ldr	r3, [pc, #464]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80032e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e8:	4b73      	ldr	r3, [pc, #460]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80032ea:	2104      	movs	r1, #4
 80032ec:	430a      	orrs	r2, r1
 80032ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80032f0:	4b71      	ldr	r3, [pc, #452]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80032f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032f4:	4b70      	ldr	r3, [pc, #448]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80032f6:	2101      	movs	r1, #1
 80032f8:	438a      	bics	r2, r1
 80032fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fc:	f7fd fba8 	bl	8000a50 <HAL_GetTick>
 8003300:	0003      	movs	r3, r0
 8003302:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003306:	f7fd fba3 	bl	8000a50 <HAL_GetTick>
 800330a:	0002      	movs	r2, r0
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e111      	b.n	800353c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003318:	4b67      	ldr	r3, [pc, #412]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800331a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331c:	2202      	movs	r2, #2
 800331e:	4013      	ands	r3, r2
 8003320:	d1f1      	bne.n	8003306 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2220      	movs	r2, #32
 8003328:	4013      	ands	r3, r2
 800332a:	d05c      	beq.n	80033e6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800332c:	4b62      	ldr	r3, [pc, #392]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	220c      	movs	r2, #12
 8003332:	4013      	ands	r3, r2
 8003334:	2b0c      	cmp	r3, #12
 8003336:	d00e      	beq.n	8003356 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003338:	4b5f      	ldr	r3, [pc, #380]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	220c      	movs	r2, #12
 800333e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003340:	2b08      	cmp	r3, #8
 8003342:	d114      	bne.n	800336e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003344:	4b5c      	ldr	r3, [pc, #368]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	23c0      	movs	r3, #192	; 0xc0
 800334a:	025b      	lsls	r3, r3, #9
 800334c:	401a      	ands	r2, r3
 800334e:	23c0      	movs	r3, #192	; 0xc0
 8003350:	025b      	lsls	r3, r3, #9
 8003352:	429a      	cmp	r2, r3
 8003354:	d10b      	bne.n	800336e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003356:	4b58      	ldr	r3, [pc, #352]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800335a:	2380      	movs	r3, #128	; 0x80
 800335c:	025b      	lsls	r3, r3, #9
 800335e:	4013      	ands	r3, r2
 8003360:	d040      	beq.n	80033e4 <HAL_RCC_OscConfig+0x5a8>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d03c      	beq.n	80033e4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e0e6      	b.n	800353c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d01b      	beq.n	80033ae <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003376:	4b50      	ldr	r3, [pc, #320]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800337a:	4b4f      	ldr	r3, [pc, #316]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800337c:	2180      	movs	r1, #128	; 0x80
 800337e:	0249      	lsls	r1, r1, #9
 8003380:	430a      	orrs	r2, r1
 8003382:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003384:	f7fd fb64 	bl	8000a50 <HAL_GetTick>
 8003388:	0003      	movs	r3, r0
 800338a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800338e:	f7fd fb5f 	bl	8000a50 <HAL_GetTick>
 8003392:	0002      	movs	r2, r0
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e0cd      	b.n	800353c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80033a0:	4b45      	ldr	r3, [pc, #276]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80033a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	025b      	lsls	r3, r3, #9
 80033a8:	4013      	ands	r3, r2
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x552>
 80033ac:	e01b      	b.n	80033e6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80033ae:	4b42      	ldr	r3, [pc, #264]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80033b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b2:	4b41      	ldr	r3, [pc, #260]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80033b4:	4943      	ldr	r1, [pc, #268]	; (80034c4 <HAL_RCC_OscConfig+0x688>)
 80033b6:	400a      	ands	r2, r1
 80033b8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ba:	f7fd fb49 	bl	8000a50 <HAL_GetTick>
 80033be:	0003      	movs	r3, r0
 80033c0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033c4:	f7fd fb44 	bl	8000a50 <HAL_GetTick>
 80033c8:	0002      	movs	r2, r0
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e0b2      	b.n	800353c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80033d6:	4b38      	ldr	r3, [pc, #224]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80033d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033da:	2380      	movs	r3, #128	; 0x80
 80033dc:	025b      	lsls	r3, r3, #9
 80033de:	4013      	ands	r3, r2
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x588>
 80033e2:	e000      	b.n	80033e6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80033e4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d100      	bne.n	80033f0 <HAL_RCC_OscConfig+0x5b4>
 80033ee:	e0a4      	b.n	800353a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033f0:	4b31      	ldr	r3, [pc, #196]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	220c      	movs	r2, #12
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d100      	bne.n	80033fe <HAL_RCC_OscConfig+0x5c2>
 80033fc:	e078      	b.n	80034f0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	2b02      	cmp	r3, #2
 8003404:	d14c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003406:	4b2c      	ldr	r3, [pc, #176]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	4b2b      	ldr	r3, [pc, #172]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800340c:	492e      	ldr	r1, [pc, #184]	; (80034c8 <HAL_RCC_OscConfig+0x68c>)
 800340e:	400a      	ands	r2, r1
 8003410:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003412:	f7fd fb1d 	bl	8000a50 <HAL_GetTick>
 8003416:	0003      	movs	r3, r0
 8003418:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800341c:	f7fd fb18 	bl	8000a50 <HAL_GetTick>
 8003420:	0002      	movs	r2, r0
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e086      	b.n	800353c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800342e:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	2380      	movs	r3, #128	; 0x80
 8003434:	049b      	lsls	r3, r3, #18
 8003436:	4013      	ands	r3, r2
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800343a:	4b1f      	ldr	r3, [pc, #124]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	220f      	movs	r2, #15
 8003440:	4393      	bics	r3, r2
 8003442:	0019      	movs	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003448:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800344a:	430a      	orrs	r2, r1
 800344c:	62da      	str	r2, [r3, #44]	; 0x2c
 800344e:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	4a1e      	ldr	r2, [pc, #120]	; (80034cc <HAL_RCC_OscConfig+0x690>)
 8003454:	4013      	ands	r3, r2
 8003456:	0019      	movs	r1, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	431a      	orrs	r2, r3
 8003462:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003464:	430a      	orrs	r2, r1
 8003466:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003468:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800346e:	2180      	movs	r1, #128	; 0x80
 8003470:	0449      	lsls	r1, r1, #17
 8003472:	430a      	orrs	r2, r1
 8003474:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fd faeb 	bl	8000a50 <HAL_GetTick>
 800347a:	0003      	movs	r3, r0
 800347c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003480:	f7fd fae6 	bl	8000a50 <HAL_GetTick>
 8003484:	0002      	movs	r2, r0
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e054      	b.n	800353c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003492:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	049b      	lsls	r3, r3, #18
 800349a:	4013      	ands	r3, r2
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x644>
 800349e:	e04c      	b.n	800353a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80034a6:	4908      	ldr	r1, [pc, #32]	; (80034c8 <HAL_RCC_OscConfig+0x68c>)
 80034a8:	400a      	ands	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7fd fad0 	bl	8000a50 <HAL_GetTick>
 80034b0:	0003      	movs	r3, r0
 80034b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b4:	e015      	b.n	80034e2 <HAL_RCC_OscConfig+0x6a6>
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	40021000 	.word	0x40021000
 80034bc:	00001388 	.word	0x00001388
 80034c0:	efffffff 	.word	0xefffffff
 80034c4:	fffeffff 	.word	0xfffeffff
 80034c8:	feffffff 	.word	0xfeffffff
 80034cc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d0:	f7fd fabe 	bl	8000a50 <HAL_GetTick>
 80034d4:	0002      	movs	r2, r0
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e02c      	b.n	800353c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e2:	4b18      	ldr	r3, [pc, #96]	; (8003544 <HAL_RCC_OscConfig+0x708>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	2380      	movs	r3, #128	; 0x80
 80034e8:	049b      	lsls	r3, r3, #18
 80034ea:	4013      	ands	r3, r2
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x694>
 80034ee:	e024      	b.n	800353a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e01f      	b.n	800353c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80034fc:	4b11      	ldr	r3, [pc, #68]	; (8003544 <HAL_RCC_OscConfig+0x708>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003502:	4b10      	ldr	r3, [pc, #64]	; (8003544 <HAL_RCC_OscConfig+0x708>)
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	23c0      	movs	r3, #192	; 0xc0
 800350c:	025b      	lsls	r3, r3, #9
 800350e:	401a      	ands	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	429a      	cmp	r2, r3
 8003516:	d10e      	bne.n	8003536 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	220f      	movs	r2, #15
 800351c:	401a      	ands	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003522:	429a      	cmp	r2, r3
 8003524:	d107      	bne.n	8003536 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	23f0      	movs	r3, #240	; 0xf0
 800352a:	039b      	lsls	r3, r3, #14
 800352c:	401a      	ands	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003532:	429a      	cmp	r2, r3
 8003534:	d001      	beq.n	800353a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	0018      	movs	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	b008      	add	sp, #32
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40021000 	.word	0x40021000

08003548 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0bf      	b.n	80036dc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800355c:	4b61      	ldr	r3, [pc, #388]	; (80036e4 <HAL_RCC_ClockConfig+0x19c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2201      	movs	r2, #1
 8003562:	4013      	ands	r3, r2
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d911      	bls.n	800358e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356a:	4b5e      	ldr	r3, [pc, #376]	; (80036e4 <HAL_RCC_ClockConfig+0x19c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2201      	movs	r2, #1
 8003570:	4393      	bics	r3, r2
 8003572:	0019      	movs	r1, r3
 8003574:	4b5b      	ldr	r3, [pc, #364]	; (80036e4 <HAL_RCC_ClockConfig+0x19c>)
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357c:	4b59      	ldr	r3, [pc, #356]	; (80036e4 <HAL_RCC_ClockConfig+0x19c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2201      	movs	r2, #1
 8003582:	4013      	ands	r3, r2
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d001      	beq.n	800358e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e0a6      	b.n	80036dc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2202      	movs	r2, #2
 8003594:	4013      	ands	r3, r2
 8003596:	d015      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2204      	movs	r2, #4
 800359e:	4013      	ands	r3, r2
 80035a0:	d006      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035a2:	4b51      	ldr	r3, [pc, #324]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	4b50      	ldr	r3, [pc, #320]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 80035a8:	21e0      	movs	r1, #224	; 0xe0
 80035aa:	00c9      	lsls	r1, r1, #3
 80035ac:	430a      	orrs	r2, r1
 80035ae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b0:	4b4d      	ldr	r3, [pc, #308]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	22f0      	movs	r2, #240	; 0xf0
 80035b6:	4393      	bics	r3, r2
 80035b8:	0019      	movs	r1, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	4b4a      	ldr	r3, [pc, #296]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 80035c0:	430a      	orrs	r2, r1
 80035c2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2201      	movs	r2, #1
 80035ca:	4013      	ands	r3, r2
 80035cc:	d04c      	beq.n	8003668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	4b44      	ldr	r3, [pc, #272]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	2380      	movs	r3, #128	; 0x80
 80035dc:	029b      	lsls	r3, r3, #10
 80035de:	4013      	ands	r3, r2
 80035e0:	d120      	bne.n	8003624 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e07a      	b.n	80036dc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ee:	4b3e      	ldr	r3, [pc, #248]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	2380      	movs	r3, #128	; 0x80
 80035f4:	049b      	lsls	r3, r3, #18
 80035f6:	4013      	ands	r3, r2
 80035f8:	d114      	bne.n	8003624 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e06e      	b.n	80036dc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b03      	cmp	r3, #3
 8003604:	d107      	bne.n	8003616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003606:	4b38      	ldr	r3, [pc, #224]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 8003608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	025b      	lsls	r3, r3, #9
 800360e:	4013      	ands	r3, r2
 8003610:	d108      	bne.n	8003624 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e062      	b.n	80036dc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003616:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2202      	movs	r2, #2
 800361c:	4013      	ands	r3, r2
 800361e:	d101      	bne.n	8003624 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e05b      	b.n	80036dc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003624:	4b30      	ldr	r3, [pc, #192]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2203      	movs	r2, #3
 800362a:	4393      	bics	r3, r2
 800362c:	0019      	movs	r1, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	4b2d      	ldr	r3, [pc, #180]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 8003634:	430a      	orrs	r2, r1
 8003636:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003638:	f7fd fa0a 	bl	8000a50 <HAL_GetTick>
 800363c:	0003      	movs	r3, r0
 800363e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003640:	e009      	b.n	8003656 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003642:	f7fd fa05 	bl	8000a50 <HAL_GetTick>
 8003646:	0002      	movs	r2, r0
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	4a27      	ldr	r2, [pc, #156]	; (80036ec <HAL_RCC_ClockConfig+0x1a4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e042      	b.n	80036dc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	220c      	movs	r2, #12
 800365c:	401a      	ands	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	429a      	cmp	r2, r3
 8003666:	d1ec      	bne.n	8003642 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003668:	4b1e      	ldr	r3, [pc, #120]	; (80036e4 <HAL_RCC_ClockConfig+0x19c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2201      	movs	r2, #1
 800366e:	4013      	ands	r3, r2
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d211      	bcs.n	800369a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003676:	4b1b      	ldr	r3, [pc, #108]	; (80036e4 <HAL_RCC_ClockConfig+0x19c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2201      	movs	r2, #1
 800367c:	4393      	bics	r3, r2
 800367e:	0019      	movs	r1, r3
 8003680:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <HAL_RCC_ClockConfig+0x19c>)
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003688:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <HAL_RCC_ClockConfig+0x19c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2201      	movs	r2, #1
 800368e:	4013      	ands	r3, r2
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d001      	beq.n	800369a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e020      	b.n	80036dc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2204      	movs	r2, #4
 80036a0:	4013      	ands	r3, r2
 80036a2:	d009      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036a4:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4a11      	ldr	r2, [pc, #68]	; (80036f0 <HAL_RCC_ClockConfig+0x1a8>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	0019      	movs	r1, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 80036b4:	430a      	orrs	r2, r1
 80036b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036b8:	f000 f820 	bl	80036fc <HAL_RCC_GetSysClockFreq>
 80036bc:	0001      	movs	r1, r0
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	091b      	lsrs	r3, r3, #4
 80036c4:	220f      	movs	r2, #15
 80036c6:	4013      	ands	r3, r2
 80036c8:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <HAL_RCC_ClockConfig+0x1ac>)
 80036ca:	5cd3      	ldrb	r3, [r2, r3]
 80036cc:	000a      	movs	r2, r1
 80036ce:	40da      	lsrs	r2, r3
 80036d0:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <HAL_RCC_ClockConfig+0x1b0>)
 80036d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80036d4:	2000      	movs	r0, #0
 80036d6:	f7fd f975 	bl	80009c4 <HAL_InitTick>
  
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	0018      	movs	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	b004      	add	sp, #16
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40022000 	.word	0x40022000
 80036e8:	40021000 	.word	0x40021000
 80036ec:	00001388 	.word	0x00001388
 80036f0:	fffff8ff 	.word	0xfffff8ff
 80036f4:	08004a04 	.word	0x08004a04
 80036f8:	20000008 	.word	0x20000008

080036fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036fc:	b590      	push	{r4, r7, lr}
 80036fe:	b08f      	sub	sp, #60	; 0x3c
 8003700:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003702:	2314      	movs	r3, #20
 8003704:	18fb      	adds	r3, r7, r3
 8003706:	4a38      	ldr	r2, [pc, #224]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xec>)
 8003708:	ca13      	ldmia	r2!, {r0, r1, r4}
 800370a:	c313      	stmia	r3!, {r0, r1, r4}
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003710:	1d3b      	adds	r3, r7, #4
 8003712:	4a36      	ldr	r2, [pc, #216]	; (80037ec <HAL_RCC_GetSysClockFreq+0xf0>)
 8003714:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003716:	c313      	stmia	r3!, {r0, r1, r4}
 8003718:	6812      	ldr	r2, [r2, #0]
 800371a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003720:	2300      	movs	r3, #0
 8003722:	62bb      	str	r3, [r7, #40]	; 0x28
 8003724:	2300      	movs	r3, #0
 8003726:	637b      	str	r3, [r7, #52]	; 0x34
 8003728:	2300      	movs	r3, #0
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003730:	4b2f      	ldr	r3, [pc, #188]	; (80037f0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003738:	220c      	movs	r2, #12
 800373a:	4013      	ands	r3, r2
 800373c:	2b0c      	cmp	r3, #12
 800373e:	d047      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0xd4>
 8003740:	d849      	bhi.n	80037d6 <HAL_RCC_GetSysClockFreq+0xda>
 8003742:	2b04      	cmp	r3, #4
 8003744:	d002      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x50>
 8003746:	2b08      	cmp	r3, #8
 8003748:	d003      	beq.n	8003752 <HAL_RCC_GetSysClockFreq+0x56>
 800374a:	e044      	b.n	80037d6 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800374c:	4b29      	ldr	r3, [pc, #164]	; (80037f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800374e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003750:	e044      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	0c9b      	lsrs	r3, r3, #18
 8003756:	220f      	movs	r2, #15
 8003758:	4013      	ands	r3, r2
 800375a:	2214      	movs	r2, #20
 800375c:	18ba      	adds	r2, r7, r2
 800375e:	5cd3      	ldrb	r3, [r2, r3]
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003762:	4b23      	ldr	r3, [pc, #140]	; (80037f0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	220f      	movs	r2, #15
 8003768:	4013      	ands	r3, r2
 800376a:	1d3a      	adds	r2, r7, #4
 800376c:	5cd3      	ldrb	r3, [r2, r3]
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003772:	23c0      	movs	r3, #192	; 0xc0
 8003774:	025b      	lsls	r3, r3, #9
 8003776:	401a      	ands	r2, r3
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	025b      	lsls	r3, r3, #9
 800377c:	429a      	cmp	r2, r3
 800377e:	d109      	bne.n	8003794 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003782:	481c      	ldr	r0, [pc, #112]	; (80037f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003784:	f7fc fcbe 	bl	8000104 <__udivsi3>
 8003788:	0003      	movs	r3, r0
 800378a:	001a      	movs	r2, r3
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	4353      	muls	r3, r2
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
 8003792:	e01a      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003796:	23c0      	movs	r3, #192	; 0xc0
 8003798:	025b      	lsls	r3, r3, #9
 800379a:	401a      	ands	r2, r3
 800379c:	23c0      	movs	r3, #192	; 0xc0
 800379e:	025b      	lsls	r3, r3, #9
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d109      	bne.n	80037b8 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037a6:	4814      	ldr	r0, [pc, #80]	; (80037f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80037a8:	f7fc fcac 	bl	8000104 <__udivsi3>
 80037ac:	0003      	movs	r3, r0
 80037ae:	001a      	movs	r2, r3
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	4353      	muls	r3, r2
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34
 80037b6:	e008      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ba:	480e      	ldr	r0, [pc, #56]	; (80037f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037bc:	f7fc fca2 	bl	8000104 <__udivsi3>
 80037c0:	0003      	movs	r3, r0
 80037c2:	001a      	movs	r2, r3
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	4353      	muls	r3, r2
 80037c8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80037ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037ce:	e005      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80037d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037d4:	e002      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037d6:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037da:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80037dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80037de:	0018      	movs	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b00f      	add	sp, #60	; 0x3c
 80037e4:	bd90      	pop	{r4, r7, pc}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	080049e4 	.word	0x080049e4
 80037ec:	080049f4 	.word	0x080049f4
 80037f0:	40021000 	.word	0x40021000
 80037f4:	007a1200 	.word	0x007a1200
 80037f8:	02dc6c00 	.word	0x02dc6c00

080037fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003800:	4b02      	ldr	r3, [pc, #8]	; (800380c <HAL_RCC_GetHCLKFreq+0x10>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	0018      	movs	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	20000008 	.word	0x20000008

08003810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003814:	f7ff fff2 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 8003818:	0001      	movs	r1, r0
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <HAL_RCC_GetPCLK1Freq+0x24>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	0a1b      	lsrs	r3, r3, #8
 8003820:	2207      	movs	r2, #7
 8003822:	4013      	ands	r3, r2
 8003824:	4a04      	ldr	r2, [pc, #16]	; (8003838 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003826:	5cd3      	ldrb	r3, [r2, r3]
 8003828:	40d9      	lsrs	r1, r3
 800382a:	000b      	movs	r3, r1
}    
 800382c:	0018      	movs	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	40021000 	.word	0x40021000
 8003838:	08004a14 	.word	0x08004a14

0800383c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	025b      	lsls	r3, r3, #9
 8003854:	4013      	ands	r3, r2
 8003856:	d100      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003858:	e08e      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800385a:	2017      	movs	r0, #23
 800385c:	183b      	adds	r3, r7, r0
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003862:	4b6e      	ldr	r3, [pc, #440]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003864:	69da      	ldr	r2, [r3, #28]
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	055b      	lsls	r3, r3, #21
 800386a:	4013      	ands	r3, r2
 800386c:	d110      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800386e:	4b6b      	ldr	r3, [pc, #428]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003870:	69da      	ldr	r2, [r3, #28]
 8003872:	4b6a      	ldr	r3, [pc, #424]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003874:	2180      	movs	r1, #128	; 0x80
 8003876:	0549      	lsls	r1, r1, #21
 8003878:	430a      	orrs	r2, r1
 800387a:	61da      	str	r2, [r3, #28]
 800387c:	4b67      	ldr	r3, [pc, #412]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800387e:	69da      	ldr	r2, [r3, #28]
 8003880:	2380      	movs	r3, #128	; 0x80
 8003882:	055b      	lsls	r3, r3, #21
 8003884:	4013      	ands	r3, r2
 8003886:	60bb      	str	r3, [r7, #8]
 8003888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800388a:	183b      	adds	r3, r7, r0
 800388c:	2201      	movs	r2, #1
 800388e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003890:	4b63      	ldr	r3, [pc, #396]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	2380      	movs	r3, #128	; 0x80
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	4013      	ands	r3, r2
 800389a:	d11a      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800389c:	4b60      	ldr	r3, [pc, #384]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4b5f      	ldr	r3, [pc, #380]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80038a2:	2180      	movs	r1, #128	; 0x80
 80038a4:	0049      	lsls	r1, r1, #1
 80038a6:	430a      	orrs	r2, r1
 80038a8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038aa:	f7fd f8d1 	bl	8000a50 <HAL_GetTick>
 80038ae:	0003      	movs	r3, r0
 80038b0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b2:	e008      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b4:	f7fd f8cc 	bl	8000a50 <HAL_GetTick>
 80038b8:	0002      	movs	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b64      	cmp	r3, #100	; 0x64
 80038c0:	d901      	bls.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e0a6      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c6:	4b56      	ldr	r3, [pc, #344]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	2380      	movs	r3, #128	; 0x80
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4013      	ands	r3, r2
 80038d0:	d0f0      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038d2:	4b52      	ldr	r3, [pc, #328]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038d4:	6a1a      	ldr	r2, [r3, #32]
 80038d6:	23c0      	movs	r3, #192	; 0xc0
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4013      	ands	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d034      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	23c0      	movs	r3, #192	; 0xc0
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4013      	ands	r3, r2
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d02c      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038f4:	4b49      	ldr	r3, [pc, #292]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	4a4a      	ldr	r2, [pc, #296]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038fe:	4b47      	ldr	r3, [pc, #284]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003900:	6a1a      	ldr	r2, [r3, #32]
 8003902:	4b46      	ldr	r3, [pc, #280]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003904:	2180      	movs	r1, #128	; 0x80
 8003906:	0249      	lsls	r1, r1, #9
 8003908:	430a      	orrs	r2, r1
 800390a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800390c:	4b43      	ldr	r3, [pc, #268]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800390e:	6a1a      	ldr	r2, [r3, #32]
 8003910:	4b42      	ldr	r3, [pc, #264]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003912:	4945      	ldr	r1, [pc, #276]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003914:	400a      	ands	r2, r1
 8003916:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003918:	4b40      	ldr	r3, [pc, #256]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	4013      	ands	r3, r2
 8003924:	d013      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7fd f893 	bl	8000a50 <HAL_GetTick>
 800392a:	0003      	movs	r3, r0
 800392c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392e:	e009      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003930:	f7fd f88e 	bl	8000a50 <HAL_GetTick>
 8003934:	0002      	movs	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	4a3c      	ldr	r2, [pc, #240]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d901      	bls.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e067      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003944:	4b35      	ldr	r3, [pc, #212]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	2202      	movs	r2, #2
 800394a:	4013      	ands	r3, r2
 800394c:	d0f0      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800394e:	4b33      	ldr	r3, [pc, #204]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	4a34      	ldr	r2, [pc, #208]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003954:	4013      	ands	r3, r2
 8003956:	0019      	movs	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	4b2f      	ldr	r3, [pc, #188]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800395e:	430a      	orrs	r2, r1
 8003960:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003962:	2317      	movs	r3, #23
 8003964:	18fb      	adds	r3, r7, r3
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d105      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396c:	4b2b      	ldr	r3, [pc, #172]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800396e:	69da      	ldr	r2, [r3, #28]
 8003970:	4b2a      	ldr	r3, [pc, #168]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003972:	492f      	ldr	r1, [pc, #188]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003974:	400a      	ands	r2, r1
 8003976:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2201      	movs	r2, #1
 800397e:	4013      	ands	r3, r2
 8003980:	d009      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003982:	4b26      	ldr	r3, [pc, #152]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	2203      	movs	r2, #3
 8003988:	4393      	bics	r3, r2
 800398a:	0019      	movs	r1, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003992:	430a      	orrs	r2, r1
 8003994:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2202      	movs	r2, #2
 800399c:	4013      	ands	r3, r2
 800399e:	d009      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039a0:	4b1e      	ldr	r3, [pc, #120]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	4a23      	ldr	r2, [pc, #140]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	0019      	movs	r1, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	4b1b      	ldr	r3, [pc, #108]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039b0:	430a      	orrs	r2, r1
 80039b2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	2380      	movs	r3, #128	; 0x80
 80039ba:	02db      	lsls	r3, r3, #11
 80039bc:	4013      	ands	r3, r2
 80039be:	d009      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039c0:	4b16      	ldr	r3, [pc, #88]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	4a1c      	ldr	r2, [pc, #112]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	0019      	movs	r1, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039d0:	430a      	orrs	r2, r1
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2220      	movs	r2, #32
 80039da:	4013      	ands	r3, r2
 80039dc:	d009      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039de:	4b0f      	ldr	r3, [pc, #60]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	2210      	movs	r2, #16
 80039e4:	4393      	bics	r3, r2
 80039e6:	0019      	movs	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	695a      	ldr	r2, [r3, #20]
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039ee:	430a      	orrs	r2, r1
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	2380      	movs	r3, #128	; 0x80
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	4013      	ands	r3, r2
 80039fc:	d009      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039fe:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	2240      	movs	r2, #64	; 0x40
 8003a04:	4393      	bics	r3, r2
 8003a06:	0019      	movs	r1, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699a      	ldr	r2, [r3, #24]
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	0018      	movs	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b006      	add	sp, #24
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40007000 	.word	0x40007000
 8003a24:	fffffcff 	.word	0xfffffcff
 8003a28:	fffeffff 	.word	0xfffeffff
 8003a2c:	00001388 	.word	0x00001388
 8003a30:	efffffff 	.word	0xefffffff
 8003a34:	fffcffff 	.word	0xfffcffff
 8003a38:	fff3ffff 	.word	0xfff3ffff

08003a3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e044      	b.n	8003ad8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d107      	bne.n	8003a66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2274      	movs	r2, #116	; 0x74
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	0018      	movs	r0, r3
 8003a62:	f7fc fe63 	bl	800072c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2224      	movs	r2, #36	; 0x24
 8003a6a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2101      	movs	r1, #1
 8003a78:	438a      	bics	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f000 fb24 	bl	80040cc <UART_SetConfig>
 8003a84:	0003      	movs	r3, r0
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e024      	b.n	8003ad8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f000 fcff 	bl	800449c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	490d      	ldr	r1, [pc, #52]	; (8003ae0 <HAL_UART_Init+0xa4>)
 8003aaa:	400a      	ands	r2, r1
 8003aac:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	212a      	movs	r1, #42	; 0x2a
 8003aba:	438a      	bics	r2, r1
 8003abc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2101      	movs	r1, #1
 8003aca:	430a      	orrs	r2, r1
 8003acc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f000 fd97 	bl	8004604 <UART_CheckIdleState>
 8003ad6:	0003      	movs	r3, r0
}
 8003ad8:	0018      	movs	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b002      	add	sp, #8
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	ffffb7ff 	.word	0xffffb7ff

08003ae4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ae4:	b590      	push	{r4, r7, lr}
 8003ae6:	b0ab      	sub	sp, #172	; 0xac
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	22a4      	movs	r2, #164	; 0xa4
 8003af4:	18b9      	adds	r1, r7, r2
 8003af6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	20a0      	movs	r0, #160	; 0xa0
 8003b00:	1839      	adds	r1, r7, r0
 8003b02:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	219c      	movs	r1, #156	; 0x9c
 8003b0c:	1879      	adds	r1, r7, r1
 8003b0e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b10:	0011      	movs	r1, r2
 8003b12:	18bb      	adds	r3, r7, r2
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a99      	ldr	r2, [pc, #612]	; (8003d7c <HAL_UART_IRQHandler+0x298>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2298      	movs	r2, #152	; 0x98
 8003b1c:	18bc      	adds	r4, r7, r2
 8003b1e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003b20:	18bb      	adds	r3, r7, r2
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d114      	bne.n	8003b52 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b28:	187b      	adds	r3, r7, r1
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d00f      	beq.n	8003b52 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b32:	183b      	adds	r3, r7, r0
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2220      	movs	r2, #32
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d00a      	beq.n	8003b52 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d100      	bne.n	8003b46 <HAL_UART_IRQHandler+0x62>
 8003b44:	e296      	b.n	8004074 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	0010      	movs	r0, r2
 8003b4e:	4798      	blx	r3
      }
      return;
 8003b50:	e290      	b.n	8004074 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b52:	2398      	movs	r3, #152	; 0x98
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d100      	bne.n	8003b5e <HAL_UART_IRQHandler+0x7a>
 8003b5c:	e114      	b.n	8003d88 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b5e:	239c      	movs	r3, #156	; 0x9c
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2201      	movs	r2, #1
 8003b66:	4013      	ands	r3, r2
 8003b68:	d106      	bne.n	8003b78 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b6a:	23a0      	movs	r3, #160	; 0xa0
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a83      	ldr	r2, [pc, #524]	; (8003d80 <HAL_UART_IRQHandler+0x29c>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	d100      	bne.n	8003b78 <HAL_UART_IRQHandler+0x94>
 8003b76:	e107      	b.n	8003d88 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b78:	23a4      	movs	r3, #164	; 0xa4
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	4013      	ands	r3, r2
 8003b82:	d012      	beq.n	8003baa <HAL_UART_IRQHandler+0xc6>
 8003b84:	23a0      	movs	r3, #160	; 0xa0
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d00b      	beq.n	8003baa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2201      	movs	r2, #1
 8003b98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2280      	movs	r2, #128	; 0x80
 8003b9e:	589b      	ldr	r3, [r3, r2]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2180      	movs	r1, #128	; 0x80
 8003ba8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003baa:	23a4      	movs	r3, #164	; 0xa4
 8003bac:	18fb      	adds	r3, r7, r3
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	d011      	beq.n	8003bda <HAL_UART_IRQHandler+0xf6>
 8003bb6:	239c      	movs	r3, #156	; 0x9c
 8003bb8:	18fb      	adds	r3, r7, r3
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d00b      	beq.n	8003bda <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2280      	movs	r2, #128	; 0x80
 8003bce:	589b      	ldr	r3, [r3, r2]
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2180      	movs	r1, #128	; 0x80
 8003bd8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bda:	23a4      	movs	r3, #164	; 0xa4
 8003bdc:	18fb      	adds	r3, r7, r3
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2204      	movs	r2, #4
 8003be2:	4013      	ands	r3, r2
 8003be4:	d011      	beq.n	8003c0a <HAL_UART_IRQHandler+0x126>
 8003be6:	239c      	movs	r3, #156	; 0x9c
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2201      	movs	r2, #1
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d00b      	beq.n	8003c0a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2280      	movs	r2, #128	; 0x80
 8003bfe:	589b      	ldr	r3, [r3, r2]
 8003c00:	2202      	movs	r2, #2
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2180      	movs	r1, #128	; 0x80
 8003c08:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c0a:	23a4      	movs	r3, #164	; 0xa4
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2208      	movs	r2, #8
 8003c12:	4013      	ands	r3, r2
 8003c14:	d017      	beq.n	8003c46 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c16:	23a0      	movs	r3, #160	; 0xa0
 8003c18:	18fb      	adds	r3, r7, r3
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d105      	bne.n	8003c2e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c22:	239c      	movs	r3, #156	; 0x9c
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c2c:	d00b      	beq.n	8003c46 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2208      	movs	r2, #8
 8003c34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2280      	movs	r2, #128	; 0x80
 8003c3a:	589b      	ldr	r3, [r3, r2]
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2180      	movs	r1, #128	; 0x80
 8003c44:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c46:	23a4      	movs	r3, #164	; 0xa4
 8003c48:	18fb      	adds	r3, r7, r3
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	4013      	ands	r3, r2
 8003c52:	d013      	beq.n	8003c7c <HAL_UART_IRQHandler+0x198>
 8003c54:	23a0      	movs	r3, #160	; 0xa0
 8003c56:	18fb      	adds	r3, r7, r3
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	2380      	movs	r3, #128	; 0x80
 8003c5c:	04db      	lsls	r3, r3, #19
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d00c      	beq.n	8003c7c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2280      	movs	r2, #128	; 0x80
 8003c68:	0112      	lsls	r2, r2, #4
 8003c6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2280      	movs	r2, #128	; 0x80
 8003c70:	589b      	ldr	r3, [r3, r2]
 8003c72:	2220      	movs	r2, #32
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2180      	movs	r1, #128	; 0x80
 8003c7a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2280      	movs	r2, #128	; 0x80
 8003c80:	589b      	ldr	r3, [r3, r2]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d100      	bne.n	8003c88 <HAL_UART_IRQHandler+0x1a4>
 8003c86:	e1f7      	b.n	8004078 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c88:	23a4      	movs	r3, #164	; 0xa4
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	4013      	ands	r3, r2
 8003c92:	d00e      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c94:	23a0      	movs	r3, #160	; 0xa0
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d008      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d004      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	0010      	movs	r0, r2
 8003cb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2280      	movs	r2, #128	; 0x80
 8003cb6:	589b      	ldr	r3, [r3, r2]
 8003cb8:	2194      	movs	r1, #148	; 0x94
 8003cba:	187a      	adds	r2, r7, r1
 8003cbc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2240      	movs	r2, #64	; 0x40
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b40      	cmp	r3, #64	; 0x40
 8003cca:	d004      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ccc:	187b      	adds	r3, r7, r1
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2228      	movs	r2, #40	; 0x28
 8003cd2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cd4:	d047      	beq.n	8003d66 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f000 fd9f 	bl	800481c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2240      	movs	r2, #64	; 0x40
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b40      	cmp	r3, #64	; 0x40
 8003cea:	d137      	bne.n	8003d5c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cec:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cf4:	2090      	movs	r0, #144	; 0x90
 8003cf6:	183a      	adds	r2, r7, r0
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d00:	f383 8810 	msr	PRIMASK, r3
}
 8003d04:	46c0      	nop			; (mov r8, r8)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2140      	movs	r1, #64	; 0x40
 8003d12:	438a      	bics	r2, r1
 8003d14:	609a      	str	r2, [r3, #8]
 8003d16:	183b      	adds	r3, r7, r0
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d1e:	f383 8810 	msr	PRIMASK, r3
}
 8003d22:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d012      	beq.n	8003d52 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d30:	4a14      	ldr	r2, [pc, #80]	; (8003d84 <HAL_UART_IRQHandler+0x2a0>)
 8003d32:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f7fd f857 	bl	8000dec <HAL_DMA_Abort_IT>
 8003d3e:	1e03      	subs	r3, r0, #0
 8003d40:	d01a      	beq.n	8003d78 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d50:	e012      	b.n	8003d78 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	0018      	movs	r0, r3
 8003d56:	f000 f9a5 	bl	80040a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5a:	e00d      	b.n	8003d78 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f000 f9a0 	bl	80040a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d64:	e008      	b.n	8003d78 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f000 f99b 	bl	80040a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2280      	movs	r2, #128	; 0x80
 8003d72:	2100      	movs	r1, #0
 8003d74:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003d76:	e17f      	b.n	8004078 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d78:	46c0      	nop			; (mov r8, r8)
    return;
 8003d7a:	e17d      	b.n	8004078 <HAL_UART_IRQHandler+0x594>
 8003d7c:	0000080f 	.word	0x0000080f
 8003d80:	04000120 	.word	0x04000120
 8003d84:	080048e1 	.word	0x080048e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d000      	beq.n	8003d92 <HAL_UART_IRQHandler+0x2ae>
 8003d90:	e131      	b.n	8003ff6 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d92:	23a4      	movs	r3, #164	; 0xa4
 8003d94:	18fb      	adds	r3, r7, r3
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2210      	movs	r2, #16
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d100      	bne.n	8003da0 <HAL_UART_IRQHandler+0x2bc>
 8003d9e:	e12a      	b.n	8003ff6 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003da0:	23a0      	movs	r3, #160	; 0xa0
 8003da2:	18fb      	adds	r3, r7, r3
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2210      	movs	r2, #16
 8003da8:	4013      	ands	r3, r2
 8003daa:	d100      	bne.n	8003dae <HAL_UART_IRQHandler+0x2ca>
 8003dac:	e123      	b.n	8003ff6 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2210      	movs	r2, #16
 8003db4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2240      	movs	r2, #64	; 0x40
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	2b40      	cmp	r3, #64	; 0x40
 8003dc2:	d000      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x2e2>
 8003dc4:	e09b      	b.n	8003efe <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	217e      	movs	r1, #126	; 0x7e
 8003dd0:	187b      	adds	r3, r7, r1
 8003dd2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003dd4:	187b      	adds	r3, r7, r1
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d100      	bne.n	8003dde <HAL_UART_IRQHandler+0x2fa>
 8003ddc:	e14e      	b.n	800407c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2258      	movs	r2, #88	; 0x58
 8003de2:	5a9b      	ldrh	r3, [r3, r2]
 8003de4:	187a      	adds	r2, r7, r1
 8003de6:	8812      	ldrh	r2, [r2, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d300      	bcc.n	8003dee <HAL_UART_IRQHandler+0x30a>
 8003dec:	e146      	b.n	800407c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	187a      	adds	r2, r7, r1
 8003df2:	215a      	movs	r1, #90	; 0x5a
 8003df4:	8812      	ldrh	r2, [r2, #0]
 8003df6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	d06e      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e02:	f3ef 8310 	mrs	r3, PRIMASK
 8003e06:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e12:	f383 8810 	msr	PRIMASK, r3
}
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	499a      	ldr	r1, [pc, #616]	; (800408c <HAL_UART_IRQHandler+0x5a8>)
 8003e24:	400a      	ands	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2e:	f383 8810 	msr	PRIMASK, r3
}
 8003e32:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e34:	f3ef 8310 	mrs	r3, PRIMASK
 8003e38:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e3c:	677b      	str	r3, [r7, #116]	; 0x74
 8003e3e:	2301      	movs	r3, #1
 8003e40:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e44:	f383 8810 	msr	PRIMASK, r3
}
 8003e48:	46c0      	nop			; (mov r8, r8)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2101      	movs	r1, #1
 8003e56:	438a      	bics	r2, r1
 8003e58:	609a      	str	r2, [r3, #8]
 8003e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e5c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e60:	f383 8810 	msr	PRIMASK, r3
}
 8003e64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e66:	f3ef 8310 	mrs	r3, PRIMASK
 8003e6a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e6e:	673b      	str	r3, [r7, #112]	; 0x70
 8003e70:	2301      	movs	r3, #1
 8003e72:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e76:	f383 8810 	msr	PRIMASK, r3
}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2140      	movs	r1, #64	; 0x40
 8003e88:	438a      	bics	r2, r1
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e8e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e92:	f383 8810 	msr	PRIMASK, r3
}
 8003e96:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea8:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eae:	2301      	movs	r3, #1
 8003eb0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eb4:	f383 8810 	msr	PRIMASK, r3
}
 8003eb8:	46c0      	nop			; (mov r8, r8)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2110      	movs	r1, #16
 8003ec6:	438a      	bics	r2, r1
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ed0:	f383 8810 	msr	PRIMASK, r3
}
 8003ed4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	0018      	movs	r0, r3
 8003edc:	f7fc ff4e 	bl	8000d7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2258      	movs	r2, #88	; 0x58
 8003ee4:	5a9a      	ldrh	r2, [r3, r2]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	215a      	movs	r1, #90	; 0x5a
 8003eea:	5a5b      	ldrh	r3, [r3, r1]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	0011      	movs	r1, r2
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f000 f8dc 	bl	80040b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003efc:	e0be      	b.n	800407c <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2258      	movs	r2, #88	; 0x58
 8003f02:	5a99      	ldrh	r1, [r3, r2]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	225a      	movs	r2, #90	; 0x5a
 8003f08:	5a9b      	ldrh	r3, [r3, r2]
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	208e      	movs	r0, #142	; 0x8e
 8003f0e:	183b      	adds	r3, r7, r0
 8003f10:	1a8a      	subs	r2, r1, r2
 8003f12:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	225a      	movs	r2, #90	; 0x5a
 8003f18:	5a9b      	ldrh	r3, [r3, r2]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d100      	bne.n	8003f22 <HAL_UART_IRQHandler+0x43e>
 8003f20:	e0ae      	b.n	8004080 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8003f22:	183b      	adds	r3, r7, r0
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d100      	bne.n	8003f2c <HAL_UART_IRQHandler+0x448>
 8003f2a:	e0a9      	b.n	8004080 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f30:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f32:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f34:	2488      	movs	r4, #136	; 0x88
 8003f36:	193a      	adds	r2, r7, r4
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f383 8810 	msr	PRIMASK, r3
}
 8003f44:	46c0      	nop			; (mov r8, r8)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	494f      	ldr	r1, [pc, #316]	; (8004090 <HAL_UART_IRQHandler+0x5ac>)
 8003f52:	400a      	ands	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	193b      	adds	r3, r7, r4
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f383 8810 	msr	PRIMASK, r3
}
 8003f62:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f64:	f3ef 8310 	mrs	r3, PRIMASK
 8003f68:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f6a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6c:	2484      	movs	r4, #132	; 0x84
 8003f6e:	193a      	adds	r2, r7, r4
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	2301      	movs	r3, #1
 8003f74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	f383 8810 	msr	PRIMASK, r3
}
 8003f7c:	46c0      	nop			; (mov r8, r8)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2101      	movs	r1, #1
 8003f8a:	438a      	bics	r2, r1
 8003f8c:	609a      	str	r2, [r3, #8]
 8003f8e:	193b      	adds	r3, r7, r4
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	f383 8810 	msr	PRIMASK, r3
}
 8003f9a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fae:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb6:	2480      	movs	r4, #128	; 0x80
 8003fb8:	193a      	adds	r2, r7, r4
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc2:	f383 8810 	msr	PRIMASK, r3
}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2110      	movs	r1, #16
 8003fd4:	438a      	bics	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	193b      	adds	r3, r7, r4
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe0:	f383 8810 	msr	PRIMASK, r3
}
 8003fe4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fe6:	183b      	adds	r3, r7, r0
 8003fe8:	881a      	ldrh	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	0011      	movs	r1, r2
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f000 f860 	bl	80040b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ff4:	e044      	b.n	8004080 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ff6:	23a4      	movs	r3, #164	; 0xa4
 8003ff8:	18fb      	adds	r3, r7, r3
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	2380      	movs	r3, #128	; 0x80
 8003ffe:	035b      	lsls	r3, r3, #13
 8004000:	4013      	ands	r3, r2
 8004002:	d010      	beq.n	8004026 <HAL_UART_IRQHandler+0x542>
 8004004:	239c      	movs	r3, #156	; 0x9c
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	2380      	movs	r3, #128	; 0x80
 800400c:	03db      	lsls	r3, r3, #15
 800400e:	4013      	ands	r3, r2
 8004010:	d009      	beq.n	8004026 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2280      	movs	r2, #128	; 0x80
 8004018:	0352      	lsls	r2, r2, #13
 800401a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	0018      	movs	r0, r3
 8004020:	f000 fca0 	bl	8004964 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004024:	e02f      	b.n	8004086 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004026:	23a4      	movs	r3, #164	; 0xa4
 8004028:	18fb      	adds	r3, r7, r3
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2280      	movs	r2, #128	; 0x80
 800402e:	4013      	ands	r3, r2
 8004030:	d00f      	beq.n	8004052 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004032:	23a0      	movs	r3, #160	; 0xa0
 8004034:	18fb      	adds	r3, r7, r3
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2280      	movs	r2, #128	; 0x80
 800403a:	4013      	ands	r3, r2
 800403c:	d009      	beq.n	8004052 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004042:	2b00      	cmp	r3, #0
 8004044:	d01e      	beq.n	8004084 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	0010      	movs	r0, r2
 800404e:	4798      	blx	r3
    }
    return;
 8004050:	e018      	b.n	8004084 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004052:	23a4      	movs	r3, #164	; 0xa4
 8004054:	18fb      	adds	r3, r7, r3
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2240      	movs	r2, #64	; 0x40
 800405a:	4013      	ands	r3, r2
 800405c:	d013      	beq.n	8004086 <HAL_UART_IRQHandler+0x5a2>
 800405e:	23a0      	movs	r3, #160	; 0xa0
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2240      	movs	r2, #64	; 0x40
 8004066:	4013      	ands	r3, r2
 8004068:	d00d      	beq.n	8004086 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	0018      	movs	r0, r3
 800406e:	f000 fc4e 	bl	800490e <UART_EndTransmit_IT>
    return;
 8004072:	e008      	b.n	8004086 <HAL_UART_IRQHandler+0x5a2>
      return;
 8004074:	46c0      	nop			; (mov r8, r8)
 8004076:	e006      	b.n	8004086 <HAL_UART_IRQHandler+0x5a2>
    return;
 8004078:	46c0      	nop			; (mov r8, r8)
 800407a:	e004      	b.n	8004086 <HAL_UART_IRQHandler+0x5a2>
      return;
 800407c:	46c0      	nop			; (mov r8, r8)
 800407e:	e002      	b.n	8004086 <HAL_UART_IRQHandler+0x5a2>
      return;
 8004080:	46c0      	nop			; (mov r8, r8)
 8004082:	e000      	b.n	8004086 <HAL_UART_IRQHandler+0x5a2>
    return;
 8004084:	46c0      	nop			; (mov r8, r8)
  }

}
 8004086:	46bd      	mov	sp, r7
 8004088:	b02b      	add	sp, #172	; 0xac
 800408a:	bd90      	pop	{r4, r7, pc}
 800408c:	fffffeff 	.word	0xfffffeff
 8004090:	fffffedf 	.word	0xfffffedf

08004094 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800409c:	46c0      	nop			; (mov r8, r8)
 800409e:	46bd      	mov	sp, r7
 80040a0:	b002      	add	sp, #8
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80040ac:	46c0      	nop			; (mov r8, r8)
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b002      	add	sp, #8
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	000a      	movs	r2, r1
 80040be:	1cbb      	adds	r3, r7, #2
 80040c0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b002      	add	sp, #8
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040d4:	231e      	movs	r3, #30
 80040d6:	18fb      	adds	r3, r7, r3
 80040d8:	2200      	movs	r2, #0
 80040da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4abe      	ldr	r2, [pc, #760]	; (80043f4 <UART_SetConfig+0x328>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	0019      	movs	r1, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	430a      	orrs	r2, r1
 8004108:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	4ab9      	ldr	r2, [pc, #740]	; (80043f8 <UART_SetConfig+0x32c>)
 8004112:	4013      	ands	r3, r2
 8004114:	0019      	movs	r1, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	4ab0      	ldr	r2, [pc, #704]	; (80043fc <UART_SetConfig+0x330>)
 800413a:	4013      	ands	r3, r2
 800413c:	0019      	movs	r1, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	430a      	orrs	r2, r1
 8004146:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4aac      	ldr	r2, [pc, #688]	; (8004400 <UART_SetConfig+0x334>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d127      	bne.n	80041a2 <UART_SetConfig+0xd6>
 8004152:	4bac      	ldr	r3, [pc, #688]	; (8004404 <UART_SetConfig+0x338>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004156:	2203      	movs	r2, #3
 8004158:	4013      	ands	r3, r2
 800415a:	2b03      	cmp	r3, #3
 800415c:	d00d      	beq.n	800417a <UART_SetConfig+0xae>
 800415e:	d81b      	bhi.n	8004198 <UART_SetConfig+0xcc>
 8004160:	2b02      	cmp	r3, #2
 8004162:	d014      	beq.n	800418e <UART_SetConfig+0xc2>
 8004164:	d818      	bhi.n	8004198 <UART_SetConfig+0xcc>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <UART_SetConfig+0xa4>
 800416a:	2b01      	cmp	r3, #1
 800416c:	d00a      	beq.n	8004184 <UART_SetConfig+0xb8>
 800416e:	e013      	b.n	8004198 <UART_SetConfig+0xcc>
 8004170:	231f      	movs	r3, #31
 8004172:	18fb      	adds	r3, r7, r3
 8004174:	2200      	movs	r2, #0
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	e0bd      	b.n	80042f6 <UART_SetConfig+0x22a>
 800417a:	231f      	movs	r3, #31
 800417c:	18fb      	adds	r3, r7, r3
 800417e:	2202      	movs	r2, #2
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	e0b8      	b.n	80042f6 <UART_SetConfig+0x22a>
 8004184:	231f      	movs	r3, #31
 8004186:	18fb      	adds	r3, r7, r3
 8004188:	2204      	movs	r2, #4
 800418a:	701a      	strb	r2, [r3, #0]
 800418c:	e0b3      	b.n	80042f6 <UART_SetConfig+0x22a>
 800418e:	231f      	movs	r3, #31
 8004190:	18fb      	adds	r3, r7, r3
 8004192:	2208      	movs	r2, #8
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	e0ae      	b.n	80042f6 <UART_SetConfig+0x22a>
 8004198:	231f      	movs	r3, #31
 800419a:	18fb      	adds	r3, r7, r3
 800419c:	2210      	movs	r2, #16
 800419e:	701a      	strb	r2, [r3, #0]
 80041a0:	e0a9      	b.n	80042f6 <UART_SetConfig+0x22a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a98      	ldr	r2, [pc, #608]	; (8004408 <UART_SetConfig+0x33c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d134      	bne.n	8004216 <UART_SetConfig+0x14a>
 80041ac:	4b95      	ldr	r3, [pc, #596]	; (8004404 <UART_SetConfig+0x338>)
 80041ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041b0:	23c0      	movs	r3, #192	; 0xc0
 80041b2:	029b      	lsls	r3, r3, #10
 80041b4:	4013      	ands	r3, r2
 80041b6:	22c0      	movs	r2, #192	; 0xc0
 80041b8:	0292      	lsls	r2, r2, #10
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d017      	beq.n	80041ee <UART_SetConfig+0x122>
 80041be:	22c0      	movs	r2, #192	; 0xc0
 80041c0:	0292      	lsls	r2, r2, #10
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d822      	bhi.n	800420c <UART_SetConfig+0x140>
 80041c6:	2280      	movs	r2, #128	; 0x80
 80041c8:	0292      	lsls	r2, r2, #10
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d019      	beq.n	8004202 <UART_SetConfig+0x136>
 80041ce:	2280      	movs	r2, #128	; 0x80
 80041d0:	0292      	lsls	r2, r2, #10
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d81a      	bhi.n	800420c <UART_SetConfig+0x140>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d004      	beq.n	80041e4 <UART_SetConfig+0x118>
 80041da:	2280      	movs	r2, #128	; 0x80
 80041dc:	0252      	lsls	r2, r2, #9
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00a      	beq.n	80041f8 <UART_SetConfig+0x12c>
 80041e2:	e013      	b.n	800420c <UART_SetConfig+0x140>
 80041e4:	231f      	movs	r3, #31
 80041e6:	18fb      	adds	r3, r7, r3
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	e083      	b.n	80042f6 <UART_SetConfig+0x22a>
 80041ee:	231f      	movs	r3, #31
 80041f0:	18fb      	adds	r3, r7, r3
 80041f2:	2202      	movs	r2, #2
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	e07e      	b.n	80042f6 <UART_SetConfig+0x22a>
 80041f8:	231f      	movs	r3, #31
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	2204      	movs	r2, #4
 80041fe:	701a      	strb	r2, [r3, #0]
 8004200:	e079      	b.n	80042f6 <UART_SetConfig+0x22a>
 8004202:	231f      	movs	r3, #31
 8004204:	18fb      	adds	r3, r7, r3
 8004206:	2208      	movs	r2, #8
 8004208:	701a      	strb	r2, [r3, #0]
 800420a:	e074      	b.n	80042f6 <UART_SetConfig+0x22a>
 800420c:	231f      	movs	r3, #31
 800420e:	18fb      	adds	r3, r7, r3
 8004210:	2210      	movs	r2, #16
 8004212:	701a      	strb	r2, [r3, #0]
 8004214:	e06f      	b.n	80042f6 <UART_SetConfig+0x22a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a7c      	ldr	r2, [pc, #496]	; (800440c <UART_SetConfig+0x340>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d134      	bne.n	800428a <UART_SetConfig+0x1be>
 8004220:	4b78      	ldr	r3, [pc, #480]	; (8004404 <UART_SetConfig+0x338>)
 8004222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004224:	23c0      	movs	r3, #192	; 0xc0
 8004226:	031b      	lsls	r3, r3, #12
 8004228:	4013      	ands	r3, r2
 800422a:	22c0      	movs	r2, #192	; 0xc0
 800422c:	0312      	lsls	r2, r2, #12
 800422e:	4293      	cmp	r3, r2
 8004230:	d017      	beq.n	8004262 <UART_SetConfig+0x196>
 8004232:	22c0      	movs	r2, #192	; 0xc0
 8004234:	0312      	lsls	r2, r2, #12
 8004236:	4293      	cmp	r3, r2
 8004238:	d822      	bhi.n	8004280 <UART_SetConfig+0x1b4>
 800423a:	2280      	movs	r2, #128	; 0x80
 800423c:	0312      	lsls	r2, r2, #12
 800423e:	4293      	cmp	r3, r2
 8004240:	d019      	beq.n	8004276 <UART_SetConfig+0x1aa>
 8004242:	2280      	movs	r2, #128	; 0x80
 8004244:	0312      	lsls	r2, r2, #12
 8004246:	4293      	cmp	r3, r2
 8004248:	d81a      	bhi.n	8004280 <UART_SetConfig+0x1b4>
 800424a:	2b00      	cmp	r3, #0
 800424c:	d004      	beq.n	8004258 <UART_SetConfig+0x18c>
 800424e:	2280      	movs	r2, #128	; 0x80
 8004250:	02d2      	lsls	r2, r2, #11
 8004252:	4293      	cmp	r3, r2
 8004254:	d00a      	beq.n	800426c <UART_SetConfig+0x1a0>
 8004256:	e013      	b.n	8004280 <UART_SetConfig+0x1b4>
 8004258:	231f      	movs	r3, #31
 800425a:	18fb      	adds	r3, r7, r3
 800425c:	2200      	movs	r2, #0
 800425e:	701a      	strb	r2, [r3, #0]
 8004260:	e049      	b.n	80042f6 <UART_SetConfig+0x22a>
 8004262:	231f      	movs	r3, #31
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	2202      	movs	r2, #2
 8004268:	701a      	strb	r2, [r3, #0]
 800426a:	e044      	b.n	80042f6 <UART_SetConfig+0x22a>
 800426c:	231f      	movs	r3, #31
 800426e:	18fb      	adds	r3, r7, r3
 8004270:	2204      	movs	r2, #4
 8004272:	701a      	strb	r2, [r3, #0]
 8004274:	e03f      	b.n	80042f6 <UART_SetConfig+0x22a>
 8004276:	231f      	movs	r3, #31
 8004278:	18fb      	adds	r3, r7, r3
 800427a:	2208      	movs	r2, #8
 800427c:	701a      	strb	r2, [r3, #0]
 800427e:	e03a      	b.n	80042f6 <UART_SetConfig+0x22a>
 8004280:	231f      	movs	r3, #31
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	2210      	movs	r2, #16
 8004286:	701a      	strb	r2, [r3, #0]
 8004288:	e035      	b.n	80042f6 <UART_SetConfig+0x22a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a60      	ldr	r2, [pc, #384]	; (8004410 <UART_SetConfig+0x344>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d104      	bne.n	800429e <UART_SetConfig+0x1d2>
 8004294:	231f      	movs	r3, #31
 8004296:	18fb      	adds	r3, r7, r3
 8004298:	2200      	movs	r2, #0
 800429a:	701a      	strb	r2, [r3, #0]
 800429c:	e02b      	b.n	80042f6 <UART_SetConfig+0x22a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a5c      	ldr	r2, [pc, #368]	; (8004414 <UART_SetConfig+0x348>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d104      	bne.n	80042b2 <UART_SetConfig+0x1e6>
 80042a8:	231f      	movs	r3, #31
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	2200      	movs	r2, #0
 80042ae:	701a      	strb	r2, [r3, #0]
 80042b0:	e021      	b.n	80042f6 <UART_SetConfig+0x22a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a58      	ldr	r2, [pc, #352]	; (8004418 <UART_SetConfig+0x34c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d104      	bne.n	80042c6 <UART_SetConfig+0x1fa>
 80042bc:	231f      	movs	r3, #31
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	2200      	movs	r2, #0
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	e017      	b.n	80042f6 <UART_SetConfig+0x22a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a54      	ldr	r2, [pc, #336]	; (800441c <UART_SetConfig+0x350>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d104      	bne.n	80042da <UART_SetConfig+0x20e>
 80042d0:	231f      	movs	r3, #31
 80042d2:	18fb      	adds	r3, r7, r3
 80042d4:	2200      	movs	r2, #0
 80042d6:	701a      	strb	r2, [r3, #0]
 80042d8:	e00d      	b.n	80042f6 <UART_SetConfig+0x22a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a50      	ldr	r2, [pc, #320]	; (8004420 <UART_SetConfig+0x354>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d104      	bne.n	80042ee <UART_SetConfig+0x222>
 80042e4:	231f      	movs	r3, #31
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
 80042ec:	e003      	b.n	80042f6 <UART_SetConfig+0x22a>
 80042ee:	231f      	movs	r3, #31
 80042f0:	18fb      	adds	r3, r7, r3
 80042f2:	2210      	movs	r2, #16
 80042f4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69da      	ldr	r2, [r3, #28]
 80042fa:	2380      	movs	r3, #128	; 0x80
 80042fc:	021b      	lsls	r3, r3, #8
 80042fe:	429a      	cmp	r2, r3
 8004300:	d15d      	bne.n	80043be <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8004302:	231f      	movs	r3, #31
 8004304:	18fb      	adds	r3, r7, r3
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b08      	cmp	r3, #8
 800430a:	d015      	beq.n	8004338 <UART_SetConfig+0x26c>
 800430c:	dc18      	bgt.n	8004340 <UART_SetConfig+0x274>
 800430e:	2b04      	cmp	r3, #4
 8004310:	d00d      	beq.n	800432e <UART_SetConfig+0x262>
 8004312:	dc15      	bgt.n	8004340 <UART_SetConfig+0x274>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <UART_SetConfig+0x252>
 8004318:	2b02      	cmp	r3, #2
 800431a:	d005      	beq.n	8004328 <UART_SetConfig+0x25c>
 800431c:	e010      	b.n	8004340 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800431e:	f7ff fa77 	bl	8003810 <HAL_RCC_GetPCLK1Freq>
 8004322:	0003      	movs	r3, r0
 8004324:	61bb      	str	r3, [r7, #24]
        break;
 8004326:	e012      	b.n	800434e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004328:	4b3e      	ldr	r3, [pc, #248]	; (8004424 <UART_SetConfig+0x358>)
 800432a:	61bb      	str	r3, [r7, #24]
        break;
 800432c:	e00f      	b.n	800434e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800432e:	f7ff f9e5 	bl	80036fc <HAL_RCC_GetSysClockFreq>
 8004332:	0003      	movs	r3, r0
 8004334:	61bb      	str	r3, [r7, #24]
        break;
 8004336:	e00a      	b.n	800434e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004338:	2380      	movs	r3, #128	; 0x80
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	61bb      	str	r3, [r7, #24]
        break;
 800433e:	e006      	b.n	800434e <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004344:	231e      	movs	r3, #30
 8004346:	18fb      	adds	r3, r7, r3
 8004348:	2201      	movs	r2, #1
 800434a:	701a      	strb	r2, [r3, #0]
        break;
 800434c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d100      	bne.n	8004356 <UART_SetConfig+0x28a>
 8004354:	e095      	b.n	8004482 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	005a      	lsls	r2, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	085b      	lsrs	r3, r3, #1
 8004360:	18d2      	adds	r2, r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	0019      	movs	r1, r3
 8004368:	0010      	movs	r0, r2
 800436a:	f7fb fecb 	bl	8000104 <__udivsi3>
 800436e:	0003      	movs	r3, r0
 8004370:	b29b      	uxth	r3, r3
 8004372:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	2b0f      	cmp	r3, #15
 8004378:	d91c      	bls.n	80043b4 <UART_SetConfig+0x2e8>
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	2380      	movs	r3, #128	; 0x80
 800437e:	025b      	lsls	r3, r3, #9
 8004380:	429a      	cmp	r2, r3
 8004382:	d217      	bcs.n	80043b4 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	b29a      	uxth	r2, r3
 8004388:	200e      	movs	r0, #14
 800438a:	183b      	adds	r3, r7, r0
 800438c:	210f      	movs	r1, #15
 800438e:	438a      	bics	r2, r1
 8004390:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	085b      	lsrs	r3, r3, #1
 8004396:	b29b      	uxth	r3, r3
 8004398:	2207      	movs	r2, #7
 800439a:	4013      	ands	r3, r2
 800439c:	b299      	uxth	r1, r3
 800439e:	183b      	adds	r3, r7, r0
 80043a0:	183a      	adds	r2, r7, r0
 80043a2:	8812      	ldrh	r2, [r2, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	183a      	adds	r2, r7, r0
 80043ae:	8812      	ldrh	r2, [r2, #0]
 80043b0:	60da      	str	r2, [r3, #12]
 80043b2:	e066      	b.n	8004482 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80043b4:	231e      	movs	r3, #30
 80043b6:	18fb      	adds	r3, r7, r3
 80043b8:	2201      	movs	r2, #1
 80043ba:	701a      	strb	r2, [r3, #0]
 80043bc:	e061      	b.n	8004482 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043be:	231f      	movs	r3, #31
 80043c0:	18fb      	adds	r3, r7, r3
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d02f      	beq.n	8004428 <UART_SetConfig+0x35c>
 80043c8:	dc32      	bgt.n	8004430 <UART_SetConfig+0x364>
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d00d      	beq.n	80043ea <UART_SetConfig+0x31e>
 80043ce:	dc2f      	bgt.n	8004430 <UART_SetConfig+0x364>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <UART_SetConfig+0x30e>
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d005      	beq.n	80043e4 <UART_SetConfig+0x318>
 80043d8:	e02a      	b.n	8004430 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043da:	f7ff fa19 	bl	8003810 <HAL_RCC_GetPCLK1Freq>
 80043de:	0003      	movs	r3, r0
 80043e0:	61bb      	str	r3, [r7, #24]
        break;
 80043e2:	e02c      	b.n	800443e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043e4:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <UART_SetConfig+0x358>)
 80043e6:	61bb      	str	r3, [r7, #24]
        break;
 80043e8:	e029      	b.n	800443e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ea:	f7ff f987 	bl	80036fc <HAL_RCC_GetSysClockFreq>
 80043ee:	0003      	movs	r3, r0
 80043f0:	61bb      	str	r3, [r7, #24]
        break;
 80043f2:	e024      	b.n	800443e <UART_SetConfig+0x372>
 80043f4:	efff69f3 	.word	0xefff69f3
 80043f8:	ffffcfff 	.word	0xffffcfff
 80043fc:	fffff4ff 	.word	0xfffff4ff
 8004400:	40013800 	.word	0x40013800
 8004404:	40021000 	.word	0x40021000
 8004408:	40004400 	.word	0x40004400
 800440c:	40004800 	.word	0x40004800
 8004410:	40004c00 	.word	0x40004c00
 8004414:	40005000 	.word	0x40005000
 8004418:	40011400 	.word	0x40011400
 800441c:	40011800 	.word	0x40011800
 8004420:	40011c00 	.word	0x40011c00
 8004424:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004428:	2380      	movs	r3, #128	; 0x80
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	61bb      	str	r3, [r7, #24]
        break;
 800442e:	e006      	b.n	800443e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004434:	231e      	movs	r3, #30
 8004436:	18fb      	adds	r3, r7, r3
 8004438:	2201      	movs	r2, #1
 800443a:	701a      	strb	r2, [r3, #0]
        break;
 800443c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d01e      	beq.n	8004482 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	085a      	lsrs	r2, r3, #1
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	18d2      	adds	r2, r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	0019      	movs	r1, r3
 8004454:	0010      	movs	r0, r2
 8004456:	f7fb fe55 	bl	8000104 <__udivsi3>
 800445a:	0003      	movs	r3, r0
 800445c:	b29b      	uxth	r3, r3
 800445e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	2b0f      	cmp	r3, #15
 8004464:	d909      	bls.n	800447a <UART_SetConfig+0x3ae>
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	2380      	movs	r3, #128	; 0x80
 800446a:	025b      	lsls	r3, r3, #9
 800446c:	429a      	cmp	r2, r3
 800446e:	d204      	bcs.n	800447a <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	60da      	str	r2, [r3, #12]
 8004478:	e003      	b.n	8004482 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800447a:	231e      	movs	r3, #30
 800447c:	18fb      	adds	r3, r7, r3
 800447e:	2201      	movs	r2, #1
 8004480:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800448e:	231e      	movs	r3, #30
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	781b      	ldrb	r3, [r3, #0]
}
 8004494:	0018      	movs	r0, r3
 8004496:	46bd      	mov	sp, r7
 8004498:	b008      	add	sp, #32
 800449a:	bd80      	pop	{r7, pc}

0800449c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	2201      	movs	r2, #1
 80044aa:	4013      	ands	r3, r2
 80044ac:	d00b      	beq.n	80044c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	4a4a      	ldr	r2, [pc, #296]	; (80045e0 <UART_AdvFeatureConfig+0x144>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	0019      	movs	r1, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	2202      	movs	r2, #2
 80044cc:	4013      	ands	r3, r2
 80044ce:	d00b      	beq.n	80044e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	4a43      	ldr	r2, [pc, #268]	; (80045e4 <UART_AdvFeatureConfig+0x148>)
 80044d8:	4013      	ands	r3, r2
 80044da:	0019      	movs	r1, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	2204      	movs	r2, #4
 80044ee:	4013      	ands	r3, r2
 80044f0:	d00b      	beq.n	800450a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	4a3b      	ldr	r2, [pc, #236]	; (80045e8 <UART_AdvFeatureConfig+0x14c>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	0019      	movs	r1, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	2208      	movs	r2, #8
 8004510:	4013      	ands	r3, r2
 8004512:	d00b      	beq.n	800452c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	4a34      	ldr	r2, [pc, #208]	; (80045ec <UART_AdvFeatureConfig+0x150>)
 800451c:	4013      	ands	r3, r2
 800451e:	0019      	movs	r1, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	2210      	movs	r2, #16
 8004532:	4013      	ands	r3, r2
 8004534:	d00b      	beq.n	800454e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	4a2c      	ldr	r2, [pc, #176]	; (80045f0 <UART_AdvFeatureConfig+0x154>)
 800453e:	4013      	ands	r3, r2
 8004540:	0019      	movs	r1, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	2220      	movs	r2, #32
 8004554:	4013      	ands	r3, r2
 8004556:	d00b      	beq.n	8004570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	4a25      	ldr	r2, [pc, #148]	; (80045f4 <UART_AdvFeatureConfig+0x158>)
 8004560:	4013      	ands	r3, r2
 8004562:	0019      	movs	r1, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	2240      	movs	r2, #64	; 0x40
 8004576:	4013      	ands	r3, r2
 8004578:	d01d      	beq.n	80045b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	4a1d      	ldr	r2, [pc, #116]	; (80045f8 <UART_AdvFeatureConfig+0x15c>)
 8004582:	4013      	ands	r3, r2
 8004584:	0019      	movs	r1, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004596:	2380      	movs	r3, #128	; 0x80
 8004598:	035b      	lsls	r3, r3, #13
 800459a:	429a      	cmp	r2, r3
 800459c:	d10b      	bne.n	80045b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	4a15      	ldr	r2, [pc, #84]	; (80045fc <UART_AdvFeatureConfig+0x160>)
 80045a6:	4013      	ands	r3, r2
 80045a8:	0019      	movs	r1, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	2280      	movs	r2, #128	; 0x80
 80045bc:	4013      	ands	r3, r2
 80045be:	d00b      	beq.n	80045d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	4a0e      	ldr	r2, [pc, #56]	; (8004600 <UART_AdvFeatureConfig+0x164>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	0019      	movs	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	605a      	str	r2, [r3, #4]
  }
}
 80045d8:	46c0      	nop			; (mov r8, r8)
 80045da:	46bd      	mov	sp, r7
 80045dc:	b002      	add	sp, #8
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	fffdffff 	.word	0xfffdffff
 80045e4:	fffeffff 	.word	0xfffeffff
 80045e8:	fffbffff 	.word	0xfffbffff
 80045ec:	ffff7fff 	.word	0xffff7fff
 80045f0:	ffffefff 	.word	0xffffefff
 80045f4:	ffffdfff 	.word	0xffffdfff
 80045f8:	ffefffff 	.word	0xffefffff
 80045fc:	ff9fffff 	.word	0xff9fffff
 8004600:	fff7ffff 	.word	0xfff7ffff

08004604 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af02      	add	r7, sp, #8
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2280      	movs	r2, #128	; 0x80
 8004610:	2100      	movs	r1, #0
 8004612:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004614:	f7fc fa1c 	bl	8000a50 <HAL_GetTick>
 8004618:	0003      	movs	r3, r0
 800461a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2208      	movs	r2, #8
 8004624:	4013      	ands	r3, r2
 8004626:	2b08      	cmp	r3, #8
 8004628:	d10c      	bne.n	8004644 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2280      	movs	r2, #128	; 0x80
 800462e:	0391      	lsls	r1, r2, #14
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	4a17      	ldr	r2, [pc, #92]	; (8004690 <UART_CheckIdleState+0x8c>)
 8004634:	9200      	str	r2, [sp, #0]
 8004636:	2200      	movs	r2, #0
 8004638:	f000 f82c 	bl	8004694 <UART_WaitOnFlagUntilTimeout>
 800463c:	1e03      	subs	r3, r0, #0
 800463e:	d001      	beq.n	8004644 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e021      	b.n	8004688 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2204      	movs	r2, #4
 800464c:	4013      	ands	r3, r2
 800464e:	2b04      	cmp	r3, #4
 8004650:	d10c      	bne.n	800466c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2280      	movs	r2, #128	; 0x80
 8004656:	03d1      	lsls	r1, r2, #15
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	4a0d      	ldr	r2, [pc, #52]	; (8004690 <UART_CheckIdleState+0x8c>)
 800465c:	9200      	str	r2, [sp, #0]
 800465e:	2200      	movs	r2, #0
 8004660:	f000 f818 	bl	8004694 <UART_WaitOnFlagUntilTimeout>
 8004664:	1e03      	subs	r3, r0, #0
 8004666:	d001      	beq.n	800466c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e00d      	b.n	8004688 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2220      	movs	r2, #32
 8004676:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2274      	movs	r2, #116	; 0x74
 8004682:	2100      	movs	r1, #0
 8004684:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	0018      	movs	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	b004      	add	sp, #16
 800468e:	bd80      	pop	{r7, pc}
 8004690:	01ffffff 	.word	0x01ffffff

08004694 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b094      	sub	sp, #80	; 0x50
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	1dfb      	adds	r3, r7, #7
 80046a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a4:	e0a3      	b.n	80047ee <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046a8:	3301      	adds	r3, #1
 80046aa:	d100      	bne.n	80046ae <UART_WaitOnFlagUntilTimeout+0x1a>
 80046ac:	e09f      	b.n	80047ee <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ae:	f7fc f9cf 	bl	8000a50 <HAL_GetTick>
 80046b2:	0002      	movs	r2, r0
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d302      	bcc.n	80046c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80046be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d13d      	bne.n	8004740 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046c4:	f3ef 8310 	mrs	r3, PRIMASK
 80046c8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046cc:	647b      	str	r3, [r7, #68]	; 0x44
 80046ce:	2301      	movs	r3, #1
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	f383 8810 	msr	PRIMASK, r3
}
 80046d8:	46c0      	nop			; (mov r8, r8)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	494c      	ldr	r1, [pc, #304]	; (8004818 <UART_WaitOnFlagUntilTimeout+0x184>)
 80046e6:	400a      	ands	r2, r1
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046ec:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	f383 8810 	msr	PRIMASK, r3
}
 80046f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f6:	f3ef 8310 	mrs	r3, PRIMASK
 80046fa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80046fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004700:	2301      	movs	r3, #1
 8004702:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004706:	f383 8810 	msr	PRIMASK, r3
}
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2101      	movs	r1, #1
 8004718:	438a      	bics	r2, r1
 800471a:	609a      	str	r2, [r3, #8]
 800471c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800471e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004722:	f383 8810 	msr	PRIMASK, r3
}
 8004726:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2220      	movs	r2, #32
 8004732:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2274      	movs	r2, #116	; 0x74
 8004738:	2100      	movs	r1, #0
 800473a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e067      	b.n	8004810 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2204      	movs	r2, #4
 8004748:	4013      	ands	r3, r2
 800474a:	d050      	beq.n	80047ee <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	69da      	ldr	r2, [r3, #28]
 8004752:	2380      	movs	r3, #128	; 0x80
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	401a      	ands	r2, r3
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	429a      	cmp	r2, r3
 800475e:	d146      	bne.n	80047ee <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2280      	movs	r2, #128	; 0x80
 8004766:	0112      	lsls	r2, r2, #4
 8004768:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800476a:	f3ef 8310 	mrs	r3, PRIMASK
 800476e:	613b      	str	r3, [r7, #16]
  return(result);
 8004770:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004774:	2301      	movs	r3, #1
 8004776:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f383 8810 	msr	PRIMASK, r3
}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4923      	ldr	r1, [pc, #140]	; (8004818 <UART_WaitOnFlagUntilTimeout+0x184>)
 800478c:	400a      	ands	r2, r1
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004792:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	f383 8810 	msr	PRIMASK, r3
}
 800479a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800479c:	f3ef 8310 	mrs	r3, PRIMASK
 80047a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80047a2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80047a6:	2301      	movs	r3, #1
 80047a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	f383 8810 	msr	PRIMASK, r3
}
 80047b0:	46c0      	nop			; (mov r8, r8)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2101      	movs	r1, #1
 80047be:	438a      	bics	r2, r1
 80047c0:	609a      	str	r2, [r3, #8]
 80047c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	f383 8810 	msr	PRIMASK, r3
}
 80047cc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2220      	movs	r2, #32
 80047d2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2220      	movs	r2, #32
 80047d8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2280      	movs	r2, #128	; 0x80
 80047de:	2120      	movs	r1, #32
 80047e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2274      	movs	r2, #116	; 0x74
 80047e6:	2100      	movs	r1, #0
 80047e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e010      	b.n	8004810 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	4013      	ands	r3, r2
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	425a      	negs	r2, r3
 80047fe:	4153      	adcs	r3, r2
 8004800:	b2db      	uxtb	r3, r3
 8004802:	001a      	movs	r2, r3
 8004804:	1dfb      	adds	r3, r7, #7
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d100      	bne.n	800480e <UART_WaitOnFlagUntilTimeout+0x17a>
 800480c:	e74b      	b.n	80046a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	0018      	movs	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	b014      	add	sp, #80	; 0x50
 8004816:	bd80      	pop	{r7, pc}
 8004818:	fffffe5f 	.word	0xfffffe5f

0800481c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08e      	sub	sp, #56	; 0x38
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004824:	f3ef 8310 	mrs	r3, PRIMASK
 8004828:	617b      	str	r3, [r7, #20]
  return(result);
 800482a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800482c:	637b      	str	r3, [r7, #52]	; 0x34
 800482e:	2301      	movs	r3, #1
 8004830:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	f383 8810 	msr	PRIMASK, r3
}
 8004838:	46c0      	nop			; (mov r8, r8)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4925      	ldr	r1, [pc, #148]	; (80048dc <UART_EndRxTransfer+0xc0>)
 8004846:	400a      	ands	r2, r1
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f383 8810 	msr	PRIMASK, r3
}
 8004854:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004856:	f3ef 8310 	mrs	r3, PRIMASK
 800485a:	623b      	str	r3, [r7, #32]
  return(result);
 800485c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485e:	633b      	str	r3, [r7, #48]	; 0x30
 8004860:	2301      	movs	r3, #1
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	f383 8810 	msr	PRIMASK, r3
}
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2101      	movs	r1, #1
 8004878:	438a      	bics	r2, r1
 800487a:	609a      	str	r2, [r3, #8]
 800487c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	f383 8810 	msr	PRIMASK, r3
}
 8004886:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800488c:	2b01      	cmp	r3, #1
 800488e:	d118      	bne.n	80048c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004890:	f3ef 8310 	mrs	r3, PRIMASK
 8004894:	60bb      	str	r3, [r7, #8]
  return(result);
 8004896:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800489a:	2301      	movs	r3, #1
 800489c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f383 8810 	msr	PRIMASK, r3
}
 80048a4:	46c0      	nop			; (mov r8, r8)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2110      	movs	r1, #16
 80048b2:	438a      	bics	r2, r1
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f383 8810 	msr	PRIMASK, r3
}
 80048c0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2220      	movs	r2, #32
 80048c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80048d4:	46c0      	nop			; (mov r8, r8)
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b00e      	add	sp, #56	; 0x38
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	fffffedf 	.word	0xfffffedf

080048e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	225a      	movs	r2, #90	; 0x5a
 80048f2:	2100      	movs	r1, #0
 80048f4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2252      	movs	r2, #82	; 0x52
 80048fa:	2100      	movs	r1, #0
 80048fc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	0018      	movs	r0, r3
 8004902:	f7ff fbcf 	bl	80040a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	46bd      	mov	sp, r7
 800490a:	b004      	add	sp, #16
 800490c:	bd80      	pop	{r7, pc}

0800490e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b086      	sub	sp, #24
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004916:	f3ef 8310 	mrs	r3, PRIMASK
 800491a:	60bb      	str	r3, [r7, #8]
  return(result);
 800491c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	2301      	movs	r3, #1
 8004922:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f383 8810 	msr	PRIMASK, r3
}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2140      	movs	r1, #64	; 0x40
 8004938:	438a      	bics	r2, r1
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f383 8810 	msr	PRIMASK, r3
}
 8004946:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	0018      	movs	r0, r3
 8004958:	f7ff fb9c 	bl	8004094 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800495c:	46c0      	nop			; (mov r8, r8)
 800495e:	46bd      	mov	sp, r7
 8004960:	b006      	add	sp, #24
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800496c:	46c0      	nop			; (mov r8, r8)
 800496e:	46bd      	mov	sp, r7
 8004970:	b002      	add	sp, #8
 8004972:	bd80      	pop	{r7, pc}

08004974 <__libc_init_array>:
 8004974:	b570      	push	{r4, r5, r6, lr}
 8004976:	2600      	movs	r6, #0
 8004978:	4d0c      	ldr	r5, [pc, #48]	; (80049ac <__libc_init_array+0x38>)
 800497a:	4c0d      	ldr	r4, [pc, #52]	; (80049b0 <__libc_init_array+0x3c>)
 800497c:	1b64      	subs	r4, r4, r5
 800497e:	10a4      	asrs	r4, r4, #2
 8004980:	42a6      	cmp	r6, r4
 8004982:	d109      	bne.n	8004998 <__libc_init_array+0x24>
 8004984:	2600      	movs	r6, #0
 8004986:	f000 f821 	bl	80049cc <_init>
 800498a:	4d0a      	ldr	r5, [pc, #40]	; (80049b4 <__libc_init_array+0x40>)
 800498c:	4c0a      	ldr	r4, [pc, #40]	; (80049b8 <__libc_init_array+0x44>)
 800498e:	1b64      	subs	r4, r4, r5
 8004990:	10a4      	asrs	r4, r4, #2
 8004992:	42a6      	cmp	r6, r4
 8004994:	d105      	bne.n	80049a2 <__libc_init_array+0x2e>
 8004996:	bd70      	pop	{r4, r5, r6, pc}
 8004998:	00b3      	lsls	r3, r6, #2
 800499a:	58eb      	ldr	r3, [r5, r3]
 800499c:	4798      	blx	r3
 800499e:	3601      	adds	r6, #1
 80049a0:	e7ee      	b.n	8004980 <__libc_init_array+0xc>
 80049a2:	00b3      	lsls	r3, r6, #2
 80049a4:	58eb      	ldr	r3, [r5, r3]
 80049a6:	4798      	blx	r3
 80049a8:	3601      	adds	r6, #1
 80049aa:	e7f2      	b.n	8004992 <__libc_init_array+0x1e>
 80049ac:	08004a1c 	.word	0x08004a1c
 80049b0:	08004a1c 	.word	0x08004a1c
 80049b4:	08004a1c 	.word	0x08004a1c
 80049b8:	08004a20 	.word	0x08004a20

080049bc <memset>:
 80049bc:	0003      	movs	r3, r0
 80049be:	1882      	adds	r2, r0, r2
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d100      	bne.n	80049c6 <memset+0xa>
 80049c4:	4770      	bx	lr
 80049c6:	7019      	strb	r1, [r3, #0]
 80049c8:	3301      	adds	r3, #1
 80049ca:	e7f9      	b.n	80049c0 <memset+0x4>

080049cc <_init>:
 80049cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ce:	46c0      	nop			; (mov r8, r8)
 80049d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d2:	bc08      	pop	{r3}
 80049d4:	469e      	mov	lr, r3
 80049d6:	4770      	bx	lr

080049d8 <_fini>:
 80049d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049de:	bc08      	pop	{r3}
 80049e0:	469e      	mov	lr, r3
 80049e2:	4770      	bx	lr
