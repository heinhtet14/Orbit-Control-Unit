
mcp3208.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b2c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c60  08003c60  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c60  08003c60  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c60  08003c60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c60  08003c60  00013c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c64  08003c64  00013c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000010  08003c74  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08003c74  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c0e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015cb  00000000  00000000  00029c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0002b210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000780  00000000  00000000  0002ba18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f7f  00000000  00000000  0002c198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a311  00000000  00000000  00046117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e81e  00000000  00000000  00050428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eec46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d78  00000000  00000000  000eec9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003bd0 	.word	0x08003bd0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08003bd0 	.word	0x08003bd0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_cdrcmple>:
 800021c:	4684      	mov	ip, r0
 800021e:	1c10      	adds	r0, r2, #0
 8000220:	4662      	mov	r2, ip
 8000222:	468c      	mov	ip, r1
 8000224:	1c19      	adds	r1, r3, #0
 8000226:	4663      	mov	r3, ip
 8000228:	e000      	b.n	800022c <__aeabi_cdcmpeq>
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_cdcmpeq>:
 800022c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022e:	f000 f8e1 	bl	80003f4 <__ledf2>
 8000232:	2800      	cmp	r0, #0
 8000234:	d401      	bmi.n	800023a <__aeabi_cdcmpeq+0xe>
 8000236:	2100      	movs	r1, #0
 8000238:	42c8      	cmn	r0, r1
 800023a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800023c <__aeabi_dcmpeq>:
 800023c:	b510      	push	{r4, lr}
 800023e:	f000 f82b 	bl	8000298 <__eqdf2>
 8000242:	4240      	negs	r0, r0
 8000244:	3001      	adds	r0, #1
 8000246:	bd10      	pop	{r4, pc}

08000248 <__aeabi_dcmplt>:
 8000248:	b510      	push	{r4, lr}
 800024a:	f000 f8d3 	bl	80003f4 <__ledf2>
 800024e:	2800      	cmp	r0, #0
 8000250:	db01      	blt.n	8000256 <__aeabi_dcmplt+0xe>
 8000252:	2000      	movs	r0, #0
 8000254:	bd10      	pop	{r4, pc}
 8000256:	2001      	movs	r0, #1
 8000258:	bd10      	pop	{r4, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_dcmple>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f000 f8c9 	bl	80003f4 <__ledf2>
 8000262:	2800      	cmp	r0, #0
 8000264:	dd01      	ble.n	800026a <__aeabi_dcmple+0xe>
 8000266:	2000      	movs	r0, #0
 8000268:	bd10      	pop	{r4, pc}
 800026a:	2001      	movs	r0, #1
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_dcmpgt>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f000 f84d 	bl	8000310 <__gedf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	dc01      	bgt.n	800027e <__aeabi_dcmpgt+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_dcmpge>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f000 f843 	bl	8000310 <__gedf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	da01      	bge.n	8000292 <__aeabi_dcmpge+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__eqdf2>:
 8000298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029a:	464f      	mov	r7, r9
 800029c:	4646      	mov	r6, r8
 800029e:	46d6      	mov	lr, sl
 80002a0:	4694      	mov	ip, r2
 80002a2:	4691      	mov	r9, r2
 80002a4:	031a      	lsls	r2, r3, #12
 80002a6:	0b12      	lsrs	r2, r2, #12
 80002a8:	4d18      	ldr	r5, [pc, #96]	; (800030c <__eqdf2+0x74>)
 80002aa:	b5c0      	push	{r6, r7, lr}
 80002ac:	004c      	lsls	r4, r1, #1
 80002ae:	030f      	lsls	r7, r1, #12
 80002b0:	4692      	mov	sl, r2
 80002b2:	005a      	lsls	r2, r3, #1
 80002b4:	0006      	movs	r6, r0
 80002b6:	4680      	mov	r8, r0
 80002b8:	0b3f      	lsrs	r7, r7, #12
 80002ba:	2001      	movs	r0, #1
 80002bc:	0d64      	lsrs	r4, r4, #21
 80002be:	0fc9      	lsrs	r1, r1, #31
 80002c0:	0d52      	lsrs	r2, r2, #21
 80002c2:	0fdb      	lsrs	r3, r3, #31
 80002c4:	42ac      	cmp	r4, r5
 80002c6:	d00a      	beq.n	80002de <__eqdf2+0x46>
 80002c8:	42aa      	cmp	r2, r5
 80002ca:	d003      	beq.n	80002d4 <__eqdf2+0x3c>
 80002cc:	4294      	cmp	r4, r2
 80002ce:	d101      	bne.n	80002d4 <__eqdf2+0x3c>
 80002d0:	4557      	cmp	r7, sl
 80002d2:	d00d      	beq.n	80002f0 <__eqdf2+0x58>
 80002d4:	bce0      	pop	{r5, r6, r7}
 80002d6:	46ba      	mov	sl, r7
 80002d8:	46b1      	mov	r9, r6
 80002da:	46a8      	mov	r8, r5
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	003d      	movs	r5, r7
 80002e0:	4335      	orrs	r5, r6
 80002e2:	d1f7      	bne.n	80002d4 <__eqdf2+0x3c>
 80002e4:	42a2      	cmp	r2, r4
 80002e6:	d1f5      	bne.n	80002d4 <__eqdf2+0x3c>
 80002e8:	4652      	mov	r2, sl
 80002ea:	4665      	mov	r5, ip
 80002ec:	432a      	orrs	r2, r5
 80002ee:	d1f1      	bne.n	80002d4 <__eqdf2+0x3c>
 80002f0:	2001      	movs	r0, #1
 80002f2:	45c8      	cmp	r8, r9
 80002f4:	d1ee      	bne.n	80002d4 <__eqdf2+0x3c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	d006      	beq.n	8000308 <__eqdf2+0x70>
 80002fa:	2c00      	cmp	r4, #0
 80002fc:	d1ea      	bne.n	80002d4 <__eqdf2+0x3c>
 80002fe:	433e      	orrs	r6, r7
 8000300:	0030      	movs	r0, r6
 8000302:	1e46      	subs	r6, r0, #1
 8000304:	41b0      	sbcs	r0, r6
 8000306:	e7e5      	b.n	80002d4 <__eqdf2+0x3c>
 8000308:	2000      	movs	r0, #0
 800030a:	e7e3      	b.n	80002d4 <__eqdf2+0x3c>
 800030c:	000007ff 	.word	0x000007ff

08000310 <__gedf2>:
 8000310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000312:	464e      	mov	r6, r9
 8000314:	4645      	mov	r5, r8
 8000316:	4657      	mov	r7, sl
 8000318:	46de      	mov	lr, fp
 800031a:	0004      	movs	r4, r0
 800031c:	0018      	movs	r0, r3
 800031e:	b5e0      	push	{r5, r6, r7, lr}
 8000320:	0016      	movs	r6, r2
 8000322:	031b      	lsls	r3, r3, #12
 8000324:	0b1b      	lsrs	r3, r3, #12
 8000326:	4d32      	ldr	r5, [pc, #200]	; (80003f0 <__gedf2+0xe0>)
 8000328:	030f      	lsls	r7, r1, #12
 800032a:	004a      	lsls	r2, r1, #1
 800032c:	4699      	mov	r9, r3
 800032e:	0043      	lsls	r3, r0, #1
 8000330:	46a4      	mov	ip, r4
 8000332:	46b0      	mov	r8, r6
 8000334:	0b3f      	lsrs	r7, r7, #12
 8000336:	0d52      	lsrs	r2, r2, #21
 8000338:	0fc9      	lsrs	r1, r1, #31
 800033a:	0d5b      	lsrs	r3, r3, #21
 800033c:	0fc0      	lsrs	r0, r0, #31
 800033e:	42aa      	cmp	r2, r5
 8000340:	d029      	beq.n	8000396 <__gedf2+0x86>
 8000342:	42ab      	cmp	r3, r5
 8000344:	d018      	beq.n	8000378 <__gedf2+0x68>
 8000346:	2a00      	cmp	r2, #0
 8000348:	d12a      	bne.n	80003a0 <__gedf2+0x90>
 800034a:	433c      	orrs	r4, r7
 800034c:	46a3      	mov	fp, r4
 800034e:	4265      	negs	r5, r4
 8000350:	4165      	adcs	r5, r4
 8000352:	2b00      	cmp	r3, #0
 8000354:	d102      	bne.n	800035c <__gedf2+0x4c>
 8000356:	464c      	mov	r4, r9
 8000358:	4326      	orrs	r6, r4
 800035a:	d027      	beq.n	80003ac <__gedf2+0x9c>
 800035c:	2d00      	cmp	r5, #0
 800035e:	d115      	bne.n	800038c <__gedf2+0x7c>
 8000360:	4281      	cmp	r1, r0
 8000362:	d028      	beq.n	80003b6 <__gedf2+0xa6>
 8000364:	2002      	movs	r0, #2
 8000366:	3901      	subs	r1, #1
 8000368:	4008      	ands	r0, r1
 800036a:	3801      	subs	r0, #1
 800036c:	bcf0      	pop	{r4, r5, r6, r7}
 800036e:	46bb      	mov	fp, r7
 8000370:	46b2      	mov	sl, r6
 8000372:	46a9      	mov	r9, r5
 8000374:	46a0      	mov	r8, r4
 8000376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000378:	464d      	mov	r5, r9
 800037a:	432e      	orrs	r6, r5
 800037c:	d12f      	bne.n	80003de <__gedf2+0xce>
 800037e:	2a00      	cmp	r2, #0
 8000380:	d1ee      	bne.n	8000360 <__gedf2+0x50>
 8000382:	433c      	orrs	r4, r7
 8000384:	4265      	negs	r5, r4
 8000386:	4165      	adcs	r5, r4
 8000388:	2d00      	cmp	r5, #0
 800038a:	d0e9      	beq.n	8000360 <__gedf2+0x50>
 800038c:	2800      	cmp	r0, #0
 800038e:	d1ed      	bne.n	800036c <__gedf2+0x5c>
 8000390:	2001      	movs	r0, #1
 8000392:	4240      	negs	r0, r0
 8000394:	e7ea      	b.n	800036c <__gedf2+0x5c>
 8000396:	003d      	movs	r5, r7
 8000398:	4325      	orrs	r5, r4
 800039a:	d120      	bne.n	80003de <__gedf2+0xce>
 800039c:	4293      	cmp	r3, r2
 800039e:	d0eb      	beq.n	8000378 <__gedf2+0x68>
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1dd      	bne.n	8000360 <__gedf2+0x50>
 80003a4:	464c      	mov	r4, r9
 80003a6:	4326      	orrs	r6, r4
 80003a8:	d1da      	bne.n	8000360 <__gedf2+0x50>
 80003aa:	e7db      	b.n	8000364 <__gedf2+0x54>
 80003ac:	465b      	mov	r3, fp
 80003ae:	2000      	movs	r0, #0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d0db      	beq.n	800036c <__gedf2+0x5c>
 80003b4:	e7d6      	b.n	8000364 <__gedf2+0x54>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	dc0a      	bgt.n	80003d0 <__gedf2+0xc0>
 80003ba:	dbe7      	blt.n	800038c <__gedf2+0x7c>
 80003bc:	454f      	cmp	r7, r9
 80003be:	d8d1      	bhi.n	8000364 <__gedf2+0x54>
 80003c0:	d010      	beq.n	80003e4 <__gedf2+0xd4>
 80003c2:	2000      	movs	r0, #0
 80003c4:	454f      	cmp	r7, r9
 80003c6:	d2d1      	bcs.n	800036c <__gedf2+0x5c>
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d0e1      	beq.n	8000390 <__gedf2+0x80>
 80003cc:	0008      	movs	r0, r1
 80003ce:	e7cd      	b.n	800036c <__gedf2+0x5c>
 80003d0:	4243      	negs	r3, r0
 80003d2:	4158      	adcs	r0, r3
 80003d4:	2302      	movs	r3, #2
 80003d6:	4240      	negs	r0, r0
 80003d8:	4018      	ands	r0, r3
 80003da:	3801      	subs	r0, #1
 80003dc:	e7c6      	b.n	800036c <__gedf2+0x5c>
 80003de:	2002      	movs	r0, #2
 80003e0:	4240      	negs	r0, r0
 80003e2:	e7c3      	b.n	800036c <__gedf2+0x5c>
 80003e4:	45c4      	cmp	ip, r8
 80003e6:	d8bd      	bhi.n	8000364 <__gedf2+0x54>
 80003e8:	2000      	movs	r0, #0
 80003ea:	45c4      	cmp	ip, r8
 80003ec:	d2be      	bcs.n	800036c <__gedf2+0x5c>
 80003ee:	e7eb      	b.n	80003c8 <__gedf2+0xb8>
 80003f0:	000007ff 	.word	0x000007ff

080003f4 <__ledf2>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	464e      	mov	r6, r9
 80003f8:	4645      	mov	r5, r8
 80003fa:	4657      	mov	r7, sl
 80003fc:	46de      	mov	lr, fp
 80003fe:	0004      	movs	r4, r0
 8000400:	0018      	movs	r0, r3
 8000402:	b5e0      	push	{r5, r6, r7, lr}
 8000404:	0016      	movs	r6, r2
 8000406:	031b      	lsls	r3, r3, #12
 8000408:	0b1b      	lsrs	r3, r3, #12
 800040a:	4d31      	ldr	r5, [pc, #196]	; (80004d0 <__ledf2+0xdc>)
 800040c:	030f      	lsls	r7, r1, #12
 800040e:	004a      	lsls	r2, r1, #1
 8000410:	4699      	mov	r9, r3
 8000412:	0043      	lsls	r3, r0, #1
 8000414:	46a4      	mov	ip, r4
 8000416:	46b0      	mov	r8, r6
 8000418:	0b3f      	lsrs	r7, r7, #12
 800041a:	0d52      	lsrs	r2, r2, #21
 800041c:	0fc9      	lsrs	r1, r1, #31
 800041e:	0d5b      	lsrs	r3, r3, #21
 8000420:	0fc0      	lsrs	r0, r0, #31
 8000422:	42aa      	cmp	r2, r5
 8000424:	d011      	beq.n	800044a <__ledf2+0x56>
 8000426:	42ab      	cmp	r3, r5
 8000428:	d014      	beq.n	8000454 <__ledf2+0x60>
 800042a:	2a00      	cmp	r2, #0
 800042c:	d12f      	bne.n	800048e <__ledf2+0x9a>
 800042e:	433c      	orrs	r4, r7
 8000430:	46a3      	mov	fp, r4
 8000432:	4265      	negs	r5, r4
 8000434:	4165      	adcs	r5, r4
 8000436:	2b00      	cmp	r3, #0
 8000438:	d114      	bne.n	8000464 <__ledf2+0x70>
 800043a:	464c      	mov	r4, r9
 800043c:	4326      	orrs	r6, r4
 800043e:	d111      	bne.n	8000464 <__ledf2+0x70>
 8000440:	465b      	mov	r3, fp
 8000442:	2000      	movs	r0, #0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d017      	beq.n	8000478 <__ledf2+0x84>
 8000448:	e010      	b.n	800046c <__ledf2+0x78>
 800044a:	003d      	movs	r5, r7
 800044c:	4325      	orrs	r5, r4
 800044e:	d112      	bne.n	8000476 <__ledf2+0x82>
 8000450:	4293      	cmp	r3, r2
 8000452:	d11c      	bne.n	800048e <__ledf2+0x9a>
 8000454:	464d      	mov	r5, r9
 8000456:	432e      	orrs	r6, r5
 8000458:	d10d      	bne.n	8000476 <__ledf2+0x82>
 800045a:	2a00      	cmp	r2, #0
 800045c:	d104      	bne.n	8000468 <__ledf2+0x74>
 800045e:	433c      	orrs	r4, r7
 8000460:	4265      	negs	r5, r4
 8000462:	4165      	adcs	r5, r4
 8000464:	2d00      	cmp	r5, #0
 8000466:	d10d      	bne.n	8000484 <__ledf2+0x90>
 8000468:	4281      	cmp	r1, r0
 800046a:	d016      	beq.n	800049a <__ledf2+0xa6>
 800046c:	2002      	movs	r0, #2
 800046e:	3901      	subs	r1, #1
 8000470:	4008      	ands	r0, r1
 8000472:	3801      	subs	r0, #1
 8000474:	e000      	b.n	8000478 <__ledf2+0x84>
 8000476:	2002      	movs	r0, #2
 8000478:	bcf0      	pop	{r4, r5, r6, r7}
 800047a:	46bb      	mov	fp, r7
 800047c:	46b2      	mov	sl, r6
 800047e:	46a9      	mov	r9, r5
 8000480:	46a0      	mov	r8, r4
 8000482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000484:	2800      	cmp	r0, #0
 8000486:	d1f7      	bne.n	8000478 <__ledf2+0x84>
 8000488:	2001      	movs	r0, #1
 800048a:	4240      	negs	r0, r0
 800048c:	e7f4      	b.n	8000478 <__ledf2+0x84>
 800048e:	2b00      	cmp	r3, #0
 8000490:	d1ea      	bne.n	8000468 <__ledf2+0x74>
 8000492:	464c      	mov	r4, r9
 8000494:	4326      	orrs	r6, r4
 8000496:	d1e7      	bne.n	8000468 <__ledf2+0x74>
 8000498:	e7e8      	b.n	800046c <__ledf2+0x78>
 800049a:	429a      	cmp	r2, r3
 800049c:	dd06      	ble.n	80004ac <__ledf2+0xb8>
 800049e:	4243      	negs	r3, r0
 80004a0:	4158      	adcs	r0, r3
 80004a2:	2302      	movs	r3, #2
 80004a4:	4240      	negs	r0, r0
 80004a6:	4018      	ands	r0, r3
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7e5      	b.n	8000478 <__ledf2+0x84>
 80004ac:	429a      	cmp	r2, r3
 80004ae:	dbe9      	blt.n	8000484 <__ledf2+0x90>
 80004b0:	454f      	cmp	r7, r9
 80004b2:	d8db      	bhi.n	800046c <__ledf2+0x78>
 80004b4:	d006      	beq.n	80004c4 <__ledf2+0xd0>
 80004b6:	2000      	movs	r0, #0
 80004b8:	454f      	cmp	r7, r9
 80004ba:	d2dd      	bcs.n	8000478 <__ledf2+0x84>
 80004bc:	2900      	cmp	r1, #0
 80004be:	d0e3      	beq.n	8000488 <__ledf2+0x94>
 80004c0:	0008      	movs	r0, r1
 80004c2:	e7d9      	b.n	8000478 <__ledf2+0x84>
 80004c4:	45c4      	cmp	ip, r8
 80004c6:	d8d1      	bhi.n	800046c <__ledf2+0x78>
 80004c8:	2000      	movs	r0, #0
 80004ca:	45c4      	cmp	ip, r8
 80004cc:	d2d4      	bcs.n	8000478 <__ledf2+0x84>
 80004ce:	e7f5      	b.n	80004bc <__ledf2+0xc8>
 80004d0:	000007ff 	.word	0x000007ff

080004d4 <__aeabi_dmul>:
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	4657      	mov	r7, sl
 80004d8:	464e      	mov	r6, r9
 80004da:	4645      	mov	r5, r8
 80004dc:	46de      	mov	lr, fp
 80004de:	b5e0      	push	{r5, r6, r7, lr}
 80004e0:	4698      	mov	r8, r3
 80004e2:	030c      	lsls	r4, r1, #12
 80004e4:	004b      	lsls	r3, r1, #1
 80004e6:	0006      	movs	r6, r0
 80004e8:	4692      	mov	sl, r2
 80004ea:	b087      	sub	sp, #28
 80004ec:	0b24      	lsrs	r4, r4, #12
 80004ee:	0d5b      	lsrs	r3, r3, #21
 80004f0:	0fcf      	lsrs	r7, r1, #31
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d06c      	beq.n	80005d0 <__aeabi_dmul+0xfc>
 80004f6:	4add      	ldr	r2, [pc, #884]	; (800086c <__aeabi_dmul+0x398>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d100      	bne.n	80004fe <__aeabi_dmul+0x2a>
 80004fc:	e086      	b.n	800060c <__aeabi_dmul+0x138>
 80004fe:	0f42      	lsrs	r2, r0, #29
 8000500:	00e4      	lsls	r4, r4, #3
 8000502:	4314      	orrs	r4, r2
 8000504:	2280      	movs	r2, #128	; 0x80
 8000506:	0412      	lsls	r2, r2, #16
 8000508:	4314      	orrs	r4, r2
 800050a:	4ad9      	ldr	r2, [pc, #868]	; (8000870 <__aeabi_dmul+0x39c>)
 800050c:	00c5      	lsls	r5, r0, #3
 800050e:	4694      	mov	ip, r2
 8000510:	4463      	add	r3, ip
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2300      	movs	r3, #0
 8000516:	4699      	mov	r9, r3
 8000518:	469b      	mov	fp, r3
 800051a:	4643      	mov	r3, r8
 800051c:	4642      	mov	r2, r8
 800051e:	031e      	lsls	r6, r3, #12
 8000520:	0fd2      	lsrs	r2, r2, #31
 8000522:	005b      	lsls	r3, r3, #1
 8000524:	4650      	mov	r0, sl
 8000526:	4690      	mov	r8, r2
 8000528:	0b36      	lsrs	r6, r6, #12
 800052a:	0d5b      	lsrs	r3, r3, #21
 800052c:	d100      	bne.n	8000530 <__aeabi_dmul+0x5c>
 800052e:	e078      	b.n	8000622 <__aeabi_dmul+0x14e>
 8000530:	4ace      	ldr	r2, [pc, #824]	; (800086c <__aeabi_dmul+0x398>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d01d      	beq.n	8000572 <__aeabi_dmul+0x9e>
 8000536:	49ce      	ldr	r1, [pc, #824]	; (8000870 <__aeabi_dmul+0x39c>)
 8000538:	0f42      	lsrs	r2, r0, #29
 800053a:	468c      	mov	ip, r1
 800053c:	9900      	ldr	r1, [sp, #0]
 800053e:	4463      	add	r3, ip
 8000540:	00f6      	lsls	r6, r6, #3
 8000542:	468c      	mov	ip, r1
 8000544:	4316      	orrs	r6, r2
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	449c      	add	ip, r3
 800054a:	0412      	lsls	r2, r2, #16
 800054c:	4663      	mov	r3, ip
 800054e:	4316      	orrs	r6, r2
 8000550:	00c2      	lsls	r2, r0, #3
 8000552:	2000      	movs	r0, #0
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	9900      	ldr	r1, [sp, #0]
 8000558:	4643      	mov	r3, r8
 800055a:	3101      	adds	r1, #1
 800055c:	468c      	mov	ip, r1
 800055e:	4649      	mov	r1, r9
 8000560:	407b      	eors	r3, r7
 8000562:	9301      	str	r3, [sp, #4]
 8000564:	290f      	cmp	r1, #15
 8000566:	d900      	bls.n	800056a <__aeabi_dmul+0x96>
 8000568:	e07e      	b.n	8000668 <__aeabi_dmul+0x194>
 800056a:	4bc2      	ldr	r3, [pc, #776]	; (8000874 <__aeabi_dmul+0x3a0>)
 800056c:	0089      	lsls	r1, r1, #2
 800056e:	5859      	ldr	r1, [r3, r1]
 8000570:	468f      	mov	pc, r1
 8000572:	4652      	mov	r2, sl
 8000574:	9b00      	ldr	r3, [sp, #0]
 8000576:	4332      	orrs	r2, r6
 8000578:	d000      	beq.n	800057c <__aeabi_dmul+0xa8>
 800057a:	e156      	b.n	800082a <__aeabi_dmul+0x356>
 800057c:	49bb      	ldr	r1, [pc, #748]	; (800086c <__aeabi_dmul+0x398>)
 800057e:	2600      	movs	r6, #0
 8000580:	468c      	mov	ip, r1
 8000582:	4463      	add	r3, ip
 8000584:	4649      	mov	r1, r9
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2302      	movs	r3, #2
 800058a:	4319      	orrs	r1, r3
 800058c:	4689      	mov	r9, r1
 800058e:	2002      	movs	r0, #2
 8000590:	e7e1      	b.n	8000556 <__aeabi_dmul+0x82>
 8000592:	4643      	mov	r3, r8
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	0034      	movs	r4, r6
 8000598:	0015      	movs	r5, r2
 800059a:	4683      	mov	fp, r0
 800059c:	465b      	mov	r3, fp
 800059e:	2b02      	cmp	r3, #2
 80005a0:	d05e      	beq.n	8000660 <__aeabi_dmul+0x18c>
 80005a2:	2b03      	cmp	r3, #3
 80005a4:	d100      	bne.n	80005a8 <__aeabi_dmul+0xd4>
 80005a6:	e1f3      	b.n	8000990 <__aeabi_dmul+0x4bc>
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d000      	beq.n	80005ae <__aeabi_dmul+0xda>
 80005ac:	e118      	b.n	80007e0 <__aeabi_dmul+0x30c>
 80005ae:	2200      	movs	r2, #0
 80005b0:	2400      	movs	r4, #0
 80005b2:	2500      	movs	r5, #0
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	0512      	lsls	r2, r2, #20
 80005b8:	4322      	orrs	r2, r4
 80005ba:	07db      	lsls	r3, r3, #31
 80005bc:	431a      	orrs	r2, r3
 80005be:	0028      	movs	r0, r5
 80005c0:	0011      	movs	r1, r2
 80005c2:	b007      	add	sp, #28
 80005c4:	bcf0      	pop	{r4, r5, r6, r7}
 80005c6:	46bb      	mov	fp, r7
 80005c8:	46b2      	mov	sl, r6
 80005ca:	46a9      	mov	r9, r5
 80005cc:	46a0      	mov	r8, r4
 80005ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d0:	0025      	movs	r5, r4
 80005d2:	4305      	orrs	r5, r0
 80005d4:	d100      	bne.n	80005d8 <__aeabi_dmul+0x104>
 80005d6:	e141      	b.n	800085c <__aeabi_dmul+0x388>
 80005d8:	2c00      	cmp	r4, #0
 80005da:	d100      	bne.n	80005de <__aeabi_dmul+0x10a>
 80005dc:	e1ad      	b.n	800093a <__aeabi_dmul+0x466>
 80005de:	0020      	movs	r0, r4
 80005e0:	f000 fe76 	bl	80012d0 <__clzsi2>
 80005e4:	0001      	movs	r1, r0
 80005e6:	0002      	movs	r2, r0
 80005e8:	390b      	subs	r1, #11
 80005ea:	231d      	movs	r3, #29
 80005ec:	0010      	movs	r0, r2
 80005ee:	1a5b      	subs	r3, r3, r1
 80005f0:	0031      	movs	r1, r6
 80005f2:	0035      	movs	r5, r6
 80005f4:	3808      	subs	r0, #8
 80005f6:	4084      	lsls	r4, r0
 80005f8:	40d9      	lsrs	r1, r3
 80005fa:	4085      	lsls	r5, r0
 80005fc:	430c      	orrs	r4, r1
 80005fe:	489e      	ldr	r0, [pc, #632]	; (8000878 <__aeabi_dmul+0x3a4>)
 8000600:	1a83      	subs	r3, r0, r2
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2300      	movs	r3, #0
 8000606:	4699      	mov	r9, r3
 8000608:	469b      	mov	fp, r3
 800060a:	e786      	b.n	800051a <__aeabi_dmul+0x46>
 800060c:	0005      	movs	r5, r0
 800060e:	4325      	orrs	r5, r4
 8000610:	d000      	beq.n	8000614 <__aeabi_dmul+0x140>
 8000612:	e11c      	b.n	800084e <__aeabi_dmul+0x37a>
 8000614:	2208      	movs	r2, #8
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2302      	movs	r3, #2
 800061a:	2400      	movs	r4, #0
 800061c:	4691      	mov	r9, r2
 800061e:	469b      	mov	fp, r3
 8000620:	e77b      	b.n	800051a <__aeabi_dmul+0x46>
 8000622:	4652      	mov	r2, sl
 8000624:	4332      	orrs	r2, r6
 8000626:	d100      	bne.n	800062a <__aeabi_dmul+0x156>
 8000628:	e10a      	b.n	8000840 <__aeabi_dmul+0x36c>
 800062a:	2e00      	cmp	r6, #0
 800062c:	d100      	bne.n	8000630 <__aeabi_dmul+0x15c>
 800062e:	e176      	b.n	800091e <__aeabi_dmul+0x44a>
 8000630:	0030      	movs	r0, r6
 8000632:	f000 fe4d 	bl	80012d0 <__clzsi2>
 8000636:	0002      	movs	r2, r0
 8000638:	3a0b      	subs	r2, #11
 800063a:	231d      	movs	r3, #29
 800063c:	0001      	movs	r1, r0
 800063e:	1a9b      	subs	r3, r3, r2
 8000640:	4652      	mov	r2, sl
 8000642:	3908      	subs	r1, #8
 8000644:	40da      	lsrs	r2, r3
 8000646:	408e      	lsls	r6, r1
 8000648:	4316      	orrs	r6, r2
 800064a:	4652      	mov	r2, sl
 800064c:	408a      	lsls	r2, r1
 800064e:	9b00      	ldr	r3, [sp, #0]
 8000650:	4989      	ldr	r1, [pc, #548]	; (8000878 <__aeabi_dmul+0x3a4>)
 8000652:	1a18      	subs	r0, r3, r0
 8000654:	0003      	movs	r3, r0
 8000656:	468c      	mov	ip, r1
 8000658:	4463      	add	r3, ip
 800065a:	2000      	movs	r0, #0
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	e77a      	b.n	8000556 <__aeabi_dmul+0x82>
 8000660:	2400      	movs	r4, #0
 8000662:	2500      	movs	r5, #0
 8000664:	4a81      	ldr	r2, [pc, #516]	; (800086c <__aeabi_dmul+0x398>)
 8000666:	e7a5      	b.n	80005b4 <__aeabi_dmul+0xe0>
 8000668:	0c2f      	lsrs	r7, r5, #16
 800066a:	042d      	lsls	r5, r5, #16
 800066c:	0c2d      	lsrs	r5, r5, #16
 800066e:	002b      	movs	r3, r5
 8000670:	0c11      	lsrs	r1, r2, #16
 8000672:	0412      	lsls	r2, r2, #16
 8000674:	0c12      	lsrs	r2, r2, #16
 8000676:	4353      	muls	r3, r2
 8000678:	4698      	mov	r8, r3
 800067a:	0013      	movs	r3, r2
 800067c:	0028      	movs	r0, r5
 800067e:	437b      	muls	r3, r7
 8000680:	4699      	mov	r9, r3
 8000682:	4348      	muls	r0, r1
 8000684:	4448      	add	r0, r9
 8000686:	4683      	mov	fp, r0
 8000688:	4640      	mov	r0, r8
 800068a:	000b      	movs	r3, r1
 800068c:	0c00      	lsrs	r0, r0, #16
 800068e:	4682      	mov	sl, r0
 8000690:	4658      	mov	r0, fp
 8000692:	437b      	muls	r3, r7
 8000694:	4450      	add	r0, sl
 8000696:	9302      	str	r3, [sp, #8]
 8000698:	4581      	cmp	r9, r0
 800069a:	d906      	bls.n	80006aa <__aeabi_dmul+0x1d6>
 800069c:	469a      	mov	sl, r3
 800069e:	2380      	movs	r3, #128	; 0x80
 80006a0:	025b      	lsls	r3, r3, #9
 80006a2:	4699      	mov	r9, r3
 80006a4:	44ca      	add	sl, r9
 80006a6:	4653      	mov	r3, sl
 80006a8:	9302      	str	r3, [sp, #8]
 80006aa:	0c03      	lsrs	r3, r0, #16
 80006ac:	469b      	mov	fp, r3
 80006ae:	4643      	mov	r3, r8
 80006b0:	041b      	lsls	r3, r3, #16
 80006b2:	0400      	lsls	r0, r0, #16
 80006b4:	0c1b      	lsrs	r3, r3, #16
 80006b6:	4698      	mov	r8, r3
 80006b8:	0003      	movs	r3, r0
 80006ba:	4443      	add	r3, r8
 80006bc:	9304      	str	r3, [sp, #16]
 80006be:	0c33      	lsrs	r3, r6, #16
 80006c0:	4699      	mov	r9, r3
 80006c2:	002b      	movs	r3, r5
 80006c4:	0436      	lsls	r6, r6, #16
 80006c6:	0c36      	lsrs	r6, r6, #16
 80006c8:	4373      	muls	r3, r6
 80006ca:	4698      	mov	r8, r3
 80006cc:	0033      	movs	r3, r6
 80006ce:	437b      	muls	r3, r7
 80006d0:	469a      	mov	sl, r3
 80006d2:	464b      	mov	r3, r9
 80006d4:	435d      	muls	r5, r3
 80006d6:	435f      	muls	r7, r3
 80006d8:	4643      	mov	r3, r8
 80006da:	4455      	add	r5, sl
 80006dc:	0c18      	lsrs	r0, r3, #16
 80006de:	1940      	adds	r0, r0, r5
 80006e0:	4582      	cmp	sl, r0
 80006e2:	d903      	bls.n	80006ec <__aeabi_dmul+0x218>
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	025b      	lsls	r3, r3, #9
 80006e8:	469a      	mov	sl, r3
 80006ea:	4457      	add	r7, sl
 80006ec:	0c05      	lsrs	r5, r0, #16
 80006ee:	19eb      	adds	r3, r5, r7
 80006f0:	9305      	str	r3, [sp, #20]
 80006f2:	4643      	mov	r3, r8
 80006f4:	041d      	lsls	r5, r3, #16
 80006f6:	0c2d      	lsrs	r5, r5, #16
 80006f8:	0400      	lsls	r0, r0, #16
 80006fa:	1940      	adds	r0, r0, r5
 80006fc:	0c25      	lsrs	r5, r4, #16
 80006fe:	0424      	lsls	r4, r4, #16
 8000700:	0c24      	lsrs	r4, r4, #16
 8000702:	0027      	movs	r7, r4
 8000704:	4357      	muls	r7, r2
 8000706:	436a      	muls	r2, r5
 8000708:	4690      	mov	r8, r2
 800070a:	002a      	movs	r2, r5
 800070c:	0c3b      	lsrs	r3, r7, #16
 800070e:	469a      	mov	sl, r3
 8000710:	434a      	muls	r2, r1
 8000712:	4361      	muls	r1, r4
 8000714:	4441      	add	r1, r8
 8000716:	4451      	add	r1, sl
 8000718:	4483      	add	fp, r0
 800071a:	4588      	cmp	r8, r1
 800071c:	d903      	bls.n	8000726 <__aeabi_dmul+0x252>
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	025b      	lsls	r3, r3, #9
 8000722:	4698      	mov	r8, r3
 8000724:	4442      	add	r2, r8
 8000726:	043f      	lsls	r7, r7, #16
 8000728:	0c0b      	lsrs	r3, r1, #16
 800072a:	0c3f      	lsrs	r7, r7, #16
 800072c:	0409      	lsls	r1, r1, #16
 800072e:	19c9      	adds	r1, r1, r7
 8000730:	0027      	movs	r7, r4
 8000732:	4698      	mov	r8, r3
 8000734:	464b      	mov	r3, r9
 8000736:	4377      	muls	r7, r6
 8000738:	435c      	muls	r4, r3
 800073a:	436e      	muls	r6, r5
 800073c:	435d      	muls	r5, r3
 800073e:	0c3b      	lsrs	r3, r7, #16
 8000740:	4699      	mov	r9, r3
 8000742:	19a4      	adds	r4, r4, r6
 8000744:	444c      	add	r4, r9
 8000746:	4442      	add	r2, r8
 8000748:	9503      	str	r5, [sp, #12]
 800074a:	42a6      	cmp	r6, r4
 800074c:	d904      	bls.n	8000758 <__aeabi_dmul+0x284>
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	025b      	lsls	r3, r3, #9
 8000752:	4698      	mov	r8, r3
 8000754:	4445      	add	r5, r8
 8000756:	9503      	str	r5, [sp, #12]
 8000758:	9b02      	ldr	r3, [sp, #8]
 800075a:	043f      	lsls	r7, r7, #16
 800075c:	445b      	add	r3, fp
 800075e:	001e      	movs	r6, r3
 8000760:	4283      	cmp	r3, r0
 8000762:	4180      	sbcs	r0, r0
 8000764:	0423      	lsls	r3, r4, #16
 8000766:	4698      	mov	r8, r3
 8000768:	9b05      	ldr	r3, [sp, #20]
 800076a:	0c3f      	lsrs	r7, r7, #16
 800076c:	4447      	add	r7, r8
 800076e:	4698      	mov	r8, r3
 8000770:	1876      	adds	r6, r6, r1
 8000772:	428e      	cmp	r6, r1
 8000774:	4189      	sbcs	r1, r1
 8000776:	4447      	add	r7, r8
 8000778:	4240      	negs	r0, r0
 800077a:	183d      	adds	r5, r7, r0
 800077c:	46a8      	mov	r8, r5
 800077e:	4693      	mov	fp, r2
 8000780:	4249      	negs	r1, r1
 8000782:	468a      	mov	sl, r1
 8000784:	44c3      	add	fp, r8
 8000786:	429f      	cmp	r7, r3
 8000788:	41bf      	sbcs	r7, r7
 800078a:	4580      	cmp	r8, r0
 800078c:	4180      	sbcs	r0, r0
 800078e:	9b03      	ldr	r3, [sp, #12]
 8000790:	44da      	add	sl, fp
 8000792:	4698      	mov	r8, r3
 8000794:	4653      	mov	r3, sl
 8000796:	4240      	negs	r0, r0
 8000798:	427f      	negs	r7, r7
 800079a:	4307      	orrs	r7, r0
 800079c:	0c24      	lsrs	r4, r4, #16
 800079e:	4593      	cmp	fp, r2
 80007a0:	4192      	sbcs	r2, r2
 80007a2:	458a      	cmp	sl, r1
 80007a4:	4189      	sbcs	r1, r1
 80007a6:	193f      	adds	r7, r7, r4
 80007a8:	0ddc      	lsrs	r4, r3, #23
 80007aa:	9b04      	ldr	r3, [sp, #16]
 80007ac:	0275      	lsls	r5, r6, #9
 80007ae:	431d      	orrs	r5, r3
 80007b0:	1e68      	subs	r0, r5, #1
 80007b2:	4185      	sbcs	r5, r0
 80007b4:	4653      	mov	r3, sl
 80007b6:	4252      	negs	r2, r2
 80007b8:	4249      	negs	r1, r1
 80007ba:	430a      	orrs	r2, r1
 80007bc:	18bf      	adds	r7, r7, r2
 80007be:	4447      	add	r7, r8
 80007c0:	0df6      	lsrs	r6, r6, #23
 80007c2:	027f      	lsls	r7, r7, #9
 80007c4:	4335      	orrs	r5, r6
 80007c6:	025a      	lsls	r2, r3, #9
 80007c8:	433c      	orrs	r4, r7
 80007ca:	4315      	orrs	r5, r2
 80007cc:	01fb      	lsls	r3, r7, #7
 80007ce:	d400      	bmi.n	80007d2 <__aeabi_dmul+0x2fe>
 80007d0:	e0c1      	b.n	8000956 <__aeabi_dmul+0x482>
 80007d2:	2101      	movs	r1, #1
 80007d4:	086a      	lsrs	r2, r5, #1
 80007d6:	400d      	ands	r5, r1
 80007d8:	4315      	orrs	r5, r2
 80007da:	07e2      	lsls	r2, r4, #31
 80007dc:	4315      	orrs	r5, r2
 80007de:	0864      	lsrs	r4, r4, #1
 80007e0:	4926      	ldr	r1, [pc, #152]	; (800087c <__aeabi_dmul+0x3a8>)
 80007e2:	4461      	add	r1, ip
 80007e4:	2900      	cmp	r1, #0
 80007e6:	dd56      	ble.n	8000896 <__aeabi_dmul+0x3c2>
 80007e8:	076b      	lsls	r3, r5, #29
 80007ea:	d009      	beq.n	8000800 <__aeabi_dmul+0x32c>
 80007ec:	220f      	movs	r2, #15
 80007ee:	402a      	ands	r2, r5
 80007f0:	2a04      	cmp	r2, #4
 80007f2:	d005      	beq.n	8000800 <__aeabi_dmul+0x32c>
 80007f4:	1d2a      	adds	r2, r5, #4
 80007f6:	42aa      	cmp	r2, r5
 80007f8:	41ad      	sbcs	r5, r5
 80007fa:	426d      	negs	r5, r5
 80007fc:	1964      	adds	r4, r4, r5
 80007fe:	0015      	movs	r5, r2
 8000800:	01e3      	lsls	r3, r4, #7
 8000802:	d504      	bpl.n	800080e <__aeabi_dmul+0x33a>
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	4a1e      	ldr	r2, [pc, #120]	; (8000880 <__aeabi_dmul+0x3ac>)
 8000808:	00c9      	lsls	r1, r1, #3
 800080a:	4014      	ands	r4, r2
 800080c:	4461      	add	r1, ip
 800080e:	4a1d      	ldr	r2, [pc, #116]	; (8000884 <__aeabi_dmul+0x3b0>)
 8000810:	4291      	cmp	r1, r2
 8000812:	dd00      	ble.n	8000816 <__aeabi_dmul+0x342>
 8000814:	e724      	b.n	8000660 <__aeabi_dmul+0x18c>
 8000816:	0762      	lsls	r2, r4, #29
 8000818:	08ed      	lsrs	r5, r5, #3
 800081a:	0264      	lsls	r4, r4, #9
 800081c:	0549      	lsls	r1, r1, #21
 800081e:	4315      	orrs	r5, r2
 8000820:	0b24      	lsrs	r4, r4, #12
 8000822:	0d4a      	lsrs	r2, r1, #21
 8000824:	e6c6      	b.n	80005b4 <__aeabi_dmul+0xe0>
 8000826:	9701      	str	r7, [sp, #4]
 8000828:	e6b8      	b.n	800059c <__aeabi_dmul+0xc8>
 800082a:	4a10      	ldr	r2, [pc, #64]	; (800086c <__aeabi_dmul+0x398>)
 800082c:	2003      	movs	r0, #3
 800082e:	4694      	mov	ip, r2
 8000830:	4463      	add	r3, ip
 8000832:	464a      	mov	r2, r9
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2303      	movs	r3, #3
 8000838:	431a      	orrs	r2, r3
 800083a:	4691      	mov	r9, r2
 800083c:	4652      	mov	r2, sl
 800083e:	e68a      	b.n	8000556 <__aeabi_dmul+0x82>
 8000840:	4649      	mov	r1, r9
 8000842:	2301      	movs	r3, #1
 8000844:	4319      	orrs	r1, r3
 8000846:	4689      	mov	r9, r1
 8000848:	2600      	movs	r6, #0
 800084a:	2001      	movs	r0, #1
 800084c:	e683      	b.n	8000556 <__aeabi_dmul+0x82>
 800084e:	220c      	movs	r2, #12
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	2303      	movs	r3, #3
 8000854:	0005      	movs	r5, r0
 8000856:	4691      	mov	r9, r2
 8000858:	469b      	mov	fp, r3
 800085a:	e65e      	b.n	800051a <__aeabi_dmul+0x46>
 800085c:	2304      	movs	r3, #4
 800085e:	4699      	mov	r9, r3
 8000860:	2300      	movs	r3, #0
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	3301      	adds	r3, #1
 8000866:	2400      	movs	r4, #0
 8000868:	469b      	mov	fp, r3
 800086a:	e656      	b.n	800051a <__aeabi_dmul+0x46>
 800086c:	000007ff 	.word	0x000007ff
 8000870:	fffffc01 	.word	0xfffffc01
 8000874:	08003c08 	.word	0x08003c08
 8000878:	fffffc0d 	.word	0xfffffc0d
 800087c:	000003ff 	.word	0x000003ff
 8000880:	feffffff 	.word	0xfeffffff
 8000884:	000007fe 	.word	0x000007fe
 8000888:	2300      	movs	r3, #0
 800088a:	2480      	movs	r4, #128	; 0x80
 800088c:	2500      	movs	r5, #0
 800088e:	4a44      	ldr	r2, [pc, #272]	; (80009a0 <__aeabi_dmul+0x4cc>)
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	0324      	lsls	r4, r4, #12
 8000894:	e68e      	b.n	80005b4 <__aeabi_dmul+0xe0>
 8000896:	2001      	movs	r0, #1
 8000898:	1a40      	subs	r0, r0, r1
 800089a:	2838      	cmp	r0, #56	; 0x38
 800089c:	dd00      	ble.n	80008a0 <__aeabi_dmul+0x3cc>
 800089e:	e686      	b.n	80005ae <__aeabi_dmul+0xda>
 80008a0:	281f      	cmp	r0, #31
 80008a2:	dd5b      	ble.n	800095c <__aeabi_dmul+0x488>
 80008a4:	221f      	movs	r2, #31
 80008a6:	0023      	movs	r3, r4
 80008a8:	4252      	negs	r2, r2
 80008aa:	1a51      	subs	r1, r2, r1
 80008ac:	40cb      	lsrs	r3, r1
 80008ae:	0019      	movs	r1, r3
 80008b0:	2820      	cmp	r0, #32
 80008b2:	d003      	beq.n	80008bc <__aeabi_dmul+0x3e8>
 80008b4:	4a3b      	ldr	r2, [pc, #236]	; (80009a4 <__aeabi_dmul+0x4d0>)
 80008b6:	4462      	add	r2, ip
 80008b8:	4094      	lsls	r4, r2
 80008ba:	4325      	orrs	r5, r4
 80008bc:	1e6a      	subs	r2, r5, #1
 80008be:	4195      	sbcs	r5, r2
 80008c0:	002a      	movs	r2, r5
 80008c2:	430a      	orrs	r2, r1
 80008c4:	2107      	movs	r1, #7
 80008c6:	000d      	movs	r5, r1
 80008c8:	2400      	movs	r4, #0
 80008ca:	4015      	ands	r5, r2
 80008cc:	4211      	tst	r1, r2
 80008ce:	d05b      	beq.n	8000988 <__aeabi_dmul+0x4b4>
 80008d0:	210f      	movs	r1, #15
 80008d2:	2400      	movs	r4, #0
 80008d4:	4011      	ands	r1, r2
 80008d6:	2904      	cmp	r1, #4
 80008d8:	d053      	beq.n	8000982 <__aeabi_dmul+0x4ae>
 80008da:	1d11      	adds	r1, r2, #4
 80008dc:	4291      	cmp	r1, r2
 80008de:	4192      	sbcs	r2, r2
 80008e0:	4252      	negs	r2, r2
 80008e2:	18a4      	adds	r4, r4, r2
 80008e4:	000a      	movs	r2, r1
 80008e6:	0223      	lsls	r3, r4, #8
 80008e8:	d54b      	bpl.n	8000982 <__aeabi_dmul+0x4ae>
 80008ea:	2201      	movs	r2, #1
 80008ec:	2400      	movs	r4, #0
 80008ee:	2500      	movs	r5, #0
 80008f0:	e660      	b.n	80005b4 <__aeabi_dmul+0xe0>
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	031b      	lsls	r3, r3, #12
 80008f6:	421c      	tst	r4, r3
 80008f8:	d009      	beq.n	800090e <__aeabi_dmul+0x43a>
 80008fa:	421e      	tst	r6, r3
 80008fc:	d107      	bne.n	800090e <__aeabi_dmul+0x43a>
 80008fe:	4333      	orrs	r3, r6
 8000900:	031c      	lsls	r4, r3, #12
 8000902:	4643      	mov	r3, r8
 8000904:	0015      	movs	r5, r2
 8000906:	0b24      	lsrs	r4, r4, #12
 8000908:	4a25      	ldr	r2, [pc, #148]	; (80009a0 <__aeabi_dmul+0x4cc>)
 800090a:	9301      	str	r3, [sp, #4]
 800090c:	e652      	b.n	80005b4 <__aeabi_dmul+0xe0>
 800090e:	2280      	movs	r2, #128	; 0x80
 8000910:	0312      	lsls	r2, r2, #12
 8000912:	4314      	orrs	r4, r2
 8000914:	0324      	lsls	r4, r4, #12
 8000916:	4a22      	ldr	r2, [pc, #136]	; (80009a0 <__aeabi_dmul+0x4cc>)
 8000918:	0b24      	lsrs	r4, r4, #12
 800091a:	9701      	str	r7, [sp, #4]
 800091c:	e64a      	b.n	80005b4 <__aeabi_dmul+0xe0>
 800091e:	f000 fcd7 	bl	80012d0 <__clzsi2>
 8000922:	0003      	movs	r3, r0
 8000924:	001a      	movs	r2, r3
 8000926:	3215      	adds	r2, #21
 8000928:	3020      	adds	r0, #32
 800092a:	2a1c      	cmp	r2, #28
 800092c:	dc00      	bgt.n	8000930 <__aeabi_dmul+0x45c>
 800092e:	e684      	b.n	800063a <__aeabi_dmul+0x166>
 8000930:	4656      	mov	r6, sl
 8000932:	3b08      	subs	r3, #8
 8000934:	2200      	movs	r2, #0
 8000936:	409e      	lsls	r6, r3
 8000938:	e689      	b.n	800064e <__aeabi_dmul+0x17a>
 800093a:	f000 fcc9 	bl	80012d0 <__clzsi2>
 800093e:	0001      	movs	r1, r0
 8000940:	0002      	movs	r2, r0
 8000942:	3115      	adds	r1, #21
 8000944:	3220      	adds	r2, #32
 8000946:	291c      	cmp	r1, #28
 8000948:	dc00      	bgt.n	800094c <__aeabi_dmul+0x478>
 800094a:	e64e      	b.n	80005ea <__aeabi_dmul+0x116>
 800094c:	0034      	movs	r4, r6
 800094e:	3808      	subs	r0, #8
 8000950:	2500      	movs	r5, #0
 8000952:	4084      	lsls	r4, r0
 8000954:	e653      	b.n	80005fe <__aeabi_dmul+0x12a>
 8000956:	9b00      	ldr	r3, [sp, #0]
 8000958:	469c      	mov	ip, r3
 800095a:	e741      	b.n	80007e0 <__aeabi_dmul+0x30c>
 800095c:	4912      	ldr	r1, [pc, #72]	; (80009a8 <__aeabi_dmul+0x4d4>)
 800095e:	0022      	movs	r2, r4
 8000960:	4461      	add	r1, ip
 8000962:	002e      	movs	r6, r5
 8000964:	408d      	lsls	r5, r1
 8000966:	408a      	lsls	r2, r1
 8000968:	40c6      	lsrs	r6, r0
 800096a:	1e69      	subs	r1, r5, #1
 800096c:	418d      	sbcs	r5, r1
 800096e:	4332      	orrs	r2, r6
 8000970:	432a      	orrs	r2, r5
 8000972:	40c4      	lsrs	r4, r0
 8000974:	0753      	lsls	r3, r2, #29
 8000976:	d0b6      	beq.n	80008e6 <__aeabi_dmul+0x412>
 8000978:	210f      	movs	r1, #15
 800097a:	4011      	ands	r1, r2
 800097c:	2904      	cmp	r1, #4
 800097e:	d1ac      	bne.n	80008da <__aeabi_dmul+0x406>
 8000980:	e7b1      	b.n	80008e6 <__aeabi_dmul+0x412>
 8000982:	0765      	lsls	r5, r4, #29
 8000984:	0264      	lsls	r4, r4, #9
 8000986:	0b24      	lsrs	r4, r4, #12
 8000988:	08d2      	lsrs	r2, r2, #3
 800098a:	4315      	orrs	r5, r2
 800098c:	2200      	movs	r2, #0
 800098e:	e611      	b.n	80005b4 <__aeabi_dmul+0xe0>
 8000990:	2280      	movs	r2, #128	; 0x80
 8000992:	0312      	lsls	r2, r2, #12
 8000994:	4314      	orrs	r4, r2
 8000996:	0324      	lsls	r4, r4, #12
 8000998:	4a01      	ldr	r2, [pc, #4]	; (80009a0 <__aeabi_dmul+0x4cc>)
 800099a:	0b24      	lsrs	r4, r4, #12
 800099c:	e60a      	b.n	80005b4 <__aeabi_dmul+0xe0>
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	000007ff 	.word	0x000007ff
 80009a4:	0000043e 	.word	0x0000043e
 80009a8:	0000041e 	.word	0x0000041e

080009ac <__aeabi_dsub>:
 80009ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ae:	4657      	mov	r7, sl
 80009b0:	464e      	mov	r6, r9
 80009b2:	4645      	mov	r5, r8
 80009b4:	46de      	mov	lr, fp
 80009b6:	0004      	movs	r4, r0
 80009b8:	b5e0      	push	{r5, r6, r7, lr}
 80009ba:	001f      	movs	r7, r3
 80009bc:	0010      	movs	r0, r2
 80009be:	030b      	lsls	r3, r1, #12
 80009c0:	0f62      	lsrs	r2, r4, #29
 80009c2:	004e      	lsls	r6, r1, #1
 80009c4:	0fcd      	lsrs	r5, r1, #31
 80009c6:	0a5b      	lsrs	r3, r3, #9
 80009c8:	0339      	lsls	r1, r7, #12
 80009ca:	4313      	orrs	r3, r2
 80009cc:	0a49      	lsrs	r1, r1, #9
 80009ce:	00e2      	lsls	r2, r4, #3
 80009d0:	0f44      	lsrs	r4, r0, #29
 80009d2:	4321      	orrs	r1, r4
 80009d4:	4cc2      	ldr	r4, [pc, #776]	; (8000ce0 <__aeabi_dsub+0x334>)
 80009d6:	4691      	mov	r9, r2
 80009d8:	4692      	mov	sl, r2
 80009da:	00c0      	lsls	r0, r0, #3
 80009dc:	007a      	lsls	r2, r7, #1
 80009de:	4680      	mov	r8, r0
 80009e0:	0d76      	lsrs	r6, r6, #21
 80009e2:	0d52      	lsrs	r2, r2, #21
 80009e4:	0fff      	lsrs	r7, r7, #31
 80009e6:	42a2      	cmp	r2, r4
 80009e8:	d100      	bne.n	80009ec <__aeabi_dsub+0x40>
 80009ea:	e0b4      	b.n	8000b56 <__aeabi_dsub+0x1aa>
 80009ec:	2401      	movs	r4, #1
 80009ee:	4067      	eors	r7, r4
 80009f0:	46bb      	mov	fp, r7
 80009f2:	42bd      	cmp	r5, r7
 80009f4:	d100      	bne.n	80009f8 <__aeabi_dsub+0x4c>
 80009f6:	e088      	b.n	8000b0a <__aeabi_dsub+0x15e>
 80009f8:	1ab4      	subs	r4, r6, r2
 80009fa:	46a4      	mov	ip, r4
 80009fc:	2c00      	cmp	r4, #0
 80009fe:	dc00      	bgt.n	8000a02 <__aeabi_dsub+0x56>
 8000a00:	e0b2      	b.n	8000b68 <__aeabi_dsub+0x1bc>
 8000a02:	2a00      	cmp	r2, #0
 8000a04:	d100      	bne.n	8000a08 <__aeabi_dsub+0x5c>
 8000a06:	e0c5      	b.n	8000b94 <__aeabi_dsub+0x1e8>
 8000a08:	4ab5      	ldr	r2, [pc, #724]	; (8000ce0 <__aeabi_dsub+0x334>)
 8000a0a:	4296      	cmp	r6, r2
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_dsub+0x64>
 8000a0e:	e28b      	b.n	8000f28 <__aeabi_dsub+0x57c>
 8000a10:	2280      	movs	r2, #128	; 0x80
 8000a12:	0412      	lsls	r2, r2, #16
 8000a14:	4311      	orrs	r1, r2
 8000a16:	4662      	mov	r2, ip
 8000a18:	2a38      	cmp	r2, #56	; 0x38
 8000a1a:	dd00      	ble.n	8000a1e <__aeabi_dsub+0x72>
 8000a1c:	e1a1      	b.n	8000d62 <__aeabi_dsub+0x3b6>
 8000a1e:	2a1f      	cmp	r2, #31
 8000a20:	dd00      	ble.n	8000a24 <__aeabi_dsub+0x78>
 8000a22:	e216      	b.n	8000e52 <__aeabi_dsub+0x4a6>
 8000a24:	2720      	movs	r7, #32
 8000a26:	000c      	movs	r4, r1
 8000a28:	1abf      	subs	r7, r7, r2
 8000a2a:	40bc      	lsls	r4, r7
 8000a2c:	0002      	movs	r2, r0
 8000a2e:	46a0      	mov	r8, r4
 8000a30:	4664      	mov	r4, ip
 8000a32:	40b8      	lsls	r0, r7
 8000a34:	40e2      	lsrs	r2, r4
 8000a36:	4644      	mov	r4, r8
 8000a38:	4314      	orrs	r4, r2
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	1e50      	subs	r0, r2, #1
 8000a3e:	4182      	sbcs	r2, r0
 8000a40:	4660      	mov	r0, ip
 8000a42:	40c1      	lsrs	r1, r0
 8000a44:	4322      	orrs	r2, r4
 8000a46:	1a5b      	subs	r3, r3, r1
 8000a48:	4649      	mov	r1, r9
 8000a4a:	1a8c      	subs	r4, r1, r2
 8000a4c:	45a1      	cmp	r9, r4
 8000a4e:	4192      	sbcs	r2, r2
 8000a50:	4252      	negs	r2, r2
 8000a52:	1a9b      	subs	r3, r3, r2
 8000a54:	4698      	mov	r8, r3
 8000a56:	4643      	mov	r3, r8
 8000a58:	021b      	lsls	r3, r3, #8
 8000a5a:	d400      	bmi.n	8000a5e <__aeabi_dsub+0xb2>
 8000a5c:	e117      	b.n	8000c8e <__aeabi_dsub+0x2e2>
 8000a5e:	4643      	mov	r3, r8
 8000a60:	025b      	lsls	r3, r3, #9
 8000a62:	0a5b      	lsrs	r3, r3, #9
 8000a64:	4698      	mov	r8, r3
 8000a66:	4643      	mov	r3, r8
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_dsub+0xc2>
 8000a6c:	e16c      	b.n	8000d48 <__aeabi_dsub+0x39c>
 8000a6e:	4640      	mov	r0, r8
 8000a70:	f000 fc2e 	bl	80012d0 <__clzsi2>
 8000a74:	0002      	movs	r2, r0
 8000a76:	3a08      	subs	r2, #8
 8000a78:	2120      	movs	r1, #32
 8000a7a:	0020      	movs	r0, r4
 8000a7c:	4643      	mov	r3, r8
 8000a7e:	1a89      	subs	r1, r1, r2
 8000a80:	4093      	lsls	r3, r2
 8000a82:	40c8      	lsrs	r0, r1
 8000a84:	4094      	lsls	r4, r2
 8000a86:	4303      	orrs	r3, r0
 8000a88:	4296      	cmp	r6, r2
 8000a8a:	dd00      	ble.n	8000a8e <__aeabi_dsub+0xe2>
 8000a8c:	e157      	b.n	8000d3e <__aeabi_dsub+0x392>
 8000a8e:	1b96      	subs	r6, r2, r6
 8000a90:	1c71      	adds	r1, r6, #1
 8000a92:	291f      	cmp	r1, #31
 8000a94:	dd00      	ble.n	8000a98 <__aeabi_dsub+0xec>
 8000a96:	e1cb      	b.n	8000e30 <__aeabi_dsub+0x484>
 8000a98:	2220      	movs	r2, #32
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	0026      	movs	r6, r4
 8000a9e:	1a52      	subs	r2, r2, r1
 8000aa0:	4094      	lsls	r4, r2
 8000aa2:	4090      	lsls	r0, r2
 8000aa4:	40ce      	lsrs	r6, r1
 8000aa6:	40cb      	lsrs	r3, r1
 8000aa8:	1e62      	subs	r2, r4, #1
 8000aaa:	4194      	sbcs	r4, r2
 8000aac:	4330      	orrs	r0, r6
 8000aae:	4698      	mov	r8, r3
 8000ab0:	2600      	movs	r6, #0
 8000ab2:	4304      	orrs	r4, r0
 8000ab4:	0763      	lsls	r3, r4, #29
 8000ab6:	d009      	beq.n	8000acc <__aeabi_dsub+0x120>
 8000ab8:	230f      	movs	r3, #15
 8000aba:	4023      	ands	r3, r4
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	d005      	beq.n	8000acc <__aeabi_dsub+0x120>
 8000ac0:	1d23      	adds	r3, r4, #4
 8000ac2:	42a3      	cmp	r3, r4
 8000ac4:	41a4      	sbcs	r4, r4
 8000ac6:	4264      	negs	r4, r4
 8000ac8:	44a0      	add	r8, r4
 8000aca:	001c      	movs	r4, r3
 8000acc:	4643      	mov	r3, r8
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	d400      	bmi.n	8000ad4 <__aeabi_dsub+0x128>
 8000ad2:	e0df      	b.n	8000c94 <__aeabi_dsub+0x2e8>
 8000ad4:	4b82      	ldr	r3, [pc, #520]	; (8000ce0 <__aeabi_dsub+0x334>)
 8000ad6:	3601      	adds	r6, #1
 8000ad8:	429e      	cmp	r6, r3
 8000ada:	d100      	bne.n	8000ade <__aeabi_dsub+0x132>
 8000adc:	e0fb      	b.n	8000cd6 <__aeabi_dsub+0x32a>
 8000ade:	4642      	mov	r2, r8
 8000ae0:	4b80      	ldr	r3, [pc, #512]	; (8000ce4 <__aeabi_dsub+0x338>)
 8000ae2:	08e4      	lsrs	r4, r4, #3
 8000ae4:	401a      	ands	r2, r3
 8000ae6:	0013      	movs	r3, r2
 8000ae8:	0571      	lsls	r1, r6, #21
 8000aea:	0752      	lsls	r2, r2, #29
 8000aec:	025b      	lsls	r3, r3, #9
 8000aee:	4322      	orrs	r2, r4
 8000af0:	0b1b      	lsrs	r3, r3, #12
 8000af2:	0d49      	lsrs	r1, r1, #21
 8000af4:	0509      	lsls	r1, r1, #20
 8000af6:	07ed      	lsls	r5, r5, #31
 8000af8:	4319      	orrs	r1, r3
 8000afa:	4329      	orrs	r1, r5
 8000afc:	0010      	movs	r0, r2
 8000afe:	bcf0      	pop	{r4, r5, r6, r7}
 8000b00:	46bb      	mov	fp, r7
 8000b02:	46b2      	mov	sl, r6
 8000b04:	46a9      	mov	r9, r5
 8000b06:	46a0      	mov	r8, r4
 8000b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b0a:	1ab4      	subs	r4, r6, r2
 8000b0c:	46a4      	mov	ip, r4
 8000b0e:	2c00      	cmp	r4, #0
 8000b10:	dd58      	ble.n	8000bc4 <__aeabi_dsub+0x218>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	d100      	bne.n	8000b18 <__aeabi_dsub+0x16c>
 8000b16:	e09e      	b.n	8000c56 <__aeabi_dsub+0x2aa>
 8000b18:	4a71      	ldr	r2, [pc, #452]	; (8000ce0 <__aeabi_dsub+0x334>)
 8000b1a:	4296      	cmp	r6, r2
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_dsub+0x174>
 8000b1e:	e13b      	b.n	8000d98 <__aeabi_dsub+0x3ec>
 8000b20:	2280      	movs	r2, #128	; 0x80
 8000b22:	0412      	lsls	r2, r2, #16
 8000b24:	4311      	orrs	r1, r2
 8000b26:	4662      	mov	r2, ip
 8000b28:	2a38      	cmp	r2, #56	; 0x38
 8000b2a:	dd00      	ble.n	8000b2e <__aeabi_dsub+0x182>
 8000b2c:	e0c1      	b.n	8000cb2 <__aeabi_dsub+0x306>
 8000b2e:	2a1f      	cmp	r2, #31
 8000b30:	dc00      	bgt.n	8000b34 <__aeabi_dsub+0x188>
 8000b32:	e1bb      	b.n	8000eac <__aeabi_dsub+0x500>
 8000b34:	000c      	movs	r4, r1
 8000b36:	3a20      	subs	r2, #32
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	0022      	movs	r2, r4
 8000b3c:	4664      	mov	r4, ip
 8000b3e:	2c20      	cmp	r4, #32
 8000b40:	d004      	beq.n	8000b4c <__aeabi_dsub+0x1a0>
 8000b42:	2740      	movs	r7, #64	; 0x40
 8000b44:	1b3f      	subs	r7, r7, r4
 8000b46:	40b9      	lsls	r1, r7
 8000b48:	4308      	orrs	r0, r1
 8000b4a:	4680      	mov	r8, r0
 8000b4c:	4644      	mov	r4, r8
 8000b4e:	1e61      	subs	r1, r4, #1
 8000b50:	418c      	sbcs	r4, r1
 8000b52:	4314      	orrs	r4, r2
 8000b54:	e0b1      	b.n	8000cba <__aeabi_dsub+0x30e>
 8000b56:	000c      	movs	r4, r1
 8000b58:	4304      	orrs	r4, r0
 8000b5a:	d02a      	beq.n	8000bb2 <__aeabi_dsub+0x206>
 8000b5c:	46bb      	mov	fp, r7
 8000b5e:	42bd      	cmp	r5, r7
 8000b60:	d02d      	beq.n	8000bbe <__aeabi_dsub+0x212>
 8000b62:	4c61      	ldr	r4, [pc, #388]	; (8000ce8 <__aeabi_dsub+0x33c>)
 8000b64:	46a4      	mov	ip, r4
 8000b66:	44b4      	add	ip, r6
 8000b68:	4664      	mov	r4, ip
 8000b6a:	2c00      	cmp	r4, #0
 8000b6c:	d05c      	beq.n	8000c28 <__aeabi_dsub+0x27c>
 8000b6e:	1b94      	subs	r4, r2, r6
 8000b70:	46a4      	mov	ip, r4
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d000      	beq.n	8000b78 <__aeabi_dsub+0x1cc>
 8000b76:	e115      	b.n	8000da4 <__aeabi_dsub+0x3f8>
 8000b78:	464d      	mov	r5, r9
 8000b7a:	431d      	orrs	r5, r3
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_dsub+0x1d4>
 8000b7e:	e1c3      	b.n	8000f08 <__aeabi_dsub+0x55c>
 8000b80:	1e65      	subs	r5, r4, #1
 8000b82:	2c01      	cmp	r4, #1
 8000b84:	d100      	bne.n	8000b88 <__aeabi_dsub+0x1dc>
 8000b86:	e20c      	b.n	8000fa2 <__aeabi_dsub+0x5f6>
 8000b88:	4e55      	ldr	r6, [pc, #340]	; (8000ce0 <__aeabi_dsub+0x334>)
 8000b8a:	42b4      	cmp	r4, r6
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_dsub+0x1e4>
 8000b8e:	e1f8      	b.n	8000f82 <__aeabi_dsub+0x5d6>
 8000b90:	46ac      	mov	ip, r5
 8000b92:	e10e      	b.n	8000db2 <__aeabi_dsub+0x406>
 8000b94:	000a      	movs	r2, r1
 8000b96:	4302      	orrs	r2, r0
 8000b98:	d100      	bne.n	8000b9c <__aeabi_dsub+0x1f0>
 8000b9a:	e136      	b.n	8000e0a <__aeabi_dsub+0x45e>
 8000b9c:	0022      	movs	r2, r4
 8000b9e:	3a01      	subs	r2, #1
 8000ba0:	2c01      	cmp	r4, #1
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dsub+0x1fa>
 8000ba4:	e1c6      	b.n	8000f34 <__aeabi_dsub+0x588>
 8000ba6:	4c4e      	ldr	r4, [pc, #312]	; (8000ce0 <__aeabi_dsub+0x334>)
 8000ba8:	45a4      	cmp	ip, r4
 8000baa:	d100      	bne.n	8000bae <__aeabi_dsub+0x202>
 8000bac:	e0f4      	b.n	8000d98 <__aeabi_dsub+0x3ec>
 8000bae:	4694      	mov	ip, r2
 8000bb0:	e731      	b.n	8000a16 <__aeabi_dsub+0x6a>
 8000bb2:	2401      	movs	r4, #1
 8000bb4:	4067      	eors	r7, r4
 8000bb6:	46bb      	mov	fp, r7
 8000bb8:	42bd      	cmp	r5, r7
 8000bba:	d000      	beq.n	8000bbe <__aeabi_dsub+0x212>
 8000bbc:	e71c      	b.n	80009f8 <__aeabi_dsub+0x4c>
 8000bbe:	4c4a      	ldr	r4, [pc, #296]	; (8000ce8 <__aeabi_dsub+0x33c>)
 8000bc0:	46a4      	mov	ip, r4
 8000bc2:	44b4      	add	ip, r6
 8000bc4:	4664      	mov	r4, ip
 8000bc6:	2c00      	cmp	r4, #0
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_dsub+0x220>
 8000bca:	e0cf      	b.n	8000d6c <__aeabi_dsub+0x3c0>
 8000bcc:	1b94      	subs	r4, r2, r6
 8000bce:	46a4      	mov	ip, r4
 8000bd0:	2e00      	cmp	r6, #0
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_dsub+0x22a>
 8000bd4:	e15c      	b.n	8000e90 <__aeabi_dsub+0x4e4>
 8000bd6:	4e42      	ldr	r6, [pc, #264]	; (8000ce0 <__aeabi_dsub+0x334>)
 8000bd8:	42b2      	cmp	r2, r6
 8000bda:	d100      	bne.n	8000bde <__aeabi_dsub+0x232>
 8000bdc:	e1ec      	b.n	8000fb8 <__aeabi_dsub+0x60c>
 8000bde:	2680      	movs	r6, #128	; 0x80
 8000be0:	0436      	lsls	r6, r6, #16
 8000be2:	4333      	orrs	r3, r6
 8000be4:	4664      	mov	r4, ip
 8000be6:	2c38      	cmp	r4, #56	; 0x38
 8000be8:	dd00      	ble.n	8000bec <__aeabi_dsub+0x240>
 8000bea:	e1b3      	b.n	8000f54 <__aeabi_dsub+0x5a8>
 8000bec:	2c1f      	cmp	r4, #31
 8000bee:	dd00      	ble.n	8000bf2 <__aeabi_dsub+0x246>
 8000bf0:	e238      	b.n	8001064 <__aeabi_dsub+0x6b8>
 8000bf2:	2620      	movs	r6, #32
 8000bf4:	1b36      	subs	r6, r6, r4
 8000bf6:	001c      	movs	r4, r3
 8000bf8:	40b4      	lsls	r4, r6
 8000bfa:	464f      	mov	r7, r9
 8000bfc:	46a0      	mov	r8, r4
 8000bfe:	4664      	mov	r4, ip
 8000c00:	40e7      	lsrs	r7, r4
 8000c02:	4644      	mov	r4, r8
 8000c04:	433c      	orrs	r4, r7
 8000c06:	464f      	mov	r7, r9
 8000c08:	40b7      	lsls	r7, r6
 8000c0a:	003e      	movs	r6, r7
 8000c0c:	1e77      	subs	r7, r6, #1
 8000c0e:	41be      	sbcs	r6, r7
 8000c10:	4334      	orrs	r4, r6
 8000c12:	4666      	mov	r6, ip
 8000c14:	40f3      	lsrs	r3, r6
 8000c16:	18c9      	adds	r1, r1, r3
 8000c18:	1824      	adds	r4, r4, r0
 8000c1a:	4284      	cmp	r4, r0
 8000c1c:	419b      	sbcs	r3, r3
 8000c1e:	425b      	negs	r3, r3
 8000c20:	4698      	mov	r8, r3
 8000c22:	0016      	movs	r6, r2
 8000c24:	4488      	add	r8, r1
 8000c26:	e04e      	b.n	8000cc6 <__aeabi_dsub+0x31a>
 8000c28:	4a30      	ldr	r2, [pc, #192]	; (8000cec <__aeabi_dsub+0x340>)
 8000c2a:	1c74      	adds	r4, r6, #1
 8000c2c:	4214      	tst	r4, r2
 8000c2e:	d000      	beq.n	8000c32 <__aeabi_dsub+0x286>
 8000c30:	e0d6      	b.n	8000de0 <__aeabi_dsub+0x434>
 8000c32:	464a      	mov	r2, r9
 8000c34:	431a      	orrs	r2, r3
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d000      	beq.n	8000c3c <__aeabi_dsub+0x290>
 8000c3a:	e15b      	b.n	8000ef4 <__aeabi_dsub+0x548>
 8000c3c:	2a00      	cmp	r2, #0
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_dsub+0x296>
 8000c40:	e1a5      	b.n	8000f8e <__aeabi_dsub+0x5e2>
 8000c42:	000a      	movs	r2, r1
 8000c44:	4302      	orrs	r2, r0
 8000c46:	d000      	beq.n	8000c4a <__aeabi_dsub+0x29e>
 8000c48:	e1bb      	b.n	8000fc2 <__aeabi_dsub+0x616>
 8000c4a:	464a      	mov	r2, r9
 8000c4c:	0759      	lsls	r1, r3, #29
 8000c4e:	08d2      	lsrs	r2, r2, #3
 8000c50:	430a      	orrs	r2, r1
 8000c52:	08db      	lsrs	r3, r3, #3
 8000c54:	e027      	b.n	8000ca6 <__aeabi_dsub+0x2fa>
 8000c56:	000a      	movs	r2, r1
 8000c58:	4302      	orrs	r2, r0
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dsub+0x2b2>
 8000c5c:	e174      	b.n	8000f48 <__aeabi_dsub+0x59c>
 8000c5e:	0022      	movs	r2, r4
 8000c60:	3a01      	subs	r2, #1
 8000c62:	2c01      	cmp	r4, #1
 8000c64:	d005      	beq.n	8000c72 <__aeabi_dsub+0x2c6>
 8000c66:	4c1e      	ldr	r4, [pc, #120]	; (8000ce0 <__aeabi_dsub+0x334>)
 8000c68:	45a4      	cmp	ip, r4
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_dsub+0x2c2>
 8000c6c:	e094      	b.n	8000d98 <__aeabi_dsub+0x3ec>
 8000c6e:	4694      	mov	ip, r2
 8000c70:	e759      	b.n	8000b26 <__aeabi_dsub+0x17a>
 8000c72:	4448      	add	r0, r9
 8000c74:	4548      	cmp	r0, r9
 8000c76:	4192      	sbcs	r2, r2
 8000c78:	185b      	adds	r3, r3, r1
 8000c7a:	4698      	mov	r8, r3
 8000c7c:	0004      	movs	r4, r0
 8000c7e:	4252      	negs	r2, r2
 8000c80:	4490      	add	r8, r2
 8000c82:	4643      	mov	r3, r8
 8000c84:	2602      	movs	r6, #2
 8000c86:	021b      	lsls	r3, r3, #8
 8000c88:	d500      	bpl.n	8000c8c <__aeabi_dsub+0x2e0>
 8000c8a:	e0c4      	b.n	8000e16 <__aeabi_dsub+0x46a>
 8000c8c:	3e01      	subs	r6, #1
 8000c8e:	0763      	lsls	r3, r4, #29
 8000c90:	d000      	beq.n	8000c94 <__aeabi_dsub+0x2e8>
 8000c92:	e711      	b.n	8000ab8 <__aeabi_dsub+0x10c>
 8000c94:	4643      	mov	r3, r8
 8000c96:	46b4      	mov	ip, r6
 8000c98:	0759      	lsls	r1, r3, #29
 8000c9a:	08e2      	lsrs	r2, r4, #3
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	08db      	lsrs	r3, r3, #3
 8000ca0:	490f      	ldr	r1, [pc, #60]	; (8000ce0 <__aeabi_dsub+0x334>)
 8000ca2:	458c      	cmp	ip, r1
 8000ca4:	d040      	beq.n	8000d28 <__aeabi_dsub+0x37c>
 8000ca6:	4661      	mov	r1, ip
 8000ca8:	031b      	lsls	r3, r3, #12
 8000caa:	0549      	lsls	r1, r1, #21
 8000cac:	0b1b      	lsrs	r3, r3, #12
 8000cae:	0d49      	lsrs	r1, r1, #21
 8000cb0:	e720      	b.n	8000af4 <__aeabi_dsub+0x148>
 8000cb2:	4301      	orrs	r1, r0
 8000cb4:	000c      	movs	r4, r1
 8000cb6:	1e61      	subs	r1, r4, #1
 8000cb8:	418c      	sbcs	r4, r1
 8000cba:	444c      	add	r4, r9
 8000cbc:	454c      	cmp	r4, r9
 8000cbe:	4192      	sbcs	r2, r2
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	4690      	mov	r8, r2
 8000cc4:	4498      	add	r8, r3
 8000cc6:	4643      	mov	r3, r8
 8000cc8:	021b      	lsls	r3, r3, #8
 8000cca:	d5e0      	bpl.n	8000c8e <__aeabi_dsub+0x2e2>
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <__aeabi_dsub+0x334>)
 8000cce:	3601      	adds	r6, #1
 8000cd0:	429e      	cmp	r6, r3
 8000cd2:	d000      	beq.n	8000cd6 <__aeabi_dsub+0x32a>
 8000cd4:	e09f      	b.n	8000e16 <__aeabi_dsub+0x46a>
 8000cd6:	0031      	movs	r1, r6
 8000cd8:	2300      	movs	r3, #0
 8000cda:	2200      	movs	r2, #0
 8000cdc:	e70a      	b.n	8000af4 <__aeabi_dsub+0x148>
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	000007ff 	.word	0x000007ff
 8000ce4:	ff7fffff 	.word	0xff7fffff
 8000ce8:	fffff801 	.word	0xfffff801
 8000cec:	000007fe 	.word	0x000007fe
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_dsub+0x34a>
 8000cf4:	e160      	b.n	8000fb8 <__aeabi_dsub+0x60c>
 8000cf6:	000a      	movs	r2, r1
 8000cf8:	4302      	orrs	r2, r0
 8000cfa:	d04d      	beq.n	8000d98 <__aeabi_dsub+0x3ec>
 8000cfc:	464a      	mov	r2, r9
 8000cfe:	075c      	lsls	r4, r3, #29
 8000d00:	08d2      	lsrs	r2, r2, #3
 8000d02:	4322      	orrs	r2, r4
 8000d04:	2480      	movs	r4, #128	; 0x80
 8000d06:	08db      	lsrs	r3, r3, #3
 8000d08:	0324      	lsls	r4, r4, #12
 8000d0a:	4223      	tst	r3, r4
 8000d0c:	d007      	beq.n	8000d1e <__aeabi_dsub+0x372>
 8000d0e:	08ce      	lsrs	r6, r1, #3
 8000d10:	4226      	tst	r6, r4
 8000d12:	d104      	bne.n	8000d1e <__aeabi_dsub+0x372>
 8000d14:	465d      	mov	r5, fp
 8000d16:	0033      	movs	r3, r6
 8000d18:	08c2      	lsrs	r2, r0, #3
 8000d1a:	0749      	lsls	r1, r1, #29
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	0f51      	lsrs	r1, r2, #29
 8000d20:	00d2      	lsls	r2, r2, #3
 8000d22:	08d2      	lsrs	r2, r2, #3
 8000d24:	0749      	lsls	r1, r1, #29
 8000d26:	430a      	orrs	r2, r1
 8000d28:	0011      	movs	r1, r2
 8000d2a:	4319      	orrs	r1, r3
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_dsub+0x384>
 8000d2e:	e1c8      	b.n	80010c2 <__aeabi_dsub+0x716>
 8000d30:	2180      	movs	r1, #128	; 0x80
 8000d32:	0309      	lsls	r1, r1, #12
 8000d34:	430b      	orrs	r3, r1
 8000d36:	031b      	lsls	r3, r3, #12
 8000d38:	49d5      	ldr	r1, [pc, #852]	; (8001090 <__aeabi_dsub+0x6e4>)
 8000d3a:	0b1b      	lsrs	r3, r3, #12
 8000d3c:	e6da      	b.n	8000af4 <__aeabi_dsub+0x148>
 8000d3e:	49d5      	ldr	r1, [pc, #852]	; (8001094 <__aeabi_dsub+0x6e8>)
 8000d40:	1ab6      	subs	r6, r6, r2
 8000d42:	400b      	ands	r3, r1
 8000d44:	4698      	mov	r8, r3
 8000d46:	e6b5      	b.n	8000ab4 <__aeabi_dsub+0x108>
 8000d48:	0020      	movs	r0, r4
 8000d4a:	f000 fac1 	bl	80012d0 <__clzsi2>
 8000d4e:	0002      	movs	r2, r0
 8000d50:	3218      	adds	r2, #24
 8000d52:	2a1f      	cmp	r2, #31
 8000d54:	dc00      	bgt.n	8000d58 <__aeabi_dsub+0x3ac>
 8000d56:	e68f      	b.n	8000a78 <__aeabi_dsub+0xcc>
 8000d58:	0023      	movs	r3, r4
 8000d5a:	3808      	subs	r0, #8
 8000d5c:	4083      	lsls	r3, r0
 8000d5e:	2400      	movs	r4, #0
 8000d60:	e692      	b.n	8000a88 <__aeabi_dsub+0xdc>
 8000d62:	4308      	orrs	r0, r1
 8000d64:	0002      	movs	r2, r0
 8000d66:	1e50      	subs	r0, r2, #1
 8000d68:	4182      	sbcs	r2, r0
 8000d6a:	e66d      	b.n	8000a48 <__aeabi_dsub+0x9c>
 8000d6c:	4cca      	ldr	r4, [pc, #808]	; (8001098 <__aeabi_dsub+0x6ec>)
 8000d6e:	1c72      	adds	r2, r6, #1
 8000d70:	4222      	tst	r2, r4
 8000d72:	d000      	beq.n	8000d76 <__aeabi_dsub+0x3ca>
 8000d74:	e0ad      	b.n	8000ed2 <__aeabi_dsub+0x526>
 8000d76:	464a      	mov	r2, r9
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	d1b8      	bne.n	8000cf0 <__aeabi_dsub+0x344>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d100      	bne.n	8000d84 <__aeabi_dsub+0x3d8>
 8000d82:	e158      	b.n	8001036 <__aeabi_dsub+0x68a>
 8000d84:	000a      	movs	r2, r1
 8000d86:	4302      	orrs	r2, r0
 8000d88:	d000      	beq.n	8000d8c <__aeabi_dsub+0x3e0>
 8000d8a:	e159      	b.n	8001040 <__aeabi_dsub+0x694>
 8000d8c:	464a      	mov	r2, r9
 8000d8e:	0759      	lsls	r1, r3, #29
 8000d90:	08d2      	lsrs	r2, r2, #3
 8000d92:	430a      	orrs	r2, r1
 8000d94:	08db      	lsrs	r3, r3, #3
 8000d96:	e786      	b.n	8000ca6 <__aeabi_dsub+0x2fa>
 8000d98:	464a      	mov	r2, r9
 8000d9a:	0759      	lsls	r1, r3, #29
 8000d9c:	08d2      	lsrs	r2, r2, #3
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	08db      	lsrs	r3, r3, #3
 8000da2:	e7c1      	b.n	8000d28 <__aeabi_dsub+0x37c>
 8000da4:	4dba      	ldr	r5, [pc, #744]	; (8001090 <__aeabi_dsub+0x6e4>)
 8000da6:	42aa      	cmp	r2, r5
 8000da8:	d100      	bne.n	8000dac <__aeabi_dsub+0x400>
 8000daa:	e11e      	b.n	8000fea <__aeabi_dsub+0x63e>
 8000dac:	2580      	movs	r5, #128	; 0x80
 8000dae:	042d      	lsls	r5, r5, #16
 8000db0:	432b      	orrs	r3, r5
 8000db2:	4664      	mov	r4, ip
 8000db4:	2c38      	cmp	r4, #56	; 0x38
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_dsub+0x4c8>
 8000db8:	2c1f      	cmp	r4, #31
 8000dba:	dd00      	ble.n	8000dbe <__aeabi_dsub+0x412>
 8000dbc:	e0d0      	b.n	8000f60 <__aeabi_dsub+0x5b4>
 8000dbe:	2520      	movs	r5, #32
 8000dc0:	4667      	mov	r7, ip
 8000dc2:	1b2d      	subs	r5, r5, r4
 8000dc4:	464e      	mov	r6, r9
 8000dc6:	001c      	movs	r4, r3
 8000dc8:	40fe      	lsrs	r6, r7
 8000dca:	40ac      	lsls	r4, r5
 8000dcc:	4334      	orrs	r4, r6
 8000dce:	464e      	mov	r6, r9
 8000dd0:	40ae      	lsls	r6, r5
 8000dd2:	0035      	movs	r5, r6
 8000dd4:	40fb      	lsrs	r3, r7
 8000dd6:	1e6e      	subs	r6, r5, #1
 8000dd8:	41b5      	sbcs	r5, r6
 8000dda:	1ac9      	subs	r1, r1, r3
 8000ddc:	432c      	orrs	r4, r5
 8000dde:	e04e      	b.n	8000e7e <__aeabi_dsub+0x4d2>
 8000de0:	464a      	mov	r2, r9
 8000de2:	1a14      	subs	r4, r2, r0
 8000de4:	45a1      	cmp	r9, r4
 8000de6:	4192      	sbcs	r2, r2
 8000de8:	4252      	negs	r2, r2
 8000dea:	4690      	mov	r8, r2
 8000dec:	1a5f      	subs	r7, r3, r1
 8000dee:	003a      	movs	r2, r7
 8000df0:	4647      	mov	r7, r8
 8000df2:	1bd2      	subs	r2, r2, r7
 8000df4:	4690      	mov	r8, r2
 8000df6:	0212      	lsls	r2, r2, #8
 8000df8:	d500      	bpl.n	8000dfc <__aeabi_dsub+0x450>
 8000dfa:	e08b      	b.n	8000f14 <__aeabi_dsub+0x568>
 8000dfc:	4642      	mov	r2, r8
 8000dfe:	4322      	orrs	r2, r4
 8000e00:	d000      	beq.n	8000e04 <__aeabi_dsub+0x458>
 8000e02:	e630      	b.n	8000a66 <__aeabi_dsub+0xba>
 8000e04:	2300      	movs	r3, #0
 8000e06:	2500      	movs	r5, #0
 8000e08:	e74d      	b.n	8000ca6 <__aeabi_dsub+0x2fa>
 8000e0a:	464a      	mov	r2, r9
 8000e0c:	0759      	lsls	r1, r3, #29
 8000e0e:	08d2      	lsrs	r2, r2, #3
 8000e10:	430a      	orrs	r2, r1
 8000e12:	08db      	lsrs	r3, r3, #3
 8000e14:	e744      	b.n	8000ca0 <__aeabi_dsub+0x2f4>
 8000e16:	4642      	mov	r2, r8
 8000e18:	4b9e      	ldr	r3, [pc, #632]	; (8001094 <__aeabi_dsub+0x6e8>)
 8000e1a:	0861      	lsrs	r1, r4, #1
 8000e1c:	401a      	ands	r2, r3
 8000e1e:	0013      	movs	r3, r2
 8000e20:	2201      	movs	r2, #1
 8000e22:	4014      	ands	r4, r2
 8000e24:	430c      	orrs	r4, r1
 8000e26:	07da      	lsls	r2, r3, #31
 8000e28:	085b      	lsrs	r3, r3, #1
 8000e2a:	4698      	mov	r8, r3
 8000e2c:	4314      	orrs	r4, r2
 8000e2e:	e641      	b.n	8000ab4 <__aeabi_dsub+0x108>
 8000e30:	001a      	movs	r2, r3
 8000e32:	3e1f      	subs	r6, #31
 8000e34:	40f2      	lsrs	r2, r6
 8000e36:	0016      	movs	r6, r2
 8000e38:	2920      	cmp	r1, #32
 8000e3a:	d003      	beq.n	8000e44 <__aeabi_dsub+0x498>
 8000e3c:	2240      	movs	r2, #64	; 0x40
 8000e3e:	1a51      	subs	r1, r2, r1
 8000e40:	408b      	lsls	r3, r1
 8000e42:	431c      	orrs	r4, r3
 8000e44:	1e62      	subs	r2, r4, #1
 8000e46:	4194      	sbcs	r4, r2
 8000e48:	2300      	movs	r3, #0
 8000e4a:	4334      	orrs	r4, r6
 8000e4c:	4698      	mov	r8, r3
 8000e4e:	2600      	movs	r6, #0
 8000e50:	e71d      	b.n	8000c8e <__aeabi_dsub+0x2e2>
 8000e52:	000c      	movs	r4, r1
 8000e54:	3a20      	subs	r2, #32
 8000e56:	40d4      	lsrs	r4, r2
 8000e58:	0022      	movs	r2, r4
 8000e5a:	4664      	mov	r4, ip
 8000e5c:	2c20      	cmp	r4, #32
 8000e5e:	d004      	beq.n	8000e6a <__aeabi_dsub+0x4be>
 8000e60:	2740      	movs	r7, #64	; 0x40
 8000e62:	1b3f      	subs	r7, r7, r4
 8000e64:	40b9      	lsls	r1, r7
 8000e66:	4308      	orrs	r0, r1
 8000e68:	4680      	mov	r8, r0
 8000e6a:	4644      	mov	r4, r8
 8000e6c:	1e61      	subs	r1, r4, #1
 8000e6e:	418c      	sbcs	r4, r1
 8000e70:	4322      	orrs	r2, r4
 8000e72:	e5e9      	b.n	8000a48 <__aeabi_dsub+0x9c>
 8000e74:	464c      	mov	r4, r9
 8000e76:	4323      	orrs	r3, r4
 8000e78:	001c      	movs	r4, r3
 8000e7a:	1e63      	subs	r3, r4, #1
 8000e7c:	419c      	sbcs	r4, r3
 8000e7e:	1b04      	subs	r4, r0, r4
 8000e80:	42a0      	cmp	r0, r4
 8000e82:	419b      	sbcs	r3, r3
 8000e84:	425b      	negs	r3, r3
 8000e86:	1acb      	subs	r3, r1, r3
 8000e88:	4698      	mov	r8, r3
 8000e8a:	465d      	mov	r5, fp
 8000e8c:	0016      	movs	r6, r2
 8000e8e:	e5e2      	b.n	8000a56 <__aeabi_dsub+0xaa>
 8000e90:	464e      	mov	r6, r9
 8000e92:	431e      	orrs	r6, r3
 8000e94:	d100      	bne.n	8000e98 <__aeabi_dsub+0x4ec>
 8000e96:	e0ae      	b.n	8000ff6 <__aeabi_dsub+0x64a>
 8000e98:	1e66      	subs	r6, r4, #1
 8000e9a:	2c01      	cmp	r4, #1
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_dsub+0x4f4>
 8000e9e:	e0fd      	b.n	800109c <__aeabi_dsub+0x6f0>
 8000ea0:	4f7b      	ldr	r7, [pc, #492]	; (8001090 <__aeabi_dsub+0x6e4>)
 8000ea2:	42bc      	cmp	r4, r7
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_dsub+0x4fc>
 8000ea6:	e107      	b.n	80010b8 <__aeabi_dsub+0x70c>
 8000ea8:	46b4      	mov	ip, r6
 8000eaa:	e69b      	b.n	8000be4 <__aeabi_dsub+0x238>
 8000eac:	4664      	mov	r4, ip
 8000eae:	2220      	movs	r2, #32
 8000eb0:	1b12      	subs	r2, r2, r4
 8000eb2:	000c      	movs	r4, r1
 8000eb4:	4094      	lsls	r4, r2
 8000eb6:	0007      	movs	r7, r0
 8000eb8:	4090      	lsls	r0, r2
 8000eba:	46a0      	mov	r8, r4
 8000ebc:	4664      	mov	r4, ip
 8000ebe:	1e42      	subs	r2, r0, #1
 8000ec0:	4190      	sbcs	r0, r2
 8000ec2:	4662      	mov	r2, ip
 8000ec4:	40e7      	lsrs	r7, r4
 8000ec6:	4644      	mov	r4, r8
 8000ec8:	40d1      	lsrs	r1, r2
 8000eca:	433c      	orrs	r4, r7
 8000ecc:	4304      	orrs	r4, r0
 8000ece:	185b      	adds	r3, r3, r1
 8000ed0:	e6f3      	b.n	8000cba <__aeabi_dsub+0x30e>
 8000ed2:	4c6f      	ldr	r4, [pc, #444]	; (8001090 <__aeabi_dsub+0x6e4>)
 8000ed4:	42a2      	cmp	r2, r4
 8000ed6:	d100      	bne.n	8000eda <__aeabi_dsub+0x52e>
 8000ed8:	e0d5      	b.n	8001086 <__aeabi_dsub+0x6da>
 8000eda:	4448      	add	r0, r9
 8000edc:	185b      	adds	r3, r3, r1
 8000ede:	4548      	cmp	r0, r9
 8000ee0:	4189      	sbcs	r1, r1
 8000ee2:	4249      	negs	r1, r1
 8000ee4:	185b      	adds	r3, r3, r1
 8000ee6:	07dc      	lsls	r4, r3, #31
 8000ee8:	0840      	lsrs	r0, r0, #1
 8000eea:	085b      	lsrs	r3, r3, #1
 8000eec:	4698      	mov	r8, r3
 8000eee:	0016      	movs	r6, r2
 8000ef0:	4304      	orrs	r4, r0
 8000ef2:	e6cc      	b.n	8000c8e <__aeabi_dsub+0x2e2>
 8000ef4:	2a00      	cmp	r2, #0
 8000ef6:	d000      	beq.n	8000efa <__aeabi_dsub+0x54e>
 8000ef8:	e082      	b.n	8001000 <__aeabi_dsub+0x654>
 8000efa:	000a      	movs	r2, r1
 8000efc:	4302      	orrs	r2, r0
 8000efe:	d140      	bne.n	8000f82 <__aeabi_dsub+0x5d6>
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	2500      	movs	r5, #0
 8000f04:	031b      	lsls	r3, r3, #12
 8000f06:	e713      	b.n	8000d30 <__aeabi_dsub+0x384>
 8000f08:	074b      	lsls	r3, r1, #29
 8000f0a:	08c2      	lsrs	r2, r0, #3
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	465d      	mov	r5, fp
 8000f10:	08cb      	lsrs	r3, r1, #3
 8000f12:	e6c5      	b.n	8000ca0 <__aeabi_dsub+0x2f4>
 8000f14:	464a      	mov	r2, r9
 8000f16:	1a84      	subs	r4, r0, r2
 8000f18:	42a0      	cmp	r0, r4
 8000f1a:	4192      	sbcs	r2, r2
 8000f1c:	1acb      	subs	r3, r1, r3
 8000f1e:	4252      	negs	r2, r2
 8000f20:	1a9b      	subs	r3, r3, r2
 8000f22:	4698      	mov	r8, r3
 8000f24:	465d      	mov	r5, fp
 8000f26:	e59e      	b.n	8000a66 <__aeabi_dsub+0xba>
 8000f28:	464a      	mov	r2, r9
 8000f2a:	0759      	lsls	r1, r3, #29
 8000f2c:	08d2      	lsrs	r2, r2, #3
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	08db      	lsrs	r3, r3, #3
 8000f32:	e6f9      	b.n	8000d28 <__aeabi_dsub+0x37c>
 8000f34:	464a      	mov	r2, r9
 8000f36:	1a14      	subs	r4, r2, r0
 8000f38:	45a1      	cmp	r9, r4
 8000f3a:	4192      	sbcs	r2, r2
 8000f3c:	1a5b      	subs	r3, r3, r1
 8000f3e:	4252      	negs	r2, r2
 8000f40:	1a9b      	subs	r3, r3, r2
 8000f42:	4698      	mov	r8, r3
 8000f44:	2601      	movs	r6, #1
 8000f46:	e586      	b.n	8000a56 <__aeabi_dsub+0xaa>
 8000f48:	464a      	mov	r2, r9
 8000f4a:	0759      	lsls	r1, r3, #29
 8000f4c:	08d2      	lsrs	r2, r2, #3
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	08db      	lsrs	r3, r3, #3
 8000f52:	e6a5      	b.n	8000ca0 <__aeabi_dsub+0x2f4>
 8000f54:	464c      	mov	r4, r9
 8000f56:	4323      	orrs	r3, r4
 8000f58:	001c      	movs	r4, r3
 8000f5a:	1e63      	subs	r3, r4, #1
 8000f5c:	419c      	sbcs	r4, r3
 8000f5e:	e65b      	b.n	8000c18 <__aeabi_dsub+0x26c>
 8000f60:	4665      	mov	r5, ip
 8000f62:	001e      	movs	r6, r3
 8000f64:	3d20      	subs	r5, #32
 8000f66:	40ee      	lsrs	r6, r5
 8000f68:	2c20      	cmp	r4, #32
 8000f6a:	d005      	beq.n	8000f78 <__aeabi_dsub+0x5cc>
 8000f6c:	2540      	movs	r5, #64	; 0x40
 8000f6e:	1b2d      	subs	r5, r5, r4
 8000f70:	40ab      	lsls	r3, r5
 8000f72:	464c      	mov	r4, r9
 8000f74:	431c      	orrs	r4, r3
 8000f76:	46a2      	mov	sl, r4
 8000f78:	4654      	mov	r4, sl
 8000f7a:	1e63      	subs	r3, r4, #1
 8000f7c:	419c      	sbcs	r4, r3
 8000f7e:	4334      	orrs	r4, r6
 8000f80:	e77d      	b.n	8000e7e <__aeabi_dsub+0x4d2>
 8000f82:	074b      	lsls	r3, r1, #29
 8000f84:	08c2      	lsrs	r2, r0, #3
 8000f86:	431a      	orrs	r2, r3
 8000f88:	465d      	mov	r5, fp
 8000f8a:	08cb      	lsrs	r3, r1, #3
 8000f8c:	e6cc      	b.n	8000d28 <__aeabi_dsub+0x37c>
 8000f8e:	000a      	movs	r2, r1
 8000f90:	4302      	orrs	r2, r0
 8000f92:	d100      	bne.n	8000f96 <__aeabi_dsub+0x5ea>
 8000f94:	e736      	b.n	8000e04 <__aeabi_dsub+0x458>
 8000f96:	074b      	lsls	r3, r1, #29
 8000f98:	08c2      	lsrs	r2, r0, #3
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	465d      	mov	r5, fp
 8000f9e:	08cb      	lsrs	r3, r1, #3
 8000fa0:	e681      	b.n	8000ca6 <__aeabi_dsub+0x2fa>
 8000fa2:	464a      	mov	r2, r9
 8000fa4:	1a84      	subs	r4, r0, r2
 8000fa6:	42a0      	cmp	r0, r4
 8000fa8:	4192      	sbcs	r2, r2
 8000faa:	1acb      	subs	r3, r1, r3
 8000fac:	4252      	negs	r2, r2
 8000fae:	1a9b      	subs	r3, r3, r2
 8000fb0:	4698      	mov	r8, r3
 8000fb2:	465d      	mov	r5, fp
 8000fb4:	2601      	movs	r6, #1
 8000fb6:	e54e      	b.n	8000a56 <__aeabi_dsub+0xaa>
 8000fb8:	074b      	lsls	r3, r1, #29
 8000fba:	08c2      	lsrs	r2, r0, #3
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	08cb      	lsrs	r3, r1, #3
 8000fc0:	e6b2      	b.n	8000d28 <__aeabi_dsub+0x37c>
 8000fc2:	464a      	mov	r2, r9
 8000fc4:	1a14      	subs	r4, r2, r0
 8000fc6:	45a1      	cmp	r9, r4
 8000fc8:	4192      	sbcs	r2, r2
 8000fca:	1a5f      	subs	r7, r3, r1
 8000fcc:	4252      	negs	r2, r2
 8000fce:	1aba      	subs	r2, r7, r2
 8000fd0:	4690      	mov	r8, r2
 8000fd2:	0212      	lsls	r2, r2, #8
 8000fd4:	d56b      	bpl.n	80010ae <__aeabi_dsub+0x702>
 8000fd6:	464a      	mov	r2, r9
 8000fd8:	1a84      	subs	r4, r0, r2
 8000fda:	42a0      	cmp	r0, r4
 8000fdc:	4192      	sbcs	r2, r2
 8000fde:	1acb      	subs	r3, r1, r3
 8000fe0:	4252      	negs	r2, r2
 8000fe2:	1a9b      	subs	r3, r3, r2
 8000fe4:	4698      	mov	r8, r3
 8000fe6:	465d      	mov	r5, fp
 8000fe8:	e564      	b.n	8000ab4 <__aeabi_dsub+0x108>
 8000fea:	074b      	lsls	r3, r1, #29
 8000fec:	08c2      	lsrs	r2, r0, #3
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	465d      	mov	r5, fp
 8000ff2:	08cb      	lsrs	r3, r1, #3
 8000ff4:	e698      	b.n	8000d28 <__aeabi_dsub+0x37c>
 8000ff6:	074b      	lsls	r3, r1, #29
 8000ff8:	08c2      	lsrs	r2, r0, #3
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	08cb      	lsrs	r3, r1, #3
 8000ffe:	e64f      	b.n	8000ca0 <__aeabi_dsub+0x2f4>
 8001000:	000a      	movs	r2, r1
 8001002:	4302      	orrs	r2, r0
 8001004:	d090      	beq.n	8000f28 <__aeabi_dsub+0x57c>
 8001006:	464a      	mov	r2, r9
 8001008:	075c      	lsls	r4, r3, #29
 800100a:	08d2      	lsrs	r2, r2, #3
 800100c:	4314      	orrs	r4, r2
 800100e:	2280      	movs	r2, #128	; 0x80
 8001010:	08db      	lsrs	r3, r3, #3
 8001012:	0312      	lsls	r2, r2, #12
 8001014:	4213      	tst	r3, r2
 8001016:	d008      	beq.n	800102a <__aeabi_dsub+0x67e>
 8001018:	08ce      	lsrs	r6, r1, #3
 800101a:	4216      	tst	r6, r2
 800101c:	d105      	bne.n	800102a <__aeabi_dsub+0x67e>
 800101e:	08c0      	lsrs	r0, r0, #3
 8001020:	0749      	lsls	r1, r1, #29
 8001022:	4308      	orrs	r0, r1
 8001024:	0004      	movs	r4, r0
 8001026:	465d      	mov	r5, fp
 8001028:	0033      	movs	r3, r6
 800102a:	0f61      	lsrs	r1, r4, #29
 800102c:	00e2      	lsls	r2, r4, #3
 800102e:	0749      	lsls	r1, r1, #29
 8001030:	08d2      	lsrs	r2, r2, #3
 8001032:	430a      	orrs	r2, r1
 8001034:	e678      	b.n	8000d28 <__aeabi_dsub+0x37c>
 8001036:	074b      	lsls	r3, r1, #29
 8001038:	08c2      	lsrs	r2, r0, #3
 800103a:	431a      	orrs	r2, r3
 800103c:	08cb      	lsrs	r3, r1, #3
 800103e:	e632      	b.n	8000ca6 <__aeabi_dsub+0x2fa>
 8001040:	4448      	add	r0, r9
 8001042:	185b      	adds	r3, r3, r1
 8001044:	4548      	cmp	r0, r9
 8001046:	4192      	sbcs	r2, r2
 8001048:	4698      	mov	r8, r3
 800104a:	4252      	negs	r2, r2
 800104c:	4490      	add	r8, r2
 800104e:	4643      	mov	r3, r8
 8001050:	0004      	movs	r4, r0
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	d400      	bmi.n	8001058 <__aeabi_dsub+0x6ac>
 8001056:	e61a      	b.n	8000c8e <__aeabi_dsub+0x2e2>
 8001058:	4642      	mov	r2, r8
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <__aeabi_dsub+0x6e8>)
 800105c:	2601      	movs	r6, #1
 800105e:	401a      	ands	r2, r3
 8001060:	4690      	mov	r8, r2
 8001062:	e614      	b.n	8000c8e <__aeabi_dsub+0x2e2>
 8001064:	4666      	mov	r6, ip
 8001066:	001f      	movs	r7, r3
 8001068:	3e20      	subs	r6, #32
 800106a:	40f7      	lsrs	r7, r6
 800106c:	2c20      	cmp	r4, #32
 800106e:	d005      	beq.n	800107c <__aeabi_dsub+0x6d0>
 8001070:	2640      	movs	r6, #64	; 0x40
 8001072:	1b36      	subs	r6, r6, r4
 8001074:	40b3      	lsls	r3, r6
 8001076:	464c      	mov	r4, r9
 8001078:	431c      	orrs	r4, r3
 800107a:	46a2      	mov	sl, r4
 800107c:	4654      	mov	r4, sl
 800107e:	1e63      	subs	r3, r4, #1
 8001080:	419c      	sbcs	r4, r3
 8001082:	433c      	orrs	r4, r7
 8001084:	e5c8      	b.n	8000c18 <__aeabi_dsub+0x26c>
 8001086:	0011      	movs	r1, r2
 8001088:	2300      	movs	r3, #0
 800108a:	2200      	movs	r2, #0
 800108c:	e532      	b.n	8000af4 <__aeabi_dsub+0x148>
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	000007ff 	.word	0x000007ff
 8001094:	ff7fffff 	.word	0xff7fffff
 8001098:	000007fe 	.word	0x000007fe
 800109c:	464a      	mov	r2, r9
 800109e:	1814      	adds	r4, r2, r0
 80010a0:	4284      	cmp	r4, r0
 80010a2:	4192      	sbcs	r2, r2
 80010a4:	185b      	adds	r3, r3, r1
 80010a6:	4698      	mov	r8, r3
 80010a8:	4252      	negs	r2, r2
 80010aa:	4490      	add	r8, r2
 80010ac:	e5e9      	b.n	8000c82 <__aeabi_dsub+0x2d6>
 80010ae:	4642      	mov	r2, r8
 80010b0:	4322      	orrs	r2, r4
 80010b2:	d100      	bne.n	80010b6 <__aeabi_dsub+0x70a>
 80010b4:	e6a6      	b.n	8000e04 <__aeabi_dsub+0x458>
 80010b6:	e5ea      	b.n	8000c8e <__aeabi_dsub+0x2e2>
 80010b8:	074b      	lsls	r3, r1, #29
 80010ba:	08c2      	lsrs	r2, r0, #3
 80010bc:	431a      	orrs	r2, r3
 80010be:	08cb      	lsrs	r3, r1, #3
 80010c0:	e632      	b.n	8000d28 <__aeabi_dsub+0x37c>
 80010c2:	2200      	movs	r2, #0
 80010c4:	4901      	ldr	r1, [pc, #4]	; (80010cc <__aeabi_dsub+0x720>)
 80010c6:	0013      	movs	r3, r2
 80010c8:	e514      	b.n	8000af4 <__aeabi_dsub+0x148>
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	000007ff 	.word	0x000007ff

080010d0 <__aeabi_i2d>:
 80010d0:	b570      	push	{r4, r5, r6, lr}
 80010d2:	2800      	cmp	r0, #0
 80010d4:	d016      	beq.n	8001104 <__aeabi_i2d+0x34>
 80010d6:	17c3      	asrs	r3, r0, #31
 80010d8:	18c5      	adds	r5, r0, r3
 80010da:	405d      	eors	r5, r3
 80010dc:	0fc4      	lsrs	r4, r0, #31
 80010de:	0028      	movs	r0, r5
 80010e0:	f000 f8f6 	bl	80012d0 <__clzsi2>
 80010e4:	4a11      	ldr	r2, [pc, #68]	; (800112c <__aeabi_i2d+0x5c>)
 80010e6:	1a12      	subs	r2, r2, r0
 80010e8:	280a      	cmp	r0, #10
 80010ea:	dc16      	bgt.n	800111a <__aeabi_i2d+0x4a>
 80010ec:	0003      	movs	r3, r0
 80010ee:	002e      	movs	r6, r5
 80010f0:	3315      	adds	r3, #21
 80010f2:	409e      	lsls	r6, r3
 80010f4:	230b      	movs	r3, #11
 80010f6:	1a18      	subs	r0, r3, r0
 80010f8:	40c5      	lsrs	r5, r0
 80010fa:	0553      	lsls	r3, r2, #21
 80010fc:	032d      	lsls	r5, r5, #12
 80010fe:	0b2d      	lsrs	r5, r5, #12
 8001100:	0d5b      	lsrs	r3, r3, #21
 8001102:	e003      	b.n	800110c <__aeabi_i2d+0x3c>
 8001104:	2400      	movs	r4, #0
 8001106:	2300      	movs	r3, #0
 8001108:	2500      	movs	r5, #0
 800110a:	2600      	movs	r6, #0
 800110c:	051b      	lsls	r3, r3, #20
 800110e:	432b      	orrs	r3, r5
 8001110:	07e4      	lsls	r4, r4, #31
 8001112:	4323      	orrs	r3, r4
 8001114:	0030      	movs	r0, r6
 8001116:	0019      	movs	r1, r3
 8001118:	bd70      	pop	{r4, r5, r6, pc}
 800111a:	380b      	subs	r0, #11
 800111c:	4085      	lsls	r5, r0
 800111e:	0553      	lsls	r3, r2, #21
 8001120:	032d      	lsls	r5, r5, #12
 8001122:	2600      	movs	r6, #0
 8001124:	0b2d      	lsrs	r5, r5, #12
 8001126:	0d5b      	lsrs	r3, r3, #21
 8001128:	e7f0      	b.n	800110c <__aeabi_i2d+0x3c>
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	0000041e 	.word	0x0000041e

08001130 <__aeabi_f2d>:
 8001130:	b570      	push	{r4, r5, r6, lr}
 8001132:	0043      	lsls	r3, r0, #1
 8001134:	0246      	lsls	r6, r0, #9
 8001136:	0fc4      	lsrs	r4, r0, #31
 8001138:	20fe      	movs	r0, #254	; 0xfe
 800113a:	0e1b      	lsrs	r3, r3, #24
 800113c:	1c59      	adds	r1, r3, #1
 800113e:	0a75      	lsrs	r5, r6, #9
 8001140:	4208      	tst	r0, r1
 8001142:	d00c      	beq.n	800115e <__aeabi_f2d+0x2e>
 8001144:	22e0      	movs	r2, #224	; 0xe0
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	4694      	mov	ip, r2
 800114a:	076d      	lsls	r5, r5, #29
 800114c:	0b36      	lsrs	r6, r6, #12
 800114e:	4463      	add	r3, ip
 8001150:	051b      	lsls	r3, r3, #20
 8001152:	4333      	orrs	r3, r6
 8001154:	07e4      	lsls	r4, r4, #31
 8001156:	4323      	orrs	r3, r4
 8001158:	0028      	movs	r0, r5
 800115a:	0019      	movs	r1, r3
 800115c:	bd70      	pop	{r4, r5, r6, pc}
 800115e:	2b00      	cmp	r3, #0
 8001160:	d114      	bne.n	800118c <__aeabi_f2d+0x5c>
 8001162:	2d00      	cmp	r5, #0
 8001164:	d01b      	beq.n	800119e <__aeabi_f2d+0x6e>
 8001166:	0028      	movs	r0, r5
 8001168:	f000 f8b2 	bl	80012d0 <__clzsi2>
 800116c:	280a      	cmp	r0, #10
 800116e:	dc1c      	bgt.n	80011aa <__aeabi_f2d+0x7a>
 8001170:	230b      	movs	r3, #11
 8001172:	002a      	movs	r2, r5
 8001174:	1a1b      	subs	r3, r3, r0
 8001176:	40da      	lsrs	r2, r3
 8001178:	0003      	movs	r3, r0
 800117a:	3315      	adds	r3, #21
 800117c:	409d      	lsls	r5, r3
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <__aeabi_f2d+0x88>)
 8001180:	0312      	lsls	r2, r2, #12
 8001182:	1a1b      	subs	r3, r3, r0
 8001184:	055b      	lsls	r3, r3, #21
 8001186:	0b16      	lsrs	r6, r2, #12
 8001188:	0d5b      	lsrs	r3, r3, #21
 800118a:	e7e1      	b.n	8001150 <__aeabi_f2d+0x20>
 800118c:	2d00      	cmp	r5, #0
 800118e:	d009      	beq.n	80011a4 <__aeabi_f2d+0x74>
 8001190:	0b32      	lsrs	r2, r6, #12
 8001192:	2680      	movs	r6, #128	; 0x80
 8001194:	0336      	lsls	r6, r6, #12
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <__aeabi_f2d+0x8c>)
 8001198:	076d      	lsls	r5, r5, #29
 800119a:	4316      	orrs	r6, r2
 800119c:	e7d8      	b.n	8001150 <__aeabi_f2d+0x20>
 800119e:	2300      	movs	r3, #0
 80011a0:	2600      	movs	r6, #0
 80011a2:	e7d5      	b.n	8001150 <__aeabi_f2d+0x20>
 80011a4:	2600      	movs	r6, #0
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <__aeabi_f2d+0x8c>)
 80011a8:	e7d2      	b.n	8001150 <__aeabi_f2d+0x20>
 80011aa:	0003      	movs	r3, r0
 80011ac:	002a      	movs	r2, r5
 80011ae:	3b0b      	subs	r3, #11
 80011b0:	409a      	lsls	r2, r3
 80011b2:	2500      	movs	r5, #0
 80011b4:	e7e3      	b.n	800117e <__aeabi_f2d+0x4e>
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	00000389 	.word	0x00000389
 80011bc:	000007ff 	.word	0x000007ff

080011c0 <__aeabi_d2f>:
 80011c0:	0002      	movs	r2, r0
 80011c2:	004b      	lsls	r3, r1, #1
 80011c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c6:	0308      	lsls	r0, r1, #12
 80011c8:	0d5b      	lsrs	r3, r3, #21
 80011ca:	4e3d      	ldr	r6, [pc, #244]	; (80012c0 <__aeabi_d2f+0x100>)
 80011cc:	0fcc      	lsrs	r4, r1, #31
 80011ce:	0a40      	lsrs	r0, r0, #9
 80011d0:	0f51      	lsrs	r1, r2, #29
 80011d2:	1c5f      	adds	r7, r3, #1
 80011d4:	4308      	orrs	r0, r1
 80011d6:	00d5      	lsls	r5, r2, #3
 80011d8:	4237      	tst	r7, r6
 80011da:	d00a      	beq.n	80011f2 <__aeabi_d2f+0x32>
 80011dc:	4939      	ldr	r1, [pc, #228]	; (80012c4 <__aeabi_d2f+0x104>)
 80011de:	185e      	adds	r6, r3, r1
 80011e0:	2efe      	cmp	r6, #254	; 0xfe
 80011e2:	dd16      	ble.n	8001212 <__aeabi_d2f+0x52>
 80011e4:	23ff      	movs	r3, #255	; 0xff
 80011e6:	2100      	movs	r1, #0
 80011e8:	05db      	lsls	r3, r3, #23
 80011ea:	430b      	orrs	r3, r1
 80011ec:	07e0      	lsls	r0, r4, #31
 80011ee:	4318      	orrs	r0, r3
 80011f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d106      	bne.n	8001204 <__aeabi_d2f+0x44>
 80011f6:	4328      	orrs	r0, r5
 80011f8:	d027      	beq.n	800124a <__aeabi_d2f+0x8a>
 80011fa:	2105      	movs	r1, #5
 80011fc:	0189      	lsls	r1, r1, #6
 80011fe:	0a49      	lsrs	r1, r1, #9
 8001200:	b2db      	uxtb	r3, r3
 8001202:	e7f1      	b.n	80011e8 <__aeabi_d2f+0x28>
 8001204:	4305      	orrs	r5, r0
 8001206:	d0ed      	beq.n	80011e4 <__aeabi_d2f+0x24>
 8001208:	2180      	movs	r1, #128	; 0x80
 800120a:	03c9      	lsls	r1, r1, #15
 800120c:	23ff      	movs	r3, #255	; 0xff
 800120e:	4301      	orrs	r1, r0
 8001210:	e7ea      	b.n	80011e8 <__aeabi_d2f+0x28>
 8001212:	2e00      	cmp	r6, #0
 8001214:	dd1c      	ble.n	8001250 <__aeabi_d2f+0x90>
 8001216:	0192      	lsls	r2, r2, #6
 8001218:	0011      	movs	r1, r2
 800121a:	1e4a      	subs	r2, r1, #1
 800121c:	4191      	sbcs	r1, r2
 800121e:	00c0      	lsls	r0, r0, #3
 8001220:	0f6d      	lsrs	r5, r5, #29
 8001222:	4301      	orrs	r1, r0
 8001224:	4329      	orrs	r1, r5
 8001226:	074b      	lsls	r3, r1, #29
 8001228:	d048      	beq.n	80012bc <__aeabi_d2f+0xfc>
 800122a:	230f      	movs	r3, #15
 800122c:	400b      	ands	r3, r1
 800122e:	2b04      	cmp	r3, #4
 8001230:	d000      	beq.n	8001234 <__aeabi_d2f+0x74>
 8001232:	3104      	adds	r1, #4
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	04db      	lsls	r3, r3, #19
 8001238:	400b      	ands	r3, r1
 800123a:	d03f      	beq.n	80012bc <__aeabi_d2f+0xfc>
 800123c:	1c72      	adds	r2, r6, #1
 800123e:	2efe      	cmp	r6, #254	; 0xfe
 8001240:	d0d0      	beq.n	80011e4 <__aeabi_d2f+0x24>
 8001242:	0189      	lsls	r1, r1, #6
 8001244:	0a49      	lsrs	r1, r1, #9
 8001246:	b2d3      	uxtb	r3, r2
 8001248:	e7ce      	b.n	80011e8 <__aeabi_d2f+0x28>
 800124a:	2300      	movs	r3, #0
 800124c:	2100      	movs	r1, #0
 800124e:	e7cb      	b.n	80011e8 <__aeabi_d2f+0x28>
 8001250:	0032      	movs	r2, r6
 8001252:	3217      	adds	r2, #23
 8001254:	db22      	blt.n	800129c <__aeabi_d2f+0xdc>
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	221e      	movs	r2, #30
 800125a:	0409      	lsls	r1, r1, #16
 800125c:	4308      	orrs	r0, r1
 800125e:	1b92      	subs	r2, r2, r6
 8001260:	2a1f      	cmp	r2, #31
 8001262:	dd1d      	ble.n	80012a0 <__aeabi_d2f+0xe0>
 8001264:	2102      	movs	r1, #2
 8001266:	4249      	negs	r1, r1
 8001268:	1b8e      	subs	r6, r1, r6
 800126a:	0001      	movs	r1, r0
 800126c:	40f1      	lsrs	r1, r6
 800126e:	000e      	movs	r6, r1
 8001270:	2a20      	cmp	r2, #32
 8001272:	d004      	beq.n	800127e <__aeabi_d2f+0xbe>
 8001274:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <__aeabi_d2f+0x108>)
 8001276:	4694      	mov	ip, r2
 8001278:	4463      	add	r3, ip
 800127a:	4098      	lsls	r0, r3
 800127c:	4305      	orrs	r5, r0
 800127e:	0029      	movs	r1, r5
 8001280:	1e4d      	subs	r5, r1, #1
 8001282:	41a9      	sbcs	r1, r5
 8001284:	4331      	orrs	r1, r6
 8001286:	2600      	movs	r6, #0
 8001288:	074b      	lsls	r3, r1, #29
 800128a:	d1ce      	bne.n	800122a <__aeabi_d2f+0x6a>
 800128c:	2080      	movs	r0, #128	; 0x80
 800128e:	000b      	movs	r3, r1
 8001290:	04c0      	lsls	r0, r0, #19
 8001292:	2201      	movs	r2, #1
 8001294:	4003      	ands	r3, r0
 8001296:	4201      	tst	r1, r0
 8001298:	d1d3      	bne.n	8001242 <__aeabi_d2f+0x82>
 800129a:	e7af      	b.n	80011fc <__aeabi_d2f+0x3c>
 800129c:	2300      	movs	r3, #0
 800129e:	e7ac      	b.n	80011fa <__aeabi_d2f+0x3a>
 80012a0:	490a      	ldr	r1, [pc, #40]	; (80012cc <__aeabi_d2f+0x10c>)
 80012a2:	468c      	mov	ip, r1
 80012a4:	0029      	movs	r1, r5
 80012a6:	4463      	add	r3, ip
 80012a8:	40d1      	lsrs	r1, r2
 80012aa:	409d      	lsls	r5, r3
 80012ac:	000a      	movs	r2, r1
 80012ae:	0029      	movs	r1, r5
 80012b0:	4098      	lsls	r0, r3
 80012b2:	1e4d      	subs	r5, r1, #1
 80012b4:	41a9      	sbcs	r1, r5
 80012b6:	4301      	orrs	r1, r0
 80012b8:	4311      	orrs	r1, r2
 80012ba:	e7e4      	b.n	8001286 <__aeabi_d2f+0xc6>
 80012bc:	0033      	movs	r3, r6
 80012be:	e79d      	b.n	80011fc <__aeabi_d2f+0x3c>
 80012c0:	000007fe 	.word	0x000007fe
 80012c4:	fffffc80 	.word	0xfffffc80
 80012c8:	fffffca2 	.word	0xfffffca2
 80012cc:	fffffc82 	.word	0xfffffc82

080012d0 <__clzsi2>:
 80012d0:	211c      	movs	r1, #28
 80012d2:	2301      	movs	r3, #1
 80012d4:	041b      	lsls	r3, r3, #16
 80012d6:	4298      	cmp	r0, r3
 80012d8:	d301      	bcc.n	80012de <__clzsi2+0xe>
 80012da:	0c00      	lsrs	r0, r0, #16
 80012dc:	3910      	subs	r1, #16
 80012de:	0a1b      	lsrs	r3, r3, #8
 80012e0:	4298      	cmp	r0, r3
 80012e2:	d301      	bcc.n	80012e8 <__clzsi2+0x18>
 80012e4:	0a00      	lsrs	r0, r0, #8
 80012e6:	3908      	subs	r1, #8
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	4298      	cmp	r0, r3
 80012ec:	d301      	bcc.n	80012f2 <__clzsi2+0x22>
 80012ee:	0900      	lsrs	r0, r0, #4
 80012f0:	3904      	subs	r1, #4
 80012f2:	a202      	add	r2, pc, #8	; (adr r2, 80012fc <__clzsi2+0x2c>)
 80012f4:	5c10      	ldrb	r0, [r2, r0]
 80012f6:	1840      	adds	r0, r0, r1
 80012f8:	4770      	bx	lr
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	02020304 	.word	0x02020304
 8001300:	01010101 	.word	0x01010101
	...

0800130c <AMCP3208_read_u16>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t AMCP3208_read_u16(uint8_t channel){
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af02      	add	r7, sp, #8
 8001312:	0002      	movs	r2, r0
 8001314:	1dfb      	adds	r3, r7, #7
 8001316:	701a      	strb	r2, [r3, #0]
  uint8_t aTxBuffer[3];
  uint8_t aRxBuffer[3];

  aTxBuffer[0] = MCP3208_START_BIT | MCP3208_MODE_SINGLE | ((channel & 0x04) >> 2);
 8001318:	1dfb      	adds	r3, r7, #7
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	109b      	asrs	r3, r3, #2
 800131e:	b25b      	sxtb	r3, r3
 8001320:	2201      	movs	r2, #1
 8001322:	4013      	ands	r3, r2
 8001324:	b25b      	sxtb	r3, r3
 8001326:	2206      	movs	r2, #6
 8001328:	4313      	orrs	r3, r2
 800132a:	b25b      	sxtb	r3, r3
 800132c:	b2da      	uxtb	r2, r3
 800132e:	2410      	movs	r4, #16
 8001330:	193b      	adds	r3, r7, r4
 8001332:	701a      	strb	r2, [r3, #0]
  aTxBuffer[1] = channel << 6;
 8001334:	1dfb      	adds	r3, r7, #7
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	019b      	lsls	r3, r3, #6
 800133a:	b2da      	uxtb	r2, r3
 800133c:	193b      	adds	r3, r7, r4
 800133e:	705a      	strb	r2, [r3, #1]
  aTxBuffer[2] = 0x00;
 8001340:	193b      	adds	r3, r7, r4
 8001342:	2200      	movs	r2, #0
 8001344:	709a      	strb	r2, [r3, #2]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001346:	2390      	movs	r3, #144	; 0x90
 8001348:	05db      	lsls	r3, r3, #23
 800134a:	2200      	movs	r2, #0
 800134c:	2110      	movs	r1, #16
 800134e:	0018      	movs	r0, r3
 8001350:	f000 fdf8 	bl	8001f44 <HAL_GPIO_WritePin>

  if(HAL_SPI_TransmitReceive(&hspi1, aTxBuffer, aRxBuffer, 3, 100) != HAL_OK)
 8001354:	230c      	movs	r3, #12
 8001356:	18fa      	adds	r2, r7, r3
 8001358:	1939      	adds	r1, r7, r4
 800135a:	4814      	ldr	r0, [pc, #80]	; (80013ac <AMCP3208_read_u16+0xa0>)
 800135c:	2364      	movs	r3, #100	; 0x64
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2303      	movs	r3, #3
 8001362:	f001 fcc5 	bl	8002cf0 <HAL_SPI_TransmitReceive>
 8001366:	1e03      	subs	r3, r0, #0
 8001368:	d001      	beq.n	800136e <AMCP3208_read_u16+0x62>
  {
    /* Transfer error in transmission process */
    Error_Handler();
 800136a:	f000 fa09 	bl	8001780 <Error_Handler>
  }

 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800136e:	2390      	movs	r3, #144	; 0x90
 8001370:	05db      	lsls	r3, r3, #23
 8001372:	2201      	movs	r2, #1
 8001374:	2110      	movs	r1, #16
 8001376:	0018      	movs	r0, r3
 8001378:	f000 fde4 	bl	8001f44 <HAL_GPIO_WritePin>

  // RX
  uint16_t conv_result = ((uint16_t)(aRxBuffer[1] & 0x0f) << 8) | (uint16_t)aRxBuffer[2];
 800137c:	210c      	movs	r1, #12
 800137e:	187b      	adds	r3, r7, r1
 8001380:	785b      	ldrb	r3, [r3, #1]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	b21a      	sxth	r2, r3
 8001386:	23f0      	movs	r3, #240	; 0xf0
 8001388:	011b      	lsls	r3, r3, #4
 800138a:	4013      	ands	r3, r2
 800138c:	b21a      	sxth	r2, r3
 800138e:	187b      	adds	r3, r7, r1
 8001390:	789b      	ldrb	r3, [r3, #2]
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b21a      	sxth	r2, r3
 8001398:	2116      	movs	r1, #22
 800139a:	187b      	adds	r3, r7, r1
 800139c:	801a      	strh	r2, [r3, #0]

  return conv_result;
 800139e:	187b      	adds	r3, r7, r1
 80013a0:	881b      	ldrh	r3, [r3, #0]
}
 80013a2:	0018      	movs	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b007      	add	sp, #28
 80013a8:	bd90      	pop	{r4, r7, pc}
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	20000070 	.word	0x20000070

080013b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b4:	f000 fb12 	bl	80019dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b8:	f000 f89a 	bl	80014f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013bc:	f000 f968 	bl	8001690 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013c0:	f000 f936 	bl	8001630 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80013c4:	f000 f8f6 	bl	80015b4 <MX_SPI1_Init>
  while (1)
  {

    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  adcA[0] = AMCP3208_read_u16(0);
 80013c8:	2000      	movs	r0, #0
 80013ca:	f7ff ff9f 	bl	800130c <AMCP3208_read_u16>
 80013ce:	0003      	movs	r3, r0
 80013d0:	001a      	movs	r2, r3
 80013d2:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <main+0x104>)
 80013d4:	801a      	strh	r2, [r3, #0]
	  //adcA[2] = AMCP3208_read_u16(2);

	  //voltage1 =  (3.3*adcA[0])/4096;

	  	 //voltage1 = ((double)adcA[0]* 1024)/5;
		 voltage1 = ( adcA[0] * (5.9/4095));
 80013d6:	4b37      	ldr	r3, [pc, #220]	; (80014b4 <main+0x104>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	0018      	movs	r0, r3
 80013dc:	f7ff fe78 	bl	80010d0 <__aeabi_i2d>
 80013e0:	4a35      	ldr	r2, [pc, #212]	; (80014b8 <main+0x108>)
 80013e2:	4b36      	ldr	r3, [pc, #216]	; (80014bc <main+0x10c>)
 80013e4:	f7ff f876 	bl	80004d4 <__aeabi_dmul>
 80013e8:	0002      	movs	r2, r0
 80013ea:	000b      	movs	r3, r1
 80013ec:	0010      	movs	r0, r2
 80013ee:	0019      	movs	r1, r3
 80013f0:	f7ff fee6 	bl	80011c0 <__aeabi_d2f>
 80013f4:	1c02      	adds	r2, r0, #0
 80013f6:	4b32      	ldr	r3, [pc, #200]	; (80014c0 <main+0x110>)
 80013f8:	601a      	str	r2, [r3, #0]
		  current1 = (2.6415*voltage1) - 1.3762;
		  if (current1 < 0){
			  current1 = 0;
		  }*/

		  current1 = (4.1597*voltage1) - 1.4276;
 80013fa:	4b31      	ldr	r3, [pc, #196]	; (80014c0 <main+0x110>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	1c18      	adds	r0, r3, #0
 8001400:	f7ff fe96 	bl	8001130 <__aeabi_f2d>
 8001404:	4a2f      	ldr	r2, [pc, #188]	; (80014c4 <main+0x114>)
 8001406:	4b30      	ldr	r3, [pc, #192]	; (80014c8 <main+0x118>)
 8001408:	f7ff f864 	bl	80004d4 <__aeabi_dmul>
 800140c:	0002      	movs	r2, r0
 800140e:	000b      	movs	r3, r1
 8001410:	0010      	movs	r0, r2
 8001412:	0019      	movs	r1, r3
 8001414:	4a2d      	ldr	r2, [pc, #180]	; (80014cc <main+0x11c>)
 8001416:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <main+0x120>)
 8001418:	f7ff fac8 	bl	80009ac <__aeabi_dsub>
 800141c:	0002      	movs	r2, r0
 800141e:	000b      	movs	r3, r1
 8001420:	492c      	ldr	r1, [pc, #176]	; (80014d4 <main+0x124>)
 8001422:	600a      	str	r2, [r1, #0]
 8001424:	604b      	str	r3, [r1, #4]
		  current2 = (4.1597*voltage2) - 1.4276;
 8001426:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <main+0x128>)
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	6859      	ldr	r1, [r3, #4]
 800142c:	4a25      	ldr	r2, [pc, #148]	; (80014c4 <main+0x114>)
 800142e:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <main+0x118>)
 8001430:	f7ff f850 	bl	80004d4 <__aeabi_dmul>
 8001434:	0002      	movs	r2, r0
 8001436:	000b      	movs	r3, r1
 8001438:	0010      	movs	r0, r2
 800143a:	0019      	movs	r1, r3
 800143c:	4a23      	ldr	r2, [pc, #140]	; (80014cc <main+0x11c>)
 800143e:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <main+0x120>)
 8001440:	f7ff fab4 	bl	80009ac <__aeabi_dsub>
 8001444:	0002      	movs	r2, r0
 8001446:	000b      	movs	r3, r1
 8001448:	4924      	ldr	r1, [pc, #144]	; (80014dc <main+0x12c>)
 800144a:	600a      	str	r2, [r1, #0]
 800144c:	604b      	str	r3, [r1, #4]
		  current3 = (4.1597*voltage3) - 1.4276;
 800144e:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <main+0x130>)
 8001450:	6818      	ldr	r0, [r3, #0]
 8001452:	6859      	ldr	r1, [r3, #4]
 8001454:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <main+0x114>)
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <main+0x118>)
 8001458:	f7ff f83c 	bl	80004d4 <__aeabi_dmul>
 800145c:	0002      	movs	r2, r0
 800145e:	000b      	movs	r3, r1
 8001460:	0010      	movs	r0, r2
 8001462:	0019      	movs	r1, r3
 8001464:	4a19      	ldr	r2, [pc, #100]	; (80014cc <main+0x11c>)
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <main+0x120>)
 8001468:	f7ff faa0 	bl	80009ac <__aeabi_dsub>
 800146c:	0002      	movs	r2, r0
 800146e:	000b      	movs	r3, r1
 8001470:	491c      	ldr	r1, [pc, #112]	; (80014e4 <main+0x134>)
 8001472:	600a      	str	r2, [r1, #0]
 8001474:	604b      	str	r3, [r1, #4]
		  //current1 = (2.66*voltage1) - 1.4053;
	    if (current1 >= 2.3){
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <main+0x124>)
 8001478:	6818      	ldr	r0, [r3, #0]
 800147a:	6859      	ldr	r1, [r3, #4]
 800147c:	4a1a      	ldr	r2, [pc, #104]	; (80014e8 <main+0x138>)
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <main+0x13c>)
 8001480:	f7fe ff00 	bl	8000284 <__aeabi_dcmpge>
 8001484:	1e03      	subs	r3, r0, #0
 8001486:	d00c      	beq.n	80014a2 <main+0xf2>
	    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001488:	2390      	movs	r3, #144	; 0x90
 800148a:	05db      	lsls	r3, r3, #23
 800148c:	2200      	movs	r2, #0
 800148e:	2102      	movs	r1, #2
 8001490:	0018      	movs	r0, r3
 8001492:	f000 fd57 	bl	8001f44 <HAL_GPIO_WritePin>
	    			HAL_Delay(1000);
 8001496:	23fa      	movs	r3, #250	; 0xfa
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	0018      	movs	r0, r3
 800149c:	f000 fb02 	bl	8001aa4 <HAL_Delay>
 80014a0:	e792      	b.n	80013c8 <main+0x18>
	    		}
	    		else {
	    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80014a2:	2390      	movs	r3, #144	; 0x90
 80014a4:	05db      	lsls	r3, r3, #23
 80014a6:	2201      	movs	r2, #1
 80014a8:	2102      	movs	r1, #2
 80014aa:	0018      	movs	r0, r3
 80014ac:	f000 fd4a 	bl	8001f44 <HAL_GPIO_WritePin>
	  adcA[0] = AMCP3208_read_u16(0);
 80014b0:	e78a      	b.n	80013c8 <main+0x18>
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	2000002c 	.word	0x2000002c
 80014b8:	4ace467e 	.word	0x4ace467e
 80014bc:	3f579b13 	.word	0x3f579b13
 80014c0:	20000048 	.word	0x20000048
 80014c4:	6594af4f 	.word	0x6594af4f
 80014c8:	4010a388 	.word	0x4010a388
 80014cc:	18fc5048 	.word	0x18fc5048
 80014d0:	3ff6d773 	.word	0x3ff6d773
 80014d4:	20000158 	.word	0x20000158
 80014d8:	20000068 	.word	0x20000068
 80014dc:	20000058 	.word	0x20000058
 80014e0:	20000060 	.word	0x20000060
 80014e4:	20000040 	.word	0x20000040
 80014e8:	66666666 	.word	0x66666666
 80014ec:	40026666 	.word	0x40026666

080014f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b099      	sub	sp, #100	; 0x64
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	242c      	movs	r4, #44	; 0x2c
 80014f8:	193b      	adds	r3, r7, r4
 80014fa:	0018      	movs	r0, r3
 80014fc:	2334      	movs	r3, #52	; 0x34
 80014fe:	001a      	movs	r2, r3
 8001500:	2100      	movs	r1, #0
 8001502:	f002 fb5d 	bl	8003bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001506:	231c      	movs	r3, #28
 8001508:	18fb      	adds	r3, r7, r3
 800150a:	0018      	movs	r0, r3
 800150c:	2310      	movs	r3, #16
 800150e:	001a      	movs	r2, r3
 8001510:	2100      	movs	r1, #0
 8001512:	f002 fb55 	bl	8003bc0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001516:	003b      	movs	r3, r7
 8001518:	0018      	movs	r0, r3
 800151a:	231c      	movs	r3, #28
 800151c:	001a      	movs	r2, r3
 800151e:	2100      	movs	r1, #0
 8001520:	f002 fb4e 	bl	8003bc0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001524:	0021      	movs	r1, r4
 8001526:	187b      	adds	r3, r7, r1
 8001528:	2202      	movs	r2, #2
 800152a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800152c:	187b      	adds	r3, r7, r1
 800152e:	2201      	movs	r2, #1
 8001530:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001532:	187b      	adds	r3, r7, r1
 8001534:	2210      	movs	r2, #16
 8001536:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001538:	187b      	adds	r3, r7, r1
 800153a:	2202      	movs	r2, #2
 800153c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800153e:	187b      	adds	r3, r7, r1
 8001540:	2280      	movs	r2, #128	; 0x80
 8001542:	0212      	lsls	r2, r2, #8
 8001544:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001546:	187b      	adds	r3, r7, r1
 8001548:	22a0      	movs	r2, #160	; 0xa0
 800154a:	0392      	lsls	r2, r2, #14
 800154c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 800154e:	187b      	adds	r3, r7, r1
 8001550:	2201      	movs	r2, #1
 8001552:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001554:	187b      	adds	r3, r7, r1
 8001556:	0018      	movs	r0, r3
 8001558:	f000 fd12 	bl	8001f80 <HAL_RCC_OscConfig>
 800155c:	1e03      	subs	r3, r0, #0
 800155e:	d001      	beq.n	8001564 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001560:	f000 f90e 	bl	8001780 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001564:	211c      	movs	r1, #28
 8001566:	187b      	adds	r3, r7, r1
 8001568:	2207      	movs	r2, #7
 800156a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156c:	187b      	adds	r3, r7, r1
 800156e:	2202      	movs	r2, #2
 8001570:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001572:	187b      	adds	r3, r7, r1
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001578:	187b      	adds	r3, r7, r1
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800157e:	187b      	adds	r3, r7, r1
 8001580:	2101      	movs	r1, #1
 8001582:	0018      	movs	r0, r3
 8001584:	f001 f882 	bl	800268c <HAL_RCC_ClockConfig>
 8001588:	1e03      	subs	r3, r0, #0
 800158a:	d001      	beq.n	8001590 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800158c:	f000 f8f8 	bl	8001780 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001590:	003b      	movs	r3, r7
 8001592:	2202      	movs	r2, #2
 8001594:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001596:	003b      	movs	r3, r7
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800159c:	003b      	movs	r3, r7
 800159e:	0018      	movs	r0, r3
 80015a0:	f001 f9ee 	bl	8002980 <HAL_RCCEx_PeriphCLKConfig>
 80015a4:	1e03      	subs	r3, r0, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80015a8:	f000 f8ea 	bl	8001780 <Error_Handler>
  }
}
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b019      	add	sp, #100	; 0x64
 80015b2:	bd90      	pop	{r4, r7, pc}

080015b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <MX_SPI1_Init+0x74>)
 80015ba:	4a1c      	ldr	r2, [pc, #112]	; (800162c <MX_SPI1_Init+0x78>)
 80015bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015be:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <MX_SPI1_Init+0x74>)
 80015c0:	2282      	movs	r2, #130	; 0x82
 80015c2:	0052      	lsls	r2, r2, #1
 80015c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <MX_SPI1_Init+0x74>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015cc:	4b16      	ldr	r3, [pc, #88]	; (8001628 <MX_SPI1_Init+0x74>)
 80015ce:	22e0      	movs	r2, #224	; 0xe0
 80015d0:	00d2      	lsls	r2, r2, #3
 80015d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d4:	4b14      	ldr	r3, [pc, #80]	; (8001628 <MX_SPI1_Init+0x74>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <MX_SPI1_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_SPI1_Init+0x74>)
 80015e2:	2280      	movs	r2, #128	; 0x80
 80015e4:	0092      	lsls	r2, r2, #2
 80015e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <MX_SPI1_Init+0x74>)
 80015ea:	2210      	movs	r2, #16
 80015ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_SPI1_Init+0x74>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_SPI1_Init+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <MX_SPI1_Init+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_SPI1_Init+0x74>)
 8001602:	2207      	movs	r2, #7
 8001604:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <MX_SPI1_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_SPI1_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001612:	4b05      	ldr	r3, [pc, #20]	; (8001628 <MX_SPI1_Init+0x74>)
 8001614:	0018      	movs	r0, r3
 8001616:	f001 fab3 	bl	8002b80 <HAL_SPI_Init>
 800161a:	1e03      	subs	r3, r0, #0
 800161c:	d001      	beq.n	8001622 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800161e:	f000 f8af 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000070 	.word	0x20000070
 800162c:	40013000 	.word	0x40013000

08001630 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <MX_USART2_UART_Init+0x58>)
 8001636:	4a15      	ldr	r2, [pc, #84]	; (800168c <MX_USART2_UART_Init+0x5c>)
 8001638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <MX_USART2_UART_Init+0x58>)
 800163c:	22e1      	movs	r2, #225	; 0xe1
 800163e:	0252      	lsls	r2, r2, #9
 8001640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <MX_USART2_UART_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <MX_USART2_UART_Init+0x58>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_USART2_UART_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_USART2_UART_Init+0x58>)
 8001656:	220c      	movs	r2, #12
 8001658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <MX_USART2_UART_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_USART2_UART_Init+0x58>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <MX_USART2_UART_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_USART2_UART_Init+0x58>)
 800166e:	2200      	movs	r2, #0
 8001670:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <MX_USART2_UART_Init+0x58>)
 8001674:	0018      	movs	r0, r3
 8001676:	f001 fe83 	bl	8003380 <HAL_UART_Init>
 800167a:	1e03      	subs	r3, r0, #0
 800167c:	d001      	beq.n	8001682 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800167e:	f000 f87f 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200000d4 	.word	0x200000d4
 800168c:	40004400 	.word	0x40004400

08001690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b08b      	sub	sp, #44	; 0x2c
 8001694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001696:	2414      	movs	r4, #20
 8001698:	193b      	adds	r3, r7, r4
 800169a:	0018      	movs	r0, r3
 800169c:	2314      	movs	r3, #20
 800169e:	001a      	movs	r2, r3
 80016a0:	2100      	movs	r1, #0
 80016a2:	f002 fa8d 	bl	8003bc0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a6:	4b34      	ldr	r3, [pc, #208]	; (8001778 <MX_GPIO_Init+0xe8>)
 80016a8:	695a      	ldr	r2, [r3, #20]
 80016aa:	4b33      	ldr	r3, [pc, #204]	; (8001778 <MX_GPIO_Init+0xe8>)
 80016ac:	2180      	movs	r1, #128	; 0x80
 80016ae:	0309      	lsls	r1, r1, #12
 80016b0:	430a      	orrs	r2, r1
 80016b2:	615a      	str	r2, [r3, #20]
 80016b4:	4b30      	ldr	r3, [pc, #192]	; (8001778 <MX_GPIO_Init+0xe8>)
 80016b6:	695a      	ldr	r2, [r3, #20]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	031b      	lsls	r3, r3, #12
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c2:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <MX_GPIO_Init+0xe8>)
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	4b2c      	ldr	r3, [pc, #176]	; (8001778 <MX_GPIO_Init+0xe8>)
 80016c8:	2180      	movs	r1, #128	; 0x80
 80016ca:	03c9      	lsls	r1, r1, #15
 80016cc:	430a      	orrs	r2, r1
 80016ce:	615a      	str	r2, [r3, #20]
 80016d0:	4b29      	ldr	r3, [pc, #164]	; (8001778 <MX_GPIO_Init+0xe8>)
 80016d2:	695a      	ldr	r2, [r3, #20]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	03db      	lsls	r3, r3, #15
 80016d8:	4013      	ands	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	4b26      	ldr	r3, [pc, #152]	; (8001778 <MX_GPIO_Init+0xe8>)
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	4b25      	ldr	r3, [pc, #148]	; (8001778 <MX_GPIO_Init+0xe8>)
 80016e4:	2180      	movs	r1, #128	; 0x80
 80016e6:	0289      	lsls	r1, r1, #10
 80016e8:	430a      	orrs	r2, r1
 80016ea:	615a      	str	r2, [r3, #20]
 80016ec:	4b22      	ldr	r3, [pc, #136]	; (8001778 <MX_GPIO_Init+0xe8>)
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	029b      	lsls	r3, r3, #10
 80016f4:	4013      	ands	r3, r2
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <MX_GPIO_Init+0xe8>)
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <MX_GPIO_Init+0xe8>)
 8001700:	2180      	movs	r1, #128	; 0x80
 8001702:	02c9      	lsls	r1, r1, #11
 8001704:	430a      	orrs	r2, r1
 8001706:	615a      	str	r2, [r3, #20]
 8001708:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <MX_GPIO_Init+0xe8>)
 800170a:	695a      	ldr	r2, [r3, #20]
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	02db      	lsls	r3, r3, #11
 8001710:	4013      	ands	r3, r2
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001716:	2390      	movs	r3, #144	; 0x90
 8001718:	05db      	lsls	r3, r3, #23
 800171a:	2200      	movs	r2, #0
 800171c:	2132      	movs	r1, #50	; 0x32
 800171e:	0018      	movs	r0, r3
 8001720:	f000 fc10 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001724:	193b      	adds	r3, r7, r4
 8001726:	2280      	movs	r2, #128	; 0x80
 8001728:	0192      	lsls	r2, r2, #6
 800172a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800172c:	193b      	adds	r3, r7, r4
 800172e:	2284      	movs	r2, #132	; 0x84
 8001730:	0392      	lsls	r2, r2, #14
 8001732:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	193b      	adds	r3, r7, r4
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800173a:	193b      	adds	r3, r7, r4
 800173c:	4a0f      	ldr	r2, [pc, #60]	; (800177c <MX_GPIO_Init+0xec>)
 800173e:	0019      	movs	r1, r3
 8001740:	0010      	movs	r0, r2
 8001742:	f000 fa87 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
 8001746:	0021      	movs	r1, r4
 8001748:	187b      	adds	r3, r7, r1
 800174a:	2232      	movs	r2, #50	; 0x32
 800174c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	187b      	adds	r3, r7, r1
 8001750:	2201      	movs	r2, #1
 8001752:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	187b      	adds	r3, r7, r1
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	187b      	adds	r3, r7, r1
 800175c:	2200      	movs	r2, #0
 800175e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	187a      	adds	r2, r7, r1
 8001762:	2390      	movs	r3, #144	; 0x90
 8001764:	05db      	lsls	r3, r3, #23
 8001766:	0011      	movs	r1, r2
 8001768:	0018      	movs	r0, r3
 800176a:	f000 fa73 	bl	8001c54 <HAL_GPIO_Init>

}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	46bd      	mov	sp, r7
 8001772:	b00b      	add	sp, #44	; 0x2c
 8001774:	bd90      	pop	{r4, r7, pc}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	40021000 	.word	0x40021000
 800177c:	48000800 	.word	0x48000800

08001780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001784:	b672      	cpsid	i
}
 8001786:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001788:	e7fe      	b.n	8001788 <Error_Handler+0x8>
	...

0800178c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <HAL_MspInit+0x44>)
 8001794:	699a      	ldr	r2, [r3, #24]
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HAL_MspInit+0x44>)
 8001798:	2101      	movs	r1, #1
 800179a:	430a      	orrs	r2, r1
 800179c:	619a      	str	r2, [r3, #24]
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_MspInit+0x44>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	2201      	movs	r2, #1
 80017a4:	4013      	ands	r3, r2
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_MspInit+0x44>)
 80017ac:	69da      	ldr	r2, [r3, #28]
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_MspInit+0x44>)
 80017b0:	2180      	movs	r1, #128	; 0x80
 80017b2:	0549      	lsls	r1, r1, #21
 80017b4:	430a      	orrs	r2, r1
 80017b6:	61da      	str	r2, [r3, #28]
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_MspInit+0x44>)
 80017ba:	69da      	ldr	r2, [r3, #28]
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	055b      	lsls	r3, r3, #21
 80017c0:	4013      	ands	r3, r2
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b002      	add	sp, #8
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	40021000 	.word	0x40021000

080017d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b08b      	sub	sp, #44	; 0x2c
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	2414      	movs	r4, #20
 80017de:	193b      	adds	r3, r7, r4
 80017e0:	0018      	movs	r0, r3
 80017e2:	2314      	movs	r3, #20
 80017e4:	001a      	movs	r2, r3
 80017e6:	2100      	movs	r1, #0
 80017e8:	f002 f9ea 	bl	8003bc0 <memset>
  if(hspi->Instance==SPI1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a2e      	ldr	r2, [pc, #184]	; (80018ac <HAL_SPI_MspInit+0xd8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d155      	bne.n	80018a2 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017f6:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <HAL_SPI_MspInit+0xdc>)
 80017f8:	699a      	ldr	r2, [r3, #24]
 80017fa:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <HAL_SPI_MspInit+0xdc>)
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	0149      	lsls	r1, r1, #5
 8001800:	430a      	orrs	r2, r1
 8001802:	619a      	str	r2, [r3, #24]
 8001804:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <HAL_SPI_MspInit+0xdc>)
 8001806:	699a      	ldr	r2, [r3, #24]
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	015b      	lsls	r3, r3, #5
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_SPI_MspInit+0xdc>)
 8001814:	695a      	ldr	r2, [r3, #20]
 8001816:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <HAL_SPI_MspInit+0xdc>)
 8001818:	2180      	movs	r1, #128	; 0x80
 800181a:	0289      	lsls	r1, r1, #10
 800181c:	430a      	orrs	r2, r1
 800181e:	615a      	str	r2, [r3, #20]
 8001820:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <HAL_SPI_MspInit+0xdc>)
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	029b      	lsls	r3, r3, #10
 8001828:	4013      	ands	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_SPI_MspInit+0xdc>)
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <HAL_SPI_MspInit+0xdc>)
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	02c9      	lsls	r1, r1, #11
 8001838:	430a      	orrs	r2, r1
 800183a:	615a      	str	r2, [r3, #20]
 800183c:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <HAL_SPI_MspInit+0xdc>)
 800183e:	695a      	ldr	r2, [r3, #20]
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	02db      	lsls	r3, r3, #11
 8001844:	4013      	ands	r3, r2
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800184a:	193b      	adds	r3, r7, r4
 800184c:	22c0      	movs	r2, #192	; 0xc0
 800184e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	193b      	adds	r3, r7, r4
 8001852:	2202      	movs	r2, #2
 8001854:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	193b      	adds	r3, r7, r4
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800185c:	193b      	adds	r3, r7, r4
 800185e:	2203      	movs	r2, #3
 8001860:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001862:	193b      	adds	r3, r7, r4
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001868:	193a      	adds	r2, r7, r4
 800186a:	2390      	movs	r3, #144	; 0x90
 800186c:	05db      	lsls	r3, r3, #23
 800186e:	0011      	movs	r1, r2
 8001870:	0018      	movs	r0, r3
 8001872:	f000 f9ef 	bl	8001c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001876:	0021      	movs	r1, r4
 8001878:	187b      	adds	r3, r7, r1
 800187a:	2208      	movs	r2, #8
 800187c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	187b      	adds	r3, r7, r1
 8001880:	2202      	movs	r2, #2
 8001882:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	187b      	adds	r3, r7, r1
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800188a:	187b      	adds	r3, r7, r1
 800188c:	2203      	movs	r2, #3
 800188e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001890:	187b      	adds	r3, r7, r1
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	187b      	adds	r3, r7, r1
 8001898:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <HAL_SPI_MspInit+0xe0>)
 800189a:	0019      	movs	r1, r3
 800189c:	0010      	movs	r0, r2
 800189e:	f000 f9d9 	bl	8001c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b00b      	add	sp, #44	; 0x2c
 80018a8:	bd90      	pop	{r4, r7, pc}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	40013000 	.word	0x40013000
 80018b0:	40021000 	.word	0x40021000
 80018b4:	48000400 	.word	0x48000400

080018b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b08b      	sub	sp, #44	; 0x2c
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	2414      	movs	r4, #20
 80018c2:	193b      	adds	r3, r7, r4
 80018c4:	0018      	movs	r0, r3
 80018c6:	2314      	movs	r3, #20
 80018c8:	001a      	movs	r2, r3
 80018ca:	2100      	movs	r1, #0
 80018cc:	f002 f978 	bl	8003bc0 <memset>
  if(huart->Instance==USART2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a1c      	ldr	r2, [pc, #112]	; (8001948 <HAL_UART_MspInit+0x90>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d132      	bne.n	8001940 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018da:	4b1c      	ldr	r3, [pc, #112]	; (800194c <HAL_UART_MspInit+0x94>)
 80018dc:	69da      	ldr	r2, [r3, #28]
 80018de:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_UART_MspInit+0x94>)
 80018e0:	2180      	movs	r1, #128	; 0x80
 80018e2:	0289      	lsls	r1, r1, #10
 80018e4:	430a      	orrs	r2, r1
 80018e6:	61da      	str	r2, [r3, #28]
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_UART_MspInit+0x94>)
 80018ea:	69da      	ldr	r2, [r3, #28]
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	029b      	lsls	r3, r3, #10
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_UART_MspInit+0x94>)
 80018f8:	695a      	ldr	r2, [r3, #20]
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <HAL_UART_MspInit+0x94>)
 80018fc:	2180      	movs	r1, #128	; 0x80
 80018fe:	0289      	lsls	r1, r1, #10
 8001900:	430a      	orrs	r2, r1
 8001902:	615a      	str	r2, [r3, #20]
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <HAL_UART_MspInit+0x94>)
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	029b      	lsls	r3, r3, #10
 800190c:	4013      	ands	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001912:	0021      	movs	r1, r4
 8001914:	187b      	adds	r3, r7, r1
 8001916:	220c      	movs	r2, #12
 8001918:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	187b      	adds	r3, r7, r1
 800191c:	2202      	movs	r2, #2
 800191e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	187b      	adds	r3, r7, r1
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	187b      	adds	r3, r7, r1
 8001928:	2200      	movs	r2, #0
 800192a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800192c:	187b      	adds	r3, r7, r1
 800192e:	2201      	movs	r2, #1
 8001930:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001932:	187a      	adds	r2, r7, r1
 8001934:	2390      	movs	r3, #144	; 0x90
 8001936:	05db      	lsls	r3, r3, #23
 8001938:	0011      	movs	r1, r2
 800193a:	0018      	movs	r0, r3
 800193c:	f000 f98a 	bl	8001c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001940:	46c0      	nop			; (mov r8, r8)
 8001942:	46bd      	mov	sp, r7
 8001944:	b00b      	add	sp, #44	; 0x2c
 8001946:	bd90      	pop	{r4, r7, pc}
 8001948:	40004400 	.word	0x40004400
 800194c:	40021000 	.word	0x40021000

08001950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <NMI_Handler+0x4>

08001956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <HardFault_Handler+0x4>

0800195c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001960:	46c0      	nop			; (mov r8, r8)
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001974:	f000 f87a 	bl	8001a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001978:	46c0      	nop			; (mov r8, r8)
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001988:	480d      	ldr	r0, [pc, #52]	; (80019c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800198a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800198c:	480d      	ldr	r0, [pc, #52]	; (80019c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800198e:	490e      	ldr	r1, [pc, #56]	; (80019c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001990:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <LoopForever+0xe>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001994:	e002      	b.n	800199c <LoopCopyDataInit>

08001996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199a:	3304      	adds	r3, #4

0800199c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800199c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a0:	d3f9      	bcc.n	8001996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019a4:	4c0b      	ldr	r4, [pc, #44]	; (80019d4 <LoopForever+0x16>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a8:	e001      	b.n	80019ae <LoopFillZerobss>

080019aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ac:	3204      	adds	r2, #4

080019ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b0:	d3fb      	bcc.n	80019aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80019b2:	f7ff ffe4 	bl	800197e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80019b6:	f002 f8df 	bl	8003b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ba:	f7ff fcf9 	bl	80013b0 <main>

080019be <LoopForever>:

LoopForever:
    b LoopForever
 80019be:	e7fe      	b.n	80019be <LoopForever>
  ldr   r0, =_estack
 80019c0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80019c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019cc:	08003c68 	.word	0x08003c68
  ldr r2, =_sbss
 80019d0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80019d4:	20000164 	.word	0x20000164

080019d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019d8:	e7fe      	b.n	80019d8 <ADC1_COMP_IRQHandler>
	...

080019dc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <HAL_Init+0x24>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_Init+0x24>)
 80019e6:	2110      	movs	r1, #16
 80019e8:	430a      	orrs	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80019ec:	2000      	movs	r0, #0
 80019ee:	f000 f809 	bl	8001a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f2:	f7ff fecb 	bl	800178c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	0018      	movs	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	40022000 	.word	0x40022000

08001a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a04:	b590      	push	{r4, r7, lr}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_InitTick+0x5c>)
 8001a0e:	681c      	ldr	r4, [r3, #0]
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <HAL_InitTick+0x60>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	0019      	movs	r1, r3
 8001a16:	23fa      	movs	r3, #250	; 0xfa
 8001a18:	0098      	lsls	r0, r3, #2
 8001a1a:	f7fe fb73 	bl	8000104 <__udivsi3>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	0019      	movs	r1, r3
 8001a22:	0020      	movs	r0, r4
 8001a24:	f7fe fb6e 	bl	8000104 <__udivsi3>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f000 f905 	bl	8001c3a <HAL_SYSTICK_Config>
 8001a30:	1e03      	subs	r3, r0, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e00f      	b.n	8001a58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d80b      	bhi.n	8001a56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	2301      	movs	r3, #1
 8001a42:	425b      	negs	r3, r3
 8001a44:	2200      	movs	r2, #0
 8001a46:	0018      	movs	r0, r3
 8001a48:	f000 f8e2 	bl	8001c10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_InitTick+0x64>)
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e000      	b.n	8001a58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
}
 8001a58:	0018      	movs	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b003      	add	sp, #12
 8001a5e:	bd90      	pop	{r4, r7, pc}
 8001a60:	20000000 	.word	0x20000000
 8001a64:	20000008 	.word	0x20000008
 8001a68:	20000004 	.word	0x20000004

08001a6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_IncTick+0x1c>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	001a      	movs	r2, r3
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_IncTick+0x20>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	18d2      	adds	r2, r2, r3
 8001a7c:	4b03      	ldr	r3, [pc, #12]	; (8001a8c <HAL_IncTick+0x20>)
 8001a7e:	601a      	str	r2, [r3, #0]
}
 8001a80:	46c0      	nop			; (mov r8, r8)
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	20000160 	.word	0x20000160

08001a90 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  return uwTick;
 8001a94:	4b02      	ldr	r3, [pc, #8]	; (8001aa0 <HAL_GetTick+0x10>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	0018      	movs	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	20000160 	.word	0x20000160

08001aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aac:	f7ff fff0 	bl	8001a90 <HAL_GetTick>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3301      	adds	r3, #1
 8001abc:	d005      	beq.n	8001aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_Delay+0x44>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	001a      	movs	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	189b      	adds	r3, r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	f7ff ffe0 	bl	8001a90 <HAL_GetTick>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d8f7      	bhi.n	8001acc <HAL_Delay+0x28>
  {
  }
}
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b004      	add	sp, #16
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	20000008 	.word	0x20000008

08001aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	0002      	movs	r2, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	1dfb      	adds	r3, r7, #7
 8001af8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001afa:	1dfb      	adds	r3, r7, #7
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b7f      	cmp	r3, #127	; 0x7f
 8001b00:	d828      	bhi.n	8001b54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b02:	4a2f      	ldr	r2, [pc, #188]	; (8001bc0 <__NVIC_SetPriority+0xd4>)
 8001b04:	1dfb      	adds	r3, r7, #7
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b25b      	sxtb	r3, r3
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	33c0      	adds	r3, #192	; 0xc0
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	589b      	ldr	r3, [r3, r2]
 8001b12:	1dfa      	adds	r2, r7, #7
 8001b14:	7812      	ldrb	r2, [r2, #0]
 8001b16:	0011      	movs	r1, r2
 8001b18:	2203      	movs	r2, #3
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	00d2      	lsls	r2, r2, #3
 8001b1e:	21ff      	movs	r1, #255	; 0xff
 8001b20:	4091      	lsls	r1, r2
 8001b22:	000a      	movs	r2, r1
 8001b24:	43d2      	mvns	r2, r2
 8001b26:	401a      	ands	r2, r3
 8001b28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	019b      	lsls	r3, r3, #6
 8001b2e:	22ff      	movs	r2, #255	; 0xff
 8001b30:	401a      	ands	r2, r3
 8001b32:	1dfb      	adds	r3, r7, #7
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	0018      	movs	r0, r3
 8001b38:	2303      	movs	r3, #3
 8001b3a:	4003      	ands	r3, r0
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b40:	481f      	ldr	r0, [pc, #124]	; (8001bc0 <__NVIC_SetPriority+0xd4>)
 8001b42:	1dfb      	adds	r3, r7, #7
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b25b      	sxtb	r3, r3
 8001b48:	089b      	lsrs	r3, r3, #2
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	33c0      	adds	r3, #192	; 0xc0
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b52:	e031      	b.n	8001bb8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b54:	4a1b      	ldr	r2, [pc, #108]	; (8001bc4 <__NVIC_SetPriority+0xd8>)
 8001b56:	1dfb      	adds	r3, r7, #7
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	400b      	ands	r3, r1
 8001b60:	3b08      	subs	r3, #8
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	3306      	adds	r3, #6
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	18d3      	adds	r3, r2, r3
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	1dfa      	adds	r2, r7, #7
 8001b70:	7812      	ldrb	r2, [r2, #0]
 8001b72:	0011      	movs	r1, r2
 8001b74:	2203      	movs	r2, #3
 8001b76:	400a      	ands	r2, r1
 8001b78:	00d2      	lsls	r2, r2, #3
 8001b7a:	21ff      	movs	r1, #255	; 0xff
 8001b7c:	4091      	lsls	r1, r2
 8001b7e:	000a      	movs	r2, r1
 8001b80:	43d2      	mvns	r2, r2
 8001b82:	401a      	ands	r2, r3
 8001b84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	019b      	lsls	r3, r3, #6
 8001b8a:	22ff      	movs	r2, #255	; 0xff
 8001b8c:	401a      	ands	r2, r3
 8001b8e:	1dfb      	adds	r3, r7, #7
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	0018      	movs	r0, r3
 8001b94:	2303      	movs	r3, #3
 8001b96:	4003      	ands	r3, r0
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b9c:	4809      	ldr	r0, [pc, #36]	; (8001bc4 <__NVIC_SetPriority+0xd8>)
 8001b9e:	1dfb      	adds	r3, r7, #7
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	001c      	movs	r4, r3
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	4023      	ands	r3, r4
 8001ba8:	3b08      	subs	r3, #8
 8001baa:	089b      	lsrs	r3, r3, #2
 8001bac:	430a      	orrs	r2, r1
 8001bae:	3306      	adds	r3, #6
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	18c3      	adds	r3, r0, r3
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	601a      	str	r2, [r3, #0]
}
 8001bb8:	46c0      	nop			; (mov r8, r8)
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	b003      	add	sp, #12
 8001bbe:	bd90      	pop	{r4, r7, pc}
 8001bc0:	e000e100 	.word	0xe000e100
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	1e5a      	subs	r2, r3, #1
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	045b      	lsls	r3, r3, #17
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d301      	bcc.n	8001be0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e010      	b.n	8001c02 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <SysTick_Config+0x44>)
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	3a01      	subs	r2, #1
 8001be6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be8:	2301      	movs	r3, #1
 8001bea:	425b      	negs	r3, r3
 8001bec:	2103      	movs	r1, #3
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f7ff ff7c 	bl	8001aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <SysTick_Config+0x44>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfa:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <SysTick_Config+0x44>)
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	0018      	movs	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	b002      	add	sp, #8
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	e000e010 	.word	0xe000e010

08001c10 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	210f      	movs	r1, #15
 8001c1c:	187b      	adds	r3, r7, r1
 8001c1e:	1c02      	adds	r2, r0, #0
 8001c20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	187b      	adds	r3, r7, r1
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b25b      	sxtb	r3, r3
 8001c2a:	0011      	movs	r1, r2
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f7ff ff5d 	bl	8001aec <__NVIC_SetPriority>
}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b004      	add	sp, #16
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	0018      	movs	r0, r3
 8001c46:	f7ff ffbf 	bl	8001bc8 <SysTick_Config>
 8001c4a:	0003      	movs	r3, r0
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b002      	add	sp, #8
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c62:	e155      	b.n	8001f10 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2101      	movs	r1, #1
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4091      	lsls	r1, r2
 8001c6e:	000a      	movs	r2, r1
 8001c70:	4013      	ands	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d100      	bne.n	8001c7c <HAL_GPIO_Init+0x28>
 8001c7a:	e146      	b.n	8001f0a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2203      	movs	r2, #3
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d005      	beq.n	8001c94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d130      	bne.n	8001cf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	0013      	movs	r3, r2
 8001ca4:	43da      	mvns	r2, r3
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	0013      	movs	r3, r2
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cca:	2201      	movs	r2, #1
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	0013      	movs	r3, r2
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	091b      	lsrs	r3, r3, #4
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	0013      	movs	r3, r2
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d017      	beq.n	8001d32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	409a      	lsls	r2, r3
 8001d10:	0013      	movs	r3, r2
 8001d12:	43da      	mvns	r2, r3
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	409a      	lsls	r2, r3
 8001d24:	0013      	movs	r3, r2
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2203      	movs	r2, #3
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d123      	bne.n	8001d86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	08da      	lsrs	r2, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3208      	adds	r2, #8
 8001d46:	0092      	lsls	r2, r2, #2
 8001d48:	58d3      	ldr	r3, [r2, r3]
 8001d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	2207      	movs	r2, #7
 8001d50:	4013      	ands	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	220f      	movs	r2, #15
 8001d56:	409a      	lsls	r2, r3
 8001d58:	0013      	movs	r3, r2
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	691a      	ldr	r2, [r3, #16]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2107      	movs	r1, #7
 8001d6a:	400b      	ands	r3, r1
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	0013      	movs	r3, r2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	08da      	lsrs	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3208      	adds	r2, #8
 8001d80:	0092      	lsls	r2, r2, #2
 8001d82:	6939      	ldr	r1, [r7, #16]
 8001d84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	2203      	movs	r2, #3
 8001d92:	409a      	lsls	r2, r3
 8001d94:	0013      	movs	r3, r2
 8001d96:	43da      	mvns	r2, r3
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2203      	movs	r2, #3
 8001da4:	401a      	ands	r2, r3
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	409a      	lsls	r2, r3
 8001dac:	0013      	movs	r3, r2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	23c0      	movs	r3, #192	; 0xc0
 8001dc0:	029b      	lsls	r3, r3, #10
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d100      	bne.n	8001dc8 <HAL_GPIO_Init+0x174>
 8001dc6:	e0a0      	b.n	8001f0a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc8:	4b57      	ldr	r3, [pc, #348]	; (8001f28 <HAL_GPIO_Init+0x2d4>)
 8001dca:	699a      	ldr	r2, [r3, #24]
 8001dcc:	4b56      	ldr	r3, [pc, #344]	; (8001f28 <HAL_GPIO_Init+0x2d4>)
 8001dce:	2101      	movs	r1, #1
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	619a      	str	r2, [r3, #24]
 8001dd4:	4b54      	ldr	r3, [pc, #336]	; (8001f28 <HAL_GPIO_Init+0x2d4>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	4013      	ands	r3, r2
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001de0:	4a52      	ldr	r2, [pc, #328]	; (8001f2c <HAL_GPIO_Init+0x2d8>)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	089b      	lsrs	r3, r3, #2
 8001de6:	3302      	adds	r3, #2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	589b      	ldr	r3, [r3, r2]
 8001dec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2203      	movs	r2, #3
 8001df2:	4013      	ands	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	220f      	movs	r2, #15
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	0013      	movs	r3, r2
 8001dfc:	43da      	mvns	r2, r3
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	2390      	movs	r3, #144	; 0x90
 8001e08:	05db      	lsls	r3, r3, #23
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d019      	beq.n	8001e42 <HAL_GPIO_Init+0x1ee>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a47      	ldr	r2, [pc, #284]	; (8001f30 <HAL_GPIO_Init+0x2dc>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0x1ea>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a46      	ldr	r2, [pc, #280]	; (8001f34 <HAL_GPIO_Init+0x2e0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00d      	beq.n	8001e3a <HAL_GPIO_Init+0x1e6>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a45      	ldr	r2, [pc, #276]	; (8001f38 <HAL_GPIO_Init+0x2e4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d007      	beq.n	8001e36 <HAL_GPIO_Init+0x1e2>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a44      	ldr	r2, [pc, #272]	; (8001f3c <HAL_GPIO_Init+0x2e8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_GPIO_Init+0x1de>
 8001e2e:	2304      	movs	r3, #4
 8001e30:	e008      	b.n	8001e44 <HAL_GPIO_Init+0x1f0>
 8001e32:	2305      	movs	r3, #5
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x1f0>
 8001e36:	2303      	movs	r3, #3
 8001e38:	e004      	b.n	8001e44 <HAL_GPIO_Init+0x1f0>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e002      	b.n	8001e44 <HAL_GPIO_Init+0x1f0>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <HAL_GPIO_Init+0x1f0>
 8001e42:	2300      	movs	r3, #0
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	2103      	movs	r1, #3
 8001e48:	400a      	ands	r2, r1
 8001e4a:	0092      	lsls	r2, r2, #2
 8001e4c:	4093      	lsls	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e54:	4935      	ldr	r1, [pc, #212]	; (8001f2c <HAL_GPIO_Init+0x2d8>)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e62:	4b37      	ldr	r3, [pc, #220]	; (8001f40 <HAL_GPIO_Init+0x2ec>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	025b      	lsls	r3, r3, #9
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e86:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <HAL_GPIO_Init+0x2ec>)
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001e8c:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <HAL_GPIO_Init+0x2ec>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	43da      	mvns	r2, r3
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	029b      	lsls	r3, r3, #10
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001eb0:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <HAL_GPIO_Init+0x2ec>)
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb6:	4b22      	ldr	r3, [pc, #136]	; (8001f40 <HAL_GPIO_Init+0x2ec>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	035b      	lsls	r3, r3, #13
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001eda:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <HAL_GPIO_Init+0x2ec>)
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ee0:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <HAL_GPIO_Init+0x2ec>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	43da      	mvns	r2, r3
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	039b      	lsls	r3, r3, #14
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <HAL_GPIO_Init+0x2ec>)
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	40da      	lsrs	r2, r3
 8001f18:	1e13      	subs	r3, r2, #0
 8001f1a:	d000      	beq.n	8001f1e <HAL_GPIO_Init+0x2ca>
 8001f1c:	e6a2      	b.n	8001c64 <HAL_GPIO_Init+0x10>
  } 
}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	46c0      	nop			; (mov r8, r8)
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b006      	add	sp, #24
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	48000400 	.word	0x48000400
 8001f34:	48000800 	.word	0x48000800
 8001f38:	48000c00 	.word	0x48000c00
 8001f3c:	48001000 	.word	0x48001000
 8001f40:	40010400 	.word	0x40010400

08001f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	0008      	movs	r0, r1
 8001f4e:	0011      	movs	r1, r2
 8001f50:	1cbb      	adds	r3, r7, #2
 8001f52:	1c02      	adds	r2, r0, #0
 8001f54:	801a      	strh	r2, [r3, #0]
 8001f56:	1c7b      	adds	r3, r7, #1
 8001f58:	1c0a      	adds	r2, r1, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f5c:	1c7b      	adds	r3, r7, #1
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d004      	beq.n	8001f6e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f64:	1cbb      	adds	r3, r7, #2
 8001f66:	881a      	ldrh	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f6c:	e003      	b.n	8001f76 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f6e:	1cbb      	adds	r3, r7, #2
 8001f70:	881a      	ldrh	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	b002      	add	sp, #8
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d102      	bne.n	8001f94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	f000 fb76 	bl	8002680 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d100      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x20>
 8001f9e:	e08e      	b.n	80020be <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001fa0:	4bc5      	ldr	r3, [pc, #788]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	220c      	movs	r2, #12
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d00e      	beq.n	8001fca <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fac:	4bc2      	ldr	r3, [pc, #776]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	220c      	movs	r2, #12
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d117      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x68>
 8001fb8:	4bbf      	ldr	r3, [pc, #764]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	23c0      	movs	r3, #192	; 0xc0
 8001fbe:	025b      	lsls	r3, r3, #9
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	025b      	lsls	r3, r3, #9
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fca:	4bbb      	ldr	r3, [pc, #748]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	029b      	lsls	r3, r3, #10
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d100      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x58>
 8001fd6:	e071      	b.n	80020bc <HAL_RCC_OscConfig+0x13c>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d000      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x62>
 8001fe0:	e06c      	b.n	80020bc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	f000 fb4c 	bl	8002680 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d107      	bne.n	8002000 <HAL_RCC_OscConfig+0x80>
 8001ff0:	4bb1      	ldr	r3, [pc, #708]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4bb0      	ldr	r3, [pc, #704]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 8001ff6:	2180      	movs	r1, #128	; 0x80
 8001ff8:	0249      	lsls	r1, r1, #9
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	e02f      	b.n	8002060 <HAL_RCC_OscConfig+0xe0>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10c      	bne.n	8002022 <HAL_RCC_OscConfig+0xa2>
 8002008:	4bab      	ldr	r3, [pc, #684]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4baa      	ldr	r3, [pc, #680]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 800200e:	49ab      	ldr	r1, [pc, #684]	; (80022bc <HAL_RCC_OscConfig+0x33c>)
 8002010:	400a      	ands	r2, r1
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	4ba8      	ldr	r3, [pc, #672]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4ba7      	ldr	r3, [pc, #668]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 800201a:	49a9      	ldr	r1, [pc, #676]	; (80022c0 <HAL_RCC_OscConfig+0x340>)
 800201c:	400a      	ands	r2, r1
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	e01e      	b.n	8002060 <HAL_RCC_OscConfig+0xe0>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b05      	cmp	r3, #5
 8002028:	d10e      	bne.n	8002048 <HAL_RCC_OscConfig+0xc8>
 800202a:	4ba3      	ldr	r3, [pc, #652]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	4ba2      	ldr	r3, [pc, #648]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 8002030:	2180      	movs	r1, #128	; 0x80
 8002032:	02c9      	lsls	r1, r1, #11
 8002034:	430a      	orrs	r2, r1
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	4b9f      	ldr	r3, [pc, #636]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b9e      	ldr	r3, [pc, #632]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 800203e:	2180      	movs	r1, #128	; 0x80
 8002040:	0249      	lsls	r1, r1, #9
 8002042:	430a      	orrs	r2, r1
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	e00b      	b.n	8002060 <HAL_RCC_OscConfig+0xe0>
 8002048:	4b9b      	ldr	r3, [pc, #620]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b9a      	ldr	r3, [pc, #616]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 800204e:	499b      	ldr	r1, [pc, #620]	; (80022bc <HAL_RCC_OscConfig+0x33c>)
 8002050:	400a      	ands	r2, r1
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	4b98      	ldr	r3, [pc, #608]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b97      	ldr	r3, [pc, #604]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 800205a:	4999      	ldr	r1, [pc, #612]	; (80022c0 <HAL_RCC_OscConfig+0x340>)
 800205c:	400a      	ands	r2, r1
 800205e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d014      	beq.n	8002092 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7ff fd12 	bl	8001a90 <HAL_GetTick>
 800206c:	0003      	movs	r3, r0
 800206e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002072:	f7ff fd0d 	bl	8001a90 <HAL_GetTick>
 8002076:	0002      	movs	r2, r0
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b64      	cmp	r3, #100	; 0x64
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e2fd      	b.n	8002680 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002084:	4b8c      	ldr	r3, [pc, #560]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	029b      	lsls	r3, r3, #10
 800208c:	4013      	ands	r3, r2
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0xf2>
 8002090:	e015      	b.n	80020be <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002092:	f7ff fcfd 	bl	8001a90 <HAL_GetTick>
 8002096:	0003      	movs	r3, r0
 8002098:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800209c:	f7ff fcf8 	bl	8001a90 <HAL_GetTick>
 80020a0:	0002      	movs	r2, r0
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	; 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e2e8      	b.n	8002680 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ae:	4b82      	ldr	r3, [pc, #520]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	029b      	lsls	r3, r3, #10
 80020b6:	4013      	ands	r3, r2
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x11c>
 80020ba:	e000      	b.n	80020be <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2202      	movs	r2, #2
 80020c4:	4013      	ands	r3, r2
 80020c6:	d100      	bne.n	80020ca <HAL_RCC_OscConfig+0x14a>
 80020c8:	e06c      	b.n	80021a4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020ca:	4b7b      	ldr	r3, [pc, #492]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	220c      	movs	r2, #12
 80020d0:	4013      	ands	r3, r2
 80020d2:	d00e      	beq.n	80020f2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020d4:	4b78      	ldr	r3, [pc, #480]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	220c      	movs	r2, #12
 80020da:	4013      	ands	r3, r2
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d11f      	bne.n	8002120 <HAL_RCC_OscConfig+0x1a0>
 80020e0:	4b75      	ldr	r3, [pc, #468]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	23c0      	movs	r3, #192	; 0xc0
 80020e6:	025b      	lsls	r3, r3, #9
 80020e8:	401a      	ands	r2, r3
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	021b      	lsls	r3, r3, #8
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d116      	bne.n	8002120 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	4b71      	ldr	r3, [pc, #452]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2202      	movs	r2, #2
 80020f8:	4013      	ands	r3, r2
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_OscConfig+0x188>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d001      	beq.n	8002108 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e2bb      	b.n	8002680 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002108:	4b6b      	ldr	r3, [pc, #428]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	22f8      	movs	r2, #248	; 0xf8
 800210e:	4393      	bics	r3, r2
 8002110:	0019      	movs	r1, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	00da      	lsls	r2, r3, #3
 8002118:	4b67      	ldr	r3, [pc, #412]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 800211a:	430a      	orrs	r2, r1
 800211c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	e041      	b.n	80021a4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d024      	beq.n	8002172 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002128:	4b63      	ldr	r3, [pc, #396]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b62      	ldr	r3, [pc, #392]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 800212e:	2101      	movs	r1, #1
 8002130:	430a      	orrs	r2, r1
 8002132:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7ff fcac 	bl	8001a90 <HAL_GetTick>
 8002138:	0003      	movs	r3, r0
 800213a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800213e:	f7ff fca7 	bl	8001a90 <HAL_GetTick>
 8002142:	0002      	movs	r2, r0
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e297      	b.n	8002680 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002150:	4b59      	ldr	r3, [pc, #356]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2202      	movs	r2, #2
 8002156:	4013      	ands	r3, r2
 8002158:	d0f1      	beq.n	800213e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215a:	4b57      	ldr	r3, [pc, #348]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	22f8      	movs	r2, #248	; 0xf8
 8002160:	4393      	bics	r3, r2
 8002162:	0019      	movs	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	00da      	lsls	r2, r3, #3
 800216a:	4b53      	ldr	r3, [pc, #332]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 800216c:	430a      	orrs	r2, r1
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	e018      	b.n	80021a4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002172:	4b51      	ldr	r3, [pc, #324]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	4b50      	ldr	r3, [pc, #320]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 8002178:	2101      	movs	r1, #1
 800217a:	438a      	bics	r2, r1
 800217c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217e:	f7ff fc87 	bl	8001a90 <HAL_GetTick>
 8002182:	0003      	movs	r3, r0
 8002184:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002188:	f7ff fc82 	bl	8001a90 <HAL_GetTick>
 800218c:	0002      	movs	r2, r0
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e272      	b.n	8002680 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219a:	4b47      	ldr	r3, [pc, #284]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2202      	movs	r2, #2
 80021a0:	4013      	ands	r3, r2
 80021a2:	d1f1      	bne.n	8002188 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2208      	movs	r2, #8
 80021aa:	4013      	ands	r3, r2
 80021ac:	d036      	beq.n	800221c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d019      	beq.n	80021ea <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b6:	4b40      	ldr	r3, [pc, #256]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 80021b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ba:	4b3f      	ldr	r3, [pc, #252]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 80021bc:	2101      	movs	r1, #1
 80021be:	430a      	orrs	r2, r1
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c2:	f7ff fc65 	bl	8001a90 <HAL_GetTick>
 80021c6:	0003      	movs	r3, r0
 80021c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021cc:	f7ff fc60 	bl	8001a90 <HAL_GetTick>
 80021d0:	0002      	movs	r2, r0
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e250      	b.n	8002680 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021de:	4b36      	ldr	r3, [pc, #216]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	2202      	movs	r2, #2
 80021e4:	4013      	ands	r3, r2
 80021e6:	d0f1      	beq.n	80021cc <HAL_RCC_OscConfig+0x24c>
 80021e8:	e018      	b.n	800221c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ea:	4b33      	ldr	r3, [pc, #204]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 80021ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ee:	4b32      	ldr	r3, [pc, #200]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 80021f0:	2101      	movs	r1, #1
 80021f2:	438a      	bics	r2, r1
 80021f4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f6:	f7ff fc4b 	bl	8001a90 <HAL_GetTick>
 80021fa:	0003      	movs	r3, r0
 80021fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002200:	f7ff fc46 	bl	8001a90 <HAL_GetTick>
 8002204:	0002      	movs	r2, r0
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e236      	b.n	8002680 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002212:	4b29      	ldr	r3, [pc, #164]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	2202      	movs	r2, #2
 8002218:	4013      	ands	r3, r2
 800221a:	d1f1      	bne.n	8002200 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2204      	movs	r2, #4
 8002222:	4013      	ands	r3, r2
 8002224:	d100      	bne.n	8002228 <HAL_RCC_OscConfig+0x2a8>
 8002226:	e0b5      	b.n	8002394 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002228:	201f      	movs	r0, #31
 800222a:	183b      	adds	r3, r7, r0
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002230:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 8002232:	69da      	ldr	r2, [r3, #28]
 8002234:	2380      	movs	r3, #128	; 0x80
 8002236:	055b      	lsls	r3, r3, #21
 8002238:	4013      	ands	r3, r2
 800223a:	d110      	bne.n	800225e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223c:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 8002242:	2180      	movs	r1, #128	; 0x80
 8002244:	0549      	lsls	r1, r1, #21
 8002246:	430a      	orrs	r2, r1
 8002248:	61da      	str	r2, [r3, #28]
 800224a:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 800224c:	69da      	ldr	r2, [r3, #28]
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	055b      	lsls	r3, r3, #21
 8002252:	4013      	ands	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002258:	183b      	adds	r3, r7, r0
 800225a:	2201      	movs	r2, #1
 800225c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225e:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <HAL_RCC_OscConfig+0x344>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4013      	ands	r3, r2
 8002268:	d11a      	bne.n	80022a0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800226a:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <HAL_RCC_OscConfig+0x344>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <HAL_RCC_OscConfig+0x344>)
 8002270:	2180      	movs	r1, #128	; 0x80
 8002272:	0049      	lsls	r1, r1, #1
 8002274:	430a      	orrs	r2, r1
 8002276:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002278:	f7ff fc0a 	bl	8001a90 <HAL_GetTick>
 800227c:	0003      	movs	r3, r0
 800227e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002282:	f7ff fc05 	bl	8001a90 <HAL_GetTick>
 8002286:	0002      	movs	r2, r0
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b64      	cmp	r3, #100	; 0x64
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e1f5      	b.n	8002680 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_RCC_OscConfig+0x344>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4013      	ands	r3, r2
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d10f      	bne.n	80022c8 <HAL_RCC_OscConfig+0x348>
 80022a8:	4b03      	ldr	r3, [pc, #12]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 80022aa:	6a1a      	ldr	r2, [r3, #32]
 80022ac:	4b02      	ldr	r3, [pc, #8]	; (80022b8 <HAL_RCC_OscConfig+0x338>)
 80022ae:	2101      	movs	r1, #1
 80022b0:	430a      	orrs	r2, r1
 80022b2:	621a      	str	r2, [r3, #32]
 80022b4:	e036      	b.n	8002324 <HAL_RCC_OscConfig+0x3a4>
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	40021000 	.word	0x40021000
 80022bc:	fffeffff 	.word	0xfffeffff
 80022c0:	fffbffff 	.word	0xfffbffff
 80022c4:	40007000 	.word	0x40007000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10c      	bne.n	80022ea <HAL_RCC_OscConfig+0x36a>
 80022d0:	4bca      	ldr	r3, [pc, #808]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80022d2:	6a1a      	ldr	r2, [r3, #32]
 80022d4:	4bc9      	ldr	r3, [pc, #804]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80022d6:	2101      	movs	r1, #1
 80022d8:	438a      	bics	r2, r1
 80022da:	621a      	str	r2, [r3, #32]
 80022dc:	4bc7      	ldr	r3, [pc, #796]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80022de:	6a1a      	ldr	r2, [r3, #32]
 80022e0:	4bc6      	ldr	r3, [pc, #792]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80022e2:	2104      	movs	r1, #4
 80022e4:	438a      	bics	r2, r1
 80022e6:	621a      	str	r2, [r3, #32]
 80022e8:	e01c      	b.n	8002324 <HAL_RCC_OscConfig+0x3a4>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b05      	cmp	r3, #5
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0x38c>
 80022f2:	4bc2      	ldr	r3, [pc, #776]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80022f4:	6a1a      	ldr	r2, [r3, #32]
 80022f6:	4bc1      	ldr	r3, [pc, #772]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80022f8:	2104      	movs	r1, #4
 80022fa:	430a      	orrs	r2, r1
 80022fc:	621a      	str	r2, [r3, #32]
 80022fe:	4bbf      	ldr	r3, [pc, #764]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 8002300:	6a1a      	ldr	r2, [r3, #32]
 8002302:	4bbe      	ldr	r3, [pc, #760]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 8002304:	2101      	movs	r1, #1
 8002306:	430a      	orrs	r2, r1
 8002308:	621a      	str	r2, [r3, #32]
 800230a:	e00b      	b.n	8002324 <HAL_RCC_OscConfig+0x3a4>
 800230c:	4bbb      	ldr	r3, [pc, #748]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 800230e:	6a1a      	ldr	r2, [r3, #32]
 8002310:	4bba      	ldr	r3, [pc, #744]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 8002312:	2101      	movs	r1, #1
 8002314:	438a      	bics	r2, r1
 8002316:	621a      	str	r2, [r3, #32]
 8002318:	4bb8      	ldr	r3, [pc, #736]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 800231a:	6a1a      	ldr	r2, [r3, #32]
 800231c:	4bb7      	ldr	r3, [pc, #732]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 800231e:	2104      	movs	r1, #4
 8002320:	438a      	bics	r2, r1
 8002322:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d014      	beq.n	8002356 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232c:	f7ff fbb0 	bl	8001a90 <HAL_GetTick>
 8002330:	0003      	movs	r3, r0
 8002332:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002334:	e009      	b.n	800234a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002336:	f7ff fbab 	bl	8001a90 <HAL_GetTick>
 800233a:	0002      	movs	r2, r0
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	4aaf      	ldr	r2, [pc, #700]	; (8002600 <HAL_RCC_OscConfig+0x680>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e19a      	b.n	8002680 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234a:	4bac      	ldr	r3, [pc, #688]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	2202      	movs	r2, #2
 8002350:	4013      	ands	r3, r2
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x3b6>
 8002354:	e013      	b.n	800237e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002356:	f7ff fb9b 	bl	8001a90 <HAL_GetTick>
 800235a:	0003      	movs	r3, r0
 800235c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235e:	e009      	b.n	8002374 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002360:	f7ff fb96 	bl	8001a90 <HAL_GetTick>
 8002364:	0002      	movs	r2, r0
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	4aa5      	ldr	r2, [pc, #660]	; (8002600 <HAL_RCC_OscConfig+0x680>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e185      	b.n	8002680 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002374:	4ba1      	ldr	r3, [pc, #644]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	2202      	movs	r2, #2
 800237a:	4013      	ands	r3, r2
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800237e:	231f      	movs	r3, #31
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d105      	bne.n	8002394 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002388:	4b9c      	ldr	r3, [pc, #624]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 800238a:	69da      	ldr	r2, [r3, #28]
 800238c:	4b9b      	ldr	r3, [pc, #620]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 800238e:	499d      	ldr	r1, [pc, #628]	; (8002604 <HAL_RCC_OscConfig+0x684>)
 8002390:	400a      	ands	r2, r1
 8002392:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2210      	movs	r2, #16
 800239a:	4013      	ands	r3, r2
 800239c:	d063      	beq.n	8002466 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d12a      	bne.n	80023fc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80023a6:	4b95      	ldr	r3, [pc, #596]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80023a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023aa:	4b94      	ldr	r3, [pc, #592]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80023ac:	2104      	movs	r1, #4
 80023ae:	430a      	orrs	r2, r1
 80023b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80023b2:	4b92      	ldr	r3, [pc, #584]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80023b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023b6:	4b91      	ldr	r3, [pc, #580]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80023b8:	2101      	movs	r1, #1
 80023ba:	430a      	orrs	r2, r1
 80023bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023be:	f7ff fb67 	bl	8001a90 <HAL_GetTick>
 80023c2:	0003      	movs	r3, r0
 80023c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023c8:	f7ff fb62 	bl	8001a90 <HAL_GetTick>
 80023cc:	0002      	movs	r2, r0
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e152      	b.n	8002680 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80023da:	4b88      	ldr	r3, [pc, #544]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80023dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023de:	2202      	movs	r2, #2
 80023e0:	4013      	ands	r3, r2
 80023e2:	d0f1      	beq.n	80023c8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023e4:	4b85      	ldr	r3, [pc, #532]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80023e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e8:	22f8      	movs	r2, #248	; 0xf8
 80023ea:	4393      	bics	r3, r2
 80023ec:	0019      	movs	r1, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	00da      	lsls	r2, r3, #3
 80023f4:	4b81      	ldr	r3, [pc, #516]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80023f6:	430a      	orrs	r2, r1
 80023f8:	635a      	str	r2, [r3, #52]	; 0x34
 80023fa:	e034      	b.n	8002466 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	3305      	adds	r3, #5
 8002402:	d111      	bne.n	8002428 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002404:	4b7d      	ldr	r3, [pc, #500]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 8002406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002408:	4b7c      	ldr	r3, [pc, #496]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 800240a:	2104      	movs	r1, #4
 800240c:	438a      	bics	r2, r1
 800240e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002410:	4b7a      	ldr	r3, [pc, #488]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 8002412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002414:	22f8      	movs	r2, #248	; 0xf8
 8002416:	4393      	bics	r3, r2
 8002418:	0019      	movs	r1, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	00da      	lsls	r2, r3, #3
 8002420:	4b76      	ldr	r3, [pc, #472]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 8002422:	430a      	orrs	r2, r1
 8002424:	635a      	str	r2, [r3, #52]	; 0x34
 8002426:	e01e      	b.n	8002466 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002428:	4b74      	ldr	r3, [pc, #464]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 800242a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800242c:	4b73      	ldr	r3, [pc, #460]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 800242e:	2104      	movs	r1, #4
 8002430:	430a      	orrs	r2, r1
 8002432:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002434:	4b71      	ldr	r3, [pc, #452]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 8002436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002438:	4b70      	ldr	r3, [pc, #448]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 800243a:	2101      	movs	r1, #1
 800243c:	438a      	bics	r2, r1
 800243e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002440:	f7ff fb26 	bl	8001a90 <HAL_GetTick>
 8002444:	0003      	movs	r3, r0
 8002446:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800244a:	f7ff fb21 	bl	8001a90 <HAL_GetTick>
 800244e:	0002      	movs	r2, r0
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e111      	b.n	8002680 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800245c:	4b67      	ldr	r3, [pc, #412]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 800245e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002460:	2202      	movs	r2, #2
 8002462:	4013      	ands	r3, r2
 8002464:	d1f1      	bne.n	800244a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2220      	movs	r2, #32
 800246c:	4013      	ands	r3, r2
 800246e:	d05c      	beq.n	800252a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002470:	4b62      	ldr	r3, [pc, #392]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	220c      	movs	r2, #12
 8002476:	4013      	ands	r3, r2
 8002478:	2b0c      	cmp	r3, #12
 800247a:	d00e      	beq.n	800249a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800247c:	4b5f      	ldr	r3, [pc, #380]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	220c      	movs	r2, #12
 8002482:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002484:	2b08      	cmp	r3, #8
 8002486:	d114      	bne.n	80024b2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002488:	4b5c      	ldr	r3, [pc, #368]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	23c0      	movs	r3, #192	; 0xc0
 800248e:	025b      	lsls	r3, r3, #9
 8002490:	401a      	ands	r2, r3
 8002492:	23c0      	movs	r3, #192	; 0xc0
 8002494:	025b      	lsls	r3, r3, #9
 8002496:	429a      	cmp	r2, r3
 8002498:	d10b      	bne.n	80024b2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800249a:	4b58      	ldr	r3, [pc, #352]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 800249c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	025b      	lsls	r3, r3, #9
 80024a2:	4013      	ands	r3, r2
 80024a4:	d040      	beq.n	8002528 <HAL_RCC_OscConfig+0x5a8>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d03c      	beq.n	8002528 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e0e6      	b.n	8002680 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01b      	beq.n	80024f2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80024ba:	4b50      	ldr	r3, [pc, #320]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80024bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024be:	4b4f      	ldr	r3, [pc, #316]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80024c0:	2180      	movs	r1, #128	; 0x80
 80024c2:	0249      	lsls	r1, r1, #9
 80024c4:	430a      	orrs	r2, r1
 80024c6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7ff fae2 	bl	8001a90 <HAL_GetTick>
 80024cc:	0003      	movs	r3, r0
 80024ce:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024d2:	f7ff fadd 	bl	8001a90 <HAL_GetTick>
 80024d6:	0002      	movs	r2, r0
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e0cd      	b.n	8002680 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80024e4:	4b45      	ldr	r3, [pc, #276]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80024e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	025b      	lsls	r3, r3, #9
 80024ec:	4013      	ands	r3, r2
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x552>
 80024f0:	e01b      	b.n	800252a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80024f2:	4b42      	ldr	r3, [pc, #264]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80024f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f6:	4b41      	ldr	r3, [pc, #260]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80024f8:	4943      	ldr	r1, [pc, #268]	; (8002608 <HAL_RCC_OscConfig+0x688>)
 80024fa:	400a      	ands	r2, r1
 80024fc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fe:	f7ff fac7 	bl	8001a90 <HAL_GetTick>
 8002502:	0003      	movs	r3, r0
 8002504:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002508:	f7ff fac2 	bl	8001a90 <HAL_GetTick>
 800250c:	0002      	movs	r2, r0
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e0b2      	b.n	8002680 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800251a:	4b38      	ldr	r3, [pc, #224]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 800251c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	025b      	lsls	r3, r3, #9
 8002522:	4013      	ands	r3, r2
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x588>
 8002526:	e000      	b.n	800252a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002528:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	2b00      	cmp	r3, #0
 8002530:	d100      	bne.n	8002534 <HAL_RCC_OscConfig+0x5b4>
 8002532:	e0a4      	b.n	800267e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002534:	4b31      	ldr	r3, [pc, #196]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	220c      	movs	r2, #12
 800253a:	4013      	ands	r3, r2
 800253c:	2b08      	cmp	r3, #8
 800253e:	d100      	bne.n	8002542 <HAL_RCC_OscConfig+0x5c2>
 8002540:	e078      	b.n	8002634 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	2b02      	cmp	r3, #2
 8002548:	d14c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254a:	4b2c      	ldr	r3, [pc, #176]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 8002550:	492e      	ldr	r1, [pc, #184]	; (800260c <HAL_RCC_OscConfig+0x68c>)
 8002552:	400a      	ands	r2, r1
 8002554:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7ff fa9b 	bl	8001a90 <HAL_GetTick>
 800255a:	0003      	movs	r3, r0
 800255c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002560:	f7ff fa96 	bl	8001a90 <HAL_GetTick>
 8002564:	0002      	movs	r2, r0
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e086      	b.n	8002680 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002572:	4b22      	ldr	r3, [pc, #136]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	049b      	lsls	r3, r3, #18
 800257a:	4013      	ands	r3, r2
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800257e:	4b1f      	ldr	r3, [pc, #124]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	220f      	movs	r2, #15
 8002584:	4393      	bics	r3, r2
 8002586:	0019      	movs	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800258c:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 800258e:	430a      	orrs	r2, r1
 8002590:	62da      	str	r2, [r3, #44]	; 0x2c
 8002592:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4a1e      	ldr	r2, [pc, #120]	; (8002610 <HAL_RCC_OscConfig+0x690>)
 8002598:	4013      	ands	r3, r2
 800259a:	0019      	movs	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	431a      	orrs	r2, r3
 80025a6:	4b15      	ldr	r3, [pc, #84]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80025a8:	430a      	orrs	r2, r1
 80025aa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	0449      	lsls	r1, r1, #17
 80025b6:	430a      	orrs	r2, r1
 80025b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ba:	f7ff fa69 	bl	8001a90 <HAL_GetTick>
 80025be:	0003      	movs	r3, r0
 80025c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c4:	f7ff fa64 	bl	8001a90 <HAL_GetTick>
 80025c8:	0002      	movs	r2, r0
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e054      	b.n	8002680 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	049b      	lsls	r3, r3, #18
 80025de:	4013      	ands	r3, r2
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x644>
 80025e2:	e04c      	b.n	800267e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <HAL_RCC_OscConfig+0x67c>)
 80025ea:	4908      	ldr	r1, [pc, #32]	; (800260c <HAL_RCC_OscConfig+0x68c>)
 80025ec:	400a      	ands	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7ff fa4e 	bl	8001a90 <HAL_GetTick>
 80025f4:	0003      	movs	r3, r0
 80025f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f8:	e015      	b.n	8002626 <HAL_RCC_OscConfig+0x6a6>
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	40021000 	.word	0x40021000
 8002600:	00001388 	.word	0x00001388
 8002604:	efffffff 	.word	0xefffffff
 8002608:	fffeffff 	.word	0xfffeffff
 800260c:	feffffff 	.word	0xfeffffff
 8002610:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002614:	f7ff fa3c 	bl	8001a90 <HAL_GetTick>
 8002618:	0002      	movs	r2, r0
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e02c      	b.n	8002680 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002626:	4b18      	ldr	r3, [pc, #96]	; (8002688 <HAL_RCC_OscConfig+0x708>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	049b      	lsls	r3, r3, #18
 800262e:	4013      	ands	r3, r2
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x694>
 8002632:	e024      	b.n	800267e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e01f      	b.n	8002680 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <HAL_RCC_OscConfig+0x708>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_RCC_OscConfig+0x708>)
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	23c0      	movs	r3, #192	; 0xc0
 8002650:	025b      	lsls	r3, r3, #9
 8002652:	401a      	ands	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	429a      	cmp	r2, r3
 800265a:	d10e      	bne.n	800267a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	220f      	movs	r2, #15
 8002660:	401a      	ands	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d107      	bne.n	800267a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	23f0      	movs	r3, #240	; 0xf0
 800266e:	039b      	lsls	r3, r3, #14
 8002670:	401a      	ands	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002676:	429a      	cmp	r2, r3
 8002678:	d001      	beq.n	800267e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	0018      	movs	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	b008      	add	sp, #32
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40021000 	.word	0x40021000

0800268c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0bf      	b.n	8002820 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026a0:	4b61      	ldr	r3, [pc, #388]	; (8002828 <HAL_RCC_ClockConfig+0x19c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2201      	movs	r2, #1
 80026a6:	4013      	ands	r3, r2
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d911      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b5e      	ldr	r3, [pc, #376]	; (8002828 <HAL_RCC_ClockConfig+0x19c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2201      	movs	r2, #1
 80026b4:	4393      	bics	r3, r2
 80026b6:	0019      	movs	r1, r3
 80026b8:	4b5b      	ldr	r3, [pc, #364]	; (8002828 <HAL_RCC_ClockConfig+0x19c>)
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c0:	4b59      	ldr	r3, [pc, #356]	; (8002828 <HAL_RCC_ClockConfig+0x19c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2201      	movs	r2, #1
 80026c6:	4013      	ands	r3, r2
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d001      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e0a6      	b.n	8002820 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2202      	movs	r2, #2
 80026d8:	4013      	ands	r3, r2
 80026da:	d015      	beq.n	8002708 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2204      	movs	r2, #4
 80026e2:	4013      	ands	r3, r2
 80026e4:	d006      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80026e6:	4b51      	ldr	r3, [pc, #324]	; (800282c <HAL_RCC_ClockConfig+0x1a0>)
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	4b50      	ldr	r3, [pc, #320]	; (800282c <HAL_RCC_ClockConfig+0x1a0>)
 80026ec:	21e0      	movs	r1, #224	; 0xe0
 80026ee:	00c9      	lsls	r1, r1, #3
 80026f0:	430a      	orrs	r2, r1
 80026f2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f4:	4b4d      	ldr	r3, [pc, #308]	; (800282c <HAL_RCC_ClockConfig+0x1a0>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	22f0      	movs	r2, #240	; 0xf0
 80026fa:	4393      	bics	r3, r2
 80026fc:	0019      	movs	r1, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	4b4a      	ldr	r3, [pc, #296]	; (800282c <HAL_RCC_ClockConfig+0x1a0>)
 8002704:	430a      	orrs	r2, r1
 8002706:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2201      	movs	r2, #1
 800270e:	4013      	ands	r3, r2
 8002710:	d04c      	beq.n	80027ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	4b44      	ldr	r3, [pc, #272]	; (800282c <HAL_RCC_ClockConfig+0x1a0>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	029b      	lsls	r3, r3, #10
 8002722:	4013      	ands	r3, r2
 8002724:	d120      	bne.n	8002768 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e07a      	b.n	8002820 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d107      	bne.n	8002742 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002732:	4b3e      	ldr	r3, [pc, #248]	; (800282c <HAL_RCC_ClockConfig+0x1a0>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	049b      	lsls	r3, r3, #18
 800273a:	4013      	ands	r3, r2
 800273c:	d114      	bne.n	8002768 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e06e      	b.n	8002820 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b03      	cmp	r3, #3
 8002748:	d107      	bne.n	800275a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800274a:	4b38      	ldr	r3, [pc, #224]	; (800282c <HAL_RCC_ClockConfig+0x1a0>)
 800274c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	025b      	lsls	r3, r3, #9
 8002752:	4013      	ands	r3, r2
 8002754:	d108      	bne.n	8002768 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e062      	b.n	8002820 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275a:	4b34      	ldr	r3, [pc, #208]	; (800282c <HAL_RCC_ClockConfig+0x1a0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2202      	movs	r2, #2
 8002760:	4013      	ands	r3, r2
 8002762:	d101      	bne.n	8002768 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e05b      	b.n	8002820 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002768:	4b30      	ldr	r3, [pc, #192]	; (800282c <HAL_RCC_ClockConfig+0x1a0>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2203      	movs	r2, #3
 800276e:	4393      	bics	r3, r2
 8002770:	0019      	movs	r1, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	4b2d      	ldr	r3, [pc, #180]	; (800282c <HAL_RCC_ClockConfig+0x1a0>)
 8002778:	430a      	orrs	r2, r1
 800277a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800277c:	f7ff f988 	bl	8001a90 <HAL_GetTick>
 8002780:	0003      	movs	r3, r0
 8002782:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002784:	e009      	b.n	800279a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002786:	f7ff f983 	bl	8001a90 <HAL_GetTick>
 800278a:	0002      	movs	r2, r0
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	4a27      	ldr	r2, [pc, #156]	; (8002830 <HAL_RCC_ClockConfig+0x1a4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e042      	b.n	8002820 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279a:	4b24      	ldr	r3, [pc, #144]	; (800282c <HAL_RCC_ClockConfig+0x1a0>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	220c      	movs	r2, #12
 80027a0:	401a      	ands	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d1ec      	bne.n	8002786 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027ac:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <HAL_RCC_ClockConfig+0x19c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2201      	movs	r2, #1
 80027b2:	4013      	ands	r3, r2
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d211      	bcs.n	80027de <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ba:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <HAL_RCC_ClockConfig+0x19c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2201      	movs	r2, #1
 80027c0:	4393      	bics	r3, r2
 80027c2:	0019      	movs	r1, r3
 80027c4:	4b18      	ldr	r3, [pc, #96]	; (8002828 <HAL_RCC_ClockConfig+0x19c>)
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027cc:	4b16      	ldr	r3, [pc, #88]	; (8002828 <HAL_RCC_ClockConfig+0x19c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2201      	movs	r2, #1
 80027d2:	4013      	ands	r3, r2
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d001      	beq.n	80027de <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e020      	b.n	8002820 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2204      	movs	r2, #4
 80027e4:	4013      	ands	r3, r2
 80027e6:	d009      	beq.n	80027fc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80027e8:	4b10      	ldr	r3, [pc, #64]	; (800282c <HAL_RCC_ClockConfig+0x1a0>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4a11      	ldr	r2, [pc, #68]	; (8002834 <HAL_RCC_ClockConfig+0x1a8>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	0019      	movs	r1, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <HAL_RCC_ClockConfig+0x1a0>)
 80027f8:	430a      	orrs	r2, r1
 80027fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027fc:	f000 f820 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 8002800:	0001      	movs	r1, r0
 8002802:	4b0a      	ldr	r3, [pc, #40]	; (800282c <HAL_RCC_ClockConfig+0x1a0>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	220f      	movs	r2, #15
 800280a:	4013      	ands	r3, r2
 800280c:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <HAL_RCC_ClockConfig+0x1ac>)
 800280e:	5cd3      	ldrb	r3, [r2, r3]
 8002810:	000a      	movs	r2, r1
 8002812:	40da      	lsrs	r2, r3
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <HAL_RCC_ClockConfig+0x1b0>)
 8002816:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002818:	2000      	movs	r0, #0
 800281a:	f7ff f8f3 	bl	8001a04 <HAL_InitTick>
  
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	b004      	add	sp, #16
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40022000 	.word	0x40022000
 800282c:	40021000 	.word	0x40021000
 8002830:	00001388 	.word	0x00001388
 8002834:	fffff8ff 	.word	0xfffff8ff
 8002838:	08003c48 	.word	0x08003c48
 800283c:	20000000 	.word	0x20000000

08002840 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b08f      	sub	sp, #60	; 0x3c
 8002844:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002846:	2314      	movs	r3, #20
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	4a38      	ldr	r2, [pc, #224]	; (800292c <HAL_RCC_GetSysClockFreq+0xec>)
 800284c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800284e:	c313      	stmia	r3!, {r0, r1, r4}
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002854:	1d3b      	adds	r3, r7, #4
 8002856:	4a36      	ldr	r2, [pc, #216]	; (8002930 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002858:	ca13      	ldmia	r2!, {r0, r1, r4}
 800285a:	c313      	stmia	r3!, {r0, r1, r4}
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002864:	2300      	movs	r3, #0
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
 8002868:	2300      	movs	r3, #0
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
 800286c:	2300      	movs	r3, #0
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002874:	4b2f      	ldr	r3, [pc, #188]	; (8002934 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287c:	220c      	movs	r2, #12
 800287e:	4013      	ands	r3, r2
 8002880:	2b0c      	cmp	r3, #12
 8002882:	d047      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0xd4>
 8002884:	d849      	bhi.n	800291a <HAL_RCC_GetSysClockFreq+0xda>
 8002886:	2b04      	cmp	r3, #4
 8002888:	d002      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x50>
 800288a:	2b08      	cmp	r3, #8
 800288c:	d003      	beq.n	8002896 <HAL_RCC_GetSysClockFreq+0x56>
 800288e:	e044      	b.n	800291a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002890:	4b29      	ldr	r3, [pc, #164]	; (8002938 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002894:	e044      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002898:	0c9b      	lsrs	r3, r3, #18
 800289a:	220f      	movs	r2, #15
 800289c:	4013      	ands	r3, r2
 800289e:	2214      	movs	r2, #20
 80028a0:	18ba      	adds	r2, r7, r2
 80028a2:	5cd3      	ldrb	r3, [r2, r3]
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80028a6:	4b23      	ldr	r3, [pc, #140]	; (8002934 <HAL_RCC_GetSysClockFreq+0xf4>)
 80028a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028aa:	220f      	movs	r2, #15
 80028ac:	4013      	ands	r3, r2
 80028ae:	1d3a      	adds	r2, r7, #4
 80028b0:	5cd3      	ldrb	r3, [r2, r3]
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80028b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b6:	23c0      	movs	r3, #192	; 0xc0
 80028b8:	025b      	lsls	r3, r3, #9
 80028ba:	401a      	ands	r2, r3
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	025b      	lsls	r3, r3, #9
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d109      	bne.n	80028d8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028c6:	481c      	ldr	r0, [pc, #112]	; (8002938 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028c8:	f7fd fc1c 	bl	8000104 <__udivsi3>
 80028cc:	0003      	movs	r3, r0
 80028ce:	001a      	movs	r2, r3
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	4353      	muls	r3, r2
 80028d4:	637b      	str	r3, [r7, #52]	; 0x34
 80028d6:	e01a      	b.n	800290e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80028d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028da:	23c0      	movs	r3, #192	; 0xc0
 80028dc:	025b      	lsls	r3, r3, #9
 80028de:	401a      	ands	r2, r3
 80028e0:	23c0      	movs	r3, #192	; 0xc0
 80028e2:	025b      	lsls	r3, r3, #9
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d109      	bne.n	80028fc <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028ea:	4814      	ldr	r0, [pc, #80]	; (800293c <HAL_RCC_GetSysClockFreq+0xfc>)
 80028ec:	f7fd fc0a 	bl	8000104 <__udivsi3>
 80028f0:	0003      	movs	r3, r0
 80028f2:	001a      	movs	r2, r3
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	4353      	muls	r3, r2
 80028f8:	637b      	str	r3, [r7, #52]	; 0x34
 80028fa:	e008      	b.n	800290e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028fe:	480e      	ldr	r0, [pc, #56]	; (8002938 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002900:	f7fd fc00 	bl	8000104 <__udivsi3>
 8002904:	0003      	movs	r3, r0
 8002906:	001a      	movs	r2, r3
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	4353      	muls	r3, r2
 800290c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800290e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002910:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002912:	e005      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002914:	4b09      	ldr	r3, [pc, #36]	; (800293c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002916:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002918:	e002      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800291a:	4b07      	ldr	r3, [pc, #28]	; (8002938 <HAL_RCC_GetSysClockFreq+0xf8>)
 800291c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800291e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002922:	0018      	movs	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	b00f      	add	sp, #60	; 0x3c
 8002928:	bd90      	pop	{r4, r7, pc}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	08003be8 	.word	0x08003be8
 8002930:	08003bf8 	.word	0x08003bf8
 8002934:	40021000 	.word	0x40021000
 8002938:	007a1200 	.word	0x007a1200
 800293c:	02dc6c00 	.word	0x02dc6c00

08002940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002944:	4b02      	ldr	r3, [pc, #8]	; (8002950 <HAL_RCC_GetHCLKFreq+0x10>)
 8002946:	681b      	ldr	r3, [r3, #0]
}
 8002948:	0018      	movs	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	20000000 	.word	0x20000000

08002954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002958:	f7ff fff2 	bl	8002940 <HAL_RCC_GetHCLKFreq>
 800295c:	0001      	movs	r1, r0
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	0a1b      	lsrs	r3, r3, #8
 8002964:	2207      	movs	r2, #7
 8002966:	4013      	ands	r3, r2
 8002968:	4a04      	ldr	r2, [pc, #16]	; (800297c <HAL_RCC_GetPCLK1Freq+0x28>)
 800296a:	5cd3      	ldrb	r3, [r2, r3]
 800296c:	40d9      	lsrs	r1, r3
 800296e:	000b      	movs	r3, r1
}    
 8002970:	0018      	movs	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	40021000 	.word	0x40021000
 800297c:	08003c58 	.word	0x08003c58

08002980 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	025b      	lsls	r3, r3, #9
 8002998:	4013      	ands	r3, r2
 800299a:	d100      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800299c:	e08e      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800299e:	2017      	movs	r0, #23
 80029a0:	183b      	adds	r3, r7, r0
 80029a2:	2200      	movs	r2, #0
 80029a4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a6:	4b6e      	ldr	r3, [pc, #440]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	055b      	lsls	r3, r3, #21
 80029ae:	4013      	ands	r3, r2
 80029b0:	d110      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	4b6b      	ldr	r3, [pc, #428]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029b4:	69da      	ldr	r2, [r3, #28]
 80029b6:	4b6a      	ldr	r3, [pc, #424]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029b8:	2180      	movs	r1, #128	; 0x80
 80029ba:	0549      	lsls	r1, r1, #21
 80029bc:	430a      	orrs	r2, r1
 80029be:	61da      	str	r2, [r3, #28]
 80029c0:	4b67      	ldr	r3, [pc, #412]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029c2:	69da      	ldr	r2, [r3, #28]
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	055b      	lsls	r3, r3, #21
 80029c8:	4013      	ands	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ce:	183b      	adds	r3, r7, r0
 80029d0:	2201      	movs	r2, #1
 80029d2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d4:	4b63      	ldr	r3, [pc, #396]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4013      	ands	r3, r2
 80029de:	d11a      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e0:	4b60      	ldr	r3, [pc, #384]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b5f      	ldr	r3, [pc, #380]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80029e6:	2180      	movs	r1, #128	; 0x80
 80029e8:	0049      	lsls	r1, r1, #1
 80029ea:	430a      	orrs	r2, r1
 80029ec:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ee:	f7ff f84f 	bl	8001a90 <HAL_GetTick>
 80029f2:	0003      	movs	r3, r0
 80029f4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f6:	e008      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f8:	f7ff f84a 	bl	8001a90 <HAL_GetTick>
 80029fc:	0002      	movs	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	; 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e0a6      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0a:	4b56      	ldr	r3, [pc, #344]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4013      	ands	r3, r2
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a16:	4b52      	ldr	r3, [pc, #328]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a18:	6a1a      	ldr	r2, [r3, #32]
 8002a1a:	23c0      	movs	r3, #192	; 0xc0
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4013      	ands	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d034      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	23c0      	movs	r3, #192	; 0xc0
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4013      	ands	r3, r2
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d02c      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a38:	4b49      	ldr	r3, [pc, #292]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	4a4a      	ldr	r2, [pc, #296]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a42:	4b47      	ldr	r3, [pc, #284]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a44:	6a1a      	ldr	r2, [r3, #32]
 8002a46:	4b46      	ldr	r3, [pc, #280]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a48:	2180      	movs	r1, #128	; 0x80
 8002a4a:	0249      	lsls	r1, r1, #9
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a50:	4b43      	ldr	r3, [pc, #268]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a52:	6a1a      	ldr	r2, [r3, #32]
 8002a54:	4b42      	ldr	r3, [pc, #264]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a56:	4945      	ldr	r1, [pc, #276]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002a58:	400a      	ands	r2, r1
 8002a5a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a5c:	4b40      	ldr	r3, [pc, #256]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	4013      	ands	r3, r2
 8002a68:	d013      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6a:	f7ff f811 	bl	8001a90 <HAL_GetTick>
 8002a6e:	0003      	movs	r3, r0
 8002a70:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a72:	e009      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7ff f80c 	bl	8001a90 <HAL_GetTick>
 8002a78:	0002      	movs	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	4a3c      	ldr	r2, [pc, #240]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e067      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a88:	4b35      	ldr	r3, [pc, #212]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a92:	4b33      	ldr	r3, [pc, #204]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	4a34      	ldr	r2, [pc, #208]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	0019      	movs	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	4b2f      	ldr	r3, [pc, #188]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002aa6:	2317      	movs	r3, #23
 8002aa8:	18fb      	adds	r3, r7, r3
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d105      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab0:	4b2b      	ldr	r3, [pc, #172]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ab2:	69da      	ldr	r2, [r3, #28]
 8002ab4:	4b2a      	ldr	r3, [pc, #168]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ab6:	492f      	ldr	r1, [pc, #188]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002ab8:	400a      	ands	r2, r1
 8002aba:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d009      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ac6:	4b26      	ldr	r3, [pc, #152]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	2203      	movs	r2, #3
 8002acc:	4393      	bics	r3, r2
 8002ace:	0019      	movs	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	4b22      	ldr	r3, [pc, #136]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d009      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ae4:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	4a23      	ldr	r2, [pc, #140]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002af4:	430a      	orrs	r2, r1
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	02db      	lsls	r3, r3, #11
 8002b00:	4013      	ands	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b04:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	4a1c      	ldr	r2, [pc, #112]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b14:	430a      	orrs	r2, r1
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d009      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b22:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	2210      	movs	r2, #16
 8002b28:	4393      	bics	r3, r2
 8002b2a:	0019      	movs	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	695a      	ldr	r2, [r3, #20]
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b32:	430a      	orrs	r2, r1
 8002b34:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d009      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b42:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	2240      	movs	r2, #64	; 0x40
 8002b48:	4393      	bics	r3, r2
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699a      	ldr	r2, [r3, #24]
 8002b50:	4b03      	ldr	r3, [pc, #12]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b52:	430a      	orrs	r2, r1
 8002b54:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	0018      	movs	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b006      	add	sp, #24
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40007000 	.word	0x40007000
 8002b68:	fffffcff 	.word	0xfffffcff
 8002b6c:	fffeffff 	.word	0xfffeffff
 8002b70:	00001388 	.word	0x00001388
 8002b74:	efffffff 	.word	0xefffffff
 8002b78:	fffcffff 	.word	0xfffcffff
 8002b7c:	fff3ffff 	.word	0xfff3ffff

08002b80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0a8      	b.n	8002ce4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d109      	bne.n	8002bae <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	2382      	movs	r3, #130	; 0x82
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d009      	beq.n	8002bba <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	61da      	str	r2, [r3, #28]
 8002bac:	e005      	b.n	8002bba <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	225d      	movs	r2, #93	; 0x5d
 8002bc4:	5c9b      	ldrb	r3, [r3, r2]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d107      	bne.n	8002bdc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	225c      	movs	r2, #92	; 0x5c
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f7fe fdfc 	bl	80017d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	225d      	movs	r2, #93	; 0x5d
 8002be0:	2102      	movs	r1, #2
 8002be2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2140      	movs	r1, #64	; 0x40
 8002bf0:	438a      	bics	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	23e0      	movs	r3, #224	; 0xe0
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d902      	bls.n	8002c06 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	e002      	b.n	8002c0c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	015b      	lsls	r3, r3, #5
 8002c0a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	23f0      	movs	r3, #240	; 0xf0
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d008      	beq.n	8002c2a <HAL_SPI_Init+0xaa>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	23e0      	movs	r3, #224	; 0xe0
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d002      	beq.n	8002c2a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	2382      	movs	r3, #130	; 0x82
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	401a      	ands	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6899      	ldr	r1, [r3, #8]
 8002c38:	2384      	movs	r3, #132	; 0x84
 8002c3a:	021b      	lsls	r3, r3, #8
 8002c3c:	400b      	ands	r3, r1
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	2102      	movs	r1, #2
 8002c46:	400b      	ands	r3, r1
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	2101      	movs	r1, #1
 8002c50:	400b      	ands	r3, r1
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6999      	ldr	r1, [r3, #24]
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	400b      	ands	r3, r1
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	2138      	movs	r1, #56	; 0x38
 8002c66:	400b      	ands	r3, r1
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	2180      	movs	r1, #128	; 0x80
 8002c70:	400b      	ands	r3, r1
 8002c72:	431a      	orrs	r2, r3
 8002c74:	0011      	movs	r1, r2
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	019b      	lsls	r3, r3, #6
 8002c7e:	401a      	ands	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	0c1b      	lsrs	r3, r3, #16
 8002c8e:	2204      	movs	r2, #4
 8002c90:	401a      	ands	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	2110      	movs	r1, #16
 8002c98:	400b      	ands	r3, r1
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca0:	2108      	movs	r1, #8
 8002ca2:	400b      	ands	r3, r1
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68d9      	ldr	r1, [r3, #12]
 8002caa:	23f0      	movs	r3, #240	; 0xf0
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	400b      	ands	r3, r1
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	0011      	movs	r1, r2
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	2380      	movs	r3, #128	; 0x80
 8002cb8:	015b      	lsls	r3, r3, #5
 8002cba:	401a      	ands	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	69da      	ldr	r2, [r3, #28]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4907      	ldr	r1, [pc, #28]	; (8002cec <HAL_SPI_Init+0x16c>)
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	225d      	movs	r2, #93	; 0x5d
 8002cde:	2101      	movs	r1, #1
 8002ce0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b004      	add	sp, #16
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	fffff7ff 	.word	0xfffff7ff

08002cf0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	; 0x28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	001a      	movs	r2, r3
 8002cfe:	1cbb      	adds	r3, r7, #2
 8002d00:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d02:	2301      	movs	r3, #1
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d06:	2323      	movs	r3, #35	; 0x23
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	225c      	movs	r2, #92	; 0x5c
 8002d12:	5c9b      	ldrb	r3, [r3, r2]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_SPI_TransmitReceive+0x2c>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e1b5      	b.n	8003088 <HAL_SPI_TransmitReceive+0x398>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	225c      	movs	r2, #92	; 0x5c
 8002d20:	2101      	movs	r1, #1
 8002d22:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d24:	f7fe feb4 	bl	8001a90 <HAL_GetTick>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d2c:	201b      	movs	r0, #27
 8002d2e:	183b      	adds	r3, r7, r0
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	215d      	movs	r1, #93	; 0x5d
 8002d34:	5c52      	ldrb	r2, [r2, r1]
 8002d36:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002d3e:	2312      	movs	r3, #18
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	1cba      	adds	r2, r7, #2
 8002d44:	8812      	ldrh	r2, [r2, #0]
 8002d46:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d48:	183b      	adds	r3, r7, r0
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d011      	beq.n	8002d74 <HAL_SPI_TransmitReceive+0x84>
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	2382      	movs	r3, #130	; 0x82
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d107      	bne.n	8002d6a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d103      	bne.n	8002d6a <HAL_SPI_TransmitReceive+0x7a>
 8002d62:	183b      	adds	r3, r7, r0
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d004      	beq.n	8002d74 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002d6a:	2323      	movs	r3, #35	; 0x23
 8002d6c:	18fb      	adds	r3, r7, r3
 8002d6e:	2202      	movs	r2, #2
 8002d70:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d72:	e17e      	b.n	8003072 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d006      	beq.n	8002d88 <HAL_SPI_TransmitReceive+0x98>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_SPI_TransmitReceive+0x98>
 8002d80:	1cbb      	adds	r3, r7, #2
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d104      	bne.n	8002d92 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002d88:	2323      	movs	r3, #35	; 0x23
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d90:	e16f      	b.n	8003072 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	225d      	movs	r2, #93	; 0x5d
 8002d96:	5c9b      	ldrb	r3, [r3, r2]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d003      	beq.n	8002da6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	225d      	movs	r2, #93	; 0x5d
 8002da2:	2105      	movs	r1, #5
 8002da4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1cba      	adds	r2, r7, #2
 8002db6:	2146      	movs	r1, #70	; 0x46
 8002db8:	8812      	ldrh	r2, [r2, #0]
 8002dba:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1cba      	adds	r2, r7, #2
 8002dc0:	2144      	movs	r1, #68	; 0x44
 8002dc2:	8812      	ldrh	r2, [r2, #0]
 8002dc4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1cba      	adds	r2, r7, #2
 8002dd0:	8812      	ldrh	r2, [r2, #0]
 8002dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1cba      	adds	r2, r7, #2
 8002dd8:	8812      	ldrh	r2, [r2, #0]
 8002dda:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	23e0      	movs	r3, #224	; 0xe0
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d908      	bls.n	8002e06 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	49a4      	ldr	r1, [pc, #656]	; (8003090 <HAL_SPI_TransmitReceive+0x3a0>)
 8002e00:	400a      	ands	r2, r1
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	e008      	b.n	8002e18 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2180      	movs	r1, #128	; 0x80
 8002e12:	0149      	lsls	r1, r1, #5
 8002e14:	430a      	orrs	r2, r1
 8002e16:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2240      	movs	r2, #64	; 0x40
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b40      	cmp	r3, #64	; 0x40
 8002e24:	d007      	beq.n	8002e36 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2140      	movs	r1, #64	; 0x40
 8002e32:	430a      	orrs	r2, r1
 8002e34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	23e0      	movs	r3, #224	; 0xe0
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d800      	bhi.n	8002e44 <HAL_SPI_TransmitReceive+0x154>
 8002e42:	e07f      	b.n	8002f44 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_SPI_TransmitReceive+0x168>
 8002e4c:	2312      	movs	r3, #18
 8002e4e:	18fb      	adds	r3, r7, r3
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d000      	beq.n	8002e58 <HAL_SPI_TransmitReceive+0x168>
 8002e56:	e069      	b.n	8002f2c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	881a      	ldrh	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	1c9a      	adds	r2, r3, #2
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e7c:	e056      	b.n	8002f2c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2202      	movs	r2, #2
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d11b      	bne.n	8002ec4 <HAL_SPI_TransmitReceive+0x1d4>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d016      	beq.n	8002ec4 <HAL_SPI_TransmitReceive+0x1d4>
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d113      	bne.n	8002ec4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea0:	881a      	ldrh	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eac:	1c9a      	adds	r2, r3, #2
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d11c      	bne.n	8002f0c <HAL_SPI_TransmitReceive+0x21c>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2246      	movs	r2, #70	; 0x46
 8002ed6:	5a9b      	ldrh	r3, [r3, r2]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d016      	beq.n	8002f0c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	b292      	uxth	r2, r2
 8002eea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	1c9a      	adds	r2, r3, #2
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2246      	movs	r2, #70	; 0x46
 8002efa:	5a9b      	ldrh	r3, [r3, r2]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b299      	uxth	r1, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2246      	movs	r2, #70	; 0x46
 8002f06:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f0c:	f7fe fdc0 	bl	8001a90 <HAL_GetTick>
 8002f10:	0002      	movs	r2, r0
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d807      	bhi.n	8002f2c <HAL_SPI_TransmitReceive+0x23c>
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1e:	3301      	adds	r3, #1
 8002f20:	d004      	beq.n	8002f2c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8002f22:	2323      	movs	r3, #35	; 0x23
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	2203      	movs	r2, #3
 8002f28:	701a      	strb	r2, [r3, #0]
        goto error;
 8002f2a:	e0a2      	b.n	8003072 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1a3      	bne.n	8002e7e <HAL_SPI_TransmitReceive+0x18e>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2246      	movs	r2, #70	; 0x46
 8002f3a:	5a9b      	ldrh	r3, [r3, r2]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d19d      	bne.n	8002e7e <HAL_SPI_TransmitReceive+0x18e>
 8002f42:	e085      	b.n	8003050 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_SPI_TransmitReceive+0x268>
 8002f4c:	2312      	movs	r3, #18
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d000      	beq.n	8002f58 <HAL_SPI_TransmitReceive+0x268>
 8002f56:	e070      	b.n	800303a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	330c      	adds	r3, #12
 8002f62:	7812      	ldrb	r2, [r2, #0]
 8002f64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f7e:	e05c      	b.n	800303a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2202      	movs	r2, #2
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d11c      	bne.n	8002fc8 <HAL_SPI_TransmitReceive+0x2d8>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d017      	beq.n	8002fc8 <HAL_SPI_TransmitReceive+0x2d8>
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d114      	bne.n	8002fc8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	330c      	adds	r3, #12
 8002fa8:	7812      	ldrb	r2, [r2, #0]
 8002faa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d11e      	bne.n	8003014 <HAL_SPI_TransmitReceive+0x324>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2246      	movs	r2, #70	; 0x46
 8002fda:	5a9b      	ldrh	r3, [r3, r2]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d018      	beq.n	8003014 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	330c      	adds	r3, #12
 8002fe8:	001a      	movs	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	7812      	ldrb	r2, [r2, #0]
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2246      	movs	r2, #70	; 0x46
 8003002:	5a9b      	ldrh	r3, [r3, r2]
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b299      	uxth	r1, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2246      	movs	r2, #70	; 0x46
 800300e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003010:	2301      	movs	r3, #1
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003014:	f7fe fd3c 	bl	8001a90 <HAL_GetTick>
 8003018:	0002      	movs	r2, r0
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003020:	429a      	cmp	r2, r3
 8003022:	d802      	bhi.n	800302a <HAL_SPI_TransmitReceive+0x33a>
 8003024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003026:	3301      	adds	r3, #1
 8003028:	d102      	bne.n	8003030 <HAL_SPI_TransmitReceive+0x340>
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	2b00      	cmp	r3, #0
 800302e:	d104      	bne.n	800303a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003030:	2323      	movs	r3, #35	; 0x23
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	2203      	movs	r2, #3
 8003036:	701a      	strb	r2, [r3, #0]
        goto error;
 8003038:	e01b      	b.n	8003072 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d19d      	bne.n	8002f80 <HAL_SPI_TransmitReceive+0x290>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2246      	movs	r2, #70	; 0x46
 8003048:	5a9b      	ldrh	r3, [r3, r2]
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d197      	bne.n	8002f80 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003050:	69fa      	ldr	r2, [r7, #28]
 8003052:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	0018      	movs	r0, r3
 8003058:	f000 f94c 	bl	80032f4 <SPI_EndRxTxTransaction>
 800305c:	1e03      	subs	r3, r0, #0
 800305e:	d007      	beq.n	8003070 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8003060:	2323      	movs	r3, #35	; 0x23
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	661a      	str	r2, [r3, #96]	; 0x60
 800306e:	e000      	b.n	8003072 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003070:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	225d      	movs	r2, #93	; 0x5d
 8003076:	2101      	movs	r1, #1
 8003078:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	225c      	movs	r2, #92	; 0x5c
 800307e:	2100      	movs	r1, #0
 8003080:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003082:	2323      	movs	r3, #35	; 0x23
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	781b      	ldrb	r3, [r3, #0]
}
 8003088:	0018      	movs	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	b00a      	add	sp, #40	; 0x28
 800308e:	bd80      	pop	{r7, pc}
 8003090:	ffffefff 	.word	0xffffefff

08003094 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	1dfb      	adds	r3, r7, #7
 80030a2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030a4:	f7fe fcf4 	bl	8001a90 <HAL_GetTick>
 80030a8:	0002      	movs	r2, r0
 80030aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	18d3      	adds	r3, r2, r3
 80030b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030b4:	f7fe fcec 	bl	8001a90 <HAL_GetTick>
 80030b8:	0003      	movs	r3, r0
 80030ba:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030bc:	4b3a      	ldr	r3, [pc, #232]	; (80031a8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	015b      	lsls	r3, r3, #5
 80030c2:	0d1b      	lsrs	r3, r3, #20
 80030c4:	69fa      	ldr	r2, [r7, #28]
 80030c6:	4353      	muls	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ca:	e058      	b.n	800317e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	3301      	adds	r3, #1
 80030d0:	d055      	beq.n	800317e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030d2:	f7fe fcdd 	bl	8001a90 <HAL_GetTick>
 80030d6:	0002      	movs	r2, r0
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d902      	bls.n	80030e8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d142      	bne.n	800316e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	21e0      	movs	r1, #224	; 0xe0
 80030f4:	438a      	bics	r2, r1
 80030f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	2382      	movs	r3, #130	; 0x82
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	429a      	cmp	r2, r3
 8003102:	d113      	bne.n	800312c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	429a      	cmp	r2, r3
 800310e:	d005      	beq.n	800311c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	429a      	cmp	r2, r3
 800311a:	d107      	bne.n	800312c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2140      	movs	r1, #64	; 0x40
 8003128:	438a      	bics	r2, r1
 800312a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	019b      	lsls	r3, r3, #6
 8003134:	429a      	cmp	r2, r3
 8003136:	d110      	bne.n	800315a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	491a      	ldr	r1, [pc, #104]	; (80031ac <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003144:	400a      	ands	r2, r1
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2180      	movs	r1, #128	; 0x80
 8003154:	0189      	lsls	r1, r1, #6
 8003156:	430a      	orrs	r2, r1
 8003158:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	225d      	movs	r2, #93	; 0x5d
 800315e:	2101      	movs	r1, #1
 8003160:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	225c      	movs	r2, #92	; 0x5c
 8003166:	2100      	movs	r1, #0
 8003168:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e017      	b.n	800319e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	3b01      	subs	r3, #1
 800317c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	4013      	ands	r3, r2
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	425a      	negs	r2, r3
 800318e:	4153      	adcs	r3, r2
 8003190:	b2db      	uxtb	r3, r3
 8003192:	001a      	movs	r2, r3
 8003194:	1dfb      	adds	r3, r7, #7
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d197      	bne.n	80030cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	0018      	movs	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b008      	add	sp, #32
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	20000000 	.word	0x20000000
 80031ac:	ffffdfff 	.word	0xffffdfff

080031b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08a      	sub	sp, #40	; 0x28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80031be:	2317      	movs	r3, #23
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	2200      	movs	r2, #0
 80031c4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80031c6:	f7fe fc63 	bl	8001a90 <HAL_GetTick>
 80031ca:	0002      	movs	r2, r0
 80031cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	18d3      	adds	r3, r2, r3
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80031d6:	f7fe fc5b 	bl	8001a90 <HAL_GetTick>
 80031da:	0003      	movs	r3, r0
 80031dc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	330c      	adds	r3, #12
 80031e4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80031e6:	4b41      	ldr	r3, [pc, #260]	; (80032ec <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	0013      	movs	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	189b      	adds	r3, r3, r2
 80031f0:	00da      	lsls	r2, r3, #3
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	0d1b      	lsrs	r3, r3, #20
 80031f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f8:	4353      	muls	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80031fc:	e068      	b.n	80032d0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	23c0      	movs	r3, #192	; 0xc0
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	429a      	cmp	r2, r3
 8003206:	d10a      	bne.n	800321e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d107      	bne.n	800321e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	b2da      	uxtb	r2, r3
 8003214:	2117      	movs	r1, #23
 8003216:	187b      	adds	r3, r7, r1
 8003218:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800321a:	187b      	adds	r3, r7, r1
 800321c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	3301      	adds	r3, #1
 8003222:	d055      	beq.n	80032d0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003224:	f7fe fc34 	bl	8001a90 <HAL_GetTick>
 8003228:	0002      	movs	r2, r0
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003230:	429a      	cmp	r2, r3
 8003232:	d902      	bls.n	800323a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	2b00      	cmp	r3, #0
 8003238:	d142      	bne.n	80032c0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	21e0      	movs	r1, #224	; 0xe0
 8003246:	438a      	bics	r2, r1
 8003248:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	2382      	movs	r3, #130	; 0x82
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	429a      	cmp	r2, r3
 8003254:	d113      	bne.n	800327e <SPI_WaitFifoStateUntilTimeout+0xce>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	021b      	lsls	r3, r3, #8
 800325e:	429a      	cmp	r2, r3
 8003260:	d005      	beq.n	800326e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	2380      	movs	r3, #128	; 0x80
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	429a      	cmp	r2, r3
 800326c:	d107      	bne.n	800327e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2140      	movs	r1, #64	; 0x40
 800327a:	438a      	bics	r2, r1
 800327c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	019b      	lsls	r3, r3, #6
 8003286:	429a      	cmp	r2, r3
 8003288:	d110      	bne.n	80032ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4916      	ldr	r1, [pc, #88]	; (80032f0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003296:	400a      	ands	r2, r1
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2180      	movs	r1, #128	; 0x80
 80032a6:	0189      	lsls	r1, r1, #6
 80032a8:	430a      	orrs	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	225d      	movs	r2, #93	; 0x5d
 80032b0:	2101      	movs	r1, #1
 80032b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	225c      	movs	r2, #92	; 0x5c
 80032b8:	2100      	movs	r1, #0
 80032ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e010      	b.n	80032e2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	4013      	ands	r3, r2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d18e      	bne.n	80031fe <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	0018      	movs	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	b00a      	add	sp, #40	; 0x28
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	20000000 	.word	0x20000000
 80032f0:	ffffdfff 	.word	0xffffdfff

080032f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	23c0      	movs	r3, #192	; 0xc0
 8003304:	0159      	lsls	r1, r3, #5
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	0013      	movs	r3, r2
 800330e:	2200      	movs	r2, #0
 8003310:	f7ff ff4e 	bl	80031b0 <SPI_WaitFifoStateUntilTimeout>
 8003314:	1e03      	subs	r3, r0, #0
 8003316:	d007      	beq.n	8003328 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331c:	2220      	movs	r2, #32
 800331e:	431a      	orrs	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e027      	b.n	8003378 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	0013      	movs	r3, r2
 8003332:	2200      	movs	r2, #0
 8003334:	2180      	movs	r1, #128	; 0x80
 8003336:	f7ff fead 	bl	8003094 <SPI_WaitFlagStateUntilTimeout>
 800333a:	1e03      	subs	r3, r0, #0
 800333c:	d007      	beq.n	800334e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003342:	2220      	movs	r2, #32
 8003344:	431a      	orrs	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e014      	b.n	8003378 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	23c0      	movs	r3, #192	; 0xc0
 8003352:	00d9      	lsls	r1, r3, #3
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	0013      	movs	r3, r2
 800335c:	2200      	movs	r2, #0
 800335e:	f7ff ff27 	bl	80031b0 <SPI_WaitFifoStateUntilTimeout>
 8003362:	1e03      	subs	r3, r0, #0
 8003364:	d007      	beq.n	8003376 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336a:	2220      	movs	r2, #32
 800336c:	431a      	orrs	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e000      	b.n	8003378 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	0018      	movs	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	b004      	add	sp, #16
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e044      	b.n	800341c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003396:	2b00      	cmp	r3, #0
 8003398:	d107      	bne.n	80033aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2274      	movs	r2, #116	; 0x74
 800339e:	2100      	movs	r1, #0
 80033a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	0018      	movs	r0, r3
 80033a6:	f7fe fa87 	bl	80018b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2224      	movs	r2, #36	; 0x24
 80033ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2101      	movs	r1, #1
 80033bc:	438a      	bics	r2, r1
 80033be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	0018      	movs	r0, r3
 80033c4:	f000 f830 	bl	8003428 <UART_SetConfig>
 80033c8:	0003      	movs	r3, r0
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e024      	b.n	800341c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	0018      	movs	r0, r3
 80033de:	f000 fa0b 	bl	80037f8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	490d      	ldr	r1, [pc, #52]	; (8003424 <HAL_UART_Init+0xa4>)
 80033ee:	400a      	ands	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	212a      	movs	r1, #42	; 0x2a
 80033fe:	438a      	bics	r2, r1
 8003400:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2101      	movs	r1, #1
 800340e:	430a      	orrs	r2, r1
 8003410:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	0018      	movs	r0, r3
 8003416:	f000 faa3 	bl	8003960 <UART_CheckIdleState>
 800341a:	0003      	movs	r3, r0
}
 800341c:	0018      	movs	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	b002      	add	sp, #8
 8003422:	bd80      	pop	{r7, pc}
 8003424:	ffffb7ff 	.word	0xffffb7ff

08003428 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003430:	231e      	movs	r3, #30
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	2200      	movs	r2, #0
 8003436:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4abe      	ldr	r2, [pc, #760]	; (8003750 <UART_SetConfig+0x328>)
 8003458:	4013      	ands	r3, r2
 800345a:	0019      	movs	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	430a      	orrs	r2, r1
 8003464:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4ab9      	ldr	r2, [pc, #740]	; (8003754 <UART_SetConfig+0x32c>)
 800346e:	4013      	ands	r3, r2
 8003470:	0019      	movs	r1, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	4ab0      	ldr	r2, [pc, #704]	; (8003758 <UART_SetConfig+0x330>)
 8003496:	4013      	ands	r3, r2
 8003498:	0019      	movs	r1, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4aac      	ldr	r2, [pc, #688]	; (800375c <UART_SetConfig+0x334>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d127      	bne.n	80034fe <UART_SetConfig+0xd6>
 80034ae:	4bac      	ldr	r3, [pc, #688]	; (8003760 <UART_SetConfig+0x338>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	2203      	movs	r2, #3
 80034b4:	4013      	ands	r3, r2
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d00d      	beq.n	80034d6 <UART_SetConfig+0xae>
 80034ba:	d81b      	bhi.n	80034f4 <UART_SetConfig+0xcc>
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d014      	beq.n	80034ea <UART_SetConfig+0xc2>
 80034c0:	d818      	bhi.n	80034f4 <UART_SetConfig+0xcc>
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <UART_SetConfig+0xa4>
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d00a      	beq.n	80034e0 <UART_SetConfig+0xb8>
 80034ca:	e013      	b.n	80034f4 <UART_SetConfig+0xcc>
 80034cc:	231f      	movs	r3, #31
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]
 80034d4:	e0bd      	b.n	8003652 <UART_SetConfig+0x22a>
 80034d6:	231f      	movs	r3, #31
 80034d8:	18fb      	adds	r3, r7, r3
 80034da:	2202      	movs	r2, #2
 80034dc:	701a      	strb	r2, [r3, #0]
 80034de:	e0b8      	b.n	8003652 <UART_SetConfig+0x22a>
 80034e0:	231f      	movs	r3, #31
 80034e2:	18fb      	adds	r3, r7, r3
 80034e4:	2204      	movs	r2, #4
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	e0b3      	b.n	8003652 <UART_SetConfig+0x22a>
 80034ea:	231f      	movs	r3, #31
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	2208      	movs	r2, #8
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	e0ae      	b.n	8003652 <UART_SetConfig+0x22a>
 80034f4:	231f      	movs	r3, #31
 80034f6:	18fb      	adds	r3, r7, r3
 80034f8:	2210      	movs	r2, #16
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	e0a9      	b.n	8003652 <UART_SetConfig+0x22a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a98      	ldr	r2, [pc, #608]	; (8003764 <UART_SetConfig+0x33c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d134      	bne.n	8003572 <UART_SetConfig+0x14a>
 8003508:	4b95      	ldr	r3, [pc, #596]	; (8003760 <UART_SetConfig+0x338>)
 800350a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800350c:	23c0      	movs	r3, #192	; 0xc0
 800350e:	029b      	lsls	r3, r3, #10
 8003510:	4013      	ands	r3, r2
 8003512:	22c0      	movs	r2, #192	; 0xc0
 8003514:	0292      	lsls	r2, r2, #10
 8003516:	4293      	cmp	r3, r2
 8003518:	d017      	beq.n	800354a <UART_SetConfig+0x122>
 800351a:	22c0      	movs	r2, #192	; 0xc0
 800351c:	0292      	lsls	r2, r2, #10
 800351e:	4293      	cmp	r3, r2
 8003520:	d822      	bhi.n	8003568 <UART_SetConfig+0x140>
 8003522:	2280      	movs	r2, #128	; 0x80
 8003524:	0292      	lsls	r2, r2, #10
 8003526:	4293      	cmp	r3, r2
 8003528:	d019      	beq.n	800355e <UART_SetConfig+0x136>
 800352a:	2280      	movs	r2, #128	; 0x80
 800352c:	0292      	lsls	r2, r2, #10
 800352e:	4293      	cmp	r3, r2
 8003530:	d81a      	bhi.n	8003568 <UART_SetConfig+0x140>
 8003532:	2b00      	cmp	r3, #0
 8003534:	d004      	beq.n	8003540 <UART_SetConfig+0x118>
 8003536:	2280      	movs	r2, #128	; 0x80
 8003538:	0252      	lsls	r2, r2, #9
 800353a:	4293      	cmp	r3, r2
 800353c:	d00a      	beq.n	8003554 <UART_SetConfig+0x12c>
 800353e:	e013      	b.n	8003568 <UART_SetConfig+0x140>
 8003540:	231f      	movs	r3, #31
 8003542:	18fb      	adds	r3, r7, r3
 8003544:	2200      	movs	r2, #0
 8003546:	701a      	strb	r2, [r3, #0]
 8003548:	e083      	b.n	8003652 <UART_SetConfig+0x22a>
 800354a:	231f      	movs	r3, #31
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	2202      	movs	r2, #2
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	e07e      	b.n	8003652 <UART_SetConfig+0x22a>
 8003554:	231f      	movs	r3, #31
 8003556:	18fb      	adds	r3, r7, r3
 8003558:	2204      	movs	r2, #4
 800355a:	701a      	strb	r2, [r3, #0]
 800355c:	e079      	b.n	8003652 <UART_SetConfig+0x22a>
 800355e:	231f      	movs	r3, #31
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	2208      	movs	r2, #8
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	e074      	b.n	8003652 <UART_SetConfig+0x22a>
 8003568:	231f      	movs	r3, #31
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	2210      	movs	r2, #16
 800356e:	701a      	strb	r2, [r3, #0]
 8003570:	e06f      	b.n	8003652 <UART_SetConfig+0x22a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a7c      	ldr	r2, [pc, #496]	; (8003768 <UART_SetConfig+0x340>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d134      	bne.n	80035e6 <UART_SetConfig+0x1be>
 800357c:	4b78      	ldr	r3, [pc, #480]	; (8003760 <UART_SetConfig+0x338>)
 800357e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003580:	23c0      	movs	r3, #192	; 0xc0
 8003582:	031b      	lsls	r3, r3, #12
 8003584:	4013      	ands	r3, r2
 8003586:	22c0      	movs	r2, #192	; 0xc0
 8003588:	0312      	lsls	r2, r2, #12
 800358a:	4293      	cmp	r3, r2
 800358c:	d017      	beq.n	80035be <UART_SetConfig+0x196>
 800358e:	22c0      	movs	r2, #192	; 0xc0
 8003590:	0312      	lsls	r2, r2, #12
 8003592:	4293      	cmp	r3, r2
 8003594:	d822      	bhi.n	80035dc <UART_SetConfig+0x1b4>
 8003596:	2280      	movs	r2, #128	; 0x80
 8003598:	0312      	lsls	r2, r2, #12
 800359a:	4293      	cmp	r3, r2
 800359c:	d019      	beq.n	80035d2 <UART_SetConfig+0x1aa>
 800359e:	2280      	movs	r2, #128	; 0x80
 80035a0:	0312      	lsls	r2, r2, #12
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d81a      	bhi.n	80035dc <UART_SetConfig+0x1b4>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d004      	beq.n	80035b4 <UART_SetConfig+0x18c>
 80035aa:	2280      	movs	r2, #128	; 0x80
 80035ac:	02d2      	lsls	r2, r2, #11
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d00a      	beq.n	80035c8 <UART_SetConfig+0x1a0>
 80035b2:	e013      	b.n	80035dc <UART_SetConfig+0x1b4>
 80035b4:	231f      	movs	r3, #31
 80035b6:	18fb      	adds	r3, r7, r3
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	e049      	b.n	8003652 <UART_SetConfig+0x22a>
 80035be:	231f      	movs	r3, #31
 80035c0:	18fb      	adds	r3, r7, r3
 80035c2:	2202      	movs	r2, #2
 80035c4:	701a      	strb	r2, [r3, #0]
 80035c6:	e044      	b.n	8003652 <UART_SetConfig+0x22a>
 80035c8:	231f      	movs	r3, #31
 80035ca:	18fb      	adds	r3, r7, r3
 80035cc:	2204      	movs	r2, #4
 80035ce:	701a      	strb	r2, [r3, #0]
 80035d0:	e03f      	b.n	8003652 <UART_SetConfig+0x22a>
 80035d2:	231f      	movs	r3, #31
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	2208      	movs	r2, #8
 80035d8:	701a      	strb	r2, [r3, #0]
 80035da:	e03a      	b.n	8003652 <UART_SetConfig+0x22a>
 80035dc:	231f      	movs	r3, #31
 80035de:	18fb      	adds	r3, r7, r3
 80035e0:	2210      	movs	r2, #16
 80035e2:	701a      	strb	r2, [r3, #0]
 80035e4:	e035      	b.n	8003652 <UART_SetConfig+0x22a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a60      	ldr	r2, [pc, #384]	; (800376c <UART_SetConfig+0x344>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d104      	bne.n	80035fa <UART_SetConfig+0x1d2>
 80035f0:	231f      	movs	r3, #31
 80035f2:	18fb      	adds	r3, r7, r3
 80035f4:	2200      	movs	r2, #0
 80035f6:	701a      	strb	r2, [r3, #0]
 80035f8:	e02b      	b.n	8003652 <UART_SetConfig+0x22a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a5c      	ldr	r2, [pc, #368]	; (8003770 <UART_SetConfig+0x348>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d104      	bne.n	800360e <UART_SetConfig+0x1e6>
 8003604:	231f      	movs	r3, #31
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	2200      	movs	r2, #0
 800360a:	701a      	strb	r2, [r3, #0]
 800360c:	e021      	b.n	8003652 <UART_SetConfig+0x22a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a58      	ldr	r2, [pc, #352]	; (8003774 <UART_SetConfig+0x34c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d104      	bne.n	8003622 <UART_SetConfig+0x1fa>
 8003618:	231f      	movs	r3, #31
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	2200      	movs	r2, #0
 800361e:	701a      	strb	r2, [r3, #0]
 8003620:	e017      	b.n	8003652 <UART_SetConfig+0x22a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a54      	ldr	r2, [pc, #336]	; (8003778 <UART_SetConfig+0x350>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d104      	bne.n	8003636 <UART_SetConfig+0x20e>
 800362c:	231f      	movs	r3, #31
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
 8003634:	e00d      	b.n	8003652 <UART_SetConfig+0x22a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a50      	ldr	r2, [pc, #320]	; (800377c <UART_SetConfig+0x354>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d104      	bne.n	800364a <UART_SetConfig+0x222>
 8003640:	231f      	movs	r3, #31
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
 8003648:	e003      	b.n	8003652 <UART_SetConfig+0x22a>
 800364a:	231f      	movs	r3, #31
 800364c:	18fb      	adds	r3, r7, r3
 800364e:	2210      	movs	r2, #16
 8003650:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69da      	ldr	r2, [r3, #28]
 8003656:	2380      	movs	r3, #128	; 0x80
 8003658:	021b      	lsls	r3, r3, #8
 800365a:	429a      	cmp	r2, r3
 800365c:	d15d      	bne.n	800371a <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 800365e:	231f      	movs	r3, #31
 8003660:	18fb      	adds	r3, r7, r3
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b08      	cmp	r3, #8
 8003666:	d015      	beq.n	8003694 <UART_SetConfig+0x26c>
 8003668:	dc18      	bgt.n	800369c <UART_SetConfig+0x274>
 800366a:	2b04      	cmp	r3, #4
 800366c:	d00d      	beq.n	800368a <UART_SetConfig+0x262>
 800366e:	dc15      	bgt.n	800369c <UART_SetConfig+0x274>
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <UART_SetConfig+0x252>
 8003674:	2b02      	cmp	r3, #2
 8003676:	d005      	beq.n	8003684 <UART_SetConfig+0x25c>
 8003678:	e010      	b.n	800369c <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800367a:	f7ff f96b 	bl	8002954 <HAL_RCC_GetPCLK1Freq>
 800367e:	0003      	movs	r3, r0
 8003680:	61bb      	str	r3, [r7, #24]
        break;
 8003682:	e012      	b.n	80036aa <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003684:	4b3e      	ldr	r3, [pc, #248]	; (8003780 <UART_SetConfig+0x358>)
 8003686:	61bb      	str	r3, [r7, #24]
        break;
 8003688:	e00f      	b.n	80036aa <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800368a:	f7ff f8d9 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 800368e:	0003      	movs	r3, r0
 8003690:	61bb      	str	r3, [r7, #24]
        break;
 8003692:	e00a      	b.n	80036aa <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	021b      	lsls	r3, r3, #8
 8003698:	61bb      	str	r3, [r7, #24]
        break;
 800369a:	e006      	b.n	80036aa <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036a0:	231e      	movs	r3, #30
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]
        break;
 80036a8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d100      	bne.n	80036b2 <UART_SetConfig+0x28a>
 80036b0:	e095      	b.n	80037de <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	005a      	lsls	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	085b      	lsrs	r3, r3, #1
 80036bc:	18d2      	adds	r2, r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	0019      	movs	r1, r3
 80036c4:	0010      	movs	r0, r2
 80036c6:	f7fc fd1d 	bl	8000104 <__udivsi3>
 80036ca:	0003      	movs	r3, r0
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	2b0f      	cmp	r3, #15
 80036d4:	d91c      	bls.n	8003710 <UART_SetConfig+0x2e8>
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	025b      	lsls	r3, r3, #9
 80036dc:	429a      	cmp	r2, r3
 80036de:	d217      	bcs.n	8003710 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	200e      	movs	r0, #14
 80036e6:	183b      	adds	r3, r7, r0
 80036e8:	210f      	movs	r1, #15
 80036ea:	438a      	bics	r2, r1
 80036ec:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	085b      	lsrs	r3, r3, #1
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2207      	movs	r2, #7
 80036f6:	4013      	ands	r3, r2
 80036f8:	b299      	uxth	r1, r3
 80036fa:	183b      	adds	r3, r7, r0
 80036fc:	183a      	adds	r2, r7, r0
 80036fe:	8812      	ldrh	r2, [r2, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	183a      	adds	r2, r7, r0
 800370a:	8812      	ldrh	r2, [r2, #0]
 800370c:	60da      	str	r2, [r3, #12]
 800370e:	e066      	b.n	80037de <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003710:	231e      	movs	r3, #30
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	2201      	movs	r2, #1
 8003716:	701a      	strb	r2, [r3, #0]
 8003718:	e061      	b.n	80037de <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800371a:	231f      	movs	r3, #31
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b08      	cmp	r3, #8
 8003722:	d02f      	beq.n	8003784 <UART_SetConfig+0x35c>
 8003724:	dc32      	bgt.n	800378c <UART_SetConfig+0x364>
 8003726:	2b04      	cmp	r3, #4
 8003728:	d00d      	beq.n	8003746 <UART_SetConfig+0x31e>
 800372a:	dc2f      	bgt.n	800378c <UART_SetConfig+0x364>
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <UART_SetConfig+0x30e>
 8003730:	2b02      	cmp	r3, #2
 8003732:	d005      	beq.n	8003740 <UART_SetConfig+0x318>
 8003734:	e02a      	b.n	800378c <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003736:	f7ff f90d 	bl	8002954 <HAL_RCC_GetPCLK1Freq>
 800373a:	0003      	movs	r3, r0
 800373c:	61bb      	str	r3, [r7, #24]
        break;
 800373e:	e02c      	b.n	800379a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003740:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <UART_SetConfig+0x358>)
 8003742:	61bb      	str	r3, [r7, #24]
        break;
 8003744:	e029      	b.n	800379a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003746:	f7ff f87b 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 800374a:	0003      	movs	r3, r0
 800374c:	61bb      	str	r3, [r7, #24]
        break;
 800374e:	e024      	b.n	800379a <UART_SetConfig+0x372>
 8003750:	efff69f3 	.word	0xefff69f3
 8003754:	ffffcfff 	.word	0xffffcfff
 8003758:	fffff4ff 	.word	0xfffff4ff
 800375c:	40013800 	.word	0x40013800
 8003760:	40021000 	.word	0x40021000
 8003764:	40004400 	.word	0x40004400
 8003768:	40004800 	.word	0x40004800
 800376c:	40004c00 	.word	0x40004c00
 8003770:	40005000 	.word	0x40005000
 8003774:	40011400 	.word	0x40011400
 8003778:	40011800 	.word	0x40011800
 800377c:	40011c00 	.word	0x40011c00
 8003780:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003784:	2380      	movs	r3, #128	; 0x80
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	61bb      	str	r3, [r7, #24]
        break;
 800378a:	e006      	b.n	800379a <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003790:	231e      	movs	r3, #30
 8003792:	18fb      	adds	r3, r7, r3
 8003794:	2201      	movs	r2, #1
 8003796:	701a      	strb	r2, [r3, #0]
        break;
 8003798:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01e      	beq.n	80037de <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	085a      	lsrs	r2, r3, #1
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	18d2      	adds	r2, r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	0019      	movs	r1, r3
 80037b0:	0010      	movs	r0, r2
 80037b2:	f7fc fca7 	bl	8000104 <__udivsi3>
 80037b6:	0003      	movs	r3, r0
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	2b0f      	cmp	r3, #15
 80037c0:	d909      	bls.n	80037d6 <UART_SetConfig+0x3ae>
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	2380      	movs	r3, #128	; 0x80
 80037c6:	025b      	lsls	r3, r3, #9
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d204      	bcs.n	80037d6 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	60da      	str	r2, [r3, #12]
 80037d4:	e003      	b.n	80037de <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80037d6:	231e      	movs	r3, #30
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	2201      	movs	r2, #1
 80037dc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80037ea:	231e      	movs	r3, #30
 80037ec:	18fb      	adds	r3, r7, r3
 80037ee:	781b      	ldrb	r3, [r3, #0]
}
 80037f0:	0018      	movs	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	b008      	add	sp, #32
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	2201      	movs	r2, #1
 8003806:	4013      	ands	r3, r2
 8003808:	d00b      	beq.n	8003822 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	4a4a      	ldr	r2, [pc, #296]	; (800393c <UART_AdvFeatureConfig+0x144>)
 8003812:	4013      	ands	r3, r2
 8003814:	0019      	movs	r1, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	2202      	movs	r2, #2
 8003828:	4013      	ands	r3, r2
 800382a:	d00b      	beq.n	8003844 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	4a43      	ldr	r2, [pc, #268]	; (8003940 <UART_AdvFeatureConfig+0x148>)
 8003834:	4013      	ands	r3, r2
 8003836:	0019      	movs	r1, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	2204      	movs	r2, #4
 800384a:	4013      	ands	r3, r2
 800384c:	d00b      	beq.n	8003866 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4a3b      	ldr	r2, [pc, #236]	; (8003944 <UART_AdvFeatureConfig+0x14c>)
 8003856:	4013      	ands	r3, r2
 8003858:	0019      	movs	r1, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	2208      	movs	r2, #8
 800386c:	4013      	ands	r3, r2
 800386e:	d00b      	beq.n	8003888 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4a34      	ldr	r2, [pc, #208]	; (8003948 <UART_AdvFeatureConfig+0x150>)
 8003878:	4013      	ands	r3, r2
 800387a:	0019      	movs	r1, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	2210      	movs	r2, #16
 800388e:	4013      	ands	r3, r2
 8003890:	d00b      	beq.n	80038aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4a2c      	ldr	r2, [pc, #176]	; (800394c <UART_AdvFeatureConfig+0x154>)
 800389a:	4013      	ands	r3, r2
 800389c:	0019      	movs	r1, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	2220      	movs	r2, #32
 80038b0:	4013      	ands	r3, r2
 80038b2:	d00b      	beq.n	80038cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	4a25      	ldr	r2, [pc, #148]	; (8003950 <UART_AdvFeatureConfig+0x158>)
 80038bc:	4013      	ands	r3, r2
 80038be:	0019      	movs	r1, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	2240      	movs	r2, #64	; 0x40
 80038d2:	4013      	ands	r3, r2
 80038d4:	d01d      	beq.n	8003912 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <UART_AdvFeatureConfig+0x15c>)
 80038de:	4013      	ands	r3, r2
 80038e0:	0019      	movs	r1, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038f2:	2380      	movs	r3, #128	; 0x80
 80038f4:	035b      	lsls	r3, r3, #13
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d10b      	bne.n	8003912 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	4a15      	ldr	r2, [pc, #84]	; (8003958 <UART_AdvFeatureConfig+0x160>)
 8003902:	4013      	ands	r3, r2
 8003904:	0019      	movs	r1, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	2280      	movs	r2, #128	; 0x80
 8003918:	4013      	ands	r3, r2
 800391a:	d00b      	beq.n	8003934 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4a0e      	ldr	r2, [pc, #56]	; (800395c <UART_AdvFeatureConfig+0x164>)
 8003924:	4013      	ands	r3, r2
 8003926:	0019      	movs	r1, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	605a      	str	r2, [r3, #4]
  }
}
 8003934:	46c0      	nop			; (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	b002      	add	sp, #8
 800393a:	bd80      	pop	{r7, pc}
 800393c:	fffdffff 	.word	0xfffdffff
 8003940:	fffeffff 	.word	0xfffeffff
 8003944:	fffbffff 	.word	0xfffbffff
 8003948:	ffff7fff 	.word	0xffff7fff
 800394c:	ffffefff 	.word	0xffffefff
 8003950:	ffffdfff 	.word	0xffffdfff
 8003954:	ffefffff 	.word	0xffefffff
 8003958:	ff9fffff 	.word	0xff9fffff
 800395c:	fff7ffff 	.word	0xfff7ffff

08003960 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af02      	add	r7, sp, #8
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2280      	movs	r2, #128	; 0x80
 800396c:	2100      	movs	r1, #0
 800396e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003970:	f7fe f88e 	bl	8001a90 <HAL_GetTick>
 8003974:	0003      	movs	r3, r0
 8003976:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2208      	movs	r2, #8
 8003980:	4013      	ands	r3, r2
 8003982:	2b08      	cmp	r3, #8
 8003984:	d10c      	bne.n	80039a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2280      	movs	r2, #128	; 0x80
 800398a:	0391      	lsls	r1, r2, #14
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	4a17      	ldr	r2, [pc, #92]	; (80039ec <UART_CheckIdleState+0x8c>)
 8003990:	9200      	str	r2, [sp, #0]
 8003992:	2200      	movs	r2, #0
 8003994:	f000 f82c 	bl	80039f0 <UART_WaitOnFlagUntilTimeout>
 8003998:	1e03      	subs	r3, r0, #0
 800399a:	d001      	beq.n	80039a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e021      	b.n	80039e4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2204      	movs	r2, #4
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d10c      	bne.n	80039c8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2280      	movs	r2, #128	; 0x80
 80039b2:	03d1      	lsls	r1, r2, #15
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	4a0d      	ldr	r2, [pc, #52]	; (80039ec <UART_CheckIdleState+0x8c>)
 80039b8:	9200      	str	r2, [sp, #0]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f000 f818 	bl	80039f0 <UART_WaitOnFlagUntilTimeout>
 80039c0:	1e03      	subs	r3, r0, #0
 80039c2:	d001      	beq.n	80039c8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e00d      	b.n	80039e4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2220      	movs	r2, #32
 80039d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2274      	movs	r2, #116	; 0x74
 80039de:	2100      	movs	r1, #0
 80039e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	0018      	movs	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b004      	add	sp, #16
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	01ffffff 	.word	0x01ffffff

080039f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b094      	sub	sp, #80	; 0x50
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	603b      	str	r3, [r7, #0]
 80039fc:	1dfb      	adds	r3, r7, #7
 80039fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a00:	e0a3      	b.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a04:	3301      	adds	r3, #1
 8003a06:	d100      	bne.n	8003a0a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003a08:	e09f      	b.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0a:	f7fe f841 	bl	8001a90 <HAL_GetTick>
 8003a0e:	0002      	movs	r2, r0
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d302      	bcc.n	8003a20 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d13d      	bne.n	8003a9c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a20:	f3ef 8310 	mrs	r3, PRIMASK
 8003a24:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a28:	647b      	str	r3, [r7, #68]	; 0x44
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a30:	f383 8810 	msr	PRIMASK, r3
}
 8003a34:	46c0      	nop			; (mov r8, r8)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	494c      	ldr	r1, [pc, #304]	; (8003b74 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003a42:	400a      	ands	r2, r1
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a48:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4c:	f383 8810 	msr	PRIMASK, r3
}
 8003a50:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a52:	f3ef 8310 	mrs	r3, PRIMASK
 8003a56:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5a:	643b      	str	r3, [r7, #64]	; 0x40
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a62:	f383 8810 	msr	PRIMASK, r3
}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2101      	movs	r1, #1
 8003a74:	438a      	bics	r2, r1
 8003a76:	609a      	str	r2, [r3, #8]
 8003a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a7e:	f383 8810 	msr	PRIMASK, r3
}
 8003a82:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2274      	movs	r2, #116	; 0x74
 8003a94:	2100      	movs	r1, #0
 8003a96:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e067      	b.n	8003b6c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d050      	beq.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	69da      	ldr	r2, [r3, #28]
 8003aae:	2380      	movs	r3, #128	; 0x80
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	401a      	ands	r2, r3
 8003ab4:	2380      	movs	r3, #128	; 0x80
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d146      	bne.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2280      	movs	r2, #128	; 0x80
 8003ac2:	0112      	lsls	r2, r2, #4
 8003ac4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aca:	613b      	str	r3, [r7, #16]
  return(result);
 8003acc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f383 8810 	msr	PRIMASK, r3
}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4923      	ldr	r1, [pc, #140]	; (8003b74 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003ae8:	400a      	ands	r2, r1
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	f383 8810 	msr	PRIMASK, r3
}
 8003af6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af8:	f3ef 8310 	mrs	r3, PRIMASK
 8003afc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003afe:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b00:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b02:	2301      	movs	r3, #1
 8003b04:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	f383 8810 	msr	PRIMASK, r3
}
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2101      	movs	r1, #1
 8003b1a:	438a      	bics	r2, r1
 8003b1c:	609a      	str	r2, [r3, #8]
 8003b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	f383 8810 	msr	PRIMASK, r3
}
 8003b28:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2220      	movs	r2, #32
 8003b34:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2280      	movs	r2, #128	; 0x80
 8003b3a:	2120      	movs	r1, #32
 8003b3c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2274      	movs	r2, #116	; 0x74
 8003b42:	2100      	movs	r1, #0
 8003b44:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e010      	b.n	8003b6c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	4013      	ands	r3, r2
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	425a      	negs	r2, r3
 8003b5a:	4153      	adcs	r3, r2
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	001a      	movs	r2, r3
 8003b60:	1dfb      	adds	r3, r7, #7
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d100      	bne.n	8003b6a <UART_WaitOnFlagUntilTimeout+0x17a>
 8003b68:	e74b      	b.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b014      	add	sp, #80	; 0x50
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	fffffe5f 	.word	0xfffffe5f

08003b78 <__libc_init_array>:
 8003b78:	b570      	push	{r4, r5, r6, lr}
 8003b7a:	2600      	movs	r6, #0
 8003b7c:	4d0c      	ldr	r5, [pc, #48]	; (8003bb0 <__libc_init_array+0x38>)
 8003b7e:	4c0d      	ldr	r4, [pc, #52]	; (8003bb4 <__libc_init_array+0x3c>)
 8003b80:	1b64      	subs	r4, r4, r5
 8003b82:	10a4      	asrs	r4, r4, #2
 8003b84:	42a6      	cmp	r6, r4
 8003b86:	d109      	bne.n	8003b9c <__libc_init_array+0x24>
 8003b88:	2600      	movs	r6, #0
 8003b8a:	f000 f821 	bl	8003bd0 <_init>
 8003b8e:	4d0a      	ldr	r5, [pc, #40]	; (8003bb8 <__libc_init_array+0x40>)
 8003b90:	4c0a      	ldr	r4, [pc, #40]	; (8003bbc <__libc_init_array+0x44>)
 8003b92:	1b64      	subs	r4, r4, r5
 8003b94:	10a4      	asrs	r4, r4, #2
 8003b96:	42a6      	cmp	r6, r4
 8003b98:	d105      	bne.n	8003ba6 <__libc_init_array+0x2e>
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}
 8003b9c:	00b3      	lsls	r3, r6, #2
 8003b9e:	58eb      	ldr	r3, [r5, r3]
 8003ba0:	4798      	blx	r3
 8003ba2:	3601      	adds	r6, #1
 8003ba4:	e7ee      	b.n	8003b84 <__libc_init_array+0xc>
 8003ba6:	00b3      	lsls	r3, r6, #2
 8003ba8:	58eb      	ldr	r3, [r5, r3]
 8003baa:	4798      	blx	r3
 8003bac:	3601      	adds	r6, #1
 8003bae:	e7f2      	b.n	8003b96 <__libc_init_array+0x1e>
 8003bb0:	08003c60 	.word	0x08003c60
 8003bb4:	08003c60 	.word	0x08003c60
 8003bb8:	08003c60 	.word	0x08003c60
 8003bbc:	08003c64 	.word	0x08003c64

08003bc0 <memset>:
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	1882      	adds	r2, r0, r2
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d100      	bne.n	8003bca <memset+0xa>
 8003bc8:	4770      	bx	lr
 8003bca:	7019      	strb	r1, [r3, #0]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	e7f9      	b.n	8003bc4 <memset+0x4>

08003bd0 <_init>:
 8003bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bd6:	bc08      	pop	{r3}
 8003bd8:	469e      	mov	lr, r3
 8003bda:	4770      	bx	lr

08003bdc <_fini>:
 8003bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be2:	bc08      	pop	{r3}
 8003be4:	469e      	mov	lr, r3
 8003be6:	4770      	bx	lr
