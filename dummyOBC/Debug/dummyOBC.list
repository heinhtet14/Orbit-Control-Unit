
dummyOBC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a18  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005c10  08005c10  00015c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c30  08005c30  0002040c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c30  08005c30  00015c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c38  08005c38  0002040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c38  08005c38  00015c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c3c  08005c3c  00015c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000040c  20000000  08005c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  2000040c  0800604c  0002040c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ae4  0800604c  00020ae4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002040c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2bf  00000000  00000000  0002043a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ffc  00000000  00000000  0003a6f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  0003d6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  0003eac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a22d  00000000  00000000  0003fd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e81  00000000  00000000  00069f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109938  00000000  00000000  00081e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018b746  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000541c  00000000  00000000  0018b79c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000040c 	.word	0x2000040c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005bf8 	.word	0x08005bf8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000410 	.word	0x20000410
 8000234:	08005bf8 	.word	0x08005bf8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <PacketInit>:
* @return            none
* @note              none
*********************************************************************************************
*/
void PacketInit(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
    //initialize buffer in big endian byte array
    header[3] = (HEADER & 0x000000ff);
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <PacketInit+0x28>)
 8000536:	2250      	movs	r2, #80	; 0x50
 8000538:	70da      	strb	r2, [r3, #3]
    header[2] = (HEADER & 0x0000ff00) >> 8;
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <PacketInit+0x28>)
 800053c:	2253      	movs	r2, #83	; 0x53
 800053e:	709a      	strb	r2, [r3, #2]
    header[1] = (HEADER & 0x00ff0000) >> 16;
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <PacketInit+0x28>)
 8000542:	2255      	movs	r2, #85	; 0x55
 8000544:	705a      	strb	r2, [r3, #1]
    header[0] = (HEADER & 0xff000000) >> 24;
 8000546:	4b04      	ldr	r3, [pc, #16]	; (8000558 <PacketInit+0x28>)
 8000548:	224d      	movs	r2, #77	; 0x4d
 800054a:	701a      	strb	r2, [r3, #0]
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	2000048c 	.word	0x2000048c

0800055c <PacketAssemble>:
* @return            none
* @note              none
*********************************************************************************************
*/
void PacketAssemble(uint8_t id, uint8_t cmd, uint8_t *arg, uint8_t argSize, uint8_t *buffer)
{
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
 8000562:	603a      	str	r2, [r7, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
 800056a:	460b      	mov	r3, r1
 800056c:	71bb      	strb	r3, [r7, #6]
 800056e:	4613      	mov	r3, r2
 8000570:	717b      	strb	r3, [r7, #5]
 8000572:	4b3e      	ldr	r3, [pc, #248]	; (800066c <PacketAssemble+0x110>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	461a      	mov	r2, r3
    //Add header to the buffer
    memcpy(buffer, header, sizeof(header));
 8000578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800057a:	601a      	str	r2, [r3, #0]
    //Add id, cmd and argsize to the buffer
    buffer[4] = id;
 800057c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800057e:	3304      	adds	r3, #4
 8000580:	79fa      	ldrb	r2, [r7, #7]
 8000582:	701a      	strb	r2, [r3, #0]
    buffer[5] = cmd;
 8000584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000586:	3305      	adds	r3, #5
 8000588:	79ba      	ldrb	r2, [r7, #6]
 800058a:	701a      	strb	r2, [r3, #0]
    buffer[6] = argSize;
 800058c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800058e:	3306      	adds	r3, #6
 8000590:	797a      	ldrb	r2, [r7, #5]
 8000592:	701a      	strb	r2, [r3, #0]
    uint8_t lastPos;

    //check if command has an argument and add them to array
    if (argSize)
 8000594:	797b      	ldrb	r3, [r7, #5]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d018      	beq.n	80005cc <PacketAssemble+0x70>
    {
        for (int i = 0; i < argSize; i++)
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
 800059e:	e010      	b.n	80005c2 <PacketAssemble+0x66>
        {
            buffer[7 + i] = arg[i];
 80005a0:	69fb      	ldr	r3, [r7, #28]
 80005a2:	683a      	ldr	r2, [r7, #0]
 80005a4:	441a      	add	r2, r3
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	3307      	adds	r3, #7
 80005aa:	4619      	mov	r1, r3
 80005ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005ae:	440b      	add	r3, r1
 80005b0:	7812      	ldrb	r2, [r2, #0]
 80005b2:	701a      	strb	r2, [r3, #0]
            lastPos = 7 + i;
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	3307      	adds	r3, #7
 80005ba:	76fb      	strb	r3, [r7, #27]
        for (int i = 0; i < argSize; i++)
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	3301      	adds	r3, #1
 80005c0:	61fb      	str	r3, [r7, #28]
 80005c2:	797b      	ldrb	r3, [r7, #5]
 80005c4:	69fa      	ldr	r2, [r7, #28]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	dbea      	blt.n	80005a0 <PacketAssemble+0x44>
 80005ca:	e001      	b.n	80005d0 <PacketAssemble+0x74>
        }
    }
    else
    {
        lastPos = 7;
 80005cc:	2307      	movs	r3, #7
 80005ce:	76fb      	strb	r3, [r7, #27]
    }
    //calculate CRC
    uint8_t tempData[lastPos+1];
 80005d0:	7efb      	ldrb	r3, [r7, #27]
 80005d2:	1c5c      	adds	r4, r3, #1
 80005d4:	466b      	mov	r3, sp
 80005d6:	461d      	mov	r5, r3
 80005d8:	1e63      	subs	r3, r4, #1
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	4623      	mov	r3, r4
 80005de:	4618      	mov	r0, r3
 80005e0:	f04f 0100 	mov.w	r1, #0
 80005e4:	f04f 0200 	mov.w	r2, #0
 80005e8:	f04f 0300 	mov.w	r3, #0
 80005ec:	00cb      	lsls	r3, r1, #3
 80005ee:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80005f2:	00c2      	lsls	r2, r0, #3
 80005f4:	4623      	mov	r3, r4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f04f 0100 	mov.w	r1, #0
 80005fc:	f04f 0200 	mov.w	r2, #0
 8000600:	f04f 0300 	mov.w	r3, #0
 8000604:	00cb      	lsls	r3, r1, #3
 8000606:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800060a:	00c2      	lsls	r2, r0, #3
 800060c:	4623      	mov	r3, r4
 800060e:	3307      	adds	r3, #7
 8000610:	08db      	lsrs	r3, r3, #3
 8000612:	00db      	lsls	r3, r3, #3
 8000614:	ebad 0d03 	sub.w	sp, sp, r3
 8000618:	466b      	mov	r3, sp
 800061a:	3300      	adds	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
    uint8_t CRC[4];
    memcpy(tempData, buffer, sizeof(tempData));
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	4622      	mov	r2, r4
 8000622:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000624:	4618      	mov	r0, r3
 8000626:	f005 fad1 	bl	8005bcc <memcpy>
    uint32_t calcCRC = crc32(0, tempData, sizeof(tempData));
 800062a:	693b      	ldr	r3, [r7, #16]
 800062c:	4622      	mov	r2, r4
 800062e:	4619      	mov	r1, r3
 8000630:	2000      	movs	r0, #0
 8000632:	f000 f8e3 	bl	80007fc <crc32>
 8000636:	60f8      	str	r0, [r7, #12]

 
    //add crc in big endian at the end of the buffer
    CRC[3] = (calcCRC & 0x000000ff);
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	72fb      	strb	r3, [r7, #11]
    CRC[2] = (calcCRC & 0x0000ff00) >> 8;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	b2db      	uxtb	r3, r3
 8000644:	72bb      	strb	r3, [r7, #10]
    CRC[1] = (calcCRC & 0x00ff0000) >> 16;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	0c1b      	lsrs	r3, r3, #16
 800064a:	b2db      	uxtb	r3, r3
 800064c:	727b      	strb	r3, [r7, #9]
    CRC[0] = (calcCRC & 0xff000000) >> 24;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	0e1b      	lsrs	r3, r3, #24
 8000652:	b2db      	uxtb	r3, r3
 8000654:	723b      	strb	r3, [r7, #8]
    memcpy(buffer+lastPos+1,CRC,sizeof(CRC));
 8000656:	7efb      	ldrb	r3, [r7, #27]
 8000658:	3301      	adds	r3, #1
 800065a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800065c:	4413      	add	r3, r2
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	46ad      	mov	sp, r5
}
 8000664:	bf00      	nop
 8000666:	3720      	adds	r7, #32
 8000668:	46bd      	mov	sp, r7
 800066a:	bdb0      	pop	{r4, r5, r7, pc}
 800066c:	2000048c 	.word	0x2000048c

08000670 <PacketDisassemble>:
* @return            packet disassemble status: DEFRAME_OK = ok, DEFRAME_INVALID_HEADER = can't find header in the buffer, DEFRAME_INVALID_CRC = crc doesn't match
* @note              none
*********************************************************************************************
*/
deframeReturn PacketDisassemble(uint8_t *id, uint8_t *len, uint8_t *cmd, uint8_t *arg, uint8_t *buffer, int bufferSize)
{
 8000670:	b5b0      	push	{r4, r5, r7, lr}
 8000672:	b08e      	sub	sp, #56	; 0x38
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
 800067c:	603b      	str	r3, [r7, #0]
    /*Search for header*/
    int pos = -1;
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
    for (int i = 0; i < bufferSize; i++)
 8000684:	2300      	movs	r3, #0
 8000686:	637b      	str	r3, [r7, #52]	; 0x34
 8000688:	e02a      	b.n	80006e0 <PacketDisassemble+0x70>
    {
        if ((buffer[i] == header[0]) & (bufferSize - i >= MINPKTLEN))//find a start of header before length of message - 4
 800068a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800068c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800068e:	4413      	add	r3, r2
 8000690:	781a      	ldrb	r2, [r3, #0]
 8000692:	4b59      	ldr	r3, [pc, #356]	; (80007f8 <PacketDisassemble+0x188>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	429a      	cmp	r2, r3
 8000698:	bf0c      	ite	eq
 800069a:	2301      	moveq	r3, #1
 800069c:	2300      	movne	r3, #0
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80006a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a4:	1acb      	subs	r3, r1, r3
 80006a6:	2b0a      	cmp	r3, #10
 80006a8:	bfcc      	ite	gt
 80006aa:	2301      	movgt	r3, #1
 80006ac:	2300      	movle	r3, #0
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	4013      	ands	r3, r2
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d010      	beq.n	80006da <PacketDisassemble+0x6a>
        {
            uint8_t cmpHeader[4];
            memcpy(cmpHeader, buffer + i, 4);
 80006b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80006bc:	4413      	add	r3, r2
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	61bb      	str	r3, [r7, #24]
            if (!memcmp(cmpHeader, header, 4))
 80006c2:	f107 0318 	add.w	r3, r7, #24
 80006c6:	2204      	movs	r2, #4
 80006c8:	494b      	ldr	r1, [pc, #300]	; (80007f8 <PacketDisassemble+0x188>)
 80006ca:	4618      	mov	r0, r3
 80006cc:	f005 fa70 	bl	8005bb0 <memcmp>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d101      	bne.n	80006da <PacketDisassemble+0x6a>
            {
                pos = i;//set the position of the start of the message
 80006d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
    for (int i = 0; i < bufferSize; i++)
 80006da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006dc:	3301      	adds	r3, #1
 80006de:	637b      	str	r3, [r7, #52]	; 0x34
 80006e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006e4:	429a      	cmp	r2, r3
 80006e6:	dbd0      	blt.n	800068a <PacketDisassemble+0x1a>
            }
        }
    }
    if (pos == -1)//cant find header
 80006e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ee:	d101      	bne.n	80006f4 <PacketDisassemble+0x84>
    {
        return DEFRAME_INVALID_HEADER;
 80006f0:	2301      	movs	r3, #1
 80006f2:	e07c      	b.n	80007ee <PacketDisassemble+0x17e>
    }
    else
    {
 80006f4:	466b      	mov	r3, sp
 80006f6:	461d      	mov	r5, r3
        //CRC verification

        uint32_t givenCRC;
        uint8_t tempCRC[4];
        uint8_t actualLen = buffer[pos + 6] + 1 + 1 + 1+ 4;
 80006f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006fa:	3306      	adds	r3, #6
 80006fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80006fe:	4413      	add	r3, r2
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	3307      	adds	r3, #7
 8000704:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        memcpy(tempCRC,buffer+(pos+actualLen),4);//get CRC in the packet
 8000708:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800070c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800070e:	4413      	add	r3, r2
 8000710:	461a      	mov	r2, r3
 8000712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000714:	4413      	add	r3, r2
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	617b      	str	r3, [r7, #20]
        givenCRC=(tempCRC[0]<<24)|(tempCRC[1]<<16)|(tempCRC[2]<<8)|(tempCRC[3]);//make the CRC in uint32 form
 800071a:	7d3b      	ldrb	r3, [r7, #20]
 800071c:	061a      	lsls	r2, r3, #24
 800071e:	7d7b      	ldrb	r3, [r7, #21]
 8000720:	041b      	lsls	r3, r3, #16
 8000722:	431a      	orrs	r2, r3
 8000724:	7dbb      	ldrb	r3, [r7, #22]
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	4313      	orrs	r3, r2
 800072a:	7dfa      	ldrb	r2, [r7, #23]
 800072c:	4313      	orrs	r3, r2
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
        
        //copy everything in the packet except the crc (the last 4 bytes)
        uint8_t tempData[actualLen];
 8000730:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8000734:	4623      	mov	r3, r4
 8000736:	3b01      	subs	r3, #1
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
 800073a:	b2e0      	uxtb	r0, r4
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	f04f 0200 	mov.w	r2, #0
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	00cb      	lsls	r3, r1, #3
 800074a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800074e:	00c2      	lsls	r2, r0, #3
 8000750:	b2e0      	uxtb	r0, r4
 8000752:	f04f 0100 	mov.w	r1, #0
 8000756:	f04f 0200 	mov.w	r2, #0
 800075a:	f04f 0300 	mov.w	r3, #0
 800075e:	00cb      	lsls	r3, r1, #3
 8000760:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000764:	00c2      	lsls	r2, r0, #3
 8000766:	4623      	mov	r3, r4
 8000768:	3307      	adds	r3, #7
 800076a:	08db      	lsrs	r3, r3, #3
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	ebad 0d03 	sub.w	sp, sp, r3
 8000772:	466b      	mov	r3, sp
 8000774:	3300      	adds	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
        memcpy(tempData,buffer+pos,actualLen);
 8000778:	6a38      	ldr	r0, [r7, #32]
 800077a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800077c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800077e:	4413      	add	r3, r2
 8000780:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000784:	4619      	mov	r1, r3
 8000786:	f005 fa21 	bl	8005bcc <memcpy>

        uint32_t calcCRC = crc32(0,tempData,sizeof(tempData));//calculate the checksum crc32 of the copied message
 800078a:	6a3b      	ldr	r3, [r7, #32]
 800078c:	4622      	mov	r2, r4
 800078e:	4619      	mov	r1, r3
 8000790:	2000      	movs	r0, #0
 8000792:	f000 f833 	bl	80007fc <crc32>
 8000796:	61f8      	str	r0, [r7, #28]
        if (calcCRC!=givenCRC){
 8000798:	69fa      	ldr	r2, [r7, #28]
 800079a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800079c:	429a      	cmp	r2, r3
 800079e:	d001      	beq.n	80007a4 <PacketDisassemble+0x134>
            return DEFRAME_INVALID_CRC;//return because crc doesnt match
 80007a0:	2302      	movs	r3, #2
 80007a2:	e023      	b.n	80007ec <PacketDisassemble+0x17c>
        }

        *id = buffer[pos + 4];
 80007a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007a6:	3304      	adds	r3, #4
 80007a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007aa:	4413      	add	r3, r2
 80007ac:	781a      	ldrb	r2, [r3, #0]
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	701a      	strb	r2, [r3, #0]
        *len = buffer[pos+6];
 80007b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007b4:	3306      	adds	r3, #6
 80007b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007b8:	4413      	add	r3, r2
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	701a      	strb	r2, [r3, #0]
        *cmd = buffer[pos + 5];
 80007c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007c2:	3305      	adds	r3, #5
 80007c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007c6:	4413      	add	r3, r2
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	701a      	strb	r2, [r3, #0]

        if (*len != 0)//len !=0 means there is a argument to the command
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d009      	beq.n	80007ea <PacketDisassemble+0x17a>
        {
            memcpy(arg, buffer + pos + 7, *len );
 80007d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007d8:	3307      	adds	r3, #7
 80007da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007dc:	18d1      	adds	r1, r2, r3
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	6838      	ldr	r0, [r7, #0]
 80007e6:	f005 f9f1 	bl	8005bcc <memcpy>
        }
        return DEFRAME_OK;//return with ok
 80007ea:	2300      	movs	r3, #0
 80007ec:	46ad      	mov	sp, r5
    }

}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3738      	adds	r7, #56	; 0x38
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bdb0      	pop	{r4, r5, r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2000048c 	.word	0x2000048c

080007fc <crc32>:
* @note              Used polynomial is 0x04C11DB7. Implementation is standard table algorithm
*                    with reflection and byte reversal. Implementation details borrowed from literature.
*********************************************************************************************
*/
DWORD crc32(DWORD crc, BYTE *buf, DWORD size)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
    BYTE* p = buf;
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	617b      	str	r3, [r7, #20]

    crc = ~crc;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	43db      	mvns	r3, r3
 8000810:	60fb      	str	r3, [r7, #12]

    while (size--)
 8000812:	e00f      	b.n	8000834 <crc32+0x38>
        crc = crc32_tab[(BYTE)crc ^ *p++] ^ (crc >> 8);
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	b2da      	uxtb	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	1c59      	adds	r1, r3, #1
 800081c:	6179      	str	r1, [r7, #20]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4053      	eors	r3, r2
 8000822:	b2db      	uxtb	r3, r3
 8000824:	461a      	mov	r2, r3
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <crc32+0x54>)
 8000828:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	0a1b      	lsrs	r3, r3, #8
 8000830:	4053      	eors	r3, r2
 8000832:	60fb      	str	r3, [r7, #12]
    while (size--)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	1e5a      	subs	r2, r3, #1
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1ea      	bne.n	8000814 <crc32+0x18>

    return ~crc;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	43db      	mvns	r3, r3
}
 8000842:	4618      	mov	r0, r3
 8000844:	371c      	adds	r7, #28
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000000 	.word	0x20000000

08000854 <clear>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void clear(uint8_t *buffer, int len)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
	for(int i = 0; i<len; i++)
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	e007      	b.n	8000874 <clear+0x20>
	{
		buffer[i] = 0x00;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<len; i++)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fa      	ldr	r2, [r7, #12]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	dbf3      	blt.n	8000864 <clear+0x10>
	}
};
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
	...

0800088c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim14.Instance)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	429a      	cmp	r2, r3
 800089e:	d103      	bne.n	80008a8 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_7);
 80008a0:	2180      	movs	r1, #128	; 0x80
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008a4:	f001 fbff 	bl	80020a6 <HAL_GPIO_TogglePin>
	}
};
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000a44 	.word	0x20000a44
 80008b4:	40020400 	.word	0x40020400

080008b8 <SetEuler>:

void SetEuler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af02      	add	r7, sp, #8
	uint8_t arg[] = {0x0C};				//next message length
 80008be:	230c      	movs	r3, #12
 80008c0:	713b      	strb	r3, [r7, #4]
	PacketAssemble(ACU_BUS_ID, ACU_HANDSHAKE, arg, 1, BufferTX);
 80008c2:	1d3a      	adds	r2, r7, #4
 80008c4:	4b59      	ldr	r3, [pc, #356]	; (8000a2c <SetEuler+0x174>)
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	2301      	movs	r3, #1
 80008ca:	2100      	movs	r1, #0
 80008cc:	2001      	movs	r0, #1
 80008ce:	f7ff fe45 	bl	800055c <PacketAssemble>
	HAL_Delay(5000);
 80008d2:	f241 3088 	movw	r0, #5000	; 0x1388
 80008d6:	f000 fdc7 	bl	8001468 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2110      	movs	r1, #16
 80008de:	4854      	ldr	r0, [pc, #336]	; (8000a30 <SetEuler+0x178>)
 80008e0:	f001 fbc8 	bl	8002074 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi4, BufferTX, sizeof(BufferTX), HAL_MAX_DELAY);
 80008e4:	f04f 33ff 	mov.w	r3, #4294967295
 80008e8:	220c      	movs	r2, #12
 80008ea:	4950      	ldr	r1, [pc, #320]	; (8000a2c <SetEuler+0x174>)
 80008ec:	4851      	ldr	r0, [pc, #324]	; (8000a34 <SetEuler+0x17c>)
 80008ee:	f002 ff20 	bl	8003732 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 80008f2:	2201      	movs	r2, #1
 80008f4:	2110      	movs	r1, #16
 80008f6:	484e      	ldr	r0, [pc, #312]	; (8000a30 <SetEuler+0x178>)
 80008f8:	f001 fbbc 	bl	8002074 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f000 fdb3 	bl	8001468 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2110      	movs	r1, #16
 8000906:	484a      	ldr	r0, [pc, #296]	; (8000a30 <SetEuler+0x178>)
 8000908:	f001 fbb4 	bl	8002074 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, BufferRX, 12, HAL_MAX_DELAY);
 800090c:	f04f 33ff 	mov.w	r3, #4294967295
 8000910:	220c      	movs	r2, #12
 8000912:	4949      	ldr	r1, [pc, #292]	; (8000a38 <SetEuler+0x180>)
 8000914:	4847      	ldr	r0, [pc, #284]	; (8000a34 <SetEuler+0x17c>)
 8000916:	f003 f87a 	bl	8003a0e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 800091a:	2201      	movs	r2, #1
 800091c:	2110      	movs	r1, #16
 800091e:	4844      	ldr	r0, [pc, #272]	; (8000a30 <SetEuler+0x178>)
 8000920:	f001 fba8 	bl	8002074 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8000924:	2003      	movs	r0, #3
 8000926:	f000 fd9f 	bl	8001468 <HAL_Delay>

	deframeReturn retVal;

	retVal = PacketDisassemble(&id, &len, &cmd, BufferArg, BufferRX, sizeof(BufferArg));
 800092a:	230c      	movs	r3, #12
 800092c:	9301      	str	r3, [sp, #4]
 800092e:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <SetEuler+0x180>)
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	4b42      	ldr	r3, [pc, #264]	; (8000a3c <SetEuler+0x184>)
 8000934:	4a42      	ldr	r2, [pc, #264]	; (8000a40 <SetEuler+0x188>)
 8000936:	4943      	ldr	r1, [pc, #268]	; (8000a44 <SetEuler+0x18c>)
 8000938:	4843      	ldr	r0, [pc, #268]	; (8000a48 <SetEuler+0x190>)
 800093a:	f7ff fe99 	bl	8000670 <PacketDisassemble>
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]

	if(retVal == DEFRAME_OK)
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d104      	bne.n	8000952 <SetEuler+0x9a>
	{
	  Ack++;
 8000948:	4b40      	ldr	r3, [pc, #256]	; (8000a4c <SetEuler+0x194>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3301      	adds	r3, #1
 800094e:	4a3f      	ldr	r2, [pc, #252]	; (8000a4c <SetEuler+0x194>)
 8000950:	6013      	str	r3, [r2, #0]
	}

	if(Ack ==  1)
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <SetEuler+0x194>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d126      	bne.n	80009a8 <SetEuler+0xf0>
	{

	  float num = 2.5;
 800095a:	4b3d      	ldr	r3, [pc, #244]	; (8000a50 <SetEuler+0x198>)
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	683b      	ldr	r3, [r7, #0]
	  memmove(Euler_angles, (unsigned char*) &num,4);
 8000960:	4a3c      	ldr	r2, [pc, #240]	; (8000a54 <SetEuler+0x19c>)
 8000962:	6013      	str	r3, [r2, #0]
	  memmove(Euler_angles+4, (unsigned char*) &num,4);
 8000964:	4a3c      	ldr	r2, [pc, #240]	; (8000a58 <SetEuler+0x1a0>)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	6013      	str	r3, [r2, #0]
	  memmove(Euler_angles+8, (unsigned char*) &num,4);
 800096a:	4a3c      	ldr	r2, [pc, #240]	; (8000a5c <SetEuler+0x1a4>)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	6013      	str	r3, [r2, #0]

	  PacketAssemble(ACU_BUS_ID, ACU_SETEULER, Euler_angles, 12, BufferTX2);
 8000970:	4b3b      	ldr	r3, [pc, #236]	; (8000a60 <SetEuler+0x1a8>)
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	230c      	movs	r3, #12
 8000976:	4a37      	ldr	r2, [pc, #220]	; (8000a54 <SetEuler+0x19c>)
 8000978:	2109      	movs	r1, #9
 800097a:	2001      	movs	r0, #1
 800097c:	f7ff fdee 	bl	800055c <PacketAssemble>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	2110      	movs	r1, #16
 8000984:	482a      	ldr	r0, [pc, #168]	; (8000a30 <SetEuler+0x178>)
 8000986:	f001 fb75 	bl	8002074 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi4, BufferTX2, sizeof(BufferTX2), HAL_MAX_DELAY);
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
 800098e:	2217      	movs	r2, #23
 8000990:	4933      	ldr	r1, [pc, #204]	; (8000a60 <SetEuler+0x1a8>)
 8000992:	4828      	ldr	r0, [pc, #160]	; (8000a34 <SetEuler+0x17c>)
 8000994:	f002 fecd 	bl	8003732 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2110      	movs	r1, #16
 800099c:	4824      	ldr	r0, [pc, #144]	; (8000a30 <SetEuler+0x178>)
 800099e:	f001 fb69 	bl	8002074 <HAL_GPIO_WritePin>
	  HAL_Delay(3);
 80009a2:	2003      	movs	r0, #3
 80009a4:	f000 fd60 	bl	8001468 <HAL_Delay>
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2110      	movs	r1, #16
 80009ac:	4820      	ldr	r0, [pc, #128]	; (8000a30 <SetEuler+0x178>)
 80009ae:	f001 fb61 	bl	8002074 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, BufferRX2, 12, HAL_MAX_DELAY);
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	220c      	movs	r2, #12
 80009b8:	492a      	ldr	r1, [pc, #168]	; (8000a64 <SetEuler+0x1ac>)
 80009ba:	481e      	ldr	r0, [pc, #120]	; (8000a34 <SetEuler+0x17c>)
 80009bc:	f003 f827 	bl	8003a0e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2110      	movs	r1, #16
 80009c4:	481a      	ldr	r0, [pc, #104]	; (8000a30 <SetEuler+0x178>)
 80009c6:	f001 fb55 	bl	8002074 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 80009ca:	2003      	movs	r0, #3
 80009cc:	f000 fd4c 	bl	8001468 <HAL_Delay>

	retVal = PacketDisassemble(&id, &len, &cmd, BufferArg, BufferRX2, sizeof(BufferArg));
 80009d0:	230c      	movs	r3, #12
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <SetEuler+0x1ac>)
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <SetEuler+0x184>)
 80009da:	4a19      	ldr	r2, [pc, #100]	; (8000a40 <SetEuler+0x188>)
 80009dc:	4919      	ldr	r1, [pc, #100]	; (8000a44 <SetEuler+0x18c>)
 80009de:	481a      	ldr	r0, [pc, #104]	; (8000a48 <SetEuler+0x190>)
 80009e0:	f7ff fe46 	bl	8000670 <PacketDisassemble>
 80009e4:	4603      	mov	r3, r0
 80009e6:	71fb      	strb	r3, [r7, #7]

	if(retVal == DEFRAME_OK)
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d104      	bne.n	80009f8 <SetEuler+0x140>
	{
	  Ack++;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <SetEuler+0x194>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	4a15      	ldr	r2, [pc, #84]	; (8000a4c <SetEuler+0x194>)
 80009f6:	6013      	str	r3, [r2, #0]
	}

	Ack = 0;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <SetEuler+0x194>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
	HAL_SPIEx_FlushRxFifo(&hspi4);
 80009fe:	480d      	ldr	r0, [pc, #52]	; (8000a34 <SetEuler+0x17c>)
 8000a00:	f003 fe6c 	bl	80046dc <HAL_SPIEx_FlushRxFifo>
	clear(BufferTX, sizeof(BufferTX));
 8000a04:	210c      	movs	r1, #12
 8000a06:	4809      	ldr	r0, [pc, #36]	; (8000a2c <SetEuler+0x174>)
 8000a08:	f7ff ff24 	bl	8000854 <clear>
	clear(BufferRX, sizeof(BufferRX));
 8000a0c:	210c      	movs	r1, #12
 8000a0e:	480a      	ldr	r0, [pc, #40]	; (8000a38 <SetEuler+0x180>)
 8000a10:	f7ff ff20 	bl	8000854 <clear>
	clear(BufferTX2, sizeof(BufferTX2));
 8000a14:	2117      	movs	r1, #23
 8000a16:	4812      	ldr	r0, [pc, #72]	; (8000a60 <SetEuler+0x1a8>)
 8000a18:	f7ff ff1c 	bl	8000854 <clear>
	clear(BufferRX2, sizeof(BufferRX2));
 8000a1c:	2117      	movs	r1, #23
 8000a1e:	4811      	ldr	r0, [pc, #68]	; (8000a64 <SetEuler+0x1ac>)
 8000a20:	f7ff ff18 	bl	8000854 <clear>
};
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000428 	.word	0x20000428
 8000a30:	40021000 	.word	0x40021000
 8000a34:	200009e0 	.word	0x200009e0
 8000a38:	20000434 	.word	0x20000434
 8000a3c:	20000440 	.word	0x20000440
 8000a40:	20000add 	.word	0x20000add
 8000a44:	20000adc 	.word	0x20000adc
 8000a48:	2000097c 	.word	0x2000097c
 8000a4c:	20000488 	.word	0x20000488
 8000a50:	40200000 	.word	0x40200000
 8000a54:	2000047c 	.word	0x2000047c
 8000a58:	20000480 	.word	0x20000480
 8000a5c:	20000484 	.word	0x20000484
 8000a60:	2000044c 	.word	0x2000044c
 8000a64:	20000464 	.word	0x20000464

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6c:	f000 fc9f 	bl	80013ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a70:	f000 f82e 	bl	8000ad0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8000a74:	f000 f984 	bl	8000d80 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a78:	f000 f9a8 	bl	8000dcc <MX_GPIO_Init>
  //MX_ETH_Init();
  MX_USART3_UART_Init();
 8000a7c:	f000 f922 	bl	8000cc4 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 8000a80:	f000 f8be 	bl	8000c00 <MX_SPI4_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a84:	f000 f94e 	bl	8000d24 <MX_USB_OTG_FS_PCD_Init>
  //MX_DMA_Init();
  MX_TIM14_Init();
 8000a88:	f000 f8f8 	bl	8000c7c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim14);
 8000a8c:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <main+0x58>)
 8000a8e:	f003 fe9f 	bl	80047d0 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2110      	movs	r1, #16
 8000a96:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <main+0x5c>)
 8000a98:	f001 faec 	bl	8002074 <HAL_GPIO_WritePin>

  PacketInit();
 8000a9c:	f7ff fd48 	bl	8000530 <PacketInit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	pin = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_1);
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <main+0x60>)
 8000aa4:	f001 face 	bl	8002044 <HAL_GPIO_ReadPin>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <main+0x64>)
 8000aae:	701a      	strb	r2, [r3, #0]

	if(pin == 1 )
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <main+0x64>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d1f3      	bne.n	8000aa0 <main+0x38>
	{
		//ReqEuler();
		SetEuler();
 8000ab8:	f7ff fefe 	bl	80008b8 <SetEuler>
	pin = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_1);
 8000abc:	e7f0      	b.n	8000aa0 <main+0x38>
 8000abe:	bf00      	nop
 8000ac0:	20000a44 	.word	0x20000a44
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	40021800 	.word	0x40021800
 8000acc:	20000a90 	.word	0x20000a90

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b0b8      	sub	sp, #224	; 0xe0
 8000ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ada:	2234      	movs	r2, #52	; 0x34
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f005 f882 	bl	8005be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	2290      	movs	r2, #144	; 0x90
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f005 f873 	bl	8005be8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b02:	f001 fc33 	bl	800236c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	4b3b      	ldr	r3, [pc, #236]	; (8000bf4 <SystemClock_Config+0x124>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a3a      	ldr	r2, [pc, #232]	; (8000bf4 <SystemClock_Config+0x124>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b38      	ldr	r3, [pc, #224]	; (8000bf4 <SystemClock_Config+0x124>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b1e:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <SystemClock_Config+0x128>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a35      	ldr	r2, [pc, #212]	; (8000bf8 <SystemClock_Config+0x128>)
 8000b24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b28:	6013      	str	r3, [r2, #0]
 8000b2a:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <SystemClock_Config+0x128>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b36:	2301      	movs	r3, #1
 8000b38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b3c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b44:	2302      	movs	r3, #2
 8000b46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b52:	2304      	movs	r3, #4
 8000b54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b58:	23d8      	movs	r3, #216	; 0xd8
 8000b5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b64:	2309      	movs	r3, #9
 8000b66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b70:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b74:	4618      	mov	r0, r3
 8000b76:	f001 fc59 	bl	800242c <HAL_RCC_OscConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b80:	f000 f9e6 	bl	8000f50 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b84:	f001 fc02 	bl	800238c <HAL_PWREx_EnableOverDrive>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b8e:	f000 f9df 	bl	8000f50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b92:	230f      	movs	r3, #15
 8000b94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ba4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ba8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000bb4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000bb8:	2107      	movs	r1, #7
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 fee4 	bl	8002988 <HAL_RCC_ClockConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000bc6:	f000 f9c3 	bl	8000f50 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <SystemClock_Config+0x12c>)
 8000bcc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f002 f8d5 	bl	8002d8c <HAL_RCCEx_PeriphCLKConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000be8:	f000 f9b2 	bl	8000f50 <Error_Handler>
  }
}
 8000bec:	bf00      	nop
 8000bee:	37e0      	adds	r7, #224	; 0xe0
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40007000 	.word	0x40007000
 8000bfc:	00200100 	.word	0x00200100

08000c00 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_SPI4_Init+0x74>)
 8000c06:	4a1c      	ldr	r2, [pc, #112]	; (8000c78 <MX_SPI4_Init+0x78>)
 8000c08:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_SPI4_Init+0x74>)
 8000c0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c10:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <MX_SPI4_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c18:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_SPI4_Init+0x74>)
 8000c1a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c1e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_SPI4_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_SPI4_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_SPI4_Init+0x74>)
 8000c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c32:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_SPI4_Init+0x74>)
 8000c36:	2238      	movs	r2, #56	; 0x38
 8000c38:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_SPI4_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_SPI4_Init+0x74>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_SPI4_Init+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_SPI4_Init+0x74>)
 8000c4e:	2207      	movs	r2, #7
 8000c50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <MX_SPI4_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_SPI4_Init+0x74>)
 8000c5a:	2208      	movs	r2, #8
 8000c5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_SPI4_Init+0x74>)
 8000c60:	f002 fcbc 	bl	80035dc <HAL_SPI_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000c6a:	f000 f971 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200009e0 	.word	0x200009e0
 8000c78:	40013400 	.word	0x40013400

08000c7c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_TIM14_Init+0x40>)
 8000c82:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <MX_TIM14_Init+0x44>)
 8000c84:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10800 - 1;
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <MX_TIM14_Init+0x40>)
 8000c88:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8000c8c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <MX_TIM14_Init+0x40>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000 - 1;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_TIM14_Init+0x40>)
 8000c96:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c9a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <MX_TIM14_Init+0x40>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_TIM14_Init+0x40>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <MX_TIM14_Init+0x40>)
 8000caa:	f003 fd39 	bl	8004720 <HAL_TIM_Base_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000cb4:	f000 f94c 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000a44 	.word	0x20000a44
 8000cc0:	40002000 	.word	0x40002000

08000cc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cca:	4a15      	ldr	r2, [pc, #84]	; (8000d20 <MX_USART3_UART_Init+0x5c>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000d08:	f003 ffe0 	bl	8004ccc <HAL_UART_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d12:	f000 f91d 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000490 	.word	0x20000490
 8000d20:	40004800 	.word	0x40004800

08000d24 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d32:	2206      	movs	r2, #6
 8000d34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d38:	2202      	movs	r2, #2
 8000d3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d44:	2202      	movs	r2, #2
 8000d46:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d68:	f001 f9b7 	bl	80020da <HAL_PCD_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d72:	f000 f8ed 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000514 	.word	0x20000514

08000d80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <MX_DMA_Init+0x48>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a0f      	ldr	r2, [pc, #60]	; (8000dc8 <MX_DMA_Init+0x48>)
 8000d8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <MX_DMA_Init+0x48>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	2038      	movs	r0, #56	; 0x38
 8000da4:	f000 fc5f 	bl	8001666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000da8:	2038      	movs	r0, #56	; 0x38
 8000daa:	f000 fc78 	bl	800169e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	2039      	movs	r0, #57	; 0x39
 8000db4:	f000 fc57 	bl	8001666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000db8:	2039      	movs	r0, #57	; 0x39
 8000dba:	f000 fc70 	bl	800169e <HAL_NVIC_EnableIRQ>

}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	; 0x30
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de2:	4b56      	ldr	r3, [pc, #344]	; (8000f3c <MX_GPIO_Init+0x170>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a55      	ldr	r2, [pc, #340]	; (8000f3c <MX_GPIO_Init+0x170>)
 8000de8:	f043 0310 	orr.w	r3, r3, #16
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b53      	ldr	r3, [pc, #332]	; (8000f3c <MX_GPIO_Init+0x170>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0310 	and.w	r3, r3, #16
 8000df6:	61bb      	str	r3, [r7, #24]
 8000df8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfa:	4b50      	ldr	r3, [pc, #320]	; (8000f3c <MX_GPIO_Init+0x170>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a4f      	ldr	r2, [pc, #316]	; (8000f3c <MX_GPIO_Init+0x170>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b4d      	ldr	r3, [pc, #308]	; (8000f3c <MX_GPIO_Init+0x170>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e12:	4b4a      	ldr	r3, [pc, #296]	; (8000f3c <MX_GPIO_Init+0x170>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a49      	ldr	r2, [pc, #292]	; (8000f3c <MX_GPIO_Init+0x170>)
 8000e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b47      	ldr	r3, [pc, #284]	; (8000f3c <MX_GPIO_Init+0x170>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	4b44      	ldr	r3, [pc, #272]	; (8000f3c <MX_GPIO_Init+0x170>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a43      	ldr	r2, [pc, #268]	; (8000f3c <MX_GPIO_Init+0x170>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b41      	ldr	r3, [pc, #260]	; (8000f3c <MX_GPIO_Init+0x170>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	4b3e      	ldr	r3, [pc, #248]	; (8000f3c <MX_GPIO_Init+0x170>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a3d      	ldr	r2, [pc, #244]	; (8000f3c <MX_GPIO_Init+0x170>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b3b      	ldr	r3, [pc, #236]	; (8000f3c <MX_GPIO_Init+0x170>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e5a:	4b38      	ldr	r3, [pc, #224]	; (8000f3c <MX_GPIO_Init+0x170>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a37      	ldr	r2, [pc, #220]	; (8000f3c <MX_GPIO_Init+0x170>)
 8000e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b35      	ldr	r3, [pc, #212]	; (8000f3c <MX_GPIO_Init+0x170>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e72:	4b32      	ldr	r3, [pc, #200]	; (8000f3c <MX_GPIO_Init+0x170>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a31      	ldr	r2, [pc, #196]	; (8000f3c <MX_GPIO_Init+0x170>)
 8000e78:	f043 0308 	orr.w	r3, r3, #8
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <MX_GPIO_Init+0x170>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2110      	movs	r1, #16
 8000e8e:	482c      	ldr	r0, [pc, #176]	; (8000f40 <MX_GPIO_Init+0x174>)
 8000e90:	f001 f8f0 	bl	8002074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e9a:	482a      	ldr	r0, [pc, #168]	; (8000f44 <MX_GPIO_Init+0x178>)
 8000e9c:	f001 f8ea 	bl	8002074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2140      	movs	r1, #64	; 0x40
 8000ea4:	4828      	ldr	r0, [pc, #160]	; (8000f48 <MX_GPIO_Init+0x17c>)
 8000ea6:	f001 f8e5 	bl	8002074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eaa:	2310      	movs	r3, #16
 8000eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	481f      	ldr	r0, [pc, #124]	; (8000f40 <MX_GPIO_Init+0x174>)
 8000ec2:	f000 ff13 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ec6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ecc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	481b      	ldr	r0, [pc, #108]	; (8000f4c <MX_GPIO_Init+0x180>)
 8000ede:	f000 ff05 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ee2:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4812      	ldr	r0, [pc, #72]	; (8000f44 <MX_GPIO_Init+0x178>)
 8000efc:	f000 fef6 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pins : PushButton_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = PushButton_Pin|USB_OverCurrent_Pin;
 8000f00:	2382      	movs	r3, #130	; 0x82
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	480d      	ldr	r0, [pc, #52]	; (8000f48 <MX_GPIO_Init+0x17c>)
 8000f14:	f000 feea 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f18:	2340      	movs	r3, #64	; 0x40
 8000f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4806      	ldr	r0, [pc, #24]	; (8000f48 <MX_GPIO_Init+0x17c>)
 8000f30:	f000 fedc 	bl	8001cec <HAL_GPIO_Init>

}
 8000f34:	bf00      	nop
 8000f36:	3730      	adds	r7, #48	; 0x30
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40020400 	.word	0x40020400
 8000f48:	40021800 	.word	0x40021800
 8000f4c:	40020800 	.word	0x40020800

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <Error_Handler+0x8>
	...

08000f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f84:	6453      	str	r3, [r2, #68]	; 0x44
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800

08000fa4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a4a      	ldr	r2, [pc, #296]	; (80010ec <HAL_SPI_MspInit+0x148>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	f040 808e 	bne.w	80010e4 <HAL_SPI_MspInit+0x140>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000fc8:	4b49      	ldr	r3, [pc, #292]	; (80010f0 <HAL_SPI_MspInit+0x14c>)
 8000fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fcc:	4a48      	ldr	r2, [pc, #288]	; (80010f0 <HAL_SPI_MspInit+0x14c>)
 8000fce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fd2:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd4:	4b46      	ldr	r3, [pc, #280]	; (80010f0 <HAL_SPI_MspInit+0x14c>)
 8000fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fe0:	4b43      	ldr	r3, [pc, #268]	; (80010f0 <HAL_SPI_MspInit+0x14c>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	4a42      	ldr	r2, [pc, #264]	; (80010f0 <HAL_SPI_MspInit+0x14c>)
 8000fe6:	f043 0310 	orr.w	r3, r3, #16
 8000fea:	6313      	str	r3, [r2, #48]	; 0x30
 8000fec:	4b40      	ldr	r3, [pc, #256]	; (80010f0 <HAL_SPI_MspInit+0x14c>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	f003 0310 	and.w	r3, r3, #16
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000ff8:	2364      	movs	r3, #100	; 0x64
 8000ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001008:	2305      	movs	r3, #5
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	4838      	ldr	r0, [pc, #224]	; (80010f4 <HAL_SPI_MspInit+0x150>)
 8001014:	f000 fe6a 	bl	8001cec <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8001018:	4b37      	ldr	r3, [pc, #220]	; (80010f8 <HAL_SPI_MspInit+0x154>)
 800101a:	4a38      	ldr	r2, [pc, #224]	; (80010fc <HAL_SPI_MspInit+0x158>)
 800101c:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 800101e:	4b36      	ldr	r3, [pc, #216]	; (80010f8 <HAL_SPI_MspInit+0x154>)
 8001020:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001024:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001026:	4b34      	ldr	r3, [pc, #208]	; (80010f8 <HAL_SPI_MspInit+0x154>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800102c:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <HAL_SPI_MspInit+0x154>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001032:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <HAL_SPI_MspInit+0x154>)
 8001034:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001038:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800103a:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <HAL_SPI_MspInit+0x154>)
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_SPI_MspInit+0x154>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001046:	4b2c      	ldr	r3, [pc, #176]	; (80010f8 <HAL_SPI_MspInit+0x154>)
 8001048:	2200      	movs	r2, #0
 800104a:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800104c:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <HAL_SPI_MspInit+0x154>)
 800104e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001052:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001054:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <HAL_SPI_MspInit+0x154>)
 8001056:	2200      	movs	r2, #0
 8001058:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800105a:	4827      	ldr	r0, [pc, #156]	; (80010f8 <HAL_SPI_MspInit+0x154>)
 800105c:	f000 fb3a 	bl	80016d4 <HAL_DMA_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 8001066:	f7ff ff73 	bl	8000f50 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a22      	ldr	r2, [pc, #136]	; (80010f8 <HAL_SPI_MspInit+0x154>)
 800106e:	659a      	str	r2, [r3, #88]	; 0x58
 8001070:	4a21      	ldr	r2, [pc, #132]	; (80010f8 <HAL_SPI_MspInit+0x154>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8001076:	4b22      	ldr	r3, [pc, #136]	; (8001100 <HAL_SPI_MspInit+0x15c>)
 8001078:	4a22      	ldr	r2, [pc, #136]	; (8001104 <HAL_SPI_MspInit+0x160>)
 800107a:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 800107c:	4b20      	ldr	r3, [pc, #128]	; (8001100 <HAL_SPI_MspInit+0x15c>)
 800107e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001082:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <HAL_SPI_MspInit+0x15c>)
 8001086:	2240      	movs	r2, #64	; 0x40
 8001088:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_SPI_MspInit+0x15c>)
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <HAL_SPI_MspInit+0x15c>)
 8001092:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001096:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_SPI_MspInit+0x15c>)
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <HAL_SPI_MspInit+0x15c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <HAL_SPI_MspInit+0x15c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_SPI_MspInit+0x15c>)
 80010ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010b0:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <HAL_SPI_MspInit+0x15c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80010b8:	4811      	ldr	r0, [pc, #68]	; (8001100 <HAL_SPI_MspInit+0x15c>)
 80010ba:	f000 fb0b 	bl	80016d4 <HAL_DMA_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_SPI_MspInit+0x124>
    {
      Error_Handler();
 80010c4:	f7ff ff44 	bl	8000f50 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <HAL_SPI_MspInit+0x15c>)
 80010cc:	655a      	str	r2, [r3, #84]	; 0x54
 80010ce:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <HAL_SPI_MspInit+0x15c>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	2054      	movs	r0, #84	; 0x54
 80010da:	f000 fac4 	bl	8001666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80010de:	2054      	movs	r0, #84	; 0x54
 80010e0:	f000 fadd 	bl	800169e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40013400 	.word	0x40013400
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40021000 	.word	0x40021000
 80010f8:	20000918 	.word	0x20000918
 80010fc:	40026410 	.word	0x40026410
 8001100:	20000980 	.word	0x20000980
 8001104:	40026428 	.word	0x40026428

08001108 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0d      	ldr	r2, [pc, #52]	; (800114c <HAL_TIM_Base_MspInit+0x44>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d113      	bne.n	8001142 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <HAL_TIM_Base_MspInit+0x48>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	4a0c      	ldr	r2, [pc, #48]	; (8001150 <HAL_TIM_Base_MspInit+0x48>)
 8001120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001124:	6413      	str	r3, [r2, #64]	; 0x40
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_TIM_Base_MspInit+0x48>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	202d      	movs	r0, #45	; 0x2d
 8001138:	f000 fa95 	bl	8001666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800113c:	202d      	movs	r0, #45	; 0x2d
 800113e:	f000 faae 	bl	800169e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40002000 	.word	0x40002000
 8001150:	40023800 	.word	0x40023800

08001154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <HAL_UART_MspInit+0x7c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d128      	bne.n	80011c8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <HAL_UART_MspInit+0x80>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	4a16      	ldr	r2, [pc, #88]	; (80011d4 <HAL_UART_MspInit+0x80>)
 800117c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001180:	6413      	str	r3, [r2, #64]	; 0x40
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_UART_MspInit+0x80>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_UART_MspInit+0x80>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <HAL_UART_MspInit+0x80>)
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_UART_MspInit+0x80>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011b8:	2307      	movs	r3, #7
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <HAL_UART_MspInit+0x84>)
 80011c4:	f000 fd92 	bl	8001cec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40004800 	.word	0x40004800
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020c00 	.word	0x40020c00

080011dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011fc:	d141      	bne.n	8001282 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b23      	ldr	r3, [pc, #140]	; (800128c <HAL_PCD_MspInit+0xb0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a22      	ldr	r2, [pc, #136]	; (800128c <HAL_PCD_MspInit+0xb0>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <HAL_PCD_MspInit+0xb0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001216:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001228:	230a      	movs	r3, #10
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	4817      	ldr	r0, [pc, #92]	; (8001290 <HAL_PCD_MspInit+0xb4>)
 8001234:	f000 fd5a 	bl	8001cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001238:	f44f 7300 	mov.w	r3, #512	; 0x200
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123e:	2300      	movs	r3, #0
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	4810      	ldr	r0, [pc, #64]	; (8001290 <HAL_PCD_MspInit+0xb4>)
 800124e:	f000 fd4d 	bl	8001cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <HAL_PCD_MspInit+0xb0>)
 8001254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001256:	4a0d      	ldr	r2, [pc, #52]	; (800128c <HAL_PCD_MspInit+0xb0>)
 8001258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800125c:	6353      	str	r3, [r2, #52]	; 0x34
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_PCD_MspInit+0xb0>)
 8001260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_PCD_MspInit+0xb0>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a07      	ldr	r2, [pc, #28]	; (800128c <HAL_PCD_MspInit+0xb0>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_PCD_MspInit+0xb0>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	40020000 	.word	0x40020000

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <NMI_Handler+0x4>

0800129a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <MemManage_Handler+0x4>

080012a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <BusFault_Handler+0x4>

080012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <UsageFault_Handler+0x4>

080012b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e0:	f000 f8a2 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80012ee:	f003 fae7 	bl	80048c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000a44 	.word	0x20000a44

080012fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <DMA2_Stream0_IRQHandler+0x10>)
 8001302:	f000 fab7 	bl	8001874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000918 	.word	0x20000918

08001310 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <DMA2_Stream1_IRQHandler+0x10>)
 8001316:	f000 faad 	bl	8001874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000980 	.word	0x20000980

08001324 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <SPI4_IRQHandler+0x10>)
 800132a:	f002 feb3 	bl	8004094 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200009e0 	.word	0x200009e0

08001338 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <SystemInit+0x20>)
 800133e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001342:	4a05      	ldr	r2, [pc, #20]	; (8001358 <SystemInit+0x20>)
 8001344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800135c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001394 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001362:	490e      	ldr	r1, [pc, #56]	; (800139c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001364:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001368:	e002      	b.n	8001370 <LoopCopyDataInit>

0800136a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800136c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136e:	3304      	adds	r3, #4

08001370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001374:	d3f9      	bcc.n	800136a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001376:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001378:	4c0b      	ldr	r4, [pc, #44]	; (80013a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800137c:	e001      	b.n	8001382 <LoopFillZerobss>

0800137e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001380:	3204      	adds	r2, #4

08001382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001384:	d3fb      	bcc.n	800137e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001386:	f7ff ffd7 	bl	8001338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800138a:	f004 fbed 	bl	8005b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138e:	f7ff fb6b 	bl	8000a68 <main>
  bx  lr    
 8001392:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001394:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	2000040c 	.word	0x2000040c
  ldr r2, =_sidata
 80013a0:	08005c40 	.word	0x08005c40
  ldr r2, =_sbss
 80013a4:	2000040c 	.word	0x2000040c
  ldr r4, =_ebss
 80013a8:	20000ae4 	.word	0x20000ae4

080013ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC_IRQHandler>

080013ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b2:	2003      	movs	r0, #3
 80013b4:	f000 f94c 	bl	8001650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b8:	2000      	movs	r0, #0
 80013ba:	f000 f805 	bl	80013c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013be:	f7ff fdcd 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x54>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0x58>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013de:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f967 	bl	80016ba <HAL_SYSTICK_Config>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00e      	b.n	8001414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d80a      	bhi.n	8001412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f000 f92f 	bl	8001666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_InitTick+0x5c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000400 	.word	0x20000400
 8001420:	20000408 	.word	0x20000408
 8001424:	20000404 	.word	0x20000404

08001428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_IncTick+0x20>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_IncTick+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <HAL_IncTick+0x24>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000408 	.word	0x20000408
 800144c:	20000ae0 	.word	0x20000ae0

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000ae0 	.word	0x20000ae0

08001468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001470:	f7ff ffee 	bl	8001450 <HAL_GetTick>
 8001474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001480:	d005      	beq.n	800148e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_Delay+0x44>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800148e:	bf00      	nop
 8001490:	f7ff ffde 	bl	8001450 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	429a      	cmp	r2, r3
 800149e:	d8f7      	bhi.n	8001490 <HAL_Delay+0x28>
  {
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000408 	.word	0x20000408

080014b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <__NVIC_SetPriorityGrouping+0x40>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <__NVIC_SetPriorityGrouping+0x40>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00
 80014f4:	05fa0000 	.word	0x05fa0000

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0b      	blt.n	800153e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 021f 	and.w	r2, r3, #31
 800152c:	4907      	ldr	r1, [pc, #28]	; (800154c <__NVIC_EnableIRQ+0x38>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2001      	movs	r0, #1
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	; (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	; (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f1c3 0307 	rsb	r3, r3, #7
 80015be:	2b04      	cmp	r3, #4
 80015c0:	bf28      	it	cs
 80015c2:	2304      	movcs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3304      	adds	r3, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d902      	bls.n	80015d4 <NVIC_EncodePriority+0x30>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3b03      	subs	r3, #3
 80015d2:	e000      	b.n	80015d6 <NVIC_EncodePriority+0x32>
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	4313      	orrs	r3, r2
         );
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3724      	adds	r7, #36	; 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800161c:	d301      	bcc.n	8001622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161e:	2301      	movs	r3, #1
 8001620:	e00f      	b.n	8001642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <SysTick_Config+0x40>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162a:	210f      	movs	r1, #15
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f7ff ff8e 	bl	8001550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <SysTick_Config+0x40>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163a:	4b04      	ldr	r3, [pc, #16]	; (800164c <SysTick_Config+0x40>)
 800163c:	2207      	movs	r2, #7
 800163e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	e000e010 	.word	0xe000e010

08001650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ff29 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001678:	f7ff ff3e 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 800167c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	6978      	ldr	r0, [r7, #20]
 8001684:	f7ff ff8e 	bl	80015a4 <NVIC_EncodePriority>
 8001688:	4602      	mov	r2, r0
 800168a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff5d 	bl	8001550 <__NVIC_SetPriority>
}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff31 	bl	8001514 <__NVIC_EnableIRQ>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ffa2 	bl	800160c <SysTick_Config>
 80016c8:	4603      	mov	r3, r0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016e0:	f7ff feb6 	bl	8001450 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e099      	b.n	8001824 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2202      	movs	r2, #2
 80016f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0201 	bic.w	r2, r2, #1
 800170e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001710:	e00f      	b.n	8001732 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001712:	f7ff fe9d 	bl	8001450 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b05      	cmp	r3, #5
 800171e:	d908      	bls.n	8001732 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2220      	movs	r2, #32
 8001724:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2203      	movs	r2, #3
 800172a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e078      	b.n	8001824 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1e8      	bne.n	8001712 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	4b38      	ldr	r3, [pc, #224]	; (800182c <HAL_DMA_Init+0x158>)
 800174c:	4013      	ands	r3, r2
 800174e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800175e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800176a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001776:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	4313      	orrs	r3, r2
 8001782:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	2b04      	cmp	r3, #4
 800178a:	d107      	bne.n	800179c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	4313      	orrs	r3, r2
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	4313      	orrs	r3, r2
 800179a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f023 0307 	bic.w	r3, r3, #7
 80017b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d117      	bne.n	80017f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00e      	beq.n	80017f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 fa0b 	bl	8001bf4 <DMA_CheckFifoParam>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2240      	movs	r2, #64	; 0x40
 80017e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017f2:	2301      	movs	r3, #1
 80017f4:	e016      	b.n	8001824 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f9c2 	bl	8001b88 <DMA_CalcBaseAndBitshift>
 8001804:	4603      	mov	r3, r0
 8001806:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180c:	223f      	movs	r2, #63	; 0x3f
 800180e:	409a      	lsls	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	e010803f 	.word	0xe010803f

08001830 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d004      	beq.n	800184e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e00c      	b.n	8001868 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2205      	movs	r2, #5
 8001852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0201 	bic.w	r2, r2, #1
 8001864:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001880:	4b92      	ldr	r3, [pc, #584]	; (8001acc <HAL_DMA_IRQHandler+0x258>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a92      	ldr	r2, [pc, #584]	; (8001ad0 <HAL_DMA_IRQHandler+0x25c>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	0a9b      	lsrs	r3, r3, #10
 800188c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001892:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189e:	2208      	movs	r2, #8
 80018a0:	409a      	lsls	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d01a      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d013      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0204 	bic.w	r2, r2, #4
 80018c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018cc:	2208      	movs	r2, #8
 80018ce:	409a      	lsls	r2, r3
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d8:	f043 0201 	orr.w	r2, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e4:	2201      	movs	r2, #1
 80018e6:	409a      	lsls	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d012      	beq.n	8001916 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00b      	beq.n	8001916 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001902:	2201      	movs	r2, #1
 8001904:	409a      	lsls	r2, r3
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190e:	f043 0202 	orr.w	r2, r3, #2
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191a:	2204      	movs	r2, #4
 800191c:	409a      	lsls	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4013      	ands	r3, r2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d012      	beq.n	800194c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00b      	beq.n	800194c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001938:	2204      	movs	r2, #4
 800193a:	409a      	lsls	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001944:	f043 0204 	orr.w	r2, r3, #4
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001950:	2210      	movs	r2, #16
 8001952:	409a      	lsls	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d043      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	d03c      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196e:	2210      	movs	r2, #16
 8001970:	409a      	lsls	r2, r3
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d018      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d108      	bne.n	80019a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	2b00      	cmp	r3, #0
 8001998:	d024      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	4798      	blx	r3
 80019a2:	e01f      	b.n	80019e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d01b      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	4798      	blx	r3
 80019b4:	e016      	b.n	80019e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d107      	bne.n	80019d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0208 	bic.w	r2, r2, #8
 80019d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e8:	2220      	movs	r2, #32
 80019ea:	409a      	lsls	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 808e 	beq.w	8001b12 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0310 	and.w	r3, r3, #16
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 8086 	beq.w	8001b12 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d136      	bne.n	8001a8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0216 	bic.w	r2, r2, #22
 8001a2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	695a      	ldr	r2, [r3, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d103      	bne.n	8001a4e <HAL_DMA_IRQHandler+0x1da>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d007      	beq.n	8001a5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0208 	bic.w	r2, r2, #8
 8001a5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a62:	223f      	movs	r2, #63	; 0x3f
 8001a64:	409a      	lsls	r2, r3
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d07d      	beq.n	8001b7e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	4798      	blx	r3
        }
        return;
 8001a8a:	e078      	b.n	8001b7e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d01c      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d108      	bne.n	8001aba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d030      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	4798      	blx	r3
 8001ab8:	e02b      	b.n	8001b12 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d027      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	4798      	blx	r3
 8001aca:	e022      	b.n	8001b12 <HAL_DMA_IRQHandler+0x29e>
 8001acc:	20000400 	.word	0x20000400
 8001ad0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10f      	bne.n	8001b02 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0210 	bic.w	r2, r2, #16
 8001af0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d032      	beq.n	8001b80 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d022      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2205      	movs	r2, #5
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0201 	bic.w	r2, r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	3301      	adds	r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d307      	bcc.n	8001b5a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f2      	bne.n	8001b3e <HAL_DMA_IRQHandler+0x2ca>
 8001b58:	e000      	b.n	8001b5c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b5a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	4798      	blx	r3
 8001b7c:	e000      	b.n	8001b80 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b7e:	bf00      	nop
    }
  }
}
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop

08001b88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	3b10      	subs	r3, #16
 8001b98:	4a13      	ldr	r2, [pc, #76]	; (8001be8 <DMA_CalcBaseAndBitshift+0x60>)
 8001b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9e:	091b      	lsrs	r3, r3, #4
 8001ba0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <DMA_CalcBaseAndBitshift+0x64>)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d908      	bls.n	8001bc8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <DMA_CalcBaseAndBitshift+0x68>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	1d1a      	adds	r2, r3, #4
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	659a      	str	r2, [r3, #88]	; 0x58
 8001bc6:	e006      	b.n	8001bd6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <DMA_CalcBaseAndBitshift+0x68>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	aaaaaaab 	.word	0xaaaaaaab
 8001bec:	08005c28 	.word	0x08005c28
 8001bf0:	fffffc00 	.word	0xfffffc00

08001bf4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d11f      	bne.n	8001c4e <DMA_CheckFifoParam+0x5a>
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d856      	bhi.n	8001cc2 <DMA_CheckFifoParam+0xce>
 8001c14:	a201      	add	r2, pc, #4	; (adr r2, 8001c1c <DMA_CheckFifoParam+0x28>)
 8001c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1a:	bf00      	nop
 8001c1c:	08001c2d 	.word	0x08001c2d
 8001c20:	08001c3f 	.word	0x08001c3f
 8001c24:	08001c2d 	.word	0x08001c2d
 8001c28:	08001cc3 	.word	0x08001cc3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d046      	beq.n	8001cc6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c3c:	e043      	b.n	8001cc6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c46:	d140      	bne.n	8001cca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c4c:	e03d      	b.n	8001cca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c56:	d121      	bne.n	8001c9c <DMA_CheckFifoParam+0xa8>
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d837      	bhi.n	8001cce <DMA_CheckFifoParam+0xda>
 8001c5e:	a201      	add	r2, pc, #4	; (adr r2, 8001c64 <DMA_CheckFifoParam+0x70>)
 8001c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c64:	08001c75 	.word	0x08001c75
 8001c68:	08001c7b 	.word	0x08001c7b
 8001c6c:	08001c75 	.word	0x08001c75
 8001c70:	08001c8d 	.word	0x08001c8d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
      break;
 8001c78:	e030      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d025      	beq.n	8001cd2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c8a:	e022      	b.n	8001cd2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c94:	d11f      	bne.n	8001cd6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c9a:	e01c      	b.n	8001cd6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d903      	bls.n	8001caa <DMA_CheckFifoParam+0xb6>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d003      	beq.n	8001cb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ca8:	e018      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
      break;
 8001cae:	e015      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00e      	beq.n	8001cda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8001cc0:	e00b      	b.n	8001cda <DMA_CheckFifoParam+0xe6>
      break;
 8001cc2:	bf00      	nop
 8001cc4:	e00a      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      break;
 8001cc6:	bf00      	nop
 8001cc8:	e008      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      break;
 8001cca:	bf00      	nop
 8001ccc:	e006      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      break;
 8001cce:	bf00      	nop
 8001cd0:	e004      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      break;
 8001cd2:	bf00      	nop
 8001cd4:	e002      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      break;   
 8001cd6:	bf00      	nop
 8001cd8:	e000      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      break;
 8001cda:	bf00      	nop
    }
  } 
  
  return status; 
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop

08001cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	e175      	b.n	8001ff8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	f040 8164 	bne.w	8001ff2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d005      	beq.n	8001d42 <HAL_GPIO_Init+0x56>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d130      	bne.n	8001da4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 0201 	and.w	r2, r3, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d017      	beq.n	8001de0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d123      	bne.n	8001e34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	08da      	lsrs	r2, r3, #3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3208      	adds	r2, #8
 8001df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	220f      	movs	r2, #15
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	08da      	lsrs	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3208      	adds	r2, #8
 8001e2e:	69b9      	ldr	r1, [r7, #24]
 8001e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0203 	and.w	r2, r3, #3
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80be 	beq.w	8001ff2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e76:	4b66      	ldr	r3, [pc, #408]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	4a65      	ldr	r2, [pc, #404]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e80:	6453      	str	r3, [r2, #68]	; 0x44
 8001e82:	4b63      	ldr	r3, [pc, #396]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e8e:	4a61      	ldr	r2, [pc, #388]	; (8002014 <HAL_GPIO_Init+0x328>)
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a58      	ldr	r2, [pc, #352]	; (8002018 <HAL_GPIO_Init+0x32c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d037      	beq.n	8001f2a <HAL_GPIO_Init+0x23e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a57      	ldr	r2, [pc, #348]	; (800201c <HAL_GPIO_Init+0x330>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d031      	beq.n	8001f26 <HAL_GPIO_Init+0x23a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a56      	ldr	r2, [pc, #344]	; (8002020 <HAL_GPIO_Init+0x334>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d02b      	beq.n	8001f22 <HAL_GPIO_Init+0x236>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a55      	ldr	r2, [pc, #340]	; (8002024 <HAL_GPIO_Init+0x338>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d025      	beq.n	8001f1e <HAL_GPIO_Init+0x232>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a54      	ldr	r2, [pc, #336]	; (8002028 <HAL_GPIO_Init+0x33c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01f      	beq.n	8001f1a <HAL_GPIO_Init+0x22e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a53      	ldr	r2, [pc, #332]	; (800202c <HAL_GPIO_Init+0x340>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d019      	beq.n	8001f16 <HAL_GPIO_Init+0x22a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a52      	ldr	r2, [pc, #328]	; (8002030 <HAL_GPIO_Init+0x344>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0x226>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a51      	ldr	r2, [pc, #324]	; (8002034 <HAL_GPIO_Init+0x348>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00d      	beq.n	8001f0e <HAL_GPIO_Init+0x222>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a50      	ldr	r2, [pc, #320]	; (8002038 <HAL_GPIO_Init+0x34c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d007      	beq.n	8001f0a <HAL_GPIO_Init+0x21e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4f      	ldr	r2, [pc, #316]	; (800203c <HAL_GPIO_Init+0x350>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d101      	bne.n	8001f06 <HAL_GPIO_Init+0x21a>
 8001f02:	2309      	movs	r3, #9
 8001f04:	e012      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f06:	230a      	movs	r3, #10
 8001f08:	e010      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f0a:	2308      	movs	r3, #8
 8001f0c:	e00e      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f0e:	2307      	movs	r3, #7
 8001f10:	e00c      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f12:	2306      	movs	r3, #6
 8001f14:	e00a      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f16:	2305      	movs	r3, #5
 8001f18:	e008      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	e006      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e004      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e002      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	f002 0203 	and.w	r2, r2, #3
 8001f32:	0092      	lsls	r2, r2, #2
 8001f34:	4093      	lsls	r3, r2
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f3c:	4935      	ldr	r1, [pc, #212]	; (8002014 <HAL_GPIO_Init+0x328>)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	089b      	lsrs	r3, r3, #2
 8001f42:	3302      	adds	r3, #2
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f6e:	4a34      	ldr	r2, [pc, #208]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f74:	4b32      	ldr	r3, [pc, #200]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f98:	4a29      	ldr	r2, [pc, #164]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f9e:	4b28      	ldr	r3, [pc, #160]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fc2:	4a1f      	ldr	r2, [pc, #124]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fec:	4a14      	ldr	r2, [pc, #80]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	2b0f      	cmp	r3, #15
 8001ffc:	f67f ae86 	bls.w	8001d0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3724      	adds	r7, #36	; 0x24
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	40013800 	.word	0x40013800
 8002018:	40020000 	.word	0x40020000
 800201c:	40020400 	.word	0x40020400
 8002020:	40020800 	.word	0x40020800
 8002024:	40020c00 	.word	0x40020c00
 8002028:	40021000 	.word	0x40021000
 800202c:	40021400 	.word	0x40021400
 8002030:	40021800 	.word	0x40021800
 8002034:	40021c00 	.word	0x40021c00
 8002038:	40022000 	.word	0x40022000
 800203c:	40022400 	.word	0x40022400
 8002040:	40013c00 	.word	0x40013c00

08002044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	887b      	ldrh	r3, [r7, #2]
 8002056:	4013      	ands	r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800205c:	2301      	movs	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
 8002060:	e001      	b.n	8002066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002066:	7bfb      	ldrb	r3, [r7, #15]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	807b      	strh	r3, [r7, #2]
 8002080:	4613      	mov	r3, r2
 8002082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002084:	787b      	ldrb	r3, [r7, #1]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800208a:	887a      	ldrh	r2, [r7, #2]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002090:	e003      	b.n	800209a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002092:	887b      	ldrh	r3, [r7, #2]
 8002094:	041a      	lsls	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	619a      	str	r2, [r3, #24]
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b085      	sub	sp, #20
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	460b      	mov	r3, r1
 80020b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020b8:	887a      	ldrh	r2, [r7, #2]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4013      	ands	r3, r2
 80020be:	041a      	lsls	r2, r3, #16
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	43d9      	mvns	r1, r3
 80020c4:	887b      	ldrh	r3, [r7, #2]
 80020c6:	400b      	ands	r3, r1
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	619a      	str	r2, [r3, #24]
}
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020dc:	b08f      	sub	sp, #60	; 0x3c
 80020de:	af0a      	add	r7, sp, #40	; 0x28
 80020e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e116      	b.n	800231a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d106      	bne.n	800210c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff f868 	bl	80011dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2203      	movs	r2, #3
 8002110:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f003 fa86 	bl	800563c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	603b      	str	r3, [r7, #0]
 8002136:	687e      	ldr	r6, [r7, #4]
 8002138:	466d      	mov	r5, sp
 800213a:	f106 0410 	add.w	r4, r6, #16
 800213e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002140:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002146:	e894 0003 	ldmia.w	r4, {r0, r1}
 800214a:	e885 0003 	stmia.w	r5, {r0, r1}
 800214e:	1d33      	adds	r3, r6, #4
 8002150:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002152:	6838      	ldr	r0, [r7, #0]
 8002154:	f003 fa1a 	bl	800558c <USB_CoreInit>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2202      	movs	r2, #2
 8002162:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e0d7      	b.n	800231a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f003 fa74 	bl	800565e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002176:	2300      	movs	r3, #0
 8002178:	73fb      	strb	r3, [r7, #15]
 800217a:	e04a      	b.n	8002212 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	333d      	adds	r3, #61	; 0x3d
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	1a9b      	subs	r3, r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	333c      	adds	r3, #60	; 0x3c
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	b298      	uxth	r0, r3
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	3342      	adds	r3, #66	; 0x42
 80021b8:	4602      	mov	r2, r0
 80021ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021bc:	7bfa      	ldrb	r2, [r7, #15]
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	333f      	adds	r3, #63	; 0x3f
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	3344      	adds	r3, #68	; 0x44
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	3348      	adds	r3, #72	; 0x48
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	3350      	adds	r3, #80	; 0x50
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	3301      	adds	r3, #1
 8002210:	73fb      	strb	r3, [r7, #15]
 8002212:	7bfa      	ldrb	r2, [r7, #15]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	d3af      	bcc.n	800217c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]
 8002220:	e044      	b.n	80022ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002222:	7bfa      	ldrb	r2, [r7, #15]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002238:	7bfa      	ldrb	r2, [r7, #15]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800224a:	7bfa      	ldrb	r2, [r7, #15]
 800224c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800224e:	7bfa      	ldrb	r2, [r7, #15]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002264:	7bfa      	ldrb	r2, [r7, #15]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800227a:	7bfa      	ldrb	r2, [r7, #15]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	3301      	adds	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d3b5      	bcc.n	8002222 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	687e      	ldr	r6, [r7, #4]
 80022be:	466d      	mov	r5, sp
 80022c0:	f106 0410 	add.w	r4, r6, #16
 80022c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80022d4:	1d33      	adds	r3, r6, #4
 80022d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022d8:	6838      	ldr	r0, [r7, #0]
 80022da:	f003 fa0d 	bl	80056f8 <USB_DevInit>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e014      	b.n	800231a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	2b01      	cmp	r3, #1
 8002306:	d102      	bne.n	800230e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f80b 	bl	8002324 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f003 fbc7 	bl	8005aa6 <USB_DevDisconnect>

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002324 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002352:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_PCDEx_ActivateLPM+0x44>)
 8002354:	4313      	orrs	r3, r2
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	10000003 	.word	0x10000003

0800236c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a04      	ldr	r2, [pc, #16]	; (8002388 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237a:	6013      	str	r3, [r2, #0]
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40007000 	.word	0x40007000

0800238c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	4b23      	ldr	r3, [pc, #140]	; (8002424 <HAL_PWREx_EnableOverDrive+0x98>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	4a22      	ldr	r2, [pc, #136]	; (8002424 <HAL_PWREx_EnableOverDrive+0x98>)
 800239c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a0:	6413      	str	r3, [r2, #64]	; 0x40
 80023a2:	4b20      	ldr	r3, [pc, #128]	; (8002424 <HAL_PWREx_EnableOverDrive+0x98>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80023ae:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a1d      	ldr	r2, [pc, #116]	; (8002428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023ba:	f7ff f849 	bl	8001450 <HAL_GetTick>
 80023be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023c0:	e009      	b.n	80023d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023c2:	f7ff f845 	bl	8001450 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023d0:	d901      	bls.n	80023d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e022      	b.n	800241c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023d6:	4b14      	ldr	r3, [pc, #80]	; (8002428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e2:	d1ee      	bne.n	80023c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023e4:	4b10      	ldr	r3, [pc, #64]	; (8002428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0f      	ldr	r2, [pc, #60]	; (8002428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023f0:	f7ff f82e 	bl	8001450 <HAL_GetTick>
 80023f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023f6:	e009      	b.n	800240c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023f8:	f7ff f82a 	bl	8001450 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002406:	d901      	bls.n	800240c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e007      	b.n	800241c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_PWREx_EnableOverDrive+0x9c>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002414:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002418:	d1ee      	bne.n	80023f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40023800 	.word	0x40023800
 8002428:	40007000 	.word	0x40007000

0800242c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002434:	2300      	movs	r3, #0
 8002436:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e29b      	b.n	800297a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8087 	beq.w	800255e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002450:	4b96      	ldr	r3, [pc, #600]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b04      	cmp	r3, #4
 800245a:	d00c      	beq.n	8002476 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245c:	4b93      	ldr	r3, [pc, #588]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 030c 	and.w	r3, r3, #12
 8002464:	2b08      	cmp	r3, #8
 8002466:	d112      	bne.n	800248e <HAL_RCC_OscConfig+0x62>
 8002468:	4b90      	ldr	r3, [pc, #576]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002474:	d10b      	bne.n	800248e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002476:	4b8d      	ldr	r3, [pc, #564]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d06c      	beq.n	800255c <HAL_RCC_OscConfig+0x130>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d168      	bne.n	800255c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e275      	b.n	800297a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002496:	d106      	bne.n	80024a6 <HAL_RCC_OscConfig+0x7a>
 8002498:	4b84      	ldr	r3, [pc, #528]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a83      	ldr	r2, [pc, #524]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 800249e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	e02e      	b.n	8002504 <HAL_RCC_OscConfig+0xd8>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x9c>
 80024ae:	4b7f      	ldr	r3, [pc, #508]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a7e      	ldr	r2, [pc, #504]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4b7c      	ldr	r3, [pc, #496]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a7b      	ldr	r2, [pc, #492]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e01d      	b.n	8002504 <HAL_RCC_OscConfig+0xd8>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0xc0>
 80024d2:	4b76      	ldr	r3, [pc, #472]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a75      	ldr	r2, [pc, #468]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	4b73      	ldr	r3, [pc, #460]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a72      	ldr	r2, [pc, #456]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e00b      	b.n	8002504 <HAL_RCC_OscConfig+0xd8>
 80024ec:	4b6f      	ldr	r3, [pc, #444]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a6e      	ldr	r2, [pc, #440]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4b6c      	ldr	r3, [pc, #432]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a6b      	ldr	r2, [pc, #428]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80024fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d013      	beq.n	8002534 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7fe ffa0 	bl	8001450 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002514:	f7fe ff9c 	bl	8001450 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	; 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e229      	b.n	800297a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002526:	4b61      	ldr	r3, [pc, #388]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0xe8>
 8002532:	e014      	b.n	800255e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7fe ff8c 	bl	8001450 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800253c:	f7fe ff88 	bl	8001450 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e215      	b.n	800297a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254e:	4b57      	ldr	r3, [pc, #348]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x110>
 800255a:	e000      	b.n	800255e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d069      	beq.n	800263e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800256a:	4b50      	ldr	r3, [pc, #320]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002576:	4b4d      	ldr	r3, [pc, #308]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b08      	cmp	r3, #8
 8002580:	d11c      	bne.n	80025bc <HAL_RCC_OscConfig+0x190>
 8002582:	4b4a      	ldr	r3, [pc, #296]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d116      	bne.n	80025bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258e:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_RCC_OscConfig+0x17a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d001      	beq.n	80025a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e1e9      	b.n	800297a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a6:	4b41      	ldr	r3, [pc, #260]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	493d      	ldr	r1, [pc, #244]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	e040      	b.n	800263e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d023      	beq.n	800260c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c4:	4b39      	ldr	r3, [pc, #228]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a38      	ldr	r2, [pc, #224]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe ff3e 	bl	8001450 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d8:	f7fe ff3a 	bl	8001450 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e1c7      	b.n	800297a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ea:	4b30      	ldr	r3, [pc, #192]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f6:	4b2d      	ldr	r3, [pc, #180]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4929      	ldr	r1, [pc, #164]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]
 800260a:	e018      	b.n	800263e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800260c:	4b27      	ldr	r3, [pc, #156]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a26      	ldr	r2, [pc, #152]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002612:	f023 0301 	bic.w	r3, r3, #1
 8002616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7fe ff1a 	bl	8001450 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002620:	f7fe ff16 	bl	8001450 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e1a3      	b.n	800297a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002632:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d038      	beq.n	80026bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d019      	beq.n	8002686 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002652:	4b16      	ldr	r3, [pc, #88]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002656:	4a15      	ldr	r2, [pc, #84]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265e:	f7fe fef7 	bl	8001450 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002666:	f7fe fef3 	bl	8001450 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e180      	b.n	800297a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 800267a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x23a>
 8002684:	e01a      	b.n	80026bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 8002688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800268a:	4a08      	ldr	r2, [pc, #32]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002692:	f7fe fedd 	bl	8001450 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269a:	f7fe fed9 	bl	8001450 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d903      	bls.n	80026b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e166      	b.n	800297a <HAL_RCC_OscConfig+0x54e>
 80026ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b0:	4b92      	ldr	r3, [pc, #584]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 80026b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1ee      	bne.n	800269a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80a4 	beq.w	8002812 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ca:	4b8c      	ldr	r3, [pc, #560]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10d      	bne.n	80026f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	4b89      	ldr	r3, [pc, #548]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	4a88      	ldr	r2, [pc, #544]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 80026dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e0:	6413      	str	r3, [r2, #64]	; 0x40
 80026e2:	4b86      	ldr	r3, [pc, #536]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ee:	2301      	movs	r3, #1
 80026f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f2:	4b83      	ldr	r3, [pc, #524]	; (8002900 <HAL_RCC_OscConfig+0x4d4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d118      	bne.n	8002730 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80026fe:	4b80      	ldr	r3, [pc, #512]	; (8002900 <HAL_RCC_OscConfig+0x4d4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a7f      	ldr	r2, [pc, #508]	; (8002900 <HAL_RCC_OscConfig+0x4d4>)
 8002704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270a:	f7fe fea1 	bl	8001450 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002712:	f7fe fe9d 	bl	8001450 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b64      	cmp	r3, #100	; 0x64
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e12a      	b.n	800297a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002724:	4b76      	ldr	r3, [pc, #472]	; (8002900 <HAL_RCC_OscConfig+0x4d4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d106      	bne.n	8002746 <HAL_RCC_OscConfig+0x31a>
 8002738:	4b70      	ldr	r3, [pc, #448]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	4a6f      	ldr	r2, [pc, #444]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6713      	str	r3, [r2, #112]	; 0x70
 8002744:	e02d      	b.n	80027a2 <HAL_RCC_OscConfig+0x376>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10c      	bne.n	8002768 <HAL_RCC_OscConfig+0x33c>
 800274e:	4b6b      	ldr	r3, [pc, #428]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002752:	4a6a      	ldr	r2, [pc, #424]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	6713      	str	r3, [r2, #112]	; 0x70
 800275a:	4b68      	ldr	r3, [pc, #416]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	4a67      	ldr	r2, [pc, #412]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 8002760:	f023 0304 	bic.w	r3, r3, #4
 8002764:	6713      	str	r3, [r2, #112]	; 0x70
 8002766:	e01c      	b.n	80027a2 <HAL_RCC_OscConfig+0x376>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b05      	cmp	r3, #5
 800276e:	d10c      	bne.n	800278a <HAL_RCC_OscConfig+0x35e>
 8002770:	4b62      	ldr	r3, [pc, #392]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	4a61      	ldr	r2, [pc, #388]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 8002776:	f043 0304 	orr.w	r3, r3, #4
 800277a:	6713      	str	r3, [r2, #112]	; 0x70
 800277c:	4b5f      	ldr	r3, [pc, #380]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	4a5e      	ldr	r2, [pc, #376]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6713      	str	r3, [r2, #112]	; 0x70
 8002788:	e00b      	b.n	80027a2 <HAL_RCC_OscConfig+0x376>
 800278a:	4b5c      	ldr	r3, [pc, #368]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278e:	4a5b      	ldr	r2, [pc, #364]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 8002790:	f023 0301 	bic.w	r3, r3, #1
 8002794:	6713      	str	r3, [r2, #112]	; 0x70
 8002796:	4b59      	ldr	r3, [pc, #356]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	4a58      	ldr	r2, [pc, #352]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 800279c:	f023 0304 	bic.w	r3, r3, #4
 80027a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d015      	beq.n	80027d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027aa:	f7fe fe51 	bl	8001450 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b0:	e00a      	b.n	80027c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b2:	f7fe fe4d 	bl	8001450 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e0d8      	b.n	800297a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c8:	4b4c      	ldr	r3, [pc, #304]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0ee      	beq.n	80027b2 <HAL_RCC_OscConfig+0x386>
 80027d4:	e014      	b.n	8002800 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d6:	f7fe fe3b 	bl	8001450 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027dc:	e00a      	b.n	80027f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027de:	f7fe fe37 	bl	8001450 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e0c2      	b.n	800297a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f4:	4b41      	ldr	r3, [pc, #260]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1ee      	bne.n	80027de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002800:	7dfb      	ldrb	r3, [r7, #23]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d105      	bne.n	8002812 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002806:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a3c      	ldr	r2, [pc, #240]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 800280c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 80ae 	beq.w	8002978 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800281c:	4b37      	ldr	r3, [pc, #220]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 030c 	and.w	r3, r3, #12
 8002824:	2b08      	cmp	r3, #8
 8002826:	d06d      	beq.n	8002904 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d14b      	bne.n	80028c8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002830:	4b32      	ldr	r3, [pc, #200]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a31      	ldr	r2, [pc, #196]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 8002836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800283a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7fe fe08 	bl	8001450 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002844:	f7fe fe04 	bl	8001450 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e091      	b.n	800297a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	4b29      	ldr	r3, [pc, #164]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69da      	ldr	r2, [r3, #28]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	019b      	lsls	r3, r3, #6
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002878:	085b      	lsrs	r3, r3, #1
 800287a:	3b01      	subs	r3, #1
 800287c:	041b      	lsls	r3, r3, #16
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	071b      	lsls	r3, r3, #28
 800288e:	491b      	ldr	r1, [pc, #108]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 8002890:	4313      	orrs	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002894:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a18      	ldr	r2, [pc, #96]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 800289a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800289e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe fdd6 	bl	8001450 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe fdd2 	bl	8001450 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e05f      	b.n	800297a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x47c>
 80028c6:	e057      	b.n	8002978 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a0b      	ldr	r2, [pc, #44]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 80028ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fdbc 	bl	8001450 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028dc:	f7fe fdb8 	bl	8001450 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e045      	b.n	800297a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ee:	4b03      	ldr	r3, [pc, #12]	; (80028fc <HAL_RCC_OscConfig+0x4d0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x4b0>
 80028fa:	e03d      	b.n	8002978 <HAL_RCC_OscConfig+0x54c>
 80028fc:	40023800 	.word	0x40023800
 8002900:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002904:	4b1f      	ldr	r3, [pc, #124]	; (8002984 <HAL_RCC_OscConfig+0x558>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d030      	beq.n	8002974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d129      	bne.n	8002974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d122      	bne.n	8002974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002934:	4013      	ands	r3, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800293a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800293c:	4293      	cmp	r3, r2
 800293e:	d119      	bne.n	8002974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	085b      	lsrs	r3, r3, #1
 800294c:	3b01      	subs	r3, #1
 800294e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002950:	429a      	cmp	r2, r3
 8002952:	d10f      	bne.n	8002974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002960:	429a      	cmp	r2, r3
 8002962:	d107      	bne.n	8002974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800

08002988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0d0      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029a0:	4b6a      	ldr	r3, [pc, #424]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d910      	bls.n	80029d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ae:	4b67      	ldr	r3, [pc, #412]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 020f 	bic.w	r2, r3, #15
 80029b6:	4965      	ldr	r1, [pc, #404]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b63      	ldr	r3, [pc, #396]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0b8      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d020      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e8:	4b59      	ldr	r3, [pc, #356]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4a58      	ldr	r2, [pc, #352]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 80029ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a00:	4b53      	ldr	r3, [pc, #332]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	4a52      	ldr	r2, [pc, #328]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a0c:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	494d      	ldr	r1, [pc, #308]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d040      	beq.n	8002aac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d115      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e07f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d107      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4a:	4b41      	ldr	r3, [pc, #260]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e073      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5a:	4b3d      	ldr	r3, [pc, #244]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e06b      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a6a:	4b39      	ldr	r3, [pc, #228]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f023 0203 	bic.w	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4936      	ldr	r1, [pc, #216]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a7c:	f7fe fce8 	bl	8001450 <HAL_GetTick>
 8002a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a82:	e00a      	b.n	8002a9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a84:	f7fe fce4 	bl	8001450 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e053      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9a:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 020c 	and.w	r2, r3, #12
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d1eb      	bne.n	8002a84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aac:	4b27      	ldr	r3, [pc, #156]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d210      	bcs.n	8002adc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aba:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 020f 	bic.w	r2, r3, #15
 8002ac2:	4922      	ldr	r1, [pc, #136]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e032      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4916      	ldr	r1, [pc, #88]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	490e      	ldr	r1, [pc, #56]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b1a:	f000 f821 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	490a      	ldr	r1, [pc, #40]	; (8002b54 <HAL_RCC_ClockConfig+0x1cc>)
 8002b2c:	5ccb      	ldrb	r3, [r1, r3]
 8002b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b32:	4a09      	ldr	r2, [pc, #36]	; (8002b58 <HAL_RCC_ClockConfig+0x1d0>)
 8002b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x1d4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe fc44 	bl	80013c8 <HAL_InitTick>

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023c00 	.word	0x40023c00
 8002b50:	40023800 	.word	0x40023800
 8002b54:	08005c10 	.word	0x08005c10
 8002b58:	20000400 	.word	0x20000400
 8002b5c:	20000404 	.word	0x20000404

08002b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	607b      	str	r3, [r7, #4]
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	2300      	movs	r3, #0
 8002b72:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b78:	4b67      	ldr	r3, [pc, #412]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 030c 	and.w	r3, r3, #12
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d00d      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	f200 80bd 	bhi.w	8002d04 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x34>
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d003      	beq.n	8002b9a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b92:	e0b7      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b94:	4b61      	ldr	r3, [pc, #388]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b96:	60bb      	str	r3, [r7, #8]
      break;
 8002b98:	e0b7      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b9a:	4b61      	ldr	r3, [pc, #388]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b9c:	60bb      	str	r3, [r7, #8]
      break;
 8002b9e:	e0b4      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba0:	4b5d      	ldr	r3, [pc, #372]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ba8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002baa:	4b5b      	ldr	r3, [pc, #364]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d04d      	beq.n	8002c52 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb6:	4b58      	ldr	r3, [pc, #352]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	099b      	lsrs	r3, r3, #6
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bc6:	f04f 0100 	mov.w	r1, #0
 8002bca:	ea02 0800 	and.w	r8, r2, r0
 8002bce:	ea03 0901 	and.w	r9, r3, r1
 8002bd2:	4640      	mov	r0, r8
 8002bd4:	4649      	mov	r1, r9
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	014b      	lsls	r3, r1, #5
 8002be0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002be4:	0142      	lsls	r2, r0, #5
 8002be6:	4610      	mov	r0, r2
 8002be8:	4619      	mov	r1, r3
 8002bea:	ebb0 0008 	subs.w	r0, r0, r8
 8002bee:	eb61 0109 	sbc.w	r1, r1, r9
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	018b      	lsls	r3, r1, #6
 8002bfc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c00:	0182      	lsls	r2, r0, #6
 8002c02:	1a12      	subs	r2, r2, r0
 8002c04:	eb63 0301 	sbc.w	r3, r3, r1
 8002c08:	f04f 0000 	mov.w	r0, #0
 8002c0c:	f04f 0100 	mov.w	r1, #0
 8002c10:	00d9      	lsls	r1, r3, #3
 8002c12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c16:	00d0      	lsls	r0, r2, #3
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	eb12 0208 	adds.w	r2, r2, r8
 8002c20:	eb43 0309 	adc.w	r3, r3, r9
 8002c24:	f04f 0000 	mov.w	r0, #0
 8002c28:	f04f 0100 	mov.w	r1, #0
 8002c2c:	0259      	lsls	r1, r3, #9
 8002c2e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c32:	0250      	lsls	r0, r2, #9
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	f7fd faf8 	bl	8000238 <__aeabi_uldivmod>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	e04a      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c52:	4b31      	ldr	r3, [pc, #196]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	099b      	lsrs	r3, r3, #6
 8002c58:	461a      	mov	r2, r3
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c62:	f04f 0100 	mov.w	r1, #0
 8002c66:	ea02 0400 	and.w	r4, r2, r0
 8002c6a:	ea03 0501 	and.w	r5, r3, r1
 8002c6e:	4620      	mov	r0, r4
 8002c70:	4629      	mov	r1, r5
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	014b      	lsls	r3, r1, #5
 8002c7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c80:	0142      	lsls	r2, r0, #5
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	1b00      	subs	r0, r0, r4
 8002c88:	eb61 0105 	sbc.w	r1, r1, r5
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	018b      	lsls	r3, r1, #6
 8002c96:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c9a:	0182      	lsls	r2, r0, #6
 8002c9c:	1a12      	subs	r2, r2, r0
 8002c9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002ca2:	f04f 0000 	mov.w	r0, #0
 8002ca6:	f04f 0100 	mov.w	r1, #0
 8002caa:	00d9      	lsls	r1, r3, #3
 8002cac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cb0:	00d0      	lsls	r0, r2, #3
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	1912      	adds	r2, r2, r4
 8002cb8:	eb45 0303 	adc.w	r3, r5, r3
 8002cbc:	f04f 0000 	mov.w	r0, #0
 8002cc0:	f04f 0100 	mov.w	r1, #0
 8002cc4:	0299      	lsls	r1, r3, #10
 8002cc6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002cca:	0290      	lsls	r0, r2, #10
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	f7fd faac 	bl	8000238 <__aeabi_uldivmod>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	0c1b      	lsrs	r3, r3, #16
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d00:	60bb      	str	r3, [r7, #8]
      break;
 8002d02:	e002      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d06:	60bb      	str	r3, [r7, #8]
      break;
 8002d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d16:	bf00      	nop
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	00f42400 	.word	0x00f42400
 8002d20:	007a1200 	.word	0x007a1200

08002d24 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	20000400 	.word	0x20000400

08002d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d40:	f7ff fff0 	bl	8002d24 <HAL_RCC_GetHCLKFreq>
 8002d44:	4602      	mov	r2, r0
 8002d46:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	0a9b      	lsrs	r3, r3, #10
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	4903      	ldr	r1, [pc, #12]	; (8002d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d52:	5ccb      	ldrb	r3, [r1, r3]
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	08005c20 	.word	0x08005c20

08002d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d68:	f7ff ffdc 	bl	8002d24 <HAL_RCC_GetHCLKFreq>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	0b5b      	lsrs	r3, r3, #13
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	4903      	ldr	r1, [pc, #12]	; (8002d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d7a:	5ccb      	ldrb	r3, [r1, r3]
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40023800 	.word	0x40023800
 8002d88:	08005c20 	.word	0x08005c20

08002d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d012      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002db4:	4b69      	ldr	r3, [pc, #420]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	4a68      	ldr	r2, [pc, #416]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002dbe:	6093      	str	r3, [r2, #8]
 8002dc0:	4b66      	ldr	r3, [pc, #408]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc8:	4964      	ldr	r1, [pc, #400]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d017      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002de6:	4b5d      	ldr	r3, [pc, #372]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df4:	4959      	ldr	r1, [pc, #356]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e04:	d101      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e06:	2301      	movs	r3, #1
 8002e08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e12:	2301      	movs	r3, #1
 8002e14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d017      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e22:	4b4e      	ldr	r3, [pc, #312]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	494a      	ldr	r1, [pc, #296]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e40:	d101      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e42:	2301      	movs	r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 808b 	beq.w	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e70:	4b3a      	ldr	r3, [pc, #232]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	4a39      	ldr	r2, [pc, #228]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7c:	4b37      	ldr	r3, [pc, #220]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e88:	4b35      	ldr	r3, [pc, #212]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a34      	ldr	r2, [pc, #208]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e94:	f7fe fadc 	bl	8001450 <HAL_GetTick>
 8002e98:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9c:	f7fe fad8 	bl	8001450 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b64      	cmp	r3, #100	; 0x64
 8002ea8:	d901      	bls.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e38f      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002eae:	4b2c      	ldr	r3, [pc, #176]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eba:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d035      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d02e      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ed8:	4b20      	ldr	r3, [pc, #128]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ee2:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee6:	4a1d      	ldr	r2, [pc, #116]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002eee:	4b1b      	ldr	r3, [pc, #108]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef2:	4a1a      	ldr	r2, [pc, #104]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002efa:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f00:	4b16      	ldr	r3, [pc, #88]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d114      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7fe faa0 	bl	8001450 <HAL_GetTick>
 8002f10:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fe fa9c 	bl	8001450 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e351      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2a:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0ee      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f42:	d111      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f50:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f52:	400b      	ands	r3, r1
 8002f54:	4901      	ldr	r1, [pc, #4]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	608b      	str	r3, [r1, #8]
 8002f5a:	e00b      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40007000 	.word	0x40007000
 8002f64:	0ffffcff 	.word	0x0ffffcff
 8002f68:	4bb3      	ldr	r3, [pc, #716]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	4ab2      	ldr	r2, [pc, #712]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f6e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f72:	6093      	str	r3, [r2, #8]
 8002f74:	4bb0      	ldr	r3, [pc, #704]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f80:	49ad      	ldr	r1, [pc, #692]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d010      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f92:	4ba9      	ldr	r3, [pc, #676]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f98:	4aa7      	ldr	r2, [pc, #668]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f9e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fa2:	4ba5      	ldr	r3, [pc, #660]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fa4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	49a2      	ldr	r1, [pc, #648]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fc0:	4b9d      	ldr	r3, [pc, #628]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fce:	499a      	ldr	r1, [pc, #616]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fe2:	4b95      	ldr	r3, [pc, #596]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ff0:	4991      	ldr	r1, [pc, #580]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003004:	4b8c      	ldr	r3, [pc, #560]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003012:	4989      	ldr	r1, [pc, #548]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003026:	4b84      	ldr	r3, [pc, #528]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	4980      	ldr	r1, [pc, #512]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003048:	4b7b      	ldr	r3, [pc, #492]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800304a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304e:	f023 0203 	bic.w	r2, r3, #3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	4978      	ldr	r1, [pc, #480]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800306a:	4b73      	ldr	r3, [pc, #460]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003070:	f023 020c 	bic.w	r2, r3, #12
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003078:	496f      	ldr	r1, [pc, #444]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800308c:	4b6a      	ldr	r3, [pc, #424]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309a:	4967      	ldr	r1, [pc, #412]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030ae:	4b62      	ldr	r3, [pc, #392]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030bc:	495e      	ldr	r1, [pc, #376]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00a      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030d0:	4b59      	ldr	r3, [pc, #356]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030de:	4956      	ldr	r1, [pc, #344]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80030f2:	4b51      	ldr	r3, [pc, #324]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003100:	494d      	ldr	r1, [pc, #308]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003114:	4b48      	ldr	r3, [pc, #288]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003122:	4945      	ldr	r1, [pc, #276]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003136:	4b40      	ldr	r3, [pc, #256]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003144:	493c      	ldr	r1, [pc, #240]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003158:	4b37      	ldr	r3, [pc, #220]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003166:	4934      	ldr	r1, [pc, #208]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d011      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800317a:	4b2f      	ldr	r3, [pc, #188]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800317c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003180:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003188:	492b      	ldr	r1, [pc, #172]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003194:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003198:	d101      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800319a:	2301      	movs	r3, #1
 800319c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80031aa:	2301      	movs	r3, #1
 80031ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ba:	4b1f      	ldr	r3, [pc, #124]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c8:	491b      	ldr	r1, [pc, #108]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00b      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031dc:	4b16      	ldr	r3, [pc, #88]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ec:	4912      	ldr	r1, [pc, #72]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00b      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003200:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003206:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003210:	4909      	ldr	r1, [pc, #36]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00f      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003226:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800322a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003234:	e002      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	4986      	ldr	r1, [pc, #536]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00b      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003250:	4b81      	ldr	r3, [pc, #516]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003256:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003260:	497d      	ldr	r1, [pc, #500]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d006      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 80d6 	beq.w	8003428 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800327c:	4b76      	ldr	r3, [pc, #472]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a75      	ldr	r2, [pc, #468]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003282:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003288:	f7fe f8e2 	bl	8001450 <HAL_GetTick>
 800328c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003290:	f7fe f8de 	bl	8001450 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e195      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032a2:	4b6d      	ldr	r3, [pc, #436]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d021      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x572>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d11d      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032c2:	4b65      	ldr	r3, [pc, #404]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c8:	0c1b      	lsrs	r3, r3, #16
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032d0:	4b61      	ldr	r3, [pc, #388]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d6:	0e1b      	lsrs	r3, r3, #24
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	019a      	lsls	r2, r3, #6
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	041b      	lsls	r3, r3, #16
 80032e8:	431a      	orrs	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	061b      	lsls	r3, r3, #24
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	071b      	lsls	r3, r3, #28
 80032f6:	4958      	ldr	r1, [pc, #352]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d004      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003312:	d00a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800331c:	2b00      	cmp	r3, #0
 800331e:	d02e      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003328:	d129      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800332a:	4b4b      	ldr	r3, [pc, #300]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800332c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003330:	0c1b      	lsrs	r3, r3, #16
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003338:	4b47      	ldr	r3, [pc, #284]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800333a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800333e:	0f1b      	lsrs	r3, r3, #28
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	019a      	lsls	r2, r3, #6
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	041b      	lsls	r3, r3, #16
 8003350:	431a      	orrs	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	061b      	lsls	r3, r3, #24
 8003358:	431a      	orrs	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	071b      	lsls	r3, r3, #28
 800335e:	493e      	ldr	r1, [pc, #248]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003366:	4b3c      	ldr	r3, [pc, #240]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800336c:	f023 021f 	bic.w	r2, r3, #31
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	3b01      	subs	r3, #1
 8003376:	4938      	ldr	r1, [pc, #224]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01d      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800338a:	4b33      	ldr	r3, [pc, #204]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800338c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003390:	0e1b      	lsrs	r3, r3, #24
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003398:	4b2f      	ldr	r3, [pc, #188]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800339a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800339e:	0f1b      	lsrs	r3, r3, #28
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	019a      	lsls	r2, r3, #6
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	041b      	lsls	r3, r3, #16
 80033b2:	431a      	orrs	r2, r3
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	061b      	lsls	r3, r3, #24
 80033b8:	431a      	orrs	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	071b      	lsls	r3, r3, #28
 80033be:	4926      	ldr	r1, [pc, #152]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d011      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	019a      	lsls	r2, r3, #6
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	041b      	lsls	r3, r3, #16
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	061b      	lsls	r3, r3, #24
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	071b      	lsls	r3, r3, #28
 80033ee:	491a      	ldr	r1, [pc, #104]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033f6:	4b18      	ldr	r3, [pc, #96]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a17      	ldr	r2, [pc, #92]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003402:	f7fe f825 	bl	8001450 <HAL_GetTick>
 8003406:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003408:	e008      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800340a:	f7fe f821 	bl	8001450 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b64      	cmp	r3, #100	; 0x64
 8003416:	d901      	bls.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e0d8      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800341c:	4b0e      	ldr	r3, [pc, #56]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	2b01      	cmp	r3, #1
 800342c:	f040 80ce 	bne.w	80035cc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003430:	4b09      	ldr	r3, [pc, #36]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a08      	ldr	r2, [pc, #32]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800343a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800343c:	f7fe f808 	bl	8001450 <HAL_GetTick>
 8003440:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003442:	e00b      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003444:	f7fe f804 	bl	8001450 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b64      	cmp	r3, #100	; 0x64
 8003450:	d904      	bls.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e0bb      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003456:	bf00      	nop
 8003458:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800345c:	4b5e      	ldr	r3, [pc, #376]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003468:	d0ec      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003486:	2b00      	cmp	r3, #0
 8003488:	d02e      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d12a      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003492:	4b51      	ldr	r3, [pc, #324]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003498:	0c1b      	lsrs	r3, r3, #16
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034a0:	4b4d      	ldr	r3, [pc, #308]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a6:	0f1b      	lsrs	r3, r3, #28
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	019a      	lsls	r2, r3, #6
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	041b      	lsls	r3, r3, #16
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	061b      	lsls	r3, r3, #24
 80034c0:	431a      	orrs	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	071b      	lsls	r3, r3, #28
 80034c6:	4944      	ldr	r1, [pc, #272]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80034ce:	4b42      	ldr	r3, [pc, #264]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	3b01      	subs	r3, #1
 80034de:	021b      	lsls	r3, r3, #8
 80034e0:	493d      	ldr	r1, [pc, #244]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d022      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034fc:	d11d      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034fe:	4b36      	ldr	r3, [pc, #216]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003504:	0e1b      	lsrs	r3, r3, #24
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800350c:	4b32      	ldr	r3, [pc, #200]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003512:	0f1b      	lsrs	r3, r3, #28
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	019a      	lsls	r2, r3, #6
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	041b      	lsls	r3, r3, #16
 8003526:	431a      	orrs	r2, r3
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	061b      	lsls	r3, r3, #24
 800352c:	431a      	orrs	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	071b      	lsls	r3, r3, #28
 8003532:	4929      	ldr	r1, [pc, #164]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d028      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003546:	4b24      	ldr	r3, [pc, #144]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354c:	0e1b      	lsrs	r3, r3, #24
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003554:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355a:	0c1b      	lsrs	r3, r3, #16
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	019a      	lsls	r2, r3, #6
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	041b      	lsls	r3, r3, #16
 800356c:	431a      	orrs	r2, r3
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	061b      	lsls	r3, r3, #24
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	071b      	lsls	r3, r3, #28
 800357a:	4917      	ldr	r1, [pc, #92]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003582:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003588:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	4911      	ldr	r1, [pc, #68]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003598:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a0e      	ldr	r2, [pc, #56]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800359e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a4:	f7fd ff54 	bl	8001450 <HAL_GetTick>
 80035a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035ac:	f7fd ff50 	bl	8001450 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	; 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e007      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035ca:	d1ef      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3720      	adds	r7, #32
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40023800 	.word	0x40023800

080035dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e09d      	b.n	800372a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d108      	bne.n	8003608 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035fe:	d009      	beq.n	8003614 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	61da      	str	r2, [r3, #28]
 8003606:	e005      	b.n	8003614 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fd fcb8 	bl	8000fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800364a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003654:	d902      	bls.n	800365c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	e002      	b.n	8003662 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800365c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003660:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800366a:	d007      	beq.n	800367c <HAL_SPI_Init+0xa0>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003674:	d002      	beq.n	800367c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036be:	ea42 0103 	orr.w	r1, r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	0c1b      	lsrs	r3, r3, #16
 80036d8:	f003 0204 	and.w	r2, r3, #4
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80036f8:	ea42 0103 	orr.w	r1, r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69da      	ldr	r2, [r3, #28]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003718:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b088      	sub	sp, #32
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	603b      	str	r3, [r7, #0]
 800373e:	4613      	mov	r3, r2
 8003740:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_SPI_Transmit+0x22>
 8003750:	2302      	movs	r3, #2
 8003752:	e158      	b.n	8003a06 <HAL_SPI_Transmit+0x2d4>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800375c:	f7fd fe78 	bl	8001450 <HAL_GetTick>
 8003760:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b01      	cmp	r3, #1
 8003770:	d002      	beq.n	8003778 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003772:	2302      	movs	r3, #2
 8003774:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003776:	e13d      	b.n	80039f4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_SPI_Transmit+0x52>
 800377e:	88fb      	ldrh	r3, [r7, #6]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d102      	bne.n	800378a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003788:	e134      	b.n	80039f4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2203      	movs	r2, #3
 800378e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	88fa      	ldrh	r2, [r7, #6]
 80037a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	88fa      	ldrh	r2, [r7, #6]
 80037a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d4:	d10f      	bne.n	80037f6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003800:	2b40      	cmp	r3, #64	; 0x40
 8003802:	d007      	beq.n	8003814 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003812:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800381c:	d94b      	bls.n	80038b6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_SPI_Transmit+0xfa>
 8003826:	8afb      	ldrh	r3, [r7, #22]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d13e      	bne.n	80038aa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	881a      	ldrh	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	1c9a      	adds	r2, r3, #2
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003850:	e02b      	b.n	80038aa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b02      	cmp	r3, #2
 800385e:	d112      	bne.n	8003886 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	881a      	ldrh	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003870:	1c9a      	adds	r2, r3, #2
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800387a:	b29b      	uxth	r3, r3
 800387c:	3b01      	subs	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003884:	e011      	b.n	80038aa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003886:	f7fd fde3 	bl	8001450 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d803      	bhi.n	800389e <HAL_SPI_Transmit+0x16c>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389c:	d102      	bne.n	80038a4 <HAL_SPI_Transmit+0x172>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d102      	bne.n	80038aa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038a8:	e0a4      	b.n	80039f4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1ce      	bne.n	8003852 <HAL_SPI_Transmit+0x120>
 80038b4:	e07c      	b.n	80039b0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_SPI_Transmit+0x192>
 80038be:	8afb      	ldrh	r3, [r7, #22]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d170      	bne.n	80039a6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d912      	bls.n	80038f4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	881a      	ldrh	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	1c9a      	adds	r2, r3, #2
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b02      	subs	r3, #2
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038f2:	e058      	b.n	80039a6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	330c      	adds	r3, #12
 80038fe:	7812      	ldrb	r2, [r2, #0]
 8003900:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800391a:	e044      	b.n	80039a6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b02      	cmp	r3, #2
 8003928:	d12b      	bne.n	8003982 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b01      	cmp	r3, #1
 8003932:	d912      	bls.n	800395a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	881a      	ldrh	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	1c9a      	adds	r2, r3, #2
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b02      	subs	r3, #2
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003958:	e025      	b.n	80039a6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	330c      	adds	r3, #12
 8003964:	7812      	ldrb	r2, [r2, #0]
 8003966:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003980:	e011      	b.n	80039a6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003982:	f7fd fd65 	bl	8001450 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d803      	bhi.n	800399a <HAL_SPI_Transmit+0x268>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003998:	d102      	bne.n	80039a0 <HAL_SPI_Transmit+0x26e>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d102      	bne.n	80039a6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039a4:	e026      	b.n	80039f4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1b5      	bne.n	800391c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	6839      	ldr	r1, [r7, #0]
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 fe27 	bl	8004608 <SPI_EndRxTxTransaction>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10a      	bne.n	80039e4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039ce:	2300      	movs	r3, #0
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	77fb      	strb	r3, [r7, #31]
 80039f0:	e000      	b.n	80039f4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80039f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003a04:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3720      	adds	r7, #32
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b088      	sub	sp, #32
 8003a12:	af02      	add	r7, sp, #8
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	603b      	str	r3, [r7, #0]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a2a:	d112      	bne.n	8003a52 <HAL_SPI_Receive+0x44>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10e      	bne.n	8003a52 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2204      	movs	r2, #4
 8003a38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a3c:	88fa      	ldrh	r2, [r7, #6]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	4613      	mov	r3, r2
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	68b9      	ldr	r1, [r7, #8]
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f910 	bl	8003c6e <HAL_SPI_TransmitReceive>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	e109      	b.n	8003c66 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_SPI_Receive+0x52>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e102      	b.n	8003c66 <HAL_SPI_Receive+0x258>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a68:	f7fd fcf2 	bl	8001450 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d002      	beq.n	8003a80 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a7e:	e0e9      	b.n	8003c54 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <HAL_SPI_Receive+0x7e>
 8003a86:	88fb      	ldrh	r3, [r7, #6]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d102      	bne.n	8003a92 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a90:	e0e0      	b.n	8003c54 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2204      	movs	r2, #4
 8003a96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	88fa      	ldrh	r2, [r7, #6]
 8003aaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	88fa      	ldrh	r2, [r7, #6]
 8003ab2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003adc:	d908      	bls.n	8003af0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	e007      	b.n	8003b00 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003afe:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b08:	d10f      	bne.n	8003b2a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b28:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b34:	2b40      	cmp	r3, #64	; 0x40
 8003b36:	d007      	beq.n	8003b48 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b46:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b50:	d867      	bhi.n	8003c22 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b52:	e030      	b.n	8003bb6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d117      	bne.n	8003b92 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f103 020c 	add.w	r2, r3, #12
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	7812      	ldrb	r2, [r2, #0]
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003b90:	e011      	b.n	8003bb6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b92:	f7fd fc5d 	bl	8001450 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d803      	bhi.n	8003baa <HAL_SPI_Receive+0x19c>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba8:	d102      	bne.n	8003bb0 <HAL_SPI_Receive+0x1a2>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d102      	bne.n	8003bb6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003bb4:	e04e      	b.n	8003c54 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1c8      	bne.n	8003b54 <HAL_SPI_Receive+0x146>
 8003bc2:	e034      	b.n	8003c2e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d115      	bne.n	8003bfe <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	b292      	uxth	r2, r2
 8003bde:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	1c9a      	adds	r2, r3, #2
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003bfc:	e011      	b.n	8003c22 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bfe:	f7fd fc27 	bl	8001450 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d803      	bhi.n	8003c16 <HAL_SPI_Receive+0x208>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c14:	d102      	bne.n	8003c1c <HAL_SPI_Receive+0x20e>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d102      	bne.n	8003c22 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c20:	e018      	b.n	8003c54 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1ca      	bne.n	8003bc4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	6839      	ldr	r1, [r7, #0]
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 fc6c 	bl	8004510 <SPI_EndRxTransaction>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	75fb      	strb	r3, [r7, #23]
 8003c50:	e000      	b.n	8003c54 <HAL_SPI_Receive+0x246>
  }

error :
 8003c52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b08a      	sub	sp, #40	; 0x28
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	60f8      	str	r0, [r7, #12]
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	607a      	str	r2, [r7, #4]
 8003c7a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_SPI_TransmitReceive+0x26>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e1fb      	b.n	800408c <HAL_SPI_TransmitReceive+0x41e>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c9c:	f7fd fbd8 	bl	8001450 <HAL_GetTick>
 8003ca0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ca8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003cb0:	887b      	ldrh	r3, [r7, #2]
 8003cb2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003cb4:	887b      	ldrh	r3, [r7, #2]
 8003cb6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cb8:	7efb      	ldrb	r3, [r7, #27]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d00e      	beq.n	8003cdc <HAL_SPI_TransmitReceive+0x6e>
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cc4:	d106      	bne.n	8003cd4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d102      	bne.n	8003cd4 <HAL_SPI_TransmitReceive+0x66>
 8003cce:	7efb      	ldrb	r3, [r7, #27]
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d003      	beq.n	8003cdc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003cda:	e1cd      	b.n	8004078 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <HAL_SPI_TransmitReceive+0x80>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <HAL_SPI_TransmitReceive+0x80>
 8003ce8:	887b      	ldrh	r3, [r7, #2]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d103      	bne.n	8003cf6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003cf4:	e1c0      	b.n	8004078 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d003      	beq.n	8003d0a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2205      	movs	r2, #5
 8003d06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	887a      	ldrh	r2, [r7, #2]
 8003d1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	887a      	ldrh	r2, [r7, #2]
 8003d22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	887a      	ldrh	r2, [r7, #2]
 8003d30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	887a      	ldrh	r2, [r7, #2]
 8003d36:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d4c:	d802      	bhi.n	8003d54 <HAL_SPI_TransmitReceive+0xe6>
 8003d4e:	8a3b      	ldrh	r3, [r7, #16]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d908      	bls.n	8003d66 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d62:	605a      	str	r2, [r3, #4]
 8003d64:	e007      	b.n	8003d76 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d74:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d80:	2b40      	cmp	r3, #64	; 0x40
 8003d82:	d007      	beq.n	8003d94 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d9c:	d97c      	bls.n	8003e98 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <HAL_SPI_TransmitReceive+0x13e>
 8003da6:	8a7b      	ldrh	r3, [r7, #18]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d169      	bne.n	8003e80 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db0:	881a      	ldrh	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	1c9a      	adds	r2, r3, #2
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dd0:	e056      	b.n	8003e80 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d11b      	bne.n	8003e18 <HAL_SPI_TransmitReceive+0x1aa>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d016      	beq.n	8003e18 <HAL_SPI_TransmitReceive+0x1aa>
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d113      	bne.n	8003e18 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	881a      	ldrh	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	1c9a      	adds	r2, r3, #2
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d11c      	bne.n	8003e60 <HAL_SPI_TransmitReceive+0x1f2>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d016      	beq.n	8003e60 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	b292      	uxth	r2, r2
 8003e3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	1c9a      	adds	r2, r3, #2
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e60:	f7fd faf6 	bl	8001450 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d807      	bhi.n	8003e80 <HAL_SPI_TransmitReceive+0x212>
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e76:	d003      	beq.n	8003e80 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003e7e:	e0fb      	b.n	8004078 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1a3      	bne.n	8003dd2 <HAL_SPI_TransmitReceive+0x164>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d19d      	bne.n	8003dd2 <HAL_SPI_TransmitReceive+0x164>
 8003e96:	e0df      	b.n	8004058 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_SPI_TransmitReceive+0x23a>
 8003ea0:	8a7b      	ldrh	r3, [r7, #18]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	f040 80cb 	bne.w	800403e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d912      	bls.n	8003ed8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	881a      	ldrh	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	1c9a      	adds	r2, r3, #2
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b02      	subs	r3, #2
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ed6:	e0b2      	b.n	800403e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	330c      	adds	r3, #12
 8003ee2:	7812      	ldrb	r2, [r2, #0]
 8003ee4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003efe:	e09e      	b.n	800403e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d134      	bne.n	8003f78 <HAL_SPI_TransmitReceive+0x30a>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d02f      	beq.n	8003f78 <HAL_SPI_TransmitReceive+0x30a>
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d12c      	bne.n	8003f78 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d912      	bls.n	8003f4e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	881a      	ldrh	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	1c9a      	adds	r2, r3, #2
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b02      	subs	r3, #2
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f4c:	e012      	b.n	8003f74 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	330c      	adds	r3, #12
 8003f58:	7812      	ldrb	r2, [r2, #0]
 8003f5a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d148      	bne.n	8004018 <HAL_SPI_TransmitReceive+0x3aa>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d042      	beq.n	8004018 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d923      	bls.n	8003fe6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	b292      	uxth	r2, r2
 8003faa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	1c9a      	adds	r2, r3, #2
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b02      	subs	r3, #2
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d81f      	bhi.n	8004014 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fe2:	605a      	str	r2, [r3, #4]
 8003fe4:	e016      	b.n	8004014 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f103 020c 	add.w	r2, r3, #12
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	7812      	ldrb	r2, [r2, #0]
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004008:	b29b      	uxth	r3, r3
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004014:	2301      	movs	r3, #1
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004018:	f7fd fa1a 	bl	8001450 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004024:	429a      	cmp	r2, r3
 8004026:	d803      	bhi.n	8004030 <HAL_SPI_TransmitReceive+0x3c2>
 8004028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402e:	d102      	bne.n	8004036 <HAL_SPI_TransmitReceive+0x3c8>
 8004030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004032:	2b00      	cmp	r3, #0
 8004034:	d103      	bne.n	800403e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800403c:	e01c      	b.n	8004078 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	f47f af5b 	bne.w	8003f00 <HAL_SPI_TransmitReceive+0x292>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	f47f af54 	bne.w	8003f00 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 fad3 	bl	8004608 <SPI_EndRxTxTransaction>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d006      	beq.n	8004076 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2220      	movs	r2, #32
 8004072:	661a      	str	r2, [r3, #96]	; 0x60
 8004074:	e000      	b.n	8004078 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004076:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004088:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800408c:	4618      	mov	r0, r3
 800408e:	3728      	adds	r7, #40	; 0x28
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	099b      	lsrs	r3, r3, #6
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10f      	bne.n	80040d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	099b      	lsrs	r3, r3, #6
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d004      	beq.n	80040d8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	4798      	blx	r3
    return;
 80040d6:	e0d7      	b.n	8004288 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	085b      	lsrs	r3, r3, #1
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_SPI_IRQHandler+0x66>
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	09db      	lsrs	r3, r3, #7
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d004      	beq.n	80040fa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	4798      	blx	r3
    return;
 80040f8:	e0c6      	b.n	8004288 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	095b      	lsrs	r3, r3, #5
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10c      	bne.n	8004120 <HAL_SPI_IRQHandler+0x8c>
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	099b      	lsrs	r3, r3, #6
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	0a1b      	lsrs	r3, r3, #8
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 80b4 	beq.w	8004288 <HAL_SPI_IRQHandler+0x1f4>
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 80ad 	beq.w	8004288 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	099b      	lsrs	r3, r3, #6
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d023      	beq.n	8004182 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b03      	cmp	r3, #3
 8004144:	d011      	beq.n	800416a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800414a:	f043 0204 	orr.w	r2, r3, #4
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	e00b      	b.n	8004182 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	693b      	ldr	r3, [r7, #16]
        return;
 8004180:	e082      	b.n	8004288 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d014      	beq.n	80041b8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004192:	f043 0201 	orr.w	r2, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	0a1b      	lsrs	r3, r3, #8
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00c      	beq.n	80041de <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c8:	f043 0208 	orr.w	r2, r3, #8
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80041d0:	2300      	movs	r3, #0
 80041d2:	60bb      	str	r3, [r7, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d04f      	beq.n	8004286 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041f4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d104      	bne.n	8004212 <HAL_SPI_IRQHandler+0x17e>
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d034      	beq.n	800427c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0203 	bic.w	r2, r2, #3
 8004220:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004226:	2b00      	cmp	r3, #0
 8004228:	d011      	beq.n	800424e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422e:	4a18      	ldr	r2, [pc, #96]	; (8004290 <HAL_SPI_IRQHandler+0x1fc>)
 8004230:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004236:	4618      	mov	r0, r3
 8004238:	f7fd fafa 	bl	8001830 <HAL_DMA_Abort_IT>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004246:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004252:	2b00      	cmp	r3, #0
 8004254:	d016      	beq.n	8004284 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	4a0d      	ldr	r2, [pc, #52]	; (8004290 <HAL_SPI_IRQHandler+0x1fc>)
 800425c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	4618      	mov	r0, r3
 8004264:	f7fd fae4 	bl	8001830 <HAL_DMA_Abort_IT>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004272:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800427a:	e003      	b.n	8004284 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f809 	bl	8004294 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004282:	e000      	b.n	8004286 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004284:	bf00      	nop
    return;
 8004286:	bf00      	nop
  }
}
 8004288:	3720      	adds	r7, #32
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	080042a9 	.word	0x080042a9

08004294 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f7ff ffe5 	bl	8004294 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80042ca:	bf00      	nop
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	4613      	mov	r3, r2
 80042e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042e4:	f7fd f8b4 	bl	8001450 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	4413      	add	r3, r2
 80042f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042f4:	f7fd f8ac 	bl	8001450 <HAL_GetTick>
 80042f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042fa:	4b39      	ldr	r3, [pc, #228]	; (80043e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	015b      	lsls	r3, r3, #5
 8004300:	0d1b      	lsrs	r3, r3, #20
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	fb02 f303 	mul.w	r3, r2, r3
 8004308:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800430a:	e054      	b.n	80043b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004312:	d050      	beq.n	80043b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004314:	f7fd f89c 	bl	8001450 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	429a      	cmp	r2, r3
 8004322:	d902      	bls.n	800432a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d13d      	bne.n	80043a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004338:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004342:	d111      	bne.n	8004368 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800434c:	d004      	beq.n	8004358 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004356:	d107      	bne.n	8004368 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004366:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004370:	d10f      	bne.n	8004392 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004390:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e017      	b.n	80043d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	4013      	ands	r3, r2
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	bf0c      	ite	eq
 80043c6:	2301      	moveq	r3, #1
 80043c8:	2300      	movne	r3, #0
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	461a      	mov	r2, r3
 80043ce:	79fb      	ldrb	r3, [r7, #7]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d19b      	bne.n	800430c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20000400 	.word	0x20000400

080043e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	; 0x28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80043f6:	f7fd f82b 	bl	8001450 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	4413      	add	r3, r2
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004406:	f7fd f823 	bl	8001450 <HAL_GetTick>
 800440a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	330c      	adds	r3, #12
 8004412:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004414:	4b3d      	ldr	r3, [pc, #244]	; (800450c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	00da      	lsls	r2, r3, #3
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	0d1b      	lsrs	r3, r3, #20
 8004424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800442c:	e060      	b.n	80044f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004434:	d107      	bne.n	8004446 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d104      	bne.n	8004446 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004444:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d050      	beq.n	80044f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800444e:	f7fc ffff 	bl	8001450 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800445a:	429a      	cmp	r2, r3
 800445c:	d902      	bls.n	8004464 <SPI_WaitFifoStateUntilTimeout+0x80>
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	2b00      	cmp	r3, #0
 8004462:	d13d      	bne.n	80044e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004472:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800447c:	d111      	bne.n	80044a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004486:	d004      	beq.n	8004492 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004490:	d107      	bne.n	80044a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044aa:	d10f      	bne.n	80044cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e010      	b.n	8004502 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	4013      	ands	r3, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d196      	bne.n	800442e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3728      	adds	r7, #40	; 0x28
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20000400 	.word	0x20000400

08004510 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af02      	add	r7, sp, #8
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004524:	d111      	bne.n	800454a <SPI_EndRxTransaction+0x3a>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452e:	d004      	beq.n	800453a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004538:	d107      	bne.n	800454a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004548:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004552:	d112      	bne.n	800457a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2200      	movs	r2, #0
 800455c:	2180      	movs	r1, #128	; 0x80
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f7ff feb8 	bl	80042d4 <SPI_WaitFlagStateUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d021      	beq.n	80045ae <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456e:	f043 0220 	orr.w	r2, r3, #32
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e03d      	b.n	80045f6 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800457a:	4b21      	ldr	r3, [pc, #132]	; (8004600 <SPI_EndRxTransaction+0xf0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a21      	ldr	r2, [pc, #132]	; (8004604 <SPI_EndRxTransaction+0xf4>)
 8004580:	fba2 2303 	umull	r2, r3, r2, r3
 8004584:	0d5b      	lsrs	r3, r3, #21
 8004586:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800458a:	fb02 f303 	mul.w	r3, r2, r3
 800458e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	3b01      	subs	r3, #1
 800459a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a6:	2b80      	cmp	r3, #128	; 0x80
 80045a8:	d0f2      	beq.n	8004590 <SPI_EndRxTransaction+0x80>
 80045aa:	e000      	b.n	80045ae <SPI_EndRxTransaction+0x9e>
        break;
 80045ac:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045b6:	d11d      	bne.n	80045f4 <SPI_EndRxTransaction+0xe4>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c0:	d004      	beq.n	80045cc <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ca:	d113      	bne.n	80045f4 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff ff03 	bl	80043e4 <SPI_WaitFifoStateUntilTimeout>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d007      	beq.n	80045f4 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e8:	f043 0220 	orr.w	r2, r3, #32
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e000      	b.n	80045f6 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000400 	.word	0x20000400
 8004604:	165e9f81 	.word	0x165e9f81

08004608 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2200      	movs	r2, #0
 800461c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f7ff fedf 	bl	80043e4 <SPI_WaitFifoStateUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d007      	beq.n	800463c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004630:	f043 0220 	orr.w	r2, r3, #32
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e046      	b.n	80046ca <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800463c:	4b25      	ldr	r3, [pc, #148]	; (80046d4 <SPI_EndRxTxTransaction+0xcc>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a25      	ldr	r2, [pc, #148]	; (80046d8 <SPI_EndRxTxTransaction+0xd0>)
 8004642:	fba2 2303 	umull	r2, r3, r2, r3
 8004646:	0d5b      	lsrs	r3, r3, #21
 8004648:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800464c:	fb02 f303 	mul.w	r3, r2, r3
 8004650:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800465a:	d112      	bne.n	8004682 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2200      	movs	r2, #0
 8004664:	2180      	movs	r1, #128	; 0x80
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f7ff fe34 	bl	80042d4 <SPI_WaitFlagStateUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d016      	beq.n	80046a0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004676:	f043 0220 	orr.w	r2, r3, #32
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e023      	b.n	80046ca <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	3b01      	subs	r3, #1
 800468c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004698:	2b80      	cmp	r3, #128	; 0x80
 800469a:	d0f2      	beq.n	8004682 <SPI_EndRxTxTransaction+0x7a>
 800469c:	e000      	b.n	80046a0 <SPI_EndRxTxTransaction+0x98>
        break;
 800469e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f7ff fe99 	bl	80043e4 <SPI_WaitFifoStateUntilTimeout>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046bc:	f043 0220 	orr.w	r2, r3, #32
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e000      	b.n	80046ca <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000400 	.word	0x20000400
 80046d8:	165e9f81 	.word	0x165e9f81

080046dc <HAL_SPIEx_FlushRxFifo>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	73fb      	strb	r3, [r7, #15]
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 80046e8:	e00c      	b.n	8004704 <HAL_SPIEx_FlushRxFifo+0x28>
  {
    count++;
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
 80046ec:	3301      	adds	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
    tmpreg = hspi->Instance->DR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	60bb      	str	r3, [r7, #8]
    UNUSED(tmpreg); /* To avoid GCC warning */
 80046f8:	68bb      	ldr	r3, [r7, #8]
    if (count == SPI_FIFO_SIZE)
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d101      	bne.n	8004704 <HAL_SPIEx_FlushRxFifo+0x28>
    {
      return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e007      	b.n	8004714 <HAL_SPIEx_FlushRxFifo+0x38>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1eb      	bne.n	80046ea <HAL_SPIEx_FlushRxFifo+0xe>
    }
  }
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e049      	b.n	80047c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d106      	bne.n	800474c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fc fcde 	bl	8001108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3304      	adds	r3, #4
 800475c:	4619      	mov	r1, r3
 800475e:	4610      	mov	r0, r2
 8004760:	f000 f9f6 	bl	8004b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d001      	beq.n	80047e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e054      	b.n	8004892 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a26      	ldr	r2, [pc, #152]	; (80048a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d022      	beq.n	8004850 <HAL_TIM_Base_Start_IT+0x80>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004812:	d01d      	beq.n	8004850 <HAL_TIM_Base_Start_IT+0x80>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a22      	ldr	r2, [pc, #136]	; (80048a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d018      	beq.n	8004850 <HAL_TIM_Base_Start_IT+0x80>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a21      	ldr	r2, [pc, #132]	; (80048a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d013      	beq.n	8004850 <HAL_TIM_Base_Start_IT+0x80>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a1f      	ldr	r2, [pc, #124]	; (80048ac <HAL_TIM_Base_Start_IT+0xdc>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d00e      	beq.n	8004850 <HAL_TIM_Base_Start_IT+0x80>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a1e      	ldr	r2, [pc, #120]	; (80048b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d009      	beq.n	8004850 <HAL_TIM_Base_Start_IT+0x80>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1c      	ldr	r2, [pc, #112]	; (80048b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d004      	beq.n	8004850 <HAL_TIM_Base_Start_IT+0x80>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1b      	ldr	r2, [pc, #108]	; (80048b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d115      	bne.n	800487c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	4b19      	ldr	r3, [pc, #100]	; (80048bc <HAL_TIM_Base_Start_IT+0xec>)
 8004858:	4013      	ands	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b06      	cmp	r3, #6
 8004860:	d015      	beq.n	800488e <HAL_TIM_Base_Start_IT+0xbe>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004868:	d011      	beq.n	800488e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0201 	orr.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487a:	e008      	b.n	800488e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	e000      	b.n	8004890 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40010000 	.word	0x40010000
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800
 80048ac:	40000c00 	.word	0x40000c00
 80048b0:	40010400 	.word	0x40010400
 80048b4:	40014000 	.word	0x40014000
 80048b8:	40001800 	.word	0x40001800
 80048bc:	00010007 	.word	0x00010007

080048c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d122      	bne.n	800491c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d11b      	bne.n	800491c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0202 	mvn.w	r2, #2
 80048ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f905 	bl	8004b12 <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f8f7 	bl	8004afe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f908 	bl	8004b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b04      	cmp	r3, #4
 8004928:	d122      	bne.n	8004970 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b04      	cmp	r3, #4
 8004936:	d11b      	bne.n	8004970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f06f 0204 	mvn.w	r2, #4
 8004940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2202      	movs	r2, #2
 8004946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f8db 	bl	8004b12 <HAL_TIM_IC_CaptureCallback>
 800495c:	e005      	b.n	800496a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f8cd 	bl	8004afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f8de 	bl	8004b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b08      	cmp	r3, #8
 800497c:	d122      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b08      	cmp	r3, #8
 800498a:	d11b      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0208 	mvn.w	r2, #8
 8004994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2204      	movs	r2, #4
 800499a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f8b1 	bl	8004b12 <HAL_TIM_IC_CaptureCallback>
 80049b0:	e005      	b.n	80049be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f8a3 	bl	8004afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f8b4 	bl	8004b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b10      	cmp	r3, #16
 80049d0:	d122      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	2b10      	cmp	r3, #16
 80049de:	d11b      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0210 	mvn.w	r2, #16
 80049e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2208      	movs	r2, #8
 80049ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f887 	bl	8004b12 <HAL_TIM_IC_CaptureCallback>
 8004a04:	e005      	b.n	8004a12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f879 	bl	8004afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f88a 	bl	8004b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d10e      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d107      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0201 	mvn.w	r2, #1
 8004a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fb ff24 	bl	800088c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4e:	2b80      	cmp	r3, #128	; 0x80
 8004a50:	d10e      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5c:	2b80      	cmp	r3, #128	; 0x80
 8004a5e:	d107      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f91a 	bl	8004ca4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a7e:	d10e      	bne.n	8004a9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8a:	2b80      	cmp	r3, #128	; 0x80
 8004a8c:	d107      	bne.n	8004a9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f90d 	bl	8004cb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa8:	2b40      	cmp	r3, #64	; 0x40
 8004aaa:	d10e      	bne.n	8004aca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab6:	2b40      	cmp	r3, #64	; 0x40
 8004ab8:	d107      	bne.n	8004aca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f838 	bl	8004b3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d10e      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d107      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f06f 0220 	mvn.w	r2, #32
 8004aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f8cd 	bl	8004c90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004af6:	bf00      	nop
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a40      	ldr	r2, [pc, #256]	; (8004c64 <TIM_Base_SetConfig+0x114>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d013      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b6e:	d00f      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3d      	ldr	r2, [pc, #244]	; (8004c68 <TIM_Base_SetConfig+0x118>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00b      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3c      	ldr	r2, [pc, #240]	; (8004c6c <TIM_Base_SetConfig+0x11c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d007      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a3b      	ldr	r2, [pc, #236]	; (8004c70 <TIM_Base_SetConfig+0x120>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d003      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a3a      	ldr	r2, [pc, #232]	; (8004c74 <TIM_Base_SetConfig+0x124>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d108      	bne.n	8004ba2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a2f      	ldr	r2, [pc, #188]	; (8004c64 <TIM_Base_SetConfig+0x114>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d02b      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb0:	d027      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a2c      	ldr	r2, [pc, #176]	; (8004c68 <TIM_Base_SetConfig+0x118>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d023      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a2b      	ldr	r2, [pc, #172]	; (8004c6c <TIM_Base_SetConfig+0x11c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d01f      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a2a      	ldr	r2, [pc, #168]	; (8004c70 <TIM_Base_SetConfig+0x120>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01b      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a29      	ldr	r2, [pc, #164]	; (8004c74 <TIM_Base_SetConfig+0x124>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d017      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a28      	ldr	r2, [pc, #160]	; (8004c78 <TIM_Base_SetConfig+0x128>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d013      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a27      	ldr	r2, [pc, #156]	; (8004c7c <TIM_Base_SetConfig+0x12c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00f      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a26      	ldr	r2, [pc, #152]	; (8004c80 <TIM_Base_SetConfig+0x130>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00b      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a25      	ldr	r2, [pc, #148]	; (8004c84 <TIM_Base_SetConfig+0x134>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d007      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a24      	ldr	r2, [pc, #144]	; (8004c88 <TIM_Base_SetConfig+0x138>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d003      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a23      	ldr	r2, [pc, #140]	; (8004c8c <TIM_Base_SetConfig+0x13c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d108      	bne.n	8004c14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a0a      	ldr	r2, [pc, #40]	; (8004c64 <TIM_Base_SetConfig+0x114>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d003      	beq.n	8004c48 <TIM_Base_SetConfig+0xf8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a0c      	ldr	r2, [pc, #48]	; (8004c74 <TIM_Base_SetConfig+0x124>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d103      	bne.n	8004c50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	691a      	ldr	r2, [r3, #16]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	615a      	str	r2, [r3, #20]
}
 8004c56:	bf00      	nop
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	40010000 	.word	0x40010000
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800
 8004c70:	40000c00 	.word	0x40000c00
 8004c74:	40010400 	.word	0x40010400
 8004c78:	40014000 	.word	0x40014000
 8004c7c:	40014400 	.word	0x40014400
 8004c80:	40014800 	.word	0x40014800
 8004c84:	40001800 	.word	0x40001800
 8004c88:	40001c00 	.word	0x40001c00
 8004c8c:	40002000 	.word	0x40002000

08004c90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e040      	b.n	8004d60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fc fa30 	bl	8001154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2224      	movs	r2, #36	; 0x24
 8004cf8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0201 	bic.w	r2, r2, #1
 8004d08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f82c 	bl	8004d68 <UART_SetConfig>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d101      	bne.n	8004d1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e022      	b.n	8004d60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fa82 	bl	800522c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 fb09 	bl	8005370 <UART_CheckIdleState>
 8004d5e:	4603      	mov	r3, r0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4ba7      	ldr	r3, [pc, #668]	; (8005030 <UART_SetConfig+0x2c8>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6812      	ldr	r2, [r2, #0]
 8004d9a:	6979      	ldr	r1, [r7, #20]
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a95      	ldr	r2, [pc, #596]	; (8005034 <UART_SetConfig+0x2cc>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d120      	bne.n	8004e26 <UART_SetConfig+0xbe>
 8004de4:	4b94      	ldr	r3, [pc, #592]	; (8005038 <UART_SetConfig+0x2d0>)
 8004de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d816      	bhi.n	8004e20 <UART_SetConfig+0xb8>
 8004df2:	a201      	add	r2, pc, #4	; (adr r2, 8004df8 <UART_SetConfig+0x90>)
 8004df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df8:	08004e09 	.word	0x08004e09
 8004dfc:	08004e15 	.word	0x08004e15
 8004e00:	08004e0f 	.word	0x08004e0f
 8004e04:	08004e1b 	.word	0x08004e1b
 8004e08:	2301      	movs	r3, #1
 8004e0a:	77fb      	strb	r3, [r7, #31]
 8004e0c:	e14f      	b.n	80050ae <UART_SetConfig+0x346>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	77fb      	strb	r3, [r7, #31]
 8004e12:	e14c      	b.n	80050ae <UART_SetConfig+0x346>
 8004e14:	2304      	movs	r3, #4
 8004e16:	77fb      	strb	r3, [r7, #31]
 8004e18:	e149      	b.n	80050ae <UART_SetConfig+0x346>
 8004e1a:	2308      	movs	r3, #8
 8004e1c:	77fb      	strb	r3, [r7, #31]
 8004e1e:	e146      	b.n	80050ae <UART_SetConfig+0x346>
 8004e20:	2310      	movs	r3, #16
 8004e22:	77fb      	strb	r3, [r7, #31]
 8004e24:	e143      	b.n	80050ae <UART_SetConfig+0x346>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a84      	ldr	r2, [pc, #528]	; (800503c <UART_SetConfig+0x2d4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d132      	bne.n	8004e96 <UART_SetConfig+0x12e>
 8004e30:	4b81      	ldr	r3, [pc, #516]	; (8005038 <UART_SetConfig+0x2d0>)
 8004e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e36:	f003 030c 	and.w	r3, r3, #12
 8004e3a:	2b0c      	cmp	r3, #12
 8004e3c:	d828      	bhi.n	8004e90 <UART_SetConfig+0x128>
 8004e3e:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <UART_SetConfig+0xdc>)
 8004e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e44:	08004e79 	.word	0x08004e79
 8004e48:	08004e91 	.word	0x08004e91
 8004e4c:	08004e91 	.word	0x08004e91
 8004e50:	08004e91 	.word	0x08004e91
 8004e54:	08004e85 	.word	0x08004e85
 8004e58:	08004e91 	.word	0x08004e91
 8004e5c:	08004e91 	.word	0x08004e91
 8004e60:	08004e91 	.word	0x08004e91
 8004e64:	08004e7f 	.word	0x08004e7f
 8004e68:	08004e91 	.word	0x08004e91
 8004e6c:	08004e91 	.word	0x08004e91
 8004e70:	08004e91 	.word	0x08004e91
 8004e74:	08004e8b 	.word	0x08004e8b
 8004e78:	2300      	movs	r3, #0
 8004e7a:	77fb      	strb	r3, [r7, #31]
 8004e7c:	e117      	b.n	80050ae <UART_SetConfig+0x346>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	77fb      	strb	r3, [r7, #31]
 8004e82:	e114      	b.n	80050ae <UART_SetConfig+0x346>
 8004e84:	2304      	movs	r3, #4
 8004e86:	77fb      	strb	r3, [r7, #31]
 8004e88:	e111      	b.n	80050ae <UART_SetConfig+0x346>
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	77fb      	strb	r3, [r7, #31]
 8004e8e:	e10e      	b.n	80050ae <UART_SetConfig+0x346>
 8004e90:	2310      	movs	r3, #16
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e10b      	b.n	80050ae <UART_SetConfig+0x346>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a69      	ldr	r2, [pc, #420]	; (8005040 <UART_SetConfig+0x2d8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d120      	bne.n	8004ee2 <UART_SetConfig+0x17a>
 8004ea0:	4b65      	ldr	r3, [pc, #404]	; (8005038 <UART_SetConfig+0x2d0>)
 8004ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004eaa:	2b30      	cmp	r3, #48	; 0x30
 8004eac:	d013      	beq.n	8004ed6 <UART_SetConfig+0x16e>
 8004eae:	2b30      	cmp	r3, #48	; 0x30
 8004eb0:	d814      	bhi.n	8004edc <UART_SetConfig+0x174>
 8004eb2:	2b20      	cmp	r3, #32
 8004eb4:	d009      	beq.n	8004eca <UART_SetConfig+0x162>
 8004eb6:	2b20      	cmp	r3, #32
 8004eb8:	d810      	bhi.n	8004edc <UART_SetConfig+0x174>
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <UART_SetConfig+0x15c>
 8004ebe:	2b10      	cmp	r3, #16
 8004ec0:	d006      	beq.n	8004ed0 <UART_SetConfig+0x168>
 8004ec2:	e00b      	b.n	8004edc <UART_SetConfig+0x174>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	77fb      	strb	r3, [r7, #31]
 8004ec8:	e0f1      	b.n	80050ae <UART_SetConfig+0x346>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	77fb      	strb	r3, [r7, #31]
 8004ece:	e0ee      	b.n	80050ae <UART_SetConfig+0x346>
 8004ed0:	2304      	movs	r3, #4
 8004ed2:	77fb      	strb	r3, [r7, #31]
 8004ed4:	e0eb      	b.n	80050ae <UART_SetConfig+0x346>
 8004ed6:	2308      	movs	r3, #8
 8004ed8:	77fb      	strb	r3, [r7, #31]
 8004eda:	e0e8      	b.n	80050ae <UART_SetConfig+0x346>
 8004edc:	2310      	movs	r3, #16
 8004ede:	77fb      	strb	r3, [r7, #31]
 8004ee0:	e0e5      	b.n	80050ae <UART_SetConfig+0x346>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a57      	ldr	r2, [pc, #348]	; (8005044 <UART_SetConfig+0x2dc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d120      	bne.n	8004f2e <UART_SetConfig+0x1c6>
 8004eec:	4b52      	ldr	r3, [pc, #328]	; (8005038 <UART_SetConfig+0x2d0>)
 8004eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ef6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ef8:	d013      	beq.n	8004f22 <UART_SetConfig+0x1ba>
 8004efa:	2bc0      	cmp	r3, #192	; 0xc0
 8004efc:	d814      	bhi.n	8004f28 <UART_SetConfig+0x1c0>
 8004efe:	2b80      	cmp	r3, #128	; 0x80
 8004f00:	d009      	beq.n	8004f16 <UART_SetConfig+0x1ae>
 8004f02:	2b80      	cmp	r3, #128	; 0x80
 8004f04:	d810      	bhi.n	8004f28 <UART_SetConfig+0x1c0>
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <UART_SetConfig+0x1a8>
 8004f0a:	2b40      	cmp	r3, #64	; 0x40
 8004f0c:	d006      	beq.n	8004f1c <UART_SetConfig+0x1b4>
 8004f0e:	e00b      	b.n	8004f28 <UART_SetConfig+0x1c0>
 8004f10:	2300      	movs	r3, #0
 8004f12:	77fb      	strb	r3, [r7, #31]
 8004f14:	e0cb      	b.n	80050ae <UART_SetConfig+0x346>
 8004f16:	2302      	movs	r3, #2
 8004f18:	77fb      	strb	r3, [r7, #31]
 8004f1a:	e0c8      	b.n	80050ae <UART_SetConfig+0x346>
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	77fb      	strb	r3, [r7, #31]
 8004f20:	e0c5      	b.n	80050ae <UART_SetConfig+0x346>
 8004f22:	2308      	movs	r3, #8
 8004f24:	77fb      	strb	r3, [r7, #31]
 8004f26:	e0c2      	b.n	80050ae <UART_SetConfig+0x346>
 8004f28:	2310      	movs	r3, #16
 8004f2a:	77fb      	strb	r3, [r7, #31]
 8004f2c:	e0bf      	b.n	80050ae <UART_SetConfig+0x346>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a45      	ldr	r2, [pc, #276]	; (8005048 <UART_SetConfig+0x2e0>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d125      	bne.n	8004f84 <UART_SetConfig+0x21c>
 8004f38:	4b3f      	ldr	r3, [pc, #252]	; (8005038 <UART_SetConfig+0x2d0>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f46:	d017      	beq.n	8004f78 <UART_SetConfig+0x210>
 8004f48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f4c:	d817      	bhi.n	8004f7e <UART_SetConfig+0x216>
 8004f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f52:	d00b      	beq.n	8004f6c <UART_SetConfig+0x204>
 8004f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f58:	d811      	bhi.n	8004f7e <UART_SetConfig+0x216>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <UART_SetConfig+0x1fe>
 8004f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f62:	d006      	beq.n	8004f72 <UART_SetConfig+0x20a>
 8004f64:	e00b      	b.n	8004f7e <UART_SetConfig+0x216>
 8004f66:	2300      	movs	r3, #0
 8004f68:	77fb      	strb	r3, [r7, #31]
 8004f6a:	e0a0      	b.n	80050ae <UART_SetConfig+0x346>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	77fb      	strb	r3, [r7, #31]
 8004f70:	e09d      	b.n	80050ae <UART_SetConfig+0x346>
 8004f72:	2304      	movs	r3, #4
 8004f74:	77fb      	strb	r3, [r7, #31]
 8004f76:	e09a      	b.n	80050ae <UART_SetConfig+0x346>
 8004f78:	2308      	movs	r3, #8
 8004f7a:	77fb      	strb	r3, [r7, #31]
 8004f7c:	e097      	b.n	80050ae <UART_SetConfig+0x346>
 8004f7e:	2310      	movs	r3, #16
 8004f80:	77fb      	strb	r3, [r7, #31]
 8004f82:	e094      	b.n	80050ae <UART_SetConfig+0x346>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a30      	ldr	r2, [pc, #192]	; (800504c <UART_SetConfig+0x2e4>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d125      	bne.n	8004fda <UART_SetConfig+0x272>
 8004f8e:	4b2a      	ldr	r3, [pc, #168]	; (8005038 <UART_SetConfig+0x2d0>)
 8004f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f9c:	d017      	beq.n	8004fce <UART_SetConfig+0x266>
 8004f9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fa2:	d817      	bhi.n	8004fd4 <UART_SetConfig+0x26c>
 8004fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fa8:	d00b      	beq.n	8004fc2 <UART_SetConfig+0x25a>
 8004faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fae:	d811      	bhi.n	8004fd4 <UART_SetConfig+0x26c>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <UART_SetConfig+0x254>
 8004fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb8:	d006      	beq.n	8004fc8 <UART_SetConfig+0x260>
 8004fba:	e00b      	b.n	8004fd4 <UART_SetConfig+0x26c>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	77fb      	strb	r3, [r7, #31]
 8004fc0:	e075      	b.n	80050ae <UART_SetConfig+0x346>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	77fb      	strb	r3, [r7, #31]
 8004fc6:	e072      	b.n	80050ae <UART_SetConfig+0x346>
 8004fc8:	2304      	movs	r3, #4
 8004fca:	77fb      	strb	r3, [r7, #31]
 8004fcc:	e06f      	b.n	80050ae <UART_SetConfig+0x346>
 8004fce:	2308      	movs	r3, #8
 8004fd0:	77fb      	strb	r3, [r7, #31]
 8004fd2:	e06c      	b.n	80050ae <UART_SetConfig+0x346>
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e069      	b.n	80050ae <UART_SetConfig+0x346>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a1c      	ldr	r2, [pc, #112]	; (8005050 <UART_SetConfig+0x2e8>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d137      	bne.n	8005054 <UART_SetConfig+0x2ec>
 8004fe4:	4b14      	ldr	r3, [pc, #80]	; (8005038 <UART_SetConfig+0x2d0>)
 8004fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004fee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ff2:	d017      	beq.n	8005024 <UART_SetConfig+0x2bc>
 8004ff4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ff8:	d817      	bhi.n	800502a <UART_SetConfig+0x2c2>
 8004ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ffe:	d00b      	beq.n	8005018 <UART_SetConfig+0x2b0>
 8005000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005004:	d811      	bhi.n	800502a <UART_SetConfig+0x2c2>
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <UART_SetConfig+0x2aa>
 800500a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800500e:	d006      	beq.n	800501e <UART_SetConfig+0x2b6>
 8005010:	e00b      	b.n	800502a <UART_SetConfig+0x2c2>
 8005012:	2300      	movs	r3, #0
 8005014:	77fb      	strb	r3, [r7, #31]
 8005016:	e04a      	b.n	80050ae <UART_SetConfig+0x346>
 8005018:	2302      	movs	r3, #2
 800501a:	77fb      	strb	r3, [r7, #31]
 800501c:	e047      	b.n	80050ae <UART_SetConfig+0x346>
 800501e:	2304      	movs	r3, #4
 8005020:	77fb      	strb	r3, [r7, #31]
 8005022:	e044      	b.n	80050ae <UART_SetConfig+0x346>
 8005024:	2308      	movs	r3, #8
 8005026:	77fb      	strb	r3, [r7, #31]
 8005028:	e041      	b.n	80050ae <UART_SetConfig+0x346>
 800502a:	2310      	movs	r3, #16
 800502c:	77fb      	strb	r3, [r7, #31]
 800502e:	e03e      	b.n	80050ae <UART_SetConfig+0x346>
 8005030:	efff69f3 	.word	0xefff69f3
 8005034:	40011000 	.word	0x40011000
 8005038:	40023800 	.word	0x40023800
 800503c:	40004400 	.word	0x40004400
 8005040:	40004800 	.word	0x40004800
 8005044:	40004c00 	.word	0x40004c00
 8005048:	40005000 	.word	0x40005000
 800504c:	40011400 	.word	0x40011400
 8005050:	40007800 	.word	0x40007800
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a71      	ldr	r2, [pc, #452]	; (8005220 <UART_SetConfig+0x4b8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d125      	bne.n	80050aa <UART_SetConfig+0x342>
 800505e:	4b71      	ldr	r3, [pc, #452]	; (8005224 <UART_SetConfig+0x4bc>)
 8005060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005064:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005068:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800506c:	d017      	beq.n	800509e <UART_SetConfig+0x336>
 800506e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005072:	d817      	bhi.n	80050a4 <UART_SetConfig+0x33c>
 8005074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005078:	d00b      	beq.n	8005092 <UART_SetConfig+0x32a>
 800507a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800507e:	d811      	bhi.n	80050a4 <UART_SetConfig+0x33c>
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <UART_SetConfig+0x324>
 8005084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005088:	d006      	beq.n	8005098 <UART_SetConfig+0x330>
 800508a:	e00b      	b.n	80050a4 <UART_SetConfig+0x33c>
 800508c:	2300      	movs	r3, #0
 800508e:	77fb      	strb	r3, [r7, #31]
 8005090:	e00d      	b.n	80050ae <UART_SetConfig+0x346>
 8005092:	2302      	movs	r3, #2
 8005094:	77fb      	strb	r3, [r7, #31]
 8005096:	e00a      	b.n	80050ae <UART_SetConfig+0x346>
 8005098:	2304      	movs	r3, #4
 800509a:	77fb      	strb	r3, [r7, #31]
 800509c:	e007      	b.n	80050ae <UART_SetConfig+0x346>
 800509e:	2308      	movs	r3, #8
 80050a0:	77fb      	strb	r3, [r7, #31]
 80050a2:	e004      	b.n	80050ae <UART_SetConfig+0x346>
 80050a4:	2310      	movs	r3, #16
 80050a6:	77fb      	strb	r3, [r7, #31]
 80050a8:	e001      	b.n	80050ae <UART_SetConfig+0x346>
 80050aa:	2310      	movs	r3, #16
 80050ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b6:	d15a      	bne.n	800516e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80050b8:	7ffb      	ldrb	r3, [r7, #31]
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	d827      	bhi.n	800510e <UART_SetConfig+0x3a6>
 80050be:	a201      	add	r2, pc, #4	; (adr r2, 80050c4 <UART_SetConfig+0x35c>)
 80050c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c4:	080050e9 	.word	0x080050e9
 80050c8:	080050f1 	.word	0x080050f1
 80050cc:	080050f9 	.word	0x080050f9
 80050d0:	0800510f 	.word	0x0800510f
 80050d4:	080050ff 	.word	0x080050ff
 80050d8:	0800510f 	.word	0x0800510f
 80050dc:	0800510f 	.word	0x0800510f
 80050e0:	0800510f 	.word	0x0800510f
 80050e4:	08005107 	.word	0x08005107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e8:	f7fd fe28 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 80050ec:	61b8      	str	r0, [r7, #24]
        break;
 80050ee:	e013      	b.n	8005118 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050f0:	f7fd fe38 	bl	8002d64 <HAL_RCC_GetPCLK2Freq>
 80050f4:	61b8      	str	r0, [r7, #24]
        break;
 80050f6:	e00f      	b.n	8005118 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f8:	4b4b      	ldr	r3, [pc, #300]	; (8005228 <UART_SetConfig+0x4c0>)
 80050fa:	61bb      	str	r3, [r7, #24]
        break;
 80050fc:	e00c      	b.n	8005118 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050fe:	f7fd fd2f 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8005102:	61b8      	str	r0, [r7, #24]
        break;
 8005104:	e008      	b.n	8005118 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800510a:	61bb      	str	r3, [r7, #24]
        break;
 800510c:	e004      	b.n	8005118 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	77bb      	strb	r3, [r7, #30]
        break;
 8005116:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d074      	beq.n	8005208 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	005a      	lsls	r2, r3, #1
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	085b      	lsrs	r3, r3, #1
 8005128:	441a      	add	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005132:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	2b0f      	cmp	r3, #15
 8005138:	d916      	bls.n	8005168 <UART_SetConfig+0x400>
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005140:	d212      	bcs.n	8005168 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	b29b      	uxth	r3, r3
 8005146:	f023 030f 	bic.w	r3, r3, #15
 800514a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	b29b      	uxth	r3, r3
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	b29a      	uxth	r2, r3
 8005158:	89fb      	ldrh	r3, [r7, #14]
 800515a:	4313      	orrs	r3, r2
 800515c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	89fa      	ldrh	r2, [r7, #14]
 8005164:	60da      	str	r2, [r3, #12]
 8005166:	e04f      	b.n	8005208 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	77bb      	strb	r3, [r7, #30]
 800516c:	e04c      	b.n	8005208 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800516e:	7ffb      	ldrb	r3, [r7, #31]
 8005170:	2b08      	cmp	r3, #8
 8005172:	d828      	bhi.n	80051c6 <UART_SetConfig+0x45e>
 8005174:	a201      	add	r2, pc, #4	; (adr r2, 800517c <UART_SetConfig+0x414>)
 8005176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517a:	bf00      	nop
 800517c:	080051a1 	.word	0x080051a1
 8005180:	080051a9 	.word	0x080051a9
 8005184:	080051b1 	.word	0x080051b1
 8005188:	080051c7 	.word	0x080051c7
 800518c:	080051b7 	.word	0x080051b7
 8005190:	080051c7 	.word	0x080051c7
 8005194:	080051c7 	.word	0x080051c7
 8005198:	080051c7 	.word	0x080051c7
 800519c:	080051bf 	.word	0x080051bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a0:	f7fd fdcc 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 80051a4:	61b8      	str	r0, [r7, #24]
        break;
 80051a6:	e013      	b.n	80051d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051a8:	f7fd fddc 	bl	8002d64 <HAL_RCC_GetPCLK2Freq>
 80051ac:	61b8      	str	r0, [r7, #24]
        break;
 80051ae:	e00f      	b.n	80051d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051b0:	4b1d      	ldr	r3, [pc, #116]	; (8005228 <UART_SetConfig+0x4c0>)
 80051b2:	61bb      	str	r3, [r7, #24]
        break;
 80051b4:	e00c      	b.n	80051d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051b6:	f7fd fcd3 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 80051ba:	61b8      	str	r0, [r7, #24]
        break;
 80051bc:	e008      	b.n	80051d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051c2:	61bb      	str	r3, [r7, #24]
        break;
 80051c4:	e004      	b.n	80051d0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	77bb      	strb	r3, [r7, #30]
        break;
 80051ce:	bf00      	nop
    }

    if (pclk != 0U)
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d018      	beq.n	8005208 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	085a      	lsrs	r2, r3, #1
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	441a      	add	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	2b0f      	cmp	r3, #15
 80051ee:	d909      	bls.n	8005204 <UART_SetConfig+0x49c>
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f6:	d205      	bcs.n	8005204 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	60da      	str	r2, [r3, #12]
 8005202:	e001      	b.n	8005208 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005214:	7fbb      	ldrb	r3, [r7, #30]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3720      	adds	r7, #32
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	40007c00 	.word	0x40007c00
 8005224:	40023800 	.word	0x40023800
 8005228:	00f42400 	.word	0x00f42400

0800522c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	f003 0310 	and.w	r3, r3, #16
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01a      	beq.n	8005342 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800532a:	d10a      	bne.n	8005342 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	605a      	str	r2, [r3, #4]
  }
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af02      	add	r7, sp, #8
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005380:	f7fc f866 	bl	8001450 <HAL_GetTick>
 8005384:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b08      	cmp	r3, #8
 8005392:	d10e      	bne.n	80053b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005394:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f82d 	bl	8005402 <UART_WaitOnFlagUntilTimeout>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e023      	b.n	80053fa <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d10e      	bne.n	80053de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f817 	bl	8005402 <UART_WaitOnFlagUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e00d      	b.n	80053fa <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2220      	movs	r2, #32
 80053e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2220      	movs	r2, #32
 80053e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b09c      	sub	sp, #112	; 0x70
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	603b      	str	r3, [r7, #0]
 800540e:	4613      	mov	r3, r2
 8005410:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005412:	e0a5      	b.n	8005560 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005414:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541a:	f000 80a1 	beq.w	8005560 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541e:	f7fc f817 	bl	8001450 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800542a:	429a      	cmp	r2, r3
 800542c:	d302      	bcc.n	8005434 <UART_WaitOnFlagUntilTimeout+0x32>
 800542e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005430:	2b00      	cmp	r3, #0
 8005432:	d13e      	bne.n	80054b2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800543c:	e853 3f00 	ldrex	r3, [r3]
 8005440:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005444:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005448:	667b      	str	r3, [r7, #100]	; 0x64
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	461a      	mov	r2, r3
 8005450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005452:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005454:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005456:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005458:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800545a:	e841 2300 	strex	r3, r2, [r1]
 800545e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1e6      	bne.n	8005434 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3308      	adds	r3, #8
 800546c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005470:	e853 3f00 	ldrex	r3, [r3]
 8005474:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005478:	f023 0301 	bic.w	r3, r3, #1
 800547c:	663b      	str	r3, [r7, #96]	; 0x60
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3308      	adds	r3, #8
 8005484:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005486:	64ba      	str	r2, [r7, #72]	; 0x48
 8005488:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800548c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800548e:	e841 2300 	strex	r3, r2, [r1]
 8005492:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1e5      	bne.n	8005466 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2220      	movs	r2, #32
 800549e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2220      	movs	r2, #32
 80054a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e067      	b.n	8005582 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d04f      	beq.n	8005560 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ce:	d147      	bne.n	8005560 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	461a      	mov	r2, r3
 80054f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f8:	637b      	str	r3, [r7, #52]	; 0x34
 80054fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e6      	bne.n	80054da <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3308      	adds	r3, #8
 8005512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	613b      	str	r3, [r7, #16]
   return(result);
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f023 0301 	bic.w	r3, r3, #1
 8005522:	66bb      	str	r3, [r7, #104]	; 0x68
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3308      	adds	r3, #8
 800552a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800552c:	623a      	str	r2, [r7, #32]
 800552e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005530:	69f9      	ldr	r1, [r7, #28]
 8005532:	6a3a      	ldr	r2, [r7, #32]
 8005534:	e841 2300 	strex	r3, r2, [r1]
 8005538:	61bb      	str	r3, [r7, #24]
   return(result);
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1e5      	bne.n	800550c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2220      	movs	r2, #32
 8005544:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2220      	movs	r2, #32
 800554a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2220      	movs	r2, #32
 8005550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e010      	b.n	8005582 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69da      	ldr	r2, [r3, #28]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	4013      	ands	r3, r2
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	429a      	cmp	r2, r3
 800556e:	bf0c      	ite	eq
 8005570:	2301      	moveq	r3, #1
 8005572:	2300      	movne	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	461a      	mov	r2, r3
 8005578:	79fb      	ldrb	r3, [r7, #7]
 800557a:	429a      	cmp	r2, r3
 800557c:	f43f af4a 	beq.w	8005414 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3770      	adds	r7, #112	; 0x70
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800558c:	b084      	sub	sp, #16
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	f107 001c 	add.w	r0, r7, #28
 800559a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d120      	bne.n	80055e6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	4b20      	ldr	r3, [pc, #128]	; (8005638 <USB_CoreInit+0xac>)
 80055b6:	4013      	ands	r3, r2
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d105      	bne.n	80055da <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fa92 	bl	8005b04 <USB_CoreReset>
 80055e0:	4603      	mov	r3, r0
 80055e2:	73fb      	strb	r3, [r7, #15]
 80055e4:	e010      	b.n	8005608 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fa86 	bl	8005b04 <USB_CoreReset>
 80055f8:	4603      	mov	r3, r0
 80055fa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560a:	2b01      	cmp	r3, #1
 800560c:	d10b      	bne.n	8005626 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f043 0206 	orr.w	r2, r3, #6
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f043 0220 	orr.w	r2, r3, #32
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005626:	7bfb      	ldrb	r3, [r7, #15]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005632:	b004      	add	sp, #16
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	ffbdffbf 	.word	0xffbdffbf

0800563c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f023 0201 	bic.w	r2, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	460b      	mov	r3, r1
 8005668:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800567a:	78fb      	ldrb	r3, [r7, #3]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d115      	bne.n	80056ac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800568c:	2001      	movs	r0, #1
 800568e:	f7fb feeb 	bl	8001468 <HAL_Delay>
      ms++;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3301      	adds	r3, #1
 8005696:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fa25 	bl	8005ae8 <USB_GetMode>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d01e      	beq.n	80056e2 <USB_SetCurrentMode+0x84>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b31      	cmp	r3, #49	; 0x31
 80056a8:	d9f0      	bls.n	800568c <USB_SetCurrentMode+0x2e>
 80056aa:	e01a      	b.n	80056e2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056ac:	78fb      	ldrb	r3, [r7, #3]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d115      	bne.n	80056de <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056be:	2001      	movs	r0, #1
 80056c0:	f7fb fed2 	bl	8001468 <HAL_Delay>
      ms++;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3301      	adds	r3, #1
 80056c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fa0c 	bl	8005ae8 <USB_GetMode>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d005      	beq.n	80056e2 <USB_SetCurrentMode+0x84>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b31      	cmp	r3, #49	; 0x31
 80056da:	d9f0      	bls.n	80056be <USB_SetCurrentMode+0x60>
 80056dc:	e001      	b.n	80056e2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e005      	b.n	80056ee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b32      	cmp	r3, #50	; 0x32
 80056e6:	d101      	bne.n	80056ec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e000      	b.n	80056ee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
	...

080056f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056f8:	b084      	sub	sp, #16
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b086      	sub	sp, #24
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005712:	2300      	movs	r3, #0
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	e009      	b.n	800572c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	3340      	adds	r3, #64	; 0x40
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	2200      	movs	r2, #0
 8005724:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	3301      	adds	r3, #1
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b0e      	cmp	r3, #14
 8005730:	d9f2      	bls.n	8005718 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005734:	2b00      	cmp	r3, #0
 8005736:	d11c      	bne.n	8005772 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005746:	f043 0302 	orr.w	r3, r3, #2
 800574a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	e005      	b.n	800577e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005784:	461a      	mov	r2, r3
 8005786:	2300      	movs	r3, #0
 8005788:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005790:	4619      	mov	r1, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005798:	461a      	mov	r2, r3
 800579a:	680b      	ldr	r3, [r1, #0]
 800579c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800579e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d10c      	bne.n	80057be <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d104      	bne.n	80057b4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057aa:	2100      	movs	r1, #0
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f961 	bl	8005a74 <USB_SetDevSpeed>
 80057b2:	e008      	b.n	80057c6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80057b4:	2101      	movs	r1, #1
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f95c 	bl	8005a74 <USB_SetDevSpeed>
 80057bc:	e003      	b.n	80057c6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80057be:	2103      	movs	r1, #3
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f957 	bl	8005a74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057c6:	2110      	movs	r1, #16
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f8f3 	bl	80059b4 <USB_FlushTxFifo>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f91d 	bl	8005a18 <USB_FlushRxFifo>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ee:	461a      	mov	r2, r3
 80057f0:	2300      	movs	r3, #0
 80057f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fa:	461a      	mov	r2, r3
 80057fc:	2300      	movs	r3, #0
 80057fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005806:	461a      	mov	r2, r3
 8005808:	2300      	movs	r3, #0
 800580a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800580c:	2300      	movs	r3, #0
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	e043      	b.n	800589a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005824:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005828:	d118      	bne.n	800585c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10a      	bne.n	8005846 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4413      	add	r3, r2
 8005838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583c:	461a      	mov	r2, r3
 800583e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	e013      	b.n	800586e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005852:	461a      	mov	r2, r3
 8005854:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	e008      	b.n	800586e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005868:	461a      	mov	r2, r3
 800586a:	2300      	movs	r3, #0
 800586c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587a:	461a      	mov	r2, r3
 800587c:	2300      	movs	r3, #0
 800587e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588c:	461a      	mov	r2, r3
 800588e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005892:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	3301      	adds	r3, #1
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d3b7      	bcc.n	8005812 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058a2:	2300      	movs	r3, #0
 80058a4:	613b      	str	r3, [r7, #16]
 80058a6:	e043      	b.n	8005930 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058be:	d118      	bne.n	80058f2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10a      	bne.n	80058dc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d2:	461a      	mov	r2, r3
 80058d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058d8:	6013      	str	r3, [r2, #0]
 80058da:	e013      	b.n	8005904 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e8:	461a      	mov	r2, r3
 80058ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	e008      	b.n	8005904 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fe:	461a      	mov	r2, r3
 8005900:	2300      	movs	r3, #0
 8005902:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4413      	add	r3, r2
 800590c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005910:	461a      	mov	r2, r3
 8005912:	2300      	movs	r3, #0
 8005914:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005922:	461a      	mov	r2, r3
 8005924:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005928:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	3301      	adds	r3, #1
 800592e:	613b      	str	r3, [r7, #16]
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	429a      	cmp	r2, r3
 8005936:	d3b7      	bcc.n	80058a8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005946:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800594a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005958:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	2b00      	cmp	r3, #0
 800595e:	d105      	bne.n	800596c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	f043 0210 	orr.w	r2, r3, #16
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699a      	ldr	r2, [r3, #24]
 8005970:	4b0e      	ldr	r3, [pc, #56]	; (80059ac <USB_DevInit+0x2b4>)
 8005972:	4313      	orrs	r3, r2
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	f043 0208 	orr.w	r2, r3, #8
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800598a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800598c:	2b01      	cmp	r3, #1
 800598e:	d105      	bne.n	800599c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	699a      	ldr	r2, [r3, #24]
 8005994:	4b06      	ldr	r3, [pc, #24]	; (80059b0 <USB_DevInit+0x2b8>)
 8005996:	4313      	orrs	r3, r2
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800599c:	7dfb      	ldrb	r3, [r7, #23]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059a8:	b004      	add	sp, #16
 80059aa:	4770      	bx	lr
 80059ac:	803c3800 	.word	0x803c3800
 80059b0:	40000004 	.word	0x40000004

080059b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	3301      	adds	r3, #1
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	4a12      	ldr	r2, [pc, #72]	; (8005a14 <USB_FlushTxFifo+0x60>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d901      	bls.n	80059d2 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e01a      	b.n	8005a08 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	daf3      	bge.n	80059c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	019b      	lsls	r3, r3, #6
 80059e2:	f043 0220 	orr.w	r2, r3, #32
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3301      	adds	r3, #1
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	4a08      	ldr	r2, [pc, #32]	; (8005a14 <USB_FlushTxFifo+0x60>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d901      	bls.n	80059fa <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e006      	b.n	8005a08 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f003 0320 	and.w	r3, r3, #32
 8005a02:	2b20      	cmp	r3, #32
 8005a04:	d0f1      	beq.n	80059ea <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	00030d40 	.word	0x00030d40

08005a18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3301      	adds	r3, #1
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	4a11      	ldr	r2, [pc, #68]	; (8005a70 <USB_FlushRxFifo+0x58>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d901      	bls.n	8005a34 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e017      	b.n	8005a64 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	daf3      	bge.n	8005a24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2210      	movs	r2, #16
 8005a44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	60fb      	str	r3, [r7, #12]
 8005a4c:	4a08      	ldr	r2, [pc, #32]	; (8005a70 <USB_FlushRxFifo+0x58>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d901      	bls.n	8005a56 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e006      	b.n	8005a64 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f003 0310 	and.w	r3, r3, #16
 8005a5e:	2b10      	cmp	r3, #16
 8005a60:	d0f1      	beq.n	8005a46 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	00030d40 	.word	0x00030d40

08005a74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	68f9      	ldr	r1, [r7, #12]
 8005a90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a94:	4313      	orrs	r3, r2
 8005a96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b085      	sub	sp, #20
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ac0:	f023 0303 	bic.w	r3, r3, #3
 8005ac4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ad4:	f043 0302 	orr.w	r3, r3, #2
 8005ad8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	f003 0301 	and.w	r3, r3, #1
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	3301      	adds	r3, #1
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	4a13      	ldr	r2, [pc, #76]	; (8005b64 <USB_CoreReset+0x60>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d901      	bls.n	8005b20 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e01a      	b.n	8005b56 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	daf3      	bge.n	8005b10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f043 0201 	orr.w	r2, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	4a09      	ldr	r2, [pc, #36]	; (8005b64 <USB_CoreReset+0x60>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d901      	bls.n	8005b48 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e006      	b.n	8005b56 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d0f1      	beq.n	8005b38 <USB_CoreReset+0x34>

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	00030d40 	.word	0x00030d40

08005b68 <__libc_init_array>:
 8005b68:	b570      	push	{r4, r5, r6, lr}
 8005b6a:	4d0d      	ldr	r5, [pc, #52]	; (8005ba0 <__libc_init_array+0x38>)
 8005b6c:	4c0d      	ldr	r4, [pc, #52]	; (8005ba4 <__libc_init_array+0x3c>)
 8005b6e:	1b64      	subs	r4, r4, r5
 8005b70:	10a4      	asrs	r4, r4, #2
 8005b72:	2600      	movs	r6, #0
 8005b74:	42a6      	cmp	r6, r4
 8005b76:	d109      	bne.n	8005b8c <__libc_init_array+0x24>
 8005b78:	4d0b      	ldr	r5, [pc, #44]	; (8005ba8 <__libc_init_array+0x40>)
 8005b7a:	4c0c      	ldr	r4, [pc, #48]	; (8005bac <__libc_init_array+0x44>)
 8005b7c:	f000 f83c 	bl	8005bf8 <_init>
 8005b80:	1b64      	subs	r4, r4, r5
 8005b82:	10a4      	asrs	r4, r4, #2
 8005b84:	2600      	movs	r6, #0
 8005b86:	42a6      	cmp	r6, r4
 8005b88:	d105      	bne.n	8005b96 <__libc_init_array+0x2e>
 8005b8a:	bd70      	pop	{r4, r5, r6, pc}
 8005b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b90:	4798      	blx	r3
 8005b92:	3601      	adds	r6, #1
 8005b94:	e7ee      	b.n	8005b74 <__libc_init_array+0xc>
 8005b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b9a:	4798      	blx	r3
 8005b9c:	3601      	adds	r6, #1
 8005b9e:	e7f2      	b.n	8005b86 <__libc_init_array+0x1e>
 8005ba0:	08005c38 	.word	0x08005c38
 8005ba4:	08005c38 	.word	0x08005c38
 8005ba8:	08005c38 	.word	0x08005c38
 8005bac:	08005c3c 	.word	0x08005c3c

08005bb0 <memcmp>:
 8005bb0:	b530      	push	{r4, r5, lr}
 8005bb2:	3901      	subs	r1, #1
 8005bb4:	2400      	movs	r4, #0
 8005bb6:	42a2      	cmp	r2, r4
 8005bb8:	d101      	bne.n	8005bbe <memcmp+0xe>
 8005bba:	2000      	movs	r0, #0
 8005bbc:	e005      	b.n	8005bca <memcmp+0x1a>
 8005bbe:	5d03      	ldrb	r3, [r0, r4]
 8005bc0:	3401      	adds	r4, #1
 8005bc2:	5d0d      	ldrb	r5, [r1, r4]
 8005bc4:	42ab      	cmp	r3, r5
 8005bc6:	d0f6      	beq.n	8005bb6 <memcmp+0x6>
 8005bc8:	1b58      	subs	r0, r3, r5
 8005bca:	bd30      	pop	{r4, r5, pc}

08005bcc <memcpy>:
 8005bcc:	440a      	add	r2, r1
 8005bce:	4291      	cmp	r1, r2
 8005bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bd4:	d100      	bne.n	8005bd8 <memcpy+0xc>
 8005bd6:	4770      	bx	lr
 8005bd8:	b510      	push	{r4, lr}
 8005bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005be2:	4291      	cmp	r1, r2
 8005be4:	d1f9      	bne.n	8005bda <memcpy+0xe>
 8005be6:	bd10      	pop	{r4, pc}

08005be8 <memset>:
 8005be8:	4402      	add	r2, r0
 8005bea:	4603      	mov	r3, r0
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d100      	bne.n	8005bf2 <memset+0xa>
 8005bf0:	4770      	bx	lr
 8005bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8005bf6:	e7f9      	b.n	8005bec <memset+0x4>

08005bf8 <_init>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	bf00      	nop
 8005bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfe:	bc08      	pop	{r3}
 8005c00:	469e      	mov	lr, r3
 8005c02:	4770      	bx	lr

08005c04 <_fini>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	bf00      	nop
 8005c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	469e      	mov	lr, r3
 8005c0e:	4770      	bx	lr
