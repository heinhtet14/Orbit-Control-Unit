
dummyADCS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067a0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006998  08006998  00016998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069b8  080069b8  0002040c  2**0
                  CONTENTS
  4 .ARM          00000008  080069b8  080069b8  000169b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069c0  080069c0  0002040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069c0  080069c0  000169c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069c4  080069c4  000169c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000040c  20000000  080069c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000818  2000040c  08006dd4  0002040c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c24  08006dd4  00020c24  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002040c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a7f4  00000000  00000000  0002043a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000306b  00000000  00000000  0003ac2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  0003dca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  0003f0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a233  00000000  00000000  00040378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ff5  00000000  00000000  0006a5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001099a2  00000000  00000000  000825a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018bf42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000550c  00000000  00000000  0018bf98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000040c 	.word	0x2000040c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006980 	.word	0x08006980

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000410 	.word	0x20000410
 8000234:	08006980 	.word	0x08006980

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <PacketInit>:
* @return            none
* @note              none
*********************************************************************************************
*/
void PacketInit(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
    //initialize buffer in big endian byte array
    header[3] = (HEADER & 0x000000ff);
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <PacketInit+0x28>)
 8000536:	2250      	movs	r2, #80	; 0x50
 8000538:	70da      	strb	r2, [r3, #3]
    header[2] = (HEADER & 0x0000ff00) >> 8;
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <PacketInit+0x28>)
 800053c:	2253      	movs	r2, #83	; 0x53
 800053e:	709a      	strb	r2, [r3, #2]
    header[1] = (HEADER & 0x00ff0000) >> 16;
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <PacketInit+0x28>)
 8000542:	2255      	movs	r2, #85	; 0x55
 8000544:	705a      	strb	r2, [r3, #1]
    header[0] = (HEADER & 0xff000000) >> 24;
 8000546:	4b04      	ldr	r3, [pc, #16]	; (8000558 <PacketInit+0x28>)
 8000548:	224d      	movs	r2, #77	; 0x4d
 800054a:	701a      	strb	r2, [r3, #0]
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20000428 	.word	0x20000428

0800055c <PacketAssemble>:
* @return            none
* @note              none
*********************************************************************************************
*/
void PacketAssemble(uint8_t id, uint8_t cmd, uint8_t *arg, uint8_t argSize, uint8_t *buffer)
{
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
 8000562:	603a      	str	r2, [r7, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
 800056a:	460b      	mov	r3, r1
 800056c:	71bb      	strb	r3, [r7, #6]
 800056e:	4613      	mov	r3, r2
 8000570:	717b      	strb	r3, [r7, #5]
 8000572:	4b3e      	ldr	r3, [pc, #248]	; (800066c <PacketAssemble+0x110>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	461a      	mov	r2, r3
    //Add header to the buffer
    memcpy(buffer, header, sizeof(header));
 8000578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800057a:	601a      	str	r2, [r3, #0]
    //Add id, cmd and argsize to the buffer
    buffer[4] = id;
 800057c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800057e:	3304      	adds	r3, #4
 8000580:	79fa      	ldrb	r2, [r7, #7]
 8000582:	701a      	strb	r2, [r3, #0]
    buffer[5] = cmd;
 8000584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000586:	3305      	adds	r3, #5
 8000588:	79ba      	ldrb	r2, [r7, #6]
 800058a:	701a      	strb	r2, [r3, #0]
    buffer[6] = argSize;
 800058c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800058e:	3306      	adds	r3, #6
 8000590:	797a      	ldrb	r2, [r7, #5]
 8000592:	701a      	strb	r2, [r3, #0]
    uint8_t lastPos;

    //check if command has an argument and add them to array
    if (argSize)
 8000594:	797b      	ldrb	r3, [r7, #5]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d018      	beq.n	80005cc <PacketAssemble+0x70>
    {
        for (int i = 0; i < argSize; i++)
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
 800059e:	e010      	b.n	80005c2 <PacketAssemble+0x66>
        {
            buffer[7 + i] = arg[i];
 80005a0:	69fb      	ldr	r3, [r7, #28]
 80005a2:	683a      	ldr	r2, [r7, #0]
 80005a4:	441a      	add	r2, r3
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	3307      	adds	r3, #7
 80005aa:	4619      	mov	r1, r3
 80005ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005ae:	440b      	add	r3, r1
 80005b0:	7812      	ldrb	r2, [r2, #0]
 80005b2:	701a      	strb	r2, [r3, #0]
            lastPos = 7 + i;
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	3307      	adds	r3, #7
 80005ba:	76fb      	strb	r3, [r7, #27]
        for (int i = 0; i < argSize; i++)
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	3301      	adds	r3, #1
 80005c0:	61fb      	str	r3, [r7, #28]
 80005c2:	797b      	ldrb	r3, [r7, #5]
 80005c4:	69fa      	ldr	r2, [r7, #28]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	dbea      	blt.n	80005a0 <PacketAssemble+0x44>
 80005ca:	e001      	b.n	80005d0 <PacketAssemble+0x74>
        }
    }
    else
    {
        lastPos = 7;
 80005cc:	2307      	movs	r3, #7
 80005ce:	76fb      	strb	r3, [r7, #27]
    }
    //calculate CRC
    uint8_t tempData[lastPos+1];
 80005d0:	7efb      	ldrb	r3, [r7, #27]
 80005d2:	1c5c      	adds	r4, r3, #1
 80005d4:	466b      	mov	r3, sp
 80005d6:	461d      	mov	r5, r3
 80005d8:	1e63      	subs	r3, r4, #1
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	4623      	mov	r3, r4
 80005de:	4618      	mov	r0, r3
 80005e0:	f04f 0100 	mov.w	r1, #0
 80005e4:	f04f 0200 	mov.w	r2, #0
 80005e8:	f04f 0300 	mov.w	r3, #0
 80005ec:	00cb      	lsls	r3, r1, #3
 80005ee:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80005f2:	00c2      	lsls	r2, r0, #3
 80005f4:	4623      	mov	r3, r4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f04f 0100 	mov.w	r1, #0
 80005fc:	f04f 0200 	mov.w	r2, #0
 8000600:	f04f 0300 	mov.w	r3, #0
 8000604:	00cb      	lsls	r3, r1, #3
 8000606:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800060a:	00c2      	lsls	r2, r0, #3
 800060c:	4623      	mov	r3, r4
 800060e:	3307      	adds	r3, #7
 8000610:	08db      	lsrs	r3, r3, #3
 8000612:	00db      	lsls	r3, r3, #3
 8000614:	ebad 0d03 	sub.w	sp, sp, r3
 8000618:	466b      	mov	r3, sp
 800061a:	3300      	adds	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
    uint8_t CRC[4];
    memcpy(tempData, buffer, sizeof(tempData));
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	4622      	mov	r2, r4
 8000622:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000624:	4618      	mov	r0, r3
 8000626:	f006 f995 	bl	8006954 <memcpy>
    uint32_t calcCRC = crc32(0, tempData, sizeof(tempData));
 800062a:	693b      	ldr	r3, [r7, #16]
 800062c:	4622      	mov	r2, r4
 800062e:	4619      	mov	r1, r3
 8000630:	2000      	movs	r0, #0
 8000632:	f000 f8e3 	bl	80007fc <crc32>
 8000636:	60f8      	str	r0, [r7, #12]

 
    //add crc in big endian at the end of the buffer
    CRC[3] = (calcCRC & 0x000000ff);
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	72fb      	strb	r3, [r7, #11]
    CRC[2] = (calcCRC & 0x0000ff00) >> 8;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	b2db      	uxtb	r3, r3
 8000644:	72bb      	strb	r3, [r7, #10]
    CRC[1] = (calcCRC & 0x00ff0000) >> 16;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	0c1b      	lsrs	r3, r3, #16
 800064a:	b2db      	uxtb	r3, r3
 800064c:	727b      	strb	r3, [r7, #9]
    CRC[0] = (calcCRC & 0xff000000) >> 24;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	0e1b      	lsrs	r3, r3, #24
 8000652:	b2db      	uxtb	r3, r3
 8000654:	723b      	strb	r3, [r7, #8]
    memcpy(buffer+lastPos+1,CRC,sizeof(CRC));
 8000656:	7efb      	ldrb	r3, [r7, #27]
 8000658:	3301      	adds	r3, #1
 800065a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800065c:	4413      	add	r3, r2
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	46ad      	mov	sp, r5
}
 8000664:	bf00      	nop
 8000666:	3720      	adds	r7, #32
 8000668:	46bd      	mov	sp, r7
 800066a:	bdb0      	pop	{r4, r5, r7, pc}
 800066c:	20000428 	.word	0x20000428

08000670 <PacketDisassemble>:
* @return            packet disassemble status: DEFRAME_OK = ok, DEFRAME_INVALID_HEADER = can't find header in the buffer, DEFRAME_INVALID_CRC = crc doesn't match
* @note              none
*********************************************************************************************
*/
deframeReturn PacketDisassemble(uint8_t *id, uint8_t *len, uint8_t *cmd, uint8_t *arg, uint8_t *buffer, int bufferSize)
{
 8000670:	b5b0      	push	{r4, r5, r7, lr}
 8000672:	b08e      	sub	sp, #56	; 0x38
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
 800067c:	603b      	str	r3, [r7, #0]
    /*Search for header*/
    int pos = -1;
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
    for (int i = 0; i < bufferSize; i++)
 8000684:	2300      	movs	r3, #0
 8000686:	637b      	str	r3, [r7, #52]	; 0x34
 8000688:	e02a      	b.n	80006e0 <PacketDisassemble+0x70>
    {
        if ((buffer[i] == header[0]) & (bufferSize - i >= MINPKTLEN))//find a start of header before length of message - 4
 800068a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800068c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800068e:	4413      	add	r3, r2
 8000690:	781a      	ldrb	r2, [r3, #0]
 8000692:	4b59      	ldr	r3, [pc, #356]	; (80007f8 <PacketDisassemble+0x188>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	429a      	cmp	r2, r3
 8000698:	bf0c      	ite	eq
 800069a:	2301      	moveq	r3, #1
 800069c:	2300      	movne	r3, #0
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80006a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a4:	1acb      	subs	r3, r1, r3
 80006a6:	2b0a      	cmp	r3, #10
 80006a8:	bfcc      	ite	gt
 80006aa:	2301      	movgt	r3, #1
 80006ac:	2300      	movle	r3, #0
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	4013      	ands	r3, r2
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d010      	beq.n	80006da <PacketDisassemble+0x6a>
        {
            uint8_t cmpHeader[4];
            memcpy(cmpHeader, buffer + i, 4);
 80006b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80006bc:	4413      	add	r3, r2
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	61bb      	str	r3, [r7, #24]
            if (!memcmp(cmpHeader, header, 4))
 80006c2:	f107 0318 	add.w	r3, r7, #24
 80006c6:	2204      	movs	r2, #4
 80006c8:	494b      	ldr	r1, [pc, #300]	; (80007f8 <PacketDisassemble+0x188>)
 80006ca:	4618      	mov	r0, r3
 80006cc:	f006 f934 	bl	8006938 <memcmp>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d101      	bne.n	80006da <PacketDisassemble+0x6a>
            {
                pos = i;//set the position of the start of the message
 80006d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
    for (int i = 0; i < bufferSize; i++)
 80006da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006dc:	3301      	adds	r3, #1
 80006de:	637b      	str	r3, [r7, #52]	; 0x34
 80006e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006e4:	429a      	cmp	r2, r3
 80006e6:	dbd0      	blt.n	800068a <PacketDisassemble+0x1a>
            }
        }
    }
    if (pos == -1)//cant find header
 80006e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ee:	d101      	bne.n	80006f4 <PacketDisassemble+0x84>
    {
        return DEFRAME_INVALID_HEADER;
 80006f0:	2301      	movs	r3, #1
 80006f2:	e07c      	b.n	80007ee <PacketDisassemble+0x17e>
    }
    else
    {
 80006f4:	466b      	mov	r3, sp
 80006f6:	461d      	mov	r5, r3
        //CRC verification

        uint32_t givenCRC;
        uint8_t tempCRC[4];
        uint8_t actualLen = buffer[pos + 6] + 1 + 1 + 1+ 4;
 80006f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006fa:	3306      	adds	r3, #6
 80006fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80006fe:	4413      	add	r3, r2
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	3307      	adds	r3, #7
 8000704:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        memcpy(tempCRC,buffer+(pos+actualLen),4);//get CRC in the packet
 8000708:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800070c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800070e:	4413      	add	r3, r2
 8000710:	461a      	mov	r2, r3
 8000712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000714:	4413      	add	r3, r2
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	617b      	str	r3, [r7, #20]
        givenCRC=(tempCRC[0]<<24)|(tempCRC[1]<<16)|(tempCRC[2]<<8)|(tempCRC[3]);//make the CRC in uint32 form
 800071a:	7d3b      	ldrb	r3, [r7, #20]
 800071c:	061a      	lsls	r2, r3, #24
 800071e:	7d7b      	ldrb	r3, [r7, #21]
 8000720:	041b      	lsls	r3, r3, #16
 8000722:	431a      	orrs	r2, r3
 8000724:	7dbb      	ldrb	r3, [r7, #22]
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	4313      	orrs	r3, r2
 800072a:	7dfa      	ldrb	r2, [r7, #23]
 800072c:	4313      	orrs	r3, r2
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
        
        //copy everything in the packet except the crc (the last 4 bytes)
        uint8_t tempData[actualLen];
 8000730:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8000734:	4623      	mov	r3, r4
 8000736:	3b01      	subs	r3, #1
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
 800073a:	b2e0      	uxtb	r0, r4
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	f04f 0200 	mov.w	r2, #0
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	00cb      	lsls	r3, r1, #3
 800074a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800074e:	00c2      	lsls	r2, r0, #3
 8000750:	b2e0      	uxtb	r0, r4
 8000752:	f04f 0100 	mov.w	r1, #0
 8000756:	f04f 0200 	mov.w	r2, #0
 800075a:	f04f 0300 	mov.w	r3, #0
 800075e:	00cb      	lsls	r3, r1, #3
 8000760:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000764:	00c2      	lsls	r2, r0, #3
 8000766:	4623      	mov	r3, r4
 8000768:	3307      	adds	r3, #7
 800076a:	08db      	lsrs	r3, r3, #3
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	ebad 0d03 	sub.w	sp, sp, r3
 8000772:	466b      	mov	r3, sp
 8000774:	3300      	adds	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
        memcpy(tempData,buffer+pos,actualLen);
 8000778:	6a38      	ldr	r0, [r7, #32]
 800077a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800077c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800077e:	4413      	add	r3, r2
 8000780:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000784:	4619      	mov	r1, r3
 8000786:	f006 f8e5 	bl	8006954 <memcpy>

        uint32_t calcCRC = crc32(0,tempData,sizeof(tempData));//calculate the checksum crc32 of the copied message
 800078a:	6a3b      	ldr	r3, [r7, #32]
 800078c:	4622      	mov	r2, r4
 800078e:	4619      	mov	r1, r3
 8000790:	2000      	movs	r0, #0
 8000792:	f000 f833 	bl	80007fc <crc32>
 8000796:	61f8      	str	r0, [r7, #28]
        if (calcCRC!=givenCRC){
 8000798:	69fa      	ldr	r2, [r7, #28]
 800079a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800079c:	429a      	cmp	r2, r3
 800079e:	d001      	beq.n	80007a4 <PacketDisassemble+0x134>
            return DEFRAME_INVALID_CRC;//return because crc doesnt match
 80007a0:	2302      	movs	r3, #2
 80007a2:	e023      	b.n	80007ec <PacketDisassemble+0x17c>
        }

        *id = buffer[pos + 4];
 80007a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007a6:	3304      	adds	r3, #4
 80007a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007aa:	4413      	add	r3, r2
 80007ac:	781a      	ldrb	r2, [r3, #0]
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	701a      	strb	r2, [r3, #0]
        *len = buffer[pos+6];
 80007b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007b4:	3306      	adds	r3, #6
 80007b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007b8:	4413      	add	r3, r2
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	701a      	strb	r2, [r3, #0]
        *cmd = buffer[pos + 5];
 80007c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007c2:	3305      	adds	r3, #5
 80007c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007c6:	4413      	add	r3, r2
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	701a      	strb	r2, [r3, #0]

        if (*len != 0)//len !=0 means there is a argument to the command
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d009      	beq.n	80007ea <PacketDisassemble+0x17a>
        {
            memcpy(arg, buffer + pos + 7, *len );
 80007d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007d8:	3307      	adds	r3, #7
 80007da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007dc:	18d1      	adds	r1, r2, r3
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	6838      	ldr	r0, [r7, #0]
 80007e6:	f006 f8b5 	bl	8006954 <memcpy>
        }
        return DEFRAME_OK;//return with ok
 80007ea:	2300      	movs	r3, #0
 80007ec:	46ad      	mov	sp, r5
    }

}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3738      	adds	r7, #56	; 0x38
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bdb0      	pop	{r4, r5, r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000428 	.word	0x20000428

080007fc <crc32>:
* @note              Used polynomial is 0x04C11DB7. Implementation is standard table algorithm
*                    with reflection and byte reversal. Implementation details borrowed from literature.
*********************************************************************************************
*/
DWORD crc32(DWORD crc, BYTE *buf, DWORD size)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
    BYTE* p = buf;
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	617b      	str	r3, [r7, #20]

    crc = ~crc;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	43db      	mvns	r3, r3
 8000810:	60fb      	str	r3, [r7, #12]

    while (size--)
 8000812:	e00f      	b.n	8000834 <crc32+0x38>
        crc = crc32_tab[(BYTE)crc ^ *p++] ^ (crc >> 8);
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	b2da      	uxtb	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	1c59      	adds	r1, r3, #1
 800081c:	6179      	str	r1, [r7, #20]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4053      	eors	r3, r2
 8000822:	b2db      	uxtb	r3, r3
 8000824:	461a      	mov	r2, r3
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <crc32+0x54>)
 8000828:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	0a1b      	lsrs	r3, r3, #8
 8000830:	4053      	eors	r3, r2
 8000832:	60fb      	str	r3, [r7, #12]
    while (size--)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	1e5a      	subs	r2, r3, #1
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1ea      	bne.n	8000814 <crc32+0x18>

    return ~crc;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	43db      	mvns	r3, r3
}
 8000842:	4618      	mov	r0, r3
 8000844:	371c      	adds	r7, #28
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000000 	.word	0x20000000

08000854 <ShiftBit>:
};

uint8_t new[12];

void ShiftBit()
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
	unsigned char bits1 = 0, bits2 = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	73fb      	strb	r3, [r7, #15]
 800085e:	2300      	movs	r3, #0
 8000860:	71fb      	strb	r3, [r7, #7]
	for(int i = 12-1; i >= 0; i--) {
 8000862:	230b      	movs	r3, #11
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	e026      	b.n	80008b6 <ShiftBit+0x62>
	    bits2 = telem[i] & 0x03;
 8000868:	4a18      	ldr	r2, [pc, #96]	; (80008cc <ShiftBit+0x78>)
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	4413      	add	r3, r2
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	f003 0303 	and.w	r3, r3, #3
 8000874:	71fb      	strb	r3, [r7, #7]
	    new[i] = telem[i] >> 2;
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <ShiftBit+0x78>)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	4413      	add	r3, r2
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	089b      	lsrs	r3, r3, #2
 8000880:	b2d9      	uxtb	r1, r3
 8000882:	4a13      	ldr	r2, [pc, #76]	; (80008d0 <ShiftBit+0x7c>)
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	4413      	add	r3, r2
 8000888:	460a      	mov	r2, r1
 800088a:	701a      	strb	r2, [r3, #0]
	    new[i] |= bits1 << 6;
 800088c:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <ShiftBit+0x7c>)
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	4413      	add	r3, r2
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b25a      	sxtb	r2, r3
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	019b      	lsls	r3, r3, #6
 800089a:	b25b      	sxtb	r3, r3
 800089c:	4313      	orrs	r3, r2
 800089e:	b25b      	sxtb	r3, r3
 80008a0:	b2d9      	uxtb	r1, r3
 80008a2:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <ShiftBit+0x7c>)
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	4413      	add	r3, r2
 80008a8:	460a      	mov	r2, r1
 80008aa:	701a      	strb	r2, [r3, #0]
	    bits1 = bits2;
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	73fb      	strb	r3, [r7, #15]
	for(int i = 12-1; i >= 0; i--) {
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	dad5      	bge.n	8000868 <ShiftBit+0x14>
	}
}
 80008bc:	bf00      	nop
 80008be:	bf00      	nop
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	20000944 	.word	0x20000944
 80008d0:	20000a94 	.word	0x20000a94

080008d4 <BuildMessage>:

void BuildMessage(uint8_t cmd_id, uint8_t len, uint8_t *arg, uint8_t *buffer)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af02      	add	r7, sp, #8
 80008da:	60ba      	str	r2, [r7, #8]
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4603      	mov	r3, r0
 80008e0:	73fb      	strb	r3, [r7, #15]
 80008e2:	460b      	mov	r3, r1
 80008e4:	73bb      	strb	r3, [r7, #14]
	PacketAssemble(ACU_BUS_ID, cmd_id, arg, len, buffer);
 80008e6:	7bba      	ldrb	r2, [r7, #14]
 80008e8:	7bf9      	ldrb	r1, [r7, #15]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	4613      	mov	r3, r2
 80008f0:	68ba      	ldr	r2, [r7, #8]
 80008f2:	2001      	movs	r0, #1
 80008f4:	f7ff fe32 	bl	800055c <PacketAssemble>
};
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <decrypt>:

void decrypt(uint8_t *buffer)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	if( id != ACU_BUS_ID)
 8000908:	4b2b      	ldr	r3, [pc, #172]	; (80009b8 <decrypt+0xb8>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d14e      	bne.n	80009ae <decrypt+0xae>
		return;

	switch(cmd)
 8000910:	4b2a      	ldr	r3, [pc, #168]	; (80009bc <decrypt+0xbc>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b09      	cmp	r3, #9
 8000916:	d016      	beq.n	8000946 <decrypt+0x46>
 8000918:	2b09      	cmp	r3, #9
 800091a:	dc49      	bgt.n	80009b0 <decrypt+0xb0>
 800091c:	2b00      	cmp	r3, #0
 800091e:	d002      	beq.n	8000926 <decrypt+0x26>
 8000920:	2b08      	cmp	r3, #8
 8000922:	d024      	beq.n	800096e <decrypt+0x6e>
 8000924:	e044      	b.n	80009b0 <decrypt+0xb0>
	{
		case ACU_HANDSHAKE:

			nextLen = buffer[0] + 4 + 1 + 1 + 1 + 4;							// header 4 bytes + crc32 4 bytes + BUS ID 1 byte + MID 1 byte + LEN 1 byte
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	330b      	adds	r3, #11
 800092c:	4a24      	ldr	r2, [pc, #144]	; (80009c0 <decrypt+0xc0>)
 800092e:	6013      	str	r3, [r2, #0]
			uint8_t arg[] = {0x00};
 8000930:	2300      	movs	r3, #0
 8000932:	773b      	strb	r3, [r7, #28]
			BuildMessage(ACU_HANDSHAKE, len, arg, transmit);
 8000934:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <decrypt+0xc4>)
 8000936:	7819      	ldrb	r1, [r3, #0]
 8000938:	f107 021c 	add.w	r2, r7, #28
 800093c:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <decrypt+0xc8>)
 800093e:	2000      	movs	r0, #0
 8000940:	f7ff ffc8 	bl	80008d4 <BuildMessage>
			break;
 8000944:	e034      	b.n	80009b0 <decrypt+0xb0>

		case ACU_SETEULER:
			memcpy(&Euler_target, argRet, len);
 8000946:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <decrypt+0xc4>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	491f      	ldr	r1, [pc, #124]	; (80009cc <decrypt+0xcc>)
 800094e:	4820      	ldr	r0, [pc, #128]	; (80009d0 <decrypt+0xd0>)
 8000950:	f006 f800 	bl	8006954 <memcpy>
			nextLen = 12;
 8000954:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <decrypt+0xc0>)
 8000956:	220c      	movs	r2, #12
 8000958:	601a      	str	r2, [r3, #0]
			uint8_t argEulerS[] = {0x00};
 800095a:	2300      	movs	r3, #0
 800095c:	763b      	strb	r3, [r7, #24]
			BuildMessage(ACU_SETEULER, 1, argEulerS, transmit2);
 800095e:	f107 0218 	add.w	r2, r7, #24
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <decrypt+0xd4>)
 8000964:	2101      	movs	r1, #1
 8000966:	2009      	movs	r0, #9
 8000968:	f7ff ffb4 	bl	80008d4 <BuildMessage>
			break;
 800096c:	e020      	b.n	80009b0 <decrypt+0xb0>

		case ACU_REQEULER:
			nextLen = 23;
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <decrypt+0xc0>)
 8000970:	2217      	movs	r2, #23
 8000972:	601a      	str	r2, [r3, #0]
			uint8_t argEulerR[12] = {};
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]

			float num = 2.5;
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <decrypt+0xd8>)
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
			memmove(argEulerR, (unsigned char*) &num,4);
 8000988:	60fb      	str	r3, [r7, #12]
			memmove(argEulerR+4, (unsigned char*) &num,4);
 800098a:	f107 030c 	add.w	r3, r7, #12
 800098e:	3304      	adds	r3, #4
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	601a      	str	r2, [r3, #0]
			memmove(argEulerR+8, (unsigned char*) &num,4);
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	3308      	adds	r3, #8
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	601a      	str	r2, [r3, #0]
			BuildMessage(ACU_REQEULER, 12, argEulerR, transmit2);
 800099e:	f107 020c 	add.w	r2, r7, #12
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <decrypt+0xd4>)
 80009a4:	210c      	movs	r1, #12
 80009a6:	2008      	movs	r0, #8
 80009a8:	f7ff ff94 	bl	80008d4 <BuildMessage>
			break;
 80009ac:	e000      	b.n	80009b0 <decrypt+0xb0>
		return;
 80009ae:	bf00      	nop
	}
}
 80009b0:	3720      	adds	r7, #32
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000092c 	.word	0x2000092c
 80009bc:	20000c1d 	.word	0x20000c1d
 80009c0:	20000aa4 	.word	0x20000aa4
 80009c4:	20000c1c 	.word	0x20000c1c
 80009c8:	20000ab4 	.word	0x20000ab4
 80009cc:	20000b24 	.word	0x20000b24
 80009d0:	2000042c 	.word	0x2000042c
 80009d4:	20000a30 	.word	0x20000a30
 80009d8:	40200000 	.word	0x40200000

080009dc <ParseMessage>:

deframeReturn ParseMessage(uint8_t *buffer_arg, uint8_t *buffer_msg, uint8_t length)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af02      	add	r7, sp, #8
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	4613      	mov	r3, r2
 80009e8:	71fb      	strb	r3, [r7, #7]
	return PacketDisassemble(&id, &len, &cmd, buffer_arg, buffer_msg, length);;
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	9301      	str	r3, [sp, #4]
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <ParseMessage+0x2c>)
 80009f6:	4905      	ldr	r1, [pc, #20]	; (8000a0c <ParseMessage+0x30>)
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <ParseMessage+0x34>)
 80009fa:	f7ff fe39 	bl	8000670 <PacketDisassemble>
 80009fe:	4603      	mov	r3, r0
};
 8000a00:	4618      	mov	r0, r3
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000c1d 	.word	0x20000c1d
 8000a0c:	20000c1c 	.word	0x20000c1c
 8000a10:	2000092c 	.word	0x2000092c

08000a14 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == CS_IT_Pin)
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	2b10      	cmp	r3, #16
 8000a22:	d13f      	bne.n	8000aa4 <HAL_GPIO_EXTI_Callback+0x90>
    {

    	if(HAL_GPIO_ReadPin(CS_IT_GPIO_Port, CS_IT_Pin) == 1)
 8000a24:	2110      	movs	r1, #16
 8000a26:	4821      	ldr	r0, [pc, #132]	; (8000aac <HAL_GPIO_EXTI_Callback+0x98>)
 8000a28:	f001 fe58 	bl	80026dc <HAL_GPIO_ReadPin>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d038      	beq.n	8000aa4 <HAL_GPIO_EXTI_Callback+0x90>
    	{

    	}else
		if(HAL_GPIO_ReadPin(CS_IT_GPIO_Port, CS_IT_Pin) == 0)
 8000a32:	2110      	movs	r1, #16
 8000a34:	481d      	ldr	r0, [pc, #116]	; (8000aac <HAL_GPIO_EXTI_Callback+0x98>)
 8000a36:	f001 fe51 	bl	80026dc <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d131      	bne.n	8000aa4 <HAL_GPIO_EXTI_Callback+0x90>
    	{
    		if(state_transfer == 0)
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d10a      	bne.n	8000a5e <HAL_GPIO_EXTI_Callback+0x4a>
    		{
    			//HAL_SPI_Receive_IT(&hspi4, telem, 12);				// Interrupt works
    			HAL_SPI_Receive_IT(&hspi4, telem, 12);
 8000a48:	220c      	movs	r2, #12
 8000a4a:	491a      	ldr	r1, [pc, #104]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000a4c:	481a      	ldr	r0, [pc, #104]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000a4e:	f003 fa8b 	bl	8003f68 <HAL_SPI_Receive_IT>
    			txrx++;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <HAL_GPIO_EXTI_Callback+0xa8>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	4a18      	ldr	r2, [pc, #96]	; (8000abc <HAL_GPIO_EXTI_Callback+0xa8>)
 8000a5a:	6013      	str	r3, [r2, #0]
				//HAL_SPI_Transmit_DMA(&hspi4, transmit2, nextLen);
				HAL_SPI_Transmit_IT(&hspi4, transmit2, nextLen);
			}
    	}
    }
};
 8000a5c:	e022      	b.n	8000aa4 <HAL_GPIO_EXTI_Callback+0x90>
    		if(state_transfer == 1)
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d105      	bne.n	8000a72 <HAL_GPIO_EXTI_Callback+0x5e>
    			HAL_SPI_Transmit_IT(&hspi4, transmit, 12);
 8000a66:	220c      	movs	r2, #12
 8000a68:	4915      	ldr	r1, [pc, #84]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000a6a:	4813      	ldr	r0, [pc, #76]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000a6c:	f003 f9ee 	bl	8003e4c <HAL_SPI_Transmit_IT>
};
 8000a70:	e018      	b.n	8000aa4 <HAL_GPIO_EXTI_Callback+0x90>
			if(state_transfer == 2)
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d108      	bne.n	8000a8c <HAL_GPIO_EXTI_Callback+0x78>
				HAL_SPI_Receive_IT(&hspi4, full_telem, nextLen);
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	461a      	mov	r2, r3
 8000a82:	4911      	ldr	r1, [pc, #68]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000a86:	f003 fa6f 	bl	8003f68 <HAL_SPI_Receive_IT>
};
 8000a8a:	e00b      	b.n	8000aa4 <HAL_GPIO_EXTI_Callback+0x90>
			if(state_transfer == 3)
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	d107      	bne.n	8000aa4 <HAL_GPIO_EXTI_Callback+0x90>
				HAL_SPI_Transmit_IT(&hspi4, transmit2, nextLen);
 8000a94:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	490b      	ldr	r1, [pc, #44]	; (8000acc <HAL_GPIO_EXTI_Callback+0xb8>)
 8000a9e:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000aa0:	f003 f9d4 	bl	8003e4c <HAL_SPI_Transmit_IT>
};
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	200009b8 	.word	0x200009b8
 8000ab4:	20000944 	.word	0x20000944
 8000ab8:	200009cc 	.word	0x200009cc
 8000abc:	20000930 	.word	0x20000930
 8000ac0:	20000ab4 	.word	0x20000ab4
 8000ac4:	20000aa4 	.word	0x20000aa4
 8000ac8:	20000ac0 	.word	0x20000ac0
 8000acc:	20000a30 	.word	0x20000a30

08000ad0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim14.Instance)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d103      	bne.n	8000aec <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_0);
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	4804      	ldr	r0, [pc, #16]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ae8:	f001 fe29 	bl	800273e <HAL_GPIO_TogglePin>
	}
};
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000b88 	.word	0x20000b88
 8000af8:	40020400 	.word	0x40020400

08000afc <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

	if(hspi->Instance == hspi4.Instance)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_SPI_TxCpltCallback+0x48>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d113      	bne.n	8000b38 <HAL_SPI_TxCpltCallback+0x3c>
	{
		if(state_transfer == 1)
 8000b10:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <HAL_SPI_TxCpltCallback+0x4c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d105      	bne.n	8000b24 <HAL_SPI_TxCpltCallback+0x28>
		{
			//clear(transmit,sizeof(transmit));
			state_transfer++;
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_SPI_TxCpltCallback+0x4c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <HAL_SPI_TxCpltCallback+0x4c>)
 8000b20:	6013      	str	r3, [r2, #0]
			//clear(transmit2,sizeof(transmit));
			state_transfer = 0;
			nextLen = 0;
		}
	}
};
 8000b22:	e009      	b.n	8000b38 <HAL_SPI_TxCpltCallback+0x3c>
		if(state_transfer == 3)
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <HAL_SPI_TxCpltCallback+0x4c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b03      	cmp	r3, #3
 8000b2a:	d105      	bne.n	8000b38 <HAL_SPI_TxCpltCallback+0x3c>
			state_transfer = 0;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_SPI_TxCpltCallback+0x4c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
			nextLen = 0;
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_SPI_TxCpltCallback+0x50>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
};
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	200009cc 	.word	0x200009cc
 8000b48:	200009b8 	.word	0x200009b8
 8000b4c:	20000aa4 	.word	0x20000aa4

08000b50 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == hspi4.Instance)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b34      	ldr	r3, [pc, #208]	; (8000c30 <HAL_SPI_RxCpltCallback+0xe0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d161      	bne.n	8000c28 <HAL_SPI_RxCpltCallback+0xd8>
	{
		if(state_transfer ==  0)
 8000b64:	4b33      	ldr	r3, [pc, #204]	; (8000c34 <HAL_SPI_RxCpltCallback+0xe4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d130      	bne.n	8000bce <HAL_SPI_RxCpltCallback+0x7e>
		{
			rx++;
 8000b6c:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <HAL_SPI_RxCpltCallback+0xe8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	3301      	adds	r3, #1
 8000b72:	4a31      	ldr	r2, [pc, #196]	; (8000c38 <HAL_SPI_RxCpltCallback+0xe8>)
 8000b74:	6013      	str	r3, [r2, #0]
			HAL_SPIEx_FlushRxFifo(&hspi4);
 8000b76:	482e      	ldr	r0, [pc, #184]	; (8000c30 <HAL_SPI_RxCpltCallback+0xe0>)
 8000b78:	f004 f8c9 	bl	8004d0e <HAL_SPIEx_FlushRxFifo>
			retVal = ParseMessage(argRet, telem, sizeof(argRet));
 8000b7c:	2264      	movs	r2, #100	; 0x64
 8000b7e:	492f      	ldr	r1, [pc, #188]	; (8000c3c <HAL_SPI_RxCpltCallback+0xec>)
 8000b80:	482f      	ldr	r0, [pc, #188]	; (8000c40 <HAL_SPI_RxCpltCallback+0xf0>)
 8000b82:	f7ff ff2b 	bl	80009dc <ParseMessage>
 8000b86:	4603      	mov	r3, r0
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <HAL_SPI_RxCpltCallback+0xf4>)
 8000b8c:	701a      	strb	r2, [r3, #0]

			ShiftBit();
 8000b8e:	f7ff fe61 	bl	8000854 <ShiftBit>
			if(retVal != DEFRAME_OK)
 8000b92:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <HAL_SPI_RxCpltCallback+0xf4>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d010      	beq.n	8000bbc <HAL_SPI_RxCpltCallback+0x6c>
			{
				//clear(telem, sizeof(telem));
				//clear(argRet, sizeof(argRet));
				HAL_SPI_DeInit(&hspi4);
 8000b9a:	4825      	ldr	r0, [pc, #148]	; (8000c30 <HAL_SPI_RxCpltCallback+0xe0>)
 8000b9c:	f003 f92d 	bl	8003dfa <HAL_SPI_DeInit>
				HAL_SPI_Init(&hspi4);
 8000ba0:	4823      	ldr	r0, [pc, #140]	; (8000c30 <HAL_SPI_RxCpltCallback+0xe0>)
 8000ba2:	f003 f87f 	bl	8003ca4 <HAL_SPI_Init>
				MX_SPI4_Init();
 8000ba6:	f000 f923 	bl	8000df0 <MX_SPI4_Init>
				state_transfer = 0;
 8000baa:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <HAL_SPI_RxCpltCallback+0xe4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
				msgHaiya++;
 8000bb0:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <HAL_SPI_RxCpltCallback+0xf8>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	4a24      	ldr	r2, [pc, #144]	; (8000c48 <HAL_SPI_RxCpltCallback+0xf8>)
 8000bb8:	6013      	str	r3, [r2, #0]
				return;
 8000bba:	e035      	b.n	8000c28 <HAL_SPI_RxCpltCallback+0xd8>
			}
			decrypt(argRet);
 8000bbc:	4820      	ldr	r0, [pc, #128]	; (8000c40 <HAL_SPI_RxCpltCallback+0xf0>)
 8000bbe:	f7ff fe9f 	bl	8000900 <decrypt>

			//clear(argRet, sizeof(argRet));
			//clear(telem, sizeof(telem));

			state_transfer++;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <HAL_SPI_RxCpltCallback+0xe4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	4a1a      	ldr	r2, [pc, #104]	; (8000c34 <HAL_SPI_RxCpltCallback+0xe4>)
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	e02c      	b.n	8000c28 <HAL_SPI_RxCpltCallback+0xd8>

		}else
		if(state_transfer == 2)
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <HAL_SPI_RxCpltCallback+0xe4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d128      	bne.n	8000c28 <HAL_SPI_RxCpltCallback+0xd8>
		{
			rx++;
 8000bd6:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <HAL_SPI_RxCpltCallback+0xe8>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	4a16      	ldr	r2, [pc, #88]	; (8000c38 <HAL_SPI_RxCpltCallback+0xe8>)
 8000bde:	6013      	str	r3, [r2, #0]
			HAL_SPIEx_FlushRxFifo(&hspi4);
 8000be0:	4813      	ldr	r0, [pc, #76]	; (8000c30 <HAL_SPI_RxCpltCallback+0xe0>)
 8000be2:	f004 f894 	bl	8004d0e <HAL_SPIEx_FlushRxFifo>
			retVal = ParseMessage(argRet, full_telem, sizeof(argRet));
 8000be6:	2264      	movs	r2, #100	; 0x64
 8000be8:	4918      	ldr	r1, [pc, #96]	; (8000c4c <HAL_SPI_RxCpltCallback+0xfc>)
 8000bea:	4815      	ldr	r0, [pc, #84]	; (8000c40 <HAL_SPI_RxCpltCallback+0xf0>)
 8000bec:	f7ff fef6 	bl	80009dc <ParseMessage>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <HAL_SPI_RxCpltCallback+0xf4>)
 8000bf6:	701a      	strb	r2, [r3, #0]

			if(retVal != DEFRAME_OK)
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_SPI_RxCpltCallback+0xf4>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d00b      	beq.n	8000c18 <HAL_SPI_RxCpltCallback+0xc8>
			{
				//clear(full_telem, sizeof(full_telem));
				//clear(argRet, sizeof(argRet));
				HAL_SPI_DeInit(&hspi4);
 8000c00:	480b      	ldr	r0, [pc, #44]	; (8000c30 <HAL_SPI_RxCpltCallback+0xe0>)
 8000c02:	f003 f8fa 	bl	8003dfa <HAL_SPI_DeInit>
				HAL_SPI_Init(&hspi4);
 8000c06:	480a      	ldr	r0, [pc, #40]	; (8000c30 <HAL_SPI_RxCpltCallback+0xe0>)
 8000c08:	f003 f84c 	bl	8003ca4 <HAL_SPI_Init>
				MX_SPI4_Init();
 8000c0c:	f000 f8f0 	bl	8000df0 <MX_SPI4_Init>
				state_transfer = 0;
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_SPI_RxCpltCallback+0xe4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
				return;
 8000c16:	e007      	b.n	8000c28 <HAL_SPI_RxCpltCallback+0xd8>
			}

			decrypt(argRet);
 8000c18:	4809      	ldr	r0, [pc, #36]	; (8000c40 <HAL_SPI_RxCpltCallback+0xf0>)
 8000c1a:	f7ff fe71 	bl	8000900 <decrypt>
			//clear(full_telem, sizeof(full_telem));
			//clear(argRet, sizeof(argRet));
			state_transfer++;
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_SPI_RxCpltCallback+0xe4>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	4a03      	ldr	r2, [pc, #12]	; (8000c34 <HAL_SPI_RxCpltCallback+0xe4>)
 8000c26:	6013      	str	r3, [r2, #0]
		}
	}
};
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200009cc 	.word	0x200009cc
 8000c34:	200009b8 	.word	0x200009b8
 8000c38:	20000928 	.word	0x20000928
 8000c3c:	20000944 	.word	0x20000944
 8000c40:	20000b24 	.word	0x20000b24
 8000c44:	200008c0 	.word	0x200008c0
 8000c48:	20000aa0 	.word	0x20000aa0
 8000c4c:	20000ac0 	.word	0x20000ac0

08000c50 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == hspi4.Instance)
	{
	}
};
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c68:	f000 fce1 	bl	800162e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6c:	f000 f828 	bl	8000cc0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8000c70:	f000 f97a 	bl	8000f68 <MX_DMA_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c74:	f000 f99e 	bl	8000fb4 <MX_GPIO_Init>
  //MX_ETH_Init();
  MX_USART3_UART_Init();
 8000c78:	f000 f918 	bl	8000eac <MX_USART3_UART_Init>
  MX_SPI4_Init();
 8000c7c:	f000 f8b8 	bl	8000df0 <MX_SPI4_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c80:	f000 f944 	bl	8000f0c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM14_Init();
 8000c84:	f000 f8ee 	bl	8000e64 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  PacketInit();
 8000c88:	f7ff fc52 	bl	8000530 <PacketInit>
  HAL_TIM_Base_Start_IT(&htim14);
 8000c8c:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <main+0x50>)
 8000c8e:	f004 f8b7 	bl	8004e00 <HAL_TIM_Base_Start_IT>

    /* USER CODE BEGIN 3 */
	  //loops++;
	  //HAL_Delay(2000);

	  if(telem[0] != 0x00 && loops == 0)
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <main+0x54>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d0fb      	beq.n	8000c92 <main+0x2e>
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <main+0x58>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1f7      	bne.n	8000c92 <main+0x2e>
	  {
		  ShiftBit();
 8000ca2:	f7ff fdd7 	bl	8000854 <ShiftBit>
		  loops++;
 8000ca6:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <main+0x58>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	3301      	adds	r3, #1
 8000cac:	4a03      	ldr	r2, [pc, #12]	; (8000cbc <main+0x58>)
 8000cae:	6013      	str	r3, [r2, #0]
	  if(telem[0] != 0x00 && loops == 0)
 8000cb0:	e7ef      	b.n	8000c92 <main+0x2e>
 8000cb2:	bf00      	nop
 8000cb4:	20000b88 	.word	0x20000b88
 8000cb8:	20000944 	.word	0x20000944
 8000cbc:	20000924 	.word	0x20000924

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b0b8      	sub	sp, #224	; 0xe0
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cca:	2234      	movs	r2, #52	; 0x34
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f005 fe4e 	bl	8006970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce4:	f107 0308 	add.w	r3, r7, #8
 8000ce8:	2290      	movs	r2, #144	; 0x90
 8000cea:	2100      	movs	r1, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f005 fe3f 	bl	8006970 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cf2:	f001 fe9f 	bl	8002a34 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	4b3b      	ldr	r3, [pc, #236]	; (8000de4 <SystemClock_Config+0x124>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	4a3a      	ldr	r2, [pc, #232]	; (8000de4 <SystemClock_Config+0x124>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d00:	6413      	str	r3, [r2, #64]	; 0x40
 8000d02:	4b38      	ldr	r3, [pc, #224]	; (8000de4 <SystemClock_Config+0x124>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d0e:	4b36      	ldr	r3, [pc, #216]	; (8000de8 <SystemClock_Config+0x128>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a35      	ldr	r2, [pc, #212]	; (8000de8 <SystemClock_Config+0x128>)
 8000d14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <SystemClock_Config+0x128>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d26:	2301      	movs	r3, #1
 8000d28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d2c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d34:	2302      	movs	r3, #2
 8000d36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d42:	2304      	movs	r3, #4
 8000d44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000d48:	23d8      	movs	r3, #216	; 0xd8
 8000d4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000d54:	2309      	movs	r3, #9
 8000d56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d60:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d64:	4618      	mov	r0, r3
 8000d66:	f001 fec5 	bl	8002af4 <HAL_RCC_OscConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d70:	f000 f9e4 	bl	800113c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d74:	f001 fe6e 	bl	8002a54 <HAL_PWREx_EnableOverDrive>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d7e:	f000 f9dd 	bl	800113c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d82:	230f      	movs	r3, #15
 8000d84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000da4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000da8:	2107      	movs	r1, #7
 8000daa:	4618      	mov	r0, r3
 8000dac:	f002 f950 	bl	8003050 <HAL_RCC_ClockConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000db6:	f000 f9c1 	bl	800113c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <SystemClock_Config+0x12c>)
 8000dbc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f002 fb41 	bl	8003454 <HAL_RCCEx_PeriphCLKConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000dd8:	f000 f9b0 	bl	800113c <Error_Handler>
  }
}
 8000ddc:	bf00      	nop
 8000dde:	37e0      	adds	r7, #224	; 0xe0
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40007000 	.word	0x40007000
 8000dec:	00200100 	.word	0x00200100

08000df0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <MX_SPI4_Init+0x6c>)
 8000df6:	4a1a      	ldr	r2, [pc, #104]	; (8000e60 <MX_SPI4_Init+0x70>)
 8000df8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <MX_SPI4_Init+0x6c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <MX_SPI4_Init+0x6c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_SPI4_Init+0x6c>)
 8000e08:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e0c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <MX_SPI4_Init+0x6c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_SPI4_Init+0x6c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <MX_SPI4_Init+0x6c>)
 8000e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e20:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_SPI4_Init+0x6c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_SPI4_Init+0x6c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <MX_SPI4_Init+0x6c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_SPI4_Init+0x6c>)
 8000e36:	2207      	movs	r2, #7
 8000e38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <MX_SPI4_Init+0x6c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_SPI4_Init+0x6c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_SPI4_Init+0x6c>)
 8000e48:	f002 ff2c 	bl	8003ca4 <HAL_SPI_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_SPI4_Init+0x66>
  {
    Error_Handler();
 8000e52:	f000 f973 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200009cc 	.word	0x200009cc
 8000e60:	40013400 	.word	0x40013400

08000e64 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_TIM14_Init+0x40>)
 8000e6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <MX_TIM14_Init+0x44>)
 8000e6c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10800 - 1;
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <MX_TIM14_Init+0x40>)
 8000e70:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8000e74:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <MX_TIM14_Init+0x40>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000 - 1;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_TIM14_Init+0x40>)
 8000e7e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000e82:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <MX_TIM14_Init+0x40>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_TIM14_Init+0x40>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <MX_TIM14_Init+0x40>)
 8000e92:	f003 ff5e 	bl	8004d52 <HAL_TIM_Base_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000e9c:	f000 f94e 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000b88 	.word	0x20000b88
 8000ea8:	40002000 	.word	0x40002000

08000eac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <MX_USART3_UART_Init+0x5c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ebc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ef0:	f004 fa04 	bl	80052fc <HAL_UART_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000efa:	f000 f91f 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000438 	.word	0x20000438
 8000f08:	40004800 	.word	0x40004800

08000f0c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f1a:	2206      	movs	r2, #6
 8000f1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f20:	2202      	movs	r2, #2
 8000f22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f50:	f001 fc28 	bl	80027a4 <HAL_PCD_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f5a:	f000 f8ef 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200004bc 	.word	0x200004bc

08000f68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <MX_DMA_Init+0x48>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <MX_DMA_Init+0x48>)
 8000f74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <MX_DMA_Init+0x48>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2038      	movs	r0, #56	; 0x38
 8000f8c:	f000 fccf 	bl	800192e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f90:	2038      	movs	r0, #56	; 0x38
 8000f92:	f000 fce8 	bl	8001966 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2039      	movs	r0, #57	; 0x39
 8000f9c:	f000 fcc7 	bl	800192e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000fa0:	2039      	movs	r0, #57	; 0x39
 8000fa2:	f000 fce0 	bl	8001966 <HAL_NVIC_EnableIRQ>

}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800

08000fb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	; 0x30
 8000fb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fca:	4b57      	ldr	r3, [pc, #348]	; (8001128 <MX_GPIO_Init+0x174>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a56      	ldr	r2, [pc, #344]	; (8001128 <MX_GPIO_Init+0x174>)
 8000fd0:	f043 0310 	orr.w	r3, r3, #16
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b54      	ldr	r3, [pc, #336]	; (8001128 <MX_GPIO_Init+0x174>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0310 	and.w	r3, r3, #16
 8000fde:	61bb      	str	r3, [r7, #24]
 8000fe0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	4b51      	ldr	r3, [pc, #324]	; (8001128 <MX_GPIO_Init+0x174>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a50      	ldr	r2, [pc, #320]	; (8001128 <MX_GPIO_Init+0x174>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b4e      	ldr	r3, [pc, #312]	; (8001128 <MX_GPIO_Init+0x174>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffa:	4b4b      	ldr	r3, [pc, #300]	; (8001128 <MX_GPIO_Init+0x174>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a4a      	ldr	r2, [pc, #296]	; (8001128 <MX_GPIO_Init+0x174>)
 8001000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b48      	ldr	r3, [pc, #288]	; (8001128 <MX_GPIO_Init+0x174>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	4b45      	ldr	r3, [pc, #276]	; (8001128 <MX_GPIO_Init+0x174>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a44      	ldr	r2, [pc, #272]	; (8001128 <MX_GPIO_Init+0x174>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b42      	ldr	r3, [pc, #264]	; (8001128 <MX_GPIO_Init+0x174>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	4b3f      	ldr	r3, [pc, #252]	; (8001128 <MX_GPIO_Init+0x174>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a3e      	ldr	r2, [pc, #248]	; (8001128 <MX_GPIO_Init+0x174>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b3c      	ldr	r3, [pc, #240]	; (8001128 <MX_GPIO_Init+0x174>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001042:	4b39      	ldr	r3, [pc, #228]	; (8001128 <MX_GPIO_Init+0x174>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a38      	ldr	r2, [pc, #224]	; (8001128 <MX_GPIO_Init+0x174>)
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b36      	ldr	r3, [pc, #216]	; (8001128 <MX_GPIO_Init+0x174>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800105a:	4b33      	ldr	r3, [pc, #204]	; (8001128 <MX_GPIO_Init+0x174>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a32      	ldr	r2, [pc, #200]	; (8001128 <MX_GPIO_Init+0x174>)
 8001060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b30      	ldr	r3, [pc, #192]	; (8001128 <MX_GPIO_Init+0x174>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f244 0181 	movw	r1, #16513	; 0x4081
 8001078:	482c      	ldr	r0, [pc, #176]	; (800112c <MX_GPIO_Init+0x178>)
 800107a:	f001 fb47 	bl	800270c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2140      	movs	r1, #64	; 0x40
 8001082:	482b      	ldr	r0, [pc, #172]	; (8001130 <MX_GPIO_Init+0x17c>)
 8001084:	f001 fb42 	bl	800270c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_IT_Pin */
  GPIO_InitStruct.Pin = CS_IT_Pin;
 8001088:	2310      	movs	r3, #16
 800108a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800108c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CS_IT_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	4825      	ldr	r0, [pc, #148]	; (8001134 <MX_GPIO_Init+0x180>)
 800109e:	f001 f865 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4619      	mov	r1, r3
 80010b8:	481f      	ldr	r0, [pc, #124]	; (8001138 <MX_GPIO_Init+0x184>)
 80010ba:	f001 f857 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80010be:	f244 0381 	movw	r3, #16513	; 0x4081
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	4619      	mov	r1, r3
 80010d6:	4815      	ldr	r0, [pc, #84]	; (800112c <MX_GPIO_Init+0x178>)
 80010d8:	f001 f848 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010dc:	2340      	movs	r3, #64	; 0x40
 80010de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	480f      	ldr	r0, [pc, #60]	; (8001130 <MX_GPIO_Init+0x17c>)
 80010f4:	f001 f83a 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	4809      	ldr	r0, [pc, #36]	; (8001130 <MX_GPIO_Init+0x17c>)
 800110c:	f001 f82e 	bl	800216c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2100      	movs	r1, #0
 8001114:	200a      	movs	r0, #10
 8001116:	f000 fc0a 	bl	800192e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800111a:	200a      	movs	r0, #10
 800111c:	f000 fc23 	bl	8001966 <HAL_NVIC_EnableIRQ>

}
 8001120:	bf00      	nop
 8001122:	3730      	adds	r7, #48	; 0x30
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	40020400 	.word	0x40020400
 8001130:	40021800 	.word	0x40021800
 8001134:	40021000 	.word	0x40021000
 8001138:	40020800 	.word	0x40020800

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001144:	e7fe      	b.n	8001144 <Error_Handler+0x8>
	...

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <HAL_MspInit+0x44>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	4a0e      	ldr	r2, [pc, #56]	; (800118c <HAL_MspInit+0x44>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <HAL_MspInit+0x44>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <HAL_MspInit+0x44>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a08      	ldr	r2, [pc, #32]	; (800118c <HAL_MspInit+0x44>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_MspInit+0x44>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800

08001190 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a4a      	ldr	r2, [pc, #296]	; (80012d8 <HAL_SPI_MspInit+0x148>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	f040 808e 	bne.w	80012d0 <HAL_SPI_MspInit+0x140>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80011b4:	4b49      	ldr	r3, [pc, #292]	; (80012dc <HAL_SPI_MspInit+0x14c>)
 80011b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b8:	4a48      	ldr	r2, [pc, #288]	; (80012dc <HAL_SPI_MspInit+0x14c>)
 80011ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011be:	6453      	str	r3, [r2, #68]	; 0x44
 80011c0:	4b46      	ldr	r3, [pc, #280]	; (80012dc <HAL_SPI_MspInit+0x14c>)
 80011c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011cc:	4b43      	ldr	r3, [pc, #268]	; (80012dc <HAL_SPI_MspInit+0x14c>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	4a42      	ldr	r2, [pc, #264]	; (80012dc <HAL_SPI_MspInit+0x14c>)
 80011d2:	f043 0310 	orr.w	r3, r3, #16
 80011d6:	6313      	str	r3, [r2, #48]	; 0x30
 80011d8:	4b40      	ldr	r3, [pc, #256]	; (80012dc <HAL_SPI_MspInit+0x14c>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	f003 0310 	and.w	r3, r3, #16
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80011e4:	2364      	movs	r3, #100	; 0x64
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80011f4:	2305      	movs	r3, #5
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4838      	ldr	r0, [pc, #224]	; (80012e0 <HAL_SPI_MspInit+0x150>)
 8001200:	f000 ffb4 	bl	800216c <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8001204:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <HAL_SPI_MspInit+0x154>)
 8001206:	4a38      	ldr	r2, [pc, #224]	; (80012e8 <HAL_SPI_MspInit+0x158>)
 8001208:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 800120a:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <HAL_SPI_MspInit+0x154>)
 800120c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001210:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001212:	4b34      	ldr	r3, [pc, #208]	; (80012e4 <HAL_SPI_MspInit+0x154>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001218:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <HAL_SPI_MspInit+0x154>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800121e:	4b31      	ldr	r3, [pc, #196]	; (80012e4 <HAL_SPI_MspInit+0x154>)
 8001220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001224:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001226:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <HAL_SPI_MspInit+0x154>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800122c:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <HAL_SPI_MspInit+0x154>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001232:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <HAL_SPI_MspInit+0x154>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <HAL_SPI_MspInit+0x154>)
 800123a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800123e:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001240:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <HAL_SPI_MspInit+0x154>)
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001246:	4827      	ldr	r0, [pc, #156]	; (80012e4 <HAL_SPI_MspInit+0x154>)
 8001248:	f000 fbb6 	bl	80019b8 <HAL_DMA_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 8001252:	f7ff ff73 	bl	800113c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a22      	ldr	r2, [pc, #136]	; (80012e4 <HAL_SPI_MspInit+0x154>)
 800125a:	659a      	str	r2, [r3, #88]	; 0x58
 800125c:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <HAL_SPI_MspInit+0x154>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8001262:	4b22      	ldr	r3, [pc, #136]	; (80012ec <HAL_SPI_MspInit+0x15c>)
 8001264:	4a22      	ldr	r2, [pc, #136]	; (80012f0 <HAL_SPI_MspInit+0x160>)
 8001266:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001268:	4b20      	ldr	r3, [pc, #128]	; (80012ec <HAL_SPI_MspInit+0x15c>)
 800126a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800126e:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <HAL_SPI_MspInit+0x15c>)
 8001272:	2240      	movs	r2, #64	; 0x40
 8001274:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001276:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <HAL_SPI_MspInit+0x15c>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_SPI_MspInit+0x15c>)
 800127e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001282:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <HAL_SPI_MspInit+0x15c>)
 8001286:	2200      	movs	r2, #0
 8001288:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_SPI_MspInit+0x15c>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001290:	4b16      	ldr	r3, [pc, #88]	; (80012ec <HAL_SPI_MspInit+0x15c>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_SPI_MspInit+0x15c>)
 8001298:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800129c:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <HAL_SPI_MspInit+0x15c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80012a4:	4811      	ldr	r0, [pc, #68]	; (80012ec <HAL_SPI_MspInit+0x15c>)
 80012a6:	f000 fb87 	bl	80019b8 <HAL_DMA_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_SPI_MspInit+0x124>
    {
      Error_Handler();
 80012b0:	f7ff ff44 	bl	800113c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <HAL_SPI_MspInit+0x15c>)
 80012b8:	655a      	str	r2, [r3, #84]	; 0x54
 80012ba:	4a0c      	ldr	r2, [pc, #48]	; (80012ec <HAL_SPI_MspInit+0x15c>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2100      	movs	r1, #0
 80012c4:	2054      	movs	r0, #84	; 0x54
 80012c6:	f000 fb32 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80012ca:	2054      	movs	r0, #84	; 0x54
 80012cc:	f000 fb4b 	bl	8001966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80012d0:	bf00      	nop
 80012d2:	3728      	adds	r7, #40	; 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40013400 	.word	0x40013400
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40021000 	.word	0x40021000
 80012e4:	200008c4 	.word	0x200008c4
 80012e8:	40026410 	.word	0x40026410
 80012ec:	20000954 	.word	0x20000954
 80012f0:	40026428 	.word	0x40026428

080012f4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI4)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0e      	ldr	r2, [pc, #56]	; (800133c <HAL_SPI_MspDeInit+0x48>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d116      	bne.n	8001334 <HAL_SPI_MspDeInit+0x40>
  {
  /* USER CODE BEGIN SPI4_MspDeInit 0 */

  /* USER CODE END SPI4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI4_CLK_DISABLE();
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <HAL_SPI_MspDeInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <HAL_SPI_MspDeInit+0x4c>)
 800130c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6);
 8001312:	2164      	movs	r1, #100	; 0x64
 8001314:	480b      	ldr	r0, [pc, #44]	; (8001344 <HAL_SPI_MspDeInit+0x50>)
 8001316:	f001 f8d5 	bl	80024c4 <HAL_GPIO_DeInit>

    /* SPI4 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	4618      	mov	r0, r3
 8001320:	f000 fbf8 	bl	8001b14 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fbf3 	bl	8001b14 <HAL_DMA_DeInit>

    /* SPI4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI4_IRQn);
 800132e:	2054      	movs	r0, #84	; 0x54
 8001330:	f000 fb27 	bl	8001982 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI4_MspDeInit 1 */

  /* USER CODE END SPI4_MspDeInit 1 */
  }

}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40013400 	.word	0x40013400
 8001340:	40023800 	.word	0x40023800
 8001344:	40021000 	.word	0x40021000

08001348 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0d      	ldr	r2, [pc, #52]	; (800138c <HAL_TIM_Base_MspInit+0x44>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d113      	bne.n	8001382 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <HAL_TIM_Base_MspInit+0x48>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <HAL_TIM_Base_MspInit+0x48>)
 8001360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001364:	6413      	str	r3, [r2, #64]	; 0x40
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_TIM_Base_MspInit+0x48>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	202d      	movs	r0, #45	; 0x2d
 8001378:	f000 fad9 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800137c:	202d      	movs	r0, #45	; 0x2d
 800137e:	f000 faf2 	bl	8001966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40002000 	.word	0x40002000
 8001390:	40023800 	.word	0x40023800

08001394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <HAL_UART_MspInit+0x8c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d130      	bne.n	8001418 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013b6:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <HAL_UART_MspInit+0x90>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	4a1a      	ldr	r2, [pc, #104]	; (8001424 <HAL_UART_MspInit+0x90>)
 80013bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c0:	6413      	str	r3, [r2, #64]	; 0x40
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_UART_MspInit+0x90>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_UART_MspInit+0x90>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a14      	ldr	r2, [pc, #80]	; (8001424 <HAL_UART_MspInit+0x90>)
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_UART_MspInit+0x90>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013f8:	2307      	movs	r3, #7
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	4809      	ldr	r0, [pc, #36]	; (8001428 <HAL_UART_MspInit+0x94>)
 8001404:	f000 feb2 	bl	800216c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	2027      	movs	r0, #39	; 0x27
 800140e:	f000 fa8e 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001412:	2027      	movs	r0, #39	; 0x27
 8001414:	f000 faa7 	bl	8001966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001418:	bf00      	nop
 800141a:	3728      	adds	r7, #40	; 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40004800 	.word	0x40004800
 8001424:	40023800 	.word	0x40023800
 8001428:	40020c00 	.word	0x40020c00

0800142c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800144c:	d141      	bne.n	80014d2 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4b23      	ldr	r3, [pc, #140]	; (80014dc <HAL_PCD_MspInit+0xb0>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a22      	ldr	r2, [pc, #136]	; (80014dc <HAL_PCD_MspInit+0xb0>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <HAL_PCD_MspInit+0xb0>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001466:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800146a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001478:	230a      	movs	r3, #10
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	4817      	ldr	r0, [pc, #92]	; (80014e0 <HAL_PCD_MspInit+0xb4>)
 8001484:	f000 fe72 	bl	800216c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001488:	f44f 7300 	mov.w	r3, #512	; 0x200
 800148c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4810      	ldr	r0, [pc, #64]	; (80014e0 <HAL_PCD_MspInit+0xb4>)
 800149e:	f000 fe65 	bl	800216c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <HAL_PCD_MspInit+0xb0>)
 80014a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a6:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <HAL_PCD_MspInit+0xb0>)
 80014a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ac:	6353      	str	r3, [r2, #52]	; 0x34
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_PCD_MspInit+0xb0>)
 80014b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <HAL_PCD_MspInit+0xb0>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	4a07      	ldr	r2, [pc, #28]	; (80014dc <HAL_PCD_MspInit+0xb0>)
 80014c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c4:	6453      	str	r3, [r2, #68]	; 0x44
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_PCD_MspInit+0xb0>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020000 	.word	0x40020000

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <NMI_Handler+0x4>

080014ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <HardFault_Handler+0x4>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <MemManage_Handler+0x4>

080014f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <UsageFault_Handler+0x4>

08001502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001530:	f000 f8ba 	bl	80016a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}

08001538 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800153c:	2010      	movs	r0, #16
 800153e:	f001 f919 	bl	8002774 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  ll++;
 8001542:	4b03      	ldr	r3, [pc, #12]	; (8001550 <EXTI4_IRQHandler+0x18>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	3301      	adds	r3, #1
 8001548:	4a01      	ldr	r2, [pc, #4]	; (8001550 <EXTI4_IRQHandler+0x18>)
 800154a:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI4_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000950 	.word	0x20000950

08001554 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <USART3_IRQHandler+0x10>)
 800155a:	f003 ff1d 	bl	8005398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000438 	.word	0x20000438

08001568 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800156e:	f003 fcbf 	bl	8004ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000b88 	.word	0x20000b88

0800157c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <DMA2_Stream0_IRQHandler+0x10>)
 8001582:	f000 fbb7 	bl	8001cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200008c4 	.word	0x200008c4

08001590 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <DMA2_Stream1_IRQHandler+0x10>)
 8001596:	f000 fbad 	bl	8001cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000954 	.word	0x20000954

080015a4 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <SPI4_IRQHandler+0x10>)
 80015aa:	f002 fe3d 	bl	8004228 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200009cc 	.word	0x200009cc

080015b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <SystemInit+0x20>)
 80015be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <SystemInit+0x20>)
 80015c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001614 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e0:	480d      	ldr	r0, [pc, #52]	; (8001618 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015e2:	490e      	ldr	r1, [pc, #56]	; (800161c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015e4:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e8:	e002      	b.n	80015f0 <LoopCopyDataInit>

080015ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ee:	3304      	adds	r3, #4

080015f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f4:	d3f9      	bcc.n	80015ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015f8:	4c0b      	ldr	r4, [pc, #44]	; (8001628 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015fc:	e001      	b.n	8001602 <LoopFillZerobss>

080015fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001600:	3204      	adds	r2, #4

08001602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001604:	d3fb      	bcc.n	80015fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001606:	f7ff ffd7 	bl	80015b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160a:	f005 f971 	bl	80068f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800160e:	f7ff fb29 	bl	8000c64 <main>
  bx  lr    
 8001612:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001614:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800161c:	2000040c 	.word	0x2000040c
  ldr r2, =_sidata
 8001620:	080069c8 	.word	0x080069c8
  ldr r2, =_sbss
 8001624:	2000040c 	.word	0x2000040c
  ldr r4, =_ebss
 8001628:	20000c24 	.word	0x20000c24

0800162c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC_IRQHandler>

0800162e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001632:	2003      	movs	r0, #3
 8001634:	f000 f970 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001638:	2000      	movs	r0, #0
 800163a:	f000 f805 	bl	8001648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800163e:	f7ff fd83 	bl	8001148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_InitTick+0x54>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_InitTick+0x58>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001662:	fbb2 f3f3 	udiv	r3, r2, r3
 8001666:	4618      	mov	r0, r3
 8001668:	f000 f999 	bl	800199e <HAL_SYSTICK_Config>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e00e      	b.n	8001694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b0f      	cmp	r3, #15
 800167a:	d80a      	bhi.n	8001692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800167c:	2200      	movs	r2, #0
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f000 f953 	bl	800192e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001688:	4a06      	ldr	r2, [pc, #24]	; (80016a4 <HAL_InitTick+0x5c>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	e000      	b.n	8001694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000400 	.word	0x20000400
 80016a0:	20000408 	.word	0x20000408
 80016a4:	20000404 	.word	0x20000404

080016a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_IncTick+0x20>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_IncTick+0x24>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_IncTick+0x24>)
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	20000408 	.word	0x20000408
 80016cc:	20000c20 	.word	0x20000c20

080016d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return uwTick;
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <HAL_GetTick+0x14>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000c20 	.word	0x20000c20

080016e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f0:	f7ff ffee 	bl	80016d0 <HAL_GetTick>
 80016f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001700:	d005      	beq.n	800170e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_Delay+0x44>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800170e:	bf00      	nop
 8001710:	f7ff ffde 	bl	80016d0 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	429a      	cmp	r2, r3
 800171e:	d8f7      	bhi.n	8001710 <HAL_Delay+0x28>
  {
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000408 	.word	0x20000408

08001730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <__NVIC_SetPriorityGrouping+0x40>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 800175a:	4313      	orrs	r3, r2
 800175c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175e:	4a04      	ldr	r2, [pc, #16]	; (8001770 <__NVIC_SetPriorityGrouping+0x40>)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	60d3      	str	r3, [r2, #12]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00
 8001774:	05fa0000 	.word	0x05fa0000

08001778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <__NVIC_GetPriorityGrouping+0x18>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 0307 	and.w	r3, r3, #7
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db0b      	blt.n	80017be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	4907      	ldr	r1, [pc, #28]	; (80017cc <__NVIC_EnableIRQ+0x38>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	2001      	movs	r0, #1
 80017b6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000e100 	.word	0xe000e100

080017d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	db12      	blt.n	8001808 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	f003 021f 	and.w	r2, r3, #31
 80017e8:	490a      	ldr	r1, [pc, #40]	; (8001814 <__NVIC_DisableIRQ+0x44>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	095b      	lsrs	r3, r3, #5
 80017f0:	2001      	movs	r0, #1
 80017f2:	fa00 f202 	lsl.w	r2, r0, r2
 80017f6:	3320      	adds	r3, #32
 80017f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017fc:	f3bf 8f4f 	dsb	sy
}
 8001800:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001802:	f3bf 8f6f 	isb	sy
}
 8001806:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000e100 	.word	0xe000e100

08001818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	4313      	orrs	r3, r2
         );
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f7ff ff8e 	bl	8001818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff05 	bl	8001730 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff1a 	bl	8001778 <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff8e 	bl	800186c <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5d 	bl	8001818 <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff0d 	bl	8001794 <__NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff1d 	bl	80017d0 <__NVIC_DisableIRQ>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ff94 	bl	80018d4 <SysTick_Config>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019c4:	f7ff fe84 	bl	80016d0 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e099      	b.n	8001b08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0201 	bic.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f4:	e00f      	b.n	8001a16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019f6:	f7ff fe6b 	bl	80016d0 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b05      	cmp	r3, #5
 8001a02:	d908      	bls.n	8001a16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2220      	movs	r2, #32
 8001a08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e078      	b.n	8001b08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1e8      	bne.n	80019f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <HAL_DMA_Init+0x158>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d107      	bne.n	8001a80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f023 0307 	bic.w	r3, r3, #7
 8001a96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d117      	bne.n	8001ada <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00e      	beq.n	8001ada <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 fad9 	bl	8002074 <DMA_CheckFifoParam>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2240      	movs	r2, #64	; 0x40
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e016      	b.n	8001b08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 fa90 	bl	8002008 <DMA_CalcBaseAndBitshift>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af0:	223f      	movs	r2, #63	; 0x3f
 8001af2:	409a      	lsls	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	e010803f 	.word	0xe010803f

08001b14 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e050      	b.n	8001bc8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d101      	bne.n	8001b36 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001b32:	2302      	movs	r3, #2
 8001b34:	e048      	b.n	8001bc8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0201 	bic.w	r2, r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2200      	movs	r2, #0
 8001b54:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2221      	movs	r2, #33	; 0x21
 8001b74:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 fa46 	bl	8002008 <DMA_CalcBaseAndBitshift>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b84:	223f      	movs	r2, #63	; 0x3f
 8001b86:	409a      	lsls	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bdc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bde:	f7ff fd77 	bl	80016d0 <HAL_GetTick>
 8001be2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d008      	beq.n	8001c02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2280      	movs	r2, #128	; 0x80
 8001bf4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e052      	b.n	8001ca8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0216 	bic.w	r2, r2, #22
 8001c10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695a      	ldr	r2, [r3, #20]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d103      	bne.n	8001c32 <HAL_DMA_Abort+0x62>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d007      	beq.n	8001c42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0208 	bic.w	r2, r2, #8
 8001c40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0201 	bic.w	r2, r2, #1
 8001c50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c52:	e013      	b.n	8001c7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c54:	f7ff fd3c 	bl	80016d0 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b05      	cmp	r3, #5
 8001c60:	d90c      	bls.n	8001c7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2220      	movs	r2, #32
 8001c66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e015      	b.n	8001ca8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1e4      	bne.n	8001c54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8e:	223f      	movs	r2, #63	; 0x3f
 8001c90:	409a      	lsls	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d004      	beq.n	8001cce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e00c      	b.n	8001ce8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2205      	movs	r2, #5
 8001cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0201 	bic.w	r2, r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001d00:	4b92      	ldr	r3, [pc, #584]	; (8001f4c <HAL_DMA_IRQHandler+0x258>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a92      	ldr	r2, [pc, #584]	; (8001f50 <HAL_DMA_IRQHandler+0x25c>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	0a9b      	lsrs	r3, r3, #10
 8001d0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1e:	2208      	movs	r2, #8
 8001d20:	409a      	lsls	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d01a      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d013      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0204 	bic.w	r2, r2, #4
 8001d46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4c:	2208      	movs	r2, #8
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d58:	f043 0201 	orr.w	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d64:	2201      	movs	r2, #1
 8001d66:	409a      	lsls	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d012      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00b      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d82:	2201      	movs	r2, #1
 8001d84:	409a      	lsls	r2, r3
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8e:	f043 0202 	orr.w	r2, r3, #2
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d012      	beq.n	8001dcc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00b      	beq.n	8001dcc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db8:	2204      	movs	r2, #4
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc4:	f043 0204 	orr.w	r2, r3, #4
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd0:	2210      	movs	r2, #16
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d043      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d03c      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dee:	2210      	movs	r2, #16
 8001df0:	409a      	lsls	r2, r3
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d018      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d108      	bne.n	8001e24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d024      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	4798      	blx	r3
 8001e22:	e01f      	b.n	8001e64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d01b      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	4798      	blx	r3
 8001e34:	e016      	b.n	8001e64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d107      	bne.n	8001e54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0208 	bic.w	r2, r2, #8
 8001e52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e68:	2220      	movs	r2, #32
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 808e 	beq.w	8001f92 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0310 	and.w	r3, r3, #16
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 8086 	beq.w	8001f92 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b05      	cmp	r3, #5
 8001e9c:	d136      	bne.n	8001f0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0216 	bic.w	r2, r2, #22
 8001eac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695a      	ldr	r2, [r3, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ebc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d103      	bne.n	8001ece <HAL_DMA_IRQHandler+0x1da>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0208 	bic.w	r2, r2, #8
 8001edc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee2:	223f      	movs	r2, #63	; 0x3f
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d07d      	beq.n	8001ffe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	4798      	blx	r3
        }
        return;
 8001f0a:	e078      	b.n	8001ffe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d01c      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d108      	bne.n	8001f3a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d030      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	4798      	blx	r3
 8001f38:	e02b      	b.n	8001f92 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d027      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	4798      	blx	r3
 8001f4a:	e022      	b.n	8001f92 <HAL_DMA_IRQHandler+0x29e>
 8001f4c:	20000400 	.word	0x20000400
 8001f50:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10f      	bne.n	8001f82 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0210 	bic.w	r2, r2, #16
 8001f70:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d032      	beq.n	8002000 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d022      	beq.n	8001fec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2205      	movs	r2, #5
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0201 	bic.w	r2, r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d307      	bcc.n	8001fda <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f2      	bne.n	8001fbe <HAL_DMA_IRQHandler+0x2ca>
 8001fd8:	e000      	b.n	8001fdc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001fda:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
 8001ffc:	e000      	b.n	8002000 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ffe:	bf00      	nop
    }
  }
}
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop

08002008 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	3b10      	subs	r3, #16
 8002018:	4a13      	ldr	r2, [pc, #76]	; (8002068 <DMA_CalcBaseAndBitshift+0x60>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	091b      	lsrs	r3, r3, #4
 8002020:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002022:	4a12      	ldr	r2, [pc, #72]	; (800206c <DMA_CalcBaseAndBitshift+0x64>)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4413      	add	r3, r2
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b03      	cmp	r3, #3
 8002034:	d908      	bls.n	8002048 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <DMA_CalcBaseAndBitshift+0x68>)
 800203e:	4013      	ands	r3, r2
 8002040:	1d1a      	adds	r2, r3, #4
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	659a      	str	r2, [r3, #88]	; 0x58
 8002046:	e006      	b.n	8002056 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <DMA_CalcBaseAndBitshift+0x68>)
 8002050:	4013      	ands	r3, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800205a:	4618      	mov	r0, r3
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	aaaaaaab 	.word	0xaaaaaaab
 800206c:	080069b0 	.word	0x080069b0
 8002070:	fffffc00 	.word	0xfffffc00

08002074 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d11f      	bne.n	80020ce <DMA_CheckFifoParam+0x5a>
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b03      	cmp	r3, #3
 8002092:	d856      	bhi.n	8002142 <DMA_CheckFifoParam+0xce>
 8002094:	a201      	add	r2, pc, #4	; (adr r2, 800209c <DMA_CheckFifoParam+0x28>)
 8002096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209a:	bf00      	nop
 800209c:	080020ad 	.word	0x080020ad
 80020a0:	080020bf 	.word	0x080020bf
 80020a4:	080020ad 	.word	0x080020ad
 80020a8:	08002143 	.word	0x08002143
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d046      	beq.n	8002146 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020bc:	e043      	b.n	8002146 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020c6:	d140      	bne.n	800214a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020cc:	e03d      	b.n	800214a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020d6:	d121      	bne.n	800211c <DMA_CheckFifoParam+0xa8>
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d837      	bhi.n	800214e <DMA_CheckFifoParam+0xda>
 80020de:	a201      	add	r2, pc, #4	; (adr r2, 80020e4 <DMA_CheckFifoParam+0x70>)
 80020e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e4:	080020f5 	.word	0x080020f5
 80020e8:	080020fb 	.word	0x080020fb
 80020ec:	080020f5 	.word	0x080020f5
 80020f0:	0800210d 	.word	0x0800210d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
      break;
 80020f8:	e030      	b.n	800215c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d025      	beq.n	8002152 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800210a:	e022      	b.n	8002152 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002114:	d11f      	bne.n	8002156 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800211a:	e01c      	b.n	8002156 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d903      	bls.n	800212a <DMA_CheckFifoParam+0xb6>
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d003      	beq.n	8002130 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002128:	e018      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	73fb      	strb	r3, [r7, #15]
      break;
 800212e:	e015      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00e      	beq.n	800215a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
      break;
 8002140:	e00b      	b.n	800215a <DMA_CheckFifoParam+0xe6>
      break;
 8002142:	bf00      	nop
 8002144:	e00a      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      break;
 8002146:	bf00      	nop
 8002148:	e008      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      break;
 800214a:	bf00      	nop
 800214c:	e006      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      break;
 800214e:	bf00      	nop
 8002150:	e004      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      break;
 8002152:	bf00      	nop
 8002154:	e002      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      break;   
 8002156:	bf00      	nop
 8002158:	e000      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      break;
 800215a:	bf00      	nop
    }
  } 
  
  return status; 
 800215c:	7bfb      	ldrb	r3, [r7, #15]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop

0800216c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	; 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002182:	2300      	movs	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	e175      	b.n	8002478 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800218c:	2201      	movs	r2, #1
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	f040 8164 	bne.w	8002472 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d005      	beq.n	80021c2 <HAL_GPIO_Init+0x56>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d130      	bne.n	8002224 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	2203      	movs	r2, #3
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f8:	2201      	movs	r2, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 0201 	and.w	r2, r3, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	2b03      	cmp	r3, #3
 800222e:	d017      	beq.n	8002260 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	2203      	movs	r2, #3
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d123      	bne.n	80022b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	08da      	lsrs	r2, r3, #3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3208      	adds	r2, #8
 8002274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	220f      	movs	r2, #15
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	08da      	lsrs	r2, r3, #3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3208      	adds	r2, #8
 80022ae:	69b9      	ldr	r1, [r7, #24]
 80022b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2203      	movs	r2, #3
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0203 	and.w	r2, r3, #3
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80be 	beq.w	8002472 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f6:	4b66      	ldr	r3, [pc, #408]	; (8002490 <HAL_GPIO_Init+0x324>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	4a65      	ldr	r2, [pc, #404]	; (8002490 <HAL_GPIO_Init+0x324>)
 80022fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002300:	6453      	str	r3, [r2, #68]	; 0x44
 8002302:	4b63      	ldr	r3, [pc, #396]	; (8002490 <HAL_GPIO_Init+0x324>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800230e:	4a61      	ldr	r2, [pc, #388]	; (8002494 <HAL_GPIO_Init+0x328>)
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	3302      	adds	r3, #2
 8002316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	220f      	movs	r2, #15
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a58      	ldr	r2, [pc, #352]	; (8002498 <HAL_GPIO_Init+0x32c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d037      	beq.n	80023aa <HAL_GPIO_Init+0x23e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a57      	ldr	r2, [pc, #348]	; (800249c <HAL_GPIO_Init+0x330>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d031      	beq.n	80023a6 <HAL_GPIO_Init+0x23a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a56      	ldr	r2, [pc, #344]	; (80024a0 <HAL_GPIO_Init+0x334>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d02b      	beq.n	80023a2 <HAL_GPIO_Init+0x236>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a55      	ldr	r2, [pc, #340]	; (80024a4 <HAL_GPIO_Init+0x338>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d025      	beq.n	800239e <HAL_GPIO_Init+0x232>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a54      	ldr	r2, [pc, #336]	; (80024a8 <HAL_GPIO_Init+0x33c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d01f      	beq.n	800239a <HAL_GPIO_Init+0x22e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a53      	ldr	r2, [pc, #332]	; (80024ac <HAL_GPIO_Init+0x340>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d019      	beq.n	8002396 <HAL_GPIO_Init+0x22a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a52      	ldr	r2, [pc, #328]	; (80024b0 <HAL_GPIO_Init+0x344>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d013      	beq.n	8002392 <HAL_GPIO_Init+0x226>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a51      	ldr	r2, [pc, #324]	; (80024b4 <HAL_GPIO_Init+0x348>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00d      	beq.n	800238e <HAL_GPIO_Init+0x222>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a50      	ldr	r2, [pc, #320]	; (80024b8 <HAL_GPIO_Init+0x34c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d007      	beq.n	800238a <HAL_GPIO_Init+0x21e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4f      	ldr	r2, [pc, #316]	; (80024bc <HAL_GPIO_Init+0x350>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d101      	bne.n	8002386 <HAL_GPIO_Init+0x21a>
 8002382:	2309      	movs	r3, #9
 8002384:	e012      	b.n	80023ac <HAL_GPIO_Init+0x240>
 8002386:	230a      	movs	r3, #10
 8002388:	e010      	b.n	80023ac <HAL_GPIO_Init+0x240>
 800238a:	2308      	movs	r3, #8
 800238c:	e00e      	b.n	80023ac <HAL_GPIO_Init+0x240>
 800238e:	2307      	movs	r3, #7
 8002390:	e00c      	b.n	80023ac <HAL_GPIO_Init+0x240>
 8002392:	2306      	movs	r3, #6
 8002394:	e00a      	b.n	80023ac <HAL_GPIO_Init+0x240>
 8002396:	2305      	movs	r3, #5
 8002398:	e008      	b.n	80023ac <HAL_GPIO_Init+0x240>
 800239a:	2304      	movs	r3, #4
 800239c:	e006      	b.n	80023ac <HAL_GPIO_Init+0x240>
 800239e:	2303      	movs	r3, #3
 80023a0:	e004      	b.n	80023ac <HAL_GPIO_Init+0x240>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e002      	b.n	80023ac <HAL_GPIO_Init+0x240>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <HAL_GPIO_Init+0x240>
 80023aa:	2300      	movs	r3, #0
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	f002 0203 	and.w	r2, r2, #3
 80023b2:	0092      	lsls	r2, r2, #2
 80023b4:	4093      	lsls	r3, r2
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80023bc:	4935      	ldr	r1, [pc, #212]	; (8002494 <HAL_GPIO_Init+0x328>)
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	089b      	lsrs	r3, r3, #2
 80023c2:	3302      	adds	r3, #2
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ca:	4b3d      	ldr	r3, [pc, #244]	; (80024c0 <HAL_GPIO_Init+0x354>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ee:	4a34      	ldr	r2, [pc, #208]	; (80024c0 <HAL_GPIO_Init+0x354>)
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f4:	4b32      	ldr	r3, [pc, #200]	; (80024c0 <HAL_GPIO_Init+0x354>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002418:	4a29      	ldr	r2, [pc, #164]	; (80024c0 <HAL_GPIO_Init+0x354>)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800241e:	4b28      	ldr	r3, [pc, #160]	; (80024c0 <HAL_GPIO_Init+0x354>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002442:	4a1f      	ldr	r2, [pc, #124]	; (80024c0 <HAL_GPIO_Init+0x354>)
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <HAL_GPIO_Init+0x354>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800246c:	4a14      	ldr	r2, [pc, #80]	; (80024c0 <HAL_GPIO_Init+0x354>)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3301      	adds	r3, #1
 8002476:	61fb      	str	r3, [r7, #28]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	2b0f      	cmp	r3, #15
 800247c:	f67f ae86 	bls.w	800218c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002480:	bf00      	nop
 8002482:	bf00      	nop
 8002484:	3724      	adds	r7, #36	; 0x24
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800
 8002494:	40013800 	.word	0x40013800
 8002498:	40020000 	.word	0x40020000
 800249c:	40020400 	.word	0x40020400
 80024a0:	40020800 	.word	0x40020800
 80024a4:	40020c00 	.word	0x40020c00
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40021400 	.word	0x40021400
 80024b0:	40021800 	.word	0x40021800
 80024b4:	40021c00 	.word	0x40021c00
 80024b8:	40022000 	.word	0x40022000
 80024bc:	40022400 	.word	0x40022400
 80024c0:	40013c00 	.word	0x40013c00

080024c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	e0d9      	b.n	8002694 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024e0:	2201      	movs	r2, #1
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	f040 80c9 	bne.w	800268e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80024fc:	4a6b      	ldr	r2, [pc, #428]	; (80026ac <HAL_GPIO_DeInit+0x1e8>)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	089b      	lsrs	r3, r3, #2
 8002502:	3302      	adds	r3, #2
 8002504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002508:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	220f      	movs	r2, #15
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	4013      	ands	r3, r2
 800251c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a63      	ldr	r2, [pc, #396]	; (80026b0 <HAL_GPIO_DeInit+0x1ec>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d037      	beq.n	8002596 <HAL_GPIO_DeInit+0xd2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a62      	ldr	r2, [pc, #392]	; (80026b4 <HAL_GPIO_DeInit+0x1f0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d031      	beq.n	8002592 <HAL_GPIO_DeInit+0xce>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a61      	ldr	r2, [pc, #388]	; (80026b8 <HAL_GPIO_DeInit+0x1f4>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d02b      	beq.n	800258e <HAL_GPIO_DeInit+0xca>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a60      	ldr	r2, [pc, #384]	; (80026bc <HAL_GPIO_DeInit+0x1f8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d025      	beq.n	800258a <HAL_GPIO_DeInit+0xc6>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a5f      	ldr	r2, [pc, #380]	; (80026c0 <HAL_GPIO_DeInit+0x1fc>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d01f      	beq.n	8002586 <HAL_GPIO_DeInit+0xc2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a5e      	ldr	r2, [pc, #376]	; (80026c4 <HAL_GPIO_DeInit+0x200>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d019      	beq.n	8002582 <HAL_GPIO_DeInit+0xbe>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a5d      	ldr	r2, [pc, #372]	; (80026c8 <HAL_GPIO_DeInit+0x204>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d013      	beq.n	800257e <HAL_GPIO_DeInit+0xba>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a5c      	ldr	r2, [pc, #368]	; (80026cc <HAL_GPIO_DeInit+0x208>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d00d      	beq.n	800257a <HAL_GPIO_DeInit+0xb6>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a5b      	ldr	r2, [pc, #364]	; (80026d0 <HAL_GPIO_DeInit+0x20c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d007      	beq.n	8002576 <HAL_GPIO_DeInit+0xb2>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a5a      	ldr	r2, [pc, #360]	; (80026d4 <HAL_GPIO_DeInit+0x210>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d101      	bne.n	8002572 <HAL_GPIO_DeInit+0xae>
 800256e:	2309      	movs	r3, #9
 8002570:	e012      	b.n	8002598 <HAL_GPIO_DeInit+0xd4>
 8002572:	230a      	movs	r3, #10
 8002574:	e010      	b.n	8002598 <HAL_GPIO_DeInit+0xd4>
 8002576:	2308      	movs	r3, #8
 8002578:	e00e      	b.n	8002598 <HAL_GPIO_DeInit+0xd4>
 800257a:	2307      	movs	r3, #7
 800257c:	e00c      	b.n	8002598 <HAL_GPIO_DeInit+0xd4>
 800257e:	2306      	movs	r3, #6
 8002580:	e00a      	b.n	8002598 <HAL_GPIO_DeInit+0xd4>
 8002582:	2305      	movs	r3, #5
 8002584:	e008      	b.n	8002598 <HAL_GPIO_DeInit+0xd4>
 8002586:	2304      	movs	r3, #4
 8002588:	e006      	b.n	8002598 <HAL_GPIO_DeInit+0xd4>
 800258a:	2303      	movs	r3, #3
 800258c:	e004      	b.n	8002598 <HAL_GPIO_DeInit+0xd4>
 800258e:	2302      	movs	r3, #2
 8002590:	e002      	b.n	8002598 <HAL_GPIO_DeInit+0xd4>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_GPIO_DeInit+0xd4>
 8002596:	2300      	movs	r3, #0
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	f002 0203 	and.w	r2, r2, #3
 800259e:	0092      	lsls	r2, r2, #2
 80025a0:	4093      	lsls	r3, r2
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d132      	bne.n	800260e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80025a8:	4b4b      	ldr	r3, [pc, #300]	; (80026d8 <HAL_GPIO_DeInit+0x214>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	4949      	ldr	r1, [pc, #292]	; (80026d8 <HAL_GPIO_DeInit+0x214>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80025b6:	4b48      	ldr	r3, [pc, #288]	; (80026d8 <HAL_GPIO_DeInit+0x214>)
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	43db      	mvns	r3, r3
 80025be:	4946      	ldr	r1, [pc, #280]	; (80026d8 <HAL_GPIO_DeInit+0x214>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80025c4:	4b44      	ldr	r3, [pc, #272]	; (80026d8 <HAL_GPIO_DeInit+0x214>)
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	4942      	ldr	r1, [pc, #264]	; (80026d8 <HAL_GPIO_DeInit+0x214>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80025d2:	4b41      	ldr	r3, [pc, #260]	; (80026d8 <HAL_GPIO_DeInit+0x214>)
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	43db      	mvns	r3, r3
 80025da:	493f      	ldr	r1, [pc, #252]	; (80026d8 <HAL_GPIO_DeInit+0x214>)
 80025dc:	4013      	ands	r3, r2
 80025de:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	220f      	movs	r2, #15
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80025f0:	4a2e      	ldr	r2, [pc, #184]	; (80026ac <HAL_GPIO_DeInit+0x1e8>)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	089b      	lsrs	r3, r3, #2
 80025f6:	3302      	adds	r3, #2
 80025f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	43da      	mvns	r2, r3
 8002600:	482a      	ldr	r0, [pc, #168]	; (80026ac <HAL_GPIO_DeInit+0x1e8>)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	089b      	lsrs	r3, r3, #2
 8002606:	400a      	ands	r2, r1
 8002608:	3302      	adds	r3, #2
 800260a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2103      	movs	r1, #3
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	401a      	ands	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	08da      	lsrs	r2, r3, #3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3208      	adds	r2, #8
 800262c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	220f      	movs	r2, #15
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	08d2      	lsrs	r2, r2, #3
 8002644:	4019      	ands	r1, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3208      	adds	r2, #8
 800264a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2103      	movs	r1, #3
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	401a      	ands	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	2101      	movs	r1, #1
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	fa01 f303 	lsl.w	r3, r1, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	401a      	ands	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	2103      	movs	r1, #3
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	401a      	ands	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	3301      	adds	r3, #1
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b0f      	cmp	r3, #15
 8002698:	f67f af22 	bls.w	80024e0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40013800 	.word	0x40013800
 80026b0:	40020000 	.word	0x40020000
 80026b4:	40020400 	.word	0x40020400
 80026b8:	40020800 	.word	0x40020800
 80026bc:	40020c00 	.word	0x40020c00
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40021400 	.word	0x40021400
 80026c8:	40021800 	.word	0x40021800
 80026cc:	40021c00 	.word	0x40021c00
 80026d0:	40022000 	.word	0x40022000
 80026d4:	40022400 	.word	0x40022400
 80026d8:	40013c00 	.word	0x40013c00

080026dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	887b      	ldrh	r3, [r7, #2]
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
 80026f8:	e001      	b.n	80026fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	807b      	strh	r3, [r7, #2]
 8002718:	4613      	mov	r3, r2
 800271a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800271c:	787b      	ldrb	r3, [r7, #1]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002728:	e003      	b.n	8002732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800272a:	887b      	ldrh	r3, [r7, #2]
 800272c:	041a      	lsls	r2, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	619a      	str	r2, [r3, #24]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	460b      	mov	r3, r1
 8002748:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002750:	887a      	ldrh	r2, [r7, #2]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4013      	ands	r3, r2
 8002756:	041a      	lsls	r2, r3, #16
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	43d9      	mvns	r1, r3
 800275c:	887b      	ldrh	r3, [r7, #2]
 800275e:	400b      	ands	r3, r1
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	619a      	str	r2, [r3, #24]
}
 8002766:	bf00      	nop
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	88fb      	ldrh	r3, [r7, #6]
 8002784:	4013      	ands	r3, r2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d006      	beq.n	8002798 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800278a:	4a05      	ldr	r2, [pc, #20]	; (80027a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe f93e 	bl	8000a14 <HAL_GPIO_EXTI_Callback>
  }
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40013c00 	.word	0x40013c00

080027a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027a6:	b08f      	sub	sp, #60	; 0x3c
 80027a8:	af0a      	add	r7, sp, #40	; 0x28
 80027aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e116      	b.n	80029e4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d106      	bne.n	80027d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7fe fe2b 	bl	800142c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2203      	movs	r2, #3
 80027da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d102      	bne.n	80027f0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f003 fde5 	bl	80063c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	687e      	ldr	r6, [r7, #4]
 8002802:	466d      	mov	r5, sp
 8002804:	f106 0410 	add.w	r4, r6, #16
 8002808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800280a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800280c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800280e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002810:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002814:	e885 0003 	stmia.w	r5, {r0, r1}
 8002818:	1d33      	adds	r3, r6, #4
 800281a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800281c:	6838      	ldr	r0, [r7, #0]
 800281e:	f003 fd79 	bl	8006314 <USB_CoreInit>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e0d7      	b.n	80029e4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2100      	movs	r1, #0
 800283a:	4618      	mov	r0, r3
 800283c:	f003 fdd3 	bl	80063e6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002840:	2300      	movs	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]
 8002844:	e04a      	b.n	80028dc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002846:	7bfa      	ldrb	r2, [r7, #15]
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	1a9b      	subs	r3, r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	333d      	adds	r3, #61	; 0x3d
 8002856:	2201      	movs	r2, #1
 8002858:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800285a:	7bfa      	ldrb	r2, [r7, #15]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	333c      	adds	r3, #60	; 0x3c
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800286e:	7bfa      	ldrb	r2, [r7, #15]
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	b298      	uxth	r0, r3
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	3342      	adds	r3, #66	; 0x42
 8002882:	4602      	mov	r2, r0
 8002884:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002886:	7bfa      	ldrb	r2, [r7, #15]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	333f      	adds	r3, #63	; 0x3f
 8002896:	2200      	movs	r2, #0
 8002898:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800289a:	7bfa      	ldrb	r2, [r7, #15]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	3344      	adds	r3, #68	; 0x44
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028ae:	7bfa      	ldrb	r2, [r7, #15]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	3348      	adds	r3, #72	; 0x48
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028c2:	7bfa      	ldrb	r2, [r7, #15]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	440b      	add	r3, r1
 80028d0:	3350      	adds	r3, #80	; 0x50
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	3301      	adds	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
 80028dc:	7bfa      	ldrb	r2, [r7, #15]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d3af      	bcc.n	8002846 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]
 80028ea:	e044      	b.n	8002976 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002902:	7bfa      	ldrb	r2, [r7, #15]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	1a9b      	subs	r3, r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002918:	7bfa      	ldrb	r2, [r7, #15]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800295a:	7bfa      	ldrb	r2, [r7, #15]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	3301      	adds	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
 8002976:	7bfa      	ldrb	r2, [r7, #15]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	429a      	cmp	r2, r3
 800297e:	d3b5      	bcc.n	80028ec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	687e      	ldr	r6, [r7, #4]
 8002988:	466d      	mov	r5, sp
 800298a:	f106 0410 	add.w	r4, r6, #16
 800298e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002996:	e894 0003 	ldmia.w	r4, {r0, r1}
 800299a:	e885 0003 	stmia.w	r5, {r0, r1}
 800299e:	1d33      	adds	r3, r6, #4
 80029a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029a2:	6838      	ldr	r0, [r7, #0]
 80029a4:	f003 fd6c 	bl	8006480 <USB_DevInit>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2202      	movs	r2, #2
 80029b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e014      	b.n	80029e4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d102      	bne.n	80029d8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f80a 	bl	80029ec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f003 ff26 	bl	800682e <USB_DevDisconnect>

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a1a:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <HAL_PCDEx_ActivateLPM+0x44>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	10000003 	.word	0x10000003

08002a34 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a42:	6013      	str	r3, [r2, #0]
}
 8002a44:	bf00      	nop
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40007000 	.word	0x40007000

08002a54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a5e:	4b23      	ldr	r3, [pc, #140]	; (8002aec <HAL_PWREx_EnableOverDrive+0x98>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	4a22      	ldr	r2, [pc, #136]	; (8002aec <HAL_PWREx_EnableOverDrive+0x98>)
 8002a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a68:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <HAL_PWREx_EnableOverDrive+0x98>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a76:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1d      	ldr	r2, [pc, #116]	; (8002af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a80:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a82:	f7fe fe25 	bl	80016d0 <HAL_GetTick>
 8002a86:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a88:	e009      	b.n	8002a9e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a8a:	f7fe fe21 	bl	80016d0 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a98:	d901      	bls.n	8002a9e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e022      	b.n	8002ae4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a9e:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aaa:	d1ee      	bne.n	8002a8a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002aac:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a0f      	ldr	r2, [pc, #60]	; (8002af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ab8:	f7fe fe0a 	bl	80016d0 <HAL_GetTick>
 8002abc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002abe:	e009      	b.n	8002ad4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ac0:	f7fe fe06 	bl	80016d0 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ace:	d901      	bls.n	8002ad4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e007      	b.n	8002ae4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002adc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ae0:	d1ee      	bne.n	8002ac0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40007000 	.word	0x40007000

08002af4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002afc:	2300      	movs	r3, #0
 8002afe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e29b      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 8087 	beq.w	8002c26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b18:	4b96      	ldr	r3, [pc, #600]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 030c 	and.w	r3, r3, #12
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d00c      	beq.n	8002b3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b24:	4b93      	ldr	r3, [pc, #588]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d112      	bne.n	8002b56 <HAL_RCC_OscConfig+0x62>
 8002b30:	4b90      	ldr	r3, [pc, #576]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b3c:	d10b      	bne.n	8002b56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3e:	4b8d      	ldr	r3, [pc, #564]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d06c      	beq.n	8002c24 <HAL_RCC_OscConfig+0x130>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d168      	bne.n	8002c24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e275      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_OscConfig+0x7a>
 8002b60:	4b84      	ldr	r3, [pc, #528]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a83      	ldr	r2, [pc, #524]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	e02e      	b.n	8002bcc <HAL_RCC_OscConfig+0xd8>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x9c>
 8002b76:	4b7f      	ldr	r3, [pc, #508]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a7e      	ldr	r2, [pc, #504]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	4b7c      	ldr	r3, [pc, #496]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a7b      	ldr	r2, [pc, #492]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	e01d      	b.n	8002bcc <HAL_RCC_OscConfig+0xd8>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0xc0>
 8002b9a:	4b76      	ldr	r3, [pc, #472]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a75      	ldr	r2, [pc, #468]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	4b73      	ldr	r3, [pc, #460]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a72      	ldr	r2, [pc, #456]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	e00b      	b.n	8002bcc <HAL_RCC_OscConfig+0xd8>
 8002bb4:	4b6f      	ldr	r3, [pc, #444]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a6e      	ldr	r2, [pc, #440]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	4b6c      	ldr	r3, [pc, #432]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a6b      	ldr	r2, [pc, #428]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d013      	beq.n	8002bfc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7fe fd7c 	bl	80016d0 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bdc:	f7fe fd78 	bl	80016d0 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	; 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e229      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	4b61      	ldr	r3, [pc, #388]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCC_OscConfig+0xe8>
 8002bfa:	e014      	b.n	8002c26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fd68 	bl	80016d0 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c04:	f7fe fd64 	bl	80016d0 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	; 0x64
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e215      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c16:	4b57      	ldr	r3, [pc, #348]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x110>
 8002c22:	e000      	b.n	8002c26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d069      	beq.n	8002d06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c32:	4b50      	ldr	r3, [pc, #320]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00b      	beq.n	8002c56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c3e:	4b4d      	ldr	r3, [pc, #308]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d11c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x190>
 8002c4a:	4b4a      	ldr	r3, [pc, #296]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d116      	bne.n	8002c84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c56:	4b47      	ldr	r3, [pc, #284]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d005      	beq.n	8002c6e <HAL_RCC_OscConfig+0x17a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d001      	beq.n	8002c6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e1e9      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6e:	4b41      	ldr	r3, [pc, #260]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	493d      	ldr	r1, [pc, #244]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c82:	e040      	b.n	8002d06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d023      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c8c:	4b39      	ldr	r3, [pc, #228]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a38      	ldr	r2, [pc, #224]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fe fd1a 	bl	80016d0 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca0:	f7fe fd16 	bl	80016d0 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e1c7      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb2:	4b30      	ldr	r3, [pc, #192]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbe:	4b2d      	ldr	r3, [pc, #180]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4929      	ldr	r1, [pc, #164]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]
 8002cd2:	e018      	b.n	8002d06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd4:	4b27      	ldr	r3, [pc, #156]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a26      	ldr	r2, [pc, #152]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002cda:	f023 0301 	bic.w	r3, r3, #1
 8002cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fcf6 	bl	80016d0 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce8:	f7fe fcf2 	bl	80016d0 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e1a3      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfa:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d038      	beq.n	8002d84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d019      	beq.n	8002d4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d1a:	4b16      	ldr	r3, [pc, #88]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d1e:	4a15      	ldr	r2, [pc, #84]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d26:	f7fe fcd3 	bl	80016d0 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d2e:	f7fe fccf 	bl	80016d0 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e180      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x23a>
 8002d4c:	e01a      	b.n	8002d84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d4e:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d52:	4a08      	ldr	r2, [pc, #32]	; (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5a:	f7fe fcb9 	bl	80016d0 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d60:	e00a      	b.n	8002d78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d62:	f7fe fcb5 	bl	80016d0 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d903      	bls.n	8002d78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e166      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
 8002d74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d78:	4b92      	ldr	r3, [pc, #584]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1ee      	bne.n	8002d62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80a4 	beq.w	8002eda <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d92:	4b8c      	ldr	r3, [pc, #560]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10d      	bne.n	8002dba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9e:	4b89      	ldr	r3, [pc, #548]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	4a88      	ldr	r2, [pc, #544]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da8:	6413      	str	r3, [r2, #64]	; 0x40
 8002daa:	4b86      	ldr	r3, [pc, #536]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db6:	2301      	movs	r3, #1
 8002db8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dba:	4b83      	ldr	r3, [pc, #524]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d118      	bne.n	8002df8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002dc6:	4b80      	ldr	r3, [pc, #512]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a7f      	ldr	r2, [pc, #508]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd2:	f7fe fc7d 	bl	80016d0 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dda:	f7fe fc79 	bl	80016d0 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b64      	cmp	r3, #100	; 0x64
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e12a      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dec:	4b76      	ldr	r3, [pc, #472]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d106      	bne.n	8002e0e <HAL_RCC_OscConfig+0x31a>
 8002e00:	4b70      	ldr	r3, [pc, #448]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e04:	4a6f      	ldr	r2, [pc, #444]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e0c:	e02d      	b.n	8002e6a <HAL_RCC_OscConfig+0x376>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10c      	bne.n	8002e30 <HAL_RCC_OscConfig+0x33c>
 8002e16:	4b6b      	ldr	r3, [pc, #428]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	4a6a      	ldr	r2, [pc, #424]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	6713      	str	r3, [r2, #112]	; 0x70
 8002e22:	4b68      	ldr	r3, [pc, #416]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	4a67      	ldr	r2, [pc, #412]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e28:	f023 0304 	bic.w	r3, r3, #4
 8002e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2e:	e01c      	b.n	8002e6a <HAL_RCC_OscConfig+0x376>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b05      	cmp	r3, #5
 8002e36:	d10c      	bne.n	8002e52 <HAL_RCC_OscConfig+0x35e>
 8002e38:	4b62      	ldr	r3, [pc, #392]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	4a61      	ldr	r2, [pc, #388]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e3e:	f043 0304 	orr.w	r3, r3, #4
 8002e42:	6713      	str	r3, [r2, #112]	; 0x70
 8002e44:	4b5f      	ldr	r3, [pc, #380]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e48:	4a5e      	ldr	r2, [pc, #376]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e50:	e00b      	b.n	8002e6a <HAL_RCC_OscConfig+0x376>
 8002e52:	4b5c      	ldr	r3, [pc, #368]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e56:	4a5b      	ldr	r2, [pc, #364]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5e:	4b59      	ldr	r3, [pc, #356]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e62:	4a58      	ldr	r2, [pc, #352]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e64:	f023 0304 	bic.w	r3, r3, #4
 8002e68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d015      	beq.n	8002e9e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e72:	f7fe fc2d 	bl	80016d0 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e78:	e00a      	b.n	8002e90 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7a:	f7fe fc29 	bl	80016d0 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e0d8      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e90:	4b4c      	ldr	r3, [pc, #304]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0ee      	beq.n	8002e7a <HAL_RCC_OscConfig+0x386>
 8002e9c:	e014      	b.n	8002ec8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9e:	f7fe fc17 	bl	80016d0 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea4:	e00a      	b.n	8002ebc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea6:	f7fe fc13 	bl	80016d0 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e0c2      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ebc:	4b41      	ldr	r3, [pc, #260]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1ee      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d105      	bne.n	8002eda <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ece:	4b3d      	ldr	r3, [pc, #244]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	4a3c      	ldr	r2, [pc, #240]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 80ae 	beq.w	8003040 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ee4:	4b37      	ldr	r3, [pc, #220]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d06d      	beq.n	8002fcc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d14b      	bne.n	8002f90 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef8:	4b32      	ldr	r3, [pc, #200]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a31      	ldr	r2, [pc, #196]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f04:	f7fe fbe4 	bl	80016d0 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7fe fbe0 	bl	80016d0 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e091      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1e:	4b29      	ldr	r3, [pc, #164]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69da      	ldr	r2, [r3, #28]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	019b      	lsls	r3, r3, #6
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	085b      	lsrs	r3, r3, #1
 8002f42:	3b01      	subs	r3, #1
 8002f44:	041b      	lsls	r3, r3, #16
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	061b      	lsls	r3, r3, #24
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	071b      	lsls	r3, r3, #28
 8002f56:	491b      	ldr	r1, [pc, #108]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f5c:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fe fbb2 	bl	80016d0 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f70:	f7fe fbae 	bl	80016d0 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e05f      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f82:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x47c>
 8002f8e:	e057      	b.n	8003040 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f90:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0b      	ldr	r2, [pc, #44]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fb98 	bl	80016d0 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa4:	f7fe fb94 	bl	80016d0 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e045      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb6:	4b03      	ldr	r3, [pc, #12]	; (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x4b0>
 8002fc2:	e03d      	b.n	8003040 <HAL_RCC_OscConfig+0x54c>
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002fcc:	4b1f      	ldr	r3, [pc, #124]	; (800304c <HAL_RCC_OscConfig+0x558>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d030      	beq.n	800303c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d129      	bne.n	800303c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d122      	bne.n	800303c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003002:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003004:	4293      	cmp	r3, r2
 8003006:	d119      	bne.n	800303c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	085b      	lsrs	r3, r3, #1
 8003014:	3b01      	subs	r3, #1
 8003016:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d10f      	bne.n	800303c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d107      	bne.n	800303c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40023800 	.word	0x40023800

08003050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0d0      	b.n	800320a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003068:	4b6a      	ldr	r3, [pc, #424]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d910      	bls.n	8003098 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b67      	ldr	r3, [pc, #412]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 020f 	bic.w	r2, r3, #15
 800307e:	4965      	ldr	r1, [pc, #404]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b63      	ldr	r3, [pc, #396]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0b8      	b.n	800320a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d020      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b0:	4b59      	ldr	r3, [pc, #356]	; (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	4a58      	ldr	r2, [pc, #352]	; (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80030b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c8:	4b53      	ldr	r3, [pc, #332]	; (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	4a52      	ldr	r2, [pc, #328]	; (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80030ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d4:	4b50      	ldr	r3, [pc, #320]	; (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	494d      	ldr	r1, [pc, #308]	; (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d040      	beq.n	8003174 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d107      	bne.n	800310a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	4b47      	ldr	r3, [pc, #284]	; (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d115      	bne.n	8003132 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e07f      	b.n	800320a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003112:	4b41      	ldr	r3, [pc, #260]	; (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e073      	b.n	800320a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003122:	4b3d      	ldr	r3, [pc, #244]	; (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e06b      	b.n	800320a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003132:	4b39      	ldr	r3, [pc, #228]	; (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f023 0203 	bic.w	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4936      	ldr	r1, [pc, #216]	; (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 8003140:	4313      	orrs	r3, r2
 8003142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003144:	f7fe fac4 	bl	80016d0 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	e00a      	b.n	8003162 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314c:	f7fe fac0 	bl	80016d0 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e053      	b.n	800320a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 020c 	and.w	r2, r3, #12
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	429a      	cmp	r2, r3
 8003172:	d1eb      	bne.n	800314c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003174:	4b27      	ldr	r3, [pc, #156]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d210      	bcs.n	80031a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b24      	ldr	r3, [pc, #144]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 020f 	bic.w	r2, r3, #15
 800318a:	4922      	ldr	r1, [pc, #136]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	4313      	orrs	r3, r2
 8003190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003192:	4b20      	ldr	r3, [pc, #128]	; (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e032      	b.n	800320a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b0:	4b19      	ldr	r3, [pc, #100]	; (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4916      	ldr	r1, [pc, #88]	; (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d009      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ce:	4b12      	ldr	r3, [pc, #72]	; (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	490e      	ldr	r1, [pc, #56]	; (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031e2:	f000 f821 	bl	8003228 <HAL_RCC_GetSysClockFreq>
 80031e6:	4602      	mov	r2, r0
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	490a      	ldr	r1, [pc, #40]	; (800321c <HAL_RCC_ClockConfig+0x1cc>)
 80031f4:	5ccb      	ldrb	r3, [r1, r3]
 80031f6:	fa22 f303 	lsr.w	r3, r2, r3
 80031fa:	4a09      	ldr	r2, [pc, #36]	; (8003220 <HAL_RCC_ClockConfig+0x1d0>)
 80031fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <HAL_RCC_ClockConfig+0x1d4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fe fa20 	bl	8001648 <HAL_InitTick>

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40023c00 	.word	0x40023c00
 8003218:	40023800 	.word	0x40023800
 800321c:	08006998 	.word	0x08006998
 8003220:	20000400 	.word	0x20000400
 8003224:	20000404 	.word	0x20000404

08003228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003228:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800322c:	b084      	sub	sp, #16
 800322e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	607b      	str	r3, [r7, #4]
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	2300      	movs	r3, #0
 800323a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003240:	4b67      	ldr	r3, [pc, #412]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 030c 	and.w	r3, r3, #12
 8003248:	2b08      	cmp	r3, #8
 800324a:	d00d      	beq.n	8003268 <HAL_RCC_GetSysClockFreq+0x40>
 800324c:	2b08      	cmp	r3, #8
 800324e:	f200 80bd 	bhi.w	80033cc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_RCC_GetSysClockFreq+0x34>
 8003256:	2b04      	cmp	r3, #4
 8003258:	d003      	beq.n	8003262 <HAL_RCC_GetSysClockFreq+0x3a>
 800325a:	e0b7      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800325c:	4b61      	ldr	r3, [pc, #388]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800325e:	60bb      	str	r3, [r7, #8]
      break;
 8003260:	e0b7      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003262:	4b61      	ldr	r3, [pc, #388]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003264:	60bb      	str	r3, [r7, #8]
      break;
 8003266:	e0b4      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003268:	4b5d      	ldr	r3, [pc, #372]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003270:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003272:	4b5b      	ldr	r3, [pc, #364]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d04d      	beq.n	800331a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800327e:	4b58      	ldr	r3, [pc, #352]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	099b      	lsrs	r3, r3, #6
 8003284:	461a      	mov	r2, r3
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800328e:	f04f 0100 	mov.w	r1, #0
 8003292:	ea02 0800 	and.w	r8, r2, r0
 8003296:	ea03 0901 	and.w	r9, r3, r1
 800329a:	4640      	mov	r0, r8
 800329c:	4649      	mov	r1, r9
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	014b      	lsls	r3, r1, #5
 80032a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032ac:	0142      	lsls	r2, r0, #5
 80032ae:	4610      	mov	r0, r2
 80032b0:	4619      	mov	r1, r3
 80032b2:	ebb0 0008 	subs.w	r0, r0, r8
 80032b6:	eb61 0109 	sbc.w	r1, r1, r9
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	018b      	lsls	r3, r1, #6
 80032c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032c8:	0182      	lsls	r2, r0, #6
 80032ca:	1a12      	subs	r2, r2, r0
 80032cc:	eb63 0301 	sbc.w	r3, r3, r1
 80032d0:	f04f 0000 	mov.w	r0, #0
 80032d4:	f04f 0100 	mov.w	r1, #0
 80032d8:	00d9      	lsls	r1, r3, #3
 80032da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032de:	00d0      	lsls	r0, r2, #3
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	eb12 0208 	adds.w	r2, r2, r8
 80032e8:	eb43 0309 	adc.w	r3, r3, r9
 80032ec:	f04f 0000 	mov.w	r0, #0
 80032f0:	f04f 0100 	mov.w	r1, #0
 80032f4:	0259      	lsls	r1, r3, #9
 80032f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80032fa:	0250      	lsls	r0, r2, #9
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4610      	mov	r0, r2
 8003302:	4619      	mov	r1, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	461a      	mov	r2, r3
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	f7fc ff94 	bl	8000238 <__aeabi_uldivmod>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4613      	mov	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	e04a      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800331a:	4b31      	ldr	r3, [pc, #196]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	099b      	lsrs	r3, r3, #6
 8003320:	461a      	mov	r2, r3
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	f240 10ff 	movw	r0, #511	; 0x1ff
 800332a:	f04f 0100 	mov.w	r1, #0
 800332e:	ea02 0400 	and.w	r4, r2, r0
 8003332:	ea03 0501 	and.w	r5, r3, r1
 8003336:	4620      	mov	r0, r4
 8003338:	4629      	mov	r1, r5
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	014b      	lsls	r3, r1, #5
 8003344:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003348:	0142      	lsls	r2, r0, #5
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	1b00      	subs	r0, r0, r4
 8003350:	eb61 0105 	sbc.w	r1, r1, r5
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	018b      	lsls	r3, r1, #6
 800335e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003362:	0182      	lsls	r2, r0, #6
 8003364:	1a12      	subs	r2, r2, r0
 8003366:	eb63 0301 	sbc.w	r3, r3, r1
 800336a:	f04f 0000 	mov.w	r0, #0
 800336e:	f04f 0100 	mov.w	r1, #0
 8003372:	00d9      	lsls	r1, r3, #3
 8003374:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003378:	00d0      	lsls	r0, r2, #3
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	1912      	adds	r2, r2, r4
 8003380:	eb45 0303 	adc.w	r3, r5, r3
 8003384:	f04f 0000 	mov.w	r0, #0
 8003388:	f04f 0100 	mov.w	r1, #0
 800338c:	0299      	lsls	r1, r3, #10
 800338e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003392:	0290      	lsls	r0, r2, #10
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4610      	mov	r0, r2
 800339a:	4619      	mov	r1, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	461a      	mov	r2, r3
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	f7fc ff48 	bl	8000238 <__aeabi_uldivmod>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4613      	mov	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	3301      	adds	r3, #1
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c8:	60bb      	str	r3, [r7, #8]
      break;
 80033ca:	e002      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80033ce:	60bb      	str	r3, [r7, #8]
      break;
 80033d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033d2:	68bb      	ldr	r3, [r7, #8]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800
 80033e4:	00f42400 	.word	0x00f42400
 80033e8:	007a1200 	.word	0x007a1200

080033ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <HAL_RCC_GetHCLKFreq+0x14>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20000400 	.word	0x20000400

08003404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003408:	f7ff fff0 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	0a9b      	lsrs	r3, r3, #10
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	4903      	ldr	r1, [pc, #12]	; (8003428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40023800 	.word	0x40023800
 8003428:	080069a8 	.word	0x080069a8

0800342c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003430:	f7ff ffdc 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 8003434:	4602      	mov	r2, r0
 8003436:	4b05      	ldr	r3, [pc, #20]	; (800344c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	0b5b      	lsrs	r3, r3, #13
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	4903      	ldr	r1, [pc, #12]	; (8003450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003442:	5ccb      	ldrb	r3, [r1, r3]
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003448:	4618      	mov	r0, r3
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40023800 	.word	0x40023800
 8003450:	080069a8 	.word	0x080069a8

08003454 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d012      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800347c:	4b69      	ldr	r3, [pc, #420]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	4a68      	ldr	r2, [pc, #416]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003482:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003486:	6093      	str	r3, [r2, #8]
 8003488:	4b66      	ldr	r3, [pc, #408]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003490:	4964      	ldr	r1, [pc, #400]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003492:	4313      	orrs	r3, r2
 8003494:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800349e:	2301      	movs	r3, #1
 80034a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d017      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034ae:	4b5d      	ldr	r3, [pc, #372]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034bc:	4959      	ldr	r1, [pc, #356]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034cc:	d101      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80034ce:	2301      	movs	r3, #1
 80034d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80034da:	2301      	movs	r3, #1
 80034dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d017      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034ea:	4b4e      	ldr	r3, [pc, #312]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	494a      	ldr	r1, [pc, #296]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003508:	d101      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800350a:	2301      	movs	r3, #1
 800350c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003516:	2301      	movs	r3, #1
 8003518:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003526:	2301      	movs	r3, #1
 8003528:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 808b 	beq.w	800364e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003538:	4b3a      	ldr	r3, [pc, #232]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	4a39      	ldr	r2, [pc, #228]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003542:	6413      	str	r3, [r2, #64]	; 0x40
 8003544:	4b37      	ldr	r3, [pc, #220]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354c:	60bb      	str	r3, [r7, #8]
 800354e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003550:	4b35      	ldr	r3, [pc, #212]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a34      	ldr	r2, [pc, #208]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800355a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800355c:	f7fe f8b8 	bl	80016d0 <HAL_GetTick>
 8003560:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003564:	f7fe f8b4 	bl	80016d0 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	; 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e38f      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003576:	4b2c      	ldr	r3, [pc, #176]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003582:	4b28      	ldr	r3, [pc, #160]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d035      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	429a      	cmp	r2, r3
 800359e:	d02e      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035a0:	4b20      	ldr	r3, [pc, #128]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035aa:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	4a1d      	ldr	r2, [pc, #116]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035b6:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ba:	4a1a      	ldr	r2, [pc, #104]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80035c2:	4a18      	ldr	r2, [pc, #96]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035c8:	4b16      	ldr	r3, [pc, #88]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d114      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7fe f87c 	bl	80016d0 <HAL_GetTick>
 80035d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035da:	e00a      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035dc:	f7fe f878 	bl	80016d0 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e351      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f2:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0ee      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800360a:	d111      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003618:	4b04      	ldr	r3, [pc, #16]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800361a:	400b      	ands	r3, r1
 800361c:	4901      	ldr	r1, [pc, #4]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361e:	4313      	orrs	r3, r2
 8003620:	608b      	str	r3, [r1, #8]
 8003622:	e00b      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003624:	40023800 	.word	0x40023800
 8003628:	40007000 	.word	0x40007000
 800362c:	0ffffcff 	.word	0x0ffffcff
 8003630:	4bb3      	ldr	r3, [pc, #716]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4ab2      	ldr	r2, [pc, #712]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003636:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800363a:	6093      	str	r3, [r2, #8]
 800363c:	4bb0      	ldr	r3, [pc, #704]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800363e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003648:	49ad      	ldr	r1, [pc, #692]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800364a:	4313      	orrs	r3, r2
 800364c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	2b00      	cmp	r3, #0
 8003658:	d010      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800365a:	4ba9      	ldr	r3, [pc, #676]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800365c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003660:	4aa7      	ldr	r2, [pc, #668]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003666:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800366a:	4ba5      	ldr	r3, [pc, #660]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800366c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	49a2      	ldr	r1, [pc, #648]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003688:	4b9d      	ldr	r3, [pc, #628]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003696:	499a      	ldr	r1, [pc, #616]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036aa:	4b95      	ldr	r3, [pc, #596]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b8:	4991      	ldr	r1, [pc, #580]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036cc:	4b8c      	ldr	r3, [pc, #560]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036da:	4989      	ldr	r1, [pc, #548]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036ee:	4b84      	ldr	r3, [pc, #528]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fc:	4980      	ldr	r1, [pc, #512]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003710:	4b7b      	ldr	r3, [pc, #492]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003716:	f023 0203 	bic.w	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	4978      	ldr	r1, [pc, #480]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003732:	4b73      	ldr	r3, [pc, #460]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003738:	f023 020c 	bic.w	r2, r3, #12
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003740:	496f      	ldr	r1, [pc, #444]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003754:	4b6a      	ldr	r3, [pc, #424]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003762:	4967      	ldr	r1, [pc, #412]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003776:	4b62      	ldr	r3, [pc, #392]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003784:	495e      	ldr	r1, [pc, #376]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003798:	4b59      	ldr	r3, [pc, #356]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a6:	4956      	ldr	r1, [pc, #344]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80037ba:	4b51      	ldr	r3, [pc, #324]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	494d      	ldr	r1, [pc, #308]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80037dc:	4b48      	ldr	r3, [pc, #288]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ea:	4945      	ldr	r1, [pc, #276]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80037fe:	4b40      	ldr	r3, [pc, #256]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003804:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380c:	493c      	ldr	r1, [pc, #240]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003820:	4b37      	ldr	r3, [pc, #220]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003826:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800382e:	4934      	ldr	r1, [pc, #208]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d011      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003842:	4b2f      	ldr	r3, [pc, #188]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003848:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003850:	492b      	ldr	r1, [pc, #172]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800385c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003860:	d101      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003862:	2301      	movs	r3, #1
 8003864:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003872:	2301      	movs	r3, #1
 8003874:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003882:	4b1f      	ldr	r3, [pc, #124]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003888:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003890:	491b      	ldr	r1, [pc, #108]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00b      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038a4:	4b16      	ldr	r3, [pc, #88]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038b4:	4912      	ldr	r1, [pc, #72]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00b      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80038c8:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00f      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038ec:	4b04      	ldr	r3, [pc, #16]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fc:	e002      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800
 8003904:	4986      	ldr	r1, [pc, #536]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00b      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003918:	4b81      	ldr	r3, [pc, #516]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800391a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800391e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003928:	497d      	ldr	r1, [pc, #500]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d006      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 80d6 	beq.w	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003944:	4b76      	ldr	r3, [pc, #472]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a75      	ldr	r2, [pc, #468]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800394a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800394e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003950:	f7fd febe 	bl	80016d0 <HAL_GetTick>
 8003954:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003958:	f7fd feba 	bl	80016d0 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	; 0x64
 8003964:	d901      	bls.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e195      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800396a:	4b6d      	ldr	r3, [pc, #436]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d021      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003986:	2b00      	cmp	r3, #0
 8003988:	d11d      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800398a:	4b65      	ldr	r3, [pc, #404]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800398c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003990:	0c1b      	lsrs	r3, r3, #16
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003998:	4b61      	ldr	r3, [pc, #388]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800399a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800399e:	0e1b      	lsrs	r3, r3, #24
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	019a      	lsls	r2, r3, #6
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	041b      	lsls	r3, r3, #16
 80039b0:	431a      	orrs	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	061b      	lsls	r3, r3, #24
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	071b      	lsls	r3, r3, #28
 80039be:	4958      	ldr	r1, [pc, #352]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d004      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039da:	d00a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d02e      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039f0:	d129      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039f2:	4b4b      	ldr	r3, [pc, #300]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f8:	0c1b      	lsrs	r3, r3, #16
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a00:	4b47      	ldr	r3, [pc, #284]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a06:	0f1b      	lsrs	r3, r3, #28
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	019a      	lsls	r2, r3, #6
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	041b      	lsls	r3, r3, #16
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	061b      	lsls	r3, r3, #24
 8003a20:	431a      	orrs	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	071b      	lsls	r3, r3, #28
 8003a26:	493e      	ldr	r1, [pc, #248]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a2e:	4b3c      	ldr	r3, [pc, #240]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a34:	f023 021f 	bic.w	r2, r3, #31
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	4938      	ldr	r1, [pc, #224]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d01d      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a52:	4b33      	ldr	r3, [pc, #204]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a58:	0e1b      	lsrs	r3, r3, #24
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a60:	4b2f      	ldr	r3, [pc, #188]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a66:	0f1b      	lsrs	r3, r3, #28
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	019a      	lsls	r2, r3, #6
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	041b      	lsls	r3, r3, #16
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	061b      	lsls	r3, r3, #24
 8003a80:	431a      	orrs	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	071b      	lsls	r3, r3, #28
 8003a86:	4926      	ldr	r1, [pc, #152]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d011      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	019a      	lsls	r2, r3, #6
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	041b      	lsls	r3, r3, #16
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	061b      	lsls	r3, r3, #24
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	071b      	lsls	r3, r3, #28
 8003ab6:	491a      	ldr	r1, [pc, #104]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003abe:	4b18      	ldr	r3, [pc, #96]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a17      	ldr	r2, [pc, #92]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aca:	f7fd fe01 	bl	80016d0 <HAL_GetTick>
 8003ace:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ad2:	f7fd fdfd 	bl	80016d0 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b64      	cmp	r3, #100	; 0x64
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e0d8      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ae4:	4b0e      	ldr	r3, [pc, #56]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	f040 80ce 	bne.w	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003af8:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a08      	ldr	r2, [pc, #32]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b04:	f7fd fde4 	bl	80016d0 <HAL_GetTick>
 8003b08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b0a:	e00b      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b0c:	f7fd fde0 	bl	80016d0 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	; 0x64
 8003b18:	d904      	bls.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e0bb      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b1e:	bf00      	nop
 8003b20:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b24:	4b5e      	ldr	r3, [pc, #376]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b30:	d0ec      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d02e      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d12a      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b5a:	4b51      	ldr	r3, [pc, #324]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b60:	0c1b      	lsrs	r3, r3, #16
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b68:	4b4d      	ldr	r3, [pc, #308]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6e:	0f1b      	lsrs	r3, r3, #28
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	019a      	lsls	r2, r3, #6
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	041b      	lsls	r3, r3, #16
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	061b      	lsls	r3, r3, #24
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	071b      	lsls	r3, r3, #28
 8003b8e:	4944      	ldr	r1, [pc, #272]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b96:	4b42      	ldr	r3, [pc, #264]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	493d      	ldr	r1, [pc, #244]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d022      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bc4:	d11d      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bc6:	4b36      	ldr	r3, [pc, #216]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bcc:	0e1b      	lsrs	r3, r3, #24
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bd4:	4b32      	ldr	r3, [pc, #200]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bda:	0f1b      	lsrs	r3, r3, #28
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	019a      	lsls	r2, r3, #6
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	041b      	lsls	r3, r3, #16
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	061b      	lsls	r3, r3, #24
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	071b      	lsls	r3, r3, #28
 8003bfa:	4929      	ldr	r1, [pc, #164]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d028      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c0e:	4b24      	ldr	r3, [pc, #144]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c14:	0e1b      	lsrs	r3, r3, #24
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c1c:	4b20      	ldr	r3, [pc, #128]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	0c1b      	lsrs	r3, r3, #16
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	019a      	lsls	r2, r3, #6
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	041b      	lsls	r3, r3, #16
 8003c34:	431a      	orrs	r2, r3
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	061b      	lsls	r3, r3, #24
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	071b      	lsls	r3, r3, #28
 8003c42:	4917      	ldr	r1, [pc, #92]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c4a:	4b15      	ldr	r3, [pc, #84]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	4911      	ldr	r1, [pc, #68]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c60:	4b0f      	ldr	r3, [pc, #60]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a0e      	ldr	r2, [pc, #56]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c6c:	f7fd fd30 	bl	80016d0 <HAL_GetTick>
 8003c70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c74:	f7fd fd2c 	bl	80016d0 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	; 0x64
 8003c80:	d901      	bls.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e007      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c86:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c92:	d1ef      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3720      	adds	r7, #32
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800

08003ca4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e09d      	b.n	8003df2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d108      	bne.n	8003cd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cc6:	d009      	beq.n	8003cdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	61da      	str	r2, [r3, #28]
 8003cce:	e005      	b.n	8003cdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fd fa4a 	bl	8001190 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d1c:	d902      	bls.n	8003d24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	e002      	b.n	8003d2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d32:	d007      	beq.n	8003d44 <HAL_SPI_Init+0xa0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d3c:	d002      	beq.n	8003d44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d86:	ea42 0103 	orr.w	r1, r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	0c1b      	lsrs	r3, r3, #16
 8003da0:	f003 0204 	and.w	r2, r3, #4
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	f003 0310 	and.w	r3, r3, #16
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003dc0:	ea42 0103 	orr.w	r1, r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003de0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e01a      	b.n	8003e42 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e22:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7fd fa65 	bl	80012f4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	4613      	mov	r3, r2
 8003e58:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_SPI_Transmit_IT+0x20>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e072      	b.n	8003f52 <HAL_SPI_Transmit_IT+0x106>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_SPI_Transmit_IT+0x34>
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d102      	bne.n	8003e86 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e84:	e060      	b.n	8003f48 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d002      	beq.n	8003e98 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8003e92:	2302      	movs	r3, #2
 8003e94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e96:	e057      	b.n	8003f48 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2203      	movs	r2, #3
 8003e9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	88fa      	ldrh	r2, [r7, #6]
 8003eb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	88fa      	ldrh	r2, [r7, #6]
 8003eb6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003edc:	d903      	bls.n	8003ee6 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a1f      	ldr	r2, [pc, #124]	; (8003f60 <HAL_SPI_Transmit_IT+0x114>)
 8003ee2:	651a      	str	r2, [r3, #80]	; 0x50
 8003ee4:	e002      	b.n	8003eec <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4a1e      	ldr	r2, [pc, #120]	; (8003f64 <HAL_SPI_Transmit_IT+0x118>)
 8003eea:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef4:	d10f      	bne.n	8003f16 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8003f24:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f30:	2b40      	cmp	r3, #64	; 0x40
 8003f32:	d008      	beq.n	8003f46 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	e000      	b.n	8003f48 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8003f46:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	371c      	adds	r7, #28
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	0800475f 	.word	0x0800475f
 8003f64:	08004719 	.word	0x08004719

08003f68 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	4613      	mov	r3, r2
 8003f74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d110      	bne.n	8003fa4 <HAL_SPI_Receive_IT+0x3c>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f8a:	d10b      	bne.n	8003fa4 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2204      	movs	r2, #4
 8003f90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003f94:	88fb      	ldrh	r3, [r7, #6]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f894 	bl	80040c8 <HAL_SPI_TransmitReceive_IT>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	e089      	b.n	80040b8 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_SPI_Receive_IT+0x4a>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e082      	b.n	80040b8 <HAL_SPI_Receive_IT+0x150>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d002      	beq.n	8003fcc <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fca:	e070      	b.n	80040ae <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <HAL_SPI_Receive_IT+0x70>
 8003fd2:	88fb      	ldrh	r3, [r7, #6]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fdc:	e067      	b.n	80040ae <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2204      	movs	r2, #4
 8003fe2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	88fa      	ldrh	r2, [r7, #6]
 8003ff6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	88fa      	ldrh	r2, [r7, #6]
 8003ffe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004022:	d90b      	bls.n	800403c <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004032:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4a22      	ldr	r2, [pc, #136]	; (80040c0 <HAL_SPI_Receive_IT+0x158>)
 8004038:	64da      	str	r2, [r3, #76]	; 0x4c
 800403a:	e00a      	b.n	8004052 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800404a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4a1d      	ldr	r2, [pc, #116]	; (80040c4 <HAL_SPI_Receive_IT+0x15c>)
 8004050:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405a:	d10f      	bne.n	800407c <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800406a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800407a:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800408a:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004096:	2b40      	cmp	r3, #64	; 0x40
 8004098:	d008      	beq.n	80040ac <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	e000      	b.n	80040ae <HAL_SPI_Receive_IT+0x146>
  }

error :
 80040ac:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	080046cd 	.word	0x080046cd
 80040c4:	0800467d 	.word	0x0800467d

080040c8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_SPI_TransmitReceive_IT+0x20>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e091      	b.n	800420c <HAL_SPI_TransmitReceive_IT+0x144>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040f6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040fe:	7dbb      	ldrb	r3, [r7, #22]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d00d      	beq.n	8004120 <HAL_SPI_TransmitReceive_IT+0x58>
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800410a:	d106      	bne.n	800411a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d102      	bne.n	800411a <HAL_SPI_TransmitReceive_IT+0x52>
 8004114:	7dbb      	ldrb	r3, [r7, #22]
 8004116:	2b04      	cmp	r3, #4
 8004118:	d002      	beq.n	8004120 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800411a:	2302      	movs	r3, #2
 800411c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800411e:	e070      	b.n	8004202 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <HAL_SPI_TransmitReceive_IT+0x6a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <HAL_SPI_TransmitReceive_IT+0x6a>
 800412c:	887b      	ldrh	r3, [r7, #2]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d102      	bne.n	8004138 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004136:	e064      	b.n	8004202 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b04      	cmp	r3, #4
 8004142:	d003      	beq.n	800414c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2205      	movs	r2, #5
 8004148:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	887a      	ldrh	r2, [r7, #2]
 800415c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	887a      	ldrh	r2, [r7, #2]
 8004162:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	887a      	ldrh	r2, [r7, #2]
 800416e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	887a      	ldrh	r2, [r7, #2]
 8004176:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004182:	d906      	bls.n	8004192 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4a24      	ldr	r2, [pc, #144]	; (8004218 <HAL_SPI_TransmitReceive_IT+0x150>)
 8004188:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4a23      	ldr	r2, [pc, #140]	; (800421c <HAL_SPI_TransmitReceive_IT+0x154>)
 800418e:	651a      	str	r2, [r3, #80]	; 0x50
 8004190:	e005      	b.n	800419e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4a22      	ldr	r2, [pc, #136]	; (8004220 <HAL_SPI_TransmitReceive_IT+0x158>)
 8004196:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4a22      	ldr	r2, [pc, #136]	; (8004224 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800419c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041a6:	d802      	bhi.n	80041ae <HAL_SPI_TransmitReceive_IT+0xe6>
 80041a8:	887b      	ldrh	r3, [r7, #2]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d908      	bls.n	80041c0 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041bc:	605a      	str	r2, [r3, #4]
 80041be:	e007      	b.n	80041d0 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041ce:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80041de:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ea:	2b40      	cmp	r3, #64	; 0x40
 80041ec:	d008      	beq.n	8004200 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	e000      	b.n	8004202 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8004200:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800420a:	7dfb      	ldrb	r3, [r7, #23]
}
 800420c:	4618      	mov	r0, r3
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	080045b7 	.word	0x080045b7
 800421c:	0800461d 	.word	0x0800461d
 8004220:	08004467 	.word	0x08004467
 8004224:	08004525 	.word	0x08004525

08004228 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	099b      	lsrs	r3, r3, #6
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10f      	bne.n	800426c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	099b      	lsrs	r3, r3, #6
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d004      	beq.n	800426c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	4798      	blx	r3
    return;
 800426a:	e0d7      	b.n	800441c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	085b      	lsrs	r3, r3, #1
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <HAL_SPI_IRQHandler+0x66>
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	09db      	lsrs	r3, r3, #7
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d004      	beq.n	800428e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4798      	blx	r3
    return;
 800428c:	e0c6      	b.n	800441c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10c      	bne.n	80042b4 <HAL_SPI_IRQHandler+0x8c>
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	099b      	lsrs	r3, r3, #6
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 80b4 	beq.w	800441c <HAL_SPI_IRQHandler+0x1f4>
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80ad 	beq.w	800441c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	099b      	lsrs	r3, r3, #6
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d023      	beq.n	8004316 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d011      	beq.n	80042fe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042de:	f043 0204 	orr.w	r2, r3, #4
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	e00b      	b.n	8004316 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042fe:	2300      	movs	r3, #0
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	693b      	ldr	r3, [r7, #16]
        return;
 8004314:	e082      	b.n	800441c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d014      	beq.n	800434c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004326:	f043 0201 	orr.w	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	0a1b      	lsrs	r3, r3, #8
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00c      	beq.n	8004372 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800435c:	f043 0208 	orr.w	r2, r3, #8
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004364:	2300      	movs	r3, #0
 8004366:	60bb      	str	r3, [r7, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	60bb      	str	r3, [r7, #8]
 8004370:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004376:	2b00      	cmp	r3, #0
 8004378:	d04f      	beq.n	800441a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004388:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d104      	bne.n	80043a6 <HAL_SPI_IRQHandler+0x17e>
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d034      	beq.n	8004410 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0203 	bic.w	r2, r2, #3
 80043b4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d011      	beq.n	80043e2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c2:	4a18      	ldr	r2, [pc, #96]	; (8004424 <HAL_SPI_IRQHandler+0x1fc>)
 80043c4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fd fc70 	bl	8001cb0 <HAL_DMA_Abort_IT>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d016      	beq.n	8004418 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	4a0d      	ldr	r2, [pc, #52]	; (8004424 <HAL_SPI_IRQHandler+0x1fc>)
 80043f0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fd fc5a 	bl	8001cb0 <HAL_DMA_Abort_IT>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004406:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800440e:	e003      	b.n	8004418 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f809 	bl	8004428 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004416:	e000      	b.n	800441a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004418:	bf00      	nop
    return;
 800441a:	bf00      	nop
  }
}
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	0800443d 	.word	0x0800443d

08004428 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f7ff ffe5 	bl	8004428 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b082      	sub	sp, #8
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b01      	cmp	r3, #1
 8004478:	d923      	bls.n	80044c2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	b292      	uxth	r2, r2
 8004486:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	1c9a      	adds	r2, r3, #2
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b02      	subs	r3, #2
 800449c:	b29a      	uxth	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d11f      	bne.n	80044f0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044be:	605a      	str	r2, [r3, #4]
 80044c0:	e016      	b.n	80044f0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f103 020c 	add.w	r2, r3, #12
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	7812      	ldrb	r2, [r2, #0]
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10f      	bne.n	800451c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800450a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d102      	bne.n	800451c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fb48 	bl	8004bac <SPI_CloseRxTx_ISR>
    }
  }
}
 800451c:	bf00      	nop
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b01      	cmp	r3, #1
 8004534:	d912      	bls.n	800455c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	881a      	ldrh	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	1c9a      	adds	r2, r3, #2
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b02      	subs	r3, #2
 8004554:	b29a      	uxth	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	87da      	strh	r2, [r3, #62]	; 0x3e
 800455a:	e012      	b.n	8004582 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	330c      	adds	r3, #12
 8004566:	7812      	ldrb	r2, [r2, #0]
 8004568:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004578:	b29b      	uxth	r3, r3
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004586:	b29b      	uxth	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	d110      	bne.n	80045ae <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800459a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d102      	bne.n	80045ae <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 faff 	bl	8004bac <SPI_CloseRxTx_ISR>
    }
  }
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	b292      	uxth	r2, r2
 80045ca:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	1c9a      	adds	r2, r3, #2
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10f      	bne.n	8004614 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004602:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d102      	bne.n	8004614 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 facc 	bl	8004bac <SPI_CloseRxTx_ISR>
    }
  }
}
 8004614:	bf00      	nop
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	881a      	ldrh	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	1c9a      	adds	r2, r3, #2
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d110      	bne.n	8004674 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004660:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d102      	bne.n	8004674 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fa9c 	bl	8004bac <SPI_CloseRxTx_ISR>
    }
  }
}
 8004674:	bf00      	nop
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f103 020c 	add.w	r2, r3, #12
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	7812      	ldrb	r2, [r2, #0]
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d102      	bne.n	80046c4 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fab6 	bl	8004c30 <SPI_CloseRx_ISR>
  }
}
 80046c4:	bf00      	nop
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	b292      	uxth	r2, r2
 80046e0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	1c9a      	adds	r2, r3, #2
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d102      	bne.n	8004710 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fa90 	bl	8004c30 <SPI_CloseRx_ISR>
  }
}
 8004710:	bf00      	nop
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	7812      	ldrb	r2, [r2, #0]
 800472c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d102      	bne.n	8004756 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 fa9d 	bl	8004c90 <SPI_CloseTx_ISR>
  }
}
 8004756:	bf00      	nop
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	881a      	ldrh	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	1c9a      	adds	r2, r3, #2
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004780:	b29b      	uxth	r3, r3
 8004782:	3b01      	subs	r3, #1
 8004784:	b29a      	uxth	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d102      	bne.n	800479a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 fa7b 	bl	8004c90 <SPI_CloseTx_ISR>
  }
}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	603b      	str	r3, [r7, #0]
 80047b0:	4613      	mov	r3, r2
 80047b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047b4:	f7fc ff8c 	bl	80016d0 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	4413      	add	r3, r2
 80047c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047c4:	f7fc ff84 	bl	80016d0 <HAL_GetTick>
 80047c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047ca:	4b39      	ldr	r3, [pc, #228]	; (80048b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	015b      	lsls	r3, r3, #5
 80047d0:	0d1b      	lsrs	r3, r3, #20
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	fb02 f303 	mul.w	r3, r2, r3
 80047d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047da:	e054      	b.n	8004886 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e2:	d050      	beq.n	8004886 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047e4:	f7fc ff74 	bl	80016d0 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	69fa      	ldr	r2, [r7, #28]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d902      	bls.n	80047fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d13d      	bne.n	8004876 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004808:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004812:	d111      	bne.n	8004838 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800481c:	d004      	beq.n	8004828 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004826:	d107      	bne.n	8004838 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004836:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004840:	d10f      	bne.n	8004862 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004860:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e017      	b.n	80048a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	3b01      	subs	r3, #1
 8004884:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	4013      	ands	r3, r2
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	429a      	cmp	r2, r3
 8004894:	bf0c      	ite	eq
 8004896:	2301      	moveq	r3, #1
 8004898:	2300      	movne	r3, #0
 800489a:	b2db      	uxtb	r3, r3
 800489c:	461a      	mov	r2, r3
 800489e:	79fb      	ldrb	r3, [r7, #7]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d19b      	bne.n	80047dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3720      	adds	r7, #32
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000400 	.word	0x20000400

080048b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08a      	sub	sp, #40	; 0x28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80048c6:	f7fc ff03 	bl	80016d0 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	4413      	add	r3, r2
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80048d6:	f7fc fefb 	bl	80016d0 <HAL_GetTick>
 80048da:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	330c      	adds	r3, #12
 80048e2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80048e4:	4b3d      	ldr	r3, [pc, #244]	; (80049dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4613      	mov	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	00da      	lsls	r2, r3, #3
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	0d1b      	lsrs	r3, r3, #20
 80048f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f6:	fb02 f303 	mul.w	r3, r2, r3
 80048fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80048fc:	e060      	b.n	80049c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004904:	d107      	bne.n	8004916 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d104      	bne.n	8004916 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004914:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d050      	beq.n	80049c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800491e:	f7fc fed7 	bl	80016d0 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492a:	429a      	cmp	r2, r3
 800492c:	d902      	bls.n	8004934 <SPI_WaitFifoStateUntilTimeout+0x80>
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	2b00      	cmp	r3, #0
 8004932:	d13d      	bne.n	80049b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004942:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800494c:	d111      	bne.n	8004972 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004956:	d004      	beq.n	8004962 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004960:	d107      	bne.n	8004972 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004970:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800497a:	d10f      	bne.n	800499c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800499a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e010      	b.n	80049d2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	3b01      	subs	r3, #1
 80049be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	4013      	ands	r3, r2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d196      	bne.n	80048fe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3728      	adds	r7, #40	; 0x28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20000400 	.word	0x20000400

080049e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049f4:	d111      	bne.n	8004a1a <SPI_EndRxTransaction+0x3a>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049fe:	d004      	beq.n	8004a0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a08:	d107      	bne.n	8004a1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a18:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a22:	d112      	bne.n	8004a4a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2180      	movs	r1, #128	; 0x80
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7ff feb8 	bl	80047a4 <SPI_WaitFlagStateUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d021      	beq.n	8004a7e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a3e:	f043 0220 	orr.w	r2, r3, #32
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e03d      	b.n	8004ac6 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a4a:	4b21      	ldr	r3, [pc, #132]	; (8004ad0 <SPI_EndRxTransaction+0xf0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a21      	ldr	r2, [pc, #132]	; (8004ad4 <SPI_EndRxTransaction+0xf4>)
 8004a50:	fba2 2303 	umull	r2, r3, r2, r3
 8004a54:	0d5b      	lsrs	r3, r3, #21
 8004a56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a5a:	fb02 f303 	mul.w	r3, r2, r3
 8004a5e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a76:	2b80      	cmp	r3, #128	; 0x80
 8004a78:	d0f2      	beq.n	8004a60 <SPI_EndRxTransaction+0x80>
 8004a7a:	e000      	b.n	8004a7e <SPI_EndRxTransaction+0x9e>
        break;
 8004a7c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a86:	d11d      	bne.n	8004ac4 <SPI_EndRxTransaction+0xe4>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a90:	d004      	beq.n	8004a9c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a9a:	d113      	bne.n	8004ac4 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f7ff ff03 	bl	80048b4 <SPI_WaitFifoStateUntilTimeout>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab8:	f043 0220 	orr.w	r2, r3, #32
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e000      	b.n	8004ac6 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000400 	.word	0x20000400
 8004ad4:	165e9f81 	.word	0x165e9f81

08004ad8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f7ff fedf 	bl	80048b4 <SPI_WaitFifoStateUntilTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d007      	beq.n	8004b0c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b00:	f043 0220 	orr.w	r2, r3, #32
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e046      	b.n	8004b9a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b0c:	4b25      	ldr	r3, [pc, #148]	; (8004ba4 <SPI_EndRxTxTransaction+0xcc>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a25      	ldr	r2, [pc, #148]	; (8004ba8 <SPI_EndRxTxTransaction+0xd0>)
 8004b12:	fba2 2303 	umull	r2, r3, r2, r3
 8004b16:	0d5b      	lsrs	r3, r3, #21
 8004b18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b1c:	fb02 f303 	mul.w	r3, r2, r3
 8004b20:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b2a:	d112      	bne.n	8004b52 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2200      	movs	r2, #0
 8004b34:	2180      	movs	r1, #128	; 0x80
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f7ff fe34 	bl	80047a4 <SPI_WaitFlagStateUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d016      	beq.n	8004b70 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b46:	f043 0220 	orr.w	r2, r3, #32
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e023      	b.n	8004b9a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b68:	2b80      	cmp	r3, #128	; 0x80
 8004b6a:	d0f2      	beq.n	8004b52 <SPI_EndRxTxTransaction+0x7a>
 8004b6c:	e000      	b.n	8004b70 <SPI_EndRxTxTransaction+0x98>
        break;
 8004b6e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f7ff fe99 	bl	80048b4 <SPI_WaitFifoStateUntilTimeout>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b8c:	f043 0220 	orr.w	r2, r3, #32
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e000      	b.n	8004b9a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000400 	.word	0x20000400
 8004ba8:	165e9f81 	.word	0x165e9f81

08004bac <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bb4:	f7fc fd8c 	bl	80016d0 <HAL_GetTick>
 8004bb8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0220 	bic.w	r2, r2, #32
 8004bc8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	2164      	movs	r1, #100	; 0x64
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7ff ff82 	bl	8004ad8 <SPI_EndRxTxTransaction>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d005      	beq.n	8004be6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bde:	f043 0220 	orr.w	r2, r3, #32
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d115      	bne.n	8004c1a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d107      	bne.n	8004c0a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fb ffa4 	bl	8000b50 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004c08:	e00e      	b.n	8004c28 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fc f81c 	bl	8000c50 <HAL_SPI_TxRxCpltCallback>
}
 8004c18:	e006      	b.n	8004c28 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff fc00 	bl	8004428 <HAL_SPI_ErrorCallback>
}
 8004c28:	bf00      	nop
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c46:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004c48:	f7fc fd42 	bl	80016d0 <HAL_GetTick>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	461a      	mov	r2, r3
 8004c50:	2164      	movs	r1, #100	; 0x64
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff fec4 	bl	80049e0 <SPI_EndRxTransaction>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d005      	beq.n	8004c6a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c62:	f043 0220 	orr.w	r2, r3, #32
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d103      	bne.n	8004c82 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7fb ff68 	bl	8000b50 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004c80:	e002      	b.n	8004c88 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff fbd0 	bl	8004428 <HAL_SPI_ErrorCallback>
}
 8004c88:	bf00      	nop
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c98:	f7fc fd1a 	bl	80016d0 <HAL_GetTick>
 8004c9c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cac:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	2164      	movs	r1, #100	; 0x64
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7ff ff10 	bl	8004ad8 <SPI_EndRxTxTransaction>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d005      	beq.n	8004cca <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc2:	f043 0220 	orr.w	r2, r3, #32
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10a      	bne.n	8004ce8 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60bb      	str	r3, [r7, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	60bb      	str	r3, [r7, #8]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff fb95 	bl	8004428 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004cfe:	e002      	b.n	8004d06 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7fb fefb 	bl	8000afc <HAL_SPI_TxCpltCallback>
}
 8004d06:	bf00      	nop
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_SPIEx_FlushRxFifo>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b085      	sub	sp, #20
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	73fb      	strb	r3, [r7, #15]
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 8004d1a:	e00c      	b.n	8004d36 <HAL_SPIEx_FlushRxFifo+0x28>
  {
    count++;
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	73fb      	strb	r3, [r7, #15]
    tmpreg = hspi->Instance->DR;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	60bb      	str	r3, [r7, #8]
    UNUSED(tmpreg); /* To avoid GCC warning */
 8004d2a:	68bb      	ldr	r3, [r7, #8]
    if (count == SPI_FIFO_SIZE)
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d101      	bne.n	8004d36 <HAL_SPIEx_FlushRxFifo+0x28>
    {
      return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e007      	b.n	8004d46 <HAL_SPIEx_FlushRxFifo+0x38>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1eb      	bne.n	8004d1c <HAL_SPIEx_FlushRxFifo+0xe>
    }
  }
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b082      	sub	sp, #8
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e049      	b.n	8004df8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d106      	bne.n	8004d7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7fc fae5 	bl	8001348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2202      	movs	r2, #2
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4610      	mov	r0, r2
 8004d92:	f000 f9f5 	bl	8005180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d001      	beq.n	8004e18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e054      	b.n	8004ec2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0201 	orr.w	r2, r2, #1
 8004e2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a26      	ldr	r2, [pc, #152]	; (8004ed0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d022      	beq.n	8004e80 <HAL_TIM_Base_Start_IT+0x80>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e42:	d01d      	beq.n	8004e80 <HAL_TIM_Base_Start_IT+0x80>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a22      	ldr	r2, [pc, #136]	; (8004ed4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d018      	beq.n	8004e80 <HAL_TIM_Base_Start_IT+0x80>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a21      	ldr	r2, [pc, #132]	; (8004ed8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d013      	beq.n	8004e80 <HAL_TIM_Base_Start_IT+0x80>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a1f      	ldr	r2, [pc, #124]	; (8004edc <HAL_TIM_Base_Start_IT+0xdc>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00e      	beq.n	8004e80 <HAL_TIM_Base_Start_IT+0x80>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a1e      	ldr	r2, [pc, #120]	; (8004ee0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d009      	beq.n	8004e80 <HAL_TIM_Base_Start_IT+0x80>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a1c      	ldr	r2, [pc, #112]	; (8004ee4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d004      	beq.n	8004e80 <HAL_TIM_Base_Start_IT+0x80>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ee8 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d115      	bne.n	8004eac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	4b19      	ldr	r3, [pc, #100]	; (8004eec <HAL_TIM_Base_Start_IT+0xec>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b06      	cmp	r3, #6
 8004e90:	d015      	beq.n	8004ebe <HAL_TIM_Base_Start_IT+0xbe>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e98:	d011      	beq.n	8004ebe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f042 0201 	orr.w	r2, r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eaa:	e008      	b.n	8004ebe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	e000      	b.n	8004ec0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ebe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40010000 	.word	0x40010000
 8004ed4:	40000400 	.word	0x40000400
 8004ed8:	40000800 	.word	0x40000800
 8004edc:	40000c00 	.word	0x40000c00
 8004ee0:	40010400 	.word	0x40010400
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	40001800 	.word	0x40001800
 8004eec:	00010007 	.word	0x00010007

08004ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d122      	bne.n	8004f4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d11b      	bne.n	8004f4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f06f 0202 	mvn.w	r2, #2
 8004f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f905 	bl	8005142 <HAL_TIM_IC_CaptureCallback>
 8004f38:	e005      	b.n	8004f46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f8f7 	bl	800512e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f908 	bl	8005156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f003 0304 	and.w	r3, r3, #4
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d122      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d11b      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0204 	mvn.w	r2, #4
 8004f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2202      	movs	r2, #2
 8004f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f8db 	bl	8005142 <HAL_TIM_IC_CaptureCallback>
 8004f8c:	e005      	b.n	8004f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f8cd 	bl	800512e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f8de 	bl	8005156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d122      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d11b      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0208 	mvn.w	r2, #8
 8004fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2204      	movs	r2, #4
 8004fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f8b1 	bl	8005142 <HAL_TIM_IC_CaptureCallback>
 8004fe0:	e005      	b.n	8004fee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f8a3 	bl	800512e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f8b4 	bl	8005156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0310 	and.w	r3, r3, #16
 8004ffe:	2b10      	cmp	r3, #16
 8005000:	d122      	bne.n	8005048 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b10      	cmp	r3, #16
 800500e:	d11b      	bne.n	8005048 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0210 	mvn.w	r2, #16
 8005018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2208      	movs	r2, #8
 800501e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f887 	bl	8005142 <HAL_TIM_IC_CaptureCallback>
 8005034:	e005      	b.n	8005042 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f879 	bl	800512e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f88a 	bl	8005156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b01      	cmp	r3, #1
 8005054:	d10e      	bne.n	8005074 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b01      	cmp	r3, #1
 8005062:	d107      	bne.n	8005074 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0201 	mvn.w	r2, #1
 800506c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fb fd2e 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507e:	2b80      	cmp	r3, #128	; 0x80
 8005080:	d10e      	bne.n	80050a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508c:	2b80      	cmp	r3, #128	; 0x80
 800508e:	d107      	bne.n	80050a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f91a 	bl	80052d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ae:	d10e      	bne.n	80050ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ba:	2b80      	cmp	r3, #128	; 0x80
 80050bc:	d107      	bne.n	80050ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f90d 	bl	80052e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d8:	2b40      	cmp	r3, #64	; 0x40
 80050da:	d10e      	bne.n	80050fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e6:	2b40      	cmp	r3, #64	; 0x40
 80050e8:	d107      	bne.n	80050fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f838 	bl	800516a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	f003 0320 	and.w	r3, r3, #32
 8005104:	2b20      	cmp	r3, #32
 8005106:	d10e      	bne.n	8005126 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	2b20      	cmp	r3, #32
 8005114:	d107      	bne.n	8005126 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f06f 0220 	mvn.w	r2, #32
 800511e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f8cd 	bl	80052c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005126:	bf00      	nop
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
	...

08005180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a40      	ldr	r2, [pc, #256]	; (8005294 <TIM_Base_SetConfig+0x114>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d013      	beq.n	80051c0 <TIM_Base_SetConfig+0x40>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519e:	d00f      	beq.n	80051c0 <TIM_Base_SetConfig+0x40>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a3d      	ldr	r2, [pc, #244]	; (8005298 <TIM_Base_SetConfig+0x118>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d00b      	beq.n	80051c0 <TIM_Base_SetConfig+0x40>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a3c      	ldr	r2, [pc, #240]	; (800529c <TIM_Base_SetConfig+0x11c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d007      	beq.n	80051c0 <TIM_Base_SetConfig+0x40>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a3b      	ldr	r2, [pc, #236]	; (80052a0 <TIM_Base_SetConfig+0x120>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d003      	beq.n	80051c0 <TIM_Base_SetConfig+0x40>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a3a      	ldr	r2, [pc, #232]	; (80052a4 <TIM_Base_SetConfig+0x124>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d108      	bne.n	80051d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a2f      	ldr	r2, [pc, #188]	; (8005294 <TIM_Base_SetConfig+0x114>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d02b      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e0:	d027      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a2c      	ldr	r2, [pc, #176]	; (8005298 <TIM_Base_SetConfig+0x118>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d023      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a2b      	ldr	r2, [pc, #172]	; (800529c <TIM_Base_SetConfig+0x11c>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d01f      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a2a      	ldr	r2, [pc, #168]	; (80052a0 <TIM_Base_SetConfig+0x120>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d01b      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a29      	ldr	r2, [pc, #164]	; (80052a4 <TIM_Base_SetConfig+0x124>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d017      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a28      	ldr	r2, [pc, #160]	; (80052a8 <TIM_Base_SetConfig+0x128>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d013      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a27      	ldr	r2, [pc, #156]	; (80052ac <TIM_Base_SetConfig+0x12c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00f      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a26      	ldr	r2, [pc, #152]	; (80052b0 <TIM_Base_SetConfig+0x130>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00b      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a25      	ldr	r2, [pc, #148]	; (80052b4 <TIM_Base_SetConfig+0x134>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d007      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a24      	ldr	r2, [pc, #144]	; (80052b8 <TIM_Base_SetConfig+0x138>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d003      	beq.n	8005232 <TIM_Base_SetConfig+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a23      	ldr	r2, [pc, #140]	; (80052bc <TIM_Base_SetConfig+0x13c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d108      	bne.n	8005244 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a0a      	ldr	r2, [pc, #40]	; (8005294 <TIM_Base_SetConfig+0x114>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d003      	beq.n	8005278 <TIM_Base_SetConfig+0xf8>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a0c      	ldr	r2, [pc, #48]	; (80052a4 <TIM_Base_SetConfig+0x124>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d103      	bne.n	8005280 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	615a      	str	r2, [r3, #20]
}
 8005286:	bf00      	nop
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40010000 	.word	0x40010000
 8005298:	40000400 	.word	0x40000400
 800529c:	40000800 	.word	0x40000800
 80052a0:	40000c00 	.word	0x40000c00
 80052a4:	40010400 	.word	0x40010400
 80052a8:	40014000 	.word	0x40014000
 80052ac:	40014400 	.word	0x40014400
 80052b0:	40014800 	.word	0x40014800
 80052b4:	40001800 	.word	0x40001800
 80052b8:	40001c00 	.word	0x40001c00
 80052bc:	40002000 	.word	0x40002000

080052c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e040      	b.n	8005390 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005312:	2b00      	cmp	r3, #0
 8005314:	d106      	bne.n	8005324 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7fc f838 	bl	8001394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2224      	movs	r2, #36	; 0x24
 8005328:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0201 	bic.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fb36 	bl	80059ac <UART_SetConfig>
 8005340:	4603      	mov	r3, r0
 8005342:	2b01      	cmp	r3, #1
 8005344:	d101      	bne.n	800534a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e022      	b.n	8005390 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fd8c 	bl	8005e70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005366:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689a      	ldr	r2, [r3, #8]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005376:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0201 	orr.w	r2, r2, #1
 8005386:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fe13 	bl	8005fb4 <UART_CheckIdleState>
 800538e:	4603      	mov	r3, r0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b0ba      	sub	sp, #232	; 0xe8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80053be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80053c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80053c6:	4013      	ands	r3, r2
 80053c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80053cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d115      	bne.n	8005400 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80053d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00f      	beq.n	8005400 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d009      	beq.n	8005400 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 82a4 	beq.w	800593e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	4798      	blx	r3
      }
      return;
 80053fe:	e29e      	b.n	800593e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005400:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 8117 	beq.w	8005638 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800540a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005416:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800541a:	4b85      	ldr	r3, [pc, #532]	; (8005630 <HAL_UART_IRQHandler+0x298>)
 800541c:	4013      	ands	r3, r2
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 810a 	beq.w	8005638 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d011      	beq.n	8005454 <HAL_UART_IRQHandler+0xbc>
 8005430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00b      	beq.n	8005454 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2201      	movs	r2, #1
 8005442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800544a:	f043 0201 	orr.w	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d011      	beq.n	8005484 <HAL_UART_IRQHandler+0xec>
 8005460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00b      	beq.n	8005484 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2202      	movs	r2, #2
 8005472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800547a:	f043 0204 	orr.w	r2, r3, #4
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b00      	cmp	r3, #0
 800548e:	d011      	beq.n	80054b4 <HAL_UART_IRQHandler+0x11c>
 8005490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00b      	beq.n	80054b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2204      	movs	r2, #4
 80054a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054aa:	f043 0202 	orr.w	r2, r3, #2
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d017      	beq.n	80054f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d105      	bne.n	80054d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80054cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00b      	beq.n	80054f0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2208      	movs	r2, #8
 80054de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054e6:	f043 0208 	orr.w	r2, r3, #8
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d012      	beq.n	8005522 <HAL_UART_IRQHandler+0x18a>
 80054fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005500:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00c      	beq.n	8005522 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005510:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005518:	f043 0220 	orr.w	r2, r3, #32
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 820a 	beq.w	8005942 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800552e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00d      	beq.n	8005556 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800553a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b00      	cmp	r3, #0
 8005544:	d007      	beq.n	8005556 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800555c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556a:	2b40      	cmp	r3, #64	; 0x40
 800556c:	d005      	beq.n	800557a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800556e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005572:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005576:	2b00      	cmp	r3, #0
 8005578:	d04f      	beq.n	800561a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fe27 	bl	80061ce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558a:	2b40      	cmp	r3, #64	; 0x40
 800558c:	d141      	bne.n	8005612 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3308      	adds	r3, #8
 8005594:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800559c:	e853 3f00 	ldrex	r3, [r3]
 80055a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3308      	adds	r3, #8
 80055b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055ca:	e841 2300 	strex	r3, r2, [r1]
 80055ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80055d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1d9      	bne.n	800558e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d013      	beq.n	800560a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e6:	4a13      	ldr	r2, [pc, #76]	; (8005634 <HAL_UART_IRQHandler+0x29c>)
 80055e8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fc fb5e 	bl	8001cb0 <HAL_DMA_Abort_IT>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d017      	beq.n	800562a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005604:	4610      	mov	r0, r2
 8005606:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005608:	e00f      	b.n	800562a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f9ae 	bl	800596c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005610:	e00b      	b.n	800562a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f9aa 	bl	800596c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005618:	e007      	b.n	800562a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f9a6 	bl	800596c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005628:	e18b      	b.n	8005942 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800562a:	bf00      	nop
    return;
 800562c:	e189      	b.n	8005942 <HAL_UART_IRQHandler+0x5aa>
 800562e:	bf00      	nop
 8005630:	04000120 	.word	0x04000120
 8005634:	08006295 	.word	0x08006295

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800563c:	2b01      	cmp	r3, #1
 800563e:	f040 8144 	bne.w	80058ca <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005646:	f003 0310 	and.w	r3, r3, #16
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 813d 	beq.w	80058ca <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005654:	f003 0310 	and.w	r3, r3, #16
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 8136 	beq.w	80058ca <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2210      	movs	r2, #16
 8005664:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005670:	2b40      	cmp	r3, #64	; 0x40
 8005672:	f040 80b2 	bne.w	80057da <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005682:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 815d 	beq.w	8005946 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005696:	429a      	cmp	r2, r3
 8005698:	f080 8155 	bcs.w	8005946 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b0:	f000 8085 	beq.w	80057be <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	461a      	mov	r2, r3
 80056da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80056ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056ee:	e841 2300 	strex	r3, r2, [r1]
 80056f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80056f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1da      	bne.n	80056b4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3308      	adds	r3, #8
 8005704:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005708:	e853 3f00 	ldrex	r3, [r3]
 800570c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800570e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005710:	f023 0301 	bic.w	r3, r3, #1
 8005714:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3308      	adds	r3, #8
 800571e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005722:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005726:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005728:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800572a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800572e:	e841 2300 	strex	r3, r2, [r1]
 8005732:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1e1      	bne.n	80056fe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3308      	adds	r3, #8
 8005740:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005742:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005744:	e853 3f00 	ldrex	r3, [r3]
 8005748:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800574a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800574c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005750:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3308      	adds	r3, #8
 800575a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800575e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005760:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005764:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800576c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e3      	bne.n	800573a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2220      	movs	r2, #32
 8005776:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005786:	e853 3f00 	ldrex	r3, [r3]
 800578a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800578c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800578e:	f023 0310 	bic.w	r3, r3, #16
 8005792:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80057a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057a8:	e841 2300 	strex	r3, r2, [r1]
 80057ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1e4      	bne.n	800577e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7fc fa09 	bl	8001bd0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	4619      	mov	r1, r3
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f8d4 	bl	8005980 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057d8:	e0b5      	b.n	8005946 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 80a7 	beq.w	800594a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80057fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 80a2 	beq.w	800594a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	e853 3f00 	ldrex	r3, [r3]
 8005812:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005816:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800581a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005828:	647b      	str	r3, [r7, #68]	; 0x44
 800582a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800582e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005830:	e841 2300 	strex	r3, r2, [r1]
 8005834:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1e4      	bne.n	8005806 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3308      	adds	r3, #8
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	e853 3f00 	ldrex	r3, [r3]
 800584a:	623b      	str	r3, [r7, #32]
   return(result);
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	f023 0301 	bic.w	r3, r3, #1
 8005852:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3308      	adds	r3, #8
 800585c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005860:	633a      	str	r2, [r7, #48]	; 0x30
 8005862:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005864:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005868:	e841 2300 	strex	r3, r2, [r1]
 800586c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e3      	bne.n	800583c <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2220      	movs	r2, #32
 8005878:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	e853 3f00 	ldrex	r3, [r3]
 8005892:	60fb      	str	r3, [r7, #12]
   return(result);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0310 	bic.w	r3, r3, #16
 800589a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058a8:	61fb      	str	r3, [r7, #28]
 80058aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ac:	69b9      	ldr	r1, [r7, #24]
 80058ae:	69fa      	ldr	r2, [r7, #28]
 80058b0:	e841 2300 	strex	r3, r2, [r1]
 80058b4:	617b      	str	r3, [r7, #20]
   return(result);
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e4      	bne.n	8005886 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058c0:	4619      	mov	r1, r3
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f85c 	bl	8005980 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058c8:	e03f      	b.n	800594a <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00e      	beq.n	80058f4 <HAL_UART_IRQHandler+0x55c>
 80058d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d008      	beq.n	80058f4 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80058ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f853 	bl	8005998 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058f2:	e02d      	b.n	8005950 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80058f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00e      	beq.n	800591e <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005908:	2b00      	cmp	r3, #0
 800590a:	d008      	beq.n	800591e <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01c      	beq.n	800594e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	4798      	blx	r3
    }
    return;
 800591c:	e017      	b.n	800594e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800591e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d012      	beq.n	8005950 <HAL_UART_IRQHandler+0x5b8>
 800592a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800592e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00c      	beq.n	8005950 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fcc2 	bl	80062c0 <UART_EndTransmit_IT>
    return;
 800593c:	e008      	b.n	8005950 <HAL_UART_IRQHandler+0x5b8>
      return;
 800593e:	bf00      	nop
 8005940:	e006      	b.n	8005950 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005942:	bf00      	nop
 8005944:	e004      	b.n	8005950 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005946:	bf00      	nop
 8005948:	e002      	b.n	8005950 <HAL_UART_IRQHandler+0x5b8>
      return;
 800594a:	bf00      	nop
 800594c:	e000      	b.n	8005950 <HAL_UART_IRQHandler+0x5b8>
    return;
 800594e:	bf00      	nop
  }

}
 8005950:	37e8      	adds	r7, #232	; 0xe8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop

08005958 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	4ba7      	ldr	r3, [pc, #668]	; (8005c74 <UART_SetConfig+0x2c8>)
 80059d8:	4013      	ands	r3, r2
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6812      	ldr	r2, [r2, #0]
 80059de:	6979      	ldr	r1, [r7, #20]
 80059e0:	430b      	orrs	r3, r1
 80059e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a95      	ldr	r2, [pc, #596]	; (8005c78 <UART_SetConfig+0x2cc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d120      	bne.n	8005a6a <UART_SetConfig+0xbe>
 8005a28:	4b94      	ldr	r3, [pc, #592]	; (8005c7c <UART_SetConfig+0x2d0>)
 8005a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	d816      	bhi.n	8005a64 <UART_SetConfig+0xb8>
 8005a36:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <UART_SetConfig+0x90>)
 8005a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3c:	08005a4d 	.word	0x08005a4d
 8005a40:	08005a59 	.word	0x08005a59
 8005a44:	08005a53 	.word	0x08005a53
 8005a48:	08005a5f 	.word	0x08005a5f
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	77fb      	strb	r3, [r7, #31]
 8005a50:	e14f      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005a52:	2302      	movs	r3, #2
 8005a54:	77fb      	strb	r3, [r7, #31]
 8005a56:	e14c      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005a58:	2304      	movs	r3, #4
 8005a5a:	77fb      	strb	r3, [r7, #31]
 8005a5c:	e149      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005a5e:	2308      	movs	r3, #8
 8005a60:	77fb      	strb	r3, [r7, #31]
 8005a62:	e146      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005a64:	2310      	movs	r3, #16
 8005a66:	77fb      	strb	r3, [r7, #31]
 8005a68:	e143      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a84      	ldr	r2, [pc, #528]	; (8005c80 <UART_SetConfig+0x2d4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d132      	bne.n	8005ada <UART_SetConfig+0x12e>
 8005a74:	4b81      	ldr	r3, [pc, #516]	; (8005c7c <UART_SetConfig+0x2d0>)
 8005a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7a:	f003 030c 	and.w	r3, r3, #12
 8005a7e:	2b0c      	cmp	r3, #12
 8005a80:	d828      	bhi.n	8005ad4 <UART_SetConfig+0x128>
 8005a82:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <UART_SetConfig+0xdc>)
 8005a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a88:	08005abd 	.word	0x08005abd
 8005a8c:	08005ad5 	.word	0x08005ad5
 8005a90:	08005ad5 	.word	0x08005ad5
 8005a94:	08005ad5 	.word	0x08005ad5
 8005a98:	08005ac9 	.word	0x08005ac9
 8005a9c:	08005ad5 	.word	0x08005ad5
 8005aa0:	08005ad5 	.word	0x08005ad5
 8005aa4:	08005ad5 	.word	0x08005ad5
 8005aa8:	08005ac3 	.word	0x08005ac3
 8005aac:	08005ad5 	.word	0x08005ad5
 8005ab0:	08005ad5 	.word	0x08005ad5
 8005ab4:	08005ad5 	.word	0x08005ad5
 8005ab8:	08005acf 	.word	0x08005acf
 8005abc:	2300      	movs	r3, #0
 8005abe:	77fb      	strb	r3, [r7, #31]
 8005ac0:	e117      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	77fb      	strb	r3, [r7, #31]
 8005ac6:	e114      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005ac8:	2304      	movs	r3, #4
 8005aca:	77fb      	strb	r3, [r7, #31]
 8005acc:	e111      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005ace:	2308      	movs	r3, #8
 8005ad0:	77fb      	strb	r3, [r7, #31]
 8005ad2:	e10e      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	77fb      	strb	r3, [r7, #31]
 8005ad8:	e10b      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a69      	ldr	r2, [pc, #420]	; (8005c84 <UART_SetConfig+0x2d8>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d120      	bne.n	8005b26 <UART_SetConfig+0x17a>
 8005ae4:	4b65      	ldr	r3, [pc, #404]	; (8005c7c <UART_SetConfig+0x2d0>)
 8005ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005aee:	2b30      	cmp	r3, #48	; 0x30
 8005af0:	d013      	beq.n	8005b1a <UART_SetConfig+0x16e>
 8005af2:	2b30      	cmp	r3, #48	; 0x30
 8005af4:	d814      	bhi.n	8005b20 <UART_SetConfig+0x174>
 8005af6:	2b20      	cmp	r3, #32
 8005af8:	d009      	beq.n	8005b0e <UART_SetConfig+0x162>
 8005afa:	2b20      	cmp	r3, #32
 8005afc:	d810      	bhi.n	8005b20 <UART_SetConfig+0x174>
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <UART_SetConfig+0x15c>
 8005b02:	2b10      	cmp	r3, #16
 8005b04:	d006      	beq.n	8005b14 <UART_SetConfig+0x168>
 8005b06:	e00b      	b.n	8005b20 <UART_SetConfig+0x174>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	77fb      	strb	r3, [r7, #31]
 8005b0c:	e0f1      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	77fb      	strb	r3, [r7, #31]
 8005b12:	e0ee      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005b14:	2304      	movs	r3, #4
 8005b16:	77fb      	strb	r3, [r7, #31]
 8005b18:	e0eb      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005b1a:	2308      	movs	r3, #8
 8005b1c:	77fb      	strb	r3, [r7, #31]
 8005b1e:	e0e8      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005b20:	2310      	movs	r3, #16
 8005b22:	77fb      	strb	r3, [r7, #31]
 8005b24:	e0e5      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a57      	ldr	r2, [pc, #348]	; (8005c88 <UART_SetConfig+0x2dc>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d120      	bne.n	8005b72 <UART_SetConfig+0x1c6>
 8005b30:	4b52      	ldr	r3, [pc, #328]	; (8005c7c <UART_SetConfig+0x2d0>)
 8005b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b3a:	2bc0      	cmp	r3, #192	; 0xc0
 8005b3c:	d013      	beq.n	8005b66 <UART_SetConfig+0x1ba>
 8005b3e:	2bc0      	cmp	r3, #192	; 0xc0
 8005b40:	d814      	bhi.n	8005b6c <UART_SetConfig+0x1c0>
 8005b42:	2b80      	cmp	r3, #128	; 0x80
 8005b44:	d009      	beq.n	8005b5a <UART_SetConfig+0x1ae>
 8005b46:	2b80      	cmp	r3, #128	; 0x80
 8005b48:	d810      	bhi.n	8005b6c <UART_SetConfig+0x1c0>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <UART_SetConfig+0x1a8>
 8005b4e:	2b40      	cmp	r3, #64	; 0x40
 8005b50:	d006      	beq.n	8005b60 <UART_SetConfig+0x1b4>
 8005b52:	e00b      	b.n	8005b6c <UART_SetConfig+0x1c0>
 8005b54:	2300      	movs	r3, #0
 8005b56:	77fb      	strb	r3, [r7, #31]
 8005b58:	e0cb      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	77fb      	strb	r3, [r7, #31]
 8005b5e:	e0c8      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005b60:	2304      	movs	r3, #4
 8005b62:	77fb      	strb	r3, [r7, #31]
 8005b64:	e0c5      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005b66:	2308      	movs	r3, #8
 8005b68:	77fb      	strb	r3, [r7, #31]
 8005b6a:	e0c2      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005b6c:	2310      	movs	r3, #16
 8005b6e:	77fb      	strb	r3, [r7, #31]
 8005b70:	e0bf      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a45      	ldr	r2, [pc, #276]	; (8005c8c <UART_SetConfig+0x2e0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d125      	bne.n	8005bc8 <UART_SetConfig+0x21c>
 8005b7c:	4b3f      	ldr	r3, [pc, #252]	; (8005c7c <UART_SetConfig+0x2d0>)
 8005b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b8a:	d017      	beq.n	8005bbc <UART_SetConfig+0x210>
 8005b8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b90:	d817      	bhi.n	8005bc2 <UART_SetConfig+0x216>
 8005b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b96:	d00b      	beq.n	8005bb0 <UART_SetConfig+0x204>
 8005b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b9c:	d811      	bhi.n	8005bc2 <UART_SetConfig+0x216>
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <UART_SetConfig+0x1fe>
 8005ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ba6:	d006      	beq.n	8005bb6 <UART_SetConfig+0x20a>
 8005ba8:	e00b      	b.n	8005bc2 <UART_SetConfig+0x216>
 8005baa:	2300      	movs	r3, #0
 8005bac:	77fb      	strb	r3, [r7, #31]
 8005bae:	e0a0      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	77fb      	strb	r3, [r7, #31]
 8005bb4:	e09d      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005bb6:	2304      	movs	r3, #4
 8005bb8:	77fb      	strb	r3, [r7, #31]
 8005bba:	e09a      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005bbc:	2308      	movs	r3, #8
 8005bbe:	77fb      	strb	r3, [r7, #31]
 8005bc0:	e097      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005bc2:	2310      	movs	r3, #16
 8005bc4:	77fb      	strb	r3, [r7, #31]
 8005bc6:	e094      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a30      	ldr	r2, [pc, #192]	; (8005c90 <UART_SetConfig+0x2e4>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d125      	bne.n	8005c1e <UART_SetConfig+0x272>
 8005bd2:	4b2a      	ldr	r3, [pc, #168]	; (8005c7c <UART_SetConfig+0x2d0>)
 8005bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005bdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005be0:	d017      	beq.n	8005c12 <UART_SetConfig+0x266>
 8005be2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005be6:	d817      	bhi.n	8005c18 <UART_SetConfig+0x26c>
 8005be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bec:	d00b      	beq.n	8005c06 <UART_SetConfig+0x25a>
 8005bee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bf2:	d811      	bhi.n	8005c18 <UART_SetConfig+0x26c>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <UART_SetConfig+0x254>
 8005bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bfc:	d006      	beq.n	8005c0c <UART_SetConfig+0x260>
 8005bfe:	e00b      	b.n	8005c18 <UART_SetConfig+0x26c>
 8005c00:	2301      	movs	r3, #1
 8005c02:	77fb      	strb	r3, [r7, #31]
 8005c04:	e075      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005c06:	2302      	movs	r3, #2
 8005c08:	77fb      	strb	r3, [r7, #31]
 8005c0a:	e072      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005c0c:	2304      	movs	r3, #4
 8005c0e:	77fb      	strb	r3, [r7, #31]
 8005c10:	e06f      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005c12:	2308      	movs	r3, #8
 8005c14:	77fb      	strb	r3, [r7, #31]
 8005c16:	e06c      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005c18:	2310      	movs	r3, #16
 8005c1a:	77fb      	strb	r3, [r7, #31]
 8005c1c:	e069      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a1c      	ldr	r2, [pc, #112]	; (8005c94 <UART_SetConfig+0x2e8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d137      	bne.n	8005c98 <UART_SetConfig+0x2ec>
 8005c28:	4b14      	ldr	r3, [pc, #80]	; (8005c7c <UART_SetConfig+0x2d0>)
 8005c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005c32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c36:	d017      	beq.n	8005c68 <UART_SetConfig+0x2bc>
 8005c38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c3c:	d817      	bhi.n	8005c6e <UART_SetConfig+0x2c2>
 8005c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c42:	d00b      	beq.n	8005c5c <UART_SetConfig+0x2b0>
 8005c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c48:	d811      	bhi.n	8005c6e <UART_SetConfig+0x2c2>
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <UART_SetConfig+0x2aa>
 8005c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c52:	d006      	beq.n	8005c62 <UART_SetConfig+0x2b6>
 8005c54:	e00b      	b.n	8005c6e <UART_SetConfig+0x2c2>
 8005c56:	2300      	movs	r3, #0
 8005c58:	77fb      	strb	r3, [r7, #31]
 8005c5a:	e04a      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	77fb      	strb	r3, [r7, #31]
 8005c60:	e047      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005c62:	2304      	movs	r3, #4
 8005c64:	77fb      	strb	r3, [r7, #31]
 8005c66:	e044      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005c68:	2308      	movs	r3, #8
 8005c6a:	77fb      	strb	r3, [r7, #31]
 8005c6c:	e041      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005c6e:	2310      	movs	r3, #16
 8005c70:	77fb      	strb	r3, [r7, #31]
 8005c72:	e03e      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005c74:	efff69f3 	.word	0xefff69f3
 8005c78:	40011000 	.word	0x40011000
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	40004400 	.word	0x40004400
 8005c84:	40004800 	.word	0x40004800
 8005c88:	40004c00 	.word	0x40004c00
 8005c8c:	40005000 	.word	0x40005000
 8005c90:	40011400 	.word	0x40011400
 8005c94:	40007800 	.word	0x40007800
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a71      	ldr	r2, [pc, #452]	; (8005e64 <UART_SetConfig+0x4b8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d125      	bne.n	8005cee <UART_SetConfig+0x342>
 8005ca2:	4b71      	ldr	r3, [pc, #452]	; (8005e68 <UART_SetConfig+0x4bc>)
 8005ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005cac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005cb0:	d017      	beq.n	8005ce2 <UART_SetConfig+0x336>
 8005cb2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005cb6:	d817      	bhi.n	8005ce8 <UART_SetConfig+0x33c>
 8005cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cbc:	d00b      	beq.n	8005cd6 <UART_SetConfig+0x32a>
 8005cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc2:	d811      	bhi.n	8005ce8 <UART_SetConfig+0x33c>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <UART_SetConfig+0x324>
 8005cc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ccc:	d006      	beq.n	8005cdc <UART_SetConfig+0x330>
 8005cce:	e00b      	b.n	8005ce8 <UART_SetConfig+0x33c>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	77fb      	strb	r3, [r7, #31]
 8005cd4:	e00d      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	77fb      	strb	r3, [r7, #31]
 8005cda:	e00a      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005cdc:	2304      	movs	r3, #4
 8005cde:	77fb      	strb	r3, [r7, #31]
 8005ce0:	e007      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005ce2:	2308      	movs	r3, #8
 8005ce4:	77fb      	strb	r3, [r7, #31]
 8005ce6:	e004      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005ce8:	2310      	movs	r3, #16
 8005cea:	77fb      	strb	r3, [r7, #31]
 8005cec:	e001      	b.n	8005cf2 <UART_SetConfig+0x346>
 8005cee:	2310      	movs	r3, #16
 8005cf0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cfa:	d15a      	bne.n	8005db2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005cfc:	7ffb      	ldrb	r3, [r7, #31]
 8005cfe:	2b08      	cmp	r3, #8
 8005d00:	d827      	bhi.n	8005d52 <UART_SetConfig+0x3a6>
 8005d02:	a201      	add	r2, pc, #4	; (adr r2, 8005d08 <UART_SetConfig+0x35c>)
 8005d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d08:	08005d2d 	.word	0x08005d2d
 8005d0c:	08005d35 	.word	0x08005d35
 8005d10:	08005d3d 	.word	0x08005d3d
 8005d14:	08005d53 	.word	0x08005d53
 8005d18:	08005d43 	.word	0x08005d43
 8005d1c:	08005d53 	.word	0x08005d53
 8005d20:	08005d53 	.word	0x08005d53
 8005d24:	08005d53 	.word	0x08005d53
 8005d28:	08005d4b 	.word	0x08005d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d2c:	f7fd fb6a 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
 8005d30:	61b8      	str	r0, [r7, #24]
        break;
 8005d32:	e013      	b.n	8005d5c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d34:	f7fd fb7a 	bl	800342c <HAL_RCC_GetPCLK2Freq>
 8005d38:	61b8      	str	r0, [r7, #24]
        break;
 8005d3a:	e00f      	b.n	8005d5c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d3c:	4b4b      	ldr	r3, [pc, #300]	; (8005e6c <UART_SetConfig+0x4c0>)
 8005d3e:	61bb      	str	r3, [r7, #24]
        break;
 8005d40:	e00c      	b.n	8005d5c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d42:	f7fd fa71 	bl	8003228 <HAL_RCC_GetSysClockFreq>
 8005d46:	61b8      	str	r0, [r7, #24]
        break;
 8005d48:	e008      	b.n	8005d5c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d4e:	61bb      	str	r3, [r7, #24]
        break;
 8005d50:	e004      	b.n	8005d5c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	77bb      	strb	r3, [r7, #30]
        break;
 8005d5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d074      	beq.n	8005e4c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	005a      	lsls	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	085b      	lsrs	r3, r3, #1
 8005d6c:	441a      	add	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	2b0f      	cmp	r3, #15
 8005d7c:	d916      	bls.n	8005dac <UART_SetConfig+0x400>
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d84:	d212      	bcs.n	8005dac <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	f023 030f 	bic.w	r3, r3, #15
 8005d8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	085b      	lsrs	r3, r3, #1
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	89fb      	ldrh	r3, [r7, #14]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	89fa      	ldrh	r2, [r7, #14]
 8005da8:	60da      	str	r2, [r3, #12]
 8005daa:	e04f      	b.n	8005e4c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	77bb      	strb	r3, [r7, #30]
 8005db0:	e04c      	b.n	8005e4c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005db2:	7ffb      	ldrb	r3, [r7, #31]
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	d828      	bhi.n	8005e0a <UART_SetConfig+0x45e>
 8005db8:	a201      	add	r2, pc, #4	; (adr r2, 8005dc0 <UART_SetConfig+0x414>)
 8005dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbe:	bf00      	nop
 8005dc0:	08005de5 	.word	0x08005de5
 8005dc4:	08005ded 	.word	0x08005ded
 8005dc8:	08005df5 	.word	0x08005df5
 8005dcc:	08005e0b 	.word	0x08005e0b
 8005dd0:	08005dfb 	.word	0x08005dfb
 8005dd4:	08005e0b 	.word	0x08005e0b
 8005dd8:	08005e0b 	.word	0x08005e0b
 8005ddc:	08005e0b 	.word	0x08005e0b
 8005de0:	08005e03 	.word	0x08005e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005de4:	f7fd fb0e 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
 8005de8:	61b8      	str	r0, [r7, #24]
        break;
 8005dea:	e013      	b.n	8005e14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dec:	f7fd fb1e 	bl	800342c <HAL_RCC_GetPCLK2Freq>
 8005df0:	61b8      	str	r0, [r7, #24]
        break;
 8005df2:	e00f      	b.n	8005e14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005df4:	4b1d      	ldr	r3, [pc, #116]	; (8005e6c <UART_SetConfig+0x4c0>)
 8005df6:	61bb      	str	r3, [r7, #24]
        break;
 8005df8:	e00c      	b.n	8005e14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dfa:	f7fd fa15 	bl	8003228 <HAL_RCC_GetSysClockFreq>
 8005dfe:	61b8      	str	r0, [r7, #24]
        break;
 8005e00:	e008      	b.n	8005e14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e06:	61bb      	str	r3, [r7, #24]
        break;
 8005e08:	e004      	b.n	8005e14 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	77bb      	strb	r3, [r7, #30]
        break;
 8005e12:	bf00      	nop
    }

    if (pclk != 0U)
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d018      	beq.n	8005e4c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	085a      	lsrs	r2, r3, #1
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	441a      	add	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b0f      	cmp	r3, #15
 8005e32:	d909      	bls.n	8005e48 <UART_SetConfig+0x49c>
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e3a:	d205      	bcs.n	8005e48 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	60da      	str	r2, [r3, #12]
 8005e46:	e001      	b.n	8005e4c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e58:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3720      	adds	r7, #32
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40007c00 	.word	0x40007c00
 8005e68:	40023800 	.word	0x40023800
 8005e6c:	00f42400 	.word	0x00f42400

08005e70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00a      	beq.n	8005e9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00a      	beq.n	8005ede <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	f003 0308 	and.w	r3, r3, #8
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	f003 0310 	and.w	r3, r3, #16
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01a      	beq.n	8005f86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f6e:	d10a      	bne.n	8005f86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00a      	beq.n	8005fa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	605a      	str	r2, [r3, #4]
  }
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fc4:	f7fb fb84 	bl	80016d0 <HAL_GetTick>
 8005fc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0308 	and.w	r3, r3, #8
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d10e      	bne.n	8005ff6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f82d 	bl	8006046 <UART_WaitOnFlagUntilTimeout>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e023      	b.n	800603e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b04      	cmp	r3, #4
 8006002:	d10e      	bne.n	8006022 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006004:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f817 	bl	8006046 <UART_WaitOnFlagUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e00d      	b.n	800603e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2220      	movs	r2, #32
 8006026:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2220      	movs	r2, #32
 800602c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b09c      	sub	sp, #112	; 0x70
 800604a:	af00      	add	r7, sp, #0
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	603b      	str	r3, [r7, #0]
 8006052:	4613      	mov	r3, r2
 8006054:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006056:	e0a5      	b.n	80061a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800605a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605e:	f000 80a1 	beq.w	80061a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006062:	f7fb fb35 	bl	80016d0 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800606e:	429a      	cmp	r2, r3
 8006070:	d302      	bcc.n	8006078 <UART_WaitOnFlagUntilTimeout+0x32>
 8006072:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006074:	2b00      	cmp	r3, #0
 8006076:	d13e      	bne.n	80060f6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006080:	e853 3f00 	ldrex	r3, [r3]
 8006084:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006088:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800608c:	667b      	str	r3, [r7, #100]	; 0x64
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	461a      	mov	r2, r3
 8006094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006096:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006098:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800609c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800609e:	e841 2300 	strex	r3, r2, [r1]
 80060a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80060a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1e6      	bne.n	8006078 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3308      	adds	r3, #8
 80060b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060bc:	f023 0301 	bic.w	r3, r3, #1
 80060c0:	663b      	str	r3, [r7, #96]	; 0x60
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3308      	adds	r3, #8
 80060c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80060cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060d2:	e841 2300 	strex	r3, r2, [r1]
 80060d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1e5      	bne.n	80060aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2220      	movs	r2, #32
 80060e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2220      	movs	r2, #32
 80060e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e067      	b.n	80061c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d04f      	beq.n	80061a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800610e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006112:	d147      	bne.n	80061a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800611c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006132:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	461a      	mov	r2, r3
 800613a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613c:	637b      	str	r3, [r7, #52]	; 0x34
 800613e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006140:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e6      	bne.n	800611e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3308      	adds	r3, #8
 8006156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	e853 3f00 	ldrex	r3, [r3]
 800615e:	613b      	str	r3, [r7, #16]
   return(result);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f023 0301 	bic.w	r3, r3, #1
 8006166:	66bb      	str	r3, [r7, #104]	; 0x68
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3308      	adds	r3, #8
 800616e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006170:	623a      	str	r2, [r7, #32]
 8006172:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006174:	69f9      	ldr	r1, [r7, #28]
 8006176:	6a3a      	ldr	r2, [r7, #32]
 8006178:	e841 2300 	strex	r3, r2, [r1]
 800617c:	61bb      	str	r3, [r7, #24]
   return(result);
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e5      	bne.n	8006150 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2220      	movs	r2, #32
 8006188:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2220      	movs	r2, #32
 800618e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2220      	movs	r2, #32
 8006194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e010      	b.n	80061c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	69da      	ldr	r2, [r3, #28]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	4013      	ands	r3, r2
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	bf0c      	ite	eq
 80061b4:	2301      	moveq	r3, #1
 80061b6:	2300      	movne	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	461a      	mov	r2, r3
 80061bc:	79fb      	ldrb	r3, [r7, #7]
 80061be:	429a      	cmp	r2, r3
 80061c0:	f43f af4a 	beq.w	8006058 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3770      	adds	r7, #112	; 0x70
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b095      	sub	sp, #84	; 0x54
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061de:	e853 3f00 	ldrex	r3, [r3]
 80061e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	461a      	mov	r2, r3
 80061f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f4:	643b      	str	r3, [r7, #64]	; 0x40
 80061f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061fc:	e841 2300 	strex	r3, r2, [r1]
 8006200:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e6      	bne.n	80061d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3308      	adds	r3, #8
 800620e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	e853 3f00 	ldrex	r3, [r3]
 8006216:	61fb      	str	r3, [r7, #28]
   return(result);
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	f023 0301 	bic.w	r3, r3, #1
 800621e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3308      	adds	r3, #8
 8006226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006228:	62fa      	str	r2, [r7, #44]	; 0x2c
 800622a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800622e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006230:	e841 2300 	strex	r3, r2, [r1]
 8006234:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1e5      	bne.n	8006208 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006240:	2b01      	cmp	r3, #1
 8006242:	d118      	bne.n	8006276 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	60bb      	str	r3, [r7, #8]
   return(result);
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f023 0310 	bic.w	r3, r3, #16
 8006258:	647b      	str	r3, [r7, #68]	; 0x44
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006262:	61bb      	str	r3, [r7, #24]
 8006264:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006266:	6979      	ldr	r1, [r7, #20]
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	613b      	str	r3, [r7, #16]
   return(result);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e6      	bne.n	8006244 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2220      	movs	r2, #32
 800627a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006288:	bf00      	nop
 800628a:	3754      	adds	r7, #84	; 0x54
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f7ff fb5a 	bl	800596c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062b8:	bf00      	nop
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b088      	sub	sp, #32
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062dc:	61fb      	str	r3, [r7, #28]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	61bb      	str	r3, [r7, #24]
 80062e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	6979      	ldr	r1, [r7, #20]
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	613b      	str	r3, [r7, #16]
   return(result);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e6      	bne.n	80062c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2220      	movs	r2, #32
 80062fe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7ff fb26 	bl	8005958 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800630c:	bf00      	nop
 800630e:	3720      	adds	r7, #32
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006314:	b084      	sub	sp, #16
 8006316:	b580      	push	{r7, lr}
 8006318:	b084      	sub	sp, #16
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	f107 001c 	add.w	r0, r7, #28
 8006322:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	2b01      	cmp	r3, #1
 800632a:	d120      	bne.n	800636e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006330:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	4b20      	ldr	r3, [pc, #128]	; (80063c0 <USB_CoreInit+0xac>)
 800633e:	4013      	ands	r3, r2
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006352:	2b01      	cmp	r3, #1
 8006354:	d105      	bne.n	8006362 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fa92 	bl	800688c <USB_CoreReset>
 8006368:	4603      	mov	r3, r0
 800636a:	73fb      	strb	r3, [r7, #15]
 800636c:	e010      	b.n	8006390 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fa86 	bl	800688c <USB_CoreReset>
 8006380:	4603      	mov	r3, r0
 8006382:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006388:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	2b01      	cmp	r3, #1
 8006394:	d10b      	bne.n	80063ae <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f043 0206 	orr.w	r2, r3, #6
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f043 0220 	orr.w	r2, r3, #32
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063ba:	b004      	add	sp, #16
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	ffbdffbf 	.word	0xffbdffbf

080063c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f023 0201 	bic.w	r2, r3, #1
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b084      	sub	sp, #16
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	460b      	mov	r3, r1
 80063f0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006402:	78fb      	ldrb	r3, [r7, #3]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d115      	bne.n	8006434 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006414:	2001      	movs	r0, #1
 8006416:	f7fb f967 	bl	80016e8 <HAL_Delay>
      ms++;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3301      	adds	r3, #1
 800641e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fa25 	bl	8006870 <USB_GetMode>
 8006426:	4603      	mov	r3, r0
 8006428:	2b01      	cmp	r3, #1
 800642a:	d01e      	beq.n	800646a <USB_SetCurrentMode+0x84>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b31      	cmp	r3, #49	; 0x31
 8006430:	d9f0      	bls.n	8006414 <USB_SetCurrentMode+0x2e>
 8006432:	e01a      	b.n	800646a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d115      	bne.n	8006466 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006446:	2001      	movs	r0, #1
 8006448:	f7fb f94e 	bl	80016e8 <HAL_Delay>
      ms++;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	3301      	adds	r3, #1
 8006450:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fa0c 	bl	8006870 <USB_GetMode>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d005      	beq.n	800646a <USB_SetCurrentMode+0x84>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2b31      	cmp	r3, #49	; 0x31
 8006462:	d9f0      	bls.n	8006446 <USB_SetCurrentMode+0x60>
 8006464:	e001      	b.n	800646a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e005      	b.n	8006476 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2b32      	cmp	r3, #50	; 0x32
 800646e:	d101      	bne.n	8006474 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e000      	b.n	8006476 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006480:	b084      	sub	sp, #16
 8006482:	b580      	push	{r7, lr}
 8006484:	b086      	sub	sp, #24
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800648e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800649a:	2300      	movs	r3, #0
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	e009      	b.n	80064b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	3340      	adds	r3, #64	; 0x40
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	2200      	movs	r2, #0
 80064ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	3301      	adds	r3, #1
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	2b0e      	cmp	r3, #14
 80064b8:	d9f2      	bls.n	80064a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80064ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d11c      	bne.n	80064fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ce:	f043 0302 	orr.w	r3, r3, #2
 80064d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	e005      	b.n	8006506 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800650c:	461a      	mov	r2, r3
 800650e:	2300      	movs	r3, #0
 8006510:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006518:	4619      	mov	r1, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006520:	461a      	mov	r2, r3
 8006522:	680b      	ldr	r3, [r1, #0]
 8006524:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006528:	2b01      	cmp	r3, #1
 800652a:	d10c      	bne.n	8006546 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652e:	2b00      	cmp	r3, #0
 8006530:	d104      	bne.n	800653c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006532:	2100      	movs	r1, #0
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f961 	bl	80067fc <USB_SetDevSpeed>
 800653a:	e008      	b.n	800654e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800653c:	2101      	movs	r1, #1
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f95c 	bl	80067fc <USB_SetDevSpeed>
 8006544:	e003      	b.n	800654e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006546:	2103      	movs	r1, #3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f957 	bl	80067fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800654e:	2110      	movs	r1, #16
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f8f3 	bl	800673c <USB_FlushTxFifo>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f91d 	bl	80067a0 <USB_FlushRxFifo>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d001      	beq.n	8006570 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006576:	461a      	mov	r2, r3
 8006578:	2300      	movs	r3, #0
 800657a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006582:	461a      	mov	r2, r3
 8006584:	2300      	movs	r3, #0
 8006586:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658e:	461a      	mov	r2, r3
 8006590:	2300      	movs	r3, #0
 8006592:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006594:	2300      	movs	r3, #0
 8006596:	613b      	str	r3, [r7, #16]
 8006598:	e043      	b.n	8006622 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065b0:	d118      	bne.n	80065e4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10a      	bne.n	80065ce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c4:	461a      	mov	r2, r3
 80065c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	e013      	b.n	80065f6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065da:	461a      	mov	r2, r3
 80065dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065e0:	6013      	str	r3, [r2, #0]
 80065e2:	e008      	b.n	80065f6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f0:	461a      	mov	r2, r3
 80065f2:	2300      	movs	r3, #0
 80065f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006602:	461a      	mov	r2, r3
 8006604:	2300      	movs	r3, #0
 8006606:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4413      	add	r3, r2
 8006610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006614:	461a      	mov	r2, r3
 8006616:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800661a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	3301      	adds	r3, #1
 8006620:	613b      	str	r3, [r7, #16]
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	429a      	cmp	r2, r3
 8006628:	d3b7      	bcc.n	800659a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800662a:	2300      	movs	r3, #0
 800662c:	613b      	str	r3, [r7, #16]
 800662e:	e043      	b.n	80066b8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006646:	d118      	bne.n	800667a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10a      	bne.n	8006664 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665a:	461a      	mov	r2, r3
 800665c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	e013      	b.n	800668c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006670:	461a      	mov	r2, r3
 8006672:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	e008      	b.n	800668c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006686:	461a      	mov	r2, r3
 8006688:	2300      	movs	r3, #0
 800668a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006698:	461a      	mov	r2, r3
 800669a:	2300      	movs	r3, #0
 800669c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066aa:	461a      	mov	r2, r3
 80066ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	3301      	adds	r3, #1
 80066b6:	613b      	str	r3, [r7, #16]
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d3b7      	bcc.n	8006630 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80066e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d105      	bne.n	80066f4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	f043 0210 	orr.w	r2, r3, #16
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	699a      	ldr	r2, [r3, #24]
 80066f8:	4b0e      	ldr	r3, [pc, #56]	; (8006734 <USB_DevInit+0x2b4>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006702:	2b00      	cmp	r3, #0
 8006704:	d005      	beq.n	8006712 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	f043 0208 	orr.w	r2, r3, #8
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006714:	2b01      	cmp	r3, #1
 8006716:	d105      	bne.n	8006724 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	699a      	ldr	r2, [r3, #24]
 800671c:	4b06      	ldr	r3, [pc, #24]	; (8006738 <USB_DevInit+0x2b8>)
 800671e:	4313      	orrs	r3, r2
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006724:	7dfb      	ldrb	r3, [r7, #23]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006730:	b004      	add	sp, #16
 8006732:	4770      	bx	lr
 8006734:	803c3800 	.word	0x803c3800
 8006738:	40000004 	.word	0x40000004

0800673c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	3301      	adds	r3, #1
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	4a12      	ldr	r2, [pc, #72]	; (800679c <USB_FlushTxFifo+0x60>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d901      	bls.n	800675a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e01a      	b.n	8006790 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	2b00      	cmp	r3, #0
 8006760:	daf3      	bge.n	800674a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	019b      	lsls	r3, r3, #6
 800676a:	f043 0220 	orr.w	r2, r3, #32
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3301      	adds	r3, #1
 8006776:	60fb      	str	r3, [r7, #12]
 8006778:	4a08      	ldr	r2, [pc, #32]	; (800679c <USB_FlushTxFifo+0x60>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d901      	bls.n	8006782 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e006      	b.n	8006790 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b20      	cmp	r3, #32
 800678c:	d0f1      	beq.n	8006772 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	00030d40 	.word	0x00030d40

080067a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	3301      	adds	r3, #1
 80067b0:	60fb      	str	r3, [r7, #12]
 80067b2:	4a11      	ldr	r2, [pc, #68]	; (80067f8 <USB_FlushRxFifo+0x58>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d901      	bls.n	80067bc <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e017      	b.n	80067ec <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	daf3      	bge.n	80067ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2210      	movs	r2, #16
 80067cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3301      	adds	r3, #1
 80067d2:	60fb      	str	r3, [r7, #12]
 80067d4:	4a08      	ldr	r2, [pc, #32]	; (80067f8 <USB_FlushRxFifo+0x58>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d901      	bls.n	80067de <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e006      	b.n	80067ec <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f003 0310 	and.w	r3, r3, #16
 80067e6:	2b10      	cmp	r3, #16
 80067e8:	d0f1      	beq.n	80067ce <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	00030d40 	.word	0x00030d40

080067fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	68f9      	ldr	r1, [r7, #12]
 8006818:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800681c:	4313      	orrs	r3, r2
 800681e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800682e:	b480      	push	{r7}
 8006830:	b085      	sub	sp, #20
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006848:	f023 0303 	bic.w	r3, r3, #3
 800684c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800685c:	f043 0302 	orr.w	r3, r3, #2
 8006860:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	f003 0301 	and.w	r3, r3, #1
}
 8006880:	4618      	mov	r0, r3
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3301      	adds	r3, #1
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	4a13      	ldr	r2, [pc, #76]	; (80068ec <USB_CoreReset+0x60>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d901      	bls.n	80068a8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e01a      	b.n	80068de <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	daf3      	bge.n	8006898 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	f043 0201 	orr.w	r2, r3, #1
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	3301      	adds	r3, #1
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	4a09      	ldr	r2, [pc, #36]	; (80068ec <USB_CoreReset+0x60>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d901      	bls.n	80068d0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e006      	b.n	80068de <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d0f1      	beq.n	80068c0 <USB_CoreReset+0x34>

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	00030d40 	.word	0x00030d40

080068f0 <__libc_init_array>:
 80068f0:	b570      	push	{r4, r5, r6, lr}
 80068f2:	4d0d      	ldr	r5, [pc, #52]	; (8006928 <__libc_init_array+0x38>)
 80068f4:	4c0d      	ldr	r4, [pc, #52]	; (800692c <__libc_init_array+0x3c>)
 80068f6:	1b64      	subs	r4, r4, r5
 80068f8:	10a4      	asrs	r4, r4, #2
 80068fa:	2600      	movs	r6, #0
 80068fc:	42a6      	cmp	r6, r4
 80068fe:	d109      	bne.n	8006914 <__libc_init_array+0x24>
 8006900:	4d0b      	ldr	r5, [pc, #44]	; (8006930 <__libc_init_array+0x40>)
 8006902:	4c0c      	ldr	r4, [pc, #48]	; (8006934 <__libc_init_array+0x44>)
 8006904:	f000 f83c 	bl	8006980 <_init>
 8006908:	1b64      	subs	r4, r4, r5
 800690a:	10a4      	asrs	r4, r4, #2
 800690c:	2600      	movs	r6, #0
 800690e:	42a6      	cmp	r6, r4
 8006910:	d105      	bne.n	800691e <__libc_init_array+0x2e>
 8006912:	bd70      	pop	{r4, r5, r6, pc}
 8006914:	f855 3b04 	ldr.w	r3, [r5], #4
 8006918:	4798      	blx	r3
 800691a:	3601      	adds	r6, #1
 800691c:	e7ee      	b.n	80068fc <__libc_init_array+0xc>
 800691e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006922:	4798      	blx	r3
 8006924:	3601      	adds	r6, #1
 8006926:	e7f2      	b.n	800690e <__libc_init_array+0x1e>
 8006928:	080069c0 	.word	0x080069c0
 800692c:	080069c0 	.word	0x080069c0
 8006930:	080069c0 	.word	0x080069c0
 8006934:	080069c4 	.word	0x080069c4

08006938 <memcmp>:
 8006938:	b530      	push	{r4, r5, lr}
 800693a:	3901      	subs	r1, #1
 800693c:	2400      	movs	r4, #0
 800693e:	42a2      	cmp	r2, r4
 8006940:	d101      	bne.n	8006946 <memcmp+0xe>
 8006942:	2000      	movs	r0, #0
 8006944:	e005      	b.n	8006952 <memcmp+0x1a>
 8006946:	5d03      	ldrb	r3, [r0, r4]
 8006948:	3401      	adds	r4, #1
 800694a:	5d0d      	ldrb	r5, [r1, r4]
 800694c:	42ab      	cmp	r3, r5
 800694e:	d0f6      	beq.n	800693e <memcmp+0x6>
 8006950:	1b58      	subs	r0, r3, r5
 8006952:	bd30      	pop	{r4, r5, pc}

08006954 <memcpy>:
 8006954:	440a      	add	r2, r1
 8006956:	4291      	cmp	r1, r2
 8006958:	f100 33ff 	add.w	r3, r0, #4294967295
 800695c:	d100      	bne.n	8006960 <memcpy+0xc>
 800695e:	4770      	bx	lr
 8006960:	b510      	push	{r4, lr}
 8006962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006966:	f803 4f01 	strb.w	r4, [r3, #1]!
 800696a:	4291      	cmp	r1, r2
 800696c:	d1f9      	bne.n	8006962 <memcpy+0xe>
 800696e:	bd10      	pop	{r4, pc}

08006970 <memset>:
 8006970:	4402      	add	r2, r0
 8006972:	4603      	mov	r3, r0
 8006974:	4293      	cmp	r3, r2
 8006976:	d100      	bne.n	800697a <memset+0xa>
 8006978:	4770      	bx	lr
 800697a:	f803 1b01 	strb.w	r1, [r3], #1
 800697e:	e7f9      	b.n	8006974 <memset+0x4>

08006980 <_init>:
 8006980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006982:	bf00      	nop
 8006984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006986:	bc08      	pop	{r3}
 8006988:	469e      	mov	lr, r3
 800698a:	4770      	bx	lr

0800698c <_fini>:
 800698c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698e:	bf00      	nop
 8006990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006992:	bc08      	pop	{r3}
 8006994:	469e      	mov	lr, r3
 8006996:	4770      	bx	lr
