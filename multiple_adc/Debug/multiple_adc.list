
multiple_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003554  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003610  08003610  00013610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003648  08003648  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003648  08003648  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003648  08003648  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003648  08003648  00013648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800364c  0800364c  0001364c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000000c  0800365c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  0800365c  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0af  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e55  00000000  00000000  0002f0e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00030f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00031c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc48  00000000  00000000  000328a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f793  00000000  00000000  0004e4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab93e  00000000  00000000  0005dc7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001095b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f2c  00000000  00000000  0010960c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080035f8 	.word	0x080035f8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080035f8 	.word	0x080035f8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fb8c 	bl	800093c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f822 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f992 	bl	8000550 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800022c:	f000 f942 	bl	80004b4 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000230:	f000 f970 	bl	8000514 <MX_DMA_Init>
  MX_ADC_Init();
 8000234:	f000 f882 	bl	800033c <MX_ADC_Init>
  MX_TIM2_Init();
 8000238:	f000 f8e8 	bl	800040c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <main+0x40>)
 800023e:	0018      	movs	r0, r3
 8000240:	f002 fb1c 	bl	800287c <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc, adcvalues, 2);
 8000244:	4906      	ldr	r1, [pc, #24]	; (8000260 <main+0x44>)
 8000246:	4b07      	ldr	r3, [pc, #28]	; (8000264 <main+0x48>)
 8000248:	2202      	movs	r2, #2
 800024a:	0018      	movs	r0, r3
 800024c:	f000 fd1a 	bl	8000c84 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  value1 = adcvalues[0];
 8000250:	4b03      	ldr	r3, [pc, #12]	; (8000260 <main+0x44>)
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <main+0x4c>)
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	e7fa      	b.n	8000250 <main+0x34>
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	20000034 	.word	0x20000034
 8000260:	20000028 	.word	0x20000028
 8000264:	20000144 	.word	0x20000144
 8000268:	20000184 	.word	0x20000184

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b590      	push	{r4, r7, lr}
 800026e:	b099      	sub	sp, #100	; 0x64
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	242c      	movs	r4, #44	; 0x2c
 8000274:	193b      	adds	r3, r7, r4
 8000276:	0018      	movs	r0, r3
 8000278:	2334      	movs	r3, #52	; 0x34
 800027a:	001a      	movs	r2, r3
 800027c:	2100      	movs	r1, #0
 800027e:	f003 f9b3 	bl	80035e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000282:	231c      	movs	r3, #28
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	0018      	movs	r0, r3
 8000288:	2310      	movs	r3, #16
 800028a:	001a      	movs	r2, r3
 800028c:	2100      	movs	r1, #0
 800028e:	f003 f9ab 	bl	80035e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000292:	003b      	movs	r3, r7
 8000294:	0018      	movs	r0, r3
 8000296:	231c      	movs	r3, #28
 8000298:	001a      	movs	r2, r3
 800029a:	2100      	movs	r1, #0
 800029c:	f003 f9a4 	bl	80035e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002a0:	0021      	movs	r1, r4
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2212      	movs	r2, #18
 80002a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2201      	movs	r2, #1
 80002ac:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2201      	movs	r2, #1
 80002b2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2210      	movs	r2, #16
 80002b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2210      	movs	r2, #16
 80002be:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2202      	movs	r2, #2
 80002c4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2280      	movs	r2, #128	; 0x80
 80002ca:	0212      	lsls	r2, r2, #8
 80002cc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	22a0      	movs	r2, #160	; 0xa0
 80002d2:	0392      	lsls	r2, r2, #14
 80002d4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2201      	movs	r2, #1
 80002da:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	0018      	movs	r0, r3
 80002e0:	f001 fc7c 	bl	8001bdc <HAL_RCC_OscConfig>
 80002e4:	1e03      	subs	r3, r0, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x80>
  {
    Error_Handler();
 80002e8:	f000 f9aa 	bl	8000640 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ec:	211c      	movs	r1, #28
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2207      	movs	r2, #7
 80002f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2202      	movs	r2, #2
 80002f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2101      	movs	r1, #1
 800030a:	0018      	movs	r0, r3
 800030c:	f001 ffec 	bl	80022e8 <HAL_RCC_ClockConfig>
 8000310:	1e03      	subs	r3, r0, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000314:	f000 f994 	bl	8000640 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000318:	003b      	movs	r3, r7
 800031a:	2202      	movs	r2, #2
 800031c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800031e:	003b      	movs	r3, r7
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000324:	003b      	movs	r3, r7
 8000326:	0018      	movs	r0, r3
 8000328:	f002 f958 	bl	80025dc <HAL_RCCEx_PeriphCLKConfig>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000330:	f000 f986 	bl	8000640 <Error_Handler>
  }
}
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b019      	add	sp, #100	; 0x64
 800033a:	bd90      	pop	{r4, r7, pc}

0800033c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	0018      	movs	r0, r3
 8000346:	230c      	movs	r3, #12
 8000348:	001a      	movs	r2, r3
 800034a:	2100      	movs	r1, #0
 800034c:	f003 f94c 	bl	80035e8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000350:	4b2c      	ldr	r3, [pc, #176]	; (8000404 <MX_ADC_Init+0xc8>)
 8000352:	4a2d      	ldr	r2, [pc, #180]	; (8000408 <MX_ADC_Init+0xcc>)
 8000354:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000356:	4b2b      	ldr	r3, [pc, #172]	; (8000404 <MX_ADC_Init+0xc8>)
 8000358:	2200      	movs	r2, #0
 800035a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800035c:	4b29      	ldr	r3, [pc, #164]	; (8000404 <MX_ADC_Init+0xc8>)
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000362:	4b28      	ldr	r3, [pc, #160]	; (8000404 <MX_ADC_Init+0xc8>)
 8000364:	2200      	movs	r2, #0
 8000366:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000368:	4b26      	ldr	r3, [pc, #152]	; (8000404 <MX_ADC_Init+0xc8>)
 800036a:	2201      	movs	r2, #1
 800036c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800036e:	4b25      	ldr	r3, [pc, #148]	; (8000404 <MX_ADC_Init+0xc8>)
 8000370:	2208      	movs	r2, #8
 8000372:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000374:	4b23      	ldr	r3, [pc, #140]	; (8000404 <MX_ADC_Init+0xc8>)
 8000376:	2200      	movs	r2, #0
 8000378:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800037a:	4b22      	ldr	r3, [pc, #136]	; (8000404 <MX_ADC_Init+0xc8>)
 800037c:	2200      	movs	r2, #0
 800037e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000380:	4b20      	ldr	r3, [pc, #128]	; (8000404 <MX_ADC_Init+0xc8>)
 8000382:	2200      	movs	r2, #0
 8000384:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000386:	4b1f      	ldr	r3, [pc, #124]	; (8000404 <MX_ADC_Init+0xc8>)
 8000388:	2200      	movs	r2, #0
 800038a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800038c:	4b1d      	ldr	r3, [pc, #116]	; (8000404 <MX_ADC_Init+0xc8>)
 800038e:	2280      	movs	r2, #128	; 0x80
 8000390:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000392:	4b1c      	ldr	r3, [pc, #112]	; (8000404 <MX_ADC_Init+0xc8>)
 8000394:	2280      	movs	r2, #128	; 0x80
 8000396:	00d2      	lsls	r2, r2, #3
 8000398:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800039a:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <MX_ADC_Init+0xc8>)
 800039c:	2224      	movs	r2, #36	; 0x24
 800039e:	2101      	movs	r1, #1
 80003a0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003a2:	4b18      	ldr	r3, [pc, #96]	; (8000404 <MX_ADC_Init+0xc8>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003a8:	4b16      	ldr	r3, [pc, #88]	; (8000404 <MX_ADC_Init+0xc8>)
 80003aa:	0018      	movs	r0, r3
 80003ac:	f000 fb2a 	bl	8000a04 <HAL_ADC_Init>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003b4:	f000 f944 	bl	8000640 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2280      	movs	r2, #128	; 0x80
 80003c2:	0152      	lsls	r2, r2, #5
 80003c4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2207      	movs	r2, #7
 80003ca:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003cc:	1d3a      	adds	r2, r7, #4
 80003ce:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <MX_ADC_Init+0xc8>)
 80003d0:	0011      	movs	r1, r2
 80003d2:	0018      	movs	r0, r3
 80003d4:	f000 fda8 	bl	8000f28 <HAL_ADC_ConfigChannel>
 80003d8:	1e03      	subs	r3, r0, #0
 80003da:	d001      	beq.n	80003e0 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80003dc:	f000 f930 	bl	8000640 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2201      	movs	r2, #1
 80003e4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003e6:	1d3a      	adds	r2, r7, #4
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <MX_ADC_Init+0xc8>)
 80003ea:	0011      	movs	r1, r2
 80003ec:	0018      	movs	r0, r3
 80003ee:	f000 fd9b 	bl	8000f28 <HAL_ADC_ConfigChannel>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80003f6:	f000 f923 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	b004      	add	sp, #16
 8000400:	bd80      	pop	{r7, pc}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	20000144 	.word	0x20000144
 8000408:	40012400 	.word	0x40012400

0800040c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000412:	2308      	movs	r3, #8
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	0018      	movs	r0, r3
 8000418:	2310      	movs	r3, #16
 800041a:	001a      	movs	r2, r3
 800041c:	2100      	movs	r1, #0
 800041e:	f003 f8e3 	bl	80035e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000422:	003b      	movs	r3, r7
 8000424:	0018      	movs	r0, r3
 8000426:	2308      	movs	r3, #8
 8000428:	001a      	movs	r2, r3
 800042a:	2100      	movs	r1, #0
 800042c:	f003 f8dc 	bl	80035e8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000430:	4b1e      	ldr	r3, [pc, #120]	; (80004ac <MX_TIM2_Init+0xa0>)
 8000432:	2280      	movs	r2, #128	; 0x80
 8000434:	05d2      	lsls	r2, r2, #23
 8000436:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400;
 8000438:	4b1c      	ldr	r3, [pc, #112]	; (80004ac <MX_TIM2_Init+0xa0>)
 800043a:	4a1d      	ldr	r2, [pc, #116]	; (80004b0 <MX_TIM2_Init+0xa4>)
 800043c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800043e:	4b1b      	ldr	r3, [pc, #108]	; (80004ac <MX_TIM2_Init+0xa0>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000444:	4b19      	ldr	r3, [pc, #100]	; (80004ac <MX_TIM2_Init+0xa0>)
 8000446:	2264      	movs	r2, #100	; 0x64
 8000448:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800044a:	4b18      	ldr	r3, [pc, #96]	; (80004ac <MX_TIM2_Init+0xa0>)
 800044c:	2200      	movs	r2, #0
 800044e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000450:	4b16      	ldr	r3, [pc, #88]	; (80004ac <MX_TIM2_Init+0xa0>)
 8000452:	2200      	movs	r2, #0
 8000454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000456:	4b15      	ldr	r3, [pc, #84]	; (80004ac <MX_TIM2_Init+0xa0>)
 8000458:	0018      	movs	r0, r3
 800045a:	f002 f9bf 	bl	80027dc <HAL_TIM_Base_Init>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000462:	f000 f8ed 	bl	8000640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000466:	2108      	movs	r1, #8
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2280      	movs	r2, #128	; 0x80
 800046c:	0152      	lsls	r2, r2, #5
 800046e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000470:	187a      	adds	r2, r7, r1
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <MX_TIM2_Init+0xa0>)
 8000474:	0011      	movs	r1, r2
 8000476:	0018      	movs	r0, r3
 8000478:	f002 fa4a 	bl	8002910 <HAL_TIM_ConfigClockSource>
 800047c:	1e03      	subs	r3, r0, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000480:	f000 f8de 	bl	8000640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000484:	003b      	movs	r3, r7
 8000486:	2220      	movs	r2, #32
 8000488:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800048a:	003b      	movs	r3, r7
 800048c:	2200      	movs	r2, #0
 800048e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000490:	003a      	movs	r2, r7
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_TIM2_Init+0xa0>)
 8000494:	0011      	movs	r1, r2
 8000496:	0018      	movs	r0, r3
 8000498:	f002 fc28 	bl	8002cec <HAL_TIMEx_MasterConfigSynchronization>
 800049c:	1e03      	subs	r3, r0, #0
 800049e:	d001      	beq.n	80004a4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80004a0:	f000 f8ce 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004a4:	46c0      	nop			; (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b006      	add	sp, #24
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000034 	.word	0x20000034
 80004b0:	000020d0 	.word	0x000020d0

080004b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004b8:	4b14      	ldr	r3, [pc, #80]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004ba:	4a15      	ldr	r2, [pc, #84]	; (8000510 <MX_USART2_UART_Init+0x5c>)
 80004bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004be:	4b13      	ldr	r3, [pc, #76]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004c0:	22e1      	movs	r2, #225	; 0xe1
 80004c2:	0252      	lsls	r2, r2, #9
 80004c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004c6:	4b11      	ldr	r3, [pc, #68]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004da:	220c      	movs	r2, #12
 80004dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004de:	4b0b      	ldr	r3, [pc, #44]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004f6:	4b05      	ldr	r3, [pc, #20]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004f8:	0018      	movs	r0, r3
 80004fa:	f002 fc55 	bl	8002da8 <HAL_UART_Init>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d001      	beq.n	8000506 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000502:	f000 f89d 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	2000007c 	.word	0x2000007c
 8000510:	40004400 	.word	0x40004400

08000514 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <MX_DMA_Init+0x38>)
 800051c:	695a      	ldr	r2, [r3, #20]
 800051e:	4b0b      	ldr	r3, [pc, #44]	; (800054c <MX_DMA_Init+0x38>)
 8000520:	2101      	movs	r1, #1
 8000522:	430a      	orrs	r2, r1
 8000524:	615a      	str	r2, [r3, #20]
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <MX_DMA_Init+0x38>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	2201      	movs	r2, #1
 800052c:	4013      	ands	r3, r2
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	2100      	movs	r1, #0
 8000536:	2009      	movs	r0, #9
 8000538:	f000 ffb8 	bl	80014ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 800053c:	2009      	movs	r0, #9
 800053e:	f000 ffca 	bl	80014d6 <HAL_NVIC_EnableIRQ>

}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	b002      	add	sp, #8
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	40021000 	.word	0x40021000

08000550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b089      	sub	sp, #36	; 0x24
 8000554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	240c      	movs	r4, #12
 8000558:	193b      	adds	r3, r7, r4
 800055a:	0018      	movs	r0, r3
 800055c:	2314      	movs	r3, #20
 800055e:	001a      	movs	r2, r3
 8000560:	2100      	movs	r1, #0
 8000562:	f003 f841 	bl	80035e8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000566:	4b2d      	ldr	r3, [pc, #180]	; (800061c <MX_GPIO_Init+0xcc>)
 8000568:	695a      	ldr	r2, [r3, #20]
 800056a:	4b2c      	ldr	r3, [pc, #176]	; (800061c <MX_GPIO_Init+0xcc>)
 800056c:	2180      	movs	r1, #128	; 0x80
 800056e:	0309      	lsls	r1, r1, #12
 8000570:	430a      	orrs	r2, r1
 8000572:	615a      	str	r2, [r3, #20]
 8000574:	4b29      	ldr	r3, [pc, #164]	; (800061c <MX_GPIO_Init+0xcc>)
 8000576:	695a      	ldr	r2, [r3, #20]
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	031b      	lsls	r3, r3, #12
 800057c:	4013      	ands	r3, r2
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000582:	4b26      	ldr	r3, [pc, #152]	; (800061c <MX_GPIO_Init+0xcc>)
 8000584:	695a      	ldr	r2, [r3, #20]
 8000586:	4b25      	ldr	r3, [pc, #148]	; (800061c <MX_GPIO_Init+0xcc>)
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	03c9      	lsls	r1, r1, #15
 800058c:	430a      	orrs	r2, r1
 800058e:	615a      	str	r2, [r3, #20]
 8000590:	4b22      	ldr	r3, [pc, #136]	; (800061c <MX_GPIO_Init+0xcc>)
 8000592:	695a      	ldr	r2, [r3, #20]
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	03db      	lsls	r3, r3, #15
 8000598:	4013      	ands	r3, r2
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b1f      	ldr	r3, [pc, #124]	; (800061c <MX_GPIO_Init+0xcc>)
 80005a0:	695a      	ldr	r2, [r3, #20]
 80005a2:	4b1e      	ldr	r3, [pc, #120]	; (800061c <MX_GPIO_Init+0xcc>)
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	0289      	lsls	r1, r1, #10
 80005a8:	430a      	orrs	r2, r1
 80005aa:	615a      	str	r2, [r3, #20]
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <MX_GPIO_Init+0xcc>)
 80005ae:	695a      	ldr	r2, [r3, #20]
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	029b      	lsls	r3, r3, #10
 80005b4:	4013      	ands	r3, r2
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005ba:	2390      	movs	r3, #144	; 0x90
 80005bc:	05db      	lsls	r3, r3, #23
 80005be:	2200      	movs	r2, #0
 80005c0:	2120      	movs	r1, #32
 80005c2:	0018      	movs	r0, r3
 80005c4:	f001 fad2 	bl	8001b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	0192      	lsls	r2, r2, #6
 80005ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2284      	movs	r2, #132	; 0x84
 80005d4:	0392      	lsls	r2, r2, #14
 80005d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	4a0f      	ldr	r2, [pc, #60]	; (8000620 <MX_GPIO_Init+0xd0>)
 80005e2:	0019      	movs	r1, r3
 80005e4:	0010      	movs	r0, r2
 80005e6:	f001 f949 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005ea:	0021      	movs	r1, r4
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2220      	movs	r2, #32
 80005f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2201      	movs	r2, #1
 80005f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000604:	187a      	adds	r2, r7, r1
 8000606:	2390      	movs	r3, #144	; 0x90
 8000608:	05db      	lsls	r3, r3, #23
 800060a:	0011      	movs	r1, r2
 800060c:	0018      	movs	r0, r3
 800060e:	f001 f935 	bl	800187c <HAL_GPIO_Init>

}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	b009      	add	sp, #36	; 0x24
 8000618:	bd90      	pop	{r4, r7, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	40021000 	.word	0x40021000
 8000620:	48000800 	.word	0x48000800

08000624 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]

	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800062c:	2390      	movs	r3, #144	; 0x90
 800062e:	05db      	lsls	r3, r3, #23
 8000630:	2120      	movs	r1, #32
 8000632:	0018      	movs	r0, r3
 8000634:	f001 fab7 	bl	8001ba6 <HAL_GPIO_TogglePin>
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	b002      	add	sp, #8
 800063e:	bd80      	pop	{r7, pc}

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	e7fe      	b.n	8000648 <Error_Handler+0x8>
	...

0800064c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <HAL_MspInit+0x44>)
 8000654:	699a      	ldr	r2, [r3, #24]
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <HAL_MspInit+0x44>)
 8000658:	2101      	movs	r1, #1
 800065a:	430a      	orrs	r2, r1
 800065c:	619a      	str	r2, [r3, #24]
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <HAL_MspInit+0x44>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	2201      	movs	r2, #1
 8000664:	4013      	ands	r3, r2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <HAL_MspInit+0x44>)
 800066c:	69da      	ldr	r2, [r3, #28]
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <HAL_MspInit+0x44>)
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	0549      	lsls	r1, r1, #21
 8000674:	430a      	orrs	r2, r1
 8000676:	61da      	str	r2, [r3, #28]
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <HAL_MspInit+0x44>)
 800067a:	69da      	ldr	r2, [r3, #28]
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	055b      	lsls	r3, r3, #21
 8000680:	4013      	ands	r3, r2
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	b002      	add	sp, #8
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	40021000 	.word	0x40021000

08000694 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b08b      	sub	sp, #44	; 0x2c
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	2414      	movs	r4, #20
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	0018      	movs	r0, r3
 80006a2:	2314      	movs	r3, #20
 80006a4:	001a      	movs	r2, r3
 80006a6:	2100      	movs	r1, #0
 80006a8:	f002 ff9e 	bl	80035e8 <memset>
  if(hadc->Instance==ADC1)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a39      	ldr	r2, [pc, #228]	; (8000798 <HAL_ADC_MspInit+0x104>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d16b      	bne.n	800078e <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006b6:	4b39      	ldr	r3, [pc, #228]	; (800079c <HAL_ADC_MspInit+0x108>)
 80006b8:	699a      	ldr	r2, [r3, #24]
 80006ba:	4b38      	ldr	r3, [pc, #224]	; (800079c <HAL_ADC_MspInit+0x108>)
 80006bc:	2180      	movs	r1, #128	; 0x80
 80006be:	0089      	lsls	r1, r1, #2
 80006c0:	430a      	orrs	r2, r1
 80006c2:	619a      	str	r2, [r3, #24]
 80006c4:	4b35      	ldr	r3, [pc, #212]	; (800079c <HAL_ADC_MspInit+0x108>)
 80006c6:	699a      	ldr	r2, [r3, #24]
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4013      	ands	r3, r2
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b32      	ldr	r3, [pc, #200]	; (800079c <HAL_ADC_MspInit+0x108>)
 80006d4:	695a      	ldr	r2, [r3, #20]
 80006d6:	4b31      	ldr	r3, [pc, #196]	; (800079c <HAL_ADC_MspInit+0x108>)
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	0289      	lsls	r1, r1, #10
 80006dc:	430a      	orrs	r2, r1
 80006de:	615a      	str	r2, [r3, #20]
 80006e0:	4b2e      	ldr	r3, [pc, #184]	; (800079c <HAL_ADC_MspInit+0x108>)
 80006e2:	695a      	ldr	r2, [r3, #20]
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	029b      	lsls	r3, r3, #10
 80006e8:	4013      	ands	r3, r2
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2203      	movs	r2, #3
 80006f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2203      	movs	r2, #3
 80006f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	193a      	adds	r2, r7, r4
 8000702:	2390      	movs	r3, #144	; 0x90
 8000704:	05db      	lsls	r3, r3, #23
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f001 f8b7 	bl	800187c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800070e:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <HAL_ADC_MspInit+0x10c>)
 8000710:	4a24      	ldr	r2, [pc, #144]	; (80007a4 <HAL_ADC_MspInit+0x110>)
 8000712:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <HAL_ADC_MspInit+0x10c>)
 8000716:	2200      	movs	r2, #0
 8000718:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <HAL_ADC_MspInit+0x10c>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <HAL_ADC_MspInit+0x10c>)
 8000722:	2280      	movs	r2, #128	; 0x80
 8000724:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <HAL_ADC_MspInit+0x10c>)
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	0092      	lsls	r2, r2, #2
 800072c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <HAL_ADC_MspInit+0x10c>)
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <HAL_ADC_MspInit+0x10c>)
 8000738:	2220      	movs	r2, #32
 800073a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <HAL_ADC_MspInit+0x10c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <HAL_ADC_MspInit+0x10c>)
 8000744:	0018      	movs	r0, r3
 8000746:	f000 fee3 	bl	8001510 <HAL_DMA_Init>
 800074a:	1e03      	subs	r3, r0, #0
 800074c:	d001      	beq.n	8000752 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800074e:	f7ff ff77 	bl	8000640 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 8000752:	4a15      	ldr	r2, [pc, #84]	; (80007a8 <HAL_ADC_MspInit+0x114>)
 8000754:	23a8      	movs	r3, #168	; 0xa8
 8000756:	58d3      	ldr	r3, [r2, r3]
 8000758:	4913      	ldr	r1, [pc, #76]	; (80007a8 <HAL_ADC_MspInit+0x114>)
 800075a:	220f      	movs	r2, #15
 800075c:	4393      	bics	r3, r2
 800075e:	22a8      	movs	r2, #168	; 0xa8
 8000760:	508b      	str	r3, [r1, r2]
 8000762:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <HAL_ADC_MspInit+0x114>)
 8000764:	23a8      	movs	r3, #168	; 0xa8
 8000766:	58d3      	ldr	r3, [r2, r3]
 8000768:	490f      	ldr	r1, [pc, #60]	; (80007a8 <HAL_ADC_MspInit+0x114>)
 800076a:	2201      	movs	r2, #1
 800076c:	4313      	orrs	r3, r2
 800076e:	22a8      	movs	r2, #168	; 0xa8
 8000770:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <HAL_ADC_MspInit+0x10c>)
 8000776:	631a      	str	r2, [r3, #48]	; 0x30
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_ADC_MspInit+0x10c>)
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	200c      	movs	r0, #12
 8000784:	f000 fe92 	bl	80014ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000788:	200c      	movs	r0, #12
 800078a:	f000 fea4 	bl	80014d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b00b      	add	sp, #44	; 0x2c
 8000794:	bd90      	pop	{r4, r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40012400 	.word	0x40012400
 800079c:	40021000 	.word	0x40021000
 80007a0:	20000100 	.word	0x20000100
 80007a4:	40020008 	.word	0x40020008
 80007a8:	40020000 	.word	0x40020000

080007ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	05db      	lsls	r3, r3, #23
 80007bc:	429a      	cmp	r2, r3
 80007be:	d10b      	bne.n	80007d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <HAL_TIM_Base_MspInit+0x34>)
 80007c2:	69da      	ldr	r2, [r3, #28]
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_TIM_Base_MspInit+0x34>)
 80007c6:	2101      	movs	r1, #1
 80007c8:	430a      	orrs	r2, r1
 80007ca:	61da      	str	r2, [r3, #28]
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <HAL_TIM_Base_MspInit+0x34>)
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	2201      	movs	r2, #1
 80007d2:	4013      	ands	r3, r2
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b004      	add	sp, #16
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021000 	.word	0x40021000

080007e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b08b      	sub	sp, #44	; 0x2c
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	2414      	movs	r4, #20
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	0018      	movs	r0, r3
 80007f2:	2314      	movs	r3, #20
 80007f4:	001a      	movs	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	f002 fef6 	bl	80035e8 <memset>
  if(huart->Instance==USART2)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a1c      	ldr	r2, [pc, #112]	; (8000874 <HAL_UART_MspInit+0x90>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d132      	bne.n	800086c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000806:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <HAL_UART_MspInit+0x94>)
 8000808:	69da      	ldr	r2, [r3, #28]
 800080a:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <HAL_UART_MspInit+0x94>)
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	0289      	lsls	r1, r1, #10
 8000810:	430a      	orrs	r2, r1
 8000812:	61da      	str	r2, [r3, #28]
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <HAL_UART_MspInit+0x94>)
 8000816:	69da      	ldr	r2, [r3, #28]
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	029b      	lsls	r3, r3, #10
 800081c:	4013      	ands	r3, r2
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <HAL_UART_MspInit+0x94>)
 8000824:	695a      	ldr	r2, [r3, #20]
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <HAL_UART_MspInit+0x94>)
 8000828:	2180      	movs	r1, #128	; 0x80
 800082a:	0289      	lsls	r1, r1, #10
 800082c:	430a      	orrs	r2, r1
 800082e:	615a      	str	r2, [r3, #20]
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <HAL_UART_MspInit+0x94>)
 8000832:	695a      	ldr	r2, [r3, #20]
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	029b      	lsls	r3, r3, #10
 8000838:	4013      	ands	r3, r2
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800083e:	0021      	movs	r1, r4
 8000840:	187b      	adds	r3, r7, r1
 8000842:	220c      	movs	r2, #12
 8000844:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2202      	movs	r2, #2
 800084a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2201      	movs	r2, #1
 800085c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	187a      	adds	r2, r7, r1
 8000860:	2390      	movs	r3, #144	; 0x90
 8000862:	05db      	lsls	r3, r3, #23
 8000864:	0011      	movs	r1, r2
 8000866:	0018      	movs	r0, r3
 8000868:	f001 f808 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b00b      	add	sp, #44	; 0x2c
 8000872:	bd90      	pop	{r4, r7, pc}
 8000874:	40004400 	.word	0x40004400
 8000878:	40021000 	.word	0x40021000

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <NMI_Handler+0x4>

08000882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <HardFault_Handler+0x4>

08000888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a0:	f000 f894 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <DMA1_Ch1_IRQHandler+0x14>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 feda 	bl	800166c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	20000100 	.word	0x20000100

080008c4 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <ADC1_COMP_IRQHandler+0x14>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 fa5c 	bl	8000d88 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	20000144 	.word	0x20000144

080008dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008e8:	480d      	ldr	r0, [pc, #52]	; (8000920 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ee:	490e      	ldr	r1, [pc, #56]	; (8000928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f0:	4a0e      	ldr	r2, [pc, #56]	; (800092c <LoopForever+0xe>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f4:	e002      	b.n	80008fc <LoopCopyDataInit>

080008f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fa:	3304      	adds	r3, #4

080008fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000900:	d3f9      	bcc.n	80008f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000902:	4a0b      	ldr	r2, [pc, #44]	; (8000930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000904:	4c0b      	ldr	r4, [pc, #44]	; (8000934 <LoopForever+0x16>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000908:	e001      	b.n	800090e <LoopFillZerobss>

0800090a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800090c:	3204      	adds	r2, #4

0800090e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000910:	d3fb      	bcc.n	800090a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000912:	f7ff ffe3 	bl	80008dc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000916:	f002 fe43 	bl	80035a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091a:	f7ff fc7f 	bl	800021c <main>

0800091e <LoopForever>:

LoopForever:
    b LoopForever
 800091e:	e7fe      	b.n	800091e <LoopForever>
  ldr   r0, =_estack
 8000920:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000928:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800092c:	08003650 	.word	0x08003650
  ldr r2, =_sbss
 8000930:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000934:	2000018c 	.word	0x2000018c

08000938 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <CEC_CAN_IRQHandler>
	...

0800093c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <HAL_Init+0x24>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_Init+0x24>)
 8000946:	2110      	movs	r1, #16
 8000948:	430a      	orrs	r2, r1
 800094a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800094c:	2000      	movs	r0, #0
 800094e:	f000 f809 	bl	8000964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000952:	f7ff fe7b 	bl	800064c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000956:	2300      	movs	r3, #0
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	40022000 	.word	0x40022000

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <HAL_InitTick+0x5c>)
 800096e:	681c      	ldr	r4, [r3, #0]
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <HAL_InitTick+0x60>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	0019      	movs	r1, r3
 8000976:	23fa      	movs	r3, #250	; 0xfa
 8000978:	0098      	lsls	r0, r3, #2
 800097a:	f7ff fbc3 	bl	8000104 <__udivsi3>
 800097e:	0003      	movs	r3, r0
 8000980:	0019      	movs	r1, r3
 8000982:	0020      	movs	r0, r4
 8000984:	f7ff fbbe 	bl	8000104 <__udivsi3>
 8000988:	0003      	movs	r3, r0
 800098a:	0018      	movs	r0, r3
 800098c:	f000 fdb3 	bl	80014f6 <HAL_SYSTICK_Config>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d001      	beq.n	8000998 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000994:	2301      	movs	r3, #1
 8000996:	e00f      	b.n	80009b8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b03      	cmp	r3, #3
 800099c:	d80b      	bhi.n	80009b6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	2301      	movs	r3, #1
 80009a2:	425b      	negs	r3, r3
 80009a4:	2200      	movs	r2, #0
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 fd80 	bl	80014ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_InitTick+0x64>)
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e000      	b.n	80009b8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	0018      	movs	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b003      	add	sp, #12
 80009be:	bd90      	pop	{r4, r7, pc}
 80009c0:	20000000 	.word	0x20000000
 80009c4:	20000008 	.word	0x20000008
 80009c8:	20000004 	.word	0x20000004

080009cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_IncTick+0x1c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	001a      	movs	r2, r3
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_IncTick+0x20>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	18d2      	adds	r2, r2, r3
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <HAL_IncTick+0x20>)
 80009de:	601a      	str	r2, [r3, #0]
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000188 	.word	0x20000188

080009f0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b02      	ldr	r3, [pc, #8]	; (8000a00 <HAL_GetTick+0x10>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	0018      	movs	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	20000188 	.word	0x20000188

08000a04 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	18fb      	adds	r3, r7, r3
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d101      	bne.n	8000a22 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e125      	b.n	8000c6e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10a      	bne.n	8000a40 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2234      	movs	r2, #52	; 0x34
 8000a34:	2100      	movs	r1, #0
 8000a36:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f7ff fe2a 	bl	8000694 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a44:	2210      	movs	r2, #16
 8000a46:	4013      	ands	r3, r2
 8000a48:	d000      	beq.n	8000a4c <HAL_ADC_Init+0x48>
 8000a4a:	e103      	b.n	8000c54 <HAL_ADC_Init+0x250>
 8000a4c:	230f      	movs	r3, #15
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d000      	beq.n	8000a58 <HAL_ADC_Init+0x54>
 8000a56:	e0fd      	b.n	8000c54 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	2204      	movs	r2, #4
 8000a60:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000a62:	d000      	beq.n	8000a66 <HAL_ADC_Init+0x62>
 8000a64:	e0f6      	b.n	8000c54 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a6a:	4a83      	ldr	r2, [pc, #524]	; (8000c78 <HAL_ADC_Init+0x274>)
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	2202      	movs	r2, #2
 8000a70:	431a      	orrs	r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	4013      	ands	r3, r2
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d112      	bne.n	8000aaa <HAL_ADC_Init+0xa6>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d009      	beq.n	8000aa6 <HAL_ADC_Init+0xa2>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	68da      	ldr	r2, [r3, #12]
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	021b      	lsls	r3, r3, #8
 8000a9c:	401a      	ands	r2, r3
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	021b      	lsls	r3, r3, #8
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d101      	bne.n	8000aaa <HAL_ADC_Init+0xa6>
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e000      	b.n	8000aac <HAL_ADC_Init+0xa8>
 8000aaa:	2300      	movs	r3, #0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d116      	bne.n	8000ade <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	2218      	movs	r2, #24
 8000ab8:	4393      	bics	r3, r2
 8000aba:	0019      	movs	r1, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	689a      	ldr	r2, [r3, #8]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	691b      	ldr	r3, [r3, #16]
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	0899      	lsrs	r1, r3, #2
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	430a      	orrs	r2, r1
 8000adc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	68da      	ldr	r2, [r3, #12]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4964      	ldr	r1, [pc, #400]	; (8000c7c <HAL_ADC_Init+0x278>)
 8000aea:	400a      	ands	r2, r1
 8000aec:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	7e1b      	ldrb	r3, [r3, #24]
 8000af2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	7e5b      	ldrb	r3, [r3, #25]
 8000af8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000afa:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7e9b      	ldrb	r3, [r3, #26]
 8000b00:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000b02:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d002      	beq.n	8000b12 <HAL_ADC_Init+0x10e>
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	015b      	lsls	r3, r3, #5
 8000b10:	e000      	b.n	8000b14 <HAL_ADC_Init+0x110>
 8000b12:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000b14:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000b1a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	691b      	ldr	r3, [r3, #16]
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d101      	bne.n	8000b28 <HAL_ADC_Init+0x124>
 8000b24:	2304      	movs	r3, #4
 8000b26:	e000      	b.n	8000b2a <HAL_ADC_Init+0x126>
 8000b28:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000b2a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2124      	movs	r1, #36	; 0x24
 8000b30:	5c5b      	ldrb	r3, [r3, r1]
 8000b32:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000b34:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7edb      	ldrb	r3, [r3, #27]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d115      	bne.n	8000b70 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7e9b      	ldrb	r3, [r3, #26]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d105      	bne.n	8000b58 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	2280      	movs	r2, #128	; 0x80
 8000b50:	0252      	lsls	r2, r2, #9
 8000b52:	4313      	orrs	r3, r2
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	e00b      	b.n	8000b70 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b5c:	2220      	movs	r2, #32
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b68:	2201      	movs	r2, #1
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	69da      	ldr	r2, [r3, #28]
 8000b74:	23c2      	movs	r3, #194	; 0xc2
 8000b76:	33ff      	adds	r3, #255	; 0xff
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d007      	beq.n	8000b8c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000b84:	4313      	orrs	r3, r2
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	68d9      	ldr	r1, [r3, #12]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	055b      	lsls	r3, r3, #21
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d01b      	beq.n	8000be0 <HAL_ADC_Init+0x1dc>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d017      	beq.n	8000be0 <HAL_ADC_Init+0x1dc>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d013      	beq.n	8000be0 <HAL_ADC_Init+0x1dc>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d00f      	beq.n	8000be0 <HAL_ADC_Init+0x1dc>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	d00b      	beq.n	8000be0 <HAL_ADC_Init+0x1dc>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bcc:	2b05      	cmp	r3, #5
 8000bce:	d007      	beq.n	8000be0 <HAL_ADC_Init+0x1dc>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd4:	2b06      	cmp	r3, #6
 8000bd6:	d003      	beq.n	8000be0 <HAL_ADC_Init+0x1dc>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bdc:	2b07      	cmp	r3, #7
 8000bde:	d112      	bne.n	8000c06 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	695a      	ldr	r2, [r3, #20]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2107      	movs	r1, #7
 8000bec:	438a      	bics	r2, r1
 8000bee:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6959      	ldr	r1, [r3, #20]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfa:	2207      	movs	r2, #7
 8000bfc:	401a      	ands	r2, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	430a      	orrs	r2, r1
 8000c04:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <HAL_ADC_Init+0x27c>)
 8000c0e:	4013      	ands	r3, r2
 8000c10:	68ba      	ldr	r2, [r7, #8]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d10b      	bne.n	8000c2e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c20:	2203      	movs	r2, #3
 8000c22:	4393      	bics	r3, r2
 8000c24:	2201      	movs	r2, #1
 8000c26:	431a      	orrs	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c2c:	e01c      	b.n	8000c68 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c32:	2212      	movs	r2, #18
 8000c34:	4393      	bics	r3, r2
 8000c36:	2210      	movs	r2, #16
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c42:	2201      	movs	r2, #1
 8000c44:	431a      	orrs	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c52:	e009      	b.n	8000c68 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c58:	2210      	movs	r2, #16
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000c60:	230f      	movs	r3, #15
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c68:	230f      	movs	r3, #15
 8000c6a:	18fb      	adds	r3, r7, r3
 8000c6c:	781b      	ldrb	r3, [r3, #0]
}
 8000c6e:	0018      	movs	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b004      	add	sp, #16
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	fffffefd 	.word	0xfffffefd
 8000c7c:	fffe0219 	.word	0xfffe0219
 8000c80:	833fffe7 	.word	0x833fffe7

08000c84 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b087      	sub	sp, #28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c90:	2317      	movs	r3, #23
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	2204      	movs	r2, #4
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	d15e      	bne.n	8000d62 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2234      	movs	r2, #52	; 0x34
 8000ca8:	5c9b      	ldrb	r3, [r3, r2]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d101      	bne.n	8000cb2 <HAL_ADC_Start_DMA+0x2e>
 8000cae:	2302      	movs	r3, #2
 8000cb0:	e05e      	b.n	8000d70 <HAL_ADC_Start_DMA+0xec>
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2234      	movs	r2, #52	; 0x34
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	7e5b      	ldrb	r3, [r3, #25]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d007      	beq.n	8000cd2 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000cc2:	2317      	movs	r3, #23
 8000cc4:	18fc      	adds	r4, r7, r3
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f000 fa3b 	bl	8001144 <ADC_Enable>
 8000cce:	0003      	movs	r3, r0
 8000cd0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000cd2:	2317      	movs	r3, #23
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d146      	bne.n	8000d6a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce0:	4a25      	ldr	r2, [pc, #148]	; (8000d78 <HAL_ADC_Start_DMA+0xf4>)
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	2280      	movs	r2, #128	; 0x80
 8000ce6:	0052      	lsls	r2, r2, #1
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2234      	movs	r2, #52	; 0x34
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	4a1e      	ldr	r2, [pc, #120]	; (8000d7c <HAL_ADC_Start_DMA+0xf8>)
 8000d02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	4a1d      	ldr	r2, [pc, #116]	; (8000d80 <HAL_ADC_Start_DMA+0xfc>)
 8000d0a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	4a1c      	ldr	r2, [pc, #112]	; (8000d84 <HAL_ADC_Start_DMA+0x100>)
 8000d12:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	221c      	movs	r2, #28
 8000d1a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2110      	movs	r1, #16
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2101      	movs	r1, #1
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	3340      	adds	r3, #64	; 0x40
 8000d46:	0019      	movs	r1, r3
 8000d48:	68ba      	ldr	r2, [r7, #8]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f000 fc28 	bl	80015a0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2104      	movs	r1, #4
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	e003      	b.n	8000d6a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000d62:	2317      	movs	r3, #23
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	2202      	movs	r2, #2
 8000d68:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d6a:	2317      	movs	r3, #23
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	781b      	ldrb	r3, [r3, #0]
}
 8000d70:	0018      	movs	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b007      	add	sp, #28
 8000d76:	bd90      	pop	{r4, r7, pc}
 8000d78:	fffff0fe 	.word	0xfffff0fe
 8000d7c:	0800124d 	.word	0x0800124d
 8000d80:	08001301 	.word	0x08001301
 8000d84:	0800131f 	.word	0x0800131f

08000d88 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2204      	movs	r2, #4
 8000d98:	4013      	ands	r3, r2
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	d106      	bne.n	8000dac <HAL_ADC_IRQHandler+0x24>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2204      	movs	r2, #4
 8000da6:	4013      	ands	r3, r2
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	d00d      	beq.n	8000dc8 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2208      	movs	r2, #8
 8000db4:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000db6:	2b08      	cmp	r3, #8
 8000db8:	d14f      	bne.n	8000e5a <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2208      	movs	r2, #8
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2b08      	cmp	r3, #8
 8000dc6:	d148      	bne.n	8000e5a <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dcc:	2210      	movs	r2, #16
 8000dce:	4013      	ands	r3, r2
 8000dd0:	d106      	bne.n	8000de0 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	0092      	lsls	r2, r2, #2
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	23c0      	movs	r3, #192	; 0xc0
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	4013      	ands	r3, r2
 8000dec:	d12d      	bne.n	8000e4a <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d129      	bne.n	8000e4a <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2208      	movs	r2, #8
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b08      	cmp	r3, #8
 8000e02:	d122      	bne.n	8000e4a <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d110      	bne.n	8000e32 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	210c      	movs	r1, #12
 8000e1c:	438a      	bics	r2, r1
 8000e1e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e24:	4a33      	ldr	r2, [pc, #204]	; (8000ef4 <HAL_ADC_IRQHandler+0x16c>)
 8000e26:	4013      	ands	r3, r2
 8000e28:	2201      	movs	r2, #1
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	639a      	str	r2, [r3, #56]	; 0x38
 8000e30:	e00b      	b.n	8000e4a <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e36:	2220      	movs	r2, #32
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e42:	2201      	movs	r2, #1
 8000e44:	431a      	orrs	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff fbe9 	bl	8000624 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	220c      	movs	r2, #12
 8000e58:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	4013      	ands	r3, r2
 8000e64:	2b80      	cmp	r3, #128	; 0x80
 8000e66:	d115      	bne.n	8000e94 <HAL_ADC_IRQHandler+0x10c>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2280      	movs	r2, #128	; 0x80
 8000e70:	4013      	ands	r3, r2
 8000e72:	2b80      	cmp	r3, #128	; 0x80
 8000e74:	d10e      	bne.n	8000e94 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e7a:	2280      	movs	r2, #128	; 0x80
 8000e7c:	0252      	lsls	r2, r2, #9
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	0018      	movs	r0, r3
 8000e88:	f000 f83e 	bl	8000f08 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2280      	movs	r2, #128	; 0x80
 8000e92:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2210      	movs	r2, #16
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	2b10      	cmp	r3, #16
 8000ea0:	d123      	bne.n	8000eea <HAL_ADC_IRQHandler+0x162>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2210      	movs	r2, #16
 8000eaa:	4013      	ands	r3, r2
 8000eac:	2b10      	cmp	r3, #16
 8000eae:	d11c      	bne.n	8000eea <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d006      	beq.n	8000ec6 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d10d      	bne.n	8000ee2 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eca:	2202      	movs	r2, #2
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2210      	movs	r2, #16
 8000ed8:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	0018      	movs	r0, r3
 8000ede:	f000 f81b 	bl	8000f18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2210      	movs	r2, #16
 8000ee8:	601a      	str	r2, [r3, #0]
  }

}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	fffffefe 	.word	0xfffffefe

08000ef8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b002      	add	sp, #8
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b002      	add	sp, #8
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b002      	add	sp, #8
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f32:	230f      	movs	r3, #15
 8000f34:	18fb      	adds	r3, r7, r3
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	055b      	lsls	r3, r3, #21
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d011      	beq.n	8000f6e <HAL_ADC_ConfigChannel+0x46>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d00d      	beq.n	8000f6e <HAL_ADC_ConfigChannel+0x46>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d009      	beq.n	8000f6e <HAL_ADC_ConfigChannel+0x46>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d005      	beq.n	8000f6e <HAL_ADC_ConfigChannel+0x46>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	d001      	beq.n	8000f6e <HAL_ADC_ConfigChannel+0x46>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2234      	movs	r2, #52	; 0x34
 8000f72:	5c9b      	ldrb	r3, [r3, r2]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d101      	bne.n	8000f7c <HAL_ADC_ConfigChannel+0x54>
 8000f78:	2302      	movs	r3, #2
 8000f7a:	e0d0      	b.n	800111e <HAL_ADC_ConfigChannel+0x1f6>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2234      	movs	r2, #52	; 0x34
 8000f80:	2101      	movs	r1, #1
 8000f82:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	d000      	beq.n	8000f92 <HAL_ADC_ConfigChannel+0x6a>
 8000f90:	e0b4      	b.n	80010fc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	4a64      	ldr	r2, [pc, #400]	; (8001128 <HAL_ADC_ConfigChannel+0x200>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d100      	bne.n	8000f9e <HAL_ADC_ConfigChannel+0x76>
 8000f9c:	e082      	b.n	80010a4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	409a      	lsls	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	055b      	lsls	r3, r3, #21
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d037      	beq.n	8001030 <HAL_ADC_ConfigChannel+0x108>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d033      	beq.n	8001030 <HAL_ADC_ConfigChannel+0x108>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d02f      	beq.n	8001030 <HAL_ADC_ConfigChannel+0x108>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d02b      	beq.n	8001030 <HAL_ADC_ConfigChannel+0x108>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d027      	beq.n	8001030 <HAL_ADC_ConfigChannel+0x108>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe4:	2b05      	cmp	r3, #5
 8000fe6:	d023      	beq.n	8001030 <HAL_ADC_ConfigChannel+0x108>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fec:	2b06      	cmp	r3, #6
 8000fee:	d01f      	beq.n	8001030 <HAL_ADC_ConfigChannel+0x108>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff4:	2b07      	cmp	r3, #7
 8000ff6:	d01b      	beq.n	8001030 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	2107      	movs	r1, #7
 8001004:	400b      	ands	r3, r1
 8001006:	429a      	cmp	r2, r3
 8001008:	d012      	beq.n	8001030 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	695a      	ldr	r2, [r3, #20]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2107      	movs	r1, #7
 8001016:	438a      	bics	r2, r1
 8001018:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6959      	ldr	r1, [r3, #20]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	2207      	movs	r2, #7
 8001026:	401a      	ands	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	430a      	orrs	r2, r1
 800102e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b10      	cmp	r3, #16
 8001036:	d007      	beq.n	8001048 <HAL_ADC_ConfigChannel+0x120>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b11      	cmp	r3, #17
 800103e:	d003      	beq.n	8001048 <HAL_ADC_ConfigChannel+0x120>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b12      	cmp	r3, #18
 8001046:	d163      	bne.n	8001110 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001048:	4b38      	ldr	r3, [pc, #224]	; (800112c <HAL_ADC_ConfigChannel+0x204>)
 800104a:	6819      	ldr	r1, [r3, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b10      	cmp	r3, #16
 8001052:	d009      	beq.n	8001068 <HAL_ADC_ConfigChannel+0x140>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b11      	cmp	r3, #17
 800105a:	d102      	bne.n	8001062 <HAL_ADC_ConfigChannel+0x13a>
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	03db      	lsls	r3, r3, #15
 8001060:	e004      	b.n	800106c <HAL_ADC_ConfigChannel+0x144>
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	045b      	lsls	r3, r3, #17
 8001066:	e001      	b.n	800106c <HAL_ADC_ConfigChannel+0x144>
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	041b      	lsls	r3, r3, #16
 800106c:	4a2f      	ldr	r2, [pc, #188]	; (800112c <HAL_ADC_ConfigChannel+0x204>)
 800106e:	430b      	orrs	r3, r1
 8001070:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b10      	cmp	r3, #16
 8001078:	d14a      	bne.n	8001110 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800107a:	4b2d      	ldr	r3, [pc, #180]	; (8001130 <HAL_ADC_ConfigChannel+0x208>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	492d      	ldr	r1, [pc, #180]	; (8001134 <HAL_ADC_ConfigChannel+0x20c>)
 8001080:	0018      	movs	r0, r3
 8001082:	f7ff f83f 	bl	8000104 <__udivsi3>
 8001086:	0003      	movs	r3, r0
 8001088:	001a      	movs	r2, r3
 800108a:	0013      	movs	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	189b      	adds	r3, r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001094:	e002      	b.n	800109c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	3b01      	subs	r3, #1
 800109a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f9      	bne.n	8001096 <HAL_ADC_ConfigChannel+0x16e>
 80010a2:	e035      	b.n	8001110 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2101      	movs	r1, #1
 80010b0:	4099      	lsls	r1, r3
 80010b2:	000b      	movs	r3, r1
 80010b4:	43d9      	mvns	r1, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	400a      	ands	r2, r1
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b10      	cmp	r3, #16
 80010c4:	d007      	beq.n	80010d6 <HAL_ADC_ConfigChannel+0x1ae>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b11      	cmp	r3, #17
 80010cc:	d003      	beq.n	80010d6 <HAL_ADC_ConfigChannel+0x1ae>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b12      	cmp	r3, #18
 80010d4:	d11c      	bne.n	8001110 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_ADC_ConfigChannel+0x204>)
 80010d8:	6819      	ldr	r1, [r3, #0]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b10      	cmp	r3, #16
 80010e0:	d007      	beq.n	80010f2 <HAL_ADC_ConfigChannel+0x1ca>
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b11      	cmp	r3, #17
 80010e8:	d101      	bne.n	80010ee <HAL_ADC_ConfigChannel+0x1c6>
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <HAL_ADC_ConfigChannel+0x210>)
 80010ec:	e002      	b.n	80010f4 <HAL_ADC_ConfigChannel+0x1cc>
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <HAL_ADC_ConfigChannel+0x214>)
 80010f0:	e000      	b.n	80010f4 <HAL_ADC_ConfigChannel+0x1cc>
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <HAL_ADC_ConfigChannel+0x218>)
 80010f4:	4a0d      	ldr	r2, [pc, #52]	; (800112c <HAL_ADC_ConfigChannel+0x204>)
 80010f6:	400b      	ands	r3, r1
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	e009      	b.n	8001110 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001100:	2220      	movs	r2, #32
 8001102:	431a      	orrs	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001108:	230f      	movs	r3, #15
 800110a:	18fb      	adds	r3, r7, r3
 800110c:	2201      	movs	r2, #1
 800110e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2234      	movs	r2, #52	; 0x34
 8001114:	2100      	movs	r1, #0
 8001116:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001118:	230f      	movs	r3, #15
 800111a:	18fb      	adds	r3, r7, r3
 800111c:	781b      	ldrb	r3, [r3, #0]
}
 800111e:	0018      	movs	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	b004      	add	sp, #16
 8001124:	bd80      	pop	{r7, pc}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	00001001 	.word	0x00001001
 800112c:	40012708 	.word	0x40012708
 8001130:	20000000 	.word	0x20000000
 8001134:	000f4240 	.word	0x000f4240
 8001138:	ffbfffff 	.word	0xffbfffff
 800113c:	feffffff 	.word	0xfeffffff
 8001140:	ff7fffff 	.word	0xff7fffff

08001144 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2203      	movs	r2, #3
 800115c:	4013      	ands	r3, r2
 800115e:	2b01      	cmp	r3, #1
 8001160:	d112      	bne.n	8001188 <ADC_Enable+0x44>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2201      	movs	r2, #1
 800116a:	4013      	ands	r3, r2
 800116c:	2b01      	cmp	r3, #1
 800116e:	d009      	beq.n	8001184 <ADC_Enable+0x40>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	401a      	ands	r2, r3
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	429a      	cmp	r2, r3
 8001182:	d101      	bne.n	8001188 <ADC_Enable+0x44>
 8001184:	2301      	movs	r3, #1
 8001186:	e000      	b.n	800118a <ADC_Enable+0x46>
 8001188:	2300      	movs	r3, #0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d152      	bne.n	8001234 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	4a2a      	ldr	r2, [pc, #168]	; (8001240 <ADC_Enable+0xfc>)
 8001196:	4013      	ands	r3, r2
 8001198:	d00d      	beq.n	80011b6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119e:	2210      	movs	r2, #16
 80011a0:	431a      	orrs	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011aa:	2201      	movs	r2, #1
 80011ac:	431a      	orrs	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e03f      	b.n	8001236 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2101      	movs	r1, #1
 80011c2:	430a      	orrs	r2, r1
 80011c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <ADC_Enable+0x100>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	491f      	ldr	r1, [pc, #124]	; (8001248 <ADC_Enable+0x104>)
 80011cc:	0018      	movs	r0, r3
 80011ce:	f7fe ff99 	bl	8000104 <__udivsi3>
 80011d2:	0003      	movs	r3, r0
 80011d4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80011d6:	e002      	b.n	80011de <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	3b01      	subs	r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f9      	bne.n	80011d8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80011e4:	f7ff fc04 	bl	80009f0 <HAL_GetTick>
 80011e8:	0003      	movs	r3, r0
 80011ea:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80011ec:	e01b      	b.n	8001226 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80011ee:	f7ff fbff 	bl	80009f0 <HAL_GetTick>
 80011f2:	0002      	movs	r2, r0
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d914      	bls.n	8001226 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2201      	movs	r2, #1
 8001204:	4013      	ands	r3, r2
 8001206:	2b01      	cmp	r3, #1
 8001208:	d00d      	beq.n	8001226 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800120e:	2210      	movs	r2, #16
 8001210:	431a      	orrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800121a:	2201      	movs	r2, #1
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e007      	b.n	8001236 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2201      	movs	r2, #1
 800122e:	4013      	ands	r3, r2
 8001230:	2b01      	cmp	r3, #1
 8001232:	d1dc      	bne.n	80011ee <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	0018      	movs	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	b004      	add	sp, #16
 800123c:	bd80      	pop	{r7, pc}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	80000017 	.word	0x80000017
 8001244:	20000000 	.word	0x20000000
 8001248:	000f4240 	.word	0x000f4240

0800124c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125e:	2250      	movs	r2, #80	; 0x50
 8001260:	4013      	ands	r3, r2
 8001262:	d140      	bne.n	80012e6 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	431a      	orrs	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	23c0      	movs	r3, #192	; 0xc0
 800127a:	011b      	lsls	r3, r3, #4
 800127c:	4013      	ands	r3, r2
 800127e:	d12d      	bne.n	80012dc <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001284:	2b00      	cmp	r3, #0
 8001286:	d129      	bne.n	80012dc <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2208      	movs	r2, #8
 8001290:	4013      	ands	r3, r2
 8001292:	2b08      	cmp	r3, #8
 8001294:	d122      	bne.n	80012dc <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2204      	movs	r2, #4
 800129e:	4013      	ands	r3, r2
 80012a0:	d110      	bne.n	80012c4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	210c      	movs	r1, #12
 80012ae:	438a      	bics	r2, r1
 80012b0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b6:	4a11      	ldr	r2, [pc, #68]	; (80012fc <ADC_DMAConvCplt+0xb0>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	2201      	movs	r2, #1
 80012bc:	431a      	orrs	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	639a      	str	r2, [r3, #56]	; 0x38
 80012c2:	e00b      	b.n	80012dc <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c8:	2220      	movs	r2, #32
 80012ca:	431a      	orrs	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d4:	2201      	movs	r2, #1
 80012d6:	431a      	orrs	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	0018      	movs	r0, r3
 80012e0:	f7ff f9a0 	bl	8000624 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80012e4:	e005      	b.n	80012f2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	0010      	movs	r0, r2
 80012f0:	4798      	blx	r3
}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b004      	add	sp, #16
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	fffffefe 	.word	0xfffffefe

08001300 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff fdf1 	bl	8000ef8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b004      	add	sp, #16
 800131c:	bd80      	pop	{r7, pc}

0800131e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b084      	sub	sp, #16
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001330:	2240      	movs	r2, #64	; 0x40
 8001332:	431a      	orrs	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800133c:	2204      	movs	r2, #4
 800133e:	431a      	orrs	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	0018      	movs	r0, r3
 8001348:	f7ff fde6 	bl	8000f18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800134c:	46c0      	nop			; (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	b004      	add	sp, #16
 8001352:	bd80      	pop	{r7, pc}

08001354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	0002      	movs	r2, r0
 800135c:	1dfb      	adds	r3, r7, #7
 800135e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001360:	1dfb      	adds	r3, r7, #7
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b7f      	cmp	r3, #127	; 0x7f
 8001366:	d809      	bhi.n	800137c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001368:	1dfb      	adds	r3, r7, #7
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	001a      	movs	r2, r3
 800136e:	231f      	movs	r3, #31
 8001370:	401a      	ands	r2, r3
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <__NVIC_EnableIRQ+0x30>)
 8001374:	2101      	movs	r1, #1
 8001376:	4091      	lsls	r1, r2
 8001378:	000a      	movs	r2, r1
 800137a:	601a      	str	r2, [r3, #0]
  }
}
 800137c:	46c0      	nop			; (mov r8, r8)
 800137e:	46bd      	mov	sp, r7
 8001380:	b002      	add	sp, #8
 8001382:	bd80      	pop	{r7, pc}
 8001384:	e000e100 	.word	0xe000e100

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	0002      	movs	r2, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b7f      	cmp	r3, #127	; 0x7f
 800139c:	d828      	bhi.n	80013f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800139e:	4a2f      	ldr	r2, [pc, #188]	; (800145c <__NVIC_SetPriority+0xd4>)
 80013a0:	1dfb      	adds	r3, r7, #7
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b25b      	sxtb	r3, r3
 80013a6:	089b      	lsrs	r3, r3, #2
 80013a8:	33c0      	adds	r3, #192	; 0xc0
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	589b      	ldr	r3, [r3, r2]
 80013ae:	1dfa      	adds	r2, r7, #7
 80013b0:	7812      	ldrb	r2, [r2, #0]
 80013b2:	0011      	movs	r1, r2
 80013b4:	2203      	movs	r2, #3
 80013b6:	400a      	ands	r2, r1
 80013b8:	00d2      	lsls	r2, r2, #3
 80013ba:	21ff      	movs	r1, #255	; 0xff
 80013bc:	4091      	lsls	r1, r2
 80013be:	000a      	movs	r2, r1
 80013c0:	43d2      	mvns	r2, r2
 80013c2:	401a      	ands	r2, r3
 80013c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	019b      	lsls	r3, r3, #6
 80013ca:	22ff      	movs	r2, #255	; 0xff
 80013cc:	401a      	ands	r2, r3
 80013ce:	1dfb      	adds	r3, r7, #7
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	0018      	movs	r0, r3
 80013d4:	2303      	movs	r3, #3
 80013d6:	4003      	ands	r3, r0
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013dc:	481f      	ldr	r0, [pc, #124]	; (800145c <__NVIC_SetPriority+0xd4>)
 80013de:	1dfb      	adds	r3, r7, #7
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b25b      	sxtb	r3, r3
 80013e4:	089b      	lsrs	r3, r3, #2
 80013e6:	430a      	orrs	r2, r1
 80013e8:	33c0      	adds	r3, #192	; 0xc0
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013ee:	e031      	b.n	8001454 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f0:	4a1b      	ldr	r2, [pc, #108]	; (8001460 <__NVIC_SetPriority+0xd8>)
 80013f2:	1dfb      	adds	r3, r7, #7
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	0019      	movs	r1, r3
 80013f8:	230f      	movs	r3, #15
 80013fa:	400b      	ands	r3, r1
 80013fc:	3b08      	subs	r3, #8
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	3306      	adds	r3, #6
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	18d3      	adds	r3, r2, r3
 8001406:	3304      	adds	r3, #4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	1dfa      	adds	r2, r7, #7
 800140c:	7812      	ldrb	r2, [r2, #0]
 800140e:	0011      	movs	r1, r2
 8001410:	2203      	movs	r2, #3
 8001412:	400a      	ands	r2, r1
 8001414:	00d2      	lsls	r2, r2, #3
 8001416:	21ff      	movs	r1, #255	; 0xff
 8001418:	4091      	lsls	r1, r2
 800141a:	000a      	movs	r2, r1
 800141c:	43d2      	mvns	r2, r2
 800141e:	401a      	ands	r2, r3
 8001420:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	019b      	lsls	r3, r3, #6
 8001426:	22ff      	movs	r2, #255	; 0xff
 8001428:	401a      	ands	r2, r3
 800142a:	1dfb      	adds	r3, r7, #7
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	0018      	movs	r0, r3
 8001430:	2303      	movs	r3, #3
 8001432:	4003      	ands	r3, r0
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001438:	4809      	ldr	r0, [pc, #36]	; (8001460 <__NVIC_SetPriority+0xd8>)
 800143a:	1dfb      	adds	r3, r7, #7
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	001c      	movs	r4, r3
 8001440:	230f      	movs	r3, #15
 8001442:	4023      	ands	r3, r4
 8001444:	3b08      	subs	r3, #8
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	430a      	orrs	r2, r1
 800144a:	3306      	adds	r3, #6
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	18c3      	adds	r3, r0, r3
 8001450:	3304      	adds	r3, #4
 8001452:	601a      	str	r2, [r3, #0]
}
 8001454:	46c0      	nop			; (mov r8, r8)
 8001456:	46bd      	mov	sp, r7
 8001458:	b003      	add	sp, #12
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	e000e100 	.word	0xe000e100
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	1e5a      	subs	r2, r3, #1
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	045b      	lsls	r3, r3, #17
 8001474:	429a      	cmp	r2, r3
 8001476:	d301      	bcc.n	800147c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001478:	2301      	movs	r3, #1
 800147a:	e010      	b.n	800149e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <SysTick_Config+0x44>)
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	3a01      	subs	r2, #1
 8001482:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001484:	2301      	movs	r3, #1
 8001486:	425b      	negs	r3, r3
 8001488:	2103      	movs	r1, #3
 800148a:	0018      	movs	r0, r3
 800148c:	f7ff ff7c 	bl	8001388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <SysTick_Config+0x44>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <SysTick_Config+0x44>)
 8001498:	2207      	movs	r2, #7
 800149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800149c:	2300      	movs	r3, #0
}
 800149e:	0018      	movs	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b002      	add	sp, #8
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	210f      	movs	r1, #15
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	1c02      	adds	r2, r0, #0
 80014bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b25b      	sxtb	r3, r3
 80014c6:	0011      	movs	r1, r2
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff ff5d 	bl	8001388 <__NVIC_SetPriority>
}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	46bd      	mov	sp, r7
 80014d2:	b004      	add	sp, #16
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	0002      	movs	r2, r0
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e2:	1dfb      	adds	r3, r7, #7
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	0018      	movs	r0, r3
 80014ea:	f7ff ff33 	bl	8001354 <__NVIC_EnableIRQ>
}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b002      	add	sp, #8
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	0018      	movs	r0, r3
 8001502:	f7ff ffaf 	bl	8001464 <SysTick_Config>
 8001506:	0003      	movs	r3, r0
}
 8001508:	0018      	movs	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	b002      	add	sp, #8
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e036      	b.n	8001594 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2221      	movs	r2, #33	; 0x21
 800152a:	2102      	movs	r1, #2
 800152c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4a18      	ldr	r2, [pc, #96]	; (800159c <HAL_DMA_Init+0x8c>)
 800153a:	4013      	ands	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001546:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001552:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800155e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4313      	orrs	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	0018      	movs	r0, r3
 8001578:	f000 f946 	bl	8001808 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2221      	movs	r2, #33	; 0x21
 8001586:	2101      	movs	r1, #1
 8001588:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2220      	movs	r2, #32
 800158e:	2100      	movs	r1, #0
 8001590:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}  
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	b004      	add	sp, #16
 800159a:	bd80      	pop	{r7, pc}
 800159c:	ffffc00f 	.word	0xffffc00f

080015a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80015ae:	2317      	movs	r3, #23
 80015b0:	18fb      	adds	r3, r7, r3
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2220      	movs	r2, #32
 80015ba:	5c9b      	ldrb	r3, [r3, r2]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d101      	bne.n	80015c4 <HAL_DMA_Start_IT+0x24>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e04f      	b.n	8001664 <HAL_DMA_Start_IT+0xc4>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2220      	movs	r2, #32
 80015c8:	2101      	movs	r1, #1
 80015ca:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2221      	movs	r2, #33	; 0x21
 80015d0:	5c9b      	ldrb	r3, [r3, r2]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d13a      	bne.n	800164e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2221      	movs	r2, #33	; 0x21
 80015dc:	2102      	movs	r1, #2
 80015de:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	438a      	bics	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	68b9      	ldr	r1, [r7, #8]
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f000 f8d7 	bl	80017b0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001606:	2b00      	cmp	r3, #0
 8001608:	d008      	beq.n	800161c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	210e      	movs	r1, #14
 8001616:	430a      	orrs	r2, r1
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	e00f      	b.n	800163c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	210a      	movs	r1, #10
 8001628:	430a      	orrs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2104      	movs	r1, #4
 8001638:	438a      	bics	r2, r1
 800163a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2101      	movs	r1, #1
 8001648:	430a      	orrs	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	e007      	b.n	800165e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2220      	movs	r2, #32
 8001652:	2100      	movs	r1, #0
 8001654:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001656:	2317      	movs	r3, #23
 8001658:	18fb      	adds	r3, r7, r3
 800165a:	2202      	movs	r2, #2
 800165c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800165e:	2317      	movs	r3, #23
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	781b      	ldrb	r3, [r3, #0]
} 
 8001664:	0018      	movs	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	b006      	add	sp, #24
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	2204      	movs	r2, #4
 800168a:	409a      	lsls	r2, r3
 800168c:	0013      	movs	r3, r2
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4013      	ands	r3, r2
 8001692:	d024      	beq.n	80016de <HAL_DMA_IRQHandler+0x72>
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	2204      	movs	r2, #4
 8001698:	4013      	ands	r3, r2
 800169a:	d020      	beq.n	80016de <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2220      	movs	r2, #32
 80016a4:	4013      	ands	r3, r2
 80016a6:	d107      	bne.n	80016b8 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2104      	movs	r1, #4
 80016b4:	438a      	bics	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c0:	2104      	movs	r1, #4
 80016c2:	4091      	lsls	r1, r2
 80016c4:	000a      	movs	r2, r1
 80016c6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d100      	bne.n	80016d2 <HAL_DMA_IRQHandler+0x66>
 80016d0:	e06a      	b.n	80017a8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	0010      	movs	r0, r2
 80016da:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80016dc:	e064      	b.n	80017a8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	2202      	movs	r2, #2
 80016e4:	409a      	lsls	r2, r3
 80016e6:	0013      	movs	r3, r2
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	4013      	ands	r3, r2
 80016ec:	d02b      	beq.n	8001746 <HAL_DMA_IRQHandler+0xda>
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	2202      	movs	r2, #2
 80016f2:	4013      	ands	r3, r2
 80016f4:	d027      	beq.n	8001746 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2220      	movs	r2, #32
 80016fe:	4013      	ands	r3, r2
 8001700:	d10b      	bne.n	800171a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	210a      	movs	r1, #10
 800170e:	438a      	bics	r2, r1
 8001710:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2221      	movs	r2, #33	; 0x21
 8001716:	2101      	movs	r1, #1
 8001718:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001722:	2102      	movs	r1, #2
 8001724:	4091      	lsls	r1, r2
 8001726:	000a      	movs	r2, r1
 8001728:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2220      	movs	r2, #32
 800172e:	2100      	movs	r1, #0
 8001730:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001736:	2b00      	cmp	r3, #0
 8001738:	d036      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	0010      	movs	r0, r2
 8001742:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001744:	e030      	b.n	80017a8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	2208      	movs	r2, #8
 800174c:	409a      	lsls	r2, r3
 800174e:	0013      	movs	r3, r2
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4013      	ands	r3, r2
 8001754:	d028      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x13c>
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	2208      	movs	r2, #8
 800175a:	4013      	ands	r3, r2
 800175c:	d024      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	210e      	movs	r1, #14
 800176a:	438a      	bics	r2, r1
 800176c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001776:	2101      	movs	r1, #1
 8001778:	4091      	lsls	r1, r2
 800177a:	000a      	movs	r2, r1
 800177c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2221      	movs	r2, #33	; 0x21
 8001788:	2101      	movs	r1, #1
 800178a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2220      	movs	r2, #32
 8001790:	2100      	movs	r1, #0
 8001792:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	0010      	movs	r0, r2
 80017a4:	4798      	blx	r3
    }
   }
}  
 80017a6:	e7ff      	b.n	80017a8 <HAL_DMA_IRQHandler+0x13c>
 80017a8:	46c0      	nop			; (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b004      	add	sp, #16
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c6:	2101      	movs	r1, #1
 80017c8:	4091      	lsls	r1, r2
 80017ca:	000a      	movs	r2, r1
 80017cc:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b10      	cmp	r3, #16
 80017dc:	d108      	bne.n	80017f0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017ee:	e007      	b.n	8001800 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	60da      	str	r2, [r3, #12]
}
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	b004      	add	sp, #16
 8001806:	bd80      	pop	{r7, pc}

08001808 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	001a      	movs	r2, r3
 8001816:	4b14      	ldr	r3, [pc, #80]	; (8001868 <DMA_CalcBaseAndBitshift+0x60>)
 8001818:	429a      	cmp	r2, r3
 800181a:	d810      	bhi.n	800183e <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a12      	ldr	r2, [pc, #72]	; (800186c <DMA_CalcBaseAndBitshift+0x64>)
 8001822:	4694      	mov	ip, r2
 8001824:	4463      	add	r3, ip
 8001826:	2114      	movs	r1, #20
 8001828:	0018      	movs	r0, r3
 800182a:	f7fe fc6b 	bl	8000104 <__udivsi3>
 800182e:	0003      	movs	r3, r0
 8001830:	009a      	lsls	r2, r3, #2
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <DMA_CalcBaseAndBitshift+0x68>)
 800183a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800183c:	e00f      	b.n	800185e <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a0c      	ldr	r2, [pc, #48]	; (8001874 <DMA_CalcBaseAndBitshift+0x6c>)
 8001844:	4694      	mov	ip, r2
 8001846:	4463      	add	r3, ip
 8001848:	2114      	movs	r1, #20
 800184a:	0018      	movs	r0, r3
 800184c:	f7fe fc5a 	bl	8000104 <__udivsi3>
 8001850:	0003      	movs	r3, r0
 8001852:	009a      	lsls	r2, r3, #2
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a07      	ldr	r2, [pc, #28]	; (8001878 <DMA_CalcBaseAndBitshift+0x70>)
 800185c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	46bd      	mov	sp, r7
 8001862:	b002      	add	sp, #8
 8001864:	bd80      	pop	{r7, pc}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	40020407 	.word	0x40020407
 800186c:	bffdfff8 	.word	0xbffdfff8
 8001870:	40020000 	.word	0x40020000
 8001874:	bffdfbf8 	.word	0xbffdfbf8
 8001878:	40020400 	.word	0x40020400

0800187c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188a:	e155      	b.n	8001b38 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2101      	movs	r1, #1
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	4091      	lsls	r1, r2
 8001896:	000a      	movs	r2, r1
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d100      	bne.n	80018a4 <HAL_GPIO_Init+0x28>
 80018a2:	e146      	b.n	8001b32 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2203      	movs	r2, #3
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d005      	beq.n	80018bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2203      	movs	r2, #3
 80018b6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d130      	bne.n	800191e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	2203      	movs	r2, #3
 80018c8:	409a      	lsls	r2, r3
 80018ca:	0013      	movs	r3, r2
 80018cc:	43da      	mvns	r2, r3
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68da      	ldr	r2, [r3, #12]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	409a      	lsls	r2, r3
 80018de:	0013      	movs	r3, r2
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f2:	2201      	movs	r2, #1
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	409a      	lsls	r2, r3
 80018f8:	0013      	movs	r3, r2
 80018fa:	43da      	mvns	r2, r3
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	091b      	lsrs	r3, r3, #4
 8001908:	2201      	movs	r2, #1
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
 8001910:	0013      	movs	r3, r2
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2203      	movs	r2, #3
 8001924:	4013      	ands	r3, r2
 8001926:	2b03      	cmp	r3, #3
 8001928:	d017      	beq.n	800195a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	409a      	lsls	r2, r3
 8001938:	0013      	movs	r3, r2
 800193a:	43da      	mvns	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	409a      	lsls	r2, r3
 800194c:	0013      	movs	r3, r2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2203      	movs	r2, #3
 8001960:	4013      	ands	r3, r2
 8001962:	2b02      	cmp	r3, #2
 8001964:	d123      	bne.n	80019ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	08da      	lsrs	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3208      	adds	r2, #8
 800196e:	0092      	lsls	r2, r2, #2
 8001970:	58d3      	ldr	r3, [r2, r3]
 8001972:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	2207      	movs	r2, #7
 8001978:	4013      	ands	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	220f      	movs	r2, #15
 800197e:	409a      	lsls	r2, r3
 8001980:	0013      	movs	r3, r2
 8001982:	43da      	mvns	r2, r3
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	691a      	ldr	r2, [r3, #16]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2107      	movs	r1, #7
 8001992:	400b      	ands	r3, r1
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	409a      	lsls	r2, r3
 8001998:	0013      	movs	r3, r2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	08da      	lsrs	r2, r3, #3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3208      	adds	r2, #8
 80019a8:	0092      	lsls	r2, r2, #2
 80019aa:	6939      	ldr	r1, [r7, #16]
 80019ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	2203      	movs	r2, #3
 80019ba:	409a      	lsls	r2, r3
 80019bc:	0013      	movs	r3, r2
 80019be:	43da      	mvns	r2, r3
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2203      	movs	r2, #3
 80019cc:	401a      	ands	r2, r3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	409a      	lsls	r2, r3
 80019d4:	0013      	movs	r3, r2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	23c0      	movs	r3, #192	; 0xc0
 80019e8:	029b      	lsls	r3, r3, #10
 80019ea:	4013      	ands	r3, r2
 80019ec:	d100      	bne.n	80019f0 <HAL_GPIO_Init+0x174>
 80019ee:	e0a0      	b.n	8001b32 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f0:	4b57      	ldr	r3, [pc, #348]	; (8001b50 <HAL_GPIO_Init+0x2d4>)
 80019f2:	699a      	ldr	r2, [r3, #24]
 80019f4:	4b56      	ldr	r3, [pc, #344]	; (8001b50 <HAL_GPIO_Init+0x2d4>)
 80019f6:	2101      	movs	r1, #1
 80019f8:	430a      	orrs	r2, r1
 80019fa:	619a      	str	r2, [r3, #24]
 80019fc:	4b54      	ldr	r3, [pc, #336]	; (8001b50 <HAL_GPIO_Init+0x2d4>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	2201      	movs	r2, #1
 8001a02:	4013      	ands	r3, r2
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a08:	4a52      	ldr	r2, [pc, #328]	; (8001b54 <HAL_GPIO_Init+0x2d8>)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	589b      	ldr	r3, [r3, r2]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2203      	movs	r2, #3
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	409a      	lsls	r2, r3
 8001a22:	0013      	movs	r3, r2
 8001a24:	43da      	mvns	r2, r3
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	2390      	movs	r3, #144	; 0x90
 8001a30:	05db      	lsls	r3, r3, #23
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d019      	beq.n	8001a6a <HAL_GPIO_Init+0x1ee>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a47      	ldr	r2, [pc, #284]	; (8001b58 <HAL_GPIO_Init+0x2dc>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d013      	beq.n	8001a66 <HAL_GPIO_Init+0x1ea>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a46      	ldr	r2, [pc, #280]	; (8001b5c <HAL_GPIO_Init+0x2e0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d00d      	beq.n	8001a62 <HAL_GPIO_Init+0x1e6>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a45      	ldr	r2, [pc, #276]	; (8001b60 <HAL_GPIO_Init+0x2e4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d007      	beq.n	8001a5e <HAL_GPIO_Init+0x1e2>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a44      	ldr	r2, [pc, #272]	; (8001b64 <HAL_GPIO_Init+0x2e8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d101      	bne.n	8001a5a <HAL_GPIO_Init+0x1de>
 8001a56:	2304      	movs	r3, #4
 8001a58:	e008      	b.n	8001a6c <HAL_GPIO_Init+0x1f0>
 8001a5a:	2305      	movs	r3, #5
 8001a5c:	e006      	b.n	8001a6c <HAL_GPIO_Init+0x1f0>
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e004      	b.n	8001a6c <HAL_GPIO_Init+0x1f0>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e002      	b.n	8001a6c <HAL_GPIO_Init+0x1f0>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <HAL_GPIO_Init+0x1f0>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	2103      	movs	r1, #3
 8001a70:	400a      	ands	r2, r1
 8001a72:	0092      	lsls	r2, r2, #2
 8001a74:	4093      	lsls	r3, r2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a7c:	4935      	ldr	r1, [pc, #212]	; (8001b54 <HAL_GPIO_Init+0x2d8>)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	089b      	lsrs	r3, r3, #2
 8001a82:	3302      	adds	r3, #2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a8a:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <HAL_GPIO_Init+0x2ec>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	43da      	mvns	r2, r3
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	025b      	lsls	r3, r3, #9
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001aae:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <HAL_GPIO_Init+0x2ec>)
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <HAL_GPIO_Init+0x2ec>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	43da      	mvns	r2, r3
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	029b      	lsls	r3, r3, #10
 8001acc:	4013      	ands	r3, r2
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ad8:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <HAL_GPIO_Init+0x2ec>)
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ade:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <HAL_GPIO_Init+0x2ec>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	035b      	lsls	r3, r3, #13
 8001af6:	4013      	ands	r3, r2
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b02:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <HAL_GPIO_Init+0x2ec>)
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b08:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <HAL_GPIO_Init+0x2ec>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	43da      	mvns	r2, r3
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	039b      	lsls	r3, r3, #14
 8001b20:	4013      	ands	r3, r2
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_GPIO_Init+0x2ec>)
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	40da      	lsrs	r2, r3
 8001b40:	1e13      	subs	r3, r2, #0
 8001b42:	d000      	beq.n	8001b46 <HAL_GPIO_Init+0x2ca>
 8001b44:	e6a2      	b.n	800188c <HAL_GPIO_Init+0x10>
  } 
}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	46c0      	nop			; (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b006      	add	sp, #24
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40010000 	.word	0x40010000
 8001b58:	48000400 	.word	0x48000400
 8001b5c:	48000800 	.word	0x48000800
 8001b60:	48000c00 	.word	0x48000c00
 8001b64:	48001000 	.word	0x48001000
 8001b68:	40010400 	.word	0x40010400

08001b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	0008      	movs	r0, r1
 8001b76:	0011      	movs	r1, r2
 8001b78:	1cbb      	adds	r3, r7, #2
 8001b7a:	1c02      	adds	r2, r0, #0
 8001b7c:	801a      	strh	r2, [r3, #0]
 8001b7e:	1c7b      	adds	r3, r7, #1
 8001b80:	1c0a      	adds	r2, r1, #0
 8001b82:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b84:	1c7b      	adds	r3, r7, #1
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d004      	beq.n	8001b96 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b8c:	1cbb      	adds	r3, r7, #2
 8001b8e:	881a      	ldrh	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b94:	e003      	b.n	8001b9e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b96:	1cbb      	adds	r3, r7, #2
 8001b98:	881a      	ldrh	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b002      	add	sp, #8
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	000a      	movs	r2, r1
 8001bb0:	1cbb      	adds	r3, r7, #2
 8001bb2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bba:	1cbb      	adds	r3, r7, #2
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	041a      	lsls	r2, r3, #16
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	1cb9      	adds	r1, r7, #2
 8001bca:	8809      	ldrh	r1, [r1, #0]
 8001bcc:	400b      	ands	r3, r1
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	619a      	str	r2, [r3, #24]
}
 8001bd4:	46c0      	nop			; (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b004      	add	sp, #16
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	f000 fb76 	bl	80022dc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d100      	bne.n	8001bfc <HAL_RCC_OscConfig+0x20>
 8001bfa:	e08e      	b.n	8001d1a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bfc:	4bc5      	ldr	r3, [pc, #788]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	220c      	movs	r2, #12
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d00e      	beq.n	8001c26 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c08:	4bc2      	ldr	r3, [pc, #776]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	220c      	movs	r2, #12
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d117      	bne.n	8001c44 <HAL_RCC_OscConfig+0x68>
 8001c14:	4bbf      	ldr	r3, [pc, #764]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	23c0      	movs	r3, #192	; 0xc0
 8001c1a:	025b      	lsls	r3, r3, #9
 8001c1c:	401a      	ands	r2, r3
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	025b      	lsls	r3, r3, #9
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d10e      	bne.n	8001c44 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c26:	4bbb      	ldr	r3, [pc, #748]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	029b      	lsls	r3, r3, #10
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d100      	bne.n	8001c34 <HAL_RCC_OscConfig+0x58>
 8001c32:	e071      	b.n	8001d18 <HAL_RCC_OscConfig+0x13c>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d000      	beq.n	8001c3e <HAL_RCC_OscConfig+0x62>
 8001c3c:	e06c      	b.n	8001d18 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f000 fb4c 	bl	80022dc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d107      	bne.n	8001c5c <HAL_RCC_OscConfig+0x80>
 8001c4c:	4bb1      	ldr	r3, [pc, #708]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4bb0      	ldr	r3, [pc, #704]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001c52:	2180      	movs	r1, #128	; 0x80
 8001c54:	0249      	lsls	r1, r1, #9
 8001c56:	430a      	orrs	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	e02f      	b.n	8001cbc <HAL_RCC_OscConfig+0xe0>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10c      	bne.n	8001c7e <HAL_RCC_OscConfig+0xa2>
 8001c64:	4bab      	ldr	r3, [pc, #684]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4baa      	ldr	r3, [pc, #680]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001c6a:	49ab      	ldr	r1, [pc, #684]	; (8001f18 <HAL_RCC_OscConfig+0x33c>)
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	4ba8      	ldr	r3, [pc, #672]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4ba7      	ldr	r3, [pc, #668]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001c76:	49a9      	ldr	r1, [pc, #676]	; (8001f1c <HAL_RCC_OscConfig+0x340>)
 8001c78:	400a      	ands	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e01e      	b.n	8001cbc <HAL_RCC_OscConfig+0xe0>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b05      	cmp	r3, #5
 8001c84:	d10e      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xc8>
 8001c86:	4ba3      	ldr	r3, [pc, #652]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4ba2      	ldr	r3, [pc, #648]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001c8c:	2180      	movs	r1, #128	; 0x80
 8001c8e:	02c9      	lsls	r1, r1, #11
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	4b9f      	ldr	r3, [pc, #636]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b9e      	ldr	r3, [pc, #632]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001c9a:	2180      	movs	r1, #128	; 0x80
 8001c9c:	0249      	lsls	r1, r1, #9
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e00b      	b.n	8001cbc <HAL_RCC_OscConfig+0xe0>
 8001ca4:	4b9b      	ldr	r3, [pc, #620]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b9a      	ldr	r3, [pc, #616]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001caa:	499b      	ldr	r1, [pc, #620]	; (8001f18 <HAL_RCC_OscConfig+0x33c>)
 8001cac:	400a      	ands	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	4b98      	ldr	r3, [pc, #608]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b97      	ldr	r3, [pc, #604]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001cb6:	4999      	ldr	r1, [pc, #612]	; (8001f1c <HAL_RCC_OscConfig+0x340>)
 8001cb8:	400a      	ands	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d014      	beq.n	8001cee <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7fe fe94 	bl	80009f0 <HAL_GetTick>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cce:	f7fe fe8f 	bl	80009f0 <HAL_GetTick>
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b64      	cmp	r3, #100	; 0x64
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e2fd      	b.n	80022dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce0:	4b8c      	ldr	r3, [pc, #560]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	029b      	lsls	r3, r3, #10
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0xf2>
 8001cec:	e015      	b.n	8001d1a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cee:	f7fe fe7f 	bl	80009f0 <HAL_GetTick>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf8:	f7fe fe7a 	bl	80009f0 <HAL_GetTick>
 8001cfc:	0002      	movs	r2, r0
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b64      	cmp	r3, #100	; 0x64
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e2e8      	b.n	80022dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0a:	4b82      	ldr	r3, [pc, #520]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	029b      	lsls	r3, r3, #10
 8001d12:	4013      	ands	r3, r2
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x11c>
 8001d16:	e000      	b.n	8001d1a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d18:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	4013      	ands	r3, r2
 8001d22:	d100      	bne.n	8001d26 <HAL_RCC_OscConfig+0x14a>
 8001d24:	e06c      	b.n	8001e00 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d26:	4b7b      	ldr	r3, [pc, #492]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d00e      	beq.n	8001d4e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d30:	4b78      	ldr	r3, [pc, #480]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	220c      	movs	r2, #12
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d11f      	bne.n	8001d7c <HAL_RCC_OscConfig+0x1a0>
 8001d3c:	4b75      	ldr	r3, [pc, #468]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	23c0      	movs	r3, #192	; 0xc0
 8001d42:	025b      	lsls	r3, r3, #9
 8001d44:	401a      	ands	r2, r3
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d116      	bne.n	8001d7c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4e:	4b71      	ldr	r3, [pc, #452]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2202      	movs	r2, #2
 8001d54:	4013      	ands	r3, r2
 8001d56:	d005      	beq.n	8001d64 <HAL_RCC_OscConfig+0x188>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e2bb      	b.n	80022dc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d64:	4b6b      	ldr	r3, [pc, #428]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	22f8      	movs	r2, #248	; 0xf8
 8001d6a:	4393      	bics	r3, r2
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	00da      	lsls	r2, r3, #3
 8001d74:	4b67      	ldr	r3, [pc, #412]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001d76:	430a      	orrs	r2, r1
 8001d78:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7a:	e041      	b.n	8001e00 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d024      	beq.n	8001dce <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d84:	4b63      	ldr	r3, [pc, #396]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b62      	ldr	r3, [pc, #392]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7fe fe2e 	bl	80009f0 <HAL_GetTick>
 8001d94:	0003      	movs	r3, r0
 8001d96:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d9a:	f7fe fe29 	bl	80009f0 <HAL_GetTick>
 8001d9e:	0002      	movs	r2, r0
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e297      	b.n	80022dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dac:	4b59      	ldr	r3, [pc, #356]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2202      	movs	r2, #2
 8001db2:	4013      	ands	r3, r2
 8001db4:	d0f1      	beq.n	8001d9a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db6:	4b57      	ldr	r3, [pc, #348]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	22f8      	movs	r2, #248	; 0xf8
 8001dbc:	4393      	bics	r3, r2
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	00da      	lsls	r2, r3, #3
 8001dc6:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	e018      	b.n	8001e00 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dce:	4b51      	ldr	r3, [pc, #324]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4b50      	ldr	r3, [pc, #320]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	438a      	bics	r2, r1
 8001dd8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dda:	f7fe fe09 	bl	80009f0 <HAL_GetTick>
 8001dde:	0003      	movs	r3, r0
 8001de0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de4:	f7fe fe04 	bl	80009f0 <HAL_GetTick>
 8001de8:	0002      	movs	r2, r0
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e272      	b.n	80022dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df6:	4b47      	ldr	r3, [pc, #284]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d1f1      	bne.n	8001de4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2208      	movs	r2, #8
 8001e06:	4013      	ands	r3, r2
 8001e08:	d036      	beq.n	8001e78 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d019      	beq.n	8001e46 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e12:	4b40      	ldr	r3, [pc, #256]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e16:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001e18:	2101      	movs	r1, #1
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1e:	f7fe fde7 	bl	80009f0 <HAL_GetTick>
 8001e22:	0003      	movs	r3, r0
 8001e24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e28:	f7fe fde2 	bl	80009f0 <HAL_GetTick>
 8001e2c:	0002      	movs	r2, r0
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e250      	b.n	80022dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	4b36      	ldr	r3, [pc, #216]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	2202      	movs	r2, #2
 8001e40:	4013      	ands	r3, r2
 8001e42:	d0f1      	beq.n	8001e28 <HAL_RCC_OscConfig+0x24c>
 8001e44:	e018      	b.n	8001e78 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e46:	4b33      	ldr	r3, [pc, #204]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001e48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e4a:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	438a      	bics	r2, r1
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e52:	f7fe fdcd 	bl	80009f0 <HAL_GetTick>
 8001e56:	0003      	movs	r3, r0
 8001e58:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e5c:	f7fe fdc8 	bl	80009f0 <HAL_GetTick>
 8001e60:	0002      	movs	r2, r0
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e236      	b.n	80022dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6e:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	2202      	movs	r2, #2
 8001e74:	4013      	ands	r3, r2
 8001e76:	d1f1      	bne.n	8001e5c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d100      	bne.n	8001e84 <HAL_RCC_OscConfig+0x2a8>
 8001e82:	e0b5      	b.n	8001ff0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e84:	201f      	movs	r0, #31
 8001e86:	183b      	adds	r3, r7, r0
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e8c:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001e8e:	69da      	ldr	r2, [r3, #28]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	055b      	lsls	r3, r3, #21
 8001e94:	4013      	ands	r3, r2
 8001e96:	d110      	bne.n	8001eba <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e98:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001e9a:	69da      	ldr	r2, [r3, #28]
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001e9e:	2180      	movs	r1, #128	; 0x80
 8001ea0:	0549      	lsls	r1, r1, #21
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	61da      	str	r2, [r3, #28]
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001ea8:	69da      	ldr	r2, [r3, #28]
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	055b      	lsls	r3, r3, #21
 8001eae:	4013      	ands	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001eb4:	183b      	adds	r3, r7, r0
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eba:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_RCC_OscConfig+0x344>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d11a      	bne.n	8001efc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec6:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <HAL_RCC_OscConfig+0x344>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <HAL_RCC_OscConfig+0x344>)
 8001ecc:	2180      	movs	r1, #128	; 0x80
 8001ece:	0049      	lsls	r1, r1, #1
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed4:	f7fe fd8c 	bl	80009f0 <HAL_GetTick>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ede:	f7fe fd87 	bl	80009f0 <HAL_GetTick>
 8001ee2:	0002      	movs	r2, r0
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b64      	cmp	r3, #100	; 0x64
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e1f5      	b.n	80022dc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_RCC_OscConfig+0x344>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d0f0      	beq.n	8001ede <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d10f      	bne.n	8001f24 <HAL_RCC_OscConfig+0x348>
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001f06:	6a1a      	ldr	r2, [r3, #32]
 8001f08:	4b02      	ldr	r3, [pc, #8]	; (8001f14 <HAL_RCC_OscConfig+0x338>)
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	621a      	str	r2, [r3, #32]
 8001f10:	e036      	b.n	8001f80 <HAL_RCC_OscConfig+0x3a4>
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	40021000 	.word	0x40021000
 8001f18:	fffeffff 	.word	0xfffeffff
 8001f1c:	fffbffff 	.word	0xfffbffff
 8001f20:	40007000 	.word	0x40007000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10c      	bne.n	8001f46 <HAL_RCC_OscConfig+0x36a>
 8001f2c:	4bca      	ldr	r3, [pc, #808]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8001f2e:	6a1a      	ldr	r2, [r3, #32]
 8001f30:	4bc9      	ldr	r3, [pc, #804]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8001f32:	2101      	movs	r1, #1
 8001f34:	438a      	bics	r2, r1
 8001f36:	621a      	str	r2, [r3, #32]
 8001f38:	4bc7      	ldr	r3, [pc, #796]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8001f3a:	6a1a      	ldr	r2, [r3, #32]
 8001f3c:	4bc6      	ldr	r3, [pc, #792]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8001f3e:	2104      	movs	r1, #4
 8001f40:	438a      	bics	r2, r1
 8001f42:	621a      	str	r2, [r3, #32]
 8001f44:	e01c      	b.n	8001f80 <HAL_RCC_OscConfig+0x3a4>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b05      	cmp	r3, #5
 8001f4c:	d10c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x38c>
 8001f4e:	4bc2      	ldr	r3, [pc, #776]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8001f50:	6a1a      	ldr	r2, [r3, #32]
 8001f52:	4bc1      	ldr	r3, [pc, #772]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8001f54:	2104      	movs	r1, #4
 8001f56:	430a      	orrs	r2, r1
 8001f58:	621a      	str	r2, [r3, #32]
 8001f5a:	4bbf      	ldr	r3, [pc, #764]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8001f5c:	6a1a      	ldr	r2, [r3, #32]
 8001f5e:	4bbe      	ldr	r3, [pc, #760]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8001f60:	2101      	movs	r1, #1
 8001f62:	430a      	orrs	r2, r1
 8001f64:	621a      	str	r2, [r3, #32]
 8001f66:	e00b      	b.n	8001f80 <HAL_RCC_OscConfig+0x3a4>
 8001f68:	4bbb      	ldr	r3, [pc, #748]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8001f6a:	6a1a      	ldr	r2, [r3, #32]
 8001f6c:	4bba      	ldr	r3, [pc, #744]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8001f6e:	2101      	movs	r1, #1
 8001f70:	438a      	bics	r2, r1
 8001f72:	621a      	str	r2, [r3, #32]
 8001f74:	4bb8      	ldr	r3, [pc, #736]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8001f76:	6a1a      	ldr	r2, [r3, #32]
 8001f78:	4bb7      	ldr	r3, [pc, #732]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8001f7a:	2104      	movs	r1, #4
 8001f7c:	438a      	bics	r2, r1
 8001f7e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d014      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f88:	f7fe fd32 	bl	80009f0 <HAL_GetTick>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f90:	e009      	b.n	8001fa6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f92:	f7fe fd2d 	bl	80009f0 <HAL_GetTick>
 8001f96:	0002      	movs	r2, r0
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	4aaf      	ldr	r2, [pc, #700]	; (800225c <HAL_RCC_OscConfig+0x680>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e19a      	b.n	80022dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa6:	4bac      	ldr	r3, [pc, #688]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	2202      	movs	r2, #2
 8001fac:	4013      	ands	r3, r2
 8001fae:	d0f0      	beq.n	8001f92 <HAL_RCC_OscConfig+0x3b6>
 8001fb0:	e013      	b.n	8001fda <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb2:	f7fe fd1d 	bl	80009f0 <HAL_GetTick>
 8001fb6:	0003      	movs	r3, r0
 8001fb8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fba:	e009      	b.n	8001fd0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fbc:	f7fe fd18 	bl	80009f0 <HAL_GetTick>
 8001fc0:	0002      	movs	r2, r0
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	4aa5      	ldr	r2, [pc, #660]	; (800225c <HAL_RCC_OscConfig+0x680>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e185      	b.n	80022dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd0:	4ba1      	ldr	r3, [pc, #644]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fda:	231f      	movs	r3, #31
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d105      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe4:	4b9c      	ldr	r3, [pc, #624]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8001fe6:	69da      	ldr	r2, [r3, #28]
 8001fe8:	4b9b      	ldr	r3, [pc, #620]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8001fea:	499d      	ldr	r1, [pc, #628]	; (8002260 <HAL_RCC_OscConfig+0x684>)
 8001fec:	400a      	ands	r2, r1
 8001fee:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2210      	movs	r2, #16
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d063      	beq.n	80020c2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d12a      	bne.n	8002058 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002002:	4b95      	ldr	r3, [pc, #596]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002006:	4b94      	ldr	r3, [pc, #592]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002008:	2104      	movs	r1, #4
 800200a:	430a      	orrs	r2, r1
 800200c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800200e:	4b92      	ldr	r3, [pc, #584]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002012:	4b91      	ldr	r3, [pc, #580]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002014:	2101      	movs	r1, #1
 8002016:	430a      	orrs	r2, r1
 8002018:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201a:	f7fe fce9 	bl	80009f0 <HAL_GetTick>
 800201e:	0003      	movs	r3, r0
 8002020:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002024:	f7fe fce4 	bl	80009f0 <HAL_GetTick>
 8002028:	0002      	movs	r2, r0
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e152      	b.n	80022dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002036:	4b88      	ldr	r3, [pc, #544]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203a:	2202      	movs	r2, #2
 800203c:	4013      	ands	r3, r2
 800203e:	d0f1      	beq.n	8002024 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002040:	4b85      	ldr	r3, [pc, #532]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002044:	22f8      	movs	r2, #248	; 0xf8
 8002046:	4393      	bics	r3, r2
 8002048:	0019      	movs	r1, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	00da      	lsls	r2, r3, #3
 8002050:	4b81      	ldr	r3, [pc, #516]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002052:	430a      	orrs	r2, r1
 8002054:	635a      	str	r2, [r3, #52]	; 0x34
 8002056:	e034      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	3305      	adds	r3, #5
 800205e:	d111      	bne.n	8002084 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002060:	4b7d      	ldr	r3, [pc, #500]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002064:	4b7c      	ldr	r3, [pc, #496]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002066:	2104      	movs	r1, #4
 8002068:	438a      	bics	r2, r1
 800206a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800206c:	4b7a      	ldr	r3, [pc, #488]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 800206e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002070:	22f8      	movs	r2, #248	; 0xf8
 8002072:	4393      	bics	r3, r2
 8002074:	0019      	movs	r1, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	00da      	lsls	r2, r3, #3
 800207c:	4b76      	ldr	r3, [pc, #472]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 800207e:	430a      	orrs	r2, r1
 8002080:	635a      	str	r2, [r3, #52]	; 0x34
 8002082:	e01e      	b.n	80020c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002084:	4b74      	ldr	r3, [pc, #464]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002088:	4b73      	ldr	r3, [pc, #460]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 800208a:	2104      	movs	r1, #4
 800208c:	430a      	orrs	r2, r1
 800208e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002090:	4b71      	ldr	r3, [pc, #452]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002094:	4b70      	ldr	r3, [pc, #448]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002096:	2101      	movs	r1, #1
 8002098:	438a      	bics	r2, r1
 800209a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209c:	f7fe fca8 	bl	80009f0 <HAL_GetTick>
 80020a0:	0003      	movs	r3, r0
 80020a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020a6:	f7fe fca3 	bl	80009f0 <HAL_GetTick>
 80020aa:	0002      	movs	r2, r0
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e111      	b.n	80022dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020b8:	4b67      	ldr	r3, [pc, #412]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 80020ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020bc:	2202      	movs	r2, #2
 80020be:	4013      	ands	r3, r2
 80020c0:	d1f1      	bne.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2220      	movs	r2, #32
 80020c8:	4013      	ands	r3, r2
 80020ca:	d05c      	beq.n	8002186 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80020cc:	4b62      	ldr	r3, [pc, #392]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	220c      	movs	r2, #12
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b0c      	cmp	r3, #12
 80020d6:	d00e      	beq.n	80020f6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80020d8:	4b5f      	ldr	r3, [pc, #380]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	220c      	movs	r2, #12
 80020de:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d114      	bne.n	800210e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80020e4:	4b5c      	ldr	r3, [pc, #368]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	23c0      	movs	r3, #192	; 0xc0
 80020ea:	025b      	lsls	r3, r3, #9
 80020ec:	401a      	ands	r2, r3
 80020ee:	23c0      	movs	r3, #192	; 0xc0
 80020f0:	025b      	lsls	r3, r3, #9
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d10b      	bne.n	800210e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80020f6:	4b58      	ldr	r3, [pc, #352]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 80020f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	025b      	lsls	r3, r3, #9
 80020fe:	4013      	ands	r3, r2
 8002100:	d040      	beq.n	8002184 <HAL_RCC_OscConfig+0x5a8>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d03c      	beq.n	8002184 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e0e6      	b.n	80022dc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d01b      	beq.n	800214e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002116:	4b50      	ldr	r3, [pc, #320]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800211a:	4b4f      	ldr	r3, [pc, #316]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 800211c:	2180      	movs	r1, #128	; 0x80
 800211e:	0249      	lsls	r1, r1, #9
 8002120:	430a      	orrs	r2, r1
 8002122:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7fe fc64 	bl	80009f0 <HAL_GetTick>
 8002128:	0003      	movs	r3, r0
 800212a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800212e:	f7fe fc5f 	bl	80009f0 <HAL_GetTick>
 8002132:	0002      	movs	r2, r0
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0cd      	b.n	80022dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002140:	4b45      	ldr	r3, [pc, #276]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	025b      	lsls	r3, r3, #9
 8002148:	4013      	ands	r3, r2
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x552>
 800214c:	e01b      	b.n	8002186 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800214e:	4b42      	ldr	r3, [pc, #264]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002152:	4b41      	ldr	r3, [pc, #260]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002154:	4943      	ldr	r1, [pc, #268]	; (8002264 <HAL_RCC_OscConfig+0x688>)
 8002156:	400a      	ands	r2, r1
 8002158:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215a:	f7fe fc49 	bl	80009f0 <HAL_GetTick>
 800215e:	0003      	movs	r3, r0
 8002160:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002164:	f7fe fc44 	bl	80009f0 <HAL_GetTick>
 8002168:	0002      	movs	r2, r0
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e0b2      	b.n	80022dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002176:	4b38      	ldr	r3, [pc, #224]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	025b      	lsls	r3, r3, #9
 800217e:	4013      	ands	r3, r2
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x588>
 8002182:	e000      	b.n	8002186 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002184:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	2b00      	cmp	r3, #0
 800218c:	d100      	bne.n	8002190 <HAL_RCC_OscConfig+0x5b4>
 800218e:	e0a4      	b.n	80022da <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002190:	4b31      	ldr	r3, [pc, #196]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	220c      	movs	r2, #12
 8002196:	4013      	ands	r3, r2
 8002198:	2b08      	cmp	r3, #8
 800219a:	d100      	bne.n	800219e <HAL_RCC_OscConfig+0x5c2>
 800219c:	e078      	b.n	8002290 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d14c      	bne.n	8002240 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a6:	4b2c      	ldr	r3, [pc, #176]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 80021ac:	492e      	ldr	r1, [pc, #184]	; (8002268 <HAL_RCC_OscConfig+0x68c>)
 80021ae:	400a      	ands	r2, r1
 80021b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7fe fc1d 	bl	80009f0 <HAL_GetTick>
 80021b6:	0003      	movs	r3, r0
 80021b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021bc:	f7fe fc18 	bl	80009f0 <HAL_GetTick>
 80021c0:	0002      	movs	r2, r0
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e086      	b.n	80022dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ce:	4b22      	ldr	r3, [pc, #136]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	049b      	lsls	r3, r3, #18
 80021d6:	4013      	ands	r3, r2
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021da:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	220f      	movs	r2, #15
 80021e0:	4393      	bics	r3, r2
 80021e2:	0019      	movs	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021e8:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 80021ea:	430a      	orrs	r2, r1
 80021ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80021ee:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4a1e      	ldr	r2, [pc, #120]	; (800226c <HAL_RCC_OscConfig+0x690>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	0019      	movs	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	431a      	orrs	r2, r3
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002204:	430a      	orrs	r2, r1
 8002206:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002208:	4b13      	ldr	r3, [pc, #76]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b12      	ldr	r3, [pc, #72]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 800220e:	2180      	movs	r1, #128	; 0x80
 8002210:	0449      	lsls	r1, r1, #17
 8002212:	430a      	orrs	r2, r1
 8002214:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7fe fbeb 	bl	80009f0 <HAL_GetTick>
 800221a:	0003      	movs	r3, r0
 800221c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002220:	f7fe fbe6 	bl	80009f0 <HAL_GetTick>
 8002224:	0002      	movs	r2, r0
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e054      	b.n	80022dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	049b      	lsls	r3, r3, #18
 800223a:	4013      	ands	r3, r2
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0x644>
 800223e:	e04c      	b.n	80022da <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <HAL_RCC_OscConfig+0x67c>)
 8002246:	4908      	ldr	r1, [pc, #32]	; (8002268 <HAL_RCC_OscConfig+0x68c>)
 8002248:	400a      	ands	r2, r1
 800224a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7fe fbd0 	bl	80009f0 <HAL_GetTick>
 8002250:	0003      	movs	r3, r0
 8002252:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002254:	e015      	b.n	8002282 <HAL_RCC_OscConfig+0x6a6>
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	40021000 	.word	0x40021000
 800225c:	00001388 	.word	0x00001388
 8002260:	efffffff 	.word	0xefffffff
 8002264:	fffeffff 	.word	0xfffeffff
 8002268:	feffffff 	.word	0xfeffffff
 800226c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002270:	f7fe fbbe 	bl	80009f0 <HAL_GetTick>
 8002274:	0002      	movs	r2, r0
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e02c      	b.n	80022dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002282:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <HAL_RCC_OscConfig+0x708>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	2380      	movs	r3, #128	; 0x80
 8002288:	049b      	lsls	r3, r3, #18
 800228a:	4013      	ands	r3, r2
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x694>
 800228e:	e024      	b.n	80022da <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e01f      	b.n	80022dc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_RCC_OscConfig+0x708>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <HAL_RCC_OscConfig+0x708>)
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	23c0      	movs	r3, #192	; 0xc0
 80022ac:	025b      	lsls	r3, r3, #9
 80022ae:	401a      	ands	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d10e      	bne.n	80022d6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	220f      	movs	r2, #15
 80022bc:	401a      	ands	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d107      	bne.n	80022d6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	23f0      	movs	r3, #240	; 0xf0
 80022ca:	039b      	lsls	r3, r3, #14
 80022cc:	401a      	ands	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	0018      	movs	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	b008      	add	sp, #32
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000

080022e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0bf      	b.n	800247c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022fc:	4b61      	ldr	r3, [pc, #388]	; (8002484 <HAL_RCC_ClockConfig+0x19c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2201      	movs	r2, #1
 8002302:	4013      	ands	r3, r2
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d911      	bls.n	800232e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230a:	4b5e      	ldr	r3, [pc, #376]	; (8002484 <HAL_RCC_ClockConfig+0x19c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2201      	movs	r2, #1
 8002310:	4393      	bics	r3, r2
 8002312:	0019      	movs	r1, r3
 8002314:	4b5b      	ldr	r3, [pc, #364]	; (8002484 <HAL_RCC_ClockConfig+0x19c>)
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231c:	4b59      	ldr	r3, [pc, #356]	; (8002484 <HAL_RCC_ClockConfig+0x19c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2201      	movs	r2, #1
 8002322:	4013      	ands	r3, r2
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d001      	beq.n	800232e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e0a6      	b.n	800247c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2202      	movs	r2, #2
 8002334:	4013      	ands	r3, r2
 8002336:	d015      	beq.n	8002364 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2204      	movs	r2, #4
 800233e:	4013      	ands	r3, r2
 8002340:	d006      	beq.n	8002350 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002342:	4b51      	ldr	r3, [pc, #324]	; (8002488 <HAL_RCC_ClockConfig+0x1a0>)
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	4b50      	ldr	r3, [pc, #320]	; (8002488 <HAL_RCC_ClockConfig+0x1a0>)
 8002348:	21e0      	movs	r1, #224	; 0xe0
 800234a:	00c9      	lsls	r1, r1, #3
 800234c:	430a      	orrs	r2, r1
 800234e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002350:	4b4d      	ldr	r3, [pc, #308]	; (8002488 <HAL_RCC_ClockConfig+0x1a0>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	22f0      	movs	r2, #240	; 0xf0
 8002356:	4393      	bics	r3, r2
 8002358:	0019      	movs	r1, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	4b4a      	ldr	r3, [pc, #296]	; (8002488 <HAL_RCC_ClockConfig+0x1a0>)
 8002360:	430a      	orrs	r2, r1
 8002362:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2201      	movs	r2, #1
 800236a:	4013      	ands	r3, r2
 800236c:	d04c      	beq.n	8002408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d107      	bne.n	8002386 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	4b44      	ldr	r3, [pc, #272]	; (8002488 <HAL_RCC_ClockConfig+0x1a0>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	029b      	lsls	r3, r3, #10
 800237e:	4013      	ands	r3, r2
 8002380:	d120      	bne.n	80023c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e07a      	b.n	800247c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d107      	bne.n	800239e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238e:	4b3e      	ldr	r3, [pc, #248]	; (8002488 <HAL_RCC_ClockConfig+0x1a0>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	049b      	lsls	r3, r3, #18
 8002396:	4013      	ands	r3, r2
 8002398:	d114      	bne.n	80023c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e06e      	b.n	800247c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023a6:	4b38      	ldr	r3, [pc, #224]	; (8002488 <HAL_RCC_ClockConfig+0x1a0>)
 80023a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	025b      	lsls	r3, r3, #9
 80023ae:	4013      	ands	r3, r2
 80023b0:	d108      	bne.n	80023c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e062      	b.n	800247c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b6:	4b34      	ldr	r3, [pc, #208]	; (8002488 <HAL_RCC_ClockConfig+0x1a0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2202      	movs	r2, #2
 80023bc:	4013      	ands	r3, r2
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e05b      	b.n	800247c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023c4:	4b30      	ldr	r3, [pc, #192]	; (8002488 <HAL_RCC_ClockConfig+0x1a0>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2203      	movs	r2, #3
 80023ca:	4393      	bics	r3, r2
 80023cc:	0019      	movs	r1, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	4b2d      	ldr	r3, [pc, #180]	; (8002488 <HAL_RCC_ClockConfig+0x1a0>)
 80023d4:	430a      	orrs	r2, r1
 80023d6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d8:	f7fe fb0a 	bl	80009f0 <HAL_GetTick>
 80023dc:	0003      	movs	r3, r0
 80023de:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e0:	e009      	b.n	80023f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e2:	f7fe fb05 	bl	80009f0 <HAL_GetTick>
 80023e6:	0002      	movs	r2, r0
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	4a27      	ldr	r2, [pc, #156]	; (800248c <HAL_RCC_ClockConfig+0x1a4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e042      	b.n	800247c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	4b24      	ldr	r3, [pc, #144]	; (8002488 <HAL_RCC_ClockConfig+0x1a0>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	220c      	movs	r2, #12
 80023fc:	401a      	ands	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	429a      	cmp	r2, r3
 8002406:	d1ec      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002408:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <HAL_RCC_ClockConfig+0x19c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2201      	movs	r2, #1
 800240e:	4013      	ands	r3, r2
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d211      	bcs.n	800243a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_RCC_ClockConfig+0x19c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2201      	movs	r2, #1
 800241c:	4393      	bics	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	4b18      	ldr	r3, [pc, #96]	; (8002484 <HAL_RCC_ClockConfig+0x19c>)
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002428:	4b16      	ldr	r3, [pc, #88]	; (8002484 <HAL_RCC_ClockConfig+0x19c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2201      	movs	r2, #1
 800242e:	4013      	ands	r3, r2
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d001      	beq.n	800243a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e020      	b.n	800247c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2204      	movs	r2, #4
 8002440:	4013      	ands	r3, r2
 8002442:	d009      	beq.n	8002458 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002444:	4b10      	ldr	r3, [pc, #64]	; (8002488 <HAL_RCC_ClockConfig+0x1a0>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	4a11      	ldr	r2, [pc, #68]	; (8002490 <HAL_RCC_ClockConfig+0x1a8>)
 800244a:	4013      	ands	r3, r2
 800244c:	0019      	movs	r1, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <HAL_RCC_ClockConfig+0x1a0>)
 8002454:	430a      	orrs	r2, r1
 8002456:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002458:	f000 f820 	bl	800249c <HAL_RCC_GetSysClockFreq>
 800245c:	0001      	movs	r1, r0
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_RCC_ClockConfig+0x1a0>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	091b      	lsrs	r3, r3, #4
 8002464:	220f      	movs	r2, #15
 8002466:	4013      	ands	r3, r2
 8002468:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <HAL_RCC_ClockConfig+0x1ac>)
 800246a:	5cd3      	ldrb	r3, [r2, r3]
 800246c:	000a      	movs	r2, r1
 800246e:	40da      	lsrs	r2, r3
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_RCC_ClockConfig+0x1b0>)
 8002472:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002474:	2000      	movs	r0, #0
 8002476:	f7fe fa75 	bl	8000964 <HAL_InitTick>
  
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	0018      	movs	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	b004      	add	sp, #16
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40022000 	.word	0x40022000
 8002488:	40021000 	.word	0x40021000
 800248c:	00001388 	.word	0x00001388
 8002490:	fffff8ff 	.word	0xfffff8ff
 8002494:	08003630 	.word	0x08003630
 8002498:	20000000 	.word	0x20000000

0800249c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b08f      	sub	sp, #60	; 0x3c
 80024a0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80024a2:	2314      	movs	r3, #20
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	4a38      	ldr	r2, [pc, #224]	; (8002588 <HAL_RCC_GetSysClockFreq+0xec>)
 80024a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80024aa:	c313      	stmia	r3!, {r0, r1, r4}
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	4a36      	ldr	r2, [pc, #216]	; (800258c <HAL_RCC_GetSysClockFreq+0xf0>)
 80024b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80024b6:	c313      	stmia	r3!, {r0, r1, r4}
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024c0:	2300      	movs	r3, #0
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80024c4:	2300      	movs	r3, #0
 80024c6:	637b      	str	r3, [r7, #52]	; 0x34
 80024c8:	2300      	movs	r3, #0
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80024d0:	4b2f      	ldr	r3, [pc, #188]	; (8002590 <HAL_RCC_GetSysClockFreq+0xf4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d8:	220c      	movs	r2, #12
 80024da:	4013      	ands	r3, r2
 80024dc:	2b0c      	cmp	r3, #12
 80024de:	d047      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0xd4>
 80024e0:	d849      	bhi.n	8002576 <HAL_RCC_GetSysClockFreq+0xda>
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d002      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0x50>
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d003      	beq.n	80024f2 <HAL_RCC_GetSysClockFreq+0x56>
 80024ea:	e044      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024ec:	4b29      	ldr	r3, [pc, #164]	; (8002594 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024f0:	e044      	b.n	800257c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80024f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f4:	0c9b      	lsrs	r3, r3, #18
 80024f6:	220f      	movs	r2, #15
 80024f8:	4013      	ands	r3, r2
 80024fa:	2214      	movs	r2, #20
 80024fc:	18ba      	adds	r2, r7, r2
 80024fe:	5cd3      	ldrb	r3, [r2, r3]
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002502:	4b23      	ldr	r3, [pc, #140]	; (8002590 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	220f      	movs	r2, #15
 8002508:	4013      	ands	r3, r2
 800250a:	1d3a      	adds	r2, r7, #4
 800250c:	5cd3      	ldrb	r3, [r2, r3]
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002512:	23c0      	movs	r3, #192	; 0xc0
 8002514:	025b      	lsls	r3, r3, #9
 8002516:	401a      	ands	r2, r3
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	025b      	lsls	r3, r3, #9
 800251c:	429a      	cmp	r2, r3
 800251e:	d109      	bne.n	8002534 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002522:	481c      	ldr	r0, [pc, #112]	; (8002594 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002524:	f7fd fdee 	bl	8000104 <__udivsi3>
 8002528:	0003      	movs	r3, r0
 800252a:	001a      	movs	r2, r3
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	4353      	muls	r3, r2
 8002530:	637b      	str	r3, [r7, #52]	; 0x34
 8002532:	e01a      	b.n	800256a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002536:	23c0      	movs	r3, #192	; 0xc0
 8002538:	025b      	lsls	r3, r3, #9
 800253a:	401a      	ands	r2, r3
 800253c:	23c0      	movs	r3, #192	; 0xc0
 800253e:	025b      	lsls	r3, r3, #9
 8002540:	429a      	cmp	r2, r3
 8002542:	d109      	bne.n	8002558 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002544:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002546:	4814      	ldr	r0, [pc, #80]	; (8002598 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002548:	f7fd fddc 	bl	8000104 <__udivsi3>
 800254c:	0003      	movs	r3, r0
 800254e:	001a      	movs	r2, r3
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	4353      	muls	r3, r2
 8002554:	637b      	str	r3, [r7, #52]	; 0x34
 8002556:	e008      	b.n	800256a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800255a:	480e      	ldr	r0, [pc, #56]	; (8002594 <HAL_RCC_GetSysClockFreq+0xf8>)
 800255c:	f7fd fdd2 	bl	8000104 <__udivsi3>
 8002560:	0003      	movs	r3, r0
 8002562:	001a      	movs	r2, r3
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	4353      	muls	r3, r2
 8002568:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800256a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800256e:	e005      	b.n	800257c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002570:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002572:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002574:	e002      	b.n	800257c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002576:	4b07      	ldr	r3, [pc, #28]	; (8002594 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002578:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800257a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800257c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b00f      	add	sp, #60	; 0x3c
 8002584:	bd90      	pop	{r4, r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	08003610 	.word	0x08003610
 800258c:	08003620 	.word	0x08003620
 8002590:	40021000 	.word	0x40021000
 8002594:	007a1200 	.word	0x007a1200
 8002598:	02dc6c00 	.word	0x02dc6c00

0800259c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a0:	4b02      	ldr	r3, [pc, #8]	; (80025ac <HAL_RCC_GetHCLKFreq+0x10>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	0018      	movs	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	20000000 	.word	0x20000000

080025b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80025b4:	f7ff fff2 	bl	800259c <HAL_RCC_GetHCLKFreq>
 80025b8:	0001      	movs	r1, r0
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	2207      	movs	r2, #7
 80025c2:	4013      	ands	r3, r2
 80025c4:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
 80025c8:	40d9      	lsrs	r1, r3
 80025ca:	000b      	movs	r3, r1
}    
 80025cc:	0018      	movs	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	40021000 	.word	0x40021000
 80025d8:	08003640 	.word	0x08003640

080025dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	025b      	lsls	r3, r3, #9
 80025f4:	4013      	ands	r3, r2
 80025f6:	d100      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80025f8:	e08e      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80025fa:	2017      	movs	r0, #23
 80025fc:	183b      	adds	r3, r7, r0
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002602:	4b6e      	ldr	r3, [pc, #440]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002604:	69da      	ldr	r2, [r3, #28]
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	055b      	lsls	r3, r3, #21
 800260a:	4013      	ands	r3, r2
 800260c:	d110      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800260e:	4b6b      	ldr	r3, [pc, #428]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002610:	69da      	ldr	r2, [r3, #28]
 8002612:	4b6a      	ldr	r3, [pc, #424]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	0549      	lsls	r1, r1, #21
 8002618:	430a      	orrs	r2, r1
 800261a:	61da      	str	r2, [r3, #28]
 800261c:	4b67      	ldr	r3, [pc, #412]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800261e:	69da      	ldr	r2, [r3, #28]
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	055b      	lsls	r3, r3, #21
 8002624:	4013      	ands	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800262a:	183b      	adds	r3, r7, r0
 800262c:	2201      	movs	r2, #1
 800262e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	4b63      	ldr	r3, [pc, #396]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4013      	ands	r3, r2
 800263a:	d11a      	bne.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800263c:	4b60      	ldr	r3, [pc, #384]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b5f      	ldr	r3, [pc, #380]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002642:	2180      	movs	r1, #128	; 0x80
 8002644:	0049      	lsls	r1, r1, #1
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800264a:	f7fe f9d1 	bl	80009f0 <HAL_GetTick>
 800264e:	0003      	movs	r3, r0
 8002650:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002652:	e008      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002654:	f7fe f9cc 	bl	80009f0 <HAL_GetTick>
 8002658:	0002      	movs	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	; 0x64
 8002660:	d901      	bls.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e0a6      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002666:	4b56      	ldr	r3, [pc, #344]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4013      	ands	r3, r2
 8002670:	d0f0      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002672:	4b52      	ldr	r3, [pc, #328]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002674:	6a1a      	ldr	r2, [r3, #32]
 8002676:	23c0      	movs	r3, #192	; 0xc0
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4013      	ands	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d034      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	23c0      	movs	r3, #192	; 0xc0
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4013      	ands	r3, r2
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	429a      	cmp	r2, r3
 8002692:	d02c      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002694:	4b49      	ldr	r3, [pc, #292]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4a4a      	ldr	r2, [pc, #296]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800269a:	4013      	ands	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800269e:	4b47      	ldr	r3, [pc, #284]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026a0:	6a1a      	ldr	r2, [r3, #32]
 80026a2:	4b46      	ldr	r3, [pc, #280]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026a4:	2180      	movs	r1, #128	; 0x80
 80026a6:	0249      	lsls	r1, r1, #9
 80026a8:	430a      	orrs	r2, r1
 80026aa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026ac:	4b43      	ldr	r3, [pc, #268]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026ae:	6a1a      	ldr	r2, [r3, #32]
 80026b0:	4b42      	ldr	r3, [pc, #264]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026b2:	4945      	ldr	r1, [pc, #276]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80026b4:	400a      	ands	r2, r1
 80026b6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026b8:	4b40      	ldr	r3, [pc, #256]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	4013      	ands	r3, r2
 80026c4:	d013      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c6:	f7fe f993 	bl	80009f0 <HAL_GetTick>
 80026ca:	0003      	movs	r3, r0
 80026cc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ce:	e009      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d0:	f7fe f98e 	bl	80009f0 <HAL_GetTick>
 80026d4:	0002      	movs	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	4a3c      	ldr	r2, [pc, #240]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d901      	bls.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e067      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e4:	4b35      	ldr	r3, [pc, #212]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	2202      	movs	r2, #2
 80026ea:	4013      	ands	r3, r2
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ee:	4b33      	ldr	r3, [pc, #204]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4a34      	ldr	r2, [pc, #208]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	0019      	movs	r1, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026fe:	430a      	orrs	r2, r1
 8002700:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002702:	2317      	movs	r3, #23
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d105      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270c:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800270e:	69da      	ldr	r2, [r3, #28]
 8002710:	4b2a      	ldr	r3, [pc, #168]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002712:	492f      	ldr	r1, [pc, #188]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002714:	400a      	ands	r2, r1
 8002716:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2201      	movs	r2, #1
 800271e:	4013      	ands	r3, r2
 8002720:	d009      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	2203      	movs	r2, #3
 8002728:	4393      	bics	r3, r2
 800272a:	0019      	movs	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	4b22      	ldr	r3, [pc, #136]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002732:	430a      	orrs	r2, r1
 8002734:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2202      	movs	r2, #2
 800273c:	4013      	ands	r3, r2
 800273e:	d009      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002740:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	4a23      	ldr	r2, [pc, #140]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002746:	4013      	ands	r3, r2
 8002748:	0019      	movs	r1, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002750:	430a      	orrs	r2, r1
 8002752:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	02db      	lsls	r3, r3, #11
 800275c:	4013      	ands	r3, r2
 800275e:	d009      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002760:	4b16      	ldr	r3, [pc, #88]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	4a1c      	ldr	r2, [pc, #112]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002766:	4013      	ands	r3, r2
 8002768:	0019      	movs	r1, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691a      	ldr	r2, [r3, #16]
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002770:	430a      	orrs	r2, r1
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2220      	movs	r2, #32
 800277a:	4013      	ands	r3, r2
 800277c:	d009      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800277e:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	2210      	movs	r2, #16
 8002784:	4393      	bics	r3, r2
 8002786:	0019      	movs	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695a      	ldr	r2, [r3, #20]
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800278e:	430a      	orrs	r2, r1
 8002790:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4013      	ands	r3, r2
 800279c:	d009      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800279e:	4b07      	ldr	r3, [pc, #28]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	2240      	movs	r2, #64	; 0x40
 80027a4:	4393      	bics	r3, r2
 80027a6:	0019      	movs	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699a      	ldr	r2, [r3, #24]
 80027ac:	4b03      	ldr	r3, [pc, #12]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027ae:	430a      	orrs	r2, r1
 80027b0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	0018      	movs	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b006      	add	sp, #24
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40007000 	.word	0x40007000
 80027c4:	fffffcff 	.word	0xfffffcff
 80027c8:	fffeffff 	.word	0xfffeffff
 80027cc:	00001388 	.word	0x00001388
 80027d0:	efffffff 	.word	0xefffffff
 80027d4:	fffcffff 	.word	0xfffcffff
 80027d8:	fff3ffff 	.word	0xfff3ffff

080027dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e042      	b.n	8002874 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	223d      	movs	r2, #61	; 0x3d
 80027f2:	5c9b      	ldrb	r3, [r3, r2]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d107      	bne.n	800280a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	223c      	movs	r2, #60	; 0x3c
 80027fe:	2100      	movs	r1, #0
 8002800:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	0018      	movs	r0, r3
 8002806:	f7fd ffd1 	bl	80007ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	223d      	movs	r2, #61	; 0x3d
 800280e:	2102      	movs	r1, #2
 8002810:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3304      	adds	r3, #4
 800281a:	0019      	movs	r1, r3
 800281c:	0010      	movs	r0, r2
 800281e:	f000 f94b 	bl	8002ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2246      	movs	r2, #70	; 0x46
 8002826:	2101      	movs	r1, #1
 8002828:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	223e      	movs	r2, #62	; 0x3e
 800282e:	2101      	movs	r1, #1
 8002830:	5499      	strb	r1, [r3, r2]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	223f      	movs	r2, #63	; 0x3f
 8002836:	2101      	movs	r1, #1
 8002838:	5499      	strb	r1, [r3, r2]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2240      	movs	r2, #64	; 0x40
 800283e:	2101      	movs	r1, #1
 8002840:	5499      	strb	r1, [r3, r2]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2241      	movs	r2, #65	; 0x41
 8002846:	2101      	movs	r1, #1
 8002848:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2242      	movs	r2, #66	; 0x42
 800284e:	2101      	movs	r1, #1
 8002850:	5499      	strb	r1, [r3, r2]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2243      	movs	r2, #67	; 0x43
 8002856:	2101      	movs	r1, #1
 8002858:	5499      	strb	r1, [r3, r2]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2244      	movs	r2, #68	; 0x44
 800285e:	2101      	movs	r1, #1
 8002860:	5499      	strb	r1, [r3, r2]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2245      	movs	r2, #69	; 0x45
 8002866:	2101      	movs	r1, #1
 8002868:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	223d      	movs	r2, #61	; 0x3d
 800286e:	2101      	movs	r1, #1
 8002870:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b002      	add	sp, #8
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	223d      	movs	r2, #61	; 0x3d
 8002888:	5c9b      	ldrb	r3, [r3, r2]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d001      	beq.n	8002894 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e033      	b.n	80028fc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	223d      	movs	r2, #61	; 0x3d
 8002898:	2102      	movs	r1, #2
 800289a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a18      	ldr	r2, [pc, #96]	; (8002904 <HAL_TIM_Base_Start+0x88>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00f      	beq.n	80028c6 <HAL_TIM_Base_Start+0x4a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	05db      	lsls	r3, r3, #23
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d009      	beq.n	80028c6 <HAL_TIM_Base_Start+0x4a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a14      	ldr	r2, [pc, #80]	; (8002908 <HAL_TIM_Base_Start+0x8c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d004      	beq.n	80028c6 <HAL_TIM_Base_Start+0x4a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a12      	ldr	r2, [pc, #72]	; (800290c <HAL_TIM_Base_Start+0x90>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d111      	bne.n	80028ea <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2207      	movs	r2, #7
 80028ce:	4013      	ands	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b06      	cmp	r3, #6
 80028d6:	d010      	beq.n	80028fa <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2101      	movs	r1, #1
 80028e4:	430a      	orrs	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e8:	e007      	b.n	80028fa <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2101      	movs	r1, #1
 80028f6:	430a      	orrs	r2, r1
 80028f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	0018      	movs	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	b004      	add	sp, #16
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40012c00 	.word	0x40012c00
 8002908:	40000400 	.word	0x40000400
 800290c:	40014000 	.word	0x40014000

08002910 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800291a:	230f      	movs	r3, #15
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	223c      	movs	r2, #60	; 0x3c
 8002926:	5c9b      	ldrb	r3, [r3, r2]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_TIM_ConfigClockSource+0x20>
 800292c:	2302      	movs	r3, #2
 800292e:	e0bc      	b.n	8002aaa <HAL_TIM_ConfigClockSource+0x19a>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	223c      	movs	r2, #60	; 0x3c
 8002934:	2101      	movs	r1, #1
 8002936:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	223d      	movs	r2, #61	; 0x3d
 800293c:	2102      	movs	r1, #2
 800293e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2277      	movs	r2, #119	; 0x77
 800294c:	4393      	bics	r3, r2
 800294e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4a58      	ldr	r2, [pc, #352]	; (8002ab4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002954:	4013      	ands	r3, r2
 8002956:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2280      	movs	r2, #128	; 0x80
 8002966:	0192      	lsls	r2, r2, #6
 8002968:	4293      	cmp	r3, r2
 800296a:	d040      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0xde>
 800296c:	2280      	movs	r2, #128	; 0x80
 800296e:	0192      	lsls	r2, r2, #6
 8002970:	4293      	cmp	r3, r2
 8002972:	d900      	bls.n	8002976 <HAL_TIM_ConfigClockSource+0x66>
 8002974:	e088      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x178>
 8002976:	2280      	movs	r2, #128	; 0x80
 8002978:	0152      	lsls	r2, r2, #5
 800297a:	4293      	cmp	r3, r2
 800297c:	d100      	bne.n	8002980 <HAL_TIM_ConfigClockSource+0x70>
 800297e:	e088      	b.n	8002a92 <HAL_TIM_ConfigClockSource+0x182>
 8002980:	2280      	movs	r2, #128	; 0x80
 8002982:	0152      	lsls	r2, r2, #5
 8002984:	4293      	cmp	r3, r2
 8002986:	d900      	bls.n	800298a <HAL_TIM_ConfigClockSource+0x7a>
 8002988:	e07e      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x178>
 800298a:	2b70      	cmp	r3, #112	; 0x70
 800298c:	d018      	beq.n	80029c0 <HAL_TIM_ConfigClockSource+0xb0>
 800298e:	d900      	bls.n	8002992 <HAL_TIM_ConfigClockSource+0x82>
 8002990:	e07a      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x178>
 8002992:	2b60      	cmp	r3, #96	; 0x60
 8002994:	d04f      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x126>
 8002996:	d900      	bls.n	800299a <HAL_TIM_ConfigClockSource+0x8a>
 8002998:	e076      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x178>
 800299a:	2b50      	cmp	r3, #80	; 0x50
 800299c:	d03b      	beq.n	8002a16 <HAL_TIM_ConfigClockSource+0x106>
 800299e:	d900      	bls.n	80029a2 <HAL_TIM_ConfigClockSource+0x92>
 80029a0:	e072      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x178>
 80029a2:	2b40      	cmp	r3, #64	; 0x40
 80029a4:	d057      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x146>
 80029a6:	d900      	bls.n	80029aa <HAL_TIM_ConfigClockSource+0x9a>
 80029a8:	e06e      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x178>
 80029aa:	2b30      	cmp	r3, #48	; 0x30
 80029ac:	d063      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0x166>
 80029ae:	d86b      	bhi.n	8002a88 <HAL_TIM_ConfigClockSource+0x178>
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	d060      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0x166>
 80029b4:	d868      	bhi.n	8002a88 <HAL_TIM_ConfigClockSource+0x178>
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d05d      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0x166>
 80029ba:	2b10      	cmp	r3, #16
 80029bc:	d05b      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0x166>
 80029be:	e063      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	6899      	ldr	r1, [r3, #8]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f000 f96c 	bl	8002cac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2277      	movs	r2, #119	; 0x77
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	609a      	str	r2, [r3, #8]
      break;
 80029ec:	e052      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6899      	ldr	r1, [r3, #8]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f000 f955 	bl	8002cac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2180      	movs	r1, #128	; 0x80
 8002a0e:	01c9      	lsls	r1, r1, #7
 8002a10:	430a      	orrs	r2, r1
 8002a12:	609a      	str	r2, [r3, #8]
      break;
 8002a14:	e03e      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6859      	ldr	r1, [r3, #4]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	001a      	movs	r2, r3
 8002a24:	f000 f8c8 	bl	8002bb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2150      	movs	r1, #80	; 0x50
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 f922 	bl	8002c78 <TIM_ITRx_SetConfig>
      break;
 8002a34:	e02e      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6859      	ldr	r1, [r3, #4]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	001a      	movs	r2, r3
 8002a44:	f000 f8e6 	bl	8002c14 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2160      	movs	r1, #96	; 0x60
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f000 f912 	bl	8002c78 <TIM_ITRx_SetConfig>
      break;
 8002a54:	e01e      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	6859      	ldr	r1, [r3, #4]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	001a      	movs	r2, r3
 8002a64:	f000 f8a8 	bl	8002bb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2140      	movs	r1, #64	; 0x40
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f000 f902 	bl	8002c78 <TIM_ITRx_SetConfig>
      break;
 8002a74:	e00e      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	0019      	movs	r1, r3
 8002a80:	0010      	movs	r0, r2
 8002a82:	f000 f8f9 	bl	8002c78 <TIM_ITRx_SetConfig>
      break;
 8002a86:	e005      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002a88:	230f      	movs	r3, #15
 8002a8a:	18fb      	adds	r3, r7, r3
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
      break;
 8002a90:	e000      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002a92:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	223d      	movs	r2, #61	; 0x3d
 8002a98:	2101      	movs	r1, #1
 8002a9a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	223c      	movs	r2, #60	; 0x3c
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	5499      	strb	r1, [r3, r2]

  return status;
 8002aa4:	230f      	movs	r3, #15
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	781b      	ldrb	r3, [r3, #0]
}
 8002aaa:	0018      	movs	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b004      	add	sp, #16
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	ffff00ff 	.word	0xffff00ff

08002ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a34      	ldr	r2, [pc, #208]	; (8002b9c <TIM_Base_SetConfig+0xe4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d008      	beq.n	8002ae2 <TIM_Base_SetConfig+0x2a>
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	05db      	lsls	r3, r3, #23
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d003      	beq.n	8002ae2 <TIM_Base_SetConfig+0x2a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a30      	ldr	r2, [pc, #192]	; (8002ba0 <TIM_Base_SetConfig+0xe8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d108      	bne.n	8002af4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2270      	movs	r2, #112	; 0x70
 8002ae6:	4393      	bics	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a29      	ldr	r2, [pc, #164]	; (8002b9c <TIM_Base_SetConfig+0xe4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d018      	beq.n	8002b2e <TIM_Base_SetConfig+0x76>
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	2380      	movs	r3, #128	; 0x80
 8002b00:	05db      	lsls	r3, r3, #23
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d013      	beq.n	8002b2e <TIM_Base_SetConfig+0x76>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a25      	ldr	r2, [pc, #148]	; (8002ba0 <TIM_Base_SetConfig+0xe8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00f      	beq.n	8002b2e <TIM_Base_SetConfig+0x76>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a24      	ldr	r2, [pc, #144]	; (8002ba4 <TIM_Base_SetConfig+0xec>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00b      	beq.n	8002b2e <TIM_Base_SetConfig+0x76>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <TIM_Base_SetConfig+0xf0>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d007      	beq.n	8002b2e <TIM_Base_SetConfig+0x76>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a22      	ldr	r2, [pc, #136]	; (8002bac <TIM_Base_SetConfig+0xf4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d003      	beq.n	8002b2e <TIM_Base_SetConfig+0x76>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a21      	ldr	r2, [pc, #132]	; (8002bb0 <TIM_Base_SetConfig+0xf8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d108      	bne.n	8002b40 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4a20      	ldr	r2, [pc, #128]	; (8002bb4 <TIM_Base_SetConfig+0xfc>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2280      	movs	r2, #128	; 0x80
 8002b44:	4393      	bics	r3, r2
 8002b46:	001a      	movs	r2, r3
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a0c      	ldr	r2, [pc, #48]	; (8002b9c <TIM_Base_SetConfig+0xe4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00b      	beq.n	8002b86 <TIM_Base_SetConfig+0xce>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a0d      	ldr	r2, [pc, #52]	; (8002ba8 <TIM_Base_SetConfig+0xf0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d007      	beq.n	8002b86 <TIM_Base_SetConfig+0xce>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a0c      	ldr	r2, [pc, #48]	; (8002bac <TIM_Base_SetConfig+0xf4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d003      	beq.n	8002b86 <TIM_Base_SetConfig+0xce>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a0b      	ldr	r2, [pc, #44]	; (8002bb0 <TIM_Base_SetConfig+0xf8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d103      	bne.n	8002b8e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	615a      	str	r2, [r3, #20]
}
 8002b94:	46c0      	nop			; (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b004      	add	sp, #16
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40012c00 	.word	0x40012c00
 8002ba0:	40000400 	.word	0x40000400
 8002ba4:	40002000 	.word	0x40002000
 8002ba8:	40014000 	.word	0x40014000
 8002bac:	40014400 	.word	0x40014400
 8002bb0:	40014800 	.word	0x40014800
 8002bb4:	fffffcff 	.word	0xfffffcff

08002bb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	4393      	bics	r3, r2
 8002bd2:	001a      	movs	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	22f0      	movs	r2, #240	; 0xf0
 8002be2:	4393      	bics	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	220a      	movs	r2, #10
 8002bf4:	4393      	bics	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	621a      	str	r2, [r3, #32]
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b006      	add	sp, #24
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	2210      	movs	r2, #16
 8002c26:	4393      	bics	r3, r2
 8002c28:	001a      	movs	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	4a0d      	ldr	r2, [pc, #52]	; (8002c74 <TIM_TI2_ConfigInputStage+0x60>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	031b      	lsls	r3, r3, #12
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	22a0      	movs	r2, #160	; 0xa0
 8002c50:	4393      	bics	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	621a      	str	r2, [r3, #32]
}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b006      	add	sp, #24
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	ffff0fff 	.word	0xffff0fff

08002c78 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2270      	movs	r2, #112	; 0x70
 8002c8c:	4393      	bics	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	2207      	movs	r2, #7
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	609a      	str	r2, [r3, #8]
}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b004      	add	sp, #16
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	4a09      	ldr	r2, [pc, #36]	; (8002ce8 <TIM_ETR_SetConfig+0x3c>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	021a      	lsls	r2, r3, #8
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	609a      	str	r2, [r3, #8]
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b006      	add	sp, #24
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	ffff00ff 	.word	0xffff00ff

08002cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	223c      	movs	r2, #60	; 0x3c
 8002cfa:	5c9b      	ldrb	r3, [r3, r2]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e047      	b.n	8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	223c      	movs	r2, #60	; 0x3c
 8002d08:	2101      	movs	r1, #1
 8002d0a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	223d      	movs	r2, #61	; 0x3d
 8002d10:	2102      	movs	r1, #2
 8002d12:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2270      	movs	r2, #112	; 0x70
 8002d28:	4393      	bics	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a16      	ldr	r2, [pc, #88]	; (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00f      	beq.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	05db      	lsls	r3, r3, #23
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d009      	beq.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a11      	ldr	r2, [pc, #68]	; (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d004      	beq.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a10      	ldr	r2, [pc, #64]	; (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d10c      	bne.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2280      	movs	r2, #128	; 0x80
 8002d6c:	4393      	bics	r3, r2
 8002d6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	223d      	movs	r2, #61	; 0x3d
 8002d86:	2101      	movs	r1, #1
 8002d88:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	223c      	movs	r2, #60	; 0x3c
 8002d8e:	2100      	movs	r1, #0
 8002d90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	0018      	movs	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b004      	add	sp, #16
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40012c00 	.word	0x40012c00
 8002da0:	40000400 	.word	0x40000400
 8002da4:	40014000 	.word	0x40014000

08002da8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e044      	b.n	8002e44 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d107      	bne.n	8002dd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2274      	movs	r2, #116	; 0x74
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f7fd fd09 	bl	80007e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2224      	movs	r2, #36	; 0x24
 8002dd6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2101      	movs	r1, #1
 8002de4:	438a      	bics	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	0018      	movs	r0, r3
 8002dec:	f000 f830 	bl	8002e50 <UART_SetConfig>
 8002df0:	0003      	movs	r3, r0
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e024      	b.n	8002e44 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	0018      	movs	r0, r3
 8002e06:	f000 fa0b 	bl	8003220 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	490d      	ldr	r1, [pc, #52]	; (8002e4c <HAL_UART_Init+0xa4>)
 8002e16:	400a      	ands	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	212a      	movs	r1, #42	; 0x2a
 8002e26:	438a      	bics	r2, r1
 8002e28:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2101      	movs	r1, #1
 8002e36:	430a      	orrs	r2, r1
 8002e38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f000 faa3 	bl	8003388 <UART_CheckIdleState>
 8002e42:	0003      	movs	r3, r0
}
 8002e44:	0018      	movs	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b002      	add	sp, #8
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	ffffb7ff 	.word	0xffffb7ff

08002e50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e58:	231e      	movs	r3, #30
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4abe      	ldr	r2, [pc, #760]	; (8003178 <UART_SetConfig+0x328>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	0019      	movs	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4ab9      	ldr	r2, [pc, #740]	; (800317c <UART_SetConfig+0x32c>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	0019      	movs	r1, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	4ab0      	ldr	r2, [pc, #704]	; (8003180 <UART_SetConfig+0x330>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4aac      	ldr	r2, [pc, #688]	; (8003184 <UART_SetConfig+0x334>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d127      	bne.n	8002f26 <UART_SetConfig+0xd6>
 8002ed6:	4bac      	ldr	r3, [pc, #688]	; (8003188 <UART_SetConfig+0x338>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	2203      	movs	r2, #3
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d00d      	beq.n	8002efe <UART_SetConfig+0xae>
 8002ee2:	d81b      	bhi.n	8002f1c <UART_SetConfig+0xcc>
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d014      	beq.n	8002f12 <UART_SetConfig+0xc2>
 8002ee8:	d818      	bhi.n	8002f1c <UART_SetConfig+0xcc>
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <UART_SetConfig+0xa4>
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d00a      	beq.n	8002f08 <UART_SetConfig+0xb8>
 8002ef2:	e013      	b.n	8002f1c <UART_SetConfig+0xcc>
 8002ef4:	231f      	movs	r3, #31
 8002ef6:	18fb      	adds	r3, r7, r3
 8002ef8:	2200      	movs	r2, #0
 8002efa:	701a      	strb	r2, [r3, #0]
 8002efc:	e0bd      	b.n	800307a <UART_SetConfig+0x22a>
 8002efe:	231f      	movs	r3, #31
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	2202      	movs	r2, #2
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	e0b8      	b.n	800307a <UART_SetConfig+0x22a>
 8002f08:	231f      	movs	r3, #31
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	e0b3      	b.n	800307a <UART_SetConfig+0x22a>
 8002f12:	231f      	movs	r3, #31
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	2208      	movs	r2, #8
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	e0ae      	b.n	800307a <UART_SetConfig+0x22a>
 8002f1c:	231f      	movs	r3, #31
 8002f1e:	18fb      	adds	r3, r7, r3
 8002f20:	2210      	movs	r2, #16
 8002f22:	701a      	strb	r2, [r3, #0]
 8002f24:	e0a9      	b.n	800307a <UART_SetConfig+0x22a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a98      	ldr	r2, [pc, #608]	; (800318c <UART_SetConfig+0x33c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d134      	bne.n	8002f9a <UART_SetConfig+0x14a>
 8002f30:	4b95      	ldr	r3, [pc, #596]	; (8003188 <UART_SetConfig+0x338>)
 8002f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f34:	23c0      	movs	r3, #192	; 0xc0
 8002f36:	029b      	lsls	r3, r3, #10
 8002f38:	4013      	ands	r3, r2
 8002f3a:	22c0      	movs	r2, #192	; 0xc0
 8002f3c:	0292      	lsls	r2, r2, #10
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d017      	beq.n	8002f72 <UART_SetConfig+0x122>
 8002f42:	22c0      	movs	r2, #192	; 0xc0
 8002f44:	0292      	lsls	r2, r2, #10
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d822      	bhi.n	8002f90 <UART_SetConfig+0x140>
 8002f4a:	2280      	movs	r2, #128	; 0x80
 8002f4c:	0292      	lsls	r2, r2, #10
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d019      	beq.n	8002f86 <UART_SetConfig+0x136>
 8002f52:	2280      	movs	r2, #128	; 0x80
 8002f54:	0292      	lsls	r2, r2, #10
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d81a      	bhi.n	8002f90 <UART_SetConfig+0x140>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d004      	beq.n	8002f68 <UART_SetConfig+0x118>
 8002f5e:	2280      	movs	r2, #128	; 0x80
 8002f60:	0252      	lsls	r2, r2, #9
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00a      	beq.n	8002f7c <UART_SetConfig+0x12c>
 8002f66:	e013      	b.n	8002f90 <UART_SetConfig+0x140>
 8002f68:	231f      	movs	r3, #31
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
 8002f70:	e083      	b.n	800307a <UART_SetConfig+0x22a>
 8002f72:	231f      	movs	r3, #31
 8002f74:	18fb      	adds	r3, r7, r3
 8002f76:	2202      	movs	r2, #2
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	e07e      	b.n	800307a <UART_SetConfig+0x22a>
 8002f7c:	231f      	movs	r3, #31
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	2204      	movs	r2, #4
 8002f82:	701a      	strb	r2, [r3, #0]
 8002f84:	e079      	b.n	800307a <UART_SetConfig+0x22a>
 8002f86:	231f      	movs	r3, #31
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	701a      	strb	r2, [r3, #0]
 8002f8e:	e074      	b.n	800307a <UART_SetConfig+0x22a>
 8002f90:	231f      	movs	r3, #31
 8002f92:	18fb      	adds	r3, r7, r3
 8002f94:	2210      	movs	r2, #16
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	e06f      	b.n	800307a <UART_SetConfig+0x22a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a7c      	ldr	r2, [pc, #496]	; (8003190 <UART_SetConfig+0x340>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d134      	bne.n	800300e <UART_SetConfig+0x1be>
 8002fa4:	4b78      	ldr	r3, [pc, #480]	; (8003188 <UART_SetConfig+0x338>)
 8002fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fa8:	23c0      	movs	r3, #192	; 0xc0
 8002faa:	031b      	lsls	r3, r3, #12
 8002fac:	4013      	ands	r3, r2
 8002fae:	22c0      	movs	r2, #192	; 0xc0
 8002fb0:	0312      	lsls	r2, r2, #12
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d017      	beq.n	8002fe6 <UART_SetConfig+0x196>
 8002fb6:	22c0      	movs	r2, #192	; 0xc0
 8002fb8:	0312      	lsls	r2, r2, #12
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d822      	bhi.n	8003004 <UART_SetConfig+0x1b4>
 8002fbe:	2280      	movs	r2, #128	; 0x80
 8002fc0:	0312      	lsls	r2, r2, #12
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d019      	beq.n	8002ffa <UART_SetConfig+0x1aa>
 8002fc6:	2280      	movs	r2, #128	; 0x80
 8002fc8:	0312      	lsls	r2, r2, #12
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d81a      	bhi.n	8003004 <UART_SetConfig+0x1b4>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d004      	beq.n	8002fdc <UART_SetConfig+0x18c>
 8002fd2:	2280      	movs	r2, #128	; 0x80
 8002fd4:	02d2      	lsls	r2, r2, #11
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00a      	beq.n	8002ff0 <UART_SetConfig+0x1a0>
 8002fda:	e013      	b.n	8003004 <UART_SetConfig+0x1b4>
 8002fdc:	231f      	movs	r3, #31
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
 8002fe4:	e049      	b.n	800307a <UART_SetConfig+0x22a>
 8002fe6:	231f      	movs	r3, #31
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	2202      	movs	r2, #2
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	e044      	b.n	800307a <UART_SetConfig+0x22a>
 8002ff0:	231f      	movs	r3, #31
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	701a      	strb	r2, [r3, #0]
 8002ff8:	e03f      	b.n	800307a <UART_SetConfig+0x22a>
 8002ffa:	231f      	movs	r3, #31
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	2208      	movs	r2, #8
 8003000:	701a      	strb	r2, [r3, #0]
 8003002:	e03a      	b.n	800307a <UART_SetConfig+0x22a>
 8003004:	231f      	movs	r3, #31
 8003006:	18fb      	adds	r3, r7, r3
 8003008:	2210      	movs	r2, #16
 800300a:	701a      	strb	r2, [r3, #0]
 800300c:	e035      	b.n	800307a <UART_SetConfig+0x22a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a60      	ldr	r2, [pc, #384]	; (8003194 <UART_SetConfig+0x344>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d104      	bne.n	8003022 <UART_SetConfig+0x1d2>
 8003018:	231f      	movs	r3, #31
 800301a:	18fb      	adds	r3, r7, r3
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
 8003020:	e02b      	b.n	800307a <UART_SetConfig+0x22a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a5c      	ldr	r2, [pc, #368]	; (8003198 <UART_SetConfig+0x348>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d104      	bne.n	8003036 <UART_SetConfig+0x1e6>
 800302c:	231f      	movs	r3, #31
 800302e:	18fb      	adds	r3, r7, r3
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]
 8003034:	e021      	b.n	800307a <UART_SetConfig+0x22a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a58      	ldr	r2, [pc, #352]	; (800319c <UART_SetConfig+0x34c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d104      	bne.n	800304a <UART_SetConfig+0x1fa>
 8003040:	231f      	movs	r3, #31
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
 8003048:	e017      	b.n	800307a <UART_SetConfig+0x22a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a54      	ldr	r2, [pc, #336]	; (80031a0 <UART_SetConfig+0x350>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d104      	bne.n	800305e <UART_SetConfig+0x20e>
 8003054:	231f      	movs	r3, #31
 8003056:	18fb      	adds	r3, r7, r3
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]
 800305c:	e00d      	b.n	800307a <UART_SetConfig+0x22a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a50      	ldr	r2, [pc, #320]	; (80031a4 <UART_SetConfig+0x354>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d104      	bne.n	8003072 <UART_SetConfig+0x222>
 8003068:	231f      	movs	r3, #31
 800306a:	18fb      	adds	r3, r7, r3
 800306c:	2200      	movs	r2, #0
 800306e:	701a      	strb	r2, [r3, #0]
 8003070:	e003      	b.n	800307a <UART_SetConfig+0x22a>
 8003072:	231f      	movs	r3, #31
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	2210      	movs	r2, #16
 8003078:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69da      	ldr	r2, [r3, #28]
 800307e:	2380      	movs	r3, #128	; 0x80
 8003080:	021b      	lsls	r3, r3, #8
 8003082:	429a      	cmp	r2, r3
 8003084:	d15d      	bne.n	8003142 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8003086:	231f      	movs	r3, #31
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b08      	cmp	r3, #8
 800308e:	d015      	beq.n	80030bc <UART_SetConfig+0x26c>
 8003090:	dc18      	bgt.n	80030c4 <UART_SetConfig+0x274>
 8003092:	2b04      	cmp	r3, #4
 8003094:	d00d      	beq.n	80030b2 <UART_SetConfig+0x262>
 8003096:	dc15      	bgt.n	80030c4 <UART_SetConfig+0x274>
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <UART_SetConfig+0x252>
 800309c:	2b02      	cmp	r3, #2
 800309e:	d005      	beq.n	80030ac <UART_SetConfig+0x25c>
 80030a0:	e010      	b.n	80030c4 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030a2:	f7ff fa85 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 80030a6:	0003      	movs	r3, r0
 80030a8:	61bb      	str	r3, [r7, #24]
        break;
 80030aa:	e012      	b.n	80030d2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030ac:	4b3e      	ldr	r3, [pc, #248]	; (80031a8 <UART_SetConfig+0x358>)
 80030ae:	61bb      	str	r3, [r7, #24]
        break;
 80030b0:	e00f      	b.n	80030d2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030b2:	f7ff f9f3 	bl	800249c <HAL_RCC_GetSysClockFreq>
 80030b6:	0003      	movs	r3, r0
 80030b8:	61bb      	str	r3, [r7, #24]
        break;
 80030ba:	e00a      	b.n	80030d2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030bc:	2380      	movs	r3, #128	; 0x80
 80030be:	021b      	lsls	r3, r3, #8
 80030c0:	61bb      	str	r3, [r7, #24]
        break;
 80030c2:	e006      	b.n	80030d2 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030c8:	231e      	movs	r3, #30
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
        break;
 80030d0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d100      	bne.n	80030da <UART_SetConfig+0x28a>
 80030d8:	e095      	b.n	8003206 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	005a      	lsls	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	085b      	lsrs	r3, r3, #1
 80030e4:	18d2      	adds	r2, r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	0019      	movs	r1, r3
 80030ec:	0010      	movs	r0, r2
 80030ee:	f7fd f809 	bl	8000104 <__udivsi3>
 80030f2:	0003      	movs	r3, r0
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	2b0f      	cmp	r3, #15
 80030fc:	d91c      	bls.n	8003138 <UART_SetConfig+0x2e8>
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	2380      	movs	r3, #128	; 0x80
 8003102:	025b      	lsls	r3, r3, #9
 8003104:	429a      	cmp	r2, r3
 8003106:	d217      	bcs.n	8003138 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	b29a      	uxth	r2, r3
 800310c:	200e      	movs	r0, #14
 800310e:	183b      	adds	r3, r7, r0
 8003110:	210f      	movs	r1, #15
 8003112:	438a      	bics	r2, r1
 8003114:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	b29b      	uxth	r3, r3
 800311c:	2207      	movs	r2, #7
 800311e:	4013      	ands	r3, r2
 8003120:	b299      	uxth	r1, r3
 8003122:	183b      	adds	r3, r7, r0
 8003124:	183a      	adds	r2, r7, r0
 8003126:	8812      	ldrh	r2, [r2, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	183a      	adds	r2, r7, r0
 8003132:	8812      	ldrh	r2, [r2, #0]
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	e066      	b.n	8003206 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003138:	231e      	movs	r3, #30
 800313a:	18fb      	adds	r3, r7, r3
 800313c:	2201      	movs	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]
 8003140:	e061      	b.n	8003206 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003142:	231f      	movs	r3, #31
 8003144:	18fb      	adds	r3, r7, r3
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b08      	cmp	r3, #8
 800314a:	d02f      	beq.n	80031ac <UART_SetConfig+0x35c>
 800314c:	dc32      	bgt.n	80031b4 <UART_SetConfig+0x364>
 800314e:	2b04      	cmp	r3, #4
 8003150:	d00d      	beq.n	800316e <UART_SetConfig+0x31e>
 8003152:	dc2f      	bgt.n	80031b4 <UART_SetConfig+0x364>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <UART_SetConfig+0x30e>
 8003158:	2b02      	cmp	r3, #2
 800315a:	d005      	beq.n	8003168 <UART_SetConfig+0x318>
 800315c:	e02a      	b.n	80031b4 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800315e:	f7ff fa27 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 8003162:	0003      	movs	r3, r0
 8003164:	61bb      	str	r3, [r7, #24]
        break;
 8003166:	e02c      	b.n	80031c2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003168:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <UART_SetConfig+0x358>)
 800316a:	61bb      	str	r3, [r7, #24]
        break;
 800316c:	e029      	b.n	80031c2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800316e:	f7ff f995 	bl	800249c <HAL_RCC_GetSysClockFreq>
 8003172:	0003      	movs	r3, r0
 8003174:	61bb      	str	r3, [r7, #24]
        break;
 8003176:	e024      	b.n	80031c2 <UART_SetConfig+0x372>
 8003178:	efff69f3 	.word	0xefff69f3
 800317c:	ffffcfff 	.word	0xffffcfff
 8003180:	fffff4ff 	.word	0xfffff4ff
 8003184:	40013800 	.word	0x40013800
 8003188:	40021000 	.word	0x40021000
 800318c:	40004400 	.word	0x40004400
 8003190:	40004800 	.word	0x40004800
 8003194:	40004c00 	.word	0x40004c00
 8003198:	40005000 	.word	0x40005000
 800319c:	40011400 	.word	0x40011400
 80031a0:	40011800 	.word	0x40011800
 80031a4:	40011c00 	.word	0x40011c00
 80031a8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	61bb      	str	r3, [r7, #24]
        break;
 80031b2:	e006      	b.n	80031c2 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031b8:	231e      	movs	r3, #30
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
        break;
 80031c0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01e      	beq.n	8003206 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	085a      	lsrs	r2, r3, #1
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	18d2      	adds	r2, r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	0019      	movs	r1, r3
 80031d8:	0010      	movs	r0, r2
 80031da:	f7fc ff93 	bl	8000104 <__udivsi3>
 80031de:	0003      	movs	r3, r0
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	2b0f      	cmp	r3, #15
 80031e8:	d909      	bls.n	80031fe <UART_SetConfig+0x3ae>
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	2380      	movs	r3, #128	; 0x80
 80031ee:	025b      	lsls	r3, r3, #9
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d204      	bcs.n	80031fe <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	60da      	str	r2, [r3, #12]
 80031fc:	e003      	b.n	8003206 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80031fe:	231e      	movs	r3, #30
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	2201      	movs	r2, #1
 8003204:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003212:	231e      	movs	r3, #30
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	781b      	ldrb	r3, [r3, #0]
}
 8003218:	0018      	movs	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	b008      	add	sp, #32
 800321e:	bd80      	pop	{r7, pc}

08003220 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	2201      	movs	r2, #1
 800322e:	4013      	ands	r3, r2
 8003230:	d00b      	beq.n	800324a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	4a4a      	ldr	r2, [pc, #296]	; (8003364 <UART_AdvFeatureConfig+0x144>)
 800323a:	4013      	ands	r3, r2
 800323c:	0019      	movs	r1, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	2202      	movs	r2, #2
 8003250:	4013      	ands	r3, r2
 8003252:	d00b      	beq.n	800326c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4a43      	ldr	r2, [pc, #268]	; (8003368 <UART_AdvFeatureConfig+0x148>)
 800325c:	4013      	ands	r3, r2
 800325e:	0019      	movs	r1, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	2204      	movs	r2, #4
 8003272:	4013      	ands	r3, r2
 8003274:	d00b      	beq.n	800328e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4a3b      	ldr	r2, [pc, #236]	; (800336c <UART_AdvFeatureConfig+0x14c>)
 800327e:	4013      	ands	r3, r2
 8003280:	0019      	movs	r1, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	2208      	movs	r2, #8
 8003294:	4013      	ands	r3, r2
 8003296:	d00b      	beq.n	80032b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4a34      	ldr	r2, [pc, #208]	; (8003370 <UART_AdvFeatureConfig+0x150>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	0019      	movs	r1, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	2210      	movs	r2, #16
 80032b6:	4013      	ands	r3, r2
 80032b8:	d00b      	beq.n	80032d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a2c      	ldr	r2, [pc, #176]	; (8003374 <UART_AdvFeatureConfig+0x154>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	0019      	movs	r1, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	2220      	movs	r2, #32
 80032d8:	4013      	ands	r3, r2
 80032da:	d00b      	beq.n	80032f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	4a25      	ldr	r2, [pc, #148]	; (8003378 <UART_AdvFeatureConfig+0x158>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	0019      	movs	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	2240      	movs	r2, #64	; 0x40
 80032fa:	4013      	ands	r3, r2
 80032fc:	d01d      	beq.n	800333a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4a1d      	ldr	r2, [pc, #116]	; (800337c <UART_AdvFeatureConfig+0x15c>)
 8003306:	4013      	ands	r3, r2
 8003308:	0019      	movs	r1, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	035b      	lsls	r3, r3, #13
 800331e:	429a      	cmp	r2, r3
 8003320:	d10b      	bne.n	800333a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	4a15      	ldr	r2, [pc, #84]	; (8003380 <UART_AdvFeatureConfig+0x160>)
 800332a:	4013      	ands	r3, r2
 800332c:	0019      	movs	r1, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	2280      	movs	r2, #128	; 0x80
 8003340:	4013      	ands	r3, r2
 8003342:	d00b      	beq.n	800335c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	4a0e      	ldr	r2, [pc, #56]	; (8003384 <UART_AdvFeatureConfig+0x164>)
 800334c:	4013      	ands	r3, r2
 800334e:	0019      	movs	r1, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	605a      	str	r2, [r3, #4]
  }
}
 800335c:	46c0      	nop			; (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	b002      	add	sp, #8
 8003362:	bd80      	pop	{r7, pc}
 8003364:	fffdffff 	.word	0xfffdffff
 8003368:	fffeffff 	.word	0xfffeffff
 800336c:	fffbffff 	.word	0xfffbffff
 8003370:	ffff7fff 	.word	0xffff7fff
 8003374:	ffffefff 	.word	0xffffefff
 8003378:	ffffdfff 	.word	0xffffdfff
 800337c:	ffefffff 	.word	0xffefffff
 8003380:	ff9fffff 	.word	0xff9fffff
 8003384:	fff7ffff 	.word	0xfff7ffff

08003388 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af02      	add	r7, sp, #8
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2280      	movs	r2, #128	; 0x80
 8003394:	2100      	movs	r1, #0
 8003396:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003398:	f7fd fb2a 	bl	80009f0 <HAL_GetTick>
 800339c:	0003      	movs	r3, r0
 800339e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2208      	movs	r2, #8
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d10c      	bne.n	80033c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2280      	movs	r2, #128	; 0x80
 80033b2:	0391      	lsls	r1, r2, #14
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	4a17      	ldr	r2, [pc, #92]	; (8003414 <UART_CheckIdleState+0x8c>)
 80033b8:	9200      	str	r2, [sp, #0]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f000 f82c 	bl	8003418 <UART_WaitOnFlagUntilTimeout>
 80033c0:	1e03      	subs	r3, r0, #0
 80033c2:	d001      	beq.n	80033c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e021      	b.n	800340c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2204      	movs	r2, #4
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d10c      	bne.n	80033f0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2280      	movs	r2, #128	; 0x80
 80033da:	03d1      	lsls	r1, r2, #15
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	4a0d      	ldr	r2, [pc, #52]	; (8003414 <UART_CheckIdleState+0x8c>)
 80033e0:	9200      	str	r2, [sp, #0]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f000 f818 	bl	8003418 <UART_WaitOnFlagUntilTimeout>
 80033e8:	1e03      	subs	r3, r0, #0
 80033ea:	d001      	beq.n	80033f0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e00d      	b.n	800340c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2220      	movs	r2, #32
 80033fa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2274      	movs	r2, #116	; 0x74
 8003406:	2100      	movs	r1, #0
 8003408:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	0018      	movs	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	b004      	add	sp, #16
 8003412:	bd80      	pop	{r7, pc}
 8003414:	01ffffff 	.word	0x01ffffff

08003418 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b094      	sub	sp, #80	; 0x50
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	1dfb      	adds	r3, r7, #7
 8003426:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003428:	e0a3      	b.n	8003572 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800342c:	3301      	adds	r3, #1
 800342e:	d100      	bne.n	8003432 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003430:	e09f      	b.n	8003572 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003432:	f7fd fadd 	bl	80009f0 <HAL_GetTick>
 8003436:	0002      	movs	r2, r0
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800343e:	429a      	cmp	r2, r3
 8003440:	d302      	bcc.n	8003448 <UART_WaitOnFlagUntilTimeout+0x30>
 8003442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003444:	2b00      	cmp	r3, #0
 8003446:	d13d      	bne.n	80034c4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003448:	f3ef 8310 	mrs	r3, PRIMASK
 800344c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003450:	647b      	str	r3, [r7, #68]	; 0x44
 8003452:	2301      	movs	r3, #1
 8003454:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003458:	f383 8810 	msr	PRIMASK, r3
}
 800345c:	46c0      	nop			; (mov r8, r8)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	494c      	ldr	r1, [pc, #304]	; (800359c <UART_WaitOnFlagUntilTimeout+0x184>)
 800346a:	400a      	ands	r2, r1
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003470:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	f383 8810 	msr	PRIMASK, r3
}
 8003478:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800347a:	f3ef 8310 	mrs	r3, PRIMASK
 800347e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003482:	643b      	str	r3, [r7, #64]	; 0x40
 8003484:	2301      	movs	r3, #1
 8003486:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348a:	f383 8810 	msr	PRIMASK, r3
}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2101      	movs	r1, #1
 800349c:	438a      	bics	r2, r1
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a6:	f383 8810 	msr	PRIMASK, r3
}
 80034aa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2274      	movs	r2, #116	; 0x74
 80034bc:	2100      	movs	r1, #0
 80034be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e067      	b.n	8003594 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2204      	movs	r2, #4
 80034cc:	4013      	ands	r3, r2
 80034ce:	d050      	beq.n	8003572 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69da      	ldr	r2, [r3, #28]
 80034d6:	2380      	movs	r3, #128	; 0x80
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	401a      	ands	r2, r3
 80034dc:	2380      	movs	r3, #128	; 0x80
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d146      	bne.n	8003572 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2280      	movs	r2, #128	; 0x80
 80034ea:	0112      	lsls	r2, r2, #4
 80034ec:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ee:	f3ef 8310 	mrs	r3, PRIMASK
 80034f2:	613b      	str	r3, [r7, #16]
  return(result);
 80034f4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034f8:	2301      	movs	r3, #1
 80034fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f383 8810 	msr	PRIMASK, r3
}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4923      	ldr	r1, [pc, #140]	; (800359c <UART_WaitOnFlagUntilTimeout+0x184>)
 8003510:	400a      	ands	r2, r1
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003516:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	f383 8810 	msr	PRIMASK, r3
}
 800351e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003520:	f3ef 8310 	mrs	r3, PRIMASK
 8003524:	61fb      	str	r3, [r7, #28]
  return(result);
 8003526:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003528:	64bb      	str	r3, [r7, #72]	; 0x48
 800352a:	2301      	movs	r3, #1
 800352c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	f383 8810 	msr	PRIMASK, r3
}
 8003534:	46c0      	nop			; (mov r8, r8)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2101      	movs	r1, #1
 8003542:	438a      	bics	r2, r1
 8003544:	609a      	str	r2, [r3, #8]
 8003546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	f383 8810 	msr	PRIMASK, r3
}
 8003550:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2280      	movs	r2, #128	; 0x80
 8003562:	2120      	movs	r1, #32
 8003564:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2274      	movs	r2, #116	; 0x74
 800356a:	2100      	movs	r1, #0
 800356c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e010      	b.n	8003594 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	4013      	ands	r3, r2
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	425a      	negs	r2, r3
 8003582:	4153      	adcs	r3, r2
 8003584:	b2db      	uxtb	r3, r3
 8003586:	001a      	movs	r2, r3
 8003588:	1dfb      	adds	r3, r7, #7
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d100      	bne.n	8003592 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003590:	e74b      	b.n	800342a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	b014      	add	sp, #80	; 0x50
 800359a:	bd80      	pop	{r7, pc}
 800359c:	fffffe5f 	.word	0xfffffe5f

080035a0 <__libc_init_array>:
 80035a0:	b570      	push	{r4, r5, r6, lr}
 80035a2:	2600      	movs	r6, #0
 80035a4:	4d0c      	ldr	r5, [pc, #48]	; (80035d8 <__libc_init_array+0x38>)
 80035a6:	4c0d      	ldr	r4, [pc, #52]	; (80035dc <__libc_init_array+0x3c>)
 80035a8:	1b64      	subs	r4, r4, r5
 80035aa:	10a4      	asrs	r4, r4, #2
 80035ac:	42a6      	cmp	r6, r4
 80035ae:	d109      	bne.n	80035c4 <__libc_init_array+0x24>
 80035b0:	2600      	movs	r6, #0
 80035b2:	f000 f821 	bl	80035f8 <_init>
 80035b6:	4d0a      	ldr	r5, [pc, #40]	; (80035e0 <__libc_init_array+0x40>)
 80035b8:	4c0a      	ldr	r4, [pc, #40]	; (80035e4 <__libc_init_array+0x44>)
 80035ba:	1b64      	subs	r4, r4, r5
 80035bc:	10a4      	asrs	r4, r4, #2
 80035be:	42a6      	cmp	r6, r4
 80035c0:	d105      	bne.n	80035ce <__libc_init_array+0x2e>
 80035c2:	bd70      	pop	{r4, r5, r6, pc}
 80035c4:	00b3      	lsls	r3, r6, #2
 80035c6:	58eb      	ldr	r3, [r5, r3]
 80035c8:	4798      	blx	r3
 80035ca:	3601      	adds	r6, #1
 80035cc:	e7ee      	b.n	80035ac <__libc_init_array+0xc>
 80035ce:	00b3      	lsls	r3, r6, #2
 80035d0:	58eb      	ldr	r3, [r5, r3]
 80035d2:	4798      	blx	r3
 80035d4:	3601      	adds	r6, #1
 80035d6:	e7f2      	b.n	80035be <__libc_init_array+0x1e>
 80035d8:	08003648 	.word	0x08003648
 80035dc:	08003648 	.word	0x08003648
 80035e0:	08003648 	.word	0x08003648
 80035e4:	0800364c 	.word	0x0800364c

080035e8 <memset>:
 80035e8:	0003      	movs	r3, r0
 80035ea:	1882      	adds	r2, r0, r2
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d100      	bne.n	80035f2 <memset+0xa>
 80035f0:	4770      	bx	lr
 80035f2:	7019      	strb	r1, [r3, #0]
 80035f4:	3301      	adds	r3, #1
 80035f6:	e7f9      	b.n	80035ec <memset+0x4>

080035f8 <_init>:
 80035f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fe:	bc08      	pop	{r3}
 8003600:	469e      	mov	lr, r3
 8003602:	4770      	bx	lr

08003604 <_fini>:
 8003604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360a:	bc08      	pop	{r3}
 800360c:	469e      	mov	lr, r3
 800360e:	4770      	bx	lr
