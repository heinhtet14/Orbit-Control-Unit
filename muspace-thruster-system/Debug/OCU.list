
OCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e6c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003f28  08003f28  00013f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f60  08003f60  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f60  08003f60  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f60  08003f60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f60  08003f60  00013f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f64  08003f64  00013f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000010  08003f74  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08003f74  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151fb  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a03  00000000  00000000  0003522f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00037c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  00038d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c964  00000000  00000000  00039d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015897  00000000  00000000  000566b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad037  00000000  00000000  0006bf4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118f82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d84  00000000  00000000  00118fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003f10 	.word	0x08003f10

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08003f10 	.word	0x08003f10

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <HAL_ADC_ConvCpltCallback>:
	HAL_TIM_Base_Start(timer);
	HAL_ADC_Start_DMA(hadc, values, 3);


}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]

}
 8000224:	46c0      	nop			; (mov r8, r8)
 8000226:	46bd      	mov	sp, r7
 8000228:	b002      	add	sp, #8
 800022a:	bd80      	pop	{r7, pc}

0800022c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000232:	f000 fcfd 	bl	8000c30 <HAL_Init>

  /* USER CODE BEGIN Init */
	Sensors_Init(); /* Control On/Off For Loads */
 8000236:	f003 fe3a 	bl	8003eae <Sensors_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023a:	f000 f829 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023e:	f000 fa25 	bl	800068c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000242:	f000 f99d 	bl	8000580 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000246:	f000 f907 	bl	8000458 <MX_I2C1_Init>
  MX_DMA_Init();
 800024a:	f000 f9f9 	bl	8000640 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800024e:	f000 f9c7 	bl	80005e0 <MX_USART3_UART_Init>
  MX_ADC_Init();
 8000252:	f000 f88d 	bl	8000370 <MX_ADC_Init>
  MX_TIM2_Init();
 8000256:	f000 f93f 	bl	80004d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  FIR_DSP_Init(&lpfil);
 800025a:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <main+0x5c>)
 800025c:	0018      	movs	r0, r3
 800025e:	f003 fe01 	bl	8003e64 <FIR_DSP_Init>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		for(int abc = 0; abc < 10; abc++)
 8000262:	2300      	movs	r3, #0
 8000264:	607b      	str	r3, [r7, #4]
 8000266:	e00a      	b.n	800027e <main+0x52>
		{
		 count++;
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <main+0x60>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	1c5a      	adds	r2, r3, #1
 800026e:	4b07      	ldr	r3, [pc, #28]	; (800028c <main+0x60>)
 8000270:	601a      	str	r2, [r3, #0]
		 HAL_Delay(100);
 8000272:	2064      	movs	r0, #100	; 0x64
 8000274:	f000 fd40 	bl	8000cf8 <HAL_Delay>
		for(int abc = 0; abc < 10; abc++)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3301      	adds	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b09      	cmp	r3, #9
 8000282:	ddf1      	ble.n	8000268 <main+0x3c>
 8000284:	e7ed      	b.n	8000262 <main+0x36>
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	20000030 	.word	0x20000030
 800028c:	2000002c 	.word	0x2000002c

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b099      	sub	sp, #100	; 0x64
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	242c      	movs	r4, #44	; 0x2c
 8000298:	193b      	adds	r3, r7, r4
 800029a:	0018      	movs	r0, r3
 800029c:	2334      	movs	r3, #52	; 0x34
 800029e:	001a      	movs	r2, r3
 80002a0:	2100      	movs	r1, #0
 80002a2:	f003 fe2d 	bl	8003f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a6:	231c      	movs	r3, #28
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	0018      	movs	r0, r3
 80002ac:	2310      	movs	r3, #16
 80002ae:	001a      	movs	r2, r3
 80002b0:	2100      	movs	r1, #0
 80002b2:	f003 fe25 	bl	8003f00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b6:	003b      	movs	r3, r7
 80002b8:	0018      	movs	r0, r3
 80002ba:	231c      	movs	r3, #28
 80002bc:	001a      	movs	r2, r3
 80002be:	2100      	movs	r1, #0
 80002c0:	f003 fe1e 	bl	8003f00 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002c4:	0021      	movs	r1, r4
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2212      	movs	r2, #18
 80002ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2201      	movs	r2, #1
 80002d0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2201      	movs	r2, #1
 80002d6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2210      	movs	r2, #16
 80002dc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2210      	movs	r2, #16
 80002e2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2202      	movs	r2, #2
 80002e8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2280      	movs	r2, #128	; 0x80
 80002ee:	0212      	lsls	r2, r2, #8
 80002f0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	22a0      	movs	r2, #160	; 0xa0
 80002f6:	0392      	lsls	r2, r2, #14
 80002f8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2201      	movs	r2, #1
 80002fe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000300:	187b      	adds	r3, r7, r1
 8000302:	0018      	movs	r0, r3
 8000304:	f001 fd76 	bl	8001df4 <HAL_RCC_OscConfig>
 8000308:	1e03      	subs	r3, r0, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800030c:	f000 fa28 	bl	8000760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000310:	211c      	movs	r1, #28
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2207      	movs	r2, #7
 8000316:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2202      	movs	r2, #2
 800031c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2101      	movs	r1, #1
 800032e:	0018      	movs	r0, r3
 8000330:	f002 f8e6 	bl	8002500 <HAL_RCC_ClockConfig>
 8000334:	1e03      	subs	r3, r0, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000338:	f000 fa12 	bl	8000760 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 800033c:	003b      	movs	r3, r7
 800033e:	4a0b      	ldr	r2, [pc, #44]	; (800036c <SystemClock_Config+0xdc>)
 8000340:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000342:	003b      	movs	r3, r7
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000348:	003b      	movs	r3, r7
 800034a:	2200      	movs	r2, #0
 800034c:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800034e:	003b      	movs	r3, r7
 8000350:	2200      	movs	r2, #0
 8000352:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000354:	003b      	movs	r3, r7
 8000356:	0018      	movs	r0, r3
 8000358:	f002 fa4c 	bl	80027f4 <HAL_RCCEx_PeriphCLKConfig>
 800035c:	1e03      	subs	r3, r0, #0
 800035e:	d001      	beq.n	8000364 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000360:	f000 f9fe 	bl	8000760 <Error_Handler>
  }
}
 8000364:	46c0      	nop			; (mov r8, r8)
 8000366:	46bd      	mov	sp, r7
 8000368:	b019      	add	sp, #100	; 0x64
 800036a:	bd90      	pop	{r4, r7, pc}
 800036c:	00040022 	.word	0x00040022

08000370 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	0018      	movs	r0, r3
 800037a:	230c      	movs	r3, #12
 800037c:	001a      	movs	r2, r3
 800037e:	2100      	movs	r1, #0
 8000380:	f003 fdbe 	bl	8003f00 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000384:	4b32      	ldr	r3, [pc, #200]	; (8000450 <MX_ADC_Init+0xe0>)
 8000386:	4a33      	ldr	r2, [pc, #204]	; (8000454 <MX_ADC_Init+0xe4>)
 8000388:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800038a:	4b31      	ldr	r3, [pc, #196]	; (8000450 <MX_ADC_Init+0xe0>)
 800038c:	2200      	movs	r2, #0
 800038e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000390:	4b2f      	ldr	r3, [pc, #188]	; (8000450 <MX_ADC_Init+0xe0>)
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000396:	4b2e      	ldr	r3, [pc, #184]	; (8000450 <MX_ADC_Init+0xe0>)
 8000398:	2200      	movs	r2, #0
 800039a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800039c:	4b2c      	ldr	r3, [pc, #176]	; (8000450 <MX_ADC_Init+0xe0>)
 800039e:	2201      	movs	r2, #1
 80003a0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003a2:	4b2b      	ldr	r3, [pc, #172]	; (8000450 <MX_ADC_Init+0xe0>)
 80003a4:	2204      	movs	r2, #4
 80003a6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003a8:	4b29      	ldr	r3, [pc, #164]	; (8000450 <MX_ADC_Init+0xe0>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003ae:	4b28      	ldr	r3, [pc, #160]	; (8000450 <MX_ADC_Init+0xe0>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80003b4:	4b26      	ldr	r3, [pc, #152]	; (8000450 <MX_ADC_Init+0xe0>)
 80003b6:	2201      	movs	r2, #1
 80003b8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003ba:	4b25      	ldr	r3, [pc, #148]	; (8000450 <MX_ADC_Init+0xe0>)
 80003bc:	2200      	movs	r2, #0
 80003be:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003c0:	4b23      	ldr	r3, [pc, #140]	; (8000450 <MX_ADC_Init+0xe0>)
 80003c2:	22c2      	movs	r2, #194	; 0xc2
 80003c4:	32ff      	adds	r2, #255	; 0xff
 80003c6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003c8:	4b21      	ldr	r3, [pc, #132]	; (8000450 <MX_ADC_Init+0xe0>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80003ce:	4b20      	ldr	r3, [pc, #128]	; (8000450 <MX_ADC_Init+0xe0>)
 80003d0:	2224      	movs	r2, #36	; 0x24
 80003d2:	2101      	movs	r1, #1
 80003d4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003d6:	4b1e      	ldr	r3, [pc, #120]	; (8000450 <MX_ADC_Init+0xe0>)
 80003d8:	2201      	movs	r2, #1
 80003da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003dc:	4b1c      	ldr	r3, [pc, #112]	; (8000450 <MX_ADC_Init+0xe0>)
 80003de:	0018      	movs	r0, r3
 80003e0:	f000 fcae 	bl	8000d40 <HAL_ADC_Init>
 80003e4:	1e03      	subs	r3, r0, #0
 80003e6:	d001      	beq.n	80003ec <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003e8:	f000 f9ba 	bl	8000760 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	2280      	movs	r2, #128	; 0x80
 80003f6:	0152      	lsls	r2, r2, #5
 80003f8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2207      	movs	r2, #7
 80003fe:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000400:	1d3a      	adds	r2, r7, #4
 8000402:	4b13      	ldr	r3, [pc, #76]	; (8000450 <MX_ADC_Init+0xe0>)
 8000404:	0011      	movs	r1, r2
 8000406:	0018      	movs	r0, r3
 8000408:	f000 fea2 	bl	8001150 <HAL_ADC_ConfigChannel>
 800040c:	1e03      	subs	r3, r0, #0
 800040e:	d001      	beq.n	8000414 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000410:	f000 f9a6 	bl	8000760 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2201      	movs	r2, #1
 8000418:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800041a:	1d3a      	adds	r2, r7, #4
 800041c:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <MX_ADC_Init+0xe0>)
 800041e:	0011      	movs	r1, r2
 8000420:	0018      	movs	r0, r3
 8000422:	f000 fe95 	bl	8001150 <HAL_ADC_ConfigChannel>
 8000426:	1e03      	subs	r3, r0, #0
 8000428:	d001      	beq.n	800042e <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800042a:	f000 f999 	bl	8000760 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2204      	movs	r2, #4
 8000432:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000434:	1d3a      	adds	r2, r7, #4
 8000436:	4b06      	ldr	r3, [pc, #24]	; (8000450 <MX_ADC_Init+0xe0>)
 8000438:	0011      	movs	r1, r2
 800043a:	0018      	movs	r0, r3
 800043c:	f000 fe88 	bl	8001150 <HAL_ADC_ConfigChannel>
 8000440:	1e03      	subs	r3, r0, #0
 8000442:	d001      	beq.n	8000448 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000444:	f000 f98c 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b004      	add	sp, #16
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000330 	.word	0x20000330
 8000454:	40012400 	.word	0x40012400

08000458 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800045c:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <MX_I2C1_Init+0x74>)
 800045e:	4a1c      	ldr	r2, [pc, #112]	; (80004d0 <MX_I2C1_Init+0x78>)
 8000460:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000462:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <MX_I2C1_Init+0x74>)
 8000464:	4a1b      	ldr	r2, [pc, #108]	; (80004d4 <MX_I2C1_Init+0x7c>)
 8000466:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <MX_I2C1_Init+0x74>)
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800046e:	4b17      	ldr	r3, [pc, #92]	; (80004cc <MX_I2C1_Init+0x74>)
 8000470:	2201      	movs	r2, #1
 8000472:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000474:	4b15      	ldr	r3, [pc, #84]	; (80004cc <MX_I2C1_Init+0x74>)
 8000476:	2200      	movs	r2, #0
 8000478:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800047a:	4b14      	ldr	r3, [pc, #80]	; (80004cc <MX_I2C1_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <MX_I2C1_Init+0x74>)
 8000482:	2200      	movs	r2, #0
 8000484:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000486:	4b11      	ldr	r3, [pc, #68]	; (80004cc <MX_I2C1_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_I2C1_Init+0x74>)
 800048e:	2200      	movs	r2, #0
 8000490:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_I2C1_Init+0x74>)
 8000494:	0018      	movs	r0, r3
 8000496:	f001 fb7f 	bl	8001b98 <HAL_I2C_Init>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800049e:	f000 f95f 	bl	8000760 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <MX_I2C1_Init+0x74>)
 80004a4:	2100      	movs	r1, #0
 80004a6:	0018      	movs	r0, r3
 80004a8:	f001 fc0c 	bl	8001cc4 <HAL_I2CEx_ConfigAnalogFilter>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d001      	beq.n	80004b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004b0:	f000 f956 	bl	8000760 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004b4:	4b05      	ldr	r3, [pc, #20]	; (80004cc <MX_I2C1_Init+0x74>)
 80004b6:	2100      	movs	r1, #0
 80004b8:	0018      	movs	r0, r3
 80004ba:	f001 fc4f 	bl	8001d5c <HAL_I2CEx_ConfigDigitalFilter>
 80004be:	1e03      	subs	r3, r0, #0
 80004c0:	d001      	beq.n	80004c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004c2:	f000 f94d 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	20000148 	.word	0x20000148
 80004d0:	40005400 	.word	0x40005400
 80004d4:	2000090e 	.word	0x2000090e

080004d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004de:	2308      	movs	r3, #8
 80004e0:	18fb      	adds	r3, r7, r3
 80004e2:	0018      	movs	r0, r3
 80004e4:	2310      	movs	r3, #16
 80004e6:	001a      	movs	r2, r3
 80004e8:	2100      	movs	r1, #0
 80004ea:	f003 fd09 	bl	8003f00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ee:	003b      	movs	r3, r7
 80004f0:	0018      	movs	r0, r3
 80004f2:	2308      	movs	r3, #8
 80004f4:	001a      	movs	r2, r3
 80004f6:	2100      	movs	r1, #0
 80004f8:	f003 fd02 	bl	8003f00 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004fc:	4b1e      	ldr	r3, [pc, #120]	; (8000578 <MX_TIM2_Init+0xa0>)
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	05d2      	lsls	r2, r2, #23
 8000502:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400;
 8000504:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <MX_TIM2_Init+0xa0>)
 8000506:	4a1d      	ldr	r2, [pc, #116]	; (800057c <MX_TIM2_Init+0xa4>)
 8000508:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800050a:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <MX_TIM2_Init+0xa0>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000510:	4b19      	ldr	r3, [pc, #100]	; (8000578 <MX_TIM2_Init+0xa0>)
 8000512:	2264      	movs	r2, #100	; 0x64
 8000514:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000516:	4b18      	ldr	r3, [pc, #96]	; (8000578 <MX_TIM2_Init+0xa0>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051c:	4b16      	ldr	r3, [pc, #88]	; (8000578 <MX_TIM2_Init+0xa0>)
 800051e:	2200      	movs	r2, #0
 8000520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <MX_TIM2_Init+0xa0>)
 8000524:	0018      	movs	r0, r3
 8000526:	f002 fa65 	bl	80029f4 <HAL_TIM_Base_Init>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d001      	beq.n	8000532 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800052e:	f000 f917 	bl	8000760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000532:	2108      	movs	r1, #8
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2280      	movs	r2, #128	; 0x80
 8000538:	0152      	lsls	r2, r2, #5
 800053a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800053c:	187a      	adds	r2, r7, r1
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <MX_TIM2_Init+0xa0>)
 8000540:	0011      	movs	r1, r2
 8000542:	0018      	movs	r0, r3
 8000544:	f002 faa6 	bl	8002a94 <HAL_TIM_ConfigClockSource>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800054c:	f000 f908 	bl	8000760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000550:	003b      	movs	r3, r7
 8000552:	2220      	movs	r2, #32
 8000554:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000556:	003b      	movs	r3, r7
 8000558:	2200      	movs	r2, #0
 800055a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800055c:	003a      	movs	r2, r7
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <MX_TIM2_Init+0xa0>)
 8000560:	0011      	movs	r1, r2
 8000562:	0018      	movs	r0, r3
 8000564:	f002 fc84 	bl	8002e70 <HAL_TIMEx_MasterConfigSynchronization>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800056c:	f000 f8f8 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000570:	46c0      	nop			; (mov r8, r8)
 8000572:	46bd      	mov	sp, r7
 8000574:	b006      	add	sp, #24
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000214 	.word	0x20000214
 800057c:	000020d0 	.word	0x000020d0

08000580 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 8000586:	4a15      	ldr	r2, [pc, #84]	; (80005dc <MX_USART2_UART_Init+0x5c>)
 8000588:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800058a:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 800058c:	22e1      	movs	r2, #225	; 0xe1
 800058e:	0252      	lsls	r2, r2, #9
 8000590:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 80005a6:	220c      	movs	r2, #12
 80005a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 80005c4:	0018      	movs	r0, r3
 80005c6:	f002 fcb1 	bl	8002f2c <HAL_UART_Init>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d001      	beq.n	80005d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005ce:	f000 f8c7 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2000025c 	.word	0x2000025c
 80005dc:	40004400 	.word	0x40004400

080005e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <MX_USART3_UART_Init+0x58>)
 80005e6:	4a15      	ldr	r2, [pc, #84]	; (800063c <MX_USART3_UART_Init+0x5c>)
 80005e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <MX_USART3_UART_Init+0x58>)
 80005ec:	2296      	movs	r2, #150	; 0x96
 80005ee:	01d2      	lsls	r2, r2, #7
 80005f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MX_USART3_UART_Init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_USART3_UART_Init+0x58>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <MX_USART3_UART_Init+0x58>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_USART3_UART_Init+0x58>)
 8000606:	220c      	movs	r2, #12
 8000608:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <MX_USART3_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_USART3_UART_Init+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <MX_USART3_UART_Init+0x58>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_USART3_UART_Init+0x58>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000622:	4b05      	ldr	r3, [pc, #20]	; (8000638 <MX_USART3_UART_Init+0x58>)
 8000624:	0018      	movs	r0, r3
 8000626:	f002 fc81 	bl	8002f2c <HAL_UART_Init>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d001      	beq.n	8000632 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800062e:	f000 f897 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000bc 	.word	0x200000bc
 800063c:	40004800 	.word	0x40004800

08000640 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_DMA_Init+0x48>)
 8000648:	695a      	ldr	r2, [r3, #20]
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_DMA_Init+0x48>)
 800064c:	2101      	movs	r1, #1
 800064e:	430a      	orrs	r2, r1
 8000650:	615a      	str	r2, [r3, #20]
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MX_DMA_Init+0x48>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	2201      	movs	r2, #1
 8000658:	4013      	ands	r3, r2
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	2009      	movs	r0, #9
 8000664:	f000 ff2e 	bl	80014c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8000668:	2009      	movs	r0, #9
 800066a:	f000 ff40 	bl	80014ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	200a      	movs	r0, #10
 8000674:	f000 ff26 	bl	80014c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8000678:	200a      	movs	r0, #10
 800067a:	f000 ff38 	bl	80014ee <HAL_NVIC_EnableIRQ>

}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	b002      	add	sp, #8
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	40021000 	.word	0x40021000

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b089      	sub	sp, #36	; 0x24
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	240c      	movs	r4, #12
 8000694:	193b      	adds	r3, r7, r4
 8000696:	0018      	movs	r0, r3
 8000698:	2314      	movs	r3, #20
 800069a:	001a      	movs	r2, r3
 800069c:	2100      	movs	r1, #0
 800069e:	f003 fc2f 	bl	8003f00 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	4b2d      	ldr	r3, [pc, #180]	; (8000758 <MX_GPIO_Init+0xcc>)
 80006a4:	695a      	ldr	r2, [r3, #20]
 80006a6:	4b2c      	ldr	r3, [pc, #176]	; (8000758 <MX_GPIO_Init+0xcc>)
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	0309      	lsls	r1, r1, #12
 80006ac:	430a      	orrs	r2, r1
 80006ae:	615a      	str	r2, [r3, #20]
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <MX_GPIO_Init+0xcc>)
 80006b2:	695a      	ldr	r2, [r3, #20]
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	031b      	lsls	r3, r3, #12
 80006b8:	4013      	ands	r3, r2
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006be:	4b26      	ldr	r3, [pc, #152]	; (8000758 <MX_GPIO_Init+0xcc>)
 80006c0:	695a      	ldr	r2, [r3, #20]
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <MX_GPIO_Init+0xcc>)
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	03c9      	lsls	r1, r1, #15
 80006c8:	430a      	orrs	r2, r1
 80006ca:	615a      	str	r2, [r3, #20]
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <MX_GPIO_Init+0xcc>)
 80006ce:	695a      	ldr	r2, [r3, #20]
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	03db      	lsls	r3, r3, #15
 80006d4:	4013      	ands	r3, r2
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_GPIO_Init+0xcc>)
 80006dc:	695a      	ldr	r2, [r3, #20]
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_GPIO_Init+0xcc>)
 80006e0:	2180      	movs	r1, #128	; 0x80
 80006e2:	0289      	lsls	r1, r1, #10
 80006e4:	430a      	orrs	r2, r1
 80006e6:	615a      	str	r2, [r3, #20]
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_GPIO_Init+0xcc>)
 80006ea:	695a      	ldr	r2, [r3, #20]
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	029b      	lsls	r3, r3, #10
 80006f0:	4013      	ands	r3, r2
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006f6:	2390      	movs	r3, #144	; 0x90
 80006f8:	05db      	lsls	r3, r3, #23
 80006fa:	2200      	movs	r2, #0
 80006fc:	2120      	movs	r1, #32
 80006fe:	0018      	movs	r0, r3
 8000700:	f001 fa2c 	bl	8001b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	0192      	lsls	r2, r2, #6
 800070a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800070c:	193b      	adds	r3, r7, r4
 800070e:	2284      	movs	r2, #132	; 0x84
 8000710:	0392      	lsls	r2, r2, #14
 8000712:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	193b      	adds	r3, r7, r4
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800071a:	193b      	adds	r3, r7, r4
 800071c:	4a0f      	ldr	r2, [pc, #60]	; (800075c <MX_GPIO_Init+0xd0>)
 800071e:	0019      	movs	r1, r3
 8000720:	0010      	movs	r0, r2
 8000722:	f001 f8a3 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000726:	0021      	movs	r1, r4
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2220      	movs	r2, #32
 800072c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2201      	movs	r2, #1
 8000732:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000740:	187a      	adds	r2, r7, r1
 8000742:	2390      	movs	r3, #144	; 0x90
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	0011      	movs	r1, r2
 8000748:	0018      	movs	r0, r3
 800074a:	f001 f88f 	bl	800186c <HAL_GPIO_Init>

}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	b009      	add	sp, #36	; 0x24
 8000754:	bd90      	pop	{r4, r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	40021000 	.word	0x40021000
 800075c:	48000800 	.word	0x48000800

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <HAL_MspInit+0x44>)
 8000774:	699a      	ldr	r2, [r3, #24]
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <HAL_MspInit+0x44>)
 8000778:	2101      	movs	r1, #1
 800077a:	430a      	orrs	r2, r1
 800077c:	619a      	str	r2, [r3, #24]
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <HAL_MspInit+0x44>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	2201      	movs	r2, #1
 8000784:	4013      	ands	r3, r2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_MspInit+0x44>)
 800078c:	69da      	ldr	r2, [r3, #28]
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_MspInit+0x44>)
 8000790:	2180      	movs	r1, #128	; 0x80
 8000792:	0549      	lsls	r1, r1, #21
 8000794:	430a      	orrs	r2, r1
 8000796:	61da      	str	r2, [r3, #28]
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_MspInit+0x44>)
 800079a:	69da      	ldr	r2, [r3, #28]
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	055b      	lsls	r3, r3, #21
 80007a0:	4013      	ands	r3, r2
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	b002      	add	sp, #8
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	40021000 	.word	0x40021000

080007b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b08b      	sub	sp, #44	; 0x2c
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	2414      	movs	r4, #20
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	0018      	movs	r0, r3
 80007c2:	2314      	movs	r3, #20
 80007c4:	001a      	movs	r2, r3
 80007c6:	2100      	movs	r1, #0
 80007c8:	f003 fb9a 	bl	8003f00 <memset>
  if(hadc->Instance==ADC1)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a39      	ldr	r2, [pc, #228]	; (80008b8 <HAL_ADC_MspInit+0x104>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d16b      	bne.n	80008ae <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007d6:	4b39      	ldr	r3, [pc, #228]	; (80008bc <HAL_ADC_MspInit+0x108>)
 80007d8:	699a      	ldr	r2, [r3, #24]
 80007da:	4b38      	ldr	r3, [pc, #224]	; (80008bc <HAL_ADC_MspInit+0x108>)
 80007dc:	2180      	movs	r1, #128	; 0x80
 80007de:	0089      	lsls	r1, r1, #2
 80007e0:	430a      	orrs	r2, r1
 80007e2:	619a      	str	r2, [r3, #24]
 80007e4:	4b35      	ldr	r3, [pc, #212]	; (80008bc <HAL_ADC_MspInit+0x108>)
 80007e6:	699a      	ldr	r2, [r3, #24]
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	4013      	ands	r3, r2
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b32      	ldr	r3, [pc, #200]	; (80008bc <HAL_ADC_MspInit+0x108>)
 80007f4:	695a      	ldr	r2, [r3, #20]
 80007f6:	4b31      	ldr	r3, [pc, #196]	; (80008bc <HAL_ADC_MspInit+0x108>)
 80007f8:	2180      	movs	r1, #128	; 0x80
 80007fa:	0289      	lsls	r1, r1, #10
 80007fc:	430a      	orrs	r2, r1
 80007fe:	615a      	str	r2, [r3, #20]
 8000800:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <HAL_ADC_MspInit+0x108>)
 8000802:	695a      	ldr	r2, [r3, #20]
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	029b      	lsls	r3, r3, #10
 8000808:	4013      	ands	r3, r2
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	2213      	movs	r2, #19
 8000812:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	2203      	movs	r2, #3
 8000818:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	193b      	adds	r3, r7, r4
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	193a      	adds	r2, r7, r4
 8000822:	2390      	movs	r3, #144	; 0x90
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	0011      	movs	r1, r2
 8000828:	0018      	movs	r0, r3
 800082a:	f001 f81f 	bl	800186c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800082e:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <HAL_ADC_MspInit+0x10c>)
 8000830:	4a24      	ldr	r2, [pc, #144]	; (80008c4 <HAL_ADC_MspInit+0x110>)
 8000832:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000834:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <HAL_ADC_MspInit+0x10c>)
 8000836:	2200      	movs	r2, #0
 8000838:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800083a:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <HAL_ADC_MspInit+0x10c>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <HAL_ADC_MspInit+0x10c>)
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000846:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <HAL_ADC_MspInit+0x10c>)
 8000848:	2280      	movs	r2, #128	; 0x80
 800084a:	0092      	lsls	r2, r2, #2
 800084c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <HAL_ADC_MspInit+0x10c>)
 8000850:	2280      	movs	r2, #128	; 0x80
 8000852:	0112      	lsls	r2, r2, #4
 8000854:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <HAL_ADC_MspInit+0x10c>)
 8000858:	2220      	movs	r2, #32
 800085a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <HAL_ADC_MspInit+0x10c>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <HAL_ADC_MspInit+0x10c>)
 8000864:	0018      	movs	r0, r3
 8000866:	f000 fe5f 	bl	8001528 <HAL_DMA_Init>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800086e:	f7ff ff77 	bl	8000760 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 8000872:	4a15      	ldr	r2, [pc, #84]	; (80008c8 <HAL_ADC_MspInit+0x114>)
 8000874:	23a8      	movs	r3, #168	; 0xa8
 8000876:	58d3      	ldr	r3, [r2, r3]
 8000878:	4913      	ldr	r1, [pc, #76]	; (80008c8 <HAL_ADC_MspInit+0x114>)
 800087a:	220f      	movs	r2, #15
 800087c:	4393      	bics	r3, r2
 800087e:	22a8      	movs	r2, #168	; 0xa8
 8000880:	508b      	str	r3, [r1, r2]
 8000882:	4a11      	ldr	r2, [pc, #68]	; (80008c8 <HAL_ADC_MspInit+0x114>)
 8000884:	23a8      	movs	r3, #168	; 0xa8
 8000886:	58d3      	ldr	r3, [r2, r3]
 8000888:	490f      	ldr	r1, [pc, #60]	; (80008c8 <HAL_ADC_MspInit+0x114>)
 800088a:	2201      	movs	r2, #1
 800088c:	4313      	orrs	r3, r2
 800088e:	22a8      	movs	r2, #168	; 0xa8
 8000890:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <HAL_ADC_MspInit+0x10c>)
 8000896:	631a      	str	r2, [r3, #48]	; 0x30
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_ADC_MspInit+0x10c>)
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	200c      	movs	r0, #12
 80008a4:	f000 fe0e 	bl	80014c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80008a8:	200c      	movs	r0, #12
 80008aa:	f000 fe20 	bl	80014ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b00b      	add	sp, #44	; 0x2c
 80008b4:	bd90      	pop	{r4, r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	40012400 	.word	0x40012400
 80008bc:	40021000 	.word	0x40021000
 80008c0:	200002e0 	.word	0x200002e0
 80008c4:	40020008 	.word	0x40020008
 80008c8:	40020000 	.word	0x40020000

080008cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b08b      	sub	sp, #44	; 0x2c
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	2414      	movs	r4, #20
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	0018      	movs	r0, r3
 80008da:	2314      	movs	r3, #20
 80008dc:	001a      	movs	r2, r3
 80008de:	2100      	movs	r1, #0
 80008e0:	f003 fb0e 	bl	8003f00 <memset>
  if(hi2c->Instance==I2C1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a1d      	ldr	r2, [pc, #116]	; (8000960 <HAL_I2C_MspInit+0x94>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d133      	bne.n	8000956 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <HAL_I2C_MspInit+0x98>)
 80008f0:	695a      	ldr	r2, [r3, #20]
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <HAL_I2C_MspInit+0x98>)
 80008f4:	2180      	movs	r1, #128	; 0x80
 80008f6:	0289      	lsls	r1, r1, #10
 80008f8:	430a      	orrs	r2, r1
 80008fa:	615a      	str	r2, [r3, #20]
 80008fc:	4b19      	ldr	r3, [pc, #100]	; (8000964 <HAL_I2C_MspInit+0x98>)
 80008fe:	695a      	ldr	r2, [r3, #20]
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	029b      	lsls	r3, r3, #10
 8000904:	4013      	ands	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800090a:	193b      	adds	r3, r7, r4
 800090c:	22c0      	movs	r2, #192	; 0xc0
 800090e:	00d2      	lsls	r2, r2, #3
 8000910:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000912:	0021      	movs	r1, r4
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2212      	movs	r2, #18
 8000918:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2203      	movs	r2, #3
 8000924:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2204      	movs	r2, #4
 800092a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	187a      	adds	r2, r7, r1
 800092e:	2390      	movs	r3, #144	; 0x90
 8000930:	05db      	lsls	r3, r3, #23
 8000932:	0011      	movs	r1, r2
 8000934:	0018      	movs	r0, r3
 8000936:	f000 ff99 	bl	800186c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <HAL_I2C_MspInit+0x98>)
 800093c:	69da      	ldr	r2, [r3, #28]
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <HAL_I2C_MspInit+0x98>)
 8000940:	2180      	movs	r1, #128	; 0x80
 8000942:	0389      	lsls	r1, r1, #14
 8000944:	430a      	orrs	r2, r1
 8000946:	61da      	str	r2, [r3, #28]
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_I2C_MspInit+0x98>)
 800094a:	69da      	ldr	r2, [r3, #28]
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	039b      	lsls	r3, r3, #14
 8000950:	4013      	ands	r3, r2
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b00b      	add	sp, #44	; 0x2c
 800095c:	bd90      	pop	{r4, r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	40005400 	.word	0x40005400
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	05db      	lsls	r3, r3, #23
 8000978:	429a      	cmp	r2, r3
 800097a:	d10b      	bne.n	8000994 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <HAL_TIM_Base_MspInit+0x34>)
 800097e:	69da      	ldr	r2, [r3, #28]
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_TIM_Base_MspInit+0x34>)
 8000982:	2101      	movs	r1, #1
 8000984:	430a      	orrs	r2, r1
 8000986:	61da      	str	r2, [r3, #28]
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <HAL_TIM_Base_MspInit+0x34>)
 800098a:	69db      	ldr	r3, [r3, #28]
 800098c:	2201      	movs	r2, #1
 800098e:	4013      	ands	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b004      	add	sp, #16
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40021000 	.word	0x40021000

080009a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b08d      	sub	sp, #52	; 0x34
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	241c      	movs	r4, #28
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	0018      	movs	r0, r3
 80009ae:	2314      	movs	r3, #20
 80009b0:	001a      	movs	r2, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	f003 faa4 	bl	8003f00 <memset>
  if(huart->Instance==USART2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a58      	ldr	r2, [pc, #352]	; (8000b20 <HAL_UART_MspInit+0x180>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d133      	bne.n	8000a2a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c2:	4b58      	ldr	r3, [pc, #352]	; (8000b24 <HAL_UART_MspInit+0x184>)
 80009c4:	69da      	ldr	r2, [r3, #28]
 80009c6:	4b57      	ldr	r3, [pc, #348]	; (8000b24 <HAL_UART_MspInit+0x184>)
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	0289      	lsls	r1, r1, #10
 80009cc:	430a      	orrs	r2, r1
 80009ce:	61da      	str	r2, [r3, #28]
 80009d0:	4b54      	ldr	r3, [pc, #336]	; (8000b24 <HAL_UART_MspInit+0x184>)
 80009d2:	69da      	ldr	r2, [r3, #28]
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	029b      	lsls	r3, r3, #10
 80009d8:	4013      	ands	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
 80009dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b51      	ldr	r3, [pc, #324]	; (8000b24 <HAL_UART_MspInit+0x184>)
 80009e0:	695a      	ldr	r2, [r3, #20]
 80009e2:	4b50      	ldr	r3, [pc, #320]	; (8000b24 <HAL_UART_MspInit+0x184>)
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	0289      	lsls	r1, r1, #10
 80009e8:	430a      	orrs	r2, r1
 80009ea:	615a      	str	r2, [r3, #20]
 80009ec:	4b4d      	ldr	r3, [pc, #308]	; (8000b24 <HAL_UART_MspInit+0x184>)
 80009ee:	695a      	ldr	r2, [r3, #20]
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	029b      	lsls	r3, r3, #10
 80009f4:	4013      	ands	r3, r2
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009fa:	0021      	movs	r1, r4
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	220c      	movs	r2, #12
 8000a00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2202      	movs	r2, #2
 8000a06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2201      	movs	r2, #1
 8000a18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	187a      	adds	r2, r7, r1
 8000a1c:	2390      	movs	r3, #144	; 0x90
 8000a1e:	05db      	lsls	r3, r3, #23
 8000a20:	0011      	movs	r1, r2
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 ff22 	bl	800186c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a28:	e075      	b.n	8000b16 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART3)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a3e      	ldr	r2, [pc, #248]	; (8000b28 <HAL_UART_MspInit+0x188>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d170      	bne.n	8000b16 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a34:	4b3b      	ldr	r3, [pc, #236]	; (8000b24 <HAL_UART_MspInit+0x184>)
 8000a36:	69da      	ldr	r2, [r3, #28]
 8000a38:	4b3a      	ldr	r3, [pc, #232]	; (8000b24 <HAL_UART_MspInit+0x184>)
 8000a3a:	2180      	movs	r1, #128	; 0x80
 8000a3c:	02c9      	lsls	r1, r1, #11
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	61da      	str	r2, [r3, #28]
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <HAL_UART_MspInit+0x184>)
 8000a44:	69da      	ldr	r2, [r3, #28]
 8000a46:	2380      	movs	r3, #128	; 0x80
 8000a48:	02db      	lsls	r3, r3, #11
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a50:	4b34      	ldr	r3, [pc, #208]	; (8000b24 <HAL_UART_MspInit+0x184>)
 8000a52:	695a      	ldr	r2, [r3, #20]
 8000a54:	4b33      	ldr	r3, [pc, #204]	; (8000b24 <HAL_UART_MspInit+0x184>)
 8000a56:	2180      	movs	r1, #128	; 0x80
 8000a58:	0309      	lsls	r1, r1, #12
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	615a      	str	r2, [r3, #20]
 8000a5e:	4b31      	ldr	r3, [pc, #196]	; (8000b24 <HAL_UART_MspInit+0x184>)
 8000a60:	695a      	ldr	r2, [r3, #20]
 8000a62:	2380      	movs	r3, #128	; 0x80
 8000a64:	031b      	lsls	r3, r3, #12
 8000a66:	4013      	ands	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a6c:	211c      	movs	r1, #28
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2230      	movs	r2, #48	; 0x30
 8000a72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2202      	movs	r2, #2
 8000a78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2203      	movs	r2, #3
 8000a84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2201      	movs	r2, #1
 8000a8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	4a27      	ldr	r2, [pc, #156]	; (8000b2c <HAL_UART_MspInit+0x18c>)
 8000a90:	0019      	movs	r1, r3
 8000a92:	0010      	movs	r0, r2
 8000a94:	f000 feea 	bl	800186c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000a98:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <HAL_UART_MspInit+0x190>)
 8000a9a:	4a26      	ldr	r2, [pc, #152]	; (8000b34 <HAL_UART_MspInit+0x194>)
 8000a9c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a9e:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <HAL_UART_MspInit+0x190>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa4:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <HAL_UART_MspInit+0x190>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <HAL_UART_MspInit+0x190>)
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <HAL_UART_MspInit+0x190>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <HAL_UART_MspInit+0x190>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_UART_MspInit+0x190>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <HAL_UART_MspInit+0x190>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_UART_MspInit+0x190>)
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 fd2c 	bl	8001528 <HAL_DMA_Init>
 8000ad0:	1e03      	subs	r3, r0, #0
 8000ad2:	d001      	beq.n	8000ad8 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8000ad4:	f7ff fe44 	bl	8000760 <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 8000ad8:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <HAL_UART_MspInit+0x198>)
 8000ada:	23a8      	movs	r3, #168	; 0xa8
 8000adc:	58d3      	ldr	r3, [r2, r3]
 8000ade:	4916      	ldr	r1, [pc, #88]	; (8000b38 <HAL_UART_MspInit+0x198>)
 8000ae0:	4a16      	ldr	r2, [pc, #88]	; (8000b3c <HAL_UART_MspInit+0x19c>)
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	22a8      	movs	r2, #168	; 0xa8
 8000ae6:	508b      	str	r3, [r1, r2]
 8000ae8:	4a13      	ldr	r2, [pc, #76]	; (8000b38 <HAL_UART_MspInit+0x198>)
 8000aea:	23a8      	movs	r3, #168	; 0xa8
 8000aec:	58d3      	ldr	r3, [r2, r3]
 8000aee:	4912      	ldr	r1, [pc, #72]	; (8000b38 <HAL_UART_MspInit+0x198>)
 8000af0:	22a0      	movs	r2, #160	; 0xa0
 8000af2:	0112      	lsls	r2, r2, #4
 8000af4:	4313      	orrs	r3, r2
 8000af6:	22a8      	movs	r2, #168	; 0xa8
 8000af8:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <HAL_UART_MspInit+0x190>)
 8000afe:	671a      	str	r2, [r3, #112]	; 0x70
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_UART_MspInit+0x190>)
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_8_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	201d      	movs	r0, #29
 8000b0c:	f000 fcda 	bl	80014c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 8000b10:	201d      	movs	r0, #29
 8000b12:	f000 fcec 	bl	80014ee <HAL_NVIC_EnableIRQ>
}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b00d      	add	sp, #52	; 0x34
 8000b1c:	bd90      	pop	{r4, r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	40004400 	.word	0x40004400
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40004800 	.word	0x40004800
 8000b2c:	48000800 	.word	0x48000800
 8000b30:	20000078 	.word	0x20000078
 8000b34:	40020030 	.word	0x40020030
 8000b38:	40020000 	.word	0x40020000
 8000b3c:	fffff0ff 	.word	0xfffff0ff

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b64:	f000 f8ac 	bl	8000cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <DMA1_Ch1_IRQHandler+0x14>)
 8000b76:	0018      	movs	r0, r3
 8000b78:	f000 fd9b 	bl	80016b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	200002e0 	.word	0x200002e0

08000b88 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f000 fd8f 	bl	80016b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	20000078 	.word	0x20000078

08000ba0 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <ADC1_COMP_IRQHandler+0x14>)
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 fa0a 	bl	8000fc0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	20000330 	.word	0x20000330

08000bb8 <USART3_8_IRQHandler>:

/**
  * @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_8_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_8_IRQn 0 */

  /* USER CODE END USART3_8_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <USART3_8_IRQHandler+0x14>)
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f002 fa08 	bl	8002fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_8_IRQn 1 */

  /* USER CODE END USART3_8_IRQn 1 */
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	200000bc 	.word	0x200000bc

08000bd0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bde:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be2:	490e      	ldr	r1, [pc, #56]	; (8000c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be4:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <LoopForever+0xe>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf8:	4c0b      	ldr	r4, [pc, #44]	; (8000c28 <LoopForever+0x16>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c06:	f7ff ffe3 	bl	8000bd0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000c0a:	f003 f955 	bl	8003eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c0e:	f7ff fb0d 	bl	800022c <main>

08000c12 <LoopForever>:

LoopForever:
    b LoopForever
 8000c12:	e7fe      	b.n	8000c12 <LoopForever>
  ldr   r0, =_estack
 8000c14:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c20:	08003f68 	.word	0x08003f68
  ldr r2, =_sbss
 8000c24:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c28:	2000038c 	.word	0x2000038c

08000c2c <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <CEC_CAN_IRQHandler>
	...

08000c30 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <HAL_Init+0x24>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_Init+0x24>)
 8000c3a:	2110      	movs	r1, #16
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c40:	2000      	movs	r0, #0
 8000c42:	f000 f809 	bl	8000c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c46:	f7ff fd91 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	40022000 	.word	0x40022000

08000c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <HAL_InitTick+0x5c>)
 8000c62:	681c      	ldr	r4, [r3, #0]
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_InitTick+0x60>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	0019      	movs	r1, r3
 8000c6a:	23fa      	movs	r3, #250	; 0xfa
 8000c6c:	0098      	lsls	r0, r3, #2
 8000c6e:	f7ff fa49 	bl	8000104 <__udivsi3>
 8000c72:	0003      	movs	r3, r0
 8000c74:	0019      	movs	r1, r3
 8000c76:	0020      	movs	r0, r4
 8000c78:	f7ff fa44 	bl	8000104 <__udivsi3>
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 fc45 	bl	800150e <HAL_SYSTICK_Config>
 8000c84:	1e03      	subs	r3, r0, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e00f      	b.n	8000cac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	d80b      	bhi.n	8000caa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	2301      	movs	r3, #1
 8000c96:	425b      	negs	r3, r3
 8000c98:	2200      	movs	r2, #0
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 fc12 	bl	80014c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_InitTick+0x64>)
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e000      	b.n	8000cac <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	0018      	movs	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b003      	add	sp, #12
 8000cb2:	bd90      	pop	{r4, r7, pc}
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000004 	.word	0x20000004

08000cc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_IncTick+0x1c>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	001a      	movs	r2, r3
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <HAL_IncTick+0x20>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	18d2      	adds	r2, r2, r3
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cd2:	601a      	str	r2, [r3, #0]
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000388 	.word	0x20000388

08000ce4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b02      	ldr	r3, [pc, #8]	; (8000cf4 <HAL_GetTick+0x10>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	20000388 	.word	0x20000388

08000cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d00:	f7ff fff0 	bl	8000ce4 <HAL_GetTick>
 8000d04:	0003      	movs	r3, r0
 8000d06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	d005      	beq.n	8000d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_Delay+0x44>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	001a      	movs	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	189b      	adds	r3, r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	f7ff ffe0 	bl	8000ce4 <HAL_GetTick>
 8000d24:	0002      	movs	r2, r0
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d8f7      	bhi.n	8000d20 <HAL_Delay+0x28>
  {
  }
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b004      	add	sp, #16
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	20000008 	.word	0x20000008

08000d40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d48:	230f      	movs	r3, #15
 8000d4a:	18fb      	adds	r3, r7, r3
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e125      	b.n	8000faa <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d10a      	bne.n	8000d7c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2234      	movs	r2, #52	; 0x34
 8000d70:	2100      	movs	r1, #0
 8000d72:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	0018      	movs	r0, r3
 8000d78:	f7ff fd1c 	bl	80007b4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d80:	2210      	movs	r2, #16
 8000d82:	4013      	ands	r3, r2
 8000d84:	d000      	beq.n	8000d88 <HAL_ADC_Init+0x48>
 8000d86:	e103      	b.n	8000f90 <HAL_ADC_Init+0x250>
 8000d88:	230f      	movs	r3, #15
 8000d8a:	18fb      	adds	r3, r7, r3
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d000      	beq.n	8000d94 <HAL_ADC_Init+0x54>
 8000d92:	e0fd      	b.n	8000f90 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	2204      	movs	r2, #4
 8000d9c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000d9e:	d000      	beq.n	8000da2 <HAL_ADC_Init+0x62>
 8000da0:	e0f6      	b.n	8000f90 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da6:	4a83      	ldr	r2, [pc, #524]	; (8000fb4 <HAL_ADC_Init+0x274>)
 8000da8:	4013      	ands	r3, r2
 8000daa:	2202      	movs	r2, #2
 8000dac:	431a      	orrs	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	2203      	movs	r2, #3
 8000dba:	4013      	ands	r3, r2
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d112      	bne.n	8000de6 <HAL_ADC_Init+0xa6>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4013      	ands	r3, r2
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d009      	beq.n	8000de2 <HAL_ADC_Init+0xa2>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	401a      	ands	r2, r3
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d101      	bne.n	8000de6 <HAL_ADC_Init+0xa6>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <HAL_ADC_Init+0xa8>
 8000de6:	2300      	movs	r3, #0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d116      	bne.n	8000e1a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	2218      	movs	r2, #24
 8000df4:	4393      	bics	r3, r2
 8000df6:	0019      	movs	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	430a      	orrs	r2, r1
 8000e02:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	691b      	ldr	r3, [r3, #16]
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	0899      	lsrs	r1, r3, #2
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	430a      	orrs	r2, r1
 8000e18:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	68da      	ldr	r2, [r3, #12]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4964      	ldr	r1, [pc, #400]	; (8000fb8 <HAL_ADC_Init+0x278>)
 8000e26:	400a      	ands	r2, r1
 8000e28:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	7e1b      	ldrb	r3, [r3, #24]
 8000e2e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	7e5b      	ldrb	r3, [r3, #25]
 8000e34:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e36:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	7e9b      	ldrb	r3, [r3, #26]
 8000e3c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e3e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d002      	beq.n	8000e4e <HAL_ADC_Init+0x10e>
 8000e48:	2380      	movs	r3, #128	; 0x80
 8000e4a:	015b      	lsls	r3, r3, #5
 8000e4c:	e000      	b.n	8000e50 <HAL_ADC_Init+0x110>
 8000e4e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e50:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e56:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d101      	bne.n	8000e64 <HAL_ADC_Init+0x124>
 8000e60:	2304      	movs	r3, #4
 8000e62:	e000      	b.n	8000e66 <HAL_ADC_Init+0x126>
 8000e64:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000e66:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2124      	movs	r1, #36	; 0x24
 8000e6c:	5c5b      	ldrb	r3, [r3, r1]
 8000e6e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e70:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	7edb      	ldrb	r3, [r3, #27]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d115      	bne.n	8000eac <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7e9b      	ldrb	r3, [r3, #26]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d105      	bne.n	8000e94 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	2280      	movs	r2, #128	; 0x80
 8000e8c:	0252      	lsls	r2, r2, #9
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	e00b      	b.n	8000eac <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e98:	2220      	movs	r2, #32
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69da      	ldr	r2, [r3, #28]
 8000eb0:	23c2      	movs	r3, #194	; 0xc2
 8000eb2:	33ff      	adds	r3, #255	; 0xff
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d007      	beq.n	8000ec8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68d9      	ldr	r1, [r3, #12]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	055b      	lsls	r3, r3, #21
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d01b      	beq.n	8000f1c <HAL_ADC_Init+0x1dc>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d017      	beq.n	8000f1c <HAL_ADC_Init+0x1dc>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d013      	beq.n	8000f1c <HAL_ADC_Init+0x1dc>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d00f      	beq.n	8000f1c <HAL_ADC_Init+0x1dc>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	d00b      	beq.n	8000f1c <HAL_ADC_Init+0x1dc>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f08:	2b05      	cmp	r3, #5
 8000f0a:	d007      	beq.n	8000f1c <HAL_ADC_Init+0x1dc>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f10:	2b06      	cmp	r3, #6
 8000f12:	d003      	beq.n	8000f1c <HAL_ADC_Init+0x1dc>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f18:	2b07      	cmp	r3, #7
 8000f1a:	d112      	bne.n	8000f42 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	695a      	ldr	r2, [r3, #20]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2107      	movs	r1, #7
 8000f28:	438a      	bics	r2, r1
 8000f2a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6959      	ldr	r1, [r3, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f36:	2207      	movs	r2, #7
 8000f38:	401a      	ands	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	4a1c      	ldr	r2, [pc, #112]	; (8000fbc <HAL_ADC_Init+0x27c>)
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d10b      	bne.n	8000f6a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	4393      	bics	r3, r2
 8000f60:	2201      	movs	r2, #1
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f68:	e01c      	b.n	8000fa4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f6e:	2212      	movs	r2, #18
 8000f70:	4393      	bics	r3, r2
 8000f72:	2210      	movs	r2, #16
 8000f74:	431a      	orrs	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f7e:	2201      	movs	r2, #1
 8000f80:	431a      	orrs	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000f86:	230f      	movs	r3, #15
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f8e:	e009      	b.n	8000fa4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f94:	2210      	movs	r2, #16
 8000f96:	431a      	orrs	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	18fb      	adds	r3, r7, r3
 8000fa8:	781b      	ldrb	r3, [r3, #0]
}
 8000faa:	0018      	movs	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b004      	add	sp, #16
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	fffffefd 	.word	0xfffffefd
 8000fb8:	fffe0219 	.word	0xfffe0219
 8000fbc:	833fffe7 	.word	0x833fffe7

08000fc0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2204      	movs	r2, #4
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	d106      	bne.n	8000fe4 <HAL_ADC_IRQHandler+0x24>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2204      	movs	r2, #4
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d00d      	beq.n	8001000 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2208      	movs	r2, #8
 8000fec:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000fee:	2b08      	cmp	r3, #8
 8000ff0:	d14f      	bne.n	8001092 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2208      	movs	r2, #8
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d148      	bne.n	8001092 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001004:	2210      	movs	r2, #16
 8001006:	4013      	ands	r3, r2
 8001008:	d106      	bne.n	8001018 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800100e:	2280      	movs	r2, #128	; 0x80
 8001010:	0092      	lsls	r2, r2, #2
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	23c0      	movs	r3, #192	; 0xc0
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	4013      	ands	r3, r2
 8001024:	d12d      	bne.n	8001082 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800102a:	2b00      	cmp	r3, #0
 800102c:	d129      	bne.n	8001082 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2208      	movs	r2, #8
 8001036:	4013      	ands	r3, r2
 8001038:	2b08      	cmp	r3, #8
 800103a:	d122      	bne.n	8001082 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	2204      	movs	r2, #4
 8001044:	4013      	ands	r3, r2
 8001046:	d110      	bne.n	800106a <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	210c      	movs	r1, #12
 8001054:	438a      	bics	r2, r1
 8001056:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105c:	4a33      	ldr	r2, [pc, #204]	; (800112c <HAL_ADC_IRQHandler+0x16c>)
 800105e:	4013      	ands	r3, r2
 8001060:	2201      	movs	r2, #1
 8001062:	431a      	orrs	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	639a      	str	r2, [r3, #56]	; 0x38
 8001068:	e00b      	b.n	8001082 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800106e:	2220      	movs	r2, #32
 8001070:	431a      	orrs	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800107a:	2201      	movs	r2, #1
 800107c:	431a      	orrs	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff f8c9 	bl	800021c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	220c      	movs	r2, #12
 8001090:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2280      	movs	r2, #128	; 0x80
 800109a:	4013      	ands	r3, r2
 800109c:	2b80      	cmp	r3, #128	; 0x80
 800109e:	d115      	bne.n	80010cc <HAL_ADC_IRQHandler+0x10c>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	4013      	ands	r3, r2
 80010aa:	2b80      	cmp	r3, #128	; 0x80
 80010ac:	d10e      	bne.n	80010cc <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b2:	2280      	movs	r2, #128	; 0x80
 80010b4:	0252      	lsls	r2, r2, #9
 80010b6:	431a      	orrs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	0018      	movs	r0, r3
 80010c0:	f000 f836 	bl	8001130 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2280      	movs	r2, #128	; 0x80
 80010ca:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2210      	movs	r2, #16
 80010d4:	4013      	ands	r3, r2
 80010d6:	2b10      	cmp	r3, #16
 80010d8:	d123      	bne.n	8001122 <HAL_ADC_IRQHandler+0x162>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2210      	movs	r2, #16
 80010e2:	4013      	ands	r3, r2
 80010e4:	2b10      	cmp	r3, #16
 80010e6:	d11c      	bne.n	8001122 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d006      	beq.n	80010fe <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	2201      	movs	r2, #1
 80010f8:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d10d      	bne.n	800111a <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001102:	2202      	movs	r2, #2
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2210      	movs	r2, #16
 8001110:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	0018      	movs	r0, r3
 8001116:	f000 f813 	bl	8001140 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2210      	movs	r2, #16
 8001120:	601a      	str	r2, [r3, #0]
  }

}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	b002      	add	sp, #8
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	fffffefe 	.word	0xfffffefe

08001130 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	b002      	add	sp, #8
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	b002      	add	sp, #8
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800115a:	230f      	movs	r3, #15
 800115c:	18fb      	adds	r3, r7, r3
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	055b      	lsls	r3, r3, #21
 800116e:	429a      	cmp	r2, r3
 8001170:	d011      	beq.n	8001196 <HAL_ADC_ConfigChannel+0x46>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001176:	2b01      	cmp	r3, #1
 8001178:	d00d      	beq.n	8001196 <HAL_ADC_ConfigChannel+0x46>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117e:	2b02      	cmp	r3, #2
 8001180:	d009      	beq.n	8001196 <HAL_ADC_ConfigChannel+0x46>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001186:	2b03      	cmp	r3, #3
 8001188:	d005      	beq.n	8001196 <HAL_ADC_ConfigChannel+0x46>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118e:	2b04      	cmp	r3, #4
 8001190:	d001      	beq.n	8001196 <HAL_ADC_ConfigChannel+0x46>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2234      	movs	r2, #52	; 0x34
 800119a:	5c9b      	ldrb	r3, [r3, r2]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d101      	bne.n	80011a4 <HAL_ADC_ConfigChannel+0x54>
 80011a0:	2302      	movs	r3, #2
 80011a2:	e0d0      	b.n	8001346 <HAL_ADC_ConfigChannel+0x1f6>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2234      	movs	r2, #52	; 0x34
 80011a8:	2101      	movs	r1, #1
 80011aa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2204      	movs	r2, #4
 80011b4:	4013      	ands	r3, r2
 80011b6:	d000      	beq.n	80011ba <HAL_ADC_ConfigChannel+0x6a>
 80011b8:	e0b4      	b.n	8001324 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	4a64      	ldr	r2, [pc, #400]	; (8001350 <HAL_ADC_ConfigChannel+0x200>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d100      	bne.n	80011c6 <HAL_ADC_ConfigChannel+0x76>
 80011c4:	e082      	b.n	80012cc <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2201      	movs	r2, #1
 80011d2:	409a      	lsls	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	430a      	orrs	r2, r1
 80011da:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	055b      	lsls	r3, r3, #21
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d037      	beq.n	8001258 <HAL_ADC_ConfigChannel+0x108>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d033      	beq.n	8001258 <HAL_ADC_ConfigChannel+0x108>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d02f      	beq.n	8001258 <HAL_ADC_ConfigChannel+0x108>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d02b      	beq.n	8001258 <HAL_ADC_ConfigChannel+0x108>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001204:	2b04      	cmp	r3, #4
 8001206:	d027      	beq.n	8001258 <HAL_ADC_ConfigChannel+0x108>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120c:	2b05      	cmp	r3, #5
 800120e:	d023      	beq.n	8001258 <HAL_ADC_ConfigChannel+0x108>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001214:	2b06      	cmp	r3, #6
 8001216:	d01f      	beq.n	8001258 <HAL_ADC_ConfigChannel+0x108>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121c:	2b07      	cmp	r3, #7
 800121e:	d01b      	beq.n	8001258 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	2107      	movs	r1, #7
 800122c:	400b      	ands	r3, r1
 800122e:	429a      	cmp	r2, r3
 8001230:	d012      	beq.n	8001258 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	695a      	ldr	r2, [r3, #20]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2107      	movs	r1, #7
 800123e:	438a      	bics	r2, r1
 8001240:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6959      	ldr	r1, [r3, #20]
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2207      	movs	r2, #7
 800124e:	401a      	ands	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	430a      	orrs	r2, r1
 8001256:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b10      	cmp	r3, #16
 800125e:	d007      	beq.n	8001270 <HAL_ADC_ConfigChannel+0x120>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b11      	cmp	r3, #17
 8001266:	d003      	beq.n	8001270 <HAL_ADC_ConfigChannel+0x120>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b12      	cmp	r3, #18
 800126e:	d163      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001270:	4b38      	ldr	r3, [pc, #224]	; (8001354 <HAL_ADC_ConfigChannel+0x204>)
 8001272:	6819      	ldr	r1, [r3, #0]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b10      	cmp	r3, #16
 800127a:	d009      	beq.n	8001290 <HAL_ADC_ConfigChannel+0x140>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b11      	cmp	r3, #17
 8001282:	d102      	bne.n	800128a <HAL_ADC_ConfigChannel+0x13a>
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	03db      	lsls	r3, r3, #15
 8001288:	e004      	b.n	8001294 <HAL_ADC_ConfigChannel+0x144>
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	045b      	lsls	r3, r3, #17
 800128e:	e001      	b.n	8001294 <HAL_ADC_ConfigChannel+0x144>
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	041b      	lsls	r3, r3, #16
 8001294:	4a2f      	ldr	r2, [pc, #188]	; (8001354 <HAL_ADC_ConfigChannel+0x204>)
 8001296:	430b      	orrs	r3, r1
 8001298:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b10      	cmp	r3, #16
 80012a0:	d14a      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012a2:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <HAL_ADC_ConfigChannel+0x208>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	492d      	ldr	r1, [pc, #180]	; (800135c <HAL_ADC_ConfigChannel+0x20c>)
 80012a8:	0018      	movs	r0, r3
 80012aa:	f7fe ff2b 	bl	8000104 <__udivsi3>
 80012ae:	0003      	movs	r3, r0
 80012b0:	001a      	movs	r2, r3
 80012b2:	0013      	movs	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	189b      	adds	r3, r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012bc:	e002      	b.n	80012c4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f9      	bne.n	80012be <HAL_ADC_ConfigChannel+0x16e>
 80012ca:	e035      	b.n	8001338 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2101      	movs	r1, #1
 80012d8:	4099      	lsls	r1, r3
 80012da:	000b      	movs	r3, r1
 80012dc:	43d9      	mvns	r1, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	400a      	ands	r2, r1
 80012e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b10      	cmp	r3, #16
 80012ec:	d007      	beq.n	80012fe <HAL_ADC_ConfigChannel+0x1ae>
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b11      	cmp	r3, #17
 80012f4:	d003      	beq.n	80012fe <HAL_ADC_ConfigChannel+0x1ae>
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b12      	cmp	r3, #18
 80012fc:	d11c      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_ADC_ConfigChannel+0x204>)
 8001300:	6819      	ldr	r1, [r3, #0]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b10      	cmp	r3, #16
 8001308:	d007      	beq.n	800131a <HAL_ADC_ConfigChannel+0x1ca>
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b11      	cmp	r3, #17
 8001310:	d101      	bne.n	8001316 <HAL_ADC_ConfigChannel+0x1c6>
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_ADC_ConfigChannel+0x210>)
 8001314:	e002      	b.n	800131c <HAL_ADC_ConfigChannel+0x1cc>
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <HAL_ADC_ConfigChannel+0x214>)
 8001318:	e000      	b.n	800131c <HAL_ADC_ConfigChannel+0x1cc>
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_ADC_ConfigChannel+0x218>)
 800131c:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <HAL_ADC_ConfigChannel+0x204>)
 800131e:	400b      	ands	r3, r1
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e009      	b.n	8001338 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001328:	2220      	movs	r2, #32
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001330:	230f      	movs	r3, #15
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2234      	movs	r2, #52	; 0x34
 800133c:	2100      	movs	r1, #0
 800133e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001340:	230f      	movs	r3, #15
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	781b      	ldrb	r3, [r3, #0]
}
 8001346:	0018      	movs	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	b004      	add	sp, #16
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	00001001 	.word	0x00001001
 8001354:	40012708 	.word	0x40012708
 8001358:	20000000 	.word	0x20000000
 800135c:	000f4240 	.word	0x000f4240
 8001360:	ffbfffff 	.word	0xffbfffff
 8001364:	feffffff 	.word	0xfeffffff
 8001368:	ff7fffff 	.word	0xff7fffff

0800136c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	0002      	movs	r2, r0
 8001374:	1dfb      	adds	r3, r7, #7
 8001376:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001378:	1dfb      	adds	r3, r7, #7
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b7f      	cmp	r3, #127	; 0x7f
 800137e:	d809      	bhi.n	8001394 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001380:	1dfb      	adds	r3, r7, #7
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	001a      	movs	r2, r3
 8001386:	231f      	movs	r3, #31
 8001388:	401a      	ands	r2, r3
 800138a:	4b04      	ldr	r3, [pc, #16]	; (800139c <__NVIC_EnableIRQ+0x30>)
 800138c:	2101      	movs	r1, #1
 800138e:	4091      	lsls	r1, r2
 8001390:	000a      	movs	r2, r1
 8001392:	601a      	str	r2, [r3, #0]
  }
}
 8001394:	46c0      	nop			; (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b002      	add	sp, #8
 800139a:	bd80      	pop	{r7, pc}
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	0002      	movs	r2, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013ae:	1dfb      	adds	r3, r7, #7
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b7f      	cmp	r3, #127	; 0x7f
 80013b4:	d828      	bhi.n	8001408 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013b6:	4a2f      	ldr	r2, [pc, #188]	; (8001474 <__NVIC_SetPriority+0xd4>)
 80013b8:	1dfb      	adds	r3, r7, #7
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	33c0      	adds	r3, #192	; 0xc0
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	589b      	ldr	r3, [r3, r2]
 80013c6:	1dfa      	adds	r2, r7, #7
 80013c8:	7812      	ldrb	r2, [r2, #0]
 80013ca:	0011      	movs	r1, r2
 80013cc:	2203      	movs	r2, #3
 80013ce:	400a      	ands	r2, r1
 80013d0:	00d2      	lsls	r2, r2, #3
 80013d2:	21ff      	movs	r1, #255	; 0xff
 80013d4:	4091      	lsls	r1, r2
 80013d6:	000a      	movs	r2, r1
 80013d8:	43d2      	mvns	r2, r2
 80013da:	401a      	ands	r2, r3
 80013dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	019b      	lsls	r3, r3, #6
 80013e2:	22ff      	movs	r2, #255	; 0xff
 80013e4:	401a      	ands	r2, r3
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	0018      	movs	r0, r3
 80013ec:	2303      	movs	r3, #3
 80013ee:	4003      	ands	r3, r0
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f4:	481f      	ldr	r0, [pc, #124]	; (8001474 <__NVIC_SetPriority+0xd4>)
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	430a      	orrs	r2, r1
 8001400:	33c0      	adds	r3, #192	; 0xc0
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001406:	e031      	b.n	800146c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001408:	4a1b      	ldr	r2, [pc, #108]	; (8001478 <__NVIC_SetPriority+0xd8>)
 800140a:	1dfb      	adds	r3, r7, #7
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	0019      	movs	r1, r3
 8001410:	230f      	movs	r3, #15
 8001412:	400b      	ands	r3, r1
 8001414:	3b08      	subs	r3, #8
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3306      	adds	r3, #6
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	18d3      	adds	r3, r2, r3
 800141e:	3304      	adds	r3, #4
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	1dfa      	adds	r2, r7, #7
 8001424:	7812      	ldrb	r2, [r2, #0]
 8001426:	0011      	movs	r1, r2
 8001428:	2203      	movs	r2, #3
 800142a:	400a      	ands	r2, r1
 800142c:	00d2      	lsls	r2, r2, #3
 800142e:	21ff      	movs	r1, #255	; 0xff
 8001430:	4091      	lsls	r1, r2
 8001432:	000a      	movs	r2, r1
 8001434:	43d2      	mvns	r2, r2
 8001436:	401a      	ands	r2, r3
 8001438:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	019b      	lsls	r3, r3, #6
 800143e:	22ff      	movs	r2, #255	; 0xff
 8001440:	401a      	ands	r2, r3
 8001442:	1dfb      	adds	r3, r7, #7
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	0018      	movs	r0, r3
 8001448:	2303      	movs	r3, #3
 800144a:	4003      	ands	r3, r0
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001450:	4809      	ldr	r0, [pc, #36]	; (8001478 <__NVIC_SetPriority+0xd8>)
 8001452:	1dfb      	adds	r3, r7, #7
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	001c      	movs	r4, r3
 8001458:	230f      	movs	r3, #15
 800145a:	4023      	ands	r3, r4
 800145c:	3b08      	subs	r3, #8
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	430a      	orrs	r2, r1
 8001462:	3306      	adds	r3, #6
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	18c3      	adds	r3, r0, r3
 8001468:	3304      	adds	r3, #4
 800146a:	601a      	str	r2, [r3, #0]
}
 800146c:	46c0      	nop			; (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b003      	add	sp, #12
 8001472:	bd90      	pop	{r4, r7, pc}
 8001474:	e000e100 	.word	0xe000e100
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	1e5a      	subs	r2, r3, #1
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	045b      	lsls	r3, r3, #17
 800148c:	429a      	cmp	r2, r3
 800148e:	d301      	bcc.n	8001494 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001490:	2301      	movs	r3, #1
 8001492:	e010      	b.n	80014b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001494:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <SysTick_Config+0x44>)
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	3a01      	subs	r2, #1
 800149a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149c:	2301      	movs	r3, #1
 800149e:	425b      	negs	r3, r3
 80014a0:	2103      	movs	r1, #3
 80014a2:	0018      	movs	r0, r3
 80014a4:	f7ff ff7c 	bl	80013a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <SysTick_Config+0x44>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SysTick_Config+0x44>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	0018      	movs	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b002      	add	sp, #8
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	e000e010 	.word	0xe000e010

080014c4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	210f      	movs	r1, #15
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	1c02      	adds	r2, r0, #0
 80014d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	187b      	adds	r3, r7, r1
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	0011      	movs	r1, r2
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff ff5d 	bl	80013a0 <__NVIC_SetPriority>
}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b004      	add	sp, #16
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	0002      	movs	r2, r0
 80014f6:	1dfb      	adds	r3, r7, #7
 80014f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fa:	1dfb      	adds	r3, r7, #7
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	0018      	movs	r0, r3
 8001502:	f7ff ff33 	bl	800136c <__NVIC_EnableIRQ>
}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b002      	add	sp, #8
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	0018      	movs	r0, r3
 800151a:	f7ff ffaf 	bl	800147c <SysTick_Config>
 800151e:	0003      	movs	r3, r0
}
 8001520:	0018      	movs	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	b002      	add	sp, #8
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e036      	b.n	80015ac <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2221      	movs	r2, #33	; 0x21
 8001542:	2102      	movs	r1, #2
 8001544:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4a18      	ldr	r2, [pc, #96]	; (80015b4 <HAL_DMA_Init+0x8c>)
 8001552:	4013      	ands	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800155e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001576:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	4313      	orrs	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	0018      	movs	r0, r3
 8001590:	f000 f932 	bl	80017f8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2221      	movs	r2, #33	; 0x21
 800159e:	2101      	movs	r1, #1
 80015a0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2220      	movs	r2, #32
 80015a6:	2100      	movs	r1, #0
 80015a8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}  
 80015ac:	0018      	movs	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b004      	add	sp, #16
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	ffffc00f 	.word	0xffffc00f

080015b8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2221      	movs	r2, #33	; 0x21
 80015c4:	5c9b      	ldrb	r3, [r3, r2]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d008      	beq.n	80015de <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2204      	movs	r2, #4
 80015d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2220      	movs	r2, #32
 80015d6:	2100      	movs	r1, #0
 80015d8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e020      	b.n	8001620 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	210e      	movs	r1, #14
 80015ea:	438a      	bics	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2101      	movs	r1, #1
 80015fa:	438a      	bics	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001606:	2101      	movs	r1, #1
 8001608:	4091      	lsls	r1, r2
 800160a:	000a      	movs	r2, r1
 800160c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2221      	movs	r2, #33	; 0x21
 8001612:	2101      	movs	r1, #1
 8001614:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2220      	movs	r2, #32
 800161a:	2100      	movs	r1, #0
 800161c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	0018      	movs	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	b002      	add	sp, #8
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001630:	210f      	movs	r1, #15
 8001632:	187b      	adds	r3, r7, r1
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2221      	movs	r2, #33	; 0x21
 800163c:	5c9b      	ldrb	r3, [r3, r2]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d006      	beq.n	8001652 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2204      	movs	r2, #4
 8001648:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800164a:	187b      	adds	r3, r7, r1
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	e028      	b.n	80016a4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	210e      	movs	r1, #14
 800165e:	438a      	bics	r2, r1
 8001660:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2101      	movs	r1, #1
 800166e:	438a      	bics	r2, r1
 8001670:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800167a:	2101      	movs	r1, #1
 800167c:	4091      	lsls	r1, r2
 800167e:	000a      	movs	r2, r1
 8001680:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2221      	movs	r2, #33	; 0x21
 8001686:	2101      	movs	r1, #1
 8001688:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2220      	movs	r2, #32
 800168e:	2100      	movs	r1, #0
 8001690:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001696:	2b00      	cmp	r3, #0
 8001698:	d004      	beq.n	80016a4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	0010      	movs	r0, r2
 80016a2:	4798      	blx	r3
    } 
  }
  return status;
 80016a4:	230f      	movs	r3, #15
 80016a6:	18fb      	adds	r3, r7, r3
 80016a8:	781b      	ldrb	r3, [r3, #0]
}
 80016aa:	0018      	movs	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b004      	add	sp, #16
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	2204      	movs	r2, #4
 80016d0:	409a      	lsls	r2, r3
 80016d2:	0013      	movs	r3, r2
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	4013      	ands	r3, r2
 80016d8:	d024      	beq.n	8001724 <HAL_DMA_IRQHandler+0x72>
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2204      	movs	r2, #4
 80016de:	4013      	ands	r3, r2
 80016e0:	d020      	beq.n	8001724 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2220      	movs	r2, #32
 80016ea:	4013      	ands	r3, r2
 80016ec:	d107      	bne.n	80016fe <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2104      	movs	r1, #4
 80016fa:	438a      	bics	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001706:	2104      	movs	r1, #4
 8001708:	4091      	lsls	r1, r2
 800170a:	000a      	movs	r2, r1
 800170c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	2b00      	cmp	r3, #0
 8001714:	d100      	bne.n	8001718 <HAL_DMA_IRQHandler+0x66>
 8001716:	e06a      	b.n	80017ee <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	0010      	movs	r0, r2
 8001720:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001722:	e064      	b.n	80017ee <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	2202      	movs	r2, #2
 800172a:	409a      	lsls	r2, r3
 800172c:	0013      	movs	r3, r2
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4013      	ands	r3, r2
 8001732:	d02b      	beq.n	800178c <HAL_DMA_IRQHandler+0xda>
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	2202      	movs	r2, #2
 8001738:	4013      	ands	r3, r2
 800173a:	d027      	beq.n	800178c <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2220      	movs	r2, #32
 8001744:	4013      	ands	r3, r2
 8001746:	d10b      	bne.n	8001760 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	210a      	movs	r1, #10
 8001754:	438a      	bics	r2, r1
 8001756:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2221      	movs	r2, #33	; 0x21
 800175c:	2101      	movs	r1, #1
 800175e:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001768:	2102      	movs	r1, #2
 800176a:	4091      	lsls	r1, r2
 800176c:	000a      	movs	r2, r1
 800176e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2220      	movs	r2, #32
 8001774:	2100      	movs	r1, #0
 8001776:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	2b00      	cmp	r3, #0
 800177e:	d036      	beq.n	80017ee <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	0010      	movs	r0, r2
 8001788:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800178a:	e030      	b.n	80017ee <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	2208      	movs	r2, #8
 8001792:	409a      	lsls	r2, r3
 8001794:	0013      	movs	r3, r2
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4013      	ands	r3, r2
 800179a:	d028      	beq.n	80017ee <HAL_DMA_IRQHandler+0x13c>
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2208      	movs	r2, #8
 80017a0:	4013      	ands	r3, r2
 80017a2:	d024      	beq.n	80017ee <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	210e      	movs	r1, #14
 80017b0:	438a      	bics	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017bc:	2101      	movs	r1, #1
 80017be:	4091      	lsls	r1, r2
 80017c0:	000a      	movs	r2, r1
 80017c2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2221      	movs	r2, #33	; 0x21
 80017ce:	2101      	movs	r1, #1
 80017d0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2220      	movs	r2, #32
 80017d6:	2100      	movs	r1, #0
 80017d8:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d005      	beq.n	80017ee <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	0010      	movs	r0, r2
 80017ea:	4798      	blx	r3
    }
   }
}  
 80017ec:	e7ff      	b.n	80017ee <HAL_DMA_IRQHandler+0x13c>
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b004      	add	sp, #16
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	001a      	movs	r2, r3
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <DMA_CalcBaseAndBitshift+0x60>)
 8001808:	429a      	cmp	r2, r3
 800180a:	d810      	bhi.n	800182e <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a12      	ldr	r2, [pc, #72]	; (800185c <DMA_CalcBaseAndBitshift+0x64>)
 8001812:	4694      	mov	ip, r2
 8001814:	4463      	add	r3, ip
 8001816:	2114      	movs	r1, #20
 8001818:	0018      	movs	r0, r3
 800181a:	f7fe fc73 	bl	8000104 <__udivsi3>
 800181e:	0003      	movs	r3, r0
 8001820:	009a      	lsls	r2, r3, #2
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <DMA_CalcBaseAndBitshift+0x68>)
 800182a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800182c:	e00f      	b.n	800184e <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a0c      	ldr	r2, [pc, #48]	; (8001864 <DMA_CalcBaseAndBitshift+0x6c>)
 8001834:	4694      	mov	ip, r2
 8001836:	4463      	add	r3, ip
 8001838:	2114      	movs	r1, #20
 800183a:	0018      	movs	r0, r3
 800183c:	f7fe fc62 	bl	8000104 <__udivsi3>
 8001840:	0003      	movs	r3, r0
 8001842:	009a      	lsls	r2, r3, #2
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a07      	ldr	r2, [pc, #28]	; (8001868 <DMA_CalcBaseAndBitshift+0x70>)
 800184c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	46bd      	mov	sp, r7
 8001852:	b002      	add	sp, #8
 8001854:	bd80      	pop	{r7, pc}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	40020407 	.word	0x40020407
 800185c:	bffdfff8 	.word	0xbffdfff8
 8001860:	40020000 	.word	0x40020000
 8001864:	bffdfbf8 	.word	0xbffdfbf8
 8001868:	40020400 	.word	0x40020400

0800186c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187a:	e155      	b.n	8001b28 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2101      	movs	r1, #1
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	4091      	lsls	r1, r2
 8001886:	000a      	movs	r2, r1
 8001888:	4013      	ands	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d100      	bne.n	8001894 <HAL_GPIO_Init+0x28>
 8001892:	e146      	b.n	8001b22 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2203      	movs	r2, #3
 800189a:	4013      	ands	r3, r2
 800189c:	2b01      	cmp	r3, #1
 800189e:	d005      	beq.n	80018ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2203      	movs	r2, #3
 80018a6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d130      	bne.n	800190e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2203      	movs	r2, #3
 80018b8:	409a      	lsls	r2, r3
 80018ba:	0013      	movs	r3, r2
 80018bc:	43da      	mvns	r2, r3
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	409a      	lsls	r2, r3
 80018ce:	0013      	movs	r3, r2
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e2:	2201      	movs	r2, #1
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
 80018e8:	0013      	movs	r3, r2
 80018ea:	43da      	mvns	r2, r3
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	2201      	movs	r2, #1
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
 8001900:	0013      	movs	r3, r2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2203      	movs	r2, #3
 8001914:	4013      	ands	r3, r2
 8001916:	2b03      	cmp	r3, #3
 8001918:	d017      	beq.n	800194a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	409a      	lsls	r2, r3
 8001928:	0013      	movs	r3, r2
 800192a:	43da      	mvns	r2, r3
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	409a      	lsls	r2, r3
 800193c:	0013      	movs	r3, r2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2203      	movs	r2, #3
 8001950:	4013      	ands	r3, r2
 8001952:	2b02      	cmp	r3, #2
 8001954:	d123      	bne.n	800199e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	08da      	lsrs	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3208      	adds	r2, #8
 800195e:	0092      	lsls	r2, r2, #2
 8001960:	58d3      	ldr	r3, [r2, r3]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2207      	movs	r2, #7
 8001968:	4013      	ands	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	220f      	movs	r2, #15
 800196e:	409a      	lsls	r2, r3
 8001970:	0013      	movs	r3, r2
 8001972:	43da      	mvns	r2, r3
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	691a      	ldr	r2, [r3, #16]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	2107      	movs	r1, #7
 8001982:	400b      	ands	r3, r1
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	409a      	lsls	r2, r3
 8001988:	0013      	movs	r3, r2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	0092      	lsls	r2, r2, #2
 800199a:	6939      	ldr	r1, [r7, #16]
 800199c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	2203      	movs	r2, #3
 80019aa:	409a      	lsls	r2, r3
 80019ac:	0013      	movs	r3, r2
 80019ae:	43da      	mvns	r2, r3
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2203      	movs	r2, #3
 80019bc:	401a      	ands	r2, r3
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	409a      	lsls	r2, r3
 80019c4:	0013      	movs	r3, r2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	23c0      	movs	r3, #192	; 0xc0
 80019d8:	029b      	lsls	r3, r3, #10
 80019da:	4013      	ands	r3, r2
 80019dc:	d100      	bne.n	80019e0 <HAL_GPIO_Init+0x174>
 80019de:	e0a0      	b.n	8001b22 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e0:	4b57      	ldr	r3, [pc, #348]	; (8001b40 <HAL_GPIO_Init+0x2d4>)
 80019e2:	699a      	ldr	r2, [r3, #24]
 80019e4:	4b56      	ldr	r3, [pc, #344]	; (8001b40 <HAL_GPIO_Init+0x2d4>)
 80019e6:	2101      	movs	r1, #1
 80019e8:	430a      	orrs	r2, r1
 80019ea:	619a      	str	r2, [r3, #24]
 80019ec:	4b54      	ldr	r3, [pc, #336]	; (8001b40 <HAL_GPIO_Init+0x2d4>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	2201      	movs	r2, #1
 80019f2:	4013      	ands	r3, r2
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019f8:	4a52      	ldr	r2, [pc, #328]	; (8001b44 <HAL_GPIO_Init+0x2d8>)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	589b      	ldr	r3, [r3, r2]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2203      	movs	r2, #3
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	220f      	movs	r2, #15
 8001a10:	409a      	lsls	r2, r3
 8001a12:	0013      	movs	r3, r2
 8001a14:	43da      	mvns	r2, r3
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	2390      	movs	r3, #144	; 0x90
 8001a20:	05db      	lsls	r3, r3, #23
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d019      	beq.n	8001a5a <HAL_GPIO_Init+0x1ee>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a47      	ldr	r2, [pc, #284]	; (8001b48 <HAL_GPIO_Init+0x2dc>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d013      	beq.n	8001a56 <HAL_GPIO_Init+0x1ea>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a46      	ldr	r2, [pc, #280]	; (8001b4c <HAL_GPIO_Init+0x2e0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d00d      	beq.n	8001a52 <HAL_GPIO_Init+0x1e6>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a45      	ldr	r2, [pc, #276]	; (8001b50 <HAL_GPIO_Init+0x2e4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d007      	beq.n	8001a4e <HAL_GPIO_Init+0x1e2>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a44      	ldr	r2, [pc, #272]	; (8001b54 <HAL_GPIO_Init+0x2e8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d101      	bne.n	8001a4a <HAL_GPIO_Init+0x1de>
 8001a46:	2304      	movs	r3, #4
 8001a48:	e008      	b.n	8001a5c <HAL_GPIO_Init+0x1f0>
 8001a4a:	2305      	movs	r3, #5
 8001a4c:	e006      	b.n	8001a5c <HAL_GPIO_Init+0x1f0>
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e004      	b.n	8001a5c <HAL_GPIO_Init+0x1f0>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e002      	b.n	8001a5c <HAL_GPIO_Init+0x1f0>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <HAL_GPIO_Init+0x1f0>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	2103      	movs	r1, #3
 8001a60:	400a      	ands	r2, r1
 8001a62:	0092      	lsls	r2, r2, #2
 8001a64:	4093      	lsls	r3, r2
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a6c:	4935      	ldr	r1, [pc, #212]	; (8001b44 <HAL_GPIO_Init+0x2d8>)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	089b      	lsrs	r3, r3, #2
 8001a72:	3302      	adds	r3, #2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a7a:	4b37      	ldr	r3, [pc, #220]	; (8001b58 <HAL_GPIO_Init+0x2ec>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	43da      	mvns	r2, r3
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	025b      	lsls	r3, r3, #9
 8001a92:	4013      	ands	r3, r2
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <HAL_GPIO_Init+0x2ec>)
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001aa4:	4b2c      	ldr	r3, [pc, #176]	; (8001b58 <HAL_GPIO_Init+0x2ec>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	43da      	mvns	r2, r3
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	029b      	lsls	r3, r3, #10
 8001abc:	4013      	ands	r3, r2
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ac8:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <HAL_GPIO_Init+0x2ec>)
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ace:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <HAL_GPIO_Init+0x2ec>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4013      	ands	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	035b      	lsls	r3, r3, #13
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001af2:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_GPIO_Init+0x2ec>)
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001af8:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <HAL_GPIO_Init+0x2ec>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	43da      	mvns	r2, r3
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	039b      	lsls	r3, r3, #14
 8001b10:	4013      	ands	r3, r2
 8001b12:	d003      	beq.n	8001b1c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_GPIO_Init+0x2ec>)
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3301      	adds	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	40da      	lsrs	r2, r3
 8001b30:	1e13      	subs	r3, r2, #0
 8001b32:	d000      	beq.n	8001b36 <HAL_GPIO_Init+0x2ca>
 8001b34:	e6a2      	b.n	800187c <HAL_GPIO_Init+0x10>
  } 
}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	46c0      	nop			; (mov r8, r8)
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b006      	add	sp, #24
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010000 	.word	0x40010000
 8001b48:	48000400 	.word	0x48000400
 8001b4c:	48000800 	.word	0x48000800
 8001b50:	48000c00 	.word	0x48000c00
 8001b54:	48001000 	.word	0x48001000
 8001b58:	40010400 	.word	0x40010400

08001b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	0008      	movs	r0, r1
 8001b66:	0011      	movs	r1, r2
 8001b68:	1cbb      	adds	r3, r7, #2
 8001b6a:	1c02      	adds	r2, r0, #0
 8001b6c:	801a      	strh	r2, [r3, #0]
 8001b6e:	1c7b      	adds	r3, r7, #1
 8001b70:	1c0a      	adds	r2, r1, #0
 8001b72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b74:	1c7b      	adds	r3, r7, #1
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d004      	beq.n	8001b86 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b7c:	1cbb      	adds	r3, r7, #2
 8001b7e:	881a      	ldrh	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b84:	e003      	b.n	8001b8e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b86:	1cbb      	adds	r3, r7, #2
 8001b88:	881a      	ldrh	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b002      	add	sp, #8
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e082      	b.n	8001cb0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2241      	movs	r2, #65	; 0x41
 8001bae:	5c9b      	ldrb	r3, [r3, r2]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d107      	bne.n	8001bc6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2240      	movs	r2, #64	; 0x40
 8001bba:	2100      	movs	r1, #0
 8001bbc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7fe fe83 	bl	80008cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2241      	movs	r2, #65	; 0x41
 8001bca:	2124      	movs	r1, #36	; 0x24
 8001bcc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2101      	movs	r1, #1
 8001bda:	438a      	bics	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4934      	ldr	r1, [pc, #208]	; (8001cb8 <HAL_I2C_Init+0x120>)
 8001be8:	400a      	ands	r2, r1
 8001bea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4931      	ldr	r1, [pc, #196]	; (8001cbc <HAL_I2C_Init+0x124>)
 8001bf8:	400a      	ands	r2, r1
 8001bfa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d108      	bne.n	8001c16 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2180      	movs	r1, #128	; 0x80
 8001c0e:	0209      	lsls	r1, r1, #8
 8001c10:	430a      	orrs	r2, r1
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	e007      	b.n	8001c26 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2184      	movs	r1, #132	; 0x84
 8001c20:	0209      	lsls	r1, r1, #8
 8001c22:	430a      	orrs	r2, r1
 8001c24:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d104      	bne.n	8001c38 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	0112      	lsls	r2, r2, #4
 8001c36:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	491f      	ldr	r1, [pc, #124]	; (8001cc0 <HAL_I2C_Init+0x128>)
 8001c44:	430a      	orrs	r2, r1
 8001c46:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	491a      	ldr	r1, [pc, #104]	; (8001cbc <HAL_I2C_Init+0x124>)
 8001c54:	400a      	ands	r2, r1
 8001c56:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	431a      	orrs	r2, r3
 8001c62:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69d9      	ldr	r1, [r3, #28]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a1a      	ldr	r2, [r3, #32]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2241      	movs	r2, #65	; 0x41
 8001c9c:	2120      	movs	r1, #32
 8001c9e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2242      	movs	r2, #66	; 0x42
 8001caa:	2100      	movs	r1, #0
 8001cac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b002      	add	sp, #8
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	f0ffffff 	.word	0xf0ffffff
 8001cbc:	ffff7fff 	.word	0xffff7fff
 8001cc0:	02008000 	.word	0x02008000

08001cc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2241      	movs	r2, #65	; 0x41
 8001cd2:	5c9b      	ldrb	r3, [r3, r2]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b20      	cmp	r3, #32
 8001cd8:	d138      	bne.n	8001d4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2240      	movs	r2, #64	; 0x40
 8001cde:	5c9b      	ldrb	r3, [r3, r2]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e032      	b.n	8001d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2240      	movs	r2, #64	; 0x40
 8001cec:	2101      	movs	r1, #1
 8001cee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2241      	movs	r2, #65	; 0x41
 8001cf4:	2124      	movs	r1, #36	; 0x24
 8001cf6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2101      	movs	r1, #1
 8001d04:	438a      	bics	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4911      	ldr	r1, [pc, #68]	; (8001d58 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001d14:	400a      	ands	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6819      	ldr	r1, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2101      	movs	r1, #1
 8001d34:	430a      	orrs	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2241      	movs	r2, #65	; 0x41
 8001d3c:	2120      	movs	r1, #32
 8001d3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2240      	movs	r2, #64	; 0x40
 8001d44:	2100      	movs	r1, #0
 8001d46:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e000      	b.n	8001d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d4c:	2302      	movs	r3, #2
  }
}
 8001d4e:	0018      	movs	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b002      	add	sp, #8
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	ffffefff 	.word	0xffffefff

08001d5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2241      	movs	r2, #65	; 0x41
 8001d6a:	5c9b      	ldrb	r3, [r3, r2]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b20      	cmp	r3, #32
 8001d70:	d139      	bne.n	8001de6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2240      	movs	r2, #64	; 0x40
 8001d76:	5c9b      	ldrb	r3, [r3, r2]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e033      	b.n	8001de8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2240      	movs	r2, #64	; 0x40
 8001d84:	2101      	movs	r1, #1
 8001d86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2241      	movs	r2, #65	; 0x41
 8001d8c:	2124      	movs	r1, #36	; 0x24
 8001d8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	438a      	bics	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4a11      	ldr	r2, [pc, #68]	; (8001df0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	021b      	lsls	r3, r3, #8
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2101      	movs	r1, #1
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2241      	movs	r2, #65	; 0x41
 8001dd6:	2120      	movs	r1, #32
 8001dd8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2240      	movs	r2, #64	; 0x40
 8001dde:	2100      	movs	r1, #0
 8001de0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e000      	b.n	8001de8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001de6:	2302      	movs	r3, #2
  }
}
 8001de8:	0018      	movs	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b004      	add	sp, #16
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	fffff0ff 	.word	0xfffff0ff

08001df4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d102      	bne.n	8001e08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f000 fb76 	bl	80024f4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d100      	bne.n	8001e14 <HAL_RCC_OscConfig+0x20>
 8001e12:	e08e      	b.n	8001f32 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e14:	4bc5      	ldr	r3, [pc, #788]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	220c      	movs	r2, #12
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d00e      	beq.n	8001e3e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e20:	4bc2      	ldr	r3, [pc, #776]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	220c      	movs	r2, #12
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d117      	bne.n	8001e5c <HAL_RCC_OscConfig+0x68>
 8001e2c:	4bbf      	ldr	r3, [pc, #764]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	23c0      	movs	r3, #192	; 0xc0
 8001e32:	025b      	lsls	r3, r3, #9
 8001e34:	401a      	ands	r2, r3
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	025b      	lsls	r3, r3, #9
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d10e      	bne.n	8001e5c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3e:	4bbb      	ldr	r3, [pc, #748]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	029b      	lsls	r3, r3, #10
 8001e46:	4013      	ands	r3, r2
 8001e48:	d100      	bne.n	8001e4c <HAL_RCC_OscConfig+0x58>
 8001e4a:	e071      	b.n	8001f30 <HAL_RCC_OscConfig+0x13c>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d000      	beq.n	8001e56 <HAL_RCC_OscConfig+0x62>
 8001e54:	e06c      	b.n	8001f30 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	f000 fb4c 	bl	80024f4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_OscConfig+0x80>
 8001e64:	4bb1      	ldr	r3, [pc, #708]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4bb0      	ldr	r3, [pc, #704]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	0249      	lsls	r1, r1, #9
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	e02f      	b.n	8001ed4 <HAL_RCC_OscConfig+0xe0>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10c      	bne.n	8001e96 <HAL_RCC_OscConfig+0xa2>
 8001e7c:	4bab      	ldr	r3, [pc, #684]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4baa      	ldr	r3, [pc, #680]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001e82:	49ab      	ldr	r1, [pc, #684]	; (8002130 <HAL_RCC_OscConfig+0x33c>)
 8001e84:	400a      	ands	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	4ba8      	ldr	r3, [pc, #672]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4ba7      	ldr	r3, [pc, #668]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001e8e:	49a9      	ldr	r1, [pc, #676]	; (8002134 <HAL_RCC_OscConfig+0x340>)
 8001e90:	400a      	ands	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e01e      	b.n	8001ed4 <HAL_RCC_OscConfig+0xe0>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b05      	cmp	r3, #5
 8001e9c:	d10e      	bne.n	8001ebc <HAL_RCC_OscConfig+0xc8>
 8001e9e:	4ba3      	ldr	r3, [pc, #652]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4ba2      	ldr	r3, [pc, #648]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001ea4:	2180      	movs	r1, #128	; 0x80
 8001ea6:	02c9      	lsls	r1, r1, #11
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	4b9f      	ldr	r3, [pc, #636]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b9e      	ldr	r3, [pc, #632]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001eb2:	2180      	movs	r1, #128	; 0x80
 8001eb4:	0249      	lsls	r1, r1, #9
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	e00b      	b.n	8001ed4 <HAL_RCC_OscConfig+0xe0>
 8001ebc:	4b9b      	ldr	r3, [pc, #620]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b9a      	ldr	r3, [pc, #616]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001ec2:	499b      	ldr	r1, [pc, #620]	; (8002130 <HAL_RCC_OscConfig+0x33c>)
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	4b98      	ldr	r3, [pc, #608]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4b97      	ldr	r3, [pc, #604]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001ece:	4999      	ldr	r1, [pc, #612]	; (8002134 <HAL_RCC_OscConfig+0x340>)
 8001ed0:	400a      	ands	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d014      	beq.n	8001f06 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7fe ff02 	bl	8000ce4 <HAL_GetTick>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee6:	f7fe fefd 	bl	8000ce4 <HAL_GetTick>
 8001eea:	0002      	movs	r2, r0
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b64      	cmp	r3, #100	; 0x64
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e2fd      	b.n	80024f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef8:	4b8c      	ldr	r3, [pc, #560]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	029b      	lsls	r3, r3, #10
 8001f00:	4013      	ands	r3, r2
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0xf2>
 8001f04:	e015      	b.n	8001f32 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7fe feed 	bl	8000ce4 <HAL_GetTick>
 8001f0a:	0003      	movs	r3, r0
 8001f0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f10:	f7fe fee8 	bl	8000ce4 <HAL_GetTick>
 8001f14:	0002      	movs	r2, r0
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e2e8      	b.n	80024f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f22:	4b82      	ldr	r3, [pc, #520]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	029b      	lsls	r3, r3, #10
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x11c>
 8001f2e:	e000      	b.n	8001f32 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f30:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2202      	movs	r2, #2
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d100      	bne.n	8001f3e <HAL_RCC_OscConfig+0x14a>
 8001f3c:	e06c      	b.n	8002018 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f3e:	4b7b      	ldr	r3, [pc, #492]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	220c      	movs	r2, #12
 8001f44:	4013      	ands	r3, r2
 8001f46:	d00e      	beq.n	8001f66 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f48:	4b78      	ldr	r3, [pc, #480]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	220c      	movs	r2, #12
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d11f      	bne.n	8001f94 <HAL_RCC_OscConfig+0x1a0>
 8001f54:	4b75      	ldr	r3, [pc, #468]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	23c0      	movs	r3, #192	; 0xc0
 8001f5a:	025b      	lsls	r3, r3, #9
 8001f5c:	401a      	ands	r2, r3
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	021b      	lsls	r3, r3, #8
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d116      	bne.n	8001f94 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	4b71      	ldr	r3, [pc, #452]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_OscConfig+0x188>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e2bb      	b.n	80024f4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7c:	4b6b      	ldr	r3, [pc, #428]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	22f8      	movs	r2, #248	; 0xf8
 8001f82:	4393      	bics	r3, r2
 8001f84:	0019      	movs	r1, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	00da      	lsls	r2, r3, #3
 8001f8c:	4b67      	ldr	r3, [pc, #412]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f92:	e041      	b.n	8002018 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d024      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f9c:	4b63      	ldr	r3, [pc, #396]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b62      	ldr	r3, [pc, #392]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7fe fe9c 	bl	8000ce4 <HAL_GetTick>
 8001fac:	0003      	movs	r3, r0
 8001fae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb2:	f7fe fe97 	bl	8000ce4 <HAL_GetTick>
 8001fb6:	0002      	movs	r2, r0
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e297      	b.n	80024f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc4:	4b59      	ldr	r3, [pc, #356]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2202      	movs	r2, #2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d0f1      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fce:	4b57      	ldr	r3, [pc, #348]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	22f8      	movs	r2, #248	; 0xf8
 8001fd4:	4393      	bics	r3, r2
 8001fd6:	0019      	movs	r1, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	00da      	lsls	r2, r3, #3
 8001fde:	4b53      	ldr	r3, [pc, #332]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	e018      	b.n	8002018 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fe6:	4b51      	ldr	r3, [pc, #324]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	4b50      	ldr	r3, [pc, #320]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8001fec:	2101      	movs	r1, #1
 8001fee:	438a      	bics	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff2:	f7fe fe77 	bl	8000ce4 <HAL_GetTick>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ffc:	f7fe fe72 	bl	8000ce4 <HAL_GetTick>
 8002000:	0002      	movs	r2, r0
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e272      	b.n	80024f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200e:	4b47      	ldr	r3, [pc, #284]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2202      	movs	r2, #2
 8002014:	4013      	ands	r3, r2
 8002016:	d1f1      	bne.n	8001ffc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2208      	movs	r2, #8
 800201e:	4013      	ands	r3, r2
 8002020:	d036      	beq.n	8002090 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d019      	beq.n	800205e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800202a:	4b40      	ldr	r3, [pc, #256]	; (800212c <HAL_RCC_OscConfig+0x338>)
 800202c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800202e:	4b3f      	ldr	r3, [pc, #252]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8002030:	2101      	movs	r1, #1
 8002032:	430a      	orrs	r2, r1
 8002034:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002036:	f7fe fe55 	bl	8000ce4 <HAL_GetTick>
 800203a:	0003      	movs	r3, r0
 800203c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002040:	f7fe fe50 	bl	8000ce4 <HAL_GetTick>
 8002044:	0002      	movs	r2, r0
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e250      	b.n	80024f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002052:	4b36      	ldr	r3, [pc, #216]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	2202      	movs	r2, #2
 8002058:	4013      	ands	r3, r2
 800205a:	d0f1      	beq.n	8002040 <HAL_RCC_OscConfig+0x24c>
 800205c:	e018      	b.n	8002090 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205e:	4b33      	ldr	r3, [pc, #204]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8002060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002062:	4b32      	ldr	r3, [pc, #200]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8002064:	2101      	movs	r1, #1
 8002066:	438a      	bics	r2, r1
 8002068:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206a:	f7fe fe3b 	bl	8000ce4 <HAL_GetTick>
 800206e:	0003      	movs	r3, r0
 8002070:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002074:	f7fe fe36 	bl	8000ce4 <HAL_GetTick>
 8002078:	0002      	movs	r2, r0
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e236      	b.n	80024f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002086:	4b29      	ldr	r3, [pc, #164]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	2202      	movs	r2, #2
 800208c:	4013      	ands	r3, r2
 800208e:	d1f1      	bne.n	8002074 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2204      	movs	r2, #4
 8002096:	4013      	ands	r3, r2
 8002098:	d100      	bne.n	800209c <HAL_RCC_OscConfig+0x2a8>
 800209a:	e0b5      	b.n	8002208 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800209c:	201f      	movs	r0, #31
 800209e:	183b      	adds	r3, r7, r0
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a4:	4b21      	ldr	r3, [pc, #132]	; (800212c <HAL_RCC_OscConfig+0x338>)
 80020a6:	69da      	ldr	r2, [r3, #28]
 80020a8:	2380      	movs	r3, #128	; 0x80
 80020aa:	055b      	lsls	r3, r3, #21
 80020ac:	4013      	ands	r3, r2
 80020ae:	d110      	bne.n	80020d2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b0:	4b1e      	ldr	r3, [pc, #120]	; (800212c <HAL_RCC_OscConfig+0x338>)
 80020b2:	69da      	ldr	r2, [r3, #28]
 80020b4:	4b1d      	ldr	r3, [pc, #116]	; (800212c <HAL_RCC_OscConfig+0x338>)
 80020b6:	2180      	movs	r1, #128	; 0x80
 80020b8:	0549      	lsls	r1, r1, #21
 80020ba:	430a      	orrs	r2, r1
 80020bc:	61da      	str	r2, [r3, #28]
 80020be:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_RCC_OscConfig+0x338>)
 80020c0:	69da      	ldr	r2, [r3, #28]
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	055b      	lsls	r3, r3, #21
 80020c6:	4013      	ands	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020cc:	183b      	adds	r3, r7, r0
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d2:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_RCC_OscConfig+0x344>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4013      	ands	r3, r2
 80020dc:	d11a      	bne.n	8002114 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020de:	4b16      	ldr	r3, [pc, #88]	; (8002138 <HAL_RCC_OscConfig+0x344>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_RCC_OscConfig+0x344>)
 80020e4:	2180      	movs	r1, #128	; 0x80
 80020e6:	0049      	lsls	r1, r1, #1
 80020e8:	430a      	orrs	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ec:	f7fe fdfa 	bl	8000ce4 <HAL_GetTick>
 80020f0:	0003      	movs	r3, r0
 80020f2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f6:	f7fe fdf5 	bl	8000ce4 <HAL_GetTick>
 80020fa:	0002      	movs	r2, r0
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b64      	cmp	r3, #100	; 0x64
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e1f5      	b.n	80024f4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_RCC_OscConfig+0x344>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4013      	ands	r3, r2
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d10f      	bne.n	800213c <HAL_RCC_OscConfig+0x348>
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <HAL_RCC_OscConfig+0x338>)
 800211e:	6a1a      	ldr	r2, [r3, #32]
 8002120:	4b02      	ldr	r3, [pc, #8]	; (800212c <HAL_RCC_OscConfig+0x338>)
 8002122:	2101      	movs	r1, #1
 8002124:	430a      	orrs	r2, r1
 8002126:	621a      	str	r2, [r3, #32]
 8002128:	e036      	b.n	8002198 <HAL_RCC_OscConfig+0x3a4>
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	40021000 	.word	0x40021000
 8002130:	fffeffff 	.word	0xfffeffff
 8002134:	fffbffff 	.word	0xfffbffff
 8002138:	40007000 	.word	0x40007000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10c      	bne.n	800215e <HAL_RCC_OscConfig+0x36a>
 8002144:	4bca      	ldr	r3, [pc, #808]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002146:	6a1a      	ldr	r2, [r3, #32]
 8002148:	4bc9      	ldr	r3, [pc, #804]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 800214a:	2101      	movs	r1, #1
 800214c:	438a      	bics	r2, r1
 800214e:	621a      	str	r2, [r3, #32]
 8002150:	4bc7      	ldr	r3, [pc, #796]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002152:	6a1a      	ldr	r2, [r3, #32]
 8002154:	4bc6      	ldr	r3, [pc, #792]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002156:	2104      	movs	r1, #4
 8002158:	438a      	bics	r2, r1
 800215a:	621a      	str	r2, [r3, #32]
 800215c:	e01c      	b.n	8002198 <HAL_RCC_OscConfig+0x3a4>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b05      	cmp	r3, #5
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0x38c>
 8002166:	4bc2      	ldr	r3, [pc, #776]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002168:	6a1a      	ldr	r2, [r3, #32]
 800216a:	4bc1      	ldr	r3, [pc, #772]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 800216c:	2104      	movs	r1, #4
 800216e:	430a      	orrs	r2, r1
 8002170:	621a      	str	r2, [r3, #32]
 8002172:	4bbf      	ldr	r3, [pc, #764]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002174:	6a1a      	ldr	r2, [r3, #32]
 8002176:	4bbe      	ldr	r3, [pc, #760]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002178:	2101      	movs	r1, #1
 800217a:	430a      	orrs	r2, r1
 800217c:	621a      	str	r2, [r3, #32]
 800217e:	e00b      	b.n	8002198 <HAL_RCC_OscConfig+0x3a4>
 8002180:	4bbb      	ldr	r3, [pc, #748]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002182:	6a1a      	ldr	r2, [r3, #32]
 8002184:	4bba      	ldr	r3, [pc, #744]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002186:	2101      	movs	r1, #1
 8002188:	438a      	bics	r2, r1
 800218a:	621a      	str	r2, [r3, #32]
 800218c:	4bb8      	ldr	r3, [pc, #736]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 800218e:	6a1a      	ldr	r2, [r3, #32]
 8002190:	4bb7      	ldr	r3, [pc, #732]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002192:	2104      	movs	r1, #4
 8002194:	438a      	bics	r2, r1
 8002196:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d014      	beq.n	80021ca <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a0:	f7fe fda0 	bl	8000ce4 <HAL_GetTick>
 80021a4:	0003      	movs	r3, r0
 80021a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a8:	e009      	b.n	80021be <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021aa:	f7fe fd9b 	bl	8000ce4 <HAL_GetTick>
 80021ae:	0002      	movs	r2, r0
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	4aaf      	ldr	r2, [pc, #700]	; (8002474 <HAL_RCC_OscConfig+0x680>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e19a      	b.n	80024f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021be:	4bac      	ldr	r3, [pc, #688]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	2202      	movs	r2, #2
 80021c4:	4013      	ands	r3, r2
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x3b6>
 80021c8:	e013      	b.n	80021f2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ca:	f7fe fd8b 	bl	8000ce4 <HAL_GetTick>
 80021ce:	0003      	movs	r3, r0
 80021d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d2:	e009      	b.n	80021e8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d4:	f7fe fd86 	bl	8000ce4 <HAL_GetTick>
 80021d8:	0002      	movs	r2, r0
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	4aa5      	ldr	r2, [pc, #660]	; (8002474 <HAL_RCC_OscConfig+0x680>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e185      	b.n	80024f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e8:	4ba1      	ldr	r3, [pc, #644]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	2202      	movs	r2, #2
 80021ee:	4013      	ands	r3, r2
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021f2:	231f      	movs	r3, #31
 80021f4:	18fb      	adds	r3, r7, r3
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fc:	4b9c      	ldr	r3, [pc, #624]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 80021fe:	69da      	ldr	r2, [r3, #28]
 8002200:	4b9b      	ldr	r3, [pc, #620]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002202:	499d      	ldr	r1, [pc, #628]	; (8002478 <HAL_RCC_OscConfig+0x684>)
 8002204:	400a      	ands	r2, r1
 8002206:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2210      	movs	r2, #16
 800220e:	4013      	ands	r3, r2
 8002210:	d063      	beq.n	80022da <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d12a      	bne.n	8002270 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800221a:	4b95      	ldr	r3, [pc, #596]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 800221c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800221e:	4b94      	ldr	r3, [pc, #592]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002220:	2104      	movs	r1, #4
 8002222:	430a      	orrs	r2, r1
 8002224:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002226:	4b92      	ldr	r3, [pc, #584]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800222a:	4b91      	ldr	r3, [pc, #580]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 800222c:	2101      	movs	r1, #1
 800222e:	430a      	orrs	r2, r1
 8002230:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002232:	f7fe fd57 	bl	8000ce4 <HAL_GetTick>
 8002236:	0003      	movs	r3, r0
 8002238:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800223c:	f7fe fd52 	bl	8000ce4 <HAL_GetTick>
 8002240:	0002      	movs	r2, r0
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e152      	b.n	80024f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800224e:	4b88      	ldr	r3, [pc, #544]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002252:	2202      	movs	r2, #2
 8002254:	4013      	ands	r3, r2
 8002256:	d0f1      	beq.n	800223c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002258:	4b85      	ldr	r3, [pc, #532]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 800225a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225c:	22f8      	movs	r2, #248	; 0xf8
 800225e:	4393      	bics	r3, r2
 8002260:	0019      	movs	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	00da      	lsls	r2, r3, #3
 8002268:	4b81      	ldr	r3, [pc, #516]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 800226a:	430a      	orrs	r2, r1
 800226c:	635a      	str	r2, [r3, #52]	; 0x34
 800226e:	e034      	b.n	80022da <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	3305      	adds	r3, #5
 8002276:	d111      	bne.n	800229c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002278:	4b7d      	ldr	r3, [pc, #500]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 800227a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800227c:	4b7c      	ldr	r3, [pc, #496]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 800227e:	2104      	movs	r1, #4
 8002280:	438a      	bics	r2, r1
 8002282:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002284:	4b7a      	ldr	r3, [pc, #488]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002288:	22f8      	movs	r2, #248	; 0xf8
 800228a:	4393      	bics	r3, r2
 800228c:	0019      	movs	r1, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	00da      	lsls	r2, r3, #3
 8002294:	4b76      	ldr	r3, [pc, #472]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002296:	430a      	orrs	r2, r1
 8002298:	635a      	str	r2, [r3, #52]	; 0x34
 800229a:	e01e      	b.n	80022da <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800229c:	4b74      	ldr	r3, [pc, #464]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 800229e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a0:	4b73      	ldr	r3, [pc, #460]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 80022a2:	2104      	movs	r1, #4
 80022a4:	430a      	orrs	r2, r1
 80022a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80022a8:	4b71      	ldr	r3, [pc, #452]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 80022aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ac:	4b70      	ldr	r3, [pc, #448]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 80022ae:	2101      	movs	r1, #1
 80022b0:	438a      	bics	r2, r1
 80022b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b4:	f7fe fd16 	bl	8000ce4 <HAL_GetTick>
 80022b8:	0003      	movs	r3, r0
 80022ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80022be:	f7fe fd11 	bl	8000ce4 <HAL_GetTick>
 80022c2:	0002      	movs	r2, r0
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e111      	b.n	80024f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022d0:	4b67      	ldr	r3, [pc, #412]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 80022d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d4:	2202      	movs	r2, #2
 80022d6:	4013      	ands	r3, r2
 80022d8:	d1f1      	bne.n	80022be <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2220      	movs	r2, #32
 80022e0:	4013      	ands	r3, r2
 80022e2:	d05c      	beq.n	800239e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80022e4:	4b62      	ldr	r3, [pc, #392]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	220c      	movs	r2, #12
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b0c      	cmp	r3, #12
 80022ee:	d00e      	beq.n	800230e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80022f0:	4b5f      	ldr	r3, [pc, #380]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	220c      	movs	r2, #12
 80022f6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d114      	bne.n	8002326 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80022fc:	4b5c      	ldr	r3, [pc, #368]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	23c0      	movs	r3, #192	; 0xc0
 8002302:	025b      	lsls	r3, r3, #9
 8002304:	401a      	ands	r2, r3
 8002306:	23c0      	movs	r3, #192	; 0xc0
 8002308:	025b      	lsls	r3, r3, #9
 800230a:	429a      	cmp	r2, r3
 800230c:	d10b      	bne.n	8002326 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800230e:	4b58      	ldr	r3, [pc, #352]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	025b      	lsls	r3, r3, #9
 8002316:	4013      	ands	r3, r2
 8002318:	d040      	beq.n	800239c <HAL_RCC_OscConfig+0x5a8>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d03c      	beq.n	800239c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e0e6      	b.n	80024f4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d01b      	beq.n	8002366 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800232e:	4b50      	ldr	r3, [pc, #320]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002332:	4b4f      	ldr	r3, [pc, #316]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002334:	2180      	movs	r1, #128	; 0x80
 8002336:	0249      	lsls	r1, r1, #9
 8002338:	430a      	orrs	r2, r1
 800233a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233c:	f7fe fcd2 	bl	8000ce4 <HAL_GetTick>
 8002340:	0003      	movs	r3, r0
 8002342:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002346:	f7fe fccd 	bl	8000ce4 <HAL_GetTick>
 800234a:	0002      	movs	r2, r0
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e0cd      	b.n	80024f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002358:	4b45      	ldr	r3, [pc, #276]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 800235a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	025b      	lsls	r3, r3, #9
 8002360:	4013      	ands	r3, r2
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x552>
 8002364:	e01b      	b.n	800239e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002366:	4b42      	ldr	r3, [pc, #264]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800236a:	4b41      	ldr	r3, [pc, #260]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 800236c:	4943      	ldr	r1, [pc, #268]	; (800247c <HAL_RCC_OscConfig+0x688>)
 800236e:	400a      	ands	r2, r1
 8002370:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002372:	f7fe fcb7 	bl	8000ce4 <HAL_GetTick>
 8002376:	0003      	movs	r3, r0
 8002378:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800237c:	f7fe fcb2 	bl	8000ce4 <HAL_GetTick>
 8002380:	0002      	movs	r2, r0
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e0b2      	b.n	80024f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800238e:	4b38      	ldr	r3, [pc, #224]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	025b      	lsls	r3, r3, #9
 8002396:	4013      	ands	r3, r2
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x588>
 800239a:	e000      	b.n	800239e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800239c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d100      	bne.n	80023a8 <HAL_RCC_OscConfig+0x5b4>
 80023a6:	e0a4      	b.n	80024f2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023a8:	4b31      	ldr	r3, [pc, #196]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	220c      	movs	r2, #12
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d100      	bne.n	80023b6 <HAL_RCC_OscConfig+0x5c2>
 80023b4:	e078      	b.n	80024a8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d14c      	bne.n	8002458 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023be:	4b2c      	ldr	r3, [pc, #176]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 80023c4:	492e      	ldr	r1, [pc, #184]	; (8002480 <HAL_RCC_OscConfig+0x68c>)
 80023c6:	400a      	ands	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7fe fc8b 	bl	8000ce4 <HAL_GetTick>
 80023ce:	0003      	movs	r3, r0
 80023d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d4:	f7fe fc86 	bl	8000ce4 <HAL_GetTick>
 80023d8:	0002      	movs	r2, r0
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e086      	b.n	80024f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e6:	4b22      	ldr	r3, [pc, #136]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	2380      	movs	r3, #128	; 0x80
 80023ec:	049b      	lsls	r3, r3, #18
 80023ee:	4013      	ands	r3, r2
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f2:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	220f      	movs	r2, #15
 80023f8:	4393      	bics	r3, r2
 80023fa:	0019      	movs	r1, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002400:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002402:	430a      	orrs	r2, r1
 8002404:	62da      	str	r2, [r3, #44]	; 0x2c
 8002406:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4a1e      	ldr	r2, [pc, #120]	; (8002484 <HAL_RCC_OscConfig+0x690>)
 800240c:	4013      	ands	r3, r2
 800240e:	0019      	movs	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	431a      	orrs	r2, r3
 800241a:	4b15      	ldr	r3, [pc, #84]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 800241c:	430a      	orrs	r2, r1
 800241e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002420:	4b13      	ldr	r3, [pc, #76]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 8002426:	2180      	movs	r1, #128	; 0x80
 8002428:	0449      	lsls	r1, r1, #17
 800242a:	430a      	orrs	r2, r1
 800242c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242e:	f7fe fc59 	bl	8000ce4 <HAL_GetTick>
 8002432:	0003      	movs	r3, r0
 8002434:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002438:	f7fe fc54 	bl	8000ce4 <HAL_GetTick>
 800243c:	0002      	movs	r2, r0
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e054      	b.n	80024f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	049b      	lsls	r3, r3, #18
 8002452:	4013      	ands	r3, r2
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x644>
 8002456:	e04c      	b.n	80024f2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <HAL_RCC_OscConfig+0x67c>)
 800245e:	4908      	ldr	r1, [pc, #32]	; (8002480 <HAL_RCC_OscConfig+0x68c>)
 8002460:	400a      	ands	r2, r1
 8002462:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7fe fc3e 	bl	8000ce4 <HAL_GetTick>
 8002468:	0003      	movs	r3, r0
 800246a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246c:	e015      	b.n	800249a <HAL_RCC_OscConfig+0x6a6>
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	40021000 	.word	0x40021000
 8002474:	00001388 	.word	0x00001388
 8002478:	efffffff 	.word	0xefffffff
 800247c:	fffeffff 	.word	0xfffeffff
 8002480:	feffffff 	.word	0xfeffffff
 8002484:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002488:	f7fe fc2c 	bl	8000ce4 <HAL_GetTick>
 800248c:	0002      	movs	r2, r0
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e02c      	b.n	80024f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249a:	4b18      	ldr	r3, [pc, #96]	; (80024fc <HAL_RCC_OscConfig+0x708>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	049b      	lsls	r3, r3, #18
 80024a2:	4013      	ands	r3, r2
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x694>
 80024a6:	e024      	b.n	80024f2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e01f      	b.n	80024f4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <HAL_RCC_OscConfig+0x708>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_RCC_OscConfig+0x708>)
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024be:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	23c0      	movs	r3, #192	; 0xc0
 80024c4:	025b      	lsls	r3, r3, #9
 80024c6:	401a      	ands	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d10e      	bne.n	80024ee <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	220f      	movs	r2, #15
 80024d4:	401a      	ands	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	429a      	cmp	r2, r3
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	23f0      	movs	r3, #240	; 0xf0
 80024e2:	039b      	lsls	r3, r3, #14
 80024e4:	401a      	ands	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d001      	beq.n	80024f2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	0018      	movs	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b008      	add	sp, #32
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000

08002500 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0bf      	b.n	8002694 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002514:	4b61      	ldr	r3, [pc, #388]	; (800269c <HAL_RCC_ClockConfig+0x19c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2201      	movs	r2, #1
 800251a:	4013      	ands	r3, r2
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d911      	bls.n	8002546 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002522:	4b5e      	ldr	r3, [pc, #376]	; (800269c <HAL_RCC_ClockConfig+0x19c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2201      	movs	r2, #1
 8002528:	4393      	bics	r3, r2
 800252a:	0019      	movs	r1, r3
 800252c:	4b5b      	ldr	r3, [pc, #364]	; (800269c <HAL_RCC_ClockConfig+0x19c>)
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002534:	4b59      	ldr	r3, [pc, #356]	; (800269c <HAL_RCC_ClockConfig+0x19c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2201      	movs	r2, #1
 800253a:	4013      	ands	r3, r2
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d001      	beq.n	8002546 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e0a6      	b.n	8002694 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2202      	movs	r2, #2
 800254c:	4013      	ands	r3, r2
 800254e:	d015      	beq.n	800257c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2204      	movs	r2, #4
 8002556:	4013      	ands	r3, r2
 8002558:	d006      	beq.n	8002568 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800255a:	4b51      	ldr	r3, [pc, #324]	; (80026a0 <HAL_RCC_ClockConfig+0x1a0>)
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	4b50      	ldr	r3, [pc, #320]	; (80026a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002560:	21e0      	movs	r1, #224	; 0xe0
 8002562:	00c9      	lsls	r1, r1, #3
 8002564:	430a      	orrs	r2, r1
 8002566:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002568:	4b4d      	ldr	r3, [pc, #308]	; (80026a0 <HAL_RCC_ClockConfig+0x1a0>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	22f0      	movs	r2, #240	; 0xf0
 800256e:	4393      	bics	r3, r2
 8002570:	0019      	movs	r1, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002578:	430a      	orrs	r2, r1
 800257a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2201      	movs	r2, #1
 8002582:	4013      	ands	r3, r2
 8002584:	d04c      	beq.n	8002620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	4b44      	ldr	r3, [pc, #272]	; (80026a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	029b      	lsls	r3, r3, #10
 8002596:	4013      	ands	r3, r2
 8002598:	d120      	bne.n	80025dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e07a      	b.n	8002694 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d107      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a6:	4b3e      	ldr	r3, [pc, #248]	; (80026a0 <HAL_RCC_ClockConfig+0x1a0>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	049b      	lsls	r3, r3, #18
 80025ae:	4013      	ands	r3, r2
 80025b0:	d114      	bne.n	80025dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e06e      	b.n	8002694 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d107      	bne.n	80025ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80025be:	4b38      	ldr	r3, [pc, #224]	; (80026a0 <HAL_RCC_ClockConfig+0x1a0>)
 80025c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	025b      	lsls	r3, r3, #9
 80025c6:	4013      	ands	r3, r2
 80025c8:	d108      	bne.n	80025dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e062      	b.n	8002694 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ce:	4b34      	ldr	r3, [pc, #208]	; (80026a0 <HAL_RCC_ClockConfig+0x1a0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2202      	movs	r2, #2
 80025d4:	4013      	ands	r3, r2
 80025d6:	d101      	bne.n	80025dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e05b      	b.n	8002694 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025dc:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <HAL_RCC_ClockConfig+0x1a0>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2203      	movs	r2, #3
 80025e2:	4393      	bics	r3, r2
 80025e4:	0019      	movs	r1, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <HAL_RCC_ClockConfig+0x1a0>)
 80025ec:	430a      	orrs	r2, r1
 80025ee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f0:	f7fe fb78 	bl	8000ce4 <HAL_GetTick>
 80025f4:	0003      	movs	r3, r0
 80025f6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f8:	e009      	b.n	800260e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fa:	f7fe fb73 	bl	8000ce4 <HAL_GetTick>
 80025fe:	0002      	movs	r2, r0
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	4a27      	ldr	r2, [pc, #156]	; (80026a4 <HAL_RCC_ClockConfig+0x1a4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e042      	b.n	8002694 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	220c      	movs	r2, #12
 8002614:	401a      	ands	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	429a      	cmp	r2, r3
 800261e:	d1ec      	bne.n	80025fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002620:	4b1e      	ldr	r3, [pc, #120]	; (800269c <HAL_RCC_ClockConfig+0x19c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2201      	movs	r2, #1
 8002626:	4013      	ands	r3, r2
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d211      	bcs.n	8002652 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	4b1b      	ldr	r3, [pc, #108]	; (800269c <HAL_RCC_ClockConfig+0x19c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2201      	movs	r2, #1
 8002634:	4393      	bics	r3, r2
 8002636:	0019      	movs	r1, r3
 8002638:	4b18      	ldr	r3, [pc, #96]	; (800269c <HAL_RCC_ClockConfig+0x19c>)
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002640:	4b16      	ldr	r3, [pc, #88]	; (800269c <HAL_RCC_ClockConfig+0x19c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2201      	movs	r2, #1
 8002646:	4013      	ands	r3, r2
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d001      	beq.n	8002652 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e020      	b.n	8002694 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2204      	movs	r2, #4
 8002658:	4013      	ands	r3, r2
 800265a:	d009      	beq.n	8002670 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800265c:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <HAL_RCC_ClockConfig+0x1a0>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <HAL_RCC_ClockConfig+0x1a8>)
 8002662:	4013      	ands	r3, r2
 8002664:	0019      	movs	r1, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <HAL_RCC_ClockConfig+0x1a0>)
 800266c:	430a      	orrs	r2, r1
 800266e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002670:	f000 f820 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 8002674:	0001      	movs	r1, r0
 8002676:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	220f      	movs	r2, #15
 800267e:	4013      	ands	r3, r2
 8002680:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <HAL_RCC_ClockConfig+0x1ac>)
 8002682:	5cd3      	ldrb	r3, [r2, r3]
 8002684:	000a      	movs	r2, r1
 8002686:	40da      	lsrs	r2, r3
 8002688:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <HAL_RCC_ClockConfig+0x1b0>)
 800268a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800268c:	2000      	movs	r0, #0
 800268e:	f7fe fae3 	bl	8000c58 <HAL_InitTick>
  
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	0018      	movs	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	b004      	add	sp, #16
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40022000 	.word	0x40022000
 80026a0:	40021000 	.word	0x40021000
 80026a4:	00001388 	.word	0x00001388
 80026a8:	fffff8ff 	.word	0xfffff8ff
 80026ac:	08003f48 	.word	0x08003f48
 80026b0:	20000000 	.word	0x20000000

080026b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b4:	b590      	push	{r4, r7, lr}
 80026b6:	b08f      	sub	sp, #60	; 0x3c
 80026b8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80026ba:	2314      	movs	r3, #20
 80026bc:	18fb      	adds	r3, r7, r3
 80026be:	4a38      	ldr	r2, [pc, #224]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xec>)
 80026c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026c2:	c313      	stmia	r3!, {r0, r1, r4}
 80026c4:	6812      	ldr	r2, [r2, #0]
 80026c6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80026c8:	1d3b      	adds	r3, r7, #4
 80026ca:	4a36      	ldr	r2, [pc, #216]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xf0>)
 80026cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026ce:	c313      	stmia	r3!, {r0, r1, r4}
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d8:	2300      	movs	r3, #0
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
 80026dc:	2300      	movs	r3, #0
 80026de:	637b      	str	r3, [r7, #52]	; 0x34
 80026e0:	2300      	movs	r3, #0
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80026e8:	4b2f      	ldr	r3, [pc, #188]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	220c      	movs	r2, #12
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b0c      	cmp	r3, #12
 80026f6:	d047      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0xd4>
 80026f8:	d849      	bhi.n	800278e <HAL_RCC_GetSysClockFreq+0xda>
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d002      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x50>
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d003      	beq.n	800270a <HAL_RCC_GetSysClockFreq+0x56>
 8002702:	e044      	b.n	800278e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002704:	4b29      	ldr	r3, [pc, #164]	; (80027ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002706:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002708:	e044      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270c:	0c9b      	lsrs	r3, r3, #18
 800270e:	220f      	movs	r2, #15
 8002710:	4013      	ands	r3, r2
 8002712:	2214      	movs	r2, #20
 8002714:	18ba      	adds	r2, r7, r2
 8002716:	5cd3      	ldrb	r3, [r2, r3]
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800271a:	4b23      	ldr	r3, [pc, #140]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	220f      	movs	r2, #15
 8002720:	4013      	ands	r3, r2
 8002722:	1d3a      	adds	r2, r7, #4
 8002724:	5cd3      	ldrb	r3, [r2, r3]
 8002726:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800272a:	23c0      	movs	r3, #192	; 0xc0
 800272c:	025b      	lsls	r3, r3, #9
 800272e:	401a      	ands	r2, r3
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	025b      	lsls	r3, r3, #9
 8002734:	429a      	cmp	r2, r3
 8002736:	d109      	bne.n	800274c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800273a:	481c      	ldr	r0, [pc, #112]	; (80027ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800273c:	f7fd fce2 	bl	8000104 <__udivsi3>
 8002740:	0003      	movs	r3, r0
 8002742:	001a      	movs	r2, r3
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	4353      	muls	r3, r2
 8002748:	637b      	str	r3, [r7, #52]	; 0x34
 800274a:	e01a      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800274c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800274e:	23c0      	movs	r3, #192	; 0xc0
 8002750:	025b      	lsls	r3, r3, #9
 8002752:	401a      	ands	r2, r3
 8002754:	23c0      	movs	r3, #192	; 0xc0
 8002756:	025b      	lsls	r3, r3, #9
 8002758:	429a      	cmp	r2, r3
 800275a:	d109      	bne.n	8002770 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800275c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800275e:	4814      	ldr	r0, [pc, #80]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002760:	f7fd fcd0 	bl	8000104 <__udivsi3>
 8002764:	0003      	movs	r3, r0
 8002766:	001a      	movs	r2, r3
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	4353      	muls	r3, r2
 800276c:	637b      	str	r3, [r7, #52]	; 0x34
 800276e:	e008      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002772:	480e      	ldr	r0, [pc, #56]	; (80027ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002774:	f7fd fcc6 	bl	8000104 <__udivsi3>
 8002778:	0003      	movs	r3, r0
 800277a:	001a      	movs	r2, r3
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	4353      	muls	r3, r2
 8002780:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002784:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002786:	e005      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800278c:	e002      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800278e:	4b07      	ldr	r3, [pc, #28]	; (80027ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002790:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002792:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002796:	0018      	movs	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	b00f      	add	sp, #60	; 0x3c
 800279c:	bd90      	pop	{r4, r7, pc}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	08003f28 	.word	0x08003f28
 80027a4:	08003f38 	.word	0x08003f38
 80027a8:	40021000 	.word	0x40021000
 80027ac:	007a1200 	.word	0x007a1200
 80027b0:	02dc6c00 	.word	0x02dc6c00

080027b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b8:	4b02      	ldr	r3, [pc, #8]	; (80027c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	0018      	movs	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	20000000 	.word	0x20000000

080027c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80027cc:	f7ff fff2 	bl	80027b4 <HAL_RCC_GetHCLKFreq>
 80027d0:	0001      	movs	r1, r0
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	0a1b      	lsrs	r3, r3, #8
 80027d8:	2207      	movs	r2, #7
 80027da:	4013      	ands	r3, r2
 80027dc:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027de:	5cd3      	ldrb	r3, [r2, r3]
 80027e0:	40d9      	lsrs	r1, r3
 80027e2:	000b      	movs	r3, r1
}    
 80027e4:	0018      	movs	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	40021000 	.word	0x40021000
 80027f0:	08003f58 	.word	0x08003f58

080027f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	025b      	lsls	r3, r3, #9
 800280c:	4013      	ands	r3, r2
 800280e:	d100      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002810:	e08e      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002812:	2017      	movs	r0, #23
 8002814:	183b      	adds	r3, r7, r0
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281a:	4b6e      	ldr	r3, [pc, #440]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800281c:	69da      	ldr	r2, [r3, #28]
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	055b      	lsls	r3, r3, #21
 8002822:	4013      	ands	r3, r2
 8002824:	d110      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002826:	4b6b      	ldr	r3, [pc, #428]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002828:	69da      	ldr	r2, [r3, #28]
 800282a:	4b6a      	ldr	r3, [pc, #424]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800282c:	2180      	movs	r1, #128	; 0x80
 800282e:	0549      	lsls	r1, r1, #21
 8002830:	430a      	orrs	r2, r1
 8002832:	61da      	str	r2, [r3, #28]
 8002834:	4b67      	ldr	r3, [pc, #412]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002836:	69da      	ldr	r2, [r3, #28]
 8002838:	2380      	movs	r3, #128	; 0x80
 800283a:	055b      	lsls	r3, r3, #21
 800283c:	4013      	ands	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002842:	183b      	adds	r3, r7, r0
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002848:	4b63      	ldr	r3, [pc, #396]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	4013      	ands	r3, r2
 8002852:	d11a      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002854:	4b60      	ldr	r3, [pc, #384]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b5f      	ldr	r3, [pc, #380]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800285a:	2180      	movs	r1, #128	; 0x80
 800285c:	0049      	lsls	r1, r1, #1
 800285e:	430a      	orrs	r2, r1
 8002860:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002862:	f7fe fa3f 	bl	8000ce4 <HAL_GetTick>
 8002866:	0003      	movs	r3, r0
 8002868:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286a:	e008      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800286c:	f7fe fa3a 	bl	8000ce4 <HAL_GetTick>
 8002870:	0002      	movs	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b64      	cmp	r3, #100	; 0x64
 8002878:	d901      	bls.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e0a6      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287e:	4b56      	ldr	r3, [pc, #344]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4013      	ands	r3, r2
 8002888:	d0f0      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800288a:	4b52      	ldr	r3, [pc, #328]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800288c:	6a1a      	ldr	r2, [r3, #32]
 800288e:	23c0      	movs	r3, #192	; 0xc0
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4013      	ands	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d034      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	23c0      	movs	r3, #192	; 0xc0
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4013      	ands	r3, r2
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d02c      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028ac:	4b49      	ldr	r3, [pc, #292]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	4a4a      	ldr	r2, [pc, #296]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028b6:	4b47      	ldr	r3, [pc, #284]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028b8:	6a1a      	ldr	r2, [r3, #32]
 80028ba:	4b46      	ldr	r3, [pc, #280]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028bc:	2180      	movs	r1, #128	; 0x80
 80028be:	0249      	lsls	r1, r1, #9
 80028c0:	430a      	orrs	r2, r1
 80028c2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028c4:	4b43      	ldr	r3, [pc, #268]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028c6:	6a1a      	ldr	r2, [r3, #32]
 80028c8:	4b42      	ldr	r3, [pc, #264]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028ca:	4945      	ldr	r1, [pc, #276]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80028cc:	400a      	ands	r2, r1
 80028ce:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028d0:	4b40      	ldr	r3, [pc, #256]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2201      	movs	r2, #1
 80028da:	4013      	ands	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7fe fa01 	bl	8000ce4 <HAL_GetTick>
 80028e2:	0003      	movs	r3, r0
 80028e4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e6:	e009      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e8:	f7fe f9fc 	bl	8000ce4 <HAL_GetTick>
 80028ec:	0002      	movs	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	4a3c      	ldr	r2, [pc, #240]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d901      	bls.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e067      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fc:	4b35      	ldr	r3, [pc, #212]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	2202      	movs	r2, #2
 8002902:	4013      	ands	r3, r2
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002906:	4b33      	ldr	r3, [pc, #204]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	4a34      	ldr	r2, [pc, #208]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800290c:	4013      	ands	r3, r2
 800290e:	0019      	movs	r1, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	4b2f      	ldr	r3, [pc, #188]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002916:	430a      	orrs	r2, r1
 8002918:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800291a:	2317      	movs	r3, #23
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d105      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002924:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002926:	69da      	ldr	r2, [r3, #28]
 8002928:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800292a:	492f      	ldr	r1, [pc, #188]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800292c:	400a      	ands	r2, r1
 800292e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2201      	movs	r2, #1
 8002936:	4013      	ands	r3, r2
 8002938:	d009      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800293a:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	2203      	movs	r2, #3
 8002940:	4393      	bics	r3, r2
 8002942:	0019      	movs	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800294a:	430a      	orrs	r2, r1
 800294c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2202      	movs	r2, #2
 8002954:	4013      	ands	r3, r2
 8002956:	d009      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002958:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	4a23      	ldr	r2, [pc, #140]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800295e:	4013      	ands	r3, r2
 8002960:	0019      	movs	r1, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002968:	430a      	orrs	r2, r1
 800296a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	2380      	movs	r3, #128	; 0x80
 8002972:	02db      	lsls	r3, r3, #11
 8002974:	4013      	ands	r3, r2
 8002976:	d009      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002978:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	4a1c      	ldr	r2, [pc, #112]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800297e:	4013      	ands	r3, r2
 8002980:	0019      	movs	r1, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691a      	ldr	r2, [r3, #16]
 8002986:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002988:	430a      	orrs	r2, r1
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2220      	movs	r2, #32
 8002992:	4013      	ands	r3, r2
 8002994:	d009      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002996:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	2210      	movs	r2, #16
 800299c:	4393      	bics	r3, r2
 800299e:	0019      	movs	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029a6:	430a      	orrs	r2, r1
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4013      	ands	r3, r2
 80029b4:	d009      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029b6:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	2240      	movs	r2, #64	; 0x40
 80029bc:	4393      	bics	r3, r2
 80029be:	0019      	movs	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699a      	ldr	r2, [r3, #24]
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029c6:	430a      	orrs	r2, r1
 80029c8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	0018      	movs	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b006      	add	sp, #24
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40007000 	.word	0x40007000
 80029dc:	fffffcff 	.word	0xfffffcff
 80029e0:	fffeffff 	.word	0xfffeffff
 80029e4:	00001388 	.word	0x00001388
 80029e8:	efffffff 	.word	0xefffffff
 80029ec:	fffcffff 	.word	0xfffcffff
 80029f0:	fff3ffff 	.word	0xfff3ffff

080029f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e042      	b.n	8002a8c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	223d      	movs	r2, #61	; 0x3d
 8002a0a:	5c9b      	ldrb	r3, [r3, r2]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d107      	bne.n	8002a22 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	223c      	movs	r2, #60	; 0x3c
 8002a16:	2100      	movs	r1, #0
 8002a18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7fd ffa3 	bl	8000968 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	223d      	movs	r2, #61	; 0x3d
 8002a26:	2102      	movs	r1, #2
 8002a28:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3304      	adds	r3, #4
 8002a32:	0019      	movs	r1, r3
 8002a34:	0010      	movs	r0, r2
 8002a36:	f000 f901 	bl	8002c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2246      	movs	r2, #70	; 0x46
 8002a3e:	2101      	movs	r1, #1
 8002a40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	223e      	movs	r2, #62	; 0x3e
 8002a46:	2101      	movs	r1, #1
 8002a48:	5499      	strb	r1, [r3, r2]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	223f      	movs	r2, #63	; 0x3f
 8002a4e:	2101      	movs	r1, #1
 8002a50:	5499      	strb	r1, [r3, r2]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2240      	movs	r2, #64	; 0x40
 8002a56:	2101      	movs	r1, #1
 8002a58:	5499      	strb	r1, [r3, r2]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2241      	movs	r2, #65	; 0x41
 8002a5e:	2101      	movs	r1, #1
 8002a60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2242      	movs	r2, #66	; 0x42
 8002a66:	2101      	movs	r1, #1
 8002a68:	5499      	strb	r1, [r3, r2]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2243      	movs	r2, #67	; 0x43
 8002a6e:	2101      	movs	r1, #1
 8002a70:	5499      	strb	r1, [r3, r2]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2244      	movs	r2, #68	; 0x44
 8002a76:	2101      	movs	r1, #1
 8002a78:	5499      	strb	r1, [r3, r2]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2245      	movs	r2, #69	; 0x45
 8002a7e:	2101      	movs	r1, #1
 8002a80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	223d      	movs	r2, #61	; 0x3d
 8002a86:	2101      	movs	r1, #1
 8002a88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b002      	add	sp, #8
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9e:	230f      	movs	r3, #15
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	223c      	movs	r2, #60	; 0x3c
 8002aaa:	5c9b      	ldrb	r3, [r3, r2]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_TIM_ConfigClockSource+0x20>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e0bc      	b.n	8002c2e <HAL_TIM_ConfigClockSource+0x19a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	223c      	movs	r2, #60	; 0x3c
 8002ab8:	2101      	movs	r1, #1
 8002aba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	223d      	movs	r2, #61	; 0x3d
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2277      	movs	r2, #119	; 0x77
 8002ad0:	4393      	bics	r3, r2
 8002ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4a58      	ldr	r2, [pc, #352]	; (8002c38 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2280      	movs	r2, #128	; 0x80
 8002aea:	0192      	lsls	r2, r2, #6
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d040      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0xde>
 8002af0:	2280      	movs	r2, #128	; 0x80
 8002af2:	0192      	lsls	r2, r2, #6
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d900      	bls.n	8002afa <HAL_TIM_ConfigClockSource+0x66>
 8002af8:	e088      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x178>
 8002afa:	2280      	movs	r2, #128	; 0x80
 8002afc:	0152      	lsls	r2, r2, #5
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d100      	bne.n	8002b04 <HAL_TIM_ConfigClockSource+0x70>
 8002b02:	e088      	b.n	8002c16 <HAL_TIM_ConfigClockSource+0x182>
 8002b04:	2280      	movs	r2, #128	; 0x80
 8002b06:	0152      	lsls	r2, r2, #5
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d900      	bls.n	8002b0e <HAL_TIM_ConfigClockSource+0x7a>
 8002b0c:	e07e      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x178>
 8002b0e:	2b70      	cmp	r3, #112	; 0x70
 8002b10:	d018      	beq.n	8002b44 <HAL_TIM_ConfigClockSource+0xb0>
 8002b12:	d900      	bls.n	8002b16 <HAL_TIM_ConfigClockSource+0x82>
 8002b14:	e07a      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x178>
 8002b16:	2b60      	cmp	r3, #96	; 0x60
 8002b18:	d04f      	beq.n	8002bba <HAL_TIM_ConfigClockSource+0x126>
 8002b1a:	d900      	bls.n	8002b1e <HAL_TIM_ConfigClockSource+0x8a>
 8002b1c:	e076      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x178>
 8002b1e:	2b50      	cmp	r3, #80	; 0x50
 8002b20:	d03b      	beq.n	8002b9a <HAL_TIM_ConfigClockSource+0x106>
 8002b22:	d900      	bls.n	8002b26 <HAL_TIM_ConfigClockSource+0x92>
 8002b24:	e072      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x178>
 8002b26:	2b40      	cmp	r3, #64	; 0x40
 8002b28:	d057      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0x146>
 8002b2a:	d900      	bls.n	8002b2e <HAL_TIM_ConfigClockSource+0x9a>
 8002b2c:	e06e      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x178>
 8002b2e:	2b30      	cmp	r3, #48	; 0x30
 8002b30:	d063      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0x166>
 8002b32:	d86b      	bhi.n	8002c0c <HAL_TIM_ConfigClockSource+0x178>
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d060      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0x166>
 8002b38:	d868      	bhi.n	8002c0c <HAL_TIM_ConfigClockSource+0x178>
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d05d      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0x166>
 8002b3e:	2b10      	cmp	r3, #16
 8002b40:	d05b      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0x166>
 8002b42:	e063      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	6899      	ldr	r1, [r3, #8]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f000 f96c 	bl	8002e30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2277      	movs	r2, #119	; 0x77
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	609a      	str	r2, [r3, #8]
      break;
 8002b70:	e052      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6899      	ldr	r1, [r3, #8]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f000 f955 	bl	8002e30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2180      	movs	r1, #128	; 0x80
 8002b92:	01c9      	lsls	r1, r1, #7
 8002b94:	430a      	orrs	r2, r1
 8002b96:	609a      	str	r2, [r3, #8]
      break;
 8002b98:	e03e      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6859      	ldr	r1, [r3, #4]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	001a      	movs	r2, r3
 8002ba8:	f000 f8c8 	bl	8002d3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2150      	movs	r1, #80	; 0x50
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f000 f922 	bl	8002dfc <TIM_ITRx_SetConfig>
      break;
 8002bb8:	e02e      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6859      	ldr	r1, [r3, #4]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	001a      	movs	r2, r3
 8002bc8:	f000 f8e6 	bl	8002d98 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2160      	movs	r1, #96	; 0x60
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f000 f912 	bl	8002dfc <TIM_ITRx_SetConfig>
      break;
 8002bd8:	e01e      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	6859      	ldr	r1, [r3, #4]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	001a      	movs	r2, r3
 8002be8:	f000 f8a8 	bl	8002d3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2140      	movs	r1, #64	; 0x40
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f000 f902 	bl	8002dfc <TIM_ITRx_SetConfig>
      break;
 8002bf8:	e00e      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	0019      	movs	r1, r3
 8002c04:	0010      	movs	r0, r2
 8002c06:	f000 f8f9 	bl	8002dfc <TIM_ITRx_SetConfig>
      break;
 8002c0a:	e005      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002c0c:	230f      	movs	r3, #15
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
      break;
 8002c14:	e000      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002c16:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	223d      	movs	r2, #61	; 0x3d
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	223c      	movs	r2, #60	; 0x3c
 8002c24:	2100      	movs	r1, #0
 8002c26:	5499      	strb	r1, [r3, r2]

  return status;
 8002c28:	230f      	movs	r3, #15
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	781b      	ldrb	r3, [r3, #0]
}
 8002c2e:	0018      	movs	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b004      	add	sp, #16
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	ffff00ff 	.word	0xffff00ff

08002c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a34      	ldr	r2, [pc, #208]	; (8002d20 <TIM_Base_SetConfig+0xe4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d008      	beq.n	8002c66 <TIM_Base_SetConfig+0x2a>
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	2380      	movs	r3, #128	; 0x80
 8002c58:	05db      	lsls	r3, r3, #23
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d003      	beq.n	8002c66 <TIM_Base_SetConfig+0x2a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a30      	ldr	r2, [pc, #192]	; (8002d24 <TIM_Base_SetConfig+0xe8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d108      	bne.n	8002c78 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2270      	movs	r2, #112	; 0x70
 8002c6a:	4393      	bics	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a29      	ldr	r2, [pc, #164]	; (8002d20 <TIM_Base_SetConfig+0xe4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d018      	beq.n	8002cb2 <TIM_Base_SetConfig+0x76>
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	05db      	lsls	r3, r3, #23
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d013      	beq.n	8002cb2 <TIM_Base_SetConfig+0x76>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a25      	ldr	r2, [pc, #148]	; (8002d24 <TIM_Base_SetConfig+0xe8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00f      	beq.n	8002cb2 <TIM_Base_SetConfig+0x76>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a24      	ldr	r2, [pc, #144]	; (8002d28 <TIM_Base_SetConfig+0xec>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00b      	beq.n	8002cb2 <TIM_Base_SetConfig+0x76>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a23      	ldr	r2, [pc, #140]	; (8002d2c <TIM_Base_SetConfig+0xf0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d007      	beq.n	8002cb2 <TIM_Base_SetConfig+0x76>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a22      	ldr	r2, [pc, #136]	; (8002d30 <TIM_Base_SetConfig+0xf4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d003      	beq.n	8002cb2 <TIM_Base_SetConfig+0x76>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a21      	ldr	r2, [pc, #132]	; (8002d34 <TIM_Base_SetConfig+0xf8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d108      	bne.n	8002cc4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4a20      	ldr	r2, [pc, #128]	; (8002d38 <TIM_Base_SetConfig+0xfc>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2280      	movs	r2, #128	; 0x80
 8002cc8:	4393      	bics	r3, r2
 8002cca:	001a      	movs	r2, r3
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a0c      	ldr	r2, [pc, #48]	; (8002d20 <TIM_Base_SetConfig+0xe4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00b      	beq.n	8002d0a <TIM_Base_SetConfig+0xce>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a0d      	ldr	r2, [pc, #52]	; (8002d2c <TIM_Base_SetConfig+0xf0>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d007      	beq.n	8002d0a <TIM_Base_SetConfig+0xce>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a0c      	ldr	r2, [pc, #48]	; (8002d30 <TIM_Base_SetConfig+0xf4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d003      	beq.n	8002d0a <TIM_Base_SetConfig+0xce>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a0b      	ldr	r2, [pc, #44]	; (8002d34 <TIM_Base_SetConfig+0xf8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d103      	bne.n	8002d12 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	615a      	str	r2, [r3, #20]
}
 8002d18:	46c0      	nop			; (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b004      	add	sp, #16
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	40000400 	.word	0x40000400
 8002d28:	40002000 	.word	0x40002000
 8002d2c:	40014000 	.word	0x40014000
 8002d30:	40014400 	.word	0x40014400
 8002d34:	40014800 	.word	0x40014800
 8002d38:	fffffcff 	.word	0xfffffcff

08002d3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	2201      	movs	r2, #1
 8002d54:	4393      	bics	r3, r2
 8002d56:	001a      	movs	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	22f0      	movs	r2, #240	; 0xf0
 8002d66:	4393      	bics	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	220a      	movs	r2, #10
 8002d78:	4393      	bics	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	621a      	str	r2, [r3, #32]
}
 8002d90:	46c0      	nop			; (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	b006      	add	sp, #24
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	2210      	movs	r2, #16
 8002daa:	4393      	bics	r3, r2
 8002dac:	001a      	movs	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	4a0d      	ldr	r2, [pc, #52]	; (8002df8 <TIM_TI2_ConfigInputStage+0x60>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	031b      	lsls	r3, r3, #12
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	22a0      	movs	r2, #160	; 0xa0
 8002dd4:	4393      	bics	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	621a      	str	r2, [r3, #32]
}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b006      	add	sp, #24
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	ffff0fff 	.word	0xffff0fff

08002dfc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2270      	movs	r2, #112	; 0x70
 8002e10:	4393      	bics	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	2207      	movs	r2, #7
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	609a      	str	r2, [r3, #8]
}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b004      	add	sp, #16
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	4a09      	ldr	r2, [pc, #36]	; (8002e6c <TIM_ETR_SetConfig+0x3c>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	021a      	lsls	r2, r3, #8
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	609a      	str	r2, [r3, #8]
}
 8002e64:	46c0      	nop			; (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b006      	add	sp, #24
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	ffff00ff 	.word	0xffff00ff

08002e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	223c      	movs	r2, #60	; 0x3c
 8002e7e:	5c9b      	ldrb	r3, [r3, r2]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e047      	b.n	8002f18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	223c      	movs	r2, #60	; 0x3c
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	223d      	movs	r2, #61	; 0x3d
 8002e94:	2102      	movs	r1, #2
 8002e96:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2270      	movs	r2, #112	; 0x70
 8002eac:	4393      	bics	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a16      	ldr	r2, [pc, #88]	; (8002f20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00f      	beq.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	2380      	movs	r3, #128	; 0x80
 8002ed2:	05db      	lsls	r3, r3, #23
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d009      	beq.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a11      	ldr	r2, [pc, #68]	; (8002f24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d004      	beq.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a10      	ldr	r2, [pc, #64]	; (8002f28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d10c      	bne.n	8002f06 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2280      	movs	r2, #128	; 0x80
 8002ef0:	4393      	bics	r3, r2
 8002ef2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	223d      	movs	r2, #61	; 0x3d
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	223c      	movs	r2, #60	; 0x3c
 8002f12:	2100      	movs	r1, #0
 8002f14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	0018      	movs	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b004      	add	sp, #16
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40012c00 	.word	0x40012c00
 8002f24:	40000400 	.word	0x40000400
 8002f28:	40014000 	.word	0x40014000

08002f2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e044      	b.n	8002fc8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d107      	bne.n	8002f56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2274      	movs	r2, #116	; 0x74
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	0018      	movs	r0, r3
 8002f52:	f7fd fd25 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2224      	movs	r2, #36	; 0x24
 8002f5a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2101      	movs	r1, #1
 8002f68:	438a      	bics	r2, r1
 8002f6a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f000 fb24 	bl	80035bc <UART_SetConfig>
 8002f74:	0003      	movs	r3, r0
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e024      	b.n	8002fc8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f000 fcff 	bl	800398c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	490d      	ldr	r1, [pc, #52]	; (8002fd0 <HAL_UART_Init+0xa4>)
 8002f9a:	400a      	ands	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	212a      	movs	r1, #42	; 0x2a
 8002faa:	438a      	bics	r2, r1
 8002fac:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f000 fd97 	bl	8003af4 <UART_CheckIdleState>
 8002fc6:	0003      	movs	r3, r0
}
 8002fc8:	0018      	movs	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b002      	add	sp, #8
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	ffffb7ff 	.word	0xffffb7ff

08002fd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b0ab      	sub	sp, #172	; 0xac
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	22a4      	movs	r2, #164	; 0xa4
 8002fe4:	18b9      	adds	r1, r7, r2
 8002fe6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	20a0      	movs	r0, #160	; 0xa0
 8002ff0:	1839      	adds	r1, r7, r0
 8002ff2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	219c      	movs	r1, #156	; 0x9c
 8002ffc:	1879      	adds	r1, r7, r1
 8002ffe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003000:	0011      	movs	r1, r2
 8003002:	18bb      	adds	r3, r7, r2
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a99      	ldr	r2, [pc, #612]	; (800326c <HAL_UART_IRQHandler+0x298>)
 8003008:	4013      	ands	r3, r2
 800300a:	2298      	movs	r2, #152	; 0x98
 800300c:	18bc      	adds	r4, r7, r2
 800300e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003010:	18bb      	adds	r3, r7, r2
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d114      	bne.n	8003042 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003018:	187b      	adds	r3, r7, r1
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2220      	movs	r2, #32
 800301e:	4013      	ands	r3, r2
 8003020:	d00f      	beq.n	8003042 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003022:	183b      	adds	r3, r7, r0
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2220      	movs	r2, #32
 8003028:	4013      	ands	r3, r2
 800302a:	d00a      	beq.n	8003042 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003030:	2b00      	cmp	r3, #0
 8003032:	d100      	bne.n	8003036 <HAL_UART_IRQHandler+0x62>
 8003034:	e296      	b.n	8003564 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	0010      	movs	r0, r2
 800303e:	4798      	blx	r3
      }
      return;
 8003040:	e290      	b.n	8003564 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003042:	2398      	movs	r3, #152	; 0x98
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d100      	bne.n	800304e <HAL_UART_IRQHandler+0x7a>
 800304c:	e114      	b.n	8003278 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800304e:	239c      	movs	r3, #156	; 0x9c
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2201      	movs	r2, #1
 8003056:	4013      	ands	r3, r2
 8003058:	d106      	bne.n	8003068 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800305a:	23a0      	movs	r3, #160	; 0xa0
 800305c:	18fb      	adds	r3, r7, r3
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a83      	ldr	r2, [pc, #524]	; (8003270 <HAL_UART_IRQHandler+0x29c>)
 8003062:	4013      	ands	r3, r2
 8003064:	d100      	bne.n	8003068 <HAL_UART_IRQHandler+0x94>
 8003066:	e107      	b.n	8003278 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003068:	23a4      	movs	r3, #164	; 0xa4
 800306a:	18fb      	adds	r3, r7, r3
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2201      	movs	r2, #1
 8003070:	4013      	ands	r3, r2
 8003072:	d012      	beq.n	800309a <HAL_UART_IRQHandler+0xc6>
 8003074:	23a0      	movs	r3, #160	; 0xa0
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	4013      	ands	r3, r2
 8003080:	d00b      	beq.n	800309a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2201      	movs	r2, #1
 8003088:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2280      	movs	r2, #128	; 0x80
 800308e:	589b      	ldr	r3, [r3, r2]
 8003090:	2201      	movs	r2, #1
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2180      	movs	r1, #128	; 0x80
 8003098:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800309a:	23a4      	movs	r3, #164	; 0xa4
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2202      	movs	r2, #2
 80030a2:	4013      	ands	r3, r2
 80030a4:	d011      	beq.n	80030ca <HAL_UART_IRQHandler+0xf6>
 80030a6:	239c      	movs	r3, #156	; 0x9c
 80030a8:	18fb      	adds	r3, r7, r3
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2201      	movs	r2, #1
 80030ae:	4013      	ands	r3, r2
 80030b0:	d00b      	beq.n	80030ca <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2202      	movs	r2, #2
 80030b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2280      	movs	r2, #128	; 0x80
 80030be:	589b      	ldr	r3, [r3, r2]
 80030c0:	2204      	movs	r2, #4
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2180      	movs	r1, #128	; 0x80
 80030c8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030ca:	23a4      	movs	r3, #164	; 0xa4
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2204      	movs	r2, #4
 80030d2:	4013      	ands	r3, r2
 80030d4:	d011      	beq.n	80030fa <HAL_UART_IRQHandler+0x126>
 80030d6:	239c      	movs	r3, #156	; 0x9c
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2201      	movs	r2, #1
 80030de:	4013      	ands	r3, r2
 80030e0:	d00b      	beq.n	80030fa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2204      	movs	r2, #4
 80030e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2280      	movs	r2, #128	; 0x80
 80030ee:	589b      	ldr	r3, [r3, r2]
 80030f0:	2202      	movs	r2, #2
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2180      	movs	r1, #128	; 0x80
 80030f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030fa:	23a4      	movs	r3, #164	; 0xa4
 80030fc:	18fb      	adds	r3, r7, r3
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2208      	movs	r2, #8
 8003102:	4013      	ands	r3, r2
 8003104:	d017      	beq.n	8003136 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003106:	23a0      	movs	r3, #160	; 0xa0
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2220      	movs	r2, #32
 800310e:	4013      	ands	r3, r2
 8003110:	d105      	bne.n	800311e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003112:	239c      	movs	r3, #156	; 0x9c
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2201      	movs	r2, #1
 800311a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800311c:	d00b      	beq.n	8003136 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2208      	movs	r2, #8
 8003124:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2280      	movs	r2, #128	; 0x80
 800312a:	589b      	ldr	r3, [r3, r2]
 800312c:	2208      	movs	r2, #8
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2180      	movs	r1, #128	; 0x80
 8003134:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003136:	23a4      	movs	r3, #164	; 0xa4
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	4013      	ands	r3, r2
 8003142:	d013      	beq.n	800316c <HAL_UART_IRQHandler+0x198>
 8003144:	23a0      	movs	r3, #160	; 0xa0
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	04db      	lsls	r3, r3, #19
 800314e:	4013      	ands	r3, r2
 8003150:	d00c      	beq.n	800316c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2280      	movs	r2, #128	; 0x80
 8003158:	0112      	lsls	r2, r2, #4
 800315a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2280      	movs	r2, #128	; 0x80
 8003160:	589b      	ldr	r3, [r3, r2]
 8003162:	2220      	movs	r2, #32
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2180      	movs	r1, #128	; 0x80
 800316a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2280      	movs	r2, #128	; 0x80
 8003170:	589b      	ldr	r3, [r3, r2]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d100      	bne.n	8003178 <HAL_UART_IRQHandler+0x1a4>
 8003176:	e1f7      	b.n	8003568 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003178:	23a4      	movs	r3, #164	; 0xa4
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2220      	movs	r2, #32
 8003180:	4013      	ands	r3, r2
 8003182:	d00e      	beq.n	80031a2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003184:	23a0      	movs	r3, #160	; 0xa0
 8003186:	18fb      	adds	r3, r7, r3
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2220      	movs	r2, #32
 800318c:	4013      	ands	r3, r2
 800318e:	d008      	beq.n	80031a2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003194:	2b00      	cmp	r3, #0
 8003196:	d004      	beq.n	80031a2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	0010      	movs	r0, r2
 80031a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2280      	movs	r2, #128	; 0x80
 80031a6:	589b      	ldr	r3, [r3, r2]
 80031a8:	2194      	movs	r1, #148	; 0x94
 80031aa:	187a      	adds	r2, r7, r1
 80031ac:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2240      	movs	r2, #64	; 0x40
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b40      	cmp	r3, #64	; 0x40
 80031ba:	d004      	beq.n	80031c6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031bc:	187b      	adds	r3, r7, r1
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2228      	movs	r2, #40	; 0x28
 80031c2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031c4:	d047      	beq.n	8003256 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	0018      	movs	r0, r3
 80031ca:	f000 fd9f 	bl	8003d0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2240      	movs	r2, #64	; 0x40
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b40      	cmp	r3, #64	; 0x40
 80031da:	d137      	bne.n	800324c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031dc:	f3ef 8310 	mrs	r3, PRIMASK
 80031e0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80031e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031e4:	2090      	movs	r0, #144	; 0x90
 80031e6:	183a      	adds	r2, r7, r0
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	2301      	movs	r3, #1
 80031ec:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031f0:	f383 8810 	msr	PRIMASK, r3
}
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2140      	movs	r1, #64	; 0x40
 8003202:	438a      	bics	r2, r1
 8003204:	609a      	str	r2, [r3, #8]
 8003206:	183b      	adds	r3, r7, r0
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800320e:	f383 8810 	msr	PRIMASK, r3
}
 8003212:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	2b00      	cmp	r3, #0
 800321a:	d012      	beq.n	8003242 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003220:	4a14      	ldr	r2, [pc, #80]	; (8003274 <HAL_UART_IRQHandler+0x2a0>)
 8003222:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003228:	0018      	movs	r0, r3
 800322a:	f7fe f9fd 	bl	8001628 <HAL_DMA_Abort_IT>
 800322e:	1e03      	subs	r3, r0, #0
 8003230:	d01a      	beq.n	8003268 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323c:	0018      	movs	r0, r3
 800323e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003240:	e012      	b.n	8003268 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	0018      	movs	r0, r3
 8003246:	f000 f9a5 	bl	8003594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324a:	e00d      	b.n	8003268 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	0018      	movs	r0, r3
 8003250:	f000 f9a0 	bl	8003594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003254:	e008      	b.n	8003268 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	0018      	movs	r0, r3
 800325a:	f000 f99b 	bl	8003594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2280      	movs	r2, #128	; 0x80
 8003262:	2100      	movs	r1, #0
 8003264:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003266:	e17f      	b.n	8003568 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003268:	46c0      	nop			; (mov r8, r8)
    return;
 800326a:	e17d      	b.n	8003568 <HAL_UART_IRQHandler+0x594>
 800326c:	0000080f 	.word	0x0000080f
 8003270:	04000120 	.word	0x04000120
 8003274:	08003dd1 	.word	0x08003dd1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327c:	2b01      	cmp	r3, #1
 800327e:	d000      	beq.n	8003282 <HAL_UART_IRQHandler+0x2ae>
 8003280:	e131      	b.n	80034e6 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003282:	23a4      	movs	r3, #164	; 0xa4
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2210      	movs	r2, #16
 800328a:	4013      	ands	r3, r2
 800328c:	d100      	bne.n	8003290 <HAL_UART_IRQHandler+0x2bc>
 800328e:	e12a      	b.n	80034e6 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003290:	23a0      	movs	r3, #160	; 0xa0
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2210      	movs	r2, #16
 8003298:	4013      	ands	r3, r2
 800329a:	d100      	bne.n	800329e <HAL_UART_IRQHandler+0x2ca>
 800329c:	e123      	b.n	80034e6 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2210      	movs	r2, #16
 80032a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2240      	movs	r2, #64	; 0x40
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b40      	cmp	r3, #64	; 0x40
 80032b2:	d000      	beq.n	80032b6 <HAL_UART_IRQHandler+0x2e2>
 80032b4:	e09b      	b.n	80033ee <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	217e      	movs	r1, #126	; 0x7e
 80032c0:	187b      	adds	r3, r7, r1
 80032c2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80032c4:	187b      	adds	r3, r7, r1
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d100      	bne.n	80032ce <HAL_UART_IRQHandler+0x2fa>
 80032cc:	e14e      	b.n	800356c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2258      	movs	r2, #88	; 0x58
 80032d2:	5a9b      	ldrh	r3, [r3, r2]
 80032d4:	187a      	adds	r2, r7, r1
 80032d6:	8812      	ldrh	r2, [r2, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d300      	bcc.n	80032de <HAL_UART_IRQHandler+0x30a>
 80032dc:	e146      	b.n	800356c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	187a      	adds	r2, r7, r1
 80032e2:	215a      	movs	r1, #90	; 0x5a
 80032e4:	8812      	ldrh	r2, [r2, #0]
 80032e6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	2b20      	cmp	r3, #32
 80032f0:	d06e      	beq.n	80033d0 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032f2:	f3ef 8310 	mrs	r3, PRIMASK
 80032f6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80032fc:	2301      	movs	r3, #1
 80032fe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003302:	f383 8810 	msr	PRIMASK, r3
}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	499a      	ldr	r1, [pc, #616]	; (800357c <HAL_UART_IRQHandler+0x5a8>)
 8003314:	400a      	ands	r2, r1
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800331a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800331c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331e:	f383 8810 	msr	PRIMASK, r3
}
 8003322:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003324:	f3ef 8310 	mrs	r3, PRIMASK
 8003328:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800332a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800332c:	677b      	str	r3, [r7, #116]	; 0x74
 800332e:	2301      	movs	r3, #1
 8003330:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003334:	f383 8810 	msr	PRIMASK, r3
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2101      	movs	r1, #1
 8003346:	438a      	bics	r2, r1
 8003348:	609a      	str	r2, [r3, #8]
 800334a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800334c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003350:	f383 8810 	msr	PRIMASK, r3
}
 8003354:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003356:	f3ef 8310 	mrs	r3, PRIMASK
 800335a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800335c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800335e:	673b      	str	r3, [r7, #112]	; 0x70
 8003360:	2301      	movs	r3, #1
 8003362:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003366:	f383 8810 	msr	PRIMASK, r3
}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2140      	movs	r1, #64	; 0x40
 8003378:	438a      	bics	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800337e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003382:	f383 8810 	msr	PRIMASK, r3
}
 8003386:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003394:	f3ef 8310 	mrs	r3, PRIMASK
 8003398:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800339a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800339c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800339e:	2301      	movs	r3, #1
 80033a0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a4:	f383 8810 	msr	PRIMASK, r3
}
 80033a8:	46c0      	nop			; (mov r8, r8)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2110      	movs	r1, #16
 80033b6:	438a      	bics	r2, r1
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c0:	f383 8810 	msr	PRIMASK, r3
}
 80033c4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	0018      	movs	r0, r3
 80033cc:	f7fe f8f4 	bl	80015b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2258      	movs	r2, #88	; 0x58
 80033d4:	5a9a      	ldrh	r2, [r3, r2]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	215a      	movs	r1, #90	; 0x5a
 80033da:	5a5b      	ldrh	r3, [r3, r1]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	0011      	movs	r1, r2
 80033e6:	0018      	movs	r0, r3
 80033e8:	f000 f8dc 	bl	80035a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033ec:	e0be      	b.n	800356c <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2258      	movs	r2, #88	; 0x58
 80033f2:	5a99      	ldrh	r1, [r3, r2]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	225a      	movs	r2, #90	; 0x5a
 80033f8:	5a9b      	ldrh	r3, [r3, r2]
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	208e      	movs	r0, #142	; 0x8e
 80033fe:	183b      	adds	r3, r7, r0
 8003400:	1a8a      	subs	r2, r1, r2
 8003402:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	225a      	movs	r2, #90	; 0x5a
 8003408:	5a9b      	ldrh	r3, [r3, r2]
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d100      	bne.n	8003412 <HAL_UART_IRQHandler+0x43e>
 8003410:	e0ae      	b.n	8003570 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8003412:	183b      	adds	r3, r7, r0
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d100      	bne.n	800341c <HAL_UART_IRQHandler+0x448>
 800341a:	e0a9      	b.n	8003570 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800341c:	f3ef 8310 	mrs	r3, PRIMASK
 8003420:	60fb      	str	r3, [r7, #12]
  return(result);
 8003422:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003424:	2488      	movs	r4, #136	; 0x88
 8003426:	193a      	adds	r2, r7, r4
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	2301      	movs	r3, #1
 800342c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f383 8810 	msr	PRIMASK, r3
}
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	494f      	ldr	r1, [pc, #316]	; (8003580 <HAL_UART_IRQHandler+0x5ac>)
 8003442:	400a      	ands	r2, r1
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	193b      	adds	r3, r7, r4
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f383 8810 	msr	PRIMASK, r3
}
 8003452:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003454:	f3ef 8310 	mrs	r3, PRIMASK
 8003458:	61bb      	str	r3, [r7, #24]
  return(result);
 800345a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345c:	2484      	movs	r4, #132	; 0x84
 800345e:	193a      	adds	r2, r7, r4
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	2301      	movs	r3, #1
 8003464:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	f383 8810 	msr	PRIMASK, r3
}
 800346c:	46c0      	nop			; (mov r8, r8)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2101      	movs	r1, #1
 800347a:	438a      	bics	r2, r1
 800347c:	609a      	str	r2, [r3, #8]
 800347e:	193b      	adds	r3, r7, r4
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	f383 8810 	msr	PRIMASK, r3
}
 800348a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349e:	f3ef 8310 	mrs	r3, PRIMASK
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a6:	2480      	movs	r4, #128	; 0x80
 80034a8:	193a      	adds	r2, r7, r4
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	2301      	movs	r3, #1
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	f383 8810 	msr	PRIMASK, r3
}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2110      	movs	r1, #16
 80034c4:	438a      	bics	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	193b      	adds	r3, r7, r4
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d0:	f383 8810 	msr	PRIMASK, r3
}
 80034d4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034d6:	183b      	adds	r3, r7, r0
 80034d8:	881a      	ldrh	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	0011      	movs	r1, r2
 80034de:	0018      	movs	r0, r3
 80034e0:	f000 f860 	bl	80035a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034e4:	e044      	b.n	8003570 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80034e6:	23a4      	movs	r3, #164	; 0xa4
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	2380      	movs	r3, #128	; 0x80
 80034ee:	035b      	lsls	r3, r3, #13
 80034f0:	4013      	ands	r3, r2
 80034f2:	d010      	beq.n	8003516 <HAL_UART_IRQHandler+0x542>
 80034f4:	239c      	movs	r3, #156	; 0x9c
 80034f6:	18fb      	adds	r3, r7, r3
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	03db      	lsls	r3, r3, #15
 80034fe:	4013      	ands	r3, r2
 8003500:	d009      	beq.n	8003516 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2280      	movs	r2, #128	; 0x80
 8003508:	0352      	lsls	r2, r2, #13
 800350a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	0018      	movs	r0, r3
 8003510:	f000 fca0 	bl	8003e54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003514:	e02f      	b.n	8003576 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003516:	23a4      	movs	r3, #164	; 0xa4
 8003518:	18fb      	adds	r3, r7, r3
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2280      	movs	r2, #128	; 0x80
 800351e:	4013      	ands	r3, r2
 8003520:	d00f      	beq.n	8003542 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003522:	23a0      	movs	r3, #160	; 0xa0
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2280      	movs	r2, #128	; 0x80
 800352a:	4013      	ands	r3, r2
 800352c:	d009      	beq.n	8003542 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003532:	2b00      	cmp	r3, #0
 8003534:	d01e      	beq.n	8003574 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	0010      	movs	r0, r2
 800353e:	4798      	blx	r3
    }
    return;
 8003540:	e018      	b.n	8003574 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003542:	23a4      	movs	r3, #164	; 0xa4
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2240      	movs	r2, #64	; 0x40
 800354a:	4013      	ands	r3, r2
 800354c:	d013      	beq.n	8003576 <HAL_UART_IRQHandler+0x5a2>
 800354e:	23a0      	movs	r3, #160	; 0xa0
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2240      	movs	r2, #64	; 0x40
 8003556:	4013      	ands	r3, r2
 8003558:	d00d      	beq.n	8003576 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	0018      	movs	r0, r3
 800355e:	f000 fc4e 	bl	8003dfe <UART_EndTransmit_IT>
    return;
 8003562:	e008      	b.n	8003576 <HAL_UART_IRQHandler+0x5a2>
      return;
 8003564:	46c0      	nop			; (mov r8, r8)
 8003566:	e006      	b.n	8003576 <HAL_UART_IRQHandler+0x5a2>
    return;
 8003568:	46c0      	nop			; (mov r8, r8)
 800356a:	e004      	b.n	8003576 <HAL_UART_IRQHandler+0x5a2>
      return;
 800356c:	46c0      	nop			; (mov r8, r8)
 800356e:	e002      	b.n	8003576 <HAL_UART_IRQHandler+0x5a2>
      return;
 8003570:	46c0      	nop			; (mov r8, r8)
 8003572:	e000      	b.n	8003576 <HAL_UART_IRQHandler+0x5a2>
    return;
 8003574:	46c0      	nop			; (mov r8, r8)
  }

}
 8003576:	46bd      	mov	sp, r7
 8003578:	b02b      	add	sp, #172	; 0xac
 800357a:	bd90      	pop	{r4, r7, pc}
 800357c:	fffffeff 	.word	0xfffffeff
 8003580:	fffffedf 	.word	0xfffffedf

08003584 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	46bd      	mov	sp, r7
 8003590:	b002      	add	sp, #8
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b002      	add	sp, #8
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	000a      	movs	r2, r1
 80035ae:	1cbb      	adds	r3, r7, #2
 80035b0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b002      	add	sp, #8
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035c4:	231e      	movs	r3, #30
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4abe      	ldr	r2, [pc, #760]	; (80038e4 <UART_SetConfig+0x328>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	0019      	movs	r1, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	4ab9      	ldr	r2, [pc, #740]	; (80038e8 <UART_SetConfig+0x32c>)
 8003602:	4013      	ands	r3, r2
 8003604:	0019      	movs	r1, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	4ab0      	ldr	r2, [pc, #704]	; (80038ec <UART_SetConfig+0x330>)
 800362a:	4013      	ands	r3, r2
 800362c:	0019      	movs	r1, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	430a      	orrs	r2, r1
 8003636:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4aac      	ldr	r2, [pc, #688]	; (80038f0 <UART_SetConfig+0x334>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d127      	bne.n	8003692 <UART_SetConfig+0xd6>
 8003642:	4bac      	ldr	r3, [pc, #688]	; (80038f4 <UART_SetConfig+0x338>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	2203      	movs	r2, #3
 8003648:	4013      	ands	r3, r2
 800364a:	2b03      	cmp	r3, #3
 800364c:	d00d      	beq.n	800366a <UART_SetConfig+0xae>
 800364e:	d81b      	bhi.n	8003688 <UART_SetConfig+0xcc>
 8003650:	2b02      	cmp	r3, #2
 8003652:	d014      	beq.n	800367e <UART_SetConfig+0xc2>
 8003654:	d818      	bhi.n	8003688 <UART_SetConfig+0xcc>
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <UART_SetConfig+0xa4>
 800365a:	2b01      	cmp	r3, #1
 800365c:	d00a      	beq.n	8003674 <UART_SetConfig+0xb8>
 800365e:	e013      	b.n	8003688 <UART_SetConfig+0xcc>
 8003660:	231f      	movs	r3, #31
 8003662:	18fb      	adds	r3, r7, r3
 8003664:	2200      	movs	r2, #0
 8003666:	701a      	strb	r2, [r3, #0]
 8003668:	e0bd      	b.n	80037e6 <UART_SetConfig+0x22a>
 800366a:	231f      	movs	r3, #31
 800366c:	18fb      	adds	r3, r7, r3
 800366e:	2202      	movs	r2, #2
 8003670:	701a      	strb	r2, [r3, #0]
 8003672:	e0b8      	b.n	80037e6 <UART_SetConfig+0x22a>
 8003674:	231f      	movs	r3, #31
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	2204      	movs	r2, #4
 800367a:	701a      	strb	r2, [r3, #0]
 800367c:	e0b3      	b.n	80037e6 <UART_SetConfig+0x22a>
 800367e:	231f      	movs	r3, #31
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	2208      	movs	r2, #8
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	e0ae      	b.n	80037e6 <UART_SetConfig+0x22a>
 8003688:	231f      	movs	r3, #31
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	2210      	movs	r2, #16
 800368e:	701a      	strb	r2, [r3, #0]
 8003690:	e0a9      	b.n	80037e6 <UART_SetConfig+0x22a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a98      	ldr	r2, [pc, #608]	; (80038f8 <UART_SetConfig+0x33c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d134      	bne.n	8003706 <UART_SetConfig+0x14a>
 800369c:	4b95      	ldr	r3, [pc, #596]	; (80038f4 <UART_SetConfig+0x338>)
 800369e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036a0:	23c0      	movs	r3, #192	; 0xc0
 80036a2:	029b      	lsls	r3, r3, #10
 80036a4:	4013      	ands	r3, r2
 80036a6:	22c0      	movs	r2, #192	; 0xc0
 80036a8:	0292      	lsls	r2, r2, #10
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d017      	beq.n	80036de <UART_SetConfig+0x122>
 80036ae:	22c0      	movs	r2, #192	; 0xc0
 80036b0:	0292      	lsls	r2, r2, #10
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d822      	bhi.n	80036fc <UART_SetConfig+0x140>
 80036b6:	2280      	movs	r2, #128	; 0x80
 80036b8:	0292      	lsls	r2, r2, #10
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d019      	beq.n	80036f2 <UART_SetConfig+0x136>
 80036be:	2280      	movs	r2, #128	; 0x80
 80036c0:	0292      	lsls	r2, r2, #10
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d81a      	bhi.n	80036fc <UART_SetConfig+0x140>
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d004      	beq.n	80036d4 <UART_SetConfig+0x118>
 80036ca:	2280      	movs	r2, #128	; 0x80
 80036cc:	0252      	lsls	r2, r2, #9
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00a      	beq.n	80036e8 <UART_SetConfig+0x12c>
 80036d2:	e013      	b.n	80036fc <UART_SetConfig+0x140>
 80036d4:	231f      	movs	r3, #31
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
 80036dc:	e083      	b.n	80037e6 <UART_SetConfig+0x22a>
 80036de:	231f      	movs	r3, #31
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	2202      	movs	r2, #2
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	e07e      	b.n	80037e6 <UART_SetConfig+0x22a>
 80036e8:	231f      	movs	r3, #31
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	2204      	movs	r2, #4
 80036ee:	701a      	strb	r2, [r3, #0]
 80036f0:	e079      	b.n	80037e6 <UART_SetConfig+0x22a>
 80036f2:	231f      	movs	r3, #31
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	2208      	movs	r2, #8
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	e074      	b.n	80037e6 <UART_SetConfig+0x22a>
 80036fc:	231f      	movs	r3, #31
 80036fe:	18fb      	adds	r3, r7, r3
 8003700:	2210      	movs	r2, #16
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	e06f      	b.n	80037e6 <UART_SetConfig+0x22a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a7c      	ldr	r2, [pc, #496]	; (80038fc <UART_SetConfig+0x340>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d134      	bne.n	800377a <UART_SetConfig+0x1be>
 8003710:	4b78      	ldr	r3, [pc, #480]	; (80038f4 <UART_SetConfig+0x338>)
 8003712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003714:	23c0      	movs	r3, #192	; 0xc0
 8003716:	031b      	lsls	r3, r3, #12
 8003718:	4013      	ands	r3, r2
 800371a:	22c0      	movs	r2, #192	; 0xc0
 800371c:	0312      	lsls	r2, r2, #12
 800371e:	4293      	cmp	r3, r2
 8003720:	d017      	beq.n	8003752 <UART_SetConfig+0x196>
 8003722:	22c0      	movs	r2, #192	; 0xc0
 8003724:	0312      	lsls	r2, r2, #12
 8003726:	4293      	cmp	r3, r2
 8003728:	d822      	bhi.n	8003770 <UART_SetConfig+0x1b4>
 800372a:	2280      	movs	r2, #128	; 0x80
 800372c:	0312      	lsls	r2, r2, #12
 800372e:	4293      	cmp	r3, r2
 8003730:	d019      	beq.n	8003766 <UART_SetConfig+0x1aa>
 8003732:	2280      	movs	r2, #128	; 0x80
 8003734:	0312      	lsls	r2, r2, #12
 8003736:	4293      	cmp	r3, r2
 8003738:	d81a      	bhi.n	8003770 <UART_SetConfig+0x1b4>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d004      	beq.n	8003748 <UART_SetConfig+0x18c>
 800373e:	2280      	movs	r2, #128	; 0x80
 8003740:	02d2      	lsls	r2, r2, #11
 8003742:	4293      	cmp	r3, r2
 8003744:	d00a      	beq.n	800375c <UART_SetConfig+0x1a0>
 8003746:	e013      	b.n	8003770 <UART_SetConfig+0x1b4>
 8003748:	231f      	movs	r3, #31
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]
 8003750:	e049      	b.n	80037e6 <UART_SetConfig+0x22a>
 8003752:	231f      	movs	r3, #31
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	2202      	movs	r2, #2
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	e044      	b.n	80037e6 <UART_SetConfig+0x22a>
 800375c:	231f      	movs	r3, #31
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2204      	movs	r2, #4
 8003762:	701a      	strb	r2, [r3, #0]
 8003764:	e03f      	b.n	80037e6 <UART_SetConfig+0x22a>
 8003766:	231f      	movs	r3, #31
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	2208      	movs	r2, #8
 800376c:	701a      	strb	r2, [r3, #0]
 800376e:	e03a      	b.n	80037e6 <UART_SetConfig+0x22a>
 8003770:	231f      	movs	r3, #31
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	2210      	movs	r2, #16
 8003776:	701a      	strb	r2, [r3, #0]
 8003778:	e035      	b.n	80037e6 <UART_SetConfig+0x22a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a60      	ldr	r2, [pc, #384]	; (8003900 <UART_SetConfig+0x344>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d104      	bne.n	800378e <UART_SetConfig+0x1d2>
 8003784:	231f      	movs	r3, #31
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]
 800378c:	e02b      	b.n	80037e6 <UART_SetConfig+0x22a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a5c      	ldr	r2, [pc, #368]	; (8003904 <UART_SetConfig+0x348>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d104      	bne.n	80037a2 <UART_SetConfig+0x1e6>
 8003798:	231f      	movs	r3, #31
 800379a:	18fb      	adds	r3, r7, r3
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]
 80037a0:	e021      	b.n	80037e6 <UART_SetConfig+0x22a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a58      	ldr	r2, [pc, #352]	; (8003908 <UART_SetConfig+0x34c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d104      	bne.n	80037b6 <UART_SetConfig+0x1fa>
 80037ac:	231f      	movs	r3, #31
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]
 80037b4:	e017      	b.n	80037e6 <UART_SetConfig+0x22a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a54      	ldr	r2, [pc, #336]	; (800390c <UART_SetConfig+0x350>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d104      	bne.n	80037ca <UART_SetConfig+0x20e>
 80037c0:	231f      	movs	r3, #31
 80037c2:	18fb      	adds	r3, r7, r3
 80037c4:	2200      	movs	r2, #0
 80037c6:	701a      	strb	r2, [r3, #0]
 80037c8:	e00d      	b.n	80037e6 <UART_SetConfig+0x22a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a50      	ldr	r2, [pc, #320]	; (8003910 <UART_SetConfig+0x354>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d104      	bne.n	80037de <UART_SetConfig+0x222>
 80037d4:	231f      	movs	r3, #31
 80037d6:	18fb      	adds	r3, r7, r3
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
 80037dc:	e003      	b.n	80037e6 <UART_SetConfig+0x22a>
 80037de:	231f      	movs	r3, #31
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	2210      	movs	r2, #16
 80037e4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69da      	ldr	r2, [r3, #28]
 80037ea:	2380      	movs	r3, #128	; 0x80
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d15d      	bne.n	80038ae <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 80037f2:	231f      	movs	r3, #31
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d015      	beq.n	8003828 <UART_SetConfig+0x26c>
 80037fc:	dc18      	bgt.n	8003830 <UART_SetConfig+0x274>
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d00d      	beq.n	800381e <UART_SetConfig+0x262>
 8003802:	dc15      	bgt.n	8003830 <UART_SetConfig+0x274>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <UART_SetConfig+0x252>
 8003808:	2b02      	cmp	r3, #2
 800380a:	d005      	beq.n	8003818 <UART_SetConfig+0x25c>
 800380c:	e010      	b.n	8003830 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800380e:	f7fe ffdb 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 8003812:	0003      	movs	r3, r0
 8003814:	61bb      	str	r3, [r7, #24]
        break;
 8003816:	e012      	b.n	800383e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003818:	4b3e      	ldr	r3, [pc, #248]	; (8003914 <UART_SetConfig+0x358>)
 800381a:	61bb      	str	r3, [r7, #24]
        break;
 800381c:	e00f      	b.n	800383e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800381e:	f7fe ff49 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 8003822:	0003      	movs	r3, r0
 8003824:	61bb      	str	r3, [r7, #24]
        break;
 8003826:	e00a      	b.n	800383e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003828:	2380      	movs	r3, #128	; 0x80
 800382a:	021b      	lsls	r3, r3, #8
 800382c:	61bb      	str	r3, [r7, #24]
        break;
 800382e:	e006      	b.n	800383e <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003834:	231e      	movs	r3, #30
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	2201      	movs	r2, #1
 800383a:	701a      	strb	r2, [r3, #0]
        break;
 800383c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d100      	bne.n	8003846 <UART_SetConfig+0x28a>
 8003844:	e095      	b.n	8003972 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	005a      	lsls	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	085b      	lsrs	r3, r3, #1
 8003850:	18d2      	adds	r2, r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	0019      	movs	r1, r3
 8003858:	0010      	movs	r0, r2
 800385a:	f7fc fc53 	bl	8000104 <__udivsi3>
 800385e:	0003      	movs	r3, r0
 8003860:	b29b      	uxth	r3, r3
 8003862:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b0f      	cmp	r3, #15
 8003868:	d91c      	bls.n	80038a4 <UART_SetConfig+0x2e8>
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	025b      	lsls	r3, r3, #9
 8003870:	429a      	cmp	r2, r3
 8003872:	d217      	bcs.n	80038a4 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	b29a      	uxth	r2, r3
 8003878:	200e      	movs	r0, #14
 800387a:	183b      	adds	r3, r7, r0
 800387c:	210f      	movs	r1, #15
 800387e:	438a      	bics	r2, r1
 8003880:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	b29b      	uxth	r3, r3
 8003888:	2207      	movs	r2, #7
 800388a:	4013      	ands	r3, r2
 800388c:	b299      	uxth	r1, r3
 800388e:	183b      	adds	r3, r7, r0
 8003890:	183a      	adds	r2, r7, r0
 8003892:	8812      	ldrh	r2, [r2, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	183a      	adds	r2, r7, r0
 800389e:	8812      	ldrh	r2, [r2, #0]
 80038a0:	60da      	str	r2, [r3, #12]
 80038a2:	e066      	b.n	8003972 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80038a4:	231e      	movs	r3, #30
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]
 80038ac:	e061      	b.n	8003972 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038ae:	231f      	movs	r3, #31
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d02f      	beq.n	8003918 <UART_SetConfig+0x35c>
 80038b8:	dc32      	bgt.n	8003920 <UART_SetConfig+0x364>
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d00d      	beq.n	80038da <UART_SetConfig+0x31e>
 80038be:	dc2f      	bgt.n	8003920 <UART_SetConfig+0x364>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <UART_SetConfig+0x30e>
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d005      	beq.n	80038d4 <UART_SetConfig+0x318>
 80038c8:	e02a      	b.n	8003920 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ca:	f7fe ff7d 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 80038ce:	0003      	movs	r3, r0
 80038d0:	61bb      	str	r3, [r7, #24]
        break;
 80038d2:	e02c      	b.n	800392e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038d4:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <UART_SetConfig+0x358>)
 80038d6:	61bb      	str	r3, [r7, #24]
        break;
 80038d8:	e029      	b.n	800392e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038da:	f7fe feeb 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 80038de:	0003      	movs	r3, r0
 80038e0:	61bb      	str	r3, [r7, #24]
        break;
 80038e2:	e024      	b.n	800392e <UART_SetConfig+0x372>
 80038e4:	efff69f3 	.word	0xefff69f3
 80038e8:	ffffcfff 	.word	0xffffcfff
 80038ec:	fffff4ff 	.word	0xfffff4ff
 80038f0:	40013800 	.word	0x40013800
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40004400 	.word	0x40004400
 80038fc:	40004800 	.word	0x40004800
 8003900:	40004c00 	.word	0x40004c00
 8003904:	40005000 	.word	0x40005000
 8003908:	40011400 	.word	0x40011400
 800390c:	40011800 	.word	0x40011800
 8003910:	40011c00 	.word	0x40011c00
 8003914:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003918:	2380      	movs	r3, #128	; 0x80
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	61bb      	str	r3, [r7, #24]
        break;
 800391e:	e006      	b.n	800392e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003924:	231e      	movs	r3, #30
 8003926:	18fb      	adds	r3, r7, r3
 8003928:	2201      	movs	r2, #1
 800392a:	701a      	strb	r2, [r3, #0]
        break;
 800392c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01e      	beq.n	8003972 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	085a      	lsrs	r2, r3, #1
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	18d2      	adds	r2, r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	0019      	movs	r1, r3
 8003944:	0010      	movs	r0, r2
 8003946:	f7fc fbdd 	bl	8000104 <__udivsi3>
 800394a:	0003      	movs	r3, r0
 800394c:	b29b      	uxth	r3, r3
 800394e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	2b0f      	cmp	r3, #15
 8003954:	d909      	bls.n	800396a <UART_SetConfig+0x3ae>
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	2380      	movs	r3, #128	; 0x80
 800395a:	025b      	lsls	r3, r3, #9
 800395c:	429a      	cmp	r2, r3
 800395e:	d204      	bcs.n	800396a <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	60da      	str	r2, [r3, #12]
 8003968:	e003      	b.n	8003972 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800396a:	231e      	movs	r3, #30
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	2201      	movs	r2, #1
 8003970:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800397e:	231e      	movs	r3, #30
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	781b      	ldrb	r3, [r3, #0]
}
 8003984:	0018      	movs	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	b008      	add	sp, #32
 800398a:	bd80      	pop	{r7, pc}

0800398c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	2201      	movs	r2, #1
 800399a:	4013      	ands	r3, r2
 800399c:	d00b      	beq.n	80039b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4a4a      	ldr	r2, [pc, #296]	; (8003ad0 <UART_AdvFeatureConfig+0x144>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	0019      	movs	r1, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	2202      	movs	r2, #2
 80039bc:	4013      	ands	r3, r2
 80039be:	d00b      	beq.n	80039d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	4a43      	ldr	r2, [pc, #268]	; (8003ad4 <UART_AdvFeatureConfig+0x148>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	0019      	movs	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	2204      	movs	r2, #4
 80039de:	4013      	ands	r3, r2
 80039e0:	d00b      	beq.n	80039fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	4a3b      	ldr	r2, [pc, #236]	; (8003ad8 <UART_AdvFeatureConfig+0x14c>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	0019      	movs	r1, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	2208      	movs	r2, #8
 8003a00:	4013      	ands	r3, r2
 8003a02:	d00b      	beq.n	8003a1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4a34      	ldr	r2, [pc, #208]	; (8003adc <UART_AdvFeatureConfig+0x150>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	0019      	movs	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	2210      	movs	r2, #16
 8003a22:	4013      	ands	r3, r2
 8003a24:	d00b      	beq.n	8003a3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a2c      	ldr	r2, [pc, #176]	; (8003ae0 <UART_AdvFeatureConfig+0x154>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	0019      	movs	r1, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	2220      	movs	r2, #32
 8003a44:	4013      	ands	r3, r2
 8003a46:	d00b      	beq.n	8003a60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	4a25      	ldr	r2, [pc, #148]	; (8003ae4 <UART_AdvFeatureConfig+0x158>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	0019      	movs	r1, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	2240      	movs	r2, #64	; 0x40
 8003a66:	4013      	ands	r3, r2
 8003a68:	d01d      	beq.n	8003aa6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	4a1d      	ldr	r2, [pc, #116]	; (8003ae8 <UART_AdvFeatureConfig+0x15c>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	0019      	movs	r1, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a86:	2380      	movs	r3, #128	; 0x80
 8003a88:	035b      	lsls	r3, r3, #13
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d10b      	bne.n	8003aa6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	4a15      	ldr	r2, [pc, #84]	; (8003aec <UART_AdvFeatureConfig+0x160>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	0019      	movs	r1, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	2280      	movs	r2, #128	; 0x80
 8003aac:	4013      	ands	r3, r2
 8003aae:	d00b      	beq.n	8003ac8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4a0e      	ldr	r2, [pc, #56]	; (8003af0 <UART_AdvFeatureConfig+0x164>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	0019      	movs	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]
  }
}
 8003ac8:	46c0      	nop			; (mov r8, r8)
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b002      	add	sp, #8
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	fffdffff 	.word	0xfffdffff
 8003ad4:	fffeffff 	.word	0xfffeffff
 8003ad8:	fffbffff 	.word	0xfffbffff
 8003adc:	ffff7fff 	.word	0xffff7fff
 8003ae0:	ffffefff 	.word	0xffffefff
 8003ae4:	ffffdfff 	.word	0xffffdfff
 8003ae8:	ffefffff 	.word	0xffefffff
 8003aec:	ff9fffff 	.word	0xff9fffff
 8003af0:	fff7ffff 	.word	0xfff7ffff

08003af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2280      	movs	r2, #128	; 0x80
 8003b00:	2100      	movs	r1, #0
 8003b02:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b04:	f7fd f8ee 	bl	8000ce4 <HAL_GetTick>
 8003b08:	0003      	movs	r3, r0
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2208      	movs	r2, #8
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d10c      	bne.n	8003b34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2280      	movs	r2, #128	; 0x80
 8003b1e:	0391      	lsls	r1, r2, #14
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	4a17      	ldr	r2, [pc, #92]	; (8003b80 <UART_CheckIdleState+0x8c>)
 8003b24:	9200      	str	r2, [sp, #0]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f000 f82c 	bl	8003b84 <UART_WaitOnFlagUntilTimeout>
 8003b2c:	1e03      	subs	r3, r0, #0
 8003b2e:	d001      	beq.n	8003b34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e021      	b.n	8003b78 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2204      	movs	r2, #4
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d10c      	bne.n	8003b5c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2280      	movs	r2, #128	; 0x80
 8003b46:	03d1      	lsls	r1, r2, #15
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	4a0d      	ldr	r2, [pc, #52]	; (8003b80 <UART_CheckIdleState+0x8c>)
 8003b4c:	9200      	str	r2, [sp, #0]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f000 f818 	bl	8003b84 <UART_WaitOnFlagUntilTimeout>
 8003b54:	1e03      	subs	r3, r0, #0
 8003b56:	d001      	beq.n	8003b5c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e00d      	b.n	8003b78 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2220      	movs	r2, #32
 8003b66:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2274      	movs	r2, #116	; 0x74
 8003b72:	2100      	movs	r1, #0
 8003b74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	0018      	movs	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b004      	add	sp, #16
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	01ffffff 	.word	0x01ffffff

08003b84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b094      	sub	sp, #80	; 0x50
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	1dfb      	adds	r3, r7, #7
 8003b92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b94:	e0a3      	b.n	8003cde <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b98:	3301      	adds	r3, #1
 8003b9a:	d100      	bne.n	8003b9e <UART_WaitOnFlagUntilTimeout+0x1a>
 8003b9c:	e09f      	b.n	8003cde <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9e:	f7fd f8a1 	bl	8000ce4 <HAL_GetTick>
 8003ba2:	0002      	movs	r2, r0
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d302      	bcc.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d13d      	bne.n	8003c30 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bbc:	647b      	str	r3, [r7, #68]	; 0x44
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	f383 8810 	msr	PRIMASK, r3
}
 8003bc8:	46c0      	nop			; (mov r8, r8)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	494c      	ldr	r1, [pc, #304]	; (8003d08 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003bd6:	400a      	ands	r2, r1
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bdc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be0:	f383 8810 	msr	PRIMASK, r3
}
 8003be4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bea:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bee:	643b      	str	r3, [r7, #64]	; 0x40
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf6:	f383 8810 	msr	PRIMASK, r3
}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2101      	movs	r1, #1
 8003c08:	438a      	bics	r2, r1
 8003c0a:	609a      	str	r2, [r3, #8]
 8003c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c12:	f383 8810 	msr	PRIMASK, r3
}
 8003c16:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2274      	movs	r2, #116	; 0x74
 8003c28:	2100      	movs	r1, #0
 8003c2a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e067      	b.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2204      	movs	r2, #4
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d050      	beq.n	8003cde <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69da      	ldr	r2, [r3, #28]
 8003c42:	2380      	movs	r3, #128	; 0x80
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	401a      	ands	r2, r3
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d146      	bne.n	8003cde <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2280      	movs	r2, #128	; 0x80
 8003c56:	0112      	lsls	r2, r2, #4
 8003c58:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c5e:	613b      	str	r3, [r7, #16]
  return(result);
 8003c60:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c64:	2301      	movs	r3, #1
 8003c66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f383 8810 	msr	PRIMASK, r3
}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4923      	ldr	r1, [pc, #140]	; (8003d08 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003c7c:	400a      	ands	r2, r1
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f383 8810 	msr	PRIMASK, r3
}
 8003c8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c90:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c92:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c94:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c96:	2301      	movs	r3, #1
 8003c98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	f383 8810 	msr	PRIMASK, r3
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2101      	movs	r1, #1
 8003cae:	438a      	bics	r2, r1
 8003cb0:	609a      	str	r2, [r3, #8]
 8003cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	f383 8810 	msr	PRIMASK, r3
}
 8003cbc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2280      	movs	r2, #128	; 0x80
 8003cce:	2120      	movs	r1, #32
 8003cd0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2274      	movs	r2, #116	; 0x74
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e010      	b.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	425a      	negs	r2, r3
 8003cee:	4153      	adcs	r3, r2
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	001a      	movs	r2, r3
 8003cf4:	1dfb      	adds	r3, r7, #7
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d100      	bne.n	8003cfe <UART_WaitOnFlagUntilTimeout+0x17a>
 8003cfc:	e74b      	b.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	0018      	movs	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b014      	add	sp, #80	; 0x50
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	fffffe5f 	.word	0xfffffe5f

08003d0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08e      	sub	sp, #56	; 0x38
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d14:	f3ef 8310 	mrs	r3, PRIMASK
 8003d18:	617b      	str	r3, [r7, #20]
  return(result);
 8003d1a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d1e:	2301      	movs	r3, #1
 8003d20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f383 8810 	msr	PRIMASK, r3
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4925      	ldr	r1, [pc, #148]	; (8003dcc <UART_EndRxTransfer+0xc0>)
 8003d36:	400a      	ands	r2, r1
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f383 8810 	msr	PRIMASK, r3
}
 8003d44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d46:	f3ef 8310 	mrs	r3, PRIMASK
 8003d4a:	623b      	str	r3, [r7, #32]
  return(result);
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d50:	2301      	movs	r3, #1
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	f383 8810 	msr	PRIMASK, r3
}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2101      	movs	r1, #1
 8003d68:	438a      	bics	r2, r1
 8003d6a:	609a      	str	r2, [r3, #8]
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	f383 8810 	msr	PRIMASK, r3
}
 8003d76:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d118      	bne.n	8003db2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d80:	f3ef 8310 	mrs	r3, PRIMASK
 8003d84:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d86:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f383 8810 	msr	PRIMASK, r3
}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2110      	movs	r1, #16
 8003da2:	438a      	bics	r2, r1
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f383 8810 	msr	PRIMASK, r3
}
 8003db0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2220      	movs	r2, #32
 8003db6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003dc4:	46c0      	nop			; (mov r8, r8)
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b00e      	add	sp, #56	; 0x38
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	fffffedf 	.word	0xfffffedf

08003dd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	225a      	movs	r2, #90	; 0x5a
 8003de2:	2100      	movs	r1, #0
 8003de4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2252      	movs	r2, #82	; 0x52
 8003dea:	2100      	movs	r1, #0
 8003dec:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	0018      	movs	r0, r3
 8003df2:	f7ff fbcf 	bl	8003594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	b004      	add	sp, #16
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b086      	sub	sp, #24
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e06:	f3ef 8310 	mrs	r3, PRIMASK
 8003e0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	2301      	movs	r3, #1
 8003e12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f383 8810 	msr	PRIMASK, r3
}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2140      	movs	r1, #64	; 0x40
 8003e28:	438a      	bics	r2, r1
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f383 8810 	msr	PRIMASK, r3
}
 8003e36:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	0018      	movs	r0, r3
 8003e48:	f7ff fb9c 	bl	8003584 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e4c:	46c0      	nop			; (mov r8, r8)
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	b006      	add	sp, #24
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e5c:	46c0      	nop			; (mov r8, r8)
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	b002      	add	sp, #8
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <FIR_DSP_Init>:
 */
#include "FIR_DSP.h"

static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {-0.0032906f,-0.0052635f,-0.0068811f,0.0000000f,0.0254209f,0.0724719f,0.1311260f,0.1805961f,0.2000000f,0.1805961f,0.1311260f,0.0724719f,0.0254209f,0.0000000f,-0.0068811f,-0.0052635f};

void FIR_DSP_Init(FIRFILTER *fir){
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
	/*Clear filter buffer*/

	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++){
 8003e6c:	230f      	movs	r3, #15
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	2200      	movs	r2, #0
 8003e72:	701a      	strb	r2, [r3, #0]
 8003e74:	e00b      	b.n	8003e8e <FIR_DSP_Init+0x2a>
		fir->buf[n] = 0.0f;
 8003e76:	200f      	movs	r0, #15
 8003e78:	183b      	adds	r3, r7, r0
 8003e7a:	781a      	ldrb	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	0092      	lsls	r2, r2, #2
 8003e80:	2100      	movs	r1, #0
 8003e82:	50d1      	str	r1, [r2, r3]
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++){
 8003e84:	183b      	adds	r3, r7, r0
 8003e86:	781a      	ldrb	r2, [r3, #0]
 8003e88:	183b      	adds	r3, r7, r0
 8003e8a:	3201      	adds	r2, #1
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	230f      	movs	r3, #15
 8003e90:	18fb      	adds	r3, r7, r3
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b0f      	cmp	r3, #15
 8003e96:	d9ee      	bls.n	8003e76 <FIR_DSP_Init+0x12>
	}

	/* Reset Buffer Index */
	fir->bufIndex = 0;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2240      	movs	r2, #64	; 0x40
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	5499      	strb	r1, [r3, r2]

	/*Clear filter output */
	fir->out = 0.0f;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	645a      	str	r2, [r3, #68]	; 0x44

}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	b004      	add	sp, #16
 8003eac:	bd80      	pop	{r7, pc}

08003eae <Sensors_Init>:
 */
#include "optocouple.h"
#include "thermocouple.h"

void Sensors_Init() /* Initializing all the overall subsystems */
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	af00      	add	r7, sp, #0
	void PFCV_On_State();
	void Cathode_Heater_On_State();
	void Cathode_Keeper_Relay_On_State();


}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <__libc_init_array>:
 8003eb8:	b570      	push	{r4, r5, r6, lr}
 8003eba:	2600      	movs	r6, #0
 8003ebc:	4d0c      	ldr	r5, [pc, #48]	; (8003ef0 <__libc_init_array+0x38>)
 8003ebe:	4c0d      	ldr	r4, [pc, #52]	; (8003ef4 <__libc_init_array+0x3c>)
 8003ec0:	1b64      	subs	r4, r4, r5
 8003ec2:	10a4      	asrs	r4, r4, #2
 8003ec4:	42a6      	cmp	r6, r4
 8003ec6:	d109      	bne.n	8003edc <__libc_init_array+0x24>
 8003ec8:	2600      	movs	r6, #0
 8003eca:	f000 f821 	bl	8003f10 <_init>
 8003ece:	4d0a      	ldr	r5, [pc, #40]	; (8003ef8 <__libc_init_array+0x40>)
 8003ed0:	4c0a      	ldr	r4, [pc, #40]	; (8003efc <__libc_init_array+0x44>)
 8003ed2:	1b64      	subs	r4, r4, r5
 8003ed4:	10a4      	asrs	r4, r4, #2
 8003ed6:	42a6      	cmp	r6, r4
 8003ed8:	d105      	bne.n	8003ee6 <__libc_init_array+0x2e>
 8003eda:	bd70      	pop	{r4, r5, r6, pc}
 8003edc:	00b3      	lsls	r3, r6, #2
 8003ede:	58eb      	ldr	r3, [r5, r3]
 8003ee0:	4798      	blx	r3
 8003ee2:	3601      	adds	r6, #1
 8003ee4:	e7ee      	b.n	8003ec4 <__libc_init_array+0xc>
 8003ee6:	00b3      	lsls	r3, r6, #2
 8003ee8:	58eb      	ldr	r3, [r5, r3]
 8003eea:	4798      	blx	r3
 8003eec:	3601      	adds	r6, #1
 8003eee:	e7f2      	b.n	8003ed6 <__libc_init_array+0x1e>
 8003ef0:	08003f60 	.word	0x08003f60
 8003ef4:	08003f60 	.word	0x08003f60
 8003ef8:	08003f60 	.word	0x08003f60
 8003efc:	08003f64 	.word	0x08003f64

08003f00 <memset>:
 8003f00:	0003      	movs	r3, r0
 8003f02:	1882      	adds	r2, r0, r2
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d100      	bne.n	8003f0a <memset+0xa>
 8003f08:	4770      	bx	lr
 8003f0a:	7019      	strb	r1, [r3, #0]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	e7f9      	b.n	8003f04 <memset+0x4>

08003f10 <_init>:
 8003f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f16:	bc08      	pop	{r3}
 8003f18:	469e      	mov	lr, r3
 8003f1a:	4770      	bx	lr

08003f1c <_fini>:
 8003f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f22:	bc08      	pop	{r3}
 8003f24:	469e      	mov	lr, r3
 8003f26:	4770      	bx	lr
