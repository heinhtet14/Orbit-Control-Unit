
OBC_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044ec  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080045a8  080045a8  000145a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046dc  080046dc  00020470  2**0
                  CONTENTS
  4 .ARM          00000000  080046dc  080046dc  00020470  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046dc  080046dc  00020470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046dc  080046dc  000146dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046e0  080046e0  000146e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000470  20000000  080046e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000470  08004b54  00020470  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  08004b54  000205b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020470  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc06  00000000  00000000  00020498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc0  00000000  00000000  0002d09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  0002ee60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000860  00000000  00000000  0002f788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be1f  00000000  00000000  0002ffe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b985  00000000  00000000  0004be07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a41a5  00000000  00000000  0005778c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fb931  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002734  00000000  00000000  000fb984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000470 	.word	0x20000470
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004590 	.word	0x08004590

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000474 	.word	0x20000474
 8000100:	08004590 	.word	0x08004590

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <OBC_Slave_Receive_Transmit>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void OBC_Slave_Receive_Transmit(){
 8000230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000232:	b089      	sub	sp, #36	; 0x24
 8000234:	af02      	add	r7, sp, #8

	//For slave part it should receive first and then transmit back to the OBC
	PacketInit(); //Initialize Packet
 8000236:	f002 ffc3 	bl	80031c0 <PacketInit>
	uint8_t arg[] = {9,10,11,18}; //Packet To Send
 800023a:	230c      	movs	r3, #12
 800023c:	18fb      	adds	r3, r7, r3
 800023e:	4a38      	ldr	r2, [pc, #224]	; (8000320 <OBC_Slave_Receive_Transmit+0xf0>)
 8000240:	601a      	str	r2, [r3, #0]

	uint8_t id,len,cmd;
	uint8_t argRet[4];

	if(HAL_SPI_Receive(&hspi1,buffer_rx,sizeof(buffer_rx),100) != HAL_OK) // Receive from slave side
 8000242:	4938      	ldr	r1, [pc, #224]	; (8000324 <OBC_Slave_Receive_Transmit+0xf4>)
 8000244:	4838      	ldr	r0, [pc, #224]	; (8000328 <OBC_Slave_Receive_Transmit+0xf8>)
 8000246:	2364      	movs	r3, #100	; 0x64
 8000248:	220f      	movs	r2, #15
 800024a:	f001 fecb 	bl	8001fe4 <HAL_SPI_Receive>
 800024e:	1e03      	subs	r3, r0, #0
 8000250:	d001      	beq.n	8000256 <OBC_Slave_Receive_Transmit+0x26>
		{
			Error_Handler();
 8000252:	f000 f9eb 	bl	800062c <Error_Handler>
		}

	deframeReturn retVal = PacketDisassemble(&id,&len,&cmd,argRet,buffer_rx,sizeof(buffer_rx)); // disassemble packet from OBC
 8000256:	2613      	movs	r6, #19
 8000258:	19bc      	adds	r4, r7, r6
 800025a:	1d3d      	adds	r5, r7, #4
 800025c:	2309      	movs	r3, #9
 800025e:	18fa      	adds	r2, r7, r3
 8000260:	210a      	movs	r1, #10
 8000262:	1879      	adds	r1, r7, r1
 8000264:	200b      	movs	r0, #11
 8000266:	1838      	adds	r0, r7, r0
 8000268:	230f      	movs	r3, #15
 800026a:	9301      	str	r3, [sp, #4]
 800026c:	4b2d      	ldr	r3, [pc, #180]	; (8000324 <OBC_Slave_Receive_Transmit+0xf4>)
 800026e:	9300      	str	r3, [sp, #0]
 8000270:	002b      	movs	r3, r5
 8000272:	f003 f887 	bl	8003384 <PacketDisassemble>
 8000276:	0003      	movs	r3, r0
 8000278:	7023      	strb	r3, [r4, #0]
	if(retVal == DEFRAME_OK){
 800027a:	19bb      	adds	r3, r7, r6
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d129      	bne.n	80002d6 <OBC_Slave_Receive_Transmit+0xa6>
	printf("\nretVal is %d id is %x len is %d cmd is %x\n",retVal, id, len, cmd);
 8000282:	19bb      	adds	r3, r7, r6
 8000284:	7819      	ldrb	r1, [r3, #0]
 8000286:	220b      	movs	r2, #11
 8000288:	18bb      	adds	r3, r7, r2
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	001a      	movs	r2, r3
 800028e:	200a      	movs	r0, #10
 8000290:	183b      	adds	r3, r7, r0
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	001c      	movs	r4, r3
 8000296:	2309      	movs	r3, #9
 8000298:	18fb      	adds	r3, r7, r3
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	4823      	ldr	r0, [pc, #140]	; (800032c <OBC_Slave_Receive_Transmit+0xfc>)
 800029e:	9300      	str	r3, [sp, #0]
 80002a0:	0023      	movs	r3, r4
 80002a2:	f003 f9d7 	bl	8003654 <iprintf>
	for (int i = 0;i<len;i++){
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]
 80002aa:	e00c      	b.n	80002c6 <OBC_Slave_Receive_Transmit+0x96>
	            printf("arg %d is %x\n",i, argRet[i]);
 80002ac:	1d3a      	adds	r2, r7, #4
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	18d3      	adds	r3, r2, r3
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	001a      	movs	r2, r3
 80002b6:	6979      	ldr	r1, [r7, #20]
 80002b8:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <OBC_Slave_Receive_Transmit+0x100>)
 80002ba:	0018      	movs	r0, r3
 80002bc:	f003 f9ca 	bl	8003654 <iprintf>
	for (int i = 0;i<len;i++){
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	3301      	adds	r3, #1
 80002c4:	617b      	str	r3, [r7, #20]
 80002c6:	230a      	movs	r3, #10
 80002c8:	18fb      	adds	r3, r7, r3
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	001a      	movs	r2, r3
 80002ce:	697b      	ldr	r3, [r7, #20]
 80002d0:	4293      	cmp	r3, r2
 80002d2:	dbeb      	blt.n	80002ac <OBC_Slave_Receive_Transmit+0x7c>
 80002d4:	e00d      	b.n	80002f2 <OBC_Slave_Receive_Transmit+0xc2>
	       }
	 }else if (retVal == DEFRAME_INVALID_HEADER){
 80002d6:	2313      	movs	r3, #19
 80002d8:	18fb      	adds	r3, r7, r3
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d104      	bne.n	80002ea <OBC_Slave_Receive_Transmit+0xba>
	        printf("Can't find header");
 80002e0:	4b14      	ldr	r3, [pc, #80]	; (8000334 <OBC_Slave_Receive_Transmit+0x104>)
 80002e2:	0018      	movs	r0, r3
 80002e4:	f003 f9b6 	bl	8003654 <iprintf>
 80002e8:	e003      	b.n	80002f2 <OBC_Slave_Receive_Transmit+0xc2>
	 }else{
	        printf("CRC doesnt match");
 80002ea:	4b13      	ldr	r3, [pc, #76]	; (8000338 <OBC_Slave_Receive_Transmit+0x108>)
 80002ec:	0018      	movs	r0, r3
 80002ee:	f003 f9b1 	bl	8003654 <iprintf>
	 }


	PacketAssemble(0x11,0x01,arg,sizeof(arg),buffer_tx); // assemble packet to send OBC
 80002f2:	230c      	movs	r3, #12
 80002f4:	18fa      	adds	r2, r7, r3
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <OBC_Slave_Receive_Transmit+0x10c>)
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	2304      	movs	r3, #4
 80002fc:	2101      	movs	r1, #1
 80002fe:	2011      	movs	r0, #17
 8000300:	f002 ff72 	bl	80031e8 <PacketAssemble>

	if(HAL_SPI_Transmit(&hspi1,buffer_tx,15,100) != HAL_OK)
 8000304:	490d      	ldr	r1, [pc, #52]	; (800033c <OBC_Slave_Receive_Transmit+0x10c>)
 8000306:	4808      	ldr	r0, [pc, #32]	; (8000328 <OBC_Slave_Receive_Transmit+0xf8>)
 8000308:	2364      	movs	r3, #100	; 0x64
 800030a:	220f      	movs	r2, #15
 800030c:	f001 fd12 	bl	8001d34 <HAL_SPI_Transmit>
 8000310:	1e03      	subs	r3, r0, #0
 8000312:	d001      	beq.n	8000318 <OBC_Slave_Receive_Transmit+0xe8>
	{
		Error_Handler();
 8000314:	f000 f98a 	bl	800062c <Error_Handler>
	}




}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	b007      	add	sp, #28
 800031e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000320:	120b0a09 	.word	0x120b0a09
 8000324:	20000498 	.word	0x20000498
 8000328:	200004b8 	.word	0x200004b8
 800032c:	080045a8 	.word	0x080045a8
 8000330:	080045d4 	.word	0x080045d4
 8000334:	080045e4 	.word	0x080045e4
 8000338:	080045f8 	.word	0x080045f8
 800033c:	200004a8 	.word	0x200004a8

08000340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000344:	f000 fb4a 	bl	80009dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000348:	f000 f817 	bl	800037a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800034c:	f000 f8de 	bl	800050c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000350:	f000 f8ac 	bl	80004ac <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000354:	f000 f870 	bl	8000438 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000358:	e7fe      	b.n	8000358 <main+0x18>

0800035a <HAL_GPIO_EXTI_Callback>:

  }
  /* USER CODE END 3 */
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800035a:	b580      	push	{r7, lr}
 800035c:	b082      	sub	sp, #8
 800035e:	af00      	add	r7, sp, #0
 8000360:	0002      	movs	r2, r0
 8000362:	1dbb      	adds	r3, r7, #6
 8000364:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_PIN_4){
 8000366:	1dbb      	adds	r3, r7, #6
 8000368:	881b      	ldrh	r3, [r3, #0]
 800036a:	2b10      	cmp	r3, #16
 800036c:	d101      	bne.n	8000372 <HAL_GPIO_EXTI_Callback+0x18>
	OBC_Slave_Receive_Transmit();
 800036e:	f7ff ff5f 	bl	8000230 <OBC_Slave_Receive_Transmit>
	}
}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	b002      	add	sp, #8
 8000378:	bd80      	pop	{r7, pc}

0800037a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037a:	b590      	push	{r4, r7, lr}
 800037c:	b099      	sub	sp, #100	; 0x64
 800037e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000380:	242c      	movs	r4, #44	; 0x2c
 8000382:	193b      	adds	r3, r7, r4
 8000384:	0018      	movs	r0, r3
 8000386:	2334      	movs	r3, #52	; 0x34
 8000388:	001a      	movs	r2, r3
 800038a:	2100      	movs	r1, #0
 800038c:	f003 f959 	bl	8003642 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	231c      	movs	r3, #28
 8000392:	18fb      	adds	r3, r7, r3
 8000394:	0018      	movs	r0, r3
 8000396:	2310      	movs	r3, #16
 8000398:	001a      	movs	r2, r3
 800039a:	2100      	movs	r1, #0
 800039c:	f003 f951 	bl	8003642 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a0:	003b      	movs	r3, r7
 80003a2:	0018      	movs	r0, r3
 80003a4:	231c      	movs	r3, #28
 80003a6:	001a      	movs	r2, r3
 80003a8:	2100      	movs	r1, #0
 80003aa:	f003 f94a 	bl	8003642 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ae:	0021      	movs	r1, r4
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	2201      	movs	r2, #1
 80003b4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2201      	movs	r2, #1
 80003ba:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2202      	movs	r2, #2
 80003c0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2280      	movs	r2, #128	; 0x80
 80003c6:	0252      	lsls	r2, r2, #9
 80003c8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	22a0      	movs	r2, #160	; 0xa0
 80003ce:	0392      	lsls	r2, r2, #14
 80003d0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	2201      	movs	r2, #1
 80003d6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	0018      	movs	r0, r3
 80003dc:	f000 fdf2 	bl	8000fc4 <HAL_RCC_OscConfig>
 80003e0:	1e03      	subs	r3, r0, #0
 80003e2:	d001      	beq.n	80003e8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003e4:	f000 f922 	bl	800062c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e8:	211c      	movs	r1, #28
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	2207      	movs	r2, #7
 80003ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f0:	187b      	adds	r3, r7, r1
 80003f2:	2202      	movs	r2, #2
 80003f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	2200      	movs	r2, #0
 8000400:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000402:	187b      	adds	r3, r7, r1
 8000404:	2101      	movs	r1, #1
 8000406:	0018      	movs	r0, r3
 8000408:	f001 f962 	bl	80016d0 <HAL_RCC_ClockConfig>
 800040c:	1e03      	subs	r3, r0, #0
 800040e:	d001      	beq.n	8000414 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000410:	f000 f90c 	bl	800062c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000414:	003b      	movs	r3, r7
 8000416:	2202      	movs	r2, #2
 8000418:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800041a:	003b      	movs	r3, r7
 800041c:	2200      	movs	r2, #0
 800041e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000420:	003b      	movs	r3, r7
 8000422:	0018      	movs	r0, r3
 8000424:	f001 face 	bl	80019c4 <HAL_RCCEx_PeriphCLKConfig>
 8000428:	1e03      	subs	r3, r0, #0
 800042a:	d001      	beq.n	8000430 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800042c:	f000 f8fe 	bl	800062c <Error_Handler>
  }
}
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	b019      	add	sp, #100	; 0x64
 8000436:	bd90      	pop	{r4, r7, pc}

08000438 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800043c:	4b19      	ldr	r3, [pc, #100]	; (80004a4 <MX_SPI1_Init+0x6c>)
 800043e:	4a1a      	ldr	r2, [pc, #104]	; (80004a8 <MX_SPI1_Init+0x70>)
 8000440:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000442:	4b18      	ldr	r3, [pc, #96]	; (80004a4 <MX_SPI1_Init+0x6c>)
 8000444:	2200      	movs	r2, #0
 8000446:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000448:	4b16      	ldr	r3, [pc, #88]	; (80004a4 <MX_SPI1_Init+0x6c>)
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <MX_SPI1_Init+0x6c>)
 8000450:	22e0      	movs	r2, #224	; 0xe0
 8000452:	00d2      	lsls	r2, r2, #3
 8000454:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000456:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <MX_SPI1_Init+0x6c>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800045c:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <MX_SPI1_Init+0x6c>)
 800045e:	2200      	movs	r2, #0
 8000460:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000462:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <MX_SPI1_Init+0x6c>)
 8000464:	2280      	movs	r2, #128	; 0x80
 8000466:	0092      	lsls	r2, r2, #2
 8000468:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800046a:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <MX_SPI1_Init+0x6c>)
 800046c:	2200      	movs	r2, #0
 800046e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <MX_SPI1_Init+0x6c>)
 8000472:	2200      	movs	r2, #0
 8000474:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000476:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <MX_SPI1_Init+0x6c>)
 8000478:	2200      	movs	r2, #0
 800047a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800047c:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <MX_SPI1_Init+0x6c>)
 800047e:	2207      	movs	r2, #7
 8000480:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <MX_SPI1_Init+0x6c>)
 8000484:	2200      	movs	r2, #0
 8000486:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <MX_SPI1_Init+0x6c>)
 800048a:	2200      	movs	r2, #0
 800048c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800048e:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <MX_SPI1_Init+0x6c>)
 8000490:	0018      	movs	r0, r3
 8000492:	f001 fb97 	bl	8001bc4 <HAL_SPI_Init>
 8000496:	1e03      	subs	r3, r0, #0
 8000498:	d001      	beq.n	800049e <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 800049a:	f000 f8c7 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	200004b8 	.word	0x200004b8
 80004a8:	40013000 	.word	0x40013000

080004ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004b2:	4a15      	ldr	r2, [pc, #84]	; (8000508 <MX_USART2_UART_Init+0x5c>)
 80004b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004b6:	4b13      	ldr	r3, [pc, #76]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004b8:	22e1      	movs	r2, #225	; 0xe1
 80004ba:	0252      	lsls	r2, r2, #9
 80004bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004d2:	220c      	movs	r2, #12
 80004d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004d8:	2200      	movs	r2, #0
 80004da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004de:	2200      	movs	r2, #0
 80004e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004ee:	4b05      	ldr	r3, [pc, #20]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004f0:	0018      	movs	r0, r3
 80004f2:	f002 fa69 	bl	80029c8 <HAL_UART_Init>
 80004f6:	1e03      	subs	r3, r0, #0
 80004f8:	d001      	beq.n	80004fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004fa:	f000 f897 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	2000051c 	.word	0x2000051c
 8000508:	40004400 	.word	0x40004400

0800050c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b08b      	sub	sp, #44	; 0x2c
 8000510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	2414      	movs	r4, #20
 8000514:	193b      	adds	r3, r7, r4
 8000516:	0018      	movs	r0, r3
 8000518:	2314      	movs	r3, #20
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f003 f890 	bl	8003642 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	4b40      	ldr	r3, [pc, #256]	; (8000624 <MX_GPIO_Init+0x118>)
 8000524:	695a      	ldr	r2, [r3, #20]
 8000526:	4b3f      	ldr	r3, [pc, #252]	; (8000624 <MX_GPIO_Init+0x118>)
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	0309      	lsls	r1, r1, #12
 800052c:	430a      	orrs	r2, r1
 800052e:	615a      	str	r2, [r3, #20]
 8000530:	4b3c      	ldr	r3, [pc, #240]	; (8000624 <MX_GPIO_Init+0x118>)
 8000532:	695a      	ldr	r2, [r3, #20]
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	031b      	lsls	r3, r3, #12
 8000538:	4013      	ands	r3, r2
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800053e:	4b39      	ldr	r3, [pc, #228]	; (8000624 <MX_GPIO_Init+0x118>)
 8000540:	695a      	ldr	r2, [r3, #20]
 8000542:	4b38      	ldr	r3, [pc, #224]	; (8000624 <MX_GPIO_Init+0x118>)
 8000544:	2180      	movs	r1, #128	; 0x80
 8000546:	03c9      	lsls	r1, r1, #15
 8000548:	430a      	orrs	r2, r1
 800054a:	615a      	str	r2, [r3, #20]
 800054c:	4b35      	ldr	r3, [pc, #212]	; (8000624 <MX_GPIO_Init+0x118>)
 800054e:	695a      	ldr	r2, [r3, #20]
 8000550:	2380      	movs	r3, #128	; 0x80
 8000552:	03db      	lsls	r3, r3, #15
 8000554:	4013      	ands	r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b32      	ldr	r3, [pc, #200]	; (8000624 <MX_GPIO_Init+0x118>)
 800055c:	695a      	ldr	r2, [r3, #20]
 800055e:	4b31      	ldr	r3, [pc, #196]	; (8000624 <MX_GPIO_Init+0x118>)
 8000560:	2180      	movs	r1, #128	; 0x80
 8000562:	0289      	lsls	r1, r1, #10
 8000564:	430a      	orrs	r2, r1
 8000566:	615a      	str	r2, [r3, #20]
 8000568:	4b2e      	ldr	r3, [pc, #184]	; (8000624 <MX_GPIO_Init+0x118>)
 800056a:	695a      	ldr	r2, [r3, #20]
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	029b      	lsls	r3, r3, #10
 8000570:	4013      	ands	r3, r2
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000576:	4b2b      	ldr	r3, [pc, #172]	; (8000624 <MX_GPIO_Init+0x118>)
 8000578:	695a      	ldr	r2, [r3, #20]
 800057a:	4b2a      	ldr	r3, [pc, #168]	; (8000624 <MX_GPIO_Init+0x118>)
 800057c:	2180      	movs	r1, #128	; 0x80
 800057e:	02c9      	lsls	r1, r1, #11
 8000580:	430a      	orrs	r2, r1
 8000582:	615a      	str	r2, [r3, #20]
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <MX_GPIO_Init+0x118>)
 8000586:	695a      	ldr	r2, [r3, #20]
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	02db      	lsls	r3, r3, #11
 800058c:	4013      	ands	r3, r2
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000592:	2390      	movs	r3, #144	; 0x90
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	2200      	movs	r2, #0
 8000598:	2120      	movs	r1, #32
 800059a:	0018      	movs	r0, r3
 800059c:	f000 fcd8 	bl	8000f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	0192      	lsls	r2, r2, #6
 80005a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	2284      	movs	r2, #132	; 0x84
 80005ac:	0392      	lsls	r2, r2, #14
 80005ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	4a1b      	ldr	r2, [pc, #108]	; (8000628 <MX_GPIO_Init+0x11c>)
 80005ba:	0019      	movs	r1, r3
 80005bc:	0010      	movs	r0, r2
 80005be:	f000 fb4f 	bl	8000c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005c2:	193b      	adds	r3, r7, r4
 80005c4:	2210      	movs	r2, #16
 80005c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	2288      	movs	r2, #136	; 0x88
 80005cc:	0352      	lsls	r2, r2, #13
 80005ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	193a      	adds	r2, r7, r4
 80005d8:	2390      	movs	r3, #144	; 0x90
 80005da:	05db      	lsls	r3, r3, #23
 80005dc:	0011      	movs	r1, r2
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 fb3e 	bl	8000c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005e4:	0021      	movs	r1, r4
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2220      	movs	r2, #32
 80005ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2201      	movs	r2, #1
 80005f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005fe:	187a      	adds	r2, r7, r1
 8000600:	2390      	movs	r3, #144	; 0x90
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	0011      	movs	r1, r2
 8000606:	0018      	movs	r0, r3
 8000608:	f000 fb2a 	bl	8000c60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	2100      	movs	r1, #0
 8000610:	2007      	movs	r0, #7
 8000612:	f000 faf3 	bl	8000bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000616:	2007      	movs	r0, #7
 8000618:	f000 fb05 	bl	8000c26 <HAL_NVIC_EnableIRQ>

}
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	b00b      	add	sp, #44	; 0x2c
 8000622:	bd90      	pop	{r4, r7, pc}
 8000624:	40021000 	.word	0x40021000
 8000628:	48000800 	.word	0x48000800

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000634:	e7fe      	b.n	8000634 <Error_Handler+0x8>
	...

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <HAL_MspInit+0x44>)
 8000640:	699a      	ldr	r2, [r3, #24]
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <HAL_MspInit+0x44>)
 8000644:	2101      	movs	r1, #1
 8000646:	430a      	orrs	r2, r1
 8000648:	619a      	str	r2, [r3, #24]
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <HAL_MspInit+0x44>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	2201      	movs	r2, #1
 8000650:	4013      	ands	r3, r2
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_MspInit+0x44>)
 8000658:	69da      	ldr	r2, [r3, #28]
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <HAL_MspInit+0x44>)
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	0549      	lsls	r1, r1, #21
 8000660:	430a      	orrs	r2, r1
 8000662:	61da      	str	r2, [r3, #28]
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <HAL_MspInit+0x44>)
 8000666:	69da      	ldr	r2, [r3, #28]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	055b      	lsls	r3, r3, #21
 800066c:	4013      	ands	r3, r2
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b002      	add	sp, #8
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	40021000 	.word	0x40021000

08000680 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b08b      	sub	sp, #44	; 0x2c
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	2414      	movs	r4, #20
 800068a:	193b      	adds	r3, r7, r4
 800068c:	0018      	movs	r0, r3
 800068e:	2314      	movs	r3, #20
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f002 ffd5 	bl	8003642 <memset>
  if(hspi->Instance==SPI1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2e      	ldr	r2, [pc, #184]	; (8000758 <HAL_SPI_MspInit+0xd8>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d155      	bne.n	800074e <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006a2:	4b2e      	ldr	r3, [pc, #184]	; (800075c <HAL_SPI_MspInit+0xdc>)
 80006a4:	699a      	ldr	r2, [r3, #24]
 80006a6:	4b2d      	ldr	r3, [pc, #180]	; (800075c <HAL_SPI_MspInit+0xdc>)
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	0149      	lsls	r1, r1, #5
 80006ac:	430a      	orrs	r2, r1
 80006ae:	619a      	str	r2, [r3, #24]
 80006b0:	4b2a      	ldr	r3, [pc, #168]	; (800075c <HAL_SPI_MspInit+0xdc>)
 80006b2:	699a      	ldr	r2, [r3, #24]
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	015b      	lsls	r3, r3, #5
 80006b8:	4013      	ands	r3, r2
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b27      	ldr	r3, [pc, #156]	; (800075c <HAL_SPI_MspInit+0xdc>)
 80006c0:	695a      	ldr	r2, [r3, #20]
 80006c2:	4b26      	ldr	r3, [pc, #152]	; (800075c <HAL_SPI_MspInit+0xdc>)
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	0289      	lsls	r1, r1, #10
 80006c8:	430a      	orrs	r2, r1
 80006ca:	615a      	str	r2, [r3, #20]
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <HAL_SPI_MspInit+0xdc>)
 80006ce:	695a      	ldr	r2, [r3, #20]
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	029b      	lsls	r3, r3, #10
 80006d4:	4013      	ands	r3, r2
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	4b20      	ldr	r3, [pc, #128]	; (800075c <HAL_SPI_MspInit+0xdc>)
 80006dc:	695a      	ldr	r2, [r3, #20]
 80006de:	4b1f      	ldr	r3, [pc, #124]	; (800075c <HAL_SPI_MspInit+0xdc>)
 80006e0:	2180      	movs	r1, #128	; 0x80
 80006e2:	02c9      	lsls	r1, r1, #11
 80006e4:	430a      	orrs	r2, r1
 80006e6:	615a      	str	r2, [r3, #20]
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <HAL_SPI_MspInit+0xdc>)
 80006ea:	695a      	ldr	r2, [r3, #20]
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	02db      	lsls	r3, r3, #11
 80006f0:	4013      	ands	r3, r2
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	22c0      	movs	r2, #192	; 0xc0
 80006fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2202      	movs	r2, #2
 8000700:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000708:	193b      	adds	r3, r7, r4
 800070a:	2203      	movs	r2, #3
 800070c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	193a      	adds	r2, r7, r4
 8000716:	2390      	movs	r3, #144	; 0x90
 8000718:	05db      	lsls	r3, r3, #23
 800071a:	0011      	movs	r1, r2
 800071c:	0018      	movs	r0, r3
 800071e:	f000 fa9f 	bl	8000c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000722:	0021      	movs	r1, r4
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2208      	movs	r2, #8
 8000728:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2202      	movs	r2, #2
 800072e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2203      	movs	r2, #3
 800073a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000742:	187b      	adds	r3, r7, r1
 8000744:	4a06      	ldr	r2, [pc, #24]	; (8000760 <HAL_SPI_MspInit+0xe0>)
 8000746:	0019      	movs	r1, r3
 8000748:	0010      	movs	r0, r2
 800074a:	f000 fa89 	bl	8000c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	b00b      	add	sp, #44	; 0x2c
 8000754:	bd90      	pop	{r4, r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	40013000 	.word	0x40013000
 800075c:	40021000 	.word	0x40021000
 8000760:	48000400 	.word	0x48000400

08000764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b08b      	sub	sp, #44	; 0x2c
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	2414      	movs	r4, #20
 800076e:	193b      	adds	r3, r7, r4
 8000770:	0018      	movs	r0, r3
 8000772:	2314      	movs	r3, #20
 8000774:	001a      	movs	r2, r3
 8000776:	2100      	movs	r1, #0
 8000778:	f002 ff63 	bl	8003642 <memset>
  if(huart->Instance==USART2)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <HAL_UART_MspInit+0x90>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d132      	bne.n	80007ec <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <HAL_UART_MspInit+0x94>)
 8000788:	69da      	ldr	r2, [r3, #28]
 800078a:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <HAL_UART_MspInit+0x94>)
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	0289      	lsls	r1, r1, #10
 8000790:	430a      	orrs	r2, r1
 8000792:	61da      	str	r2, [r3, #28]
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <HAL_UART_MspInit+0x94>)
 8000796:	69da      	ldr	r2, [r3, #28]
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	029b      	lsls	r3, r3, #10
 800079c:	4013      	ands	r3, r2
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <HAL_UART_MspInit+0x94>)
 80007a4:	695a      	ldr	r2, [r3, #20]
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HAL_UART_MspInit+0x94>)
 80007a8:	2180      	movs	r1, #128	; 0x80
 80007aa:	0289      	lsls	r1, r1, #10
 80007ac:	430a      	orrs	r2, r1
 80007ae:	615a      	str	r2, [r3, #20]
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <HAL_UART_MspInit+0x94>)
 80007b2:	695a      	ldr	r2, [r3, #20]
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	029b      	lsls	r3, r3, #10
 80007b8:	4013      	ands	r3, r2
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007be:	0021      	movs	r1, r4
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	220c      	movs	r2, #12
 80007c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2202      	movs	r2, #2
 80007ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2201      	movs	r2, #1
 80007dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	187a      	adds	r2, r7, r1
 80007e0:	2390      	movs	r3, #144	; 0x90
 80007e2:	05db      	lsls	r3, r3, #23
 80007e4:	0011      	movs	r1, r2
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 fa3a 	bl	8000c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b00b      	add	sp, #44	; 0x2c
 80007f2:	bd90      	pop	{r4, r7, pc}
 80007f4:	40004400 	.word	0x40004400
 80007f8:	40021000 	.word	0x40021000

080007fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <NMI_Handler+0x4>

08000802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <HardFault_Handler+0x4>

08000808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000820:	f000 f924 	bl	8000a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800082e:	2010      	movs	r0, #16
 8000830:	f000 fbac 	bl	8000f8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	019b      	lsls	r3, r3, #6
 8000838:	0018      	movs	r0, r3
 800083a:	f000 fba7 	bl	8000f8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e00a      	b.n	800086c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000856:	e000      	b.n	800085a <_read+0x16>
 8000858:	bf00      	nop
 800085a:	0001      	movs	r1, r0
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	1c5a      	adds	r2, r3, #1
 8000860:	60ba      	str	r2, [r7, #8]
 8000862:	b2ca      	uxtb	r2, r1
 8000864:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	3301      	adds	r3, #1
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	429a      	cmp	r2, r3
 8000872:	dbf0      	blt.n	8000856 <_read+0x12>
	}

return len;
 8000874:	687b      	ldr	r3, [r7, #4]
}
 8000876:	0018      	movs	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	b006      	add	sp, #24
 800087c:	bd80      	pop	{r7, pc}

0800087e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b086      	sub	sp, #24
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	e009      	b.n	80008a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	60ba      	str	r2, [r7, #8]
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	0018      	movs	r0, r3
 800089a:	e000      	b.n	800089e <_write+0x20>
 800089c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	3301      	adds	r3, #1
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697a      	ldr	r2, [r7, #20]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	dbf1      	blt.n	8000890 <_write+0x12>
	}
	return len;
 80008ac:	687b      	ldr	r3, [r7, #4]
}
 80008ae:	0018      	movs	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b006      	add	sp, #24
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <_close>:

int _close(int file)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
	return -1;
 80008be:	2301      	movs	r3, #1
 80008c0:	425b      	negs	r3, r3
}
 80008c2:	0018      	movs	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}

080008ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
 80008d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	2280      	movs	r2, #128	; 0x80
 80008d8:	0192      	lsls	r2, r2, #6
 80008da:	605a      	str	r2, [r3, #4]
	return 0;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	0018      	movs	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <_isatty>:

int _isatty(int file)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
	return 1;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	0018      	movs	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b002      	add	sp, #8
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	return 0;
 8000904:	2300      	movs	r3, #0
}
 8000906:	0018      	movs	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	b004      	add	sp, #16
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000918:	4a14      	ldr	r2, [pc, #80]	; (800096c <_sbrk+0x5c>)
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <_sbrk+0x60>)
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <_sbrk+0x64>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d102      	bne.n	8000932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <_sbrk+0x64>)
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <_sbrk+0x68>)
 8000930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <_sbrk+0x64>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	18d3      	adds	r3, r2, r3
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	429a      	cmp	r2, r3
 800093e:	d207      	bcs.n	8000950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000940:	f002 fe3e 	bl	80035c0 <__errno>
 8000944:	0003      	movs	r3, r0
 8000946:	220c      	movs	r2, #12
 8000948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800094a:	2301      	movs	r3, #1
 800094c:	425b      	negs	r3, r3
 800094e:	e009      	b.n	8000964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <_sbrk+0x64>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <_sbrk+0x64>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	18d2      	adds	r2, r2, r3
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <_sbrk+0x64>)
 8000960:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000962:	68fb      	ldr	r3, [r7, #12]
}
 8000964:	0018      	movs	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	b006      	add	sp, #24
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20008000 	.word	0x20008000
 8000970:	00000400 	.word	0x00000400
 8000974:	2000048c 	.word	0x2000048c
 8000978:	200005b8 	.word	0x200005b8

0800097c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000988:	480d      	ldr	r0, [pc, #52]	; (80009c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800098a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800098e:	490e      	ldr	r1, [pc, #56]	; (80009c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000990:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <LoopForever+0xe>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000994:	e002      	b.n	800099c <LoopCopyDataInit>

08000996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099a:	3304      	adds	r3, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800099c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a0:	d3f9      	bcc.n	8000996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a2:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a4:	4c0b      	ldr	r4, [pc, #44]	; (80009d4 <LoopForever+0x16>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a8:	e001      	b.n	80009ae <LoopFillZerobss>

080009aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ac:	3204      	adds	r2, #4

080009ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b0:	d3fb      	bcc.n	80009aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009b2:	f7ff ffe3 	bl	800097c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009b6:	f002 fe09 	bl	80035cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ba:	f7ff fcc1 	bl	8000340 <main>

080009be <LoopForever>:

LoopForever:
    b LoopForever
 80009be:	e7fe      	b.n	80009be <LoopForever>
  ldr   r0, =_estack
 80009c0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80009c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c8:	20000470 	.word	0x20000470
  ldr r2, =_sidata
 80009cc:	080046e4 	.word	0x080046e4
  ldr r2, =_sbss
 80009d0:	20000470 	.word	0x20000470
  ldr r4, =_ebss
 80009d4:	200005b8 	.word	0x200005b8

080009d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d8:	e7fe      	b.n	80009d8 <ADC1_COMP_IRQHandler>
	...

080009dc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <HAL_Init+0x24>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_Init+0x24>)
 80009e6:	2110      	movs	r1, #16
 80009e8:	430a      	orrs	r2, r1
 80009ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009ec:	2000      	movs	r0, #0
 80009ee:	f000 f809 	bl	8000a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f2:	f7ff fe21 	bl	8000638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	0018      	movs	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	40022000 	.word	0x40022000

08000a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <HAL_InitTick+0x5c>)
 8000a0e:	681c      	ldr	r4, [r3, #0]
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <HAL_InitTick+0x60>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	0019      	movs	r1, r3
 8000a16:	23fa      	movs	r3, #250	; 0xfa
 8000a18:	0098      	lsls	r0, r3, #2
 8000a1a:	f7ff fb7d 	bl	8000118 <__udivsi3>
 8000a1e:	0003      	movs	r3, r0
 8000a20:	0019      	movs	r1, r3
 8000a22:	0020      	movs	r0, r4
 8000a24:	f7ff fb78 	bl	8000118 <__udivsi3>
 8000a28:	0003      	movs	r3, r0
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f000 f90b 	bl	8000c46 <HAL_SYSTICK_Config>
 8000a30:	1e03      	subs	r3, r0, #0
 8000a32:	d001      	beq.n	8000a38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	e00f      	b.n	8000a58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b03      	cmp	r3, #3
 8000a3c:	d80b      	bhi.n	8000a56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	2301      	movs	r3, #1
 8000a42:	425b      	negs	r3, r3
 8000a44:	2200      	movs	r2, #0
 8000a46:	0018      	movs	r0, r3
 8000a48:	f000 f8d8 	bl	8000bfc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_InitTick+0x64>)
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	0018      	movs	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b003      	add	sp, #12
 8000a5e:	bd90      	pop	{r4, r7, pc}
 8000a60:	20000000 	.word	0x20000000
 8000a64:	20000008 	.word	0x20000008
 8000a68:	20000004 	.word	0x20000004

08000a6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <HAL_IncTick+0x1c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	001a      	movs	r2, r3
 8000a76:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <HAL_IncTick+0x20>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	18d2      	adds	r2, r2, r3
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <HAL_IncTick+0x20>)
 8000a7e:	601a      	str	r2, [r3, #0]
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	200005a0 	.word	0x200005a0

08000a90 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  return uwTick;
 8000a94:	4b02      	ldr	r3, [pc, #8]	; (8000aa0 <HAL_GetTick+0x10>)
 8000a96:	681b      	ldr	r3, [r3, #0]
}
 8000a98:	0018      	movs	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	200005a0 	.word	0x200005a0

08000aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	0002      	movs	r2, r0
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ab6:	d809      	bhi.n	8000acc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	001a      	movs	r2, r3
 8000abe:	231f      	movs	r3, #31
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <__NVIC_EnableIRQ+0x30>)
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	4091      	lsls	r1, r2
 8000ac8:	000a      	movs	r2, r1
 8000aca:	601a      	str	r2, [r3, #0]
  }
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b002      	add	sp, #8
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	e000e100 	.word	0xe000e100

08000ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	0002      	movs	r2, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b7f      	cmp	r3, #127	; 0x7f
 8000aec:	d828      	bhi.n	8000b40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aee:	4a2f      	ldr	r2, [pc, #188]	; (8000bac <__NVIC_SetPriority+0xd4>)
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b25b      	sxtb	r3, r3
 8000af6:	089b      	lsrs	r3, r3, #2
 8000af8:	33c0      	adds	r3, #192	; 0xc0
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	589b      	ldr	r3, [r3, r2]
 8000afe:	1dfa      	adds	r2, r7, #7
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	0011      	movs	r1, r2
 8000b04:	2203      	movs	r2, #3
 8000b06:	400a      	ands	r2, r1
 8000b08:	00d2      	lsls	r2, r2, #3
 8000b0a:	21ff      	movs	r1, #255	; 0xff
 8000b0c:	4091      	lsls	r1, r2
 8000b0e:	000a      	movs	r2, r1
 8000b10:	43d2      	mvns	r2, r2
 8000b12:	401a      	ands	r2, r3
 8000b14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	22ff      	movs	r2, #255	; 0xff
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	0018      	movs	r0, r3
 8000b24:	2303      	movs	r3, #3
 8000b26:	4003      	ands	r3, r0
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2c:	481f      	ldr	r0, [pc, #124]	; (8000bac <__NVIC_SetPriority+0xd4>)
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	b25b      	sxtb	r3, r3
 8000b34:	089b      	lsrs	r3, r3, #2
 8000b36:	430a      	orrs	r2, r1
 8000b38:	33c0      	adds	r3, #192	; 0xc0
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b3e:	e031      	b.n	8000ba4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b40:	4a1b      	ldr	r2, [pc, #108]	; (8000bb0 <__NVIC_SetPriority+0xd8>)
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	0019      	movs	r1, r3
 8000b48:	230f      	movs	r3, #15
 8000b4a:	400b      	ands	r3, r1
 8000b4c:	3b08      	subs	r3, #8
 8000b4e:	089b      	lsrs	r3, r3, #2
 8000b50:	3306      	adds	r3, #6
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	18d3      	adds	r3, r2, r3
 8000b56:	3304      	adds	r3, #4
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	1dfa      	adds	r2, r7, #7
 8000b5c:	7812      	ldrb	r2, [r2, #0]
 8000b5e:	0011      	movs	r1, r2
 8000b60:	2203      	movs	r2, #3
 8000b62:	400a      	ands	r2, r1
 8000b64:	00d2      	lsls	r2, r2, #3
 8000b66:	21ff      	movs	r1, #255	; 0xff
 8000b68:	4091      	lsls	r1, r2
 8000b6a:	000a      	movs	r2, r1
 8000b6c:	43d2      	mvns	r2, r2
 8000b6e:	401a      	ands	r2, r3
 8000b70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	019b      	lsls	r3, r3, #6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	401a      	ands	r2, r3
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	0018      	movs	r0, r3
 8000b80:	2303      	movs	r3, #3
 8000b82:	4003      	ands	r3, r0
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b88:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <__NVIC_SetPriority+0xd8>)
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	001c      	movs	r4, r3
 8000b90:	230f      	movs	r3, #15
 8000b92:	4023      	ands	r3, r4
 8000b94:	3b08      	subs	r3, #8
 8000b96:	089b      	lsrs	r3, r3, #2
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	3306      	adds	r3, #6
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	18c3      	adds	r3, r0, r3
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	601a      	str	r2, [r3, #0]
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b003      	add	sp, #12
 8000baa:	bd90      	pop	{r4, r7, pc}
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	1e5a      	subs	r2, r3, #1
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	045b      	lsls	r3, r3, #17
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d301      	bcc.n	8000bcc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e010      	b.n	8000bee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <SysTick_Config+0x44>)
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	425b      	negs	r3, r3
 8000bd8:	2103      	movs	r1, #3
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f7ff ff7c 	bl	8000ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <SysTick_Config+0x44>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be6:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <SysTick_Config+0x44>)
 8000be8:	2207      	movs	r2, #7
 8000bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	0018      	movs	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b002      	add	sp, #8
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	210f      	movs	r1, #15
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	1c02      	adds	r2, r0, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b25b      	sxtb	r3, r3
 8000c16:	0011      	movs	r1, r2
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff ff5d 	bl	8000ad8 <__NVIC_SetPriority>
}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b004      	add	sp, #16
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	0002      	movs	r2, r0
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b25b      	sxtb	r3, r3
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f7ff ff33 	bl	8000aa4 <__NVIC_EnableIRQ>
}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b002      	add	sp, #8
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	0018      	movs	r0, r3
 8000c52:	f7ff ffaf 	bl	8000bb4 <SysTick_Config>
 8000c56:	0003      	movs	r3, r0
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b002      	add	sp, #8
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6e:	e155      	b.n	8000f1c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2101      	movs	r1, #1
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	4091      	lsls	r1, r2
 8000c7a:	000a      	movs	r2, r1
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d100      	bne.n	8000c88 <HAL_GPIO_Init+0x28>
 8000c86:	e146      	b.n	8000f16 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	4013      	ands	r3, r2
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d005      	beq.n	8000ca0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2203      	movs	r2, #3
 8000c9a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d130      	bne.n	8000d02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2203      	movs	r2, #3
 8000cac:	409a      	lsls	r2, r3
 8000cae:	0013      	movs	r3, r2
 8000cb0:	43da      	mvns	r2, r3
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	409a      	lsls	r2, r3
 8000cc2:	0013      	movs	r3, r2
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
 8000cdc:	0013      	movs	r3, r2
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	091b      	lsrs	r3, r3, #4
 8000cec:	2201      	movs	r2, #1
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
 8000cf4:	0013      	movs	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2203      	movs	r2, #3
 8000d08:	4013      	ands	r3, r2
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	d017      	beq.n	8000d3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2203      	movs	r2, #3
 8000d1a:	409a      	lsls	r2, r3
 8000d1c:	0013      	movs	r3, r2
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	0013      	movs	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2203      	movs	r2, #3
 8000d44:	4013      	ands	r3, r2
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d123      	bne.n	8000d92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	08da      	lsrs	r2, r3, #3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3208      	adds	r2, #8
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	58d3      	ldr	r3, [r2, r3]
 8000d56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	220f      	movs	r2, #15
 8000d62:	409a      	lsls	r2, r3
 8000d64:	0013      	movs	r3, r2
 8000d66:	43da      	mvns	r2, r3
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	691a      	ldr	r2, [r3, #16]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	2107      	movs	r1, #7
 8000d76:	400b      	ands	r3, r1
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	409a      	lsls	r2, r3
 8000d7c:	0013      	movs	r3, r2
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	08da      	lsrs	r2, r3, #3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3208      	adds	r2, #8
 8000d8c:	0092      	lsls	r2, r2, #2
 8000d8e:	6939      	ldr	r1, [r7, #16]
 8000d90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	43da      	mvns	r2, r3
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2203      	movs	r2, #3
 8000db0:	401a      	ands	r2, r3
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	409a      	lsls	r2, r3
 8000db8:	0013      	movs	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	23c0      	movs	r3, #192	; 0xc0
 8000dcc:	029b      	lsls	r3, r3, #10
 8000dce:	4013      	ands	r3, r2
 8000dd0:	d100      	bne.n	8000dd4 <HAL_GPIO_Init+0x174>
 8000dd2:	e0a0      	b.n	8000f16 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd4:	4b57      	ldr	r3, [pc, #348]	; (8000f34 <HAL_GPIO_Init+0x2d4>)
 8000dd6:	699a      	ldr	r2, [r3, #24]
 8000dd8:	4b56      	ldr	r3, [pc, #344]	; (8000f34 <HAL_GPIO_Init+0x2d4>)
 8000dda:	2101      	movs	r1, #1
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	619a      	str	r2, [r3, #24]
 8000de0:	4b54      	ldr	r3, [pc, #336]	; (8000f34 <HAL_GPIO_Init+0x2d4>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	2201      	movs	r2, #1
 8000de6:	4013      	ands	r3, r2
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dec:	4a52      	ldr	r2, [pc, #328]	; (8000f38 <HAL_GPIO_Init+0x2d8>)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	089b      	lsrs	r3, r3, #2
 8000df2:	3302      	adds	r3, #2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	589b      	ldr	r3, [r3, r2]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	4013      	ands	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	220f      	movs	r2, #15
 8000e04:	409a      	lsls	r2, r3
 8000e06:	0013      	movs	r3, r2
 8000e08:	43da      	mvns	r2, r3
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	2390      	movs	r3, #144	; 0x90
 8000e14:	05db      	lsls	r3, r3, #23
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d019      	beq.n	8000e4e <HAL_GPIO_Init+0x1ee>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a47      	ldr	r2, [pc, #284]	; (8000f3c <HAL_GPIO_Init+0x2dc>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d013      	beq.n	8000e4a <HAL_GPIO_Init+0x1ea>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a46      	ldr	r2, [pc, #280]	; (8000f40 <HAL_GPIO_Init+0x2e0>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d00d      	beq.n	8000e46 <HAL_GPIO_Init+0x1e6>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a45      	ldr	r2, [pc, #276]	; (8000f44 <HAL_GPIO_Init+0x2e4>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d007      	beq.n	8000e42 <HAL_GPIO_Init+0x1e2>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a44      	ldr	r2, [pc, #272]	; (8000f48 <HAL_GPIO_Init+0x2e8>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d101      	bne.n	8000e3e <HAL_GPIO_Init+0x1de>
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	e008      	b.n	8000e50 <HAL_GPIO_Init+0x1f0>
 8000e3e:	2305      	movs	r3, #5
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x1f0>
 8000e42:	2303      	movs	r3, #3
 8000e44:	e004      	b.n	8000e50 <HAL_GPIO_Init+0x1f0>
 8000e46:	2302      	movs	r3, #2
 8000e48:	e002      	b.n	8000e50 <HAL_GPIO_Init+0x1f0>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e000      	b.n	8000e50 <HAL_GPIO_Init+0x1f0>
 8000e4e:	2300      	movs	r3, #0
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	2103      	movs	r1, #3
 8000e54:	400a      	ands	r2, r1
 8000e56:	0092      	lsls	r2, r2, #2
 8000e58:	4093      	lsls	r3, r2
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e60:	4935      	ldr	r1, [pc, #212]	; (8000f38 <HAL_GPIO_Init+0x2d8>)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3302      	adds	r3, #2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e6e:	4b37      	ldr	r3, [pc, #220]	; (8000f4c <HAL_GPIO_Init+0x2ec>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	43da      	mvns	r2, r3
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	025b      	lsls	r3, r3, #9
 8000e86:	4013      	ands	r3, r2
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e92:	4b2e      	ldr	r3, [pc, #184]	; (8000f4c <HAL_GPIO_Init+0x2ec>)
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e98:	4b2c      	ldr	r3, [pc, #176]	; (8000f4c <HAL_GPIO_Init+0x2ec>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	43da      	mvns	r2, r3
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	029b      	lsls	r3, r3, #10
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ebc:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <HAL_GPIO_Init+0x2ec>)
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ec2:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <HAL_GPIO_Init+0x2ec>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	035b      	lsls	r3, r3, #13
 8000eda:	4013      	ands	r3, r2
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <HAL_GPIO_Init+0x2ec>)
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <HAL_GPIO_Init+0x2ec>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43da      	mvns	r2, r3
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	039b      	lsls	r3, r3, #14
 8000f04:	4013      	ands	r3, r2
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_GPIO_Init+0x2ec>)
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	40da      	lsrs	r2, r3
 8000f24:	1e13      	subs	r3, r2, #0
 8000f26:	d000      	beq.n	8000f2a <HAL_GPIO_Init+0x2ca>
 8000f28:	e6a2      	b.n	8000c70 <HAL_GPIO_Init+0x10>
  } 
}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b006      	add	sp, #24
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010000 	.word	0x40010000
 8000f3c:	48000400 	.word	0x48000400
 8000f40:	48000800 	.word	0x48000800
 8000f44:	48000c00 	.word	0x48000c00
 8000f48:	48001000 	.word	0x48001000
 8000f4c:	40010400 	.word	0x40010400

08000f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	0008      	movs	r0, r1
 8000f5a:	0011      	movs	r1, r2
 8000f5c:	1cbb      	adds	r3, r7, #2
 8000f5e:	1c02      	adds	r2, r0, #0
 8000f60:	801a      	strh	r2, [r3, #0]
 8000f62:	1c7b      	adds	r3, r7, #1
 8000f64:	1c0a      	adds	r2, r1, #0
 8000f66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f68:	1c7b      	adds	r3, r7, #1
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d004      	beq.n	8000f7a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f70:	1cbb      	adds	r3, r7, #2
 8000f72:	881a      	ldrh	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f78:	e003      	b.n	8000f82 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f7a:	1cbb      	adds	r3, r7, #2
 8000f7c:	881a      	ldrh	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b002      	add	sp, #8
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	0002      	movs	r2, r0
 8000f94:	1dbb      	adds	r3, r7, #6
 8000f96:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	1dba      	adds	r2, r7, #6
 8000f9e:	8812      	ldrh	r2, [r2, #0]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d008      	beq.n	8000fb6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000fa6:	1dba      	adds	r2, r7, #6
 8000fa8:	8812      	ldrh	r2, [r2, #0]
 8000faa:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fac:	1dbb      	adds	r3, r7, #6
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f7ff f9d2 	bl	800035a <HAL_GPIO_EXTI_Callback>
  }
}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b002      	add	sp, #8
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	40010400 	.word	0x40010400

08000fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d102      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	f000 fb76 	bl	80016c4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d100      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x20>
 8000fe2:	e08e      	b.n	8001102 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fe4:	4bc5      	ldr	r3, [pc, #788]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	220c      	movs	r2, #12
 8000fea:	4013      	ands	r3, r2
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	d00e      	beq.n	800100e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ff0:	4bc2      	ldr	r3, [pc, #776]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	220c      	movs	r2, #12
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d117      	bne.n	800102c <HAL_RCC_OscConfig+0x68>
 8000ffc:	4bbf      	ldr	r3, [pc, #764]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	23c0      	movs	r3, #192	; 0xc0
 8001002:	025b      	lsls	r3, r3, #9
 8001004:	401a      	ands	r2, r3
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	025b      	lsls	r3, r3, #9
 800100a:	429a      	cmp	r2, r3
 800100c:	d10e      	bne.n	800102c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100e:	4bbb      	ldr	r3, [pc, #748]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	029b      	lsls	r3, r3, #10
 8001016:	4013      	ands	r3, r2
 8001018:	d100      	bne.n	800101c <HAL_RCC_OscConfig+0x58>
 800101a:	e071      	b.n	8001100 <HAL_RCC_OscConfig+0x13c>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d000      	beq.n	8001026 <HAL_RCC_OscConfig+0x62>
 8001024:	e06c      	b.n	8001100 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	f000 fb4c 	bl	80016c4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d107      	bne.n	8001044 <HAL_RCC_OscConfig+0x80>
 8001034:	4bb1      	ldr	r3, [pc, #708]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4bb0      	ldr	r3, [pc, #704]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800103a:	2180      	movs	r1, #128	; 0x80
 800103c:	0249      	lsls	r1, r1, #9
 800103e:	430a      	orrs	r2, r1
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	e02f      	b.n	80010a4 <HAL_RCC_OscConfig+0xe0>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d10c      	bne.n	8001066 <HAL_RCC_OscConfig+0xa2>
 800104c:	4bab      	ldr	r3, [pc, #684]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4baa      	ldr	r3, [pc, #680]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001052:	49ab      	ldr	r1, [pc, #684]	; (8001300 <HAL_RCC_OscConfig+0x33c>)
 8001054:	400a      	ands	r2, r1
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	4ba8      	ldr	r3, [pc, #672]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4ba7      	ldr	r3, [pc, #668]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800105e:	49a9      	ldr	r1, [pc, #676]	; (8001304 <HAL_RCC_OscConfig+0x340>)
 8001060:	400a      	ands	r2, r1
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	e01e      	b.n	80010a4 <HAL_RCC_OscConfig+0xe0>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b05      	cmp	r3, #5
 800106c:	d10e      	bne.n	800108c <HAL_RCC_OscConfig+0xc8>
 800106e:	4ba3      	ldr	r3, [pc, #652]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4ba2      	ldr	r3, [pc, #648]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001074:	2180      	movs	r1, #128	; 0x80
 8001076:	02c9      	lsls	r1, r1, #11
 8001078:	430a      	orrs	r2, r1
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	4b9f      	ldr	r3, [pc, #636]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b9e      	ldr	r3, [pc, #632]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001082:	2180      	movs	r1, #128	; 0x80
 8001084:	0249      	lsls	r1, r1, #9
 8001086:	430a      	orrs	r2, r1
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	e00b      	b.n	80010a4 <HAL_RCC_OscConfig+0xe0>
 800108c:	4b9b      	ldr	r3, [pc, #620]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b9a      	ldr	r3, [pc, #616]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001092:	499b      	ldr	r1, [pc, #620]	; (8001300 <HAL_RCC_OscConfig+0x33c>)
 8001094:	400a      	ands	r2, r1
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	4b98      	ldr	r3, [pc, #608]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b97      	ldr	r3, [pc, #604]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800109e:	4999      	ldr	r1, [pc, #612]	; (8001304 <HAL_RCC_OscConfig+0x340>)
 80010a0:	400a      	ands	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d014      	beq.n	80010d6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ac:	f7ff fcf0 	bl	8000a90 <HAL_GetTick>
 80010b0:	0003      	movs	r3, r0
 80010b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b6:	f7ff fceb 	bl	8000a90 <HAL_GetTick>
 80010ba:	0002      	movs	r2, r0
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b64      	cmp	r3, #100	; 0x64
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e2fd      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c8:	4b8c      	ldr	r3, [pc, #560]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	029b      	lsls	r3, r3, #10
 80010d0:	4013      	ands	r3, r2
 80010d2:	d0f0      	beq.n	80010b6 <HAL_RCC_OscConfig+0xf2>
 80010d4:	e015      	b.n	8001102 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff fcdb 	bl	8000a90 <HAL_GetTick>
 80010da:	0003      	movs	r3, r0
 80010dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010e0:	f7ff fcd6 	bl	8000a90 <HAL_GetTick>
 80010e4:	0002      	movs	r2, r0
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b64      	cmp	r3, #100	; 0x64
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e2e8      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f2:	4b82      	ldr	r3, [pc, #520]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	029b      	lsls	r3, r3, #10
 80010fa:	4013      	ands	r3, r2
 80010fc:	d1f0      	bne.n	80010e0 <HAL_RCC_OscConfig+0x11c>
 80010fe:	e000      	b.n	8001102 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001100:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2202      	movs	r2, #2
 8001108:	4013      	ands	r3, r2
 800110a:	d100      	bne.n	800110e <HAL_RCC_OscConfig+0x14a>
 800110c:	e06c      	b.n	80011e8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800110e:	4b7b      	ldr	r3, [pc, #492]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	220c      	movs	r2, #12
 8001114:	4013      	ands	r3, r2
 8001116:	d00e      	beq.n	8001136 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001118:	4b78      	ldr	r3, [pc, #480]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	220c      	movs	r2, #12
 800111e:	4013      	ands	r3, r2
 8001120:	2b08      	cmp	r3, #8
 8001122:	d11f      	bne.n	8001164 <HAL_RCC_OscConfig+0x1a0>
 8001124:	4b75      	ldr	r3, [pc, #468]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	23c0      	movs	r3, #192	; 0xc0
 800112a:	025b      	lsls	r3, r3, #9
 800112c:	401a      	ands	r2, r3
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	429a      	cmp	r2, r3
 8001134:	d116      	bne.n	8001164 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001136:	4b71      	ldr	r3, [pc, #452]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2202      	movs	r2, #2
 800113c:	4013      	ands	r3, r2
 800113e:	d005      	beq.n	800114c <HAL_RCC_OscConfig+0x188>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d001      	beq.n	800114c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e2bb      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114c:	4b6b      	ldr	r3, [pc, #428]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	22f8      	movs	r2, #248	; 0xf8
 8001152:	4393      	bics	r3, r2
 8001154:	0019      	movs	r1, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	00da      	lsls	r2, r3, #3
 800115c:	4b67      	ldr	r3, [pc, #412]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800115e:	430a      	orrs	r2, r1
 8001160:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001162:	e041      	b.n	80011e8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d024      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800116c:	4b63      	ldr	r3, [pc, #396]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b62      	ldr	r3, [pc, #392]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001172:	2101      	movs	r1, #1
 8001174:	430a      	orrs	r2, r1
 8001176:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fc8a 	bl	8000a90 <HAL_GetTick>
 800117c:	0003      	movs	r3, r0
 800117e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001182:	f7ff fc85 	bl	8000a90 <HAL_GetTick>
 8001186:	0002      	movs	r2, r0
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e297      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001194:	4b59      	ldr	r3, [pc, #356]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2202      	movs	r2, #2
 800119a:	4013      	ands	r3, r2
 800119c:	d0f1      	beq.n	8001182 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119e:	4b57      	ldr	r3, [pc, #348]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	22f8      	movs	r2, #248	; 0xf8
 80011a4:	4393      	bics	r3, r2
 80011a6:	0019      	movs	r1, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	00da      	lsls	r2, r3, #3
 80011ae:	4b53      	ldr	r3, [pc, #332]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 80011b0:	430a      	orrs	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	e018      	b.n	80011e8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b6:	4b51      	ldr	r3, [pc, #324]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	4b50      	ldr	r3, [pc, #320]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 80011bc:	2101      	movs	r1, #1
 80011be:	438a      	bics	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c2:	f7ff fc65 	bl	8000a90 <HAL_GetTick>
 80011c6:	0003      	movs	r3, r0
 80011c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011cc:	f7ff fc60 	bl	8000a90 <HAL_GetTick>
 80011d0:	0002      	movs	r2, r0
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e272      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011de:	4b47      	ldr	r3, [pc, #284]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2202      	movs	r2, #2
 80011e4:	4013      	ands	r3, r2
 80011e6:	d1f1      	bne.n	80011cc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2208      	movs	r2, #8
 80011ee:	4013      	ands	r3, r2
 80011f0:	d036      	beq.n	8001260 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d019      	beq.n	800122e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011fa:	4b40      	ldr	r3, [pc, #256]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 80011fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011fe:	4b3f      	ldr	r3, [pc, #252]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001200:	2101      	movs	r1, #1
 8001202:	430a      	orrs	r2, r1
 8001204:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001206:	f7ff fc43 	bl	8000a90 <HAL_GetTick>
 800120a:	0003      	movs	r3, r0
 800120c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001210:	f7ff fc3e 	bl	8000a90 <HAL_GetTick>
 8001214:	0002      	movs	r2, r0
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e250      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001222:	4b36      	ldr	r3, [pc, #216]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	2202      	movs	r2, #2
 8001228:	4013      	ands	r3, r2
 800122a:	d0f1      	beq.n	8001210 <HAL_RCC_OscConfig+0x24c>
 800122c:	e018      	b.n	8001260 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001232:	4b32      	ldr	r3, [pc, #200]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001234:	2101      	movs	r1, #1
 8001236:	438a      	bics	r2, r1
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123a:	f7ff fc29 	bl	8000a90 <HAL_GetTick>
 800123e:	0003      	movs	r3, r0
 8001240:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001244:	f7ff fc24 	bl	8000a90 <HAL_GetTick>
 8001248:	0002      	movs	r2, r0
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e236      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001256:	4b29      	ldr	r3, [pc, #164]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125a:	2202      	movs	r2, #2
 800125c:	4013      	ands	r3, r2
 800125e:	d1f1      	bne.n	8001244 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2204      	movs	r2, #4
 8001266:	4013      	ands	r3, r2
 8001268:	d100      	bne.n	800126c <HAL_RCC_OscConfig+0x2a8>
 800126a:	e0b5      	b.n	80013d8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800126c:	201f      	movs	r0, #31
 800126e:	183b      	adds	r3, r7, r0
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001276:	69da      	ldr	r2, [r3, #28]
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	055b      	lsls	r3, r3, #21
 800127c:	4013      	ands	r3, r2
 800127e:	d110      	bne.n	80012a2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001282:	69da      	ldr	r2, [r3, #28]
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001286:	2180      	movs	r1, #128	; 0x80
 8001288:	0549      	lsls	r1, r1, #21
 800128a:	430a      	orrs	r2, r1
 800128c:	61da      	str	r2, [r3, #28]
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001290:	69da      	ldr	r2, [r3, #28]
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	055b      	lsls	r3, r3, #21
 8001296:	4013      	ands	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800129c:	183b      	adds	r3, r7, r0
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_RCC_OscConfig+0x344>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4013      	ands	r3, r2
 80012ac:	d11a      	bne.n	80012e4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <HAL_RCC_OscConfig+0x344>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_RCC_OscConfig+0x344>)
 80012b4:	2180      	movs	r1, #128	; 0x80
 80012b6:	0049      	lsls	r1, r1, #1
 80012b8:	430a      	orrs	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012bc:	f7ff fbe8 	bl	8000a90 <HAL_GetTick>
 80012c0:	0003      	movs	r3, r0
 80012c2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c6:	f7ff fbe3 	bl	8000a90 <HAL_GetTick>
 80012ca:	0002      	movs	r2, r0
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b64      	cmp	r3, #100	; 0x64
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e1f5      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_RCC_OscConfig+0x344>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4013      	ands	r3, r2
 80012e2:	d0f0      	beq.n	80012c6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d10f      	bne.n	800130c <HAL_RCC_OscConfig+0x348>
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 80012ee:	6a1a      	ldr	r2, [r3, #32]
 80012f0:	4b02      	ldr	r3, [pc, #8]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 80012f2:	2101      	movs	r1, #1
 80012f4:	430a      	orrs	r2, r1
 80012f6:	621a      	str	r2, [r3, #32]
 80012f8:	e036      	b.n	8001368 <HAL_RCC_OscConfig+0x3a4>
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	40021000 	.word	0x40021000
 8001300:	fffeffff 	.word	0xfffeffff
 8001304:	fffbffff 	.word	0xfffbffff
 8001308:	40007000 	.word	0x40007000
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10c      	bne.n	800132e <HAL_RCC_OscConfig+0x36a>
 8001314:	4bca      	ldr	r3, [pc, #808]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001316:	6a1a      	ldr	r2, [r3, #32]
 8001318:	4bc9      	ldr	r3, [pc, #804]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800131a:	2101      	movs	r1, #1
 800131c:	438a      	bics	r2, r1
 800131e:	621a      	str	r2, [r3, #32]
 8001320:	4bc7      	ldr	r3, [pc, #796]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001322:	6a1a      	ldr	r2, [r3, #32]
 8001324:	4bc6      	ldr	r3, [pc, #792]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001326:	2104      	movs	r1, #4
 8001328:	438a      	bics	r2, r1
 800132a:	621a      	str	r2, [r3, #32]
 800132c:	e01c      	b.n	8001368 <HAL_RCC_OscConfig+0x3a4>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b05      	cmp	r3, #5
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0x38c>
 8001336:	4bc2      	ldr	r3, [pc, #776]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001338:	6a1a      	ldr	r2, [r3, #32]
 800133a:	4bc1      	ldr	r3, [pc, #772]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800133c:	2104      	movs	r1, #4
 800133e:	430a      	orrs	r2, r1
 8001340:	621a      	str	r2, [r3, #32]
 8001342:	4bbf      	ldr	r3, [pc, #764]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001344:	6a1a      	ldr	r2, [r3, #32]
 8001346:	4bbe      	ldr	r3, [pc, #760]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001348:	2101      	movs	r1, #1
 800134a:	430a      	orrs	r2, r1
 800134c:	621a      	str	r2, [r3, #32]
 800134e:	e00b      	b.n	8001368 <HAL_RCC_OscConfig+0x3a4>
 8001350:	4bbb      	ldr	r3, [pc, #748]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001352:	6a1a      	ldr	r2, [r3, #32]
 8001354:	4bba      	ldr	r3, [pc, #744]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001356:	2101      	movs	r1, #1
 8001358:	438a      	bics	r2, r1
 800135a:	621a      	str	r2, [r3, #32]
 800135c:	4bb8      	ldr	r3, [pc, #736]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800135e:	6a1a      	ldr	r2, [r3, #32]
 8001360:	4bb7      	ldr	r3, [pc, #732]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001362:	2104      	movs	r1, #4
 8001364:	438a      	bics	r2, r1
 8001366:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d014      	beq.n	800139a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001370:	f7ff fb8e 	bl	8000a90 <HAL_GetTick>
 8001374:	0003      	movs	r3, r0
 8001376:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001378:	e009      	b.n	800138e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800137a:	f7ff fb89 	bl	8000a90 <HAL_GetTick>
 800137e:	0002      	movs	r2, r0
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	4aaf      	ldr	r2, [pc, #700]	; (8001644 <HAL_RCC_OscConfig+0x680>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e19a      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138e:	4bac      	ldr	r3, [pc, #688]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	2202      	movs	r2, #2
 8001394:	4013      	ands	r3, r2
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0x3b6>
 8001398:	e013      	b.n	80013c2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139a:	f7ff fb79 	bl	8000a90 <HAL_GetTick>
 800139e:	0003      	movs	r3, r0
 80013a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a2:	e009      	b.n	80013b8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a4:	f7ff fb74 	bl	8000a90 <HAL_GetTick>
 80013a8:	0002      	movs	r2, r0
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	4aa5      	ldr	r2, [pc, #660]	; (8001644 <HAL_RCC_OscConfig+0x680>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e185      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b8:	4ba1      	ldr	r3, [pc, #644]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	2202      	movs	r2, #2
 80013be:	4013      	ands	r3, r2
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013c2:	231f      	movs	r3, #31
 80013c4:	18fb      	adds	r3, r7, r3
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d105      	bne.n	80013d8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013cc:	4b9c      	ldr	r3, [pc, #624]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80013ce:	69da      	ldr	r2, [r3, #28]
 80013d0:	4b9b      	ldr	r3, [pc, #620]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80013d2:	499d      	ldr	r1, [pc, #628]	; (8001648 <HAL_RCC_OscConfig+0x684>)
 80013d4:	400a      	ands	r2, r1
 80013d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2210      	movs	r2, #16
 80013de:	4013      	ands	r3, r2
 80013e0:	d063      	beq.n	80014aa <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d12a      	bne.n	8001440 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013ea:	4b95      	ldr	r3, [pc, #596]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80013ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ee:	4b94      	ldr	r3, [pc, #592]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80013f0:	2104      	movs	r1, #4
 80013f2:	430a      	orrs	r2, r1
 80013f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80013f6:	4b92      	ldr	r3, [pc, #584]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80013f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013fa:	4b91      	ldr	r3, [pc, #580]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80013fc:	2101      	movs	r1, #1
 80013fe:	430a      	orrs	r2, r1
 8001400:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001402:	f7ff fb45 	bl	8000a90 <HAL_GetTick>
 8001406:	0003      	movs	r3, r0
 8001408:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800140c:	f7ff fb40 	bl	8000a90 <HAL_GetTick>
 8001410:	0002      	movs	r2, r0
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e152      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800141e:	4b88      	ldr	r3, [pc, #544]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001422:	2202      	movs	r2, #2
 8001424:	4013      	ands	r3, r2
 8001426:	d0f1      	beq.n	800140c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001428:	4b85      	ldr	r3, [pc, #532]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800142a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142c:	22f8      	movs	r2, #248	; 0xf8
 800142e:	4393      	bics	r3, r2
 8001430:	0019      	movs	r1, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	00da      	lsls	r2, r3, #3
 8001438:	4b81      	ldr	r3, [pc, #516]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800143a:	430a      	orrs	r2, r1
 800143c:	635a      	str	r2, [r3, #52]	; 0x34
 800143e:	e034      	b.n	80014aa <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	3305      	adds	r3, #5
 8001446:	d111      	bne.n	800146c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001448:	4b7d      	ldr	r3, [pc, #500]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800144a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800144c:	4b7c      	ldr	r3, [pc, #496]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800144e:	2104      	movs	r1, #4
 8001450:	438a      	bics	r2, r1
 8001452:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001454:	4b7a      	ldr	r3, [pc, #488]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001458:	22f8      	movs	r2, #248	; 0xf8
 800145a:	4393      	bics	r3, r2
 800145c:	0019      	movs	r1, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	00da      	lsls	r2, r3, #3
 8001464:	4b76      	ldr	r3, [pc, #472]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001466:	430a      	orrs	r2, r1
 8001468:	635a      	str	r2, [r3, #52]	; 0x34
 800146a:	e01e      	b.n	80014aa <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800146c:	4b74      	ldr	r3, [pc, #464]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800146e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001470:	4b73      	ldr	r3, [pc, #460]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001472:	2104      	movs	r1, #4
 8001474:	430a      	orrs	r2, r1
 8001476:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001478:	4b71      	ldr	r3, [pc, #452]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800147a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800147c:	4b70      	ldr	r3, [pc, #448]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800147e:	2101      	movs	r1, #1
 8001480:	438a      	bics	r2, r1
 8001482:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001484:	f7ff fb04 	bl	8000a90 <HAL_GetTick>
 8001488:	0003      	movs	r3, r0
 800148a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800148e:	f7ff faff 	bl	8000a90 <HAL_GetTick>
 8001492:	0002      	movs	r2, r0
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e111      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014a0:	4b67      	ldr	r3, [pc, #412]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80014a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a4:	2202      	movs	r2, #2
 80014a6:	4013      	ands	r3, r2
 80014a8:	d1f1      	bne.n	800148e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2220      	movs	r2, #32
 80014b0:	4013      	ands	r3, r2
 80014b2:	d05c      	beq.n	800156e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014b4:	4b62      	ldr	r3, [pc, #392]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	220c      	movs	r2, #12
 80014ba:	4013      	ands	r3, r2
 80014bc:	2b0c      	cmp	r3, #12
 80014be:	d00e      	beq.n	80014de <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014c0:	4b5f      	ldr	r3, [pc, #380]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	220c      	movs	r2, #12
 80014c6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d114      	bne.n	80014f6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014cc:	4b5c      	ldr	r3, [pc, #368]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	23c0      	movs	r3, #192	; 0xc0
 80014d2:	025b      	lsls	r3, r3, #9
 80014d4:	401a      	ands	r2, r3
 80014d6:	23c0      	movs	r3, #192	; 0xc0
 80014d8:	025b      	lsls	r3, r3, #9
 80014da:	429a      	cmp	r2, r3
 80014dc:	d10b      	bne.n	80014f6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80014de:	4b58      	ldr	r3, [pc, #352]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80014e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	025b      	lsls	r3, r3, #9
 80014e6:	4013      	ands	r3, r2
 80014e8:	d040      	beq.n	800156c <HAL_RCC_OscConfig+0x5a8>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d03c      	beq.n	800156c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e0e6      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d01b      	beq.n	8001536 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80014fe:	4b50      	ldr	r3, [pc, #320]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001502:	4b4f      	ldr	r3, [pc, #316]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	0249      	lsls	r1, r1, #9
 8001508:	430a      	orrs	r2, r1
 800150a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff fac0 	bl	8000a90 <HAL_GetTick>
 8001510:	0003      	movs	r3, r0
 8001512:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001516:	f7ff fabb 	bl	8000a90 <HAL_GetTick>
 800151a:	0002      	movs	r2, r0
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e0cd      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001528:	4b45      	ldr	r3, [pc, #276]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800152a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	025b      	lsls	r3, r3, #9
 8001530:	4013      	ands	r3, r2
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x552>
 8001534:	e01b      	b.n	800156e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001536:	4b42      	ldr	r3, [pc, #264]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800153a:	4b41      	ldr	r3, [pc, #260]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800153c:	4943      	ldr	r1, [pc, #268]	; (800164c <HAL_RCC_OscConfig+0x688>)
 800153e:	400a      	ands	r2, r1
 8001540:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001542:	f7ff faa5 	bl	8000a90 <HAL_GetTick>
 8001546:	0003      	movs	r3, r0
 8001548:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800154c:	f7ff faa0 	bl	8000a90 <HAL_GetTick>
 8001550:	0002      	movs	r2, r0
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e0b2      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800155e:	4b38      	ldr	r3, [pc, #224]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	025b      	lsls	r3, r3, #9
 8001566:	4013      	ands	r3, r2
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x588>
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800156c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	2b00      	cmp	r3, #0
 8001574:	d100      	bne.n	8001578 <HAL_RCC_OscConfig+0x5b4>
 8001576:	e0a4      	b.n	80016c2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001578:	4b31      	ldr	r3, [pc, #196]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	220c      	movs	r2, #12
 800157e:	4013      	ands	r3, r2
 8001580:	2b08      	cmp	r3, #8
 8001582:	d100      	bne.n	8001586 <HAL_RCC_OscConfig+0x5c2>
 8001584:	e078      	b.n	8001678 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	2b02      	cmp	r3, #2
 800158c:	d14c      	bne.n	8001628 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158e:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001594:	492e      	ldr	r1, [pc, #184]	; (8001650 <HAL_RCC_OscConfig+0x68c>)
 8001596:	400a      	ands	r2, r1
 8001598:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff fa79 	bl	8000a90 <HAL_GetTick>
 800159e:	0003      	movs	r3, r0
 80015a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a4:	f7ff fa74 	bl	8000a90 <HAL_GetTick>
 80015a8:	0002      	movs	r2, r0
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e086      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b6:	4b22      	ldr	r3, [pc, #136]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	049b      	lsls	r3, r3, #18
 80015be:	4013      	ands	r3, r2
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c2:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	220f      	movs	r2, #15
 80015c8:	4393      	bics	r3, r2
 80015ca:	0019      	movs	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80015d2:	430a      	orrs	r2, r1
 80015d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80015d6:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <HAL_RCC_OscConfig+0x690>)
 80015dc:	4013      	ands	r3, r2
 80015de:	0019      	movs	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	431a      	orrs	r2, r3
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80015ec:	430a      	orrs	r2, r1
 80015ee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80015f6:	2180      	movs	r1, #128	; 0x80
 80015f8:	0449      	lsls	r1, r1, #17
 80015fa:	430a      	orrs	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff fa47 	bl	8000a90 <HAL_GetTick>
 8001602:	0003      	movs	r3, r0
 8001604:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001608:	f7ff fa42 	bl	8000a90 <HAL_GetTick>
 800160c:	0002      	movs	r2, r0
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e054      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	049b      	lsls	r3, r3, #18
 8001622:	4013      	ands	r3, r2
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x644>
 8001626:	e04c      	b.n	80016c2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800162e:	4908      	ldr	r1, [pc, #32]	; (8001650 <HAL_RCC_OscConfig+0x68c>)
 8001630:	400a      	ands	r2, r1
 8001632:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff fa2c 	bl	8000a90 <HAL_GetTick>
 8001638:	0003      	movs	r3, r0
 800163a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163c:	e015      	b.n	800166a <HAL_RCC_OscConfig+0x6a6>
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	40021000 	.word	0x40021000
 8001644:	00001388 	.word	0x00001388
 8001648:	efffffff 	.word	0xefffffff
 800164c:	fffeffff 	.word	0xfffeffff
 8001650:	feffffff 	.word	0xfeffffff
 8001654:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001658:	f7ff fa1a 	bl	8000a90 <HAL_GetTick>
 800165c:	0002      	movs	r2, r0
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e02c      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800166a:	4b18      	ldr	r3, [pc, #96]	; (80016cc <HAL_RCC_OscConfig+0x708>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	049b      	lsls	r3, r3, #18
 8001672:	4013      	ands	r3, r2
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x694>
 8001676:	e024      	b.n	80016c2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	2b01      	cmp	r3, #1
 800167e:	d101      	bne.n	8001684 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e01f      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_RCC_OscConfig+0x708>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_RCC_OscConfig+0x708>)
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	23c0      	movs	r3, #192	; 0xc0
 8001694:	025b      	lsls	r3, r3, #9
 8001696:	401a      	ands	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	429a      	cmp	r2, r3
 800169e:	d10e      	bne.n	80016be <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	220f      	movs	r2, #15
 80016a4:	401a      	ands	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d107      	bne.n	80016be <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	23f0      	movs	r3, #240	; 0xf0
 80016b2:	039b      	lsls	r3, r3, #14
 80016b4:	401a      	ands	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d001      	beq.n	80016c2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	0018      	movs	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b008      	add	sp, #32
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0bf      	b.n	8001864 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016e4:	4b61      	ldr	r3, [pc, #388]	; (800186c <HAL_RCC_ClockConfig+0x19c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2201      	movs	r2, #1
 80016ea:	4013      	ands	r3, r2
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d911      	bls.n	8001716 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f2:	4b5e      	ldr	r3, [pc, #376]	; (800186c <HAL_RCC_ClockConfig+0x19c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2201      	movs	r2, #1
 80016f8:	4393      	bics	r3, r2
 80016fa:	0019      	movs	r1, r3
 80016fc:	4b5b      	ldr	r3, [pc, #364]	; (800186c <HAL_RCC_ClockConfig+0x19c>)
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001704:	4b59      	ldr	r3, [pc, #356]	; (800186c <HAL_RCC_ClockConfig+0x19c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2201      	movs	r2, #1
 800170a:	4013      	ands	r3, r2
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d001      	beq.n	8001716 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e0a6      	b.n	8001864 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2202      	movs	r2, #2
 800171c:	4013      	ands	r3, r2
 800171e:	d015      	beq.n	800174c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2204      	movs	r2, #4
 8001726:	4013      	ands	r3, r2
 8001728:	d006      	beq.n	8001738 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800172a:	4b51      	ldr	r3, [pc, #324]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	4b50      	ldr	r3, [pc, #320]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 8001730:	21e0      	movs	r1, #224	; 0xe0
 8001732:	00c9      	lsls	r1, r1, #3
 8001734:	430a      	orrs	r2, r1
 8001736:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001738:	4b4d      	ldr	r3, [pc, #308]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	22f0      	movs	r2, #240	; 0xf0
 800173e:	4393      	bics	r3, r2
 8001740:	0019      	movs	r1, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	4b4a      	ldr	r3, [pc, #296]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 8001748:	430a      	orrs	r2, r1
 800174a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2201      	movs	r2, #1
 8001752:	4013      	ands	r3, r2
 8001754:	d04c      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	4b44      	ldr	r3, [pc, #272]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	029b      	lsls	r3, r3, #10
 8001766:	4013      	ands	r3, r2
 8001768:	d120      	bne.n	80017ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e07a      	b.n	8001864 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001776:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	049b      	lsls	r3, r3, #18
 800177e:	4013      	ands	r3, r2
 8001780:	d114      	bne.n	80017ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e06e      	b.n	8001864 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b03      	cmp	r3, #3
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800178e:	4b38      	ldr	r3, [pc, #224]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 8001790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	025b      	lsls	r3, r3, #9
 8001796:	4013      	ands	r3, r2
 8001798:	d108      	bne.n	80017ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e062      	b.n	8001864 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179e:	4b34      	ldr	r3, [pc, #208]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2202      	movs	r2, #2
 80017a4:	4013      	ands	r3, r2
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e05b      	b.n	8001864 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ac:	4b30      	ldr	r3, [pc, #192]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2203      	movs	r2, #3
 80017b2:	4393      	bics	r3, r2
 80017b4:	0019      	movs	r1, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 80017bc:	430a      	orrs	r2, r1
 80017be:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c0:	f7ff f966 	bl	8000a90 <HAL_GetTick>
 80017c4:	0003      	movs	r3, r0
 80017c6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c8:	e009      	b.n	80017de <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ca:	f7ff f961 	bl	8000a90 <HAL_GetTick>
 80017ce:	0002      	movs	r2, r0
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	4a27      	ldr	r2, [pc, #156]	; (8001874 <HAL_RCC_ClockConfig+0x1a4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e042      	b.n	8001864 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017de:	4b24      	ldr	r3, [pc, #144]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	220c      	movs	r2, #12
 80017e4:	401a      	ands	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d1ec      	bne.n	80017ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017f0:	4b1e      	ldr	r3, [pc, #120]	; (800186c <HAL_RCC_ClockConfig+0x19c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2201      	movs	r2, #1
 80017f6:	4013      	ands	r3, r2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d211      	bcs.n	8001822 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_RCC_ClockConfig+0x19c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2201      	movs	r2, #1
 8001804:	4393      	bics	r3, r2
 8001806:	0019      	movs	r1, r3
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_RCC_ClockConfig+0x19c>)
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001810:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_RCC_ClockConfig+0x19c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2201      	movs	r2, #1
 8001816:	4013      	ands	r3, r2
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d001      	beq.n	8001822 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e020      	b.n	8001864 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2204      	movs	r2, #4
 8001828:	4013      	ands	r3, r2
 800182a:	d009      	beq.n	8001840 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	4a11      	ldr	r2, [pc, #68]	; (8001878 <HAL_RCC_ClockConfig+0x1a8>)
 8001832:	4013      	ands	r3, r2
 8001834:	0019      	movs	r1, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 800183c:	430a      	orrs	r2, r1
 800183e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001840:	f000 f820 	bl	8001884 <HAL_RCC_GetSysClockFreq>
 8001844:	0001      	movs	r1, r0
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	091b      	lsrs	r3, r3, #4
 800184c:	220f      	movs	r2, #15
 800184e:	4013      	ands	r3, r2
 8001850:	4a0a      	ldr	r2, [pc, #40]	; (800187c <HAL_RCC_ClockConfig+0x1ac>)
 8001852:	5cd3      	ldrb	r3, [r2, r3]
 8001854:	000a      	movs	r2, r1
 8001856:	40da      	lsrs	r2, r3
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_RCC_ClockConfig+0x1b0>)
 800185a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800185c:	2000      	movs	r0, #0
 800185e:	f7ff f8d1 	bl	8000a04 <HAL_InitTick>
  
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	0018      	movs	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	b004      	add	sp, #16
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40022000 	.word	0x40022000
 8001870:	40021000 	.word	0x40021000
 8001874:	00001388 	.word	0x00001388
 8001878:	fffff8ff 	.word	0xfffff8ff
 800187c:	0800462c 	.word	0x0800462c
 8001880:	20000000 	.word	0x20000000

08001884 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b08f      	sub	sp, #60	; 0x3c
 8001888:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800188a:	2314      	movs	r3, #20
 800188c:	18fb      	adds	r3, r7, r3
 800188e:	4a38      	ldr	r2, [pc, #224]	; (8001970 <HAL_RCC_GetSysClockFreq+0xec>)
 8001890:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001892:	c313      	stmia	r3!, {r0, r1, r4}
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	4a36      	ldr	r2, [pc, #216]	; (8001974 <HAL_RCC_GetSysClockFreq+0xf0>)
 800189c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800189e:	c313      	stmia	r3!, {r0, r1, r4}
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018a8:	2300      	movs	r3, #0
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80018ac:	2300      	movs	r3, #0
 80018ae:	637b      	str	r3, [r7, #52]	; 0x34
 80018b0:	2300      	movs	r3, #0
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80018b8:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <HAL_RCC_GetSysClockFreq+0xf4>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c0:	220c      	movs	r2, #12
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b0c      	cmp	r3, #12
 80018c6:	d047      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0xd4>
 80018c8:	d849      	bhi.n	800195e <HAL_RCC_GetSysClockFreq+0xda>
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d002      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0x50>
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d003      	beq.n	80018da <HAL_RCC_GetSysClockFreq+0x56>
 80018d2:	e044      	b.n	800195e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018d4:	4b29      	ldr	r3, [pc, #164]	; (800197c <HAL_RCC_GetSysClockFreq+0xf8>)
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018d8:	e044      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	0c9b      	lsrs	r3, r3, #18
 80018de:	220f      	movs	r2, #15
 80018e0:	4013      	ands	r3, r2
 80018e2:	2214      	movs	r2, #20
 80018e4:	18ba      	adds	r2, r7, r2
 80018e6:	5cd3      	ldrb	r3, [r2, r3]
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80018ea:	4b23      	ldr	r3, [pc, #140]	; (8001978 <HAL_RCC_GetSysClockFreq+0xf4>)
 80018ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ee:	220f      	movs	r2, #15
 80018f0:	4013      	ands	r3, r2
 80018f2:	1d3a      	adds	r2, r7, #4
 80018f4:	5cd3      	ldrb	r3, [r2, r3]
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80018f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018fa:	23c0      	movs	r3, #192	; 0xc0
 80018fc:	025b      	lsls	r3, r3, #9
 80018fe:	401a      	ands	r2, r3
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	025b      	lsls	r3, r3, #9
 8001904:	429a      	cmp	r2, r3
 8001906:	d109      	bne.n	800191c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800190a:	481c      	ldr	r0, [pc, #112]	; (800197c <HAL_RCC_GetSysClockFreq+0xf8>)
 800190c:	f7fe fc04 	bl	8000118 <__udivsi3>
 8001910:	0003      	movs	r3, r0
 8001912:	001a      	movs	r2, r3
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	4353      	muls	r3, r2
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
 800191a:	e01a      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800191c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800191e:	23c0      	movs	r3, #192	; 0xc0
 8001920:	025b      	lsls	r3, r3, #9
 8001922:	401a      	ands	r2, r3
 8001924:	23c0      	movs	r3, #192	; 0xc0
 8001926:	025b      	lsls	r3, r3, #9
 8001928:	429a      	cmp	r2, r3
 800192a:	d109      	bne.n	8001940 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800192c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800192e:	4814      	ldr	r0, [pc, #80]	; (8001980 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001930:	f7fe fbf2 	bl	8000118 <__udivsi3>
 8001934:	0003      	movs	r3, r0
 8001936:	001a      	movs	r2, r3
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	4353      	muls	r3, r2
 800193c:	637b      	str	r3, [r7, #52]	; 0x34
 800193e:	e008      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001942:	480e      	ldr	r0, [pc, #56]	; (800197c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001944:	f7fe fbe8 	bl	8000118 <__udivsi3>
 8001948:	0003      	movs	r3, r0
 800194a:	001a      	movs	r2, r3
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	4353      	muls	r3, r2
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001956:	e005      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_RCC_GetSysClockFreq+0xfc>)
 800195a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800195c:	e002      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001962:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001966:	0018      	movs	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	b00f      	add	sp, #60	; 0x3c
 800196c:	bd90      	pop	{r4, r7, pc}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	0800460c 	.word	0x0800460c
 8001974:	0800461c 	.word	0x0800461c
 8001978:	40021000 	.word	0x40021000
 800197c:	007a1200 	.word	0x007a1200
 8001980:	02dc6c00 	.word	0x02dc6c00

08001984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001988:	4b02      	ldr	r3, [pc, #8]	; (8001994 <HAL_RCC_GetHCLKFreq+0x10>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	0018      	movs	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	20000000 	.word	0x20000000

08001998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800199c:	f7ff fff2 	bl	8001984 <HAL_RCC_GetHCLKFreq>
 80019a0:	0001      	movs	r1, r0
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	0a1b      	lsrs	r3, r3, #8
 80019a8:	2207      	movs	r2, #7
 80019aa:	4013      	ands	r3, r2
 80019ac:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019ae:	5cd3      	ldrb	r3, [r2, r3]
 80019b0:	40d9      	lsrs	r1, r3
 80019b2:	000b      	movs	r3, r1
}    
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	40021000 	.word	0x40021000
 80019c0:	0800463c 	.word	0x0800463c

080019c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	025b      	lsls	r3, r3, #9
 80019dc:	4013      	ands	r3, r2
 80019de:	d100      	bne.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80019e0:	e08e      	b.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80019e2:	2017      	movs	r0, #23
 80019e4:	183b      	adds	r3, r7, r0
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ea:	4b6e      	ldr	r3, [pc, #440]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019ec:	69da      	ldr	r2, [r3, #28]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	055b      	lsls	r3, r3, #21
 80019f2:	4013      	ands	r3, r2
 80019f4:	d110      	bne.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b6b      	ldr	r3, [pc, #428]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019f8:	69da      	ldr	r2, [r3, #28]
 80019fa:	4b6a      	ldr	r3, [pc, #424]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	0549      	lsls	r1, r1, #21
 8001a00:	430a      	orrs	r2, r1
 8001a02:	61da      	str	r2, [r3, #28]
 8001a04:	4b67      	ldr	r3, [pc, #412]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a06:	69da      	ldr	r2, [r3, #28]
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	055b      	lsls	r3, r3, #21
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a12:	183b      	adds	r3, r7, r0
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a18:	4b63      	ldr	r3, [pc, #396]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4013      	ands	r3, r2
 8001a22:	d11a      	bne.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a24:	4b60      	ldr	r3, [pc, #384]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b5f      	ldr	r3, [pc, #380]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a2a:	2180      	movs	r1, #128	; 0x80
 8001a2c:	0049      	lsls	r1, r1, #1
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a32:	f7ff f82d 	bl	8000a90 <HAL_GetTick>
 8001a36:	0003      	movs	r3, r0
 8001a38:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3a:	e008      	b.n	8001a4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3c:	f7ff f828 	bl	8000a90 <HAL_GetTick>
 8001a40:	0002      	movs	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	; 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e0a6      	b.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4e:	4b56      	ldr	r3, [pc, #344]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4013      	ands	r3, r2
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a5a:	4b52      	ldr	r3, [pc, #328]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a5c:	6a1a      	ldr	r2, [r3, #32]
 8001a5e:	23c0      	movs	r3, #192	; 0xc0
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4013      	ands	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d034      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	23c0      	movs	r3, #192	; 0xc0
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4013      	ands	r3, r2
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d02c      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a7c:	4b49      	ldr	r3, [pc, #292]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	4a4a      	ldr	r2, [pc, #296]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a88:	6a1a      	ldr	r2, [r3, #32]
 8001a8a:	4b46      	ldr	r3, [pc, #280]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a8c:	2180      	movs	r1, #128	; 0x80
 8001a8e:	0249      	lsls	r1, r1, #9
 8001a90:	430a      	orrs	r2, r1
 8001a92:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a94:	4b43      	ldr	r3, [pc, #268]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a96:	6a1a      	ldr	r2, [r3, #32]
 8001a98:	4b42      	ldr	r3, [pc, #264]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a9a:	4945      	ldr	r1, [pc, #276]	; (8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001a9c:	400a      	ands	r2, r1
 8001a9e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001aa0:	4b40      	ldr	r3, [pc, #256]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d013      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aae:	f7fe ffef 	bl	8000a90 <HAL_GetTick>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab6:	e009      	b.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab8:	f7fe ffea 	bl	8000a90 <HAL_GetTick>
 8001abc:	0002      	movs	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	4a3c      	ldr	r2, [pc, #240]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e067      	b.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001acc:	4b35      	ldr	r3, [pc, #212]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ad6:	4b33      	ldr	r3, [pc, #204]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4a34      	ldr	r2, [pc, #208]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	0019      	movs	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4b2f      	ldr	r3, [pc, #188]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001aea:	2317      	movs	r3, #23
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d105      	bne.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af4:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001af6:	69da      	ldr	r2, [r3, #28]
 8001af8:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001afa:	492f      	ldr	r1, [pc, #188]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001afc:	400a      	ands	r2, r1
 8001afe:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2201      	movs	r2, #1
 8001b06:	4013      	ands	r3, r2
 8001b08:	d009      	beq.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b0a:	4b26      	ldr	r3, [pc, #152]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	2203      	movs	r2, #3
 8001b10:	4393      	bics	r3, r2
 8001b12:	0019      	movs	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2202      	movs	r2, #2
 8001b24:	4013      	ands	r3, r2
 8001b26:	d009      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b28:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	4a23      	ldr	r2, [pc, #140]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	0019      	movs	r1, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	02db      	lsls	r3, r3, #11
 8001b44:	4013      	ands	r3, r2
 8001b46:	d009      	beq.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001b48:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	4a1c      	ldr	r2, [pc, #112]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	0019      	movs	r1, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2220      	movs	r2, #32
 8001b62:	4013      	ands	r3, r2
 8001b64:	d009      	beq.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b66:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	2210      	movs	r2, #16
 8001b6c:	4393      	bics	r3, r2
 8001b6e:	0019      	movs	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695a      	ldr	r2, [r3, #20]
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b76:	430a      	orrs	r2, r1
 8001b78:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4013      	ands	r3, r2
 8001b84:	d009      	beq.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b86:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	2240      	movs	r2, #64	; 0x40
 8001b8c:	4393      	bics	r3, r2
 8001b8e:	0019      	movs	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699a      	ldr	r2, [r3, #24]
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b96:	430a      	orrs	r2, r1
 8001b98:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b006      	add	sp, #24
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	fffffcff 	.word	0xfffffcff
 8001bb0:	fffeffff 	.word	0xfffeffff
 8001bb4:	00001388 	.word	0x00001388
 8001bb8:	efffffff 	.word	0xefffffff
 8001bbc:	fffcffff 	.word	0xfffcffff
 8001bc0:	fff3ffff 	.word	0xfff3ffff

08001bc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e0a8      	b.n	8001d28 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d109      	bne.n	8001bf2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	2382      	movs	r3, #130	; 0x82
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d009      	beq.n	8001bfe <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	61da      	str	r2, [r3, #28]
 8001bf0:	e005      	b.n	8001bfe <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	225d      	movs	r2, #93	; 0x5d
 8001c08:	5c9b      	ldrb	r3, [r3, r2]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d107      	bne.n	8001c20 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	225c      	movs	r2, #92	; 0x5c
 8001c14:	2100      	movs	r1, #0
 8001c16:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f7fe fd30 	bl	8000680 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	225d      	movs	r2, #93	; 0x5d
 8001c24:	2102      	movs	r1, #2
 8001c26:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2140      	movs	r1, #64	; 0x40
 8001c34:	438a      	bics	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	23e0      	movs	r3, #224	; 0xe0
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d902      	bls.n	8001c4a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	e002      	b.n	8001c50 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	015b      	lsls	r3, r3, #5
 8001c4e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	23f0      	movs	r3, #240	; 0xf0
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d008      	beq.n	8001c6e <HAL_SPI_Init+0xaa>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	23e0      	movs	r3, #224	; 0xe0
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d002      	beq.n	8001c6e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	2382      	movs	r3, #130	; 0x82
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	401a      	ands	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6899      	ldr	r1, [r3, #8]
 8001c7c:	2384      	movs	r3, #132	; 0x84
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	400b      	ands	r3, r1
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	2102      	movs	r1, #2
 8001c8a:	400b      	ands	r3, r1
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	2101      	movs	r1, #1
 8001c94:	400b      	ands	r3, r1
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6999      	ldr	r1, [r3, #24]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	400b      	ands	r3, r1
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	2138      	movs	r1, #56	; 0x38
 8001caa:	400b      	ands	r3, r1
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	2180      	movs	r1, #128	; 0x80
 8001cb4:	400b      	ands	r3, r1
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	0011      	movs	r1, r2
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	019b      	lsls	r3, r3, #6
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	0c1b      	lsrs	r3, r3, #16
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	2110      	movs	r1, #16
 8001cdc:	400b      	ands	r3, r1
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce4:	2108      	movs	r1, #8
 8001ce6:	400b      	ands	r3, r1
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68d9      	ldr	r1, [r3, #12]
 8001cee:	23f0      	movs	r3, #240	; 0xf0
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	400b      	ands	r3, r1
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	0011      	movs	r1, r2
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	015b      	lsls	r3, r3, #5
 8001cfe:	401a      	ands	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69da      	ldr	r2, [r3, #28]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4907      	ldr	r1, [pc, #28]	; (8001d30 <HAL_SPI_Init+0x16c>)
 8001d14:	400a      	ands	r2, r1
 8001d16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	225d      	movs	r2, #93	; 0x5d
 8001d22:	2101      	movs	r1, #1
 8001d24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	0018      	movs	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b004      	add	sp, #16
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	fffff7ff 	.word	0xfffff7ff

08001d34 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	1dbb      	adds	r3, r7, #6
 8001d42:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d44:	231f      	movs	r3, #31
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	225c      	movs	r2, #92	; 0x5c
 8001d50:	5c9b      	ldrb	r3, [r3, r2]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d101      	bne.n	8001d5a <HAL_SPI_Transmit+0x26>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e140      	b.n	8001fdc <HAL_SPI_Transmit+0x2a8>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	225c      	movs	r2, #92	; 0x5c
 8001d5e:	2101      	movs	r1, #1
 8001d60:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d62:	f7fe fe95 	bl	8000a90 <HAL_GetTick>
 8001d66:	0003      	movs	r3, r0
 8001d68:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001d6a:	2316      	movs	r3, #22
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	1dba      	adds	r2, r7, #6
 8001d70:	8812      	ldrh	r2, [r2, #0]
 8001d72:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	225d      	movs	r2, #93	; 0x5d
 8001d78:	5c9b      	ldrb	r3, [r3, r2]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d004      	beq.n	8001d8a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001d80:	231f      	movs	r3, #31
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	2202      	movs	r2, #2
 8001d86:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d88:	e11d      	b.n	8001fc6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_SPI_Transmit+0x64>
 8001d90:	1dbb      	adds	r3, r7, #6
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d104      	bne.n	8001da2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001d98:	231f      	movs	r3, #31
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001da0:	e111      	b.n	8001fc6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	225d      	movs	r2, #93	; 0x5d
 8001da6:	2103      	movs	r1, #3
 8001da8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1dba      	adds	r2, r7, #6
 8001dba:	8812      	ldrh	r2, [r2, #0]
 8001dbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	1dba      	adds	r2, r7, #6
 8001dc2:	8812      	ldrh	r2, [r2, #0]
 8001dc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2244      	movs	r2, #68	; 0x44
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2246      	movs	r2, #70	; 0x46
 8001dd8:	2100      	movs	r1, #0
 8001dda:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d110      	bne.n	8001e16 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2140      	movs	r1, #64	; 0x40
 8001e00:	438a      	bics	r2, r1
 8001e02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2180      	movs	r1, #128	; 0x80
 8001e10:	01c9      	lsls	r1, r1, #7
 8001e12:	430a      	orrs	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2240      	movs	r2, #64	; 0x40
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b40      	cmp	r3, #64	; 0x40
 8001e22:	d007      	beq.n	8001e34 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2140      	movs	r1, #64	; 0x40
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	23e0      	movs	r3, #224	; 0xe0
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d94e      	bls.n	8001ede <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d004      	beq.n	8001e52 <HAL_SPI_Transmit+0x11e>
 8001e48:	2316      	movs	r3, #22
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d13f      	bne.n	8001ed2 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e56:	881a      	ldrh	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e62:	1c9a      	adds	r2, r3, #2
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e76:	e02c      	b.n	8001ed2 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d112      	bne.n	8001eac <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8a:	881a      	ldrh	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e96:	1c9a      	adds	r2, r3, #2
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001eaa:	e012      	b.n	8001ed2 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eac:	f7fe fdf0 	bl	8000a90 <HAL_GetTick>
 8001eb0:	0002      	movs	r2, r0
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d802      	bhi.n	8001ec2 <HAL_SPI_Transmit+0x18e>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	d102      	bne.n	8001ec8 <HAL_SPI_Transmit+0x194>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d104      	bne.n	8001ed2 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8001ec8:	231f      	movs	r3, #31
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	2203      	movs	r2, #3
 8001ece:	701a      	strb	r2, [r3, #0]
          goto error;
 8001ed0:	e079      	b.n	8001fc6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1cd      	bne.n	8001e78 <HAL_SPI_Transmit+0x144>
 8001edc:	e04f      	b.n	8001f7e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d004      	beq.n	8001ef0 <HAL_SPI_Transmit+0x1bc>
 8001ee6:	2316      	movs	r3, #22
 8001ee8:	18fb      	adds	r3, r7, r3
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d141      	bne.n	8001f74 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	330c      	adds	r3, #12
 8001efa:	7812      	ldrb	r2, [r2, #0]
 8001efc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001f16:	e02d      	b.n	8001f74 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d113      	bne.n	8001f4e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	330c      	adds	r3, #12
 8001f30:	7812      	ldrb	r2, [r2, #0]
 8001f32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f4c:	e012      	b.n	8001f74 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f4e:	f7fe fd9f 	bl	8000a90 <HAL_GetTick>
 8001f52:	0002      	movs	r2, r0
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d802      	bhi.n	8001f64 <HAL_SPI_Transmit+0x230>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	3301      	adds	r3, #1
 8001f62:	d102      	bne.n	8001f6a <HAL_SPI_Transmit+0x236>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d104      	bne.n	8001f74 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8001f6a:	231f      	movs	r3, #31
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	2203      	movs	r2, #3
 8001f70:	701a      	strb	r2, [r3, #0]
          goto error;
 8001f72:	e028      	b.n	8001fc6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1cc      	bne.n	8001f18 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	6839      	ldr	r1, [r7, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	0018      	movs	r0, r3
 8001f86:	f000 fcd9 	bl	800293c <SPI_EndRxTxTransaction>
 8001f8a:	1e03      	subs	r3, r0, #0
 8001f8c:	d002      	beq.n	8001f94 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2220      	movs	r2, #32
 8001f92:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10a      	bne.n	8001fb2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d004      	beq.n	8001fc4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8001fba:	231f      	movs	r3, #31
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]
 8001fc2:	e000      	b.n	8001fc6 <HAL_SPI_Transmit+0x292>
  }

error:
 8001fc4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	225d      	movs	r2, #93	; 0x5d
 8001fca:	2101      	movs	r1, #1
 8001fcc:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	225c      	movs	r2, #92	; 0x5c
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001fd6:	231f      	movs	r3, #31
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	781b      	ldrb	r3, [r3, #0]
}
 8001fdc:	0018      	movs	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b008      	add	sp, #32
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	1dbb      	adds	r3, r7, #6
 8001ff2:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ff4:	2317      	movs	r3, #23
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	2382      	movs	r3, #130	; 0x82
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	429a      	cmp	r2, r3
 8002006:	d113      	bne.n	8002030 <HAL_SPI_Receive+0x4c>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10f      	bne.n	8002030 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	225d      	movs	r2, #93	; 0x5d
 8002014:	2104      	movs	r1, #4
 8002016:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002018:	1dbb      	adds	r3, r7, #6
 800201a:	881c      	ldrh	r4, [r3, #0]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	68b9      	ldr	r1, [r7, #8]
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	0023      	movs	r3, r4
 8002028:	f000 f928 	bl	800227c <HAL_SPI_TransmitReceive>
 800202c:	0003      	movs	r3, r0
 800202e:	e11c      	b.n	800226a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	225c      	movs	r2, #92	; 0x5c
 8002034:	5c9b      	ldrb	r3, [r3, r2]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_SPI_Receive+0x5a>
 800203a:	2302      	movs	r3, #2
 800203c:	e115      	b.n	800226a <HAL_SPI_Receive+0x286>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	225c      	movs	r2, #92	; 0x5c
 8002042:	2101      	movs	r1, #1
 8002044:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002046:	f7fe fd23 	bl	8000a90 <HAL_GetTick>
 800204a:	0003      	movs	r3, r0
 800204c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	225d      	movs	r2, #93	; 0x5d
 8002052:	5c9b      	ldrb	r3, [r3, r2]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d004      	beq.n	8002064 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800205a:	2317      	movs	r3, #23
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	2202      	movs	r2, #2
 8002060:	701a      	strb	r2, [r3, #0]
    goto error;
 8002062:	e0f7      	b.n	8002254 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_SPI_Receive+0x8e>
 800206a:	1dbb      	adds	r3, r7, #6
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d104      	bne.n	800207c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002072:	2317      	movs	r3, #23
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]
    goto error;
 800207a:	e0eb      	b.n	8002254 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	225d      	movs	r2, #93	; 0x5d
 8002080:	2104      	movs	r1, #4
 8002082:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	1dba      	adds	r2, r7, #6
 8002094:	2144      	movs	r1, #68	; 0x44
 8002096:	8812      	ldrh	r2, [r2, #0]
 8002098:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1dba      	adds	r2, r7, #6
 800209e:	2146      	movs	r1, #70	; 0x46
 80020a0:	8812      	ldrh	r2, [r2, #0]
 80020a2:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	23e0      	movs	r3, #224	; 0xe0
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d908      	bls.n	80020e0 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4966      	ldr	r1, [pc, #408]	; (8002274 <HAL_SPI_Receive+0x290>)
 80020da:	400a      	ands	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	e008      	b.n	80020f2 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2180      	movs	r1, #128	; 0x80
 80020ec:	0149      	lsls	r1, r1, #5
 80020ee:	430a      	orrs	r2, r1
 80020f0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	021b      	lsls	r3, r3, #8
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d10f      	bne.n	800211e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2140      	movs	r1, #64	; 0x40
 800210a:	438a      	bics	r2, r1
 800210c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4957      	ldr	r1, [pc, #348]	; (8002278 <HAL_SPI_Receive+0x294>)
 800211a:	400a      	ands	r2, r1
 800211c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2240      	movs	r2, #64	; 0x40
 8002126:	4013      	ands	r3, r2
 8002128:	2b40      	cmp	r3, #64	; 0x40
 800212a:	d007      	beq.n	800213c <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2140      	movs	r1, #64	; 0x40
 8002138:	430a      	orrs	r2, r1
 800213a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	23e0      	movs	r3, #224	; 0xe0
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	429a      	cmp	r2, r3
 8002146:	d900      	bls.n	800214a <HAL_SPI_Receive+0x166>
 8002148:	e069      	b.n	800221e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800214a:	e031      	b.n	80021b0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2201      	movs	r2, #1
 8002154:	4013      	ands	r3, r2
 8002156:	2b01      	cmp	r3, #1
 8002158:	d117      	bne.n	800218a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	330c      	adds	r3, #12
 8002160:	001a      	movs	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	7812      	ldrb	r2, [r2, #0]
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2246      	movs	r2, #70	; 0x46
 800217a:	5a9b      	ldrh	r3, [r3, r2]
 800217c:	b29b      	uxth	r3, r3
 800217e:	3b01      	subs	r3, #1
 8002180:	b299      	uxth	r1, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2246      	movs	r2, #70	; 0x46
 8002186:	5299      	strh	r1, [r3, r2]
 8002188:	e012      	b.n	80021b0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800218a:	f7fe fc81 	bl	8000a90 <HAL_GetTick>
 800218e:	0002      	movs	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d802      	bhi.n	80021a0 <HAL_SPI_Receive+0x1bc>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	3301      	adds	r3, #1
 800219e:	d102      	bne.n	80021a6 <HAL_SPI_Receive+0x1c2>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d104      	bne.n	80021b0 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80021a6:	2317      	movs	r3, #23
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	2203      	movs	r2, #3
 80021ac:	701a      	strb	r2, [r3, #0]
          goto error;
 80021ae:	e051      	b.n	8002254 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2246      	movs	r2, #70	; 0x46
 80021b4:	5a9b      	ldrh	r3, [r3, r2]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1c7      	bne.n	800214c <HAL_SPI_Receive+0x168>
 80021bc:	e035      	b.n	800222a <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2201      	movs	r2, #1
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d115      	bne.n	80021f8 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	b292      	uxth	r2, r2
 80021d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	1c9a      	adds	r2, r3, #2
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2246      	movs	r2, #70	; 0x46
 80021e8:	5a9b      	ldrh	r3, [r3, r2]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b299      	uxth	r1, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2246      	movs	r2, #70	; 0x46
 80021f4:	5299      	strh	r1, [r3, r2]
 80021f6:	e012      	b.n	800221e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021f8:	f7fe fc4a 	bl	8000a90 <HAL_GetTick>
 80021fc:	0002      	movs	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d802      	bhi.n	800220e <HAL_SPI_Receive+0x22a>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	3301      	adds	r3, #1
 800220c:	d102      	bne.n	8002214 <HAL_SPI_Receive+0x230>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d104      	bne.n	800221e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002214:	2317      	movs	r3, #23
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	2203      	movs	r2, #3
 800221a:	701a      	strb	r2, [r3, #0]
          goto error;
 800221c:	e01a      	b.n	8002254 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2246      	movs	r2, #70	; 0x46
 8002222:	5a9b      	ldrh	r3, [r3, r2]
 8002224:	b29b      	uxth	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1c9      	bne.n	80021be <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	6839      	ldr	r1, [r7, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	0018      	movs	r0, r3
 8002232:	f000 fb25 	bl	8002880 <SPI_EndRxTransaction>
 8002236:	1e03      	subs	r3, r0, #0
 8002238:	d002      	beq.n	8002240 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2220      	movs	r2, #32
 800223e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002244:	2b00      	cmp	r3, #0
 8002246:	d004      	beq.n	8002252 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8002248:	2317      	movs	r3, #23
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	e000      	b.n	8002254 <HAL_SPI_Receive+0x270>
  }

error :
 8002252:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	225d      	movs	r2, #93	; 0x5d
 8002258:	2101      	movs	r1, #1
 800225a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	225c      	movs	r2, #92	; 0x5c
 8002260:	2100      	movs	r1, #0
 8002262:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002264:	2317      	movs	r3, #23
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	781b      	ldrb	r3, [r3, #0]
}
 800226a:	0018      	movs	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	b007      	add	sp, #28
 8002270:	bd90      	pop	{r4, r7, pc}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	ffffefff 	.word	0xffffefff
 8002278:	ffffbfff 	.word	0xffffbfff

0800227c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	001a      	movs	r2, r3
 800228a:	1cbb      	adds	r3, r7, #2
 800228c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800228e:	2301      	movs	r3, #1
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002292:	2323      	movs	r3, #35	; 0x23
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	225c      	movs	r2, #92	; 0x5c
 800229e:	5c9b      	ldrb	r3, [r3, r2]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d101      	bne.n	80022a8 <HAL_SPI_TransmitReceive+0x2c>
 80022a4:	2302      	movs	r3, #2
 80022a6:	e1b5      	b.n	8002614 <HAL_SPI_TransmitReceive+0x398>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	225c      	movs	r2, #92	; 0x5c
 80022ac:	2101      	movs	r1, #1
 80022ae:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022b0:	f7fe fbee 	bl	8000a90 <HAL_GetTick>
 80022b4:	0003      	movs	r3, r0
 80022b6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022b8:	201b      	movs	r0, #27
 80022ba:	183b      	adds	r3, r7, r0
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	215d      	movs	r1, #93	; 0x5d
 80022c0:	5c52      	ldrb	r2, [r2, r1]
 80022c2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80022ca:	2312      	movs	r3, #18
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	1cba      	adds	r2, r7, #2
 80022d0:	8812      	ldrh	r2, [r2, #0]
 80022d2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022d4:	183b      	adds	r3, r7, r0
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d011      	beq.n	8002300 <HAL_SPI_TransmitReceive+0x84>
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	2382      	movs	r3, #130	; 0x82
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d107      	bne.n	80022f6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d103      	bne.n	80022f6 <HAL_SPI_TransmitReceive+0x7a>
 80022ee:	183b      	adds	r3, r7, r0
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d004      	beq.n	8002300 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80022f6:	2323      	movs	r3, #35	; 0x23
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	2202      	movs	r2, #2
 80022fc:	701a      	strb	r2, [r3, #0]
    goto error;
 80022fe:	e17e      	b.n	80025fe <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d006      	beq.n	8002314 <HAL_SPI_TransmitReceive+0x98>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_SPI_TransmitReceive+0x98>
 800230c:	1cbb      	adds	r3, r7, #2
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d104      	bne.n	800231e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002314:	2323      	movs	r3, #35	; 0x23
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
    goto error;
 800231c:	e16f      	b.n	80025fe <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	225d      	movs	r2, #93	; 0x5d
 8002322:	5c9b      	ldrb	r3, [r3, r2]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b04      	cmp	r3, #4
 8002328:	d003      	beq.n	8002332 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	225d      	movs	r2, #93	; 0x5d
 800232e:	2105      	movs	r1, #5
 8002330:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1cba      	adds	r2, r7, #2
 8002342:	2146      	movs	r1, #70	; 0x46
 8002344:	8812      	ldrh	r2, [r2, #0]
 8002346:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1cba      	adds	r2, r7, #2
 800234c:	2144      	movs	r1, #68	; 0x44
 800234e:	8812      	ldrh	r2, [r2, #0]
 8002350:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1cba      	adds	r2, r7, #2
 800235c:	8812      	ldrh	r2, [r2, #0]
 800235e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1cba      	adds	r2, r7, #2
 8002364:	8812      	ldrh	r2, [r2, #0]
 8002366:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	23e0      	movs	r3, #224	; 0xe0
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	429a      	cmp	r2, r3
 800237e:	d908      	bls.n	8002392 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	49a4      	ldr	r1, [pc, #656]	; (800261c <HAL_SPI_TransmitReceive+0x3a0>)
 800238c:	400a      	ands	r2, r1
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	e008      	b.n	80023a4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	0149      	lsls	r1, r1, #5
 80023a0:	430a      	orrs	r2, r1
 80023a2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2240      	movs	r2, #64	; 0x40
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b40      	cmp	r3, #64	; 0x40
 80023b0:	d007      	beq.n	80023c2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2140      	movs	r1, #64	; 0x40
 80023be:	430a      	orrs	r2, r1
 80023c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	23e0      	movs	r3, #224	; 0xe0
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d800      	bhi.n	80023d0 <HAL_SPI_TransmitReceive+0x154>
 80023ce:	e07f      	b.n	80024d0 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_SPI_TransmitReceive+0x168>
 80023d8:	2312      	movs	r3, #18
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d000      	beq.n	80023e4 <HAL_SPI_TransmitReceive+0x168>
 80023e2:	e069      	b.n	80024b8 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e8:	881a      	ldrh	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f4:	1c9a      	adds	r2, r3, #2
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002408:	e056      	b.n	80024b8 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2202      	movs	r2, #2
 8002412:	4013      	ands	r3, r2
 8002414:	2b02      	cmp	r3, #2
 8002416:	d11b      	bne.n	8002450 <HAL_SPI_TransmitReceive+0x1d4>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d016      	beq.n	8002450 <HAL_SPI_TransmitReceive+0x1d4>
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	2b01      	cmp	r3, #1
 8002426:	d113      	bne.n	8002450 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242c:	881a      	ldrh	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002438:	1c9a      	adds	r2, r3, #2
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2201      	movs	r2, #1
 8002458:	4013      	ands	r3, r2
 800245a:	2b01      	cmp	r3, #1
 800245c:	d11c      	bne.n	8002498 <HAL_SPI_TransmitReceive+0x21c>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2246      	movs	r2, #70	; 0x46
 8002462:	5a9b      	ldrh	r3, [r3, r2]
 8002464:	b29b      	uxth	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d016      	beq.n	8002498 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	b292      	uxth	r2, r2
 8002476:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	1c9a      	adds	r2, r3, #2
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2246      	movs	r2, #70	; 0x46
 8002486:	5a9b      	ldrh	r3, [r3, r2]
 8002488:	b29b      	uxth	r3, r3
 800248a:	3b01      	subs	r3, #1
 800248c:	b299      	uxth	r1, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2246      	movs	r2, #70	; 0x46
 8002492:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002494:	2301      	movs	r3, #1
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002498:	f7fe fafa 	bl	8000a90 <HAL_GetTick>
 800249c:	0002      	movs	r2, r0
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d807      	bhi.n	80024b8 <HAL_SPI_TransmitReceive+0x23c>
 80024a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024aa:	3301      	adds	r3, #1
 80024ac:	d004      	beq.n	80024b8 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80024ae:	2323      	movs	r3, #35	; 0x23
 80024b0:	18fb      	adds	r3, r7, r3
 80024b2:	2203      	movs	r2, #3
 80024b4:	701a      	strb	r2, [r3, #0]
        goto error;
 80024b6:	e0a2      	b.n	80025fe <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1a3      	bne.n	800240a <HAL_SPI_TransmitReceive+0x18e>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2246      	movs	r2, #70	; 0x46
 80024c6:	5a9b      	ldrh	r3, [r3, r2]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d19d      	bne.n	800240a <HAL_SPI_TransmitReceive+0x18e>
 80024ce:	e085      	b.n	80025dc <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_SPI_TransmitReceive+0x268>
 80024d8:	2312      	movs	r3, #18
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d000      	beq.n	80024e4 <HAL_SPI_TransmitReceive+0x268>
 80024e2:	e070      	b.n	80025c6 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	330c      	adds	r3, #12
 80024ee:	7812      	ldrb	r2, [r2, #0]
 80024f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002500:	b29b      	uxth	r3, r3
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800250a:	e05c      	b.n	80025c6 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2202      	movs	r2, #2
 8002514:	4013      	ands	r3, r2
 8002516:	2b02      	cmp	r3, #2
 8002518:	d11c      	bne.n	8002554 <HAL_SPI_TransmitReceive+0x2d8>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d017      	beq.n	8002554 <HAL_SPI_TransmitReceive+0x2d8>
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	2b01      	cmp	r3, #1
 8002528:	d114      	bne.n	8002554 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	330c      	adds	r3, #12
 8002534:	7812      	ldrb	r2, [r2, #0]
 8002536:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002546:	b29b      	uxth	r3, r3
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2201      	movs	r2, #1
 800255c:	4013      	ands	r3, r2
 800255e:	2b01      	cmp	r3, #1
 8002560:	d11e      	bne.n	80025a0 <HAL_SPI_TransmitReceive+0x324>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2246      	movs	r2, #70	; 0x46
 8002566:	5a9b      	ldrh	r3, [r3, r2]
 8002568:	b29b      	uxth	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d018      	beq.n	80025a0 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	330c      	adds	r3, #12
 8002574:	001a      	movs	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	7812      	ldrb	r2, [r2, #0]
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2246      	movs	r2, #70	; 0x46
 800258e:	5a9b      	ldrh	r3, [r3, r2]
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b299      	uxth	r1, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2246      	movs	r2, #70	; 0x46
 800259a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800259c:	2301      	movs	r3, #1
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025a0:	f7fe fa76 	bl	8000a90 <HAL_GetTick>
 80025a4:	0002      	movs	r2, r0
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d802      	bhi.n	80025b6 <HAL_SPI_TransmitReceive+0x33a>
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	3301      	adds	r3, #1
 80025b4:	d102      	bne.n	80025bc <HAL_SPI_TransmitReceive+0x340>
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d104      	bne.n	80025c6 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80025bc:	2323      	movs	r3, #35	; 0x23
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	2203      	movs	r2, #3
 80025c2:	701a      	strb	r2, [r3, #0]
        goto error;
 80025c4:	e01b      	b.n	80025fe <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d19d      	bne.n	800250c <HAL_SPI_TransmitReceive+0x290>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2246      	movs	r2, #70	; 0x46
 80025d4:	5a9b      	ldrh	r3, [r3, r2]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d197      	bne.n	800250c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	0018      	movs	r0, r3
 80025e4:	f000 f9aa 	bl	800293c <SPI_EndRxTxTransaction>
 80025e8:	1e03      	subs	r3, r0, #0
 80025ea:	d007      	beq.n	80025fc <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80025ec:	2323      	movs	r3, #35	; 0x23
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	2201      	movs	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	661a      	str	r2, [r3, #96]	; 0x60
 80025fa:	e000      	b.n	80025fe <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80025fc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	225d      	movs	r2, #93	; 0x5d
 8002602:	2101      	movs	r1, #1
 8002604:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	225c      	movs	r2, #92	; 0x5c
 800260a:	2100      	movs	r1, #0
 800260c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800260e:	2323      	movs	r3, #35	; 0x23
 8002610:	18fb      	adds	r3, r7, r3
 8002612:	781b      	ldrb	r3, [r3, #0]
}
 8002614:	0018      	movs	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	b00a      	add	sp, #40	; 0x28
 800261a:	bd80      	pop	{r7, pc}
 800261c:	ffffefff 	.word	0xffffefff

08002620 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	1dfb      	adds	r3, r7, #7
 800262e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002630:	f7fe fa2e 	bl	8000a90 <HAL_GetTick>
 8002634:	0002      	movs	r2, r0
 8002636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	18d3      	adds	r3, r2, r3
 800263e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002640:	f7fe fa26 	bl	8000a90 <HAL_GetTick>
 8002644:	0003      	movs	r3, r0
 8002646:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002648:	4b3a      	ldr	r3, [pc, #232]	; (8002734 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	015b      	lsls	r3, r3, #5
 800264e:	0d1b      	lsrs	r3, r3, #20
 8002650:	69fa      	ldr	r2, [r7, #28]
 8002652:	4353      	muls	r3, r2
 8002654:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002656:	e058      	b.n	800270a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	3301      	adds	r3, #1
 800265c:	d055      	beq.n	800270a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800265e:	f7fe fa17 	bl	8000a90 <HAL_GetTick>
 8002662:	0002      	movs	r2, r0
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	69fa      	ldr	r2, [r7, #28]
 800266a:	429a      	cmp	r2, r3
 800266c:	d902      	bls.n	8002674 <SPI_WaitFlagStateUntilTimeout+0x54>
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d142      	bne.n	80026fa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	21e0      	movs	r1, #224	; 0xe0
 8002680:	438a      	bics	r2, r1
 8002682:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	2382      	movs	r3, #130	; 0x82
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	429a      	cmp	r2, r3
 800268e:	d113      	bne.n	80026b8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	429a      	cmp	r2, r3
 800269a:	d005      	beq.n	80026a8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d107      	bne.n	80026b8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2140      	movs	r1, #64	; 0x40
 80026b4:	438a      	bics	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	019b      	lsls	r3, r3, #6
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d110      	bne.n	80026e6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	491a      	ldr	r1, [pc, #104]	; (8002738 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80026d0:	400a      	ands	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2180      	movs	r1, #128	; 0x80
 80026e0:	0189      	lsls	r1, r1, #6
 80026e2:	430a      	orrs	r2, r1
 80026e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	225d      	movs	r2, #93	; 0x5d
 80026ea:	2101      	movs	r1, #1
 80026ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	225c      	movs	r2, #92	; 0x5c
 80026f2:	2100      	movs	r1, #0
 80026f4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e017      	b.n	800272a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	3b01      	subs	r3, #1
 8002708:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	4013      	ands	r3, r2
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	425a      	negs	r2, r3
 800271a:	4153      	adcs	r3, r2
 800271c:	b2db      	uxtb	r3, r3
 800271e:	001a      	movs	r2, r3
 8002720:	1dfb      	adds	r3, r7, #7
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d197      	bne.n	8002658 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b008      	add	sp, #32
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	20000000 	.word	0x20000000
 8002738:	ffffdfff 	.word	0xffffdfff

0800273c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800274a:	2317      	movs	r3, #23
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002752:	f7fe f99d 	bl	8000a90 <HAL_GetTick>
 8002756:	0002      	movs	r2, r0
 8002758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275a:	1a9b      	subs	r3, r3, r2
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	18d3      	adds	r3, r2, r3
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002762:	f7fe f995 	bl	8000a90 <HAL_GetTick>
 8002766:	0003      	movs	r3, r0
 8002768:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	330c      	adds	r3, #12
 8002770:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002772:	4b41      	ldr	r3, [pc, #260]	; (8002878 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	0013      	movs	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	189b      	adds	r3, r3, r2
 800277c:	00da      	lsls	r2, r3, #3
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	0d1b      	lsrs	r3, r3, #20
 8002782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002784:	4353      	muls	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002788:	e068      	b.n	800285c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	23c0      	movs	r3, #192	; 0xc0
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	429a      	cmp	r2, r3
 8002792:	d10a      	bne.n	80027aa <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d107      	bne.n	80027aa <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	2117      	movs	r1, #23
 80027a2:	187b      	adds	r3, r7, r1
 80027a4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80027a6:	187b      	adds	r3, r7, r1
 80027a8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	3301      	adds	r3, #1
 80027ae:	d055      	beq.n	800285c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027b0:	f7fe f96e 	bl	8000a90 <HAL_GetTick>
 80027b4:	0002      	movs	r2, r0
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027bc:	429a      	cmp	r2, r3
 80027be:	d902      	bls.n	80027c6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d142      	bne.n	800284c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	21e0      	movs	r1, #224	; 0xe0
 80027d2:	438a      	bics	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	2382      	movs	r3, #130	; 0x82
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	429a      	cmp	r2, r3
 80027e0:	d113      	bne.n	800280a <SPI_WaitFifoStateUntilTimeout+0xce>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d005      	beq.n	80027fa <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d107      	bne.n	800280a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2140      	movs	r1, #64	; 0x40
 8002806:	438a      	bics	r2, r1
 8002808:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	019b      	lsls	r3, r3, #6
 8002812:	429a      	cmp	r2, r3
 8002814:	d110      	bne.n	8002838 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4916      	ldr	r1, [pc, #88]	; (800287c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002822:	400a      	ands	r2, r1
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2180      	movs	r1, #128	; 0x80
 8002832:	0189      	lsls	r1, r1, #6
 8002834:	430a      	orrs	r2, r1
 8002836:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	225d      	movs	r2, #93	; 0x5d
 800283c:	2101      	movs	r1, #1
 800283e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	225c      	movs	r2, #92	; 0x5c
 8002844:	2100      	movs	r1, #0
 8002846:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e010      	b.n	800286e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	3b01      	subs	r3, #1
 800285a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	4013      	ands	r3, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	429a      	cmp	r2, r3
 800286a:	d18e      	bne.n	800278a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	0018      	movs	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	b00a      	add	sp, #40	; 0x28
 8002874:	bd80      	pop	{r7, pc}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	20000000 	.word	0x20000000
 800287c:	ffffdfff 	.word	0xffffdfff

08002880 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af02      	add	r7, sp, #8
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	2382      	movs	r3, #130	; 0x82
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	429a      	cmp	r2, r3
 8002896:	d113      	bne.n	80028c0 <SPI_EndRxTransaction+0x40>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	021b      	lsls	r3, r3, #8
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d005      	beq.n	80028b0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d107      	bne.n	80028c0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2140      	movs	r1, #64	; 0x40
 80028bc:	438a      	bics	r2, r1
 80028be:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	0013      	movs	r3, r2
 80028ca:	2200      	movs	r2, #0
 80028cc:	2180      	movs	r1, #128	; 0x80
 80028ce:	f7ff fea7 	bl	8002620 <SPI_WaitFlagStateUntilTimeout>
 80028d2:	1e03      	subs	r3, r0, #0
 80028d4:	d007      	beq.n	80028e6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028da:	2220      	movs	r2, #32
 80028dc:	431a      	orrs	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e026      	b.n	8002934 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	2382      	movs	r3, #130	; 0x82
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d11f      	bne.n	8002932 <SPI_EndRxTransaction+0xb2>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	021b      	lsls	r3, r3, #8
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d005      	beq.n	800290a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	2380      	movs	r3, #128	; 0x80
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	429a      	cmp	r2, r3
 8002908:	d113      	bne.n	8002932 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	23c0      	movs	r3, #192	; 0xc0
 800290e:	00d9      	lsls	r1, r3, #3
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	0013      	movs	r3, r2
 8002918:	2200      	movs	r2, #0
 800291a:	f7ff ff0f 	bl	800273c <SPI_WaitFifoStateUntilTimeout>
 800291e:	1e03      	subs	r3, r0, #0
 8002920:	d007      	beq.n	8002932 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002926:	2220      	movs	r2, #32
 8002928:	431a      	orrs	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e000      	b.n	8002934 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	0018      	movs	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	b004      	add	sp, #16
 800293a:	bd80      	pop	{r7, pc}

0800293c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	23c0      	movs	r3, #192	; 0xc0
 800294c:	0159      	lsls	r1, r3, #5
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	0013      	movs	r3, r2
 8002956:	2200      	movs	r2, #0
 8002958:	f7ff fef0 	bl	800273c <SPI_WaitFifoStateUntilTimeout>
 800295c:	1e03      	subs	r3, r0, #0
 800295e:	d007      	beq.n	8002970 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002964:	2220      	movs	r2, #32
 8002966:	431a      	orrs	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e027      	b.n	80029c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	0013      	movs	r3, r2
 800297a:	2200      	movs	r2, #0
 800297c:	2180      	movs	r1, #128	; 0x80
 800297e:	f7ff fe4f 	bl	8002620 <SPI_WaitFlagStateUntilTimeout>
 8002982:	1e03      	subs	r3, r0, #0
 8002984:	d007      	beq.n	8002996 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298a:	2220      	movs	r2, #32
 800298c:	431a      	orrs	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e014      	b.n	80029c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	23c0      	movs	r3, #192	; 0xc0
 800299a:	00d9      	lsls	r1, r3, #3
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	0013      	movs	r3, r2
 80029a4:	2200      	movs	r2, #0
 80029a6:	f7ff fec9 	bl	800273c <SPI_WaitFifoStateUntilTimeout>
 80029aa:	1e03      	subs	r3, r0, #0
 80029ac:	d007      	beq.n	80029be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b2:	2220      	movs	r2, #32
 80029b4:	431a      	orrs	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e000      	b.n	80029c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	0018      	movs	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b004      	add	sp, #16
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e044      	b.n	8002a64 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d107      	bne.n	80029f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2274      	movs	r2, #116	; 0x74
 80029e6:	2100      	movs	r1, #0
 80029e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	0018      	movs	r0, r3
 80029ee:	f7fd feb9 	bl	8000764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2224      	movs	r2, #36	; 0x24
 80029f6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2101      	movs	r1, #1
 8002a04:	438a      	bics	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f000 f830 	bl	8002a70 <UART_SetConfig>
 8002a10:	0003      	movs	r3, r0
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e024      	b.n	8002a64 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	0018      	movs	r0, r3
 8002a26:	f000 fa0b 	bl	8002e40 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	490d      	ldr	r1, [pc, #52]	; (8002a6c <HAL_UART_Init+0xa4>)
 8002a36:	400a      	ands	r2, r1
 8002a38:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	212a      	movs	r1, #42	; 0x2a
 8002a46:	438a      	bics	r2, r1
 8002a48:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2101      	movs	r1, #1
 8002a56:	430a      	orrs	r2, r1
 8002a58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f000 faa3 	bl	8002fa8 <UART_CheckIdleState>
 8002a62:	0003      	movs	r3, r0
}
 8002a64:	0018      	movs	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b002      	add	sp, #8
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	ffffb7ff 	.word	0xffffb7ff

08002a70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a78:	231e      	movs	r3, #30
 8002a7a:	18fb      	adds	r3, r7, r3
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4abe      	ldr	r2, [pc, #760]	; (8002d98 <UART_SetConfig+0x328>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	0019      	movs	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4ab9      	ldr	r2, [pc, #740]	; (8002d9c <UART_SetConfig+0x32c>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	0019      	movs	r1, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4ab0      	ldr	r2, [pc, #704]	; (8002da0 <UART_SetConfig+0x330>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4aac      	ldr	r2, [pc, #688]	; (8002da4 <UART_SetConfig+0x334>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d127      	bne.n	8002b46 <UART_SetConfig+0xd6>
 8002af6:	4bac      	ldr	r3, [pc, #688]	; (8002da8 <UART_SetConfig+0x338>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	2203      	movs	r2, #3
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d00d      	beq.n	8002b1e <UART_SetConfig+0xae>
 8002b02:	d81b      	bhi.n	8002b3c <UART_SetConfig+0xcc>
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d014      	beq.n	8002b32 <UART_SetConfig+0xc2>
 8002b08:	d818      	bhi.n	8002b3c <UART_SetConfig+0xcc>
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <UART_SetConfig+0xa4>
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d00a      	beq.n	8002b28 <UART_SetConfig+0xb8>
 8002b12:	e013      	b.n	8002b3c <UART_SetConfig+0xcc>
 8002b14:	231f      	movs	r3, #31
 8002b16:	18fb      	adds	r3, r7, r3
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]
 8002b1c:	e0bd      	b.n	8002c9a <UART_SetConfig+0x22a>
 8002b1e:	231f      	movs	r3, #31
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	2202      	movs	r2, #2
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	e0b8      	b.n	8002c9a <UART_SetConfig+0x22a>
 8002b28:	231f      	movs	r3, #31
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	701a      	strb	r2, [r3, #0]
 8002b30:	e0b3      	b.n	8002c9a <UART_SetConfig+0x22a>
 8002b32:	231f      	movs	r3, #31
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	2208      	movs	r2, #8
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	e0ae      	b.n	8002c9a <UART_SetConfig+0x22a>
 8002b3c:	231f      	movs	r3, #31
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	2210      	movs	r2, #16
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	e0a9      	b.n	8002c9a <UART_SetConfig+0x22a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a98      	ldr	r2, [pc, #608]	; (8002dac <UART_SetConfig+0x33c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d134      	bne.n	8002bba <UART_SetConfig+0x14a>
 8002b50:	4b95      	ldr	r3, [pc, #596]	; (8002da8 <UART_SetConfig+0x338>)
 8002b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b54:	23c0      	movs	r3, #192	; 0xc0
 8002b56:	029b      	lsls	r3, r3, #10
 8002b58:	4013      	ands	r3, r2
 8002b5a:	22c0      	movs	r2, #192	; 0xc0
 8002b5c:	0292      	lsls	r2, r2, #10
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d017      	beq.n	8002b92 <UART_SetConfig+0x122>
 8002b62:	22c0      	movs	r2, #192	; 0xc0
 8002b64:	0292      	lsls	r2, r2, #10
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d822      	bhi.n	8002bb0 <UART_SetConfig+0x140>
 8002b6a:	2280      	movs	r2, #128	; 0x80
 8002b6c:	0292      	lsls	r2, r2, #10
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d019      	beq.n	8002ba6 <UART_SetConfig+0x136>
 8002b72:	2280      	movs	r2, #128	; 0x80
 8002b74:	0292      	lsls	r2, r2, #10
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d81a      	bhi.n	8002bb0 <UART_SetConfig+0x140>
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d004      	beq.n	8002b88 <UART_SetConfig+0x118>
 8002b7e:	2280      	movs	r2, #128	; 0x80
 8002b80:	0252      	lsls	r2, r2, #9
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00a      	beq.n	8002b9c <UART_SetConfig+0x12c>
 8002b86:	e013      	b.n	8002bb0 <UART_SetConfig+0x140>
 8002b88:	231f      	movs	r3, #31
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
 8002b90:	e083      	b.n	8002c9a <UART_SetConfig+0x22a>
 8002b92:	231f      	movs	r3, #31
 8002b94:	18fb      	adds	r3, r7, r3
 8002b96:	2202      	movs	r2, #2
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	e07e      	b.n	8002c9a <UART_SetConfig+0x22a>
 8002b9c:	231f      	movs	r3, #31
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	701a      	strb	r2, [r3, #0]
 8002ba4:	e079      	b.n	8002c9a <UART_SetConfig+0x22a>
 8002ba6:	231f      	movs	r3, #31
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	2208      	movs	r2, #8
 8002bac:	701a      	strb	r2, [r3, #0]
 8002bae:	e074      	b.n	8002c9a <UART_SetConfig+0x22a>
 8002bb0:	231f      	movs	r3, #31
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	2210      	movs	r2, #16
 8002bb6:	701a      	strb	r2, [r3, #0]
 8002bb8:	e06f      	b.n	8002c9a <UART_SetConfig+0x22a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a7c      	ldr	r2, [pc, #496]	; (8002db0 <UART_SetConfig+0x340>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d134      	bne.n	8002c2e <UART_SetConfig+0x1be>
 8002bc4:	4b78      	ldr	r3, [pc, #480]	; (8002da8 <UART_SetConfig+0x338>)
 8002bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bc8:	23c0      	movs	r3, #192	; 0xc0
 8002bca:	031b      	lsls	r3, r3, #12
 8002bcc:	4013      	ands	r3, r2
 8002bce:	22c0      	movs	r2, #192	; 0xc0
 8002bd0:	0312      	lsls	r2, r2, #12
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d017      	beq.n	8002c06 <UART_SetConfig+0x196>
 8002bd6:	22c0      	movs	r2, #192	; 0xc0
 8002bd8:	0312      	lsls	r2, r2, #12
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d822      	bhi.n	8002c24 <UART_SetConfig+0x1b4>
 8002bde:	2280      	movs	r2, #128	; 0x80
 8002be0:	0312      	lsls	r2, r2, #12
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d019      	beq.n	8002c1a <UART_SetConfig+0x1aa>
 8002be6:	2280      	movs	r2, #128	; 0x80
 8002be8:	0312      	lsls	r2, r2, #12
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d81a      	bhi.n	8002c24 <UART_SetConfig+0x1b4>
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d004      	beq.n	8002bfc <UART_SetConfig+0x18c>
 8002bf2:	2280      	movs	r2, #128	; 0x80
 8002bf4:	02d2      	lsls	r2, r2, #11
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00a      	beq.n	8002c10 <UART_SetConfig+0x1a0>
 8002bfa:	e013      	b.n	8002c24 <UART_SetConfig+0x1b4>
 8002bfc:	231f      	movs	r3, #31
 8002bfe:	18fb      	adds	r3, r7, r3
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e049      	b.n	8002c9a <UART_SetConfig+0x22a>
 8002c06:	231f      	movs	r3, #31
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	701a      	strb	r2, [r3, #0]
 8002c0e:	e044      	b.n	8002c9a <UART_SetConfig+0x22a>
 8002c10:	231f      	movs	r3, #31
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	2204      	movs	r2, #4
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	e03f      	b.n	8002c9a <UART_SetConfig+0x22a>
 8002c1a:	231f      	movs	r3, #31
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	2208      	movs	r2, #8
 8002c20:	701a      	strb	r2, [r3, #0]
 8002c22:	e03a      	b.n	8002c9a <UART_SetConfig+0x22a>
 8002c24:	231f      	movs	r3, #31
 8002c26:	18fb      	adds	r3, r7, r3
 8002c28:	2210      	movs	r2, #16
 8002c2a:	701a      	strb	r2, [r3, #0]
 8002c2c:	e035      	b.n	8002c9a <UART_SetConfig+0x22a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a60      	ldr	r2, [pc, #384]	; (8002db4 <UART_SetConfig+0x344>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d104      	bne.n	8002c42 <UART_SetConfig+0x1d2>
 8002c38:	231f      	movs	r3, #31
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
 8002c40:	e02b      	b.n	8002c9a <UART_SetConfig+0x22a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a5c      	ldr	r2, [pc, #368]	; (8002db8 <UART_SetConfig+0x348>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d104      	bne.n	8002c56 <UART_SetConfig+0x1e6>
 8002c4c:	231f      	movs	r3, #31
 8002c4e:	18fb      	adds	r3, r7, r3
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
 8002c54:	e021      	b.n	8002c9a <UART_SetConfig+0x22a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a58      	ldr	r2, [pc, #352]	; (8002dbc <UART_SetConfig+0x34c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d104      	bne.n	8002c6a <UART_SetConfig+0x1fa>
 8002c60:	231f      	movs	r3, #31
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
 8002c68:	e017      	b.n	8002c9a <UART_SetConfig+0x22a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a54      	ldr	r2, [pc, #336]	; (8002dc0 <UART_SetConfig+0x350>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d104      	bne.n	8002c7e <UART_SetConfig+0x20e>
 8002c74:	231f      	movs	r3, #31
 8002c76:	18fb      	adds	r3, r7, r3
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
 8002c7c:	e00d      	b.n	8002c9a <UART_SetConfig+0x22a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a50      	ldr	r2, [pc, #320]	; (8002dc4 <UART_SetConfig+0x354>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d104      	bne.n	8002c92 <UART_SetConfig+0x222>
 8002c88:	231f      	movs	r3, #31
 8002c8a:	18fb      	adds	r3, r7, r3
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
 8002c90:	e003      	b.n	8002c9a <UART_SetConfig+0x22a>
 8002c92:	231f      	movs	r3, #31
 8002c94:	18fb      	adds	r3, r7, r3
 8002c96:	2210      	movs	r2, #16
 8002c98:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69da      	ldr	r2, [r3, #28]
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	021b      	lsls	r3, r3, #8
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d15d      	bne.n	8002d62 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8002ca6:	231f      	movs	r3, #31
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d015      	beq.n	8002cdc <UART_SetConfig+0x26c>
 8002cb0:	dc18      	bgt.n	8002ce4 <UART_SetConfig+0x274>
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d00d      	beq.n	8002cd2 <UART_SetConfig+0x262>
 8002cb6:	dc15      	bgt.n	8002ce4 <UART_SetConfig+0x274>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <UART_SetConfig+0x252>
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d005      	beq.n	8002ccc <UART_SetConfig+0x25c>
 8002cc0:	e010      	b.n	8002ce4 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cc2:	f7fe fe69 	bl	8001998 <HAL_RCC_GetPCLK1Freq>
 8002cc6:	0003      	movs	r3, r0
 8002cc8:	61bb      	str	r3, [r7, #24]
        break;
 8002cca:	e012      	b.n	8002cf2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ccc:	4b3e      	ldr	r3, [pc, #248]	; (8002dc8 <UART_SetConfig+0x358>)
 8002cce:	61bb      	str	r3, [r7, #24]
        break;
 8002cd0:	e00f      	b.n	8002cf2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cd2:	f7fe fdd7 	bl	8001884 <HAL_RCC_GetSysClockFreq>
 8002cd6:	0003      	movs	r3, r0
 8002cd8:	61bb      	str	r3, [r7, #24]
        break;
 8002cda:	e00a      	b.n	8002cf2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	61bb      	str	r3, [r7, #24]
        break;
 8002ce2:	e006      	b.n	8002cf2 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ce8:	231e      	movs	r3, #30
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	2201      	movs	r2, #1
 8002cee:	701a      	strb	r2, [r3, #0]
        break;
 8002cf0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d100      	bne.n	8002cfa <UART_SetConfig+0x28a>
 8002cf8:	e095      	b.n	8002e26 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	005a      	lsls	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	085b      	lsrs	r3, r3, #1
 8002d04:	18d2      	adds	r2, r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	0019      	movs	r1, r3
 8002d0c:	0010      	movs	r0, r2
 8002d0e:	f7fd fa03 	bl	8000118 <__udivsi3>
 8002d12:	0003      	movs	r3, r0
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	2b0f      	cmp	r3, #15
 8002d1c:	d91c      	bls.n	8002d58 <UART_SetConfig+0x2e8>
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	025b      	lsls	r3, r3, #9
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d217      	bcs.n	8002d58 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	200e      	movs	r0, #14
 8002d2e:	183b      	adds	r3, r7, r0
 8002d30:	210f      	movs	r1, #15
 8002d32:	438a      	bics	r2, r1
 8002d34:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2207      	movs	r2, #7
 8002d3e:	4013      	ands	r3, r2
 8002d40:	b299      	uxth	r1, r3
 8002d42:	183b      	adds	r3, r7, r0
 8002d44:	183a      	adds	r2, r7, r0
 8002d46:	8812      	ldrh	r2, [r2, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	183a      	adds	r2, r7, r0
 8002d52:	8812      	ldrh	r2, [r2, #0]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	e066      	b.n	8002e26 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002d58:	231e      	movs	r3, #30
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	701a      	strb	r2, [r3, #0]
 8002d60:	e061      	b.n	8002e26 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d62:	231f      	movs	r3, #31
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d02f      	beq.n	8002dcc <UART_SetConfig+0x35c>
 8002d6c:	dc32      	bgt.n	8002dd4 <UART_SetConfig+0x364>
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d00d      	beq.n	8002d8e <UART_SetConfig+0x31e>
 8002d72:	dc2f      	bgt.n	8002dd4 <UART_SetConfig+0x364>
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <UART_SetConfig+0x30e>
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d005      	beq.n	8002d88 <UART_SetConfig+0x318>
 8002d7c:	e02a      	b.n	8002dd4 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d7e:	f7fe fe0b 	bl	8001998 <HAL_RCC_GetPCLK1Freq>
 8002d82:	0003      	movs	r3, r0
 8002d84:	61bb      	str	r3, [r7, #24]
        break;
 8002d86:	e02c      	b.n	8002de2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d88:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <UART_SetConfig+0x358>)
 8002d8a:	61bb      	str	r3, [r7, #24]
        break;
 8002d8c:	e029      	b.n	8002de2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d8e:	f7fe fd79 	bl	8001884 <HAL_RCC_GetSysClockFreq>
 8002d92:	0003      	movs	r3, r0
 8002d94:	61bb      	str	r3, [r7, #24]
        break;
 8002d96:	e024      	b.n	8002de2 <UART_SetConfig+0x372>
 8002d98:	efff69f3 	.word	0xefff69f3
 8002d9c:	ffffcfff 	.word	0xffffcfff
 8002da0:	fffff4ff 	.word	0xfffff4ff
 8002da4:	40013800 	.word	0x40013800
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40004400 	.word	0x40004400
 8002db0:	40004800 	.word	0x40004800
 8002db4:	40004c00 	.word	0x40004c00
 8002db8:	40005000 	.word	0x40005000
 8002dbc:	40011400 	.word	0x40011400
 8002dc0:	40011800 	.word	0x40011800
 8002dc4:	40011c00 	.word	0x40011c00
 8002dc8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	61bb      	str	r3, [r7, #24]
        break;
 8002dd2:	e006      	b.n	8002de2 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dd8:	231e      	movs	r3, #30
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
        break;
 8002de0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d01e      	beq.n	8002e26 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	085a      	lsrs	r2, r3, #1
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	18d2      	adds	r2, r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	0019      	movs	r1, r3
 8002df8:	0010      	movs	r0, r2
 8002dfa:	f7fd f98d 	bl	8000118 <__udivsi3>
 8002dfe:	0003      	movs	r3, r0
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	2b0f      	cmp	r3, #15
 8002e08:	d909      	bls.n	8002e1e <UART_SetConfig+0x3ae>
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	2380      	movs	r3, #128	; 0x80
 8002e0e:	025b      	lsls	r3, r3, #9
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d204      	bcs.n	8002e1e <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	60da      	str	r2, [r3, #12]
 8002e1c:	e003      	b.n	8002e26 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002e1e:	231e      	movs	r3, #30
 8002e20:	18fb      	adds	r3, r7, r3
 8002e22:	2201      	movs	r2, #1
 8002e24:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e32:	231e      	movs	r3, #30
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	781b      	ldrb	r3, [r3, #0]
}
 8002e38:	0018      	movs	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b008      	add	sp, #32
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d00b      	beq.n	8002e6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4a4a      	ldr	r2, [pc, #296]	; (8002f84 <UART_AdvFeatureConfig+0x144>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	2202      	movs	r2, #2
 8002e70:	4013      	ands	r3, r2
 8002e72:	d00b      	beq.n	8002e8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	4a43      	ldr	r2, [pc, #268]	; (8002f88 <UART_AdvFeatureConfig+0x148>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	0019      	movs	r1, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	2204      	movs	r2, #4
 8002e92:	4013      	ands	r3, r2
 8002e94:	d00b      	beq.n	8002eae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4a3b      	ldr	r2, [pc, #236]	; (8002f8c <UART_AdvFeatureConfig+0x14c>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	0019      	movs	r1, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	2208      	movs	r2, #8
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d00b      	beq.n	8002ed0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4a34      	ldr	r2, [pc, #208]	; (8002f90 <UART_AdvFeatureConfig+0x150>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	2210      	movs	r2, #16
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d00b      	beq.n	8002ef2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	4a2c      	ldr	r2, [pc, #176]	; (8002f94 <UART_AdvFeatureConfig+0x154>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d00b      	beq.n	8002f14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	4a25      	ldr	r2, [pc, #148]	; (8002f98 <UART_AdvFeatureConfig+0x158>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	0019      	movs	r1, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	2240      	movs	r2, #64	; 0x40
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d01d      	beq.n	8002f5a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <UART_AdvFeatureConfig+0x15c>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	0019      	movs	r1, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	035b      	lsls	r3, r3, #13
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d10b      	bne.n	8002f5a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <UART_AdvFeatureConfig+0x160>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	2280      	movs	r2, #128	; 0x80
 8002f60:	4013      	ands	r3, r2
 8002f62:	d00b      	beq.n	8002f7c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <UART_AdvFeatureConfig+0x164>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	0019      	movs	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	605a      	str	r2, [r3, #4]
  }
}
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b002      	add	sp, #8
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	fffdffff 	.word	0xfffdffff
 8002f88:	fffeffff 	.word	0xfffeffff
 8002f8c:	fffbffff 	.word	0xfffbffff
 8002f90:	ffff7fff 	.word	0xffff7fff
 8002f94:	ffffefff 	.word	0xffffefff
 8002f98:	ffffdfff 	.word	0xffffdfff
 8002f9c:	ffefffff 	.word	0xffefffff
 8002fa0:	ff9fffff 	.word	0xff9fffff
 8002fa4:	fff7ffff 	.word	0xfff7ffff

08002fa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2280      	movs	r2, #128	; 0x80
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fb8:	f7fd fd6a 	bl	8000a90 <HAL_GetTick>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2208      	movs	r2, #8
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d10c      	bne.n	8002fe8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2280      	movs	r2, #128	; 0x80
 8002fd2:	0391      	lsls	r1, r2, #14
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4a17      	ldr	r2, [pc, #92]	; (8003034 <UART_CheckIdleState+0x8c>)
 8002fd8:	9200      	str	r2, [sp, #0]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f000 f82c 	bl	8003038 <UART_WaitOnFlagUntilTimeout>
 8002fe0:	1e03      	subs	r3, r0, #0
 8002fe2:	d001      	beq.n	8002fe8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e021      	b.n	800302c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2204      	movs	r2, #4
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d10c      	bne.n	8003010 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2280      	movs	r2, #128	; 0x80
 8002ffa:	03d1      	lsls	r1, r2, #15
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	4a0d      	ldr	r2, [pc, #52]	; (8003034 <UART_CheckIdleState+0x8c>)
 8003000:	9200      	str	r2, [sp, #0]
 8003002:	2200      	movs	r2, #0
 8003004:	f000 f818 	bl	8003038 <UART_WaitOnFlagUntilTimeout>
 8003008:	1e03      	subs	r3, r0, #0
 800300a:	d001      	beq.n	8003010 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e00d      	b.n	800302c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2220      	movs	r2, #32
 800301a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2274      	movs	r2, #116	; 0x74
 8003026:	2100      	movs	r1, #0
 8003028:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	b004      	add	sp, #16
 8003032:	bd80      	pop	{r7, pc}
 8003034:	01ffffff 	.word	0x01ffffff

08003038 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b094      	sub	sp, #80	; 0x50
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	1dfb      	adds	r3, r7, #7
 8003046:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003048:	e0a3      	b.n	8003192 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800304c:	3301      	adds	r3, #1
 800304e:	d100      	bne.n	8003052 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003050:	e09f      	b.n	8003192 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003052:	f7fd fd1d 	bl	8000a90 <HAL_GetTick>
 8003056:	0002      	movs	r2, r0
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800305e:	429a      	cmp	r2, r3
 8003060:	d302      	bcc.n	8003068 <UART_WaitOnFlagUntilTimeout+0x30>
 8003062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003064:	2b00      	cmp	r3, #0
 8003066:	d13d      	bne.n	80030e4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003068:	f3ef 8310 	mrs	r3, PRIMASK
 800306c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003070:	647b      	str	r3, [r7, #68]	; 0x44
 8003072:	2301      	movs	r3, #1
 8003074:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003078:	f383 8810 	msr	PRIMASK, r3
}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	494c      	ldr	r1, [pc, #304]	; (80031bc <UART_WaitOnFlagUntilTimeout+0x184>)
 800308a:	400a      	ands	r2, r1
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003090:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	f383 8810 	msr	PRIMASK, r3
}
 8003098:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800309a:	f3ef 8310 	mrs	r3, PRIMASK
 800309e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80030a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a2:	643b      	str	r3, [r7, #64]	; 0x40
 80030a4:	2301      	movs	r3, #1
 80030a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030aa:	f383 8810 	msr	PRIMASK, r3
}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2101      	movs	r1, #1
 80030bc:	438a      	bics	r2, r1
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c6:	f383 8810 	msr	PRIMASK, r3
}
 80030ca:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2274      	movs	r2, #116	; 0x74
 80030dc:	2100      	movs	r1, #0
 80030de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e067      	b.n	80031b4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2204      	movs	r2, #4
 80030ec:	4013      	ands	r3, r2
 80030ee:	d050      	beq.n	8003192 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	69da      	ldr	r2, [r3, #28]
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	401a      	ands	r2, r3
 80030fc:	2380      	movs	r3, #128	; 0x80
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	429a      	cmp	r2, r3
 8003102:	d146      	bne.n	8003192 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2280      	movs	r2, #128	; 0x80
 800310a:	0112      	lsls	r2, r2, #4
 800310c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800310e:	f3ef 8310 	mrs	r3, PRIMASK
 8003112:	613b      	str	r3, [r7, #16]
  return(result);
 8003114:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003118:	2301      	movs	r3, #1
 800311a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f383 8810 	msr	PRIMASK, r3
}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4923      	ldr	r1, [pc, #140]	; (80031bc <UART_WaitOnFlagUntilTimeout+0x184>)
 8003130:	400a      	ands	r2, r1
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003136:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	f383 8810 	msr	PRIMASK, r3
}
 800313e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003140:	f3ef 8310 	mrs	r3, PRIMASK
 8003144:	61fb      	str	r3, [r7, #28]
  return(result);
 8003146:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003148:	64bb      	str	r3, [r7, #72]	; 0x48
 800314a:	2301      	movs	r3, #1
 800314c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	f383 8810 	msr	PRIMASK, r3
}
 8003154:	46c0      	nop			; (mov r8, r8)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2101      	movs	r1, #1
 8003162:	438a      	bics	r2, r1
 8003164:	609a      	str	r2, [r3, #8]
 8003166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	f383 8810 	msr	PRIMASK, r3
}
 8003170:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2280      	movs	r2, #128	; 0x80
 8003182:	2120      	movs	r1, #32
 8003184:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2274      	movs	r2, #116	; 0x74
 800318a:	2100      	movs	r1, #0
 800318c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e010      	b.n	80031b4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	4013      	ands	r3, r2
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	425a      	negs	r2, r3
 80031a2:	4153      	adcs	r3, r2
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	001a      	movs	r2, r3
 80031a8:	1dfb      	adds	r3, r7, #7
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d100      	bne.n	80031b2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80031b0:	e74b      	b.n	800304a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	0018      	movs	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b014      	add	sp, #80	; 0x50
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	fffffe5f 	.word	0xfffffe5f

080031c0 <PacketInit>:
* @return            none
* @note              none
*********************************************************************************************
*/
void PacketInit(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
    //initialize buffer in big endian byte array
    header[3] = (HEADER & 0x000000ff);
 80031c4:	4b07      	ldr	r3, [pc, #28]	; (80031e4 <PacketInit+0x24>)
 80031c6:	2250      	movs	r2, #80	; 0x50
 80031c8:	70da      	strb	r2, [r3, #3]
    header[2] = (HEADER & 0x0000ff00) >> 8;
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <PacketInit+0x24>)
 80031cc:	2253      	movs	r2, #83	; 0x53
 80031ce:	709a      	strb	r2, [r3, #2]
    header[1] = (HEADER & 0x00ff0000) >> 16;
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <PacketInit+0x24>)
 80031d2:	2255      	movs	r2, #85	; 0x55
 80031d4:	705a      	strb	r2, [r3, #1]
    header[0] = (HEADER & 0xff000000) >> 24;
 80031d6:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <PacketInit+0x24>)
 80031d8:	224d      	movs	r2, #77	; 0x4d
 80031da:	701a      	strb	r2, [r3, #0]
}
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	200005a4 	.word	0x200005a4

080031e8 <PacketAssemble>:
* @return            none
* @note              none
*********************************************************************************************
*/
void PacketAssemble(uint8_t id, uint8_t cmd, uint8_t *arg, uint8_t argSize, uint8_t *buffer)
{
 80031e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ea:	46c6      	mov	lr, r8
 80031ec:	b500      	push	{lr}
 80031ee:	b08e      	sub	sp, #56	; 0x38
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	0006      	movs	r6, r0
 80031f4:	0008      	movs	r0, r1
 80031f6:	61ba      	str	r2, [r7, #24]
 80031f8:	0019      	movs	r1, r3
 80031fa:	231f      	movs	r3, #31
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	1c32      	adds	r2, r6, #0
 8003200:	701a      	strb	r2, [r3, #0]
 8003202:	221e      	movs	r2, #30
 8003204:	18bb      	adds	r3, r7, r2
 8003206:	1c02      	adds	r2, r0, #0
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	261d      	movs	r6, #29
 800320c:	19bb      	adds	r3, r7, r6
 800320e:	1c0a      	adds	r2, r1, #0
 8003210:	701a      	strb	r2, [r3, #0]
    //Add header to the buffer
    memcpy(buffer, header, sizeof(header));
 8003212:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003214:	4b5a      	ldr	r3, [pc, #360]	; (8003380 <PacketAssemble+0x198>)
 8003216:	0010      	movs	r0, r2
 8003218:	0019      	movs	r1, r3
 800321a:	2304      	movs	r3, #4
 800321c:	001a      	movs	r2, r3
 800321e:	f000 fa07 	bl	8003630 <memcpy>
    //Add id, cmd and argsize to the buffer
    buffer[4] = id;
 8003222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003224:	3304      	adds	r3, #4
 8003226:	211f      	movs	r1, #31
 8003228:	187a      	adds	r2, r7, r1
 800322a:	7812      	ldrb	r2, [r2, #0]
 800322c:	701a      	strb	r2, [r3, #0]
    buffer[5] = cmd;
 800322e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003230:	3305      	adds	r3, #5
 8003232:	221e      	movs	r2, #30
 8003234:	18ba      	adds	r2, r7, r2
 8003236:	7812      	ldrb	r2, [r2, #0]
 8003238:	701a      	strb	r2, [r3, #0]
    buffer[6] = argSize;
 800323a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800323c:	3306      	adds	r3, #6
 800323e:	19ba      	adds	r2, r7, r6
 8003240:	7812      	ldrb	r2, [r2, #0]
 8003242:	701a      	strb	r2, [r3, #0]
    uint8_t lastPos;

    //check if command has an argument and add them to array
    if (argSize)
 8003244:	19bb      	adds	r3, r7, r6
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01f      	beq.n	800328c <PacketAssemble+0xa4>
    {
        for (int i = 0; i < argSize; i++)
 800324c:	2300      	movs	r3, #0
 800324e:	637b      	str	r3, [r7, #52]	; 0x34
 8003250:	e015      	b.n	800327e <PacketAssemble+0x96>
        {
            buffer[7 + i] = arg[i];
 8003252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	18d2      	adds	r2, r2, r3
 8003258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325a:	3307      	adds	r3, #7
 800325c:	0019      	movs	r1, r3
 800325e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003260:	185b      	adds	r3, r3, r1
 8003262:	7812      	ldrb	r2, [r2, #0]
 8003264:	701a      	strb	r2, [r3, #0]
            lastPos = 7 + i;
 8003266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003268:	b2da      	uxtb	r2, r3
 800326a:	231b      	movs	r3, #27
 800326c:	2118      	movs	r1, #24
 800326e:	468c      	mov	ip, r1
 8003270:	44bc      	add	ip, r7
 8003272:	4463      	add	r3, ip
 8003274:	3207      	adds	r2, #7
 8003276:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < argSize; i++)
 8003278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800327a:	3301      	adds	r3, #1
 800327c:	637b      	str	r3, [r7, #52]	; 0x34
 800327e:	231d      	movs	r3, #29
 8003280:	18fb      	adds	r3, r7, r3
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003286:	429a      	cmp	r2, r3
 8003288:	dbe3      	blt.n	8003252 <PacketAssemble+0x6a>
 800328a:	e006      	b.n	800329a <PacketAssemble+0xb2>
        }
    }
    else
    {
        lastPos = 7;
 800328c:	231b      	movs	r3, #27
 800328e:	2218      	movs	r2, #24
 8003290:	4694      	mov	ip, r2
 8003292:	44bc      	add	ip, r7
 8003294:	4463      	add	r3, ip
 8003296:	2207      	movs	r2, #7
 8003298:	701a      	strb	r2, [r3, #0]
    }
    //calculate CRC
    uint8_t tempData[lastPos+1];
 800329a:	231b      	movs	r3, #27
 800329c:	2218      	movs	r2, #24
 800329e:	4694      	mov	ip, r2
 80032a0:	44bc      	add	ip, r7
 80032a2:	4463      	add	r3, ip
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	1c5e      	adds	r6, r3, #1
 80032a8:	466b      	mov	r3, sp
 80032aa:	4698      	mov	r8, r3
 80032ac:	1e73      	subs	r3, r6, #1
 80032ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032b0:	0033      	movs	r3, r6
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	0008      	movs	r0, r1
 80032be:	0f43      	lsrs	r3, r0, #29
 80032c0:	0010      	movs	r0, r2
 80032c2:	00c0      	lsls	r0, r0, #3
 80032c4:	6178      	str	r0, [r7, #20]
 80032c6:	6978      	ldr	r0, [r7, #20]
 80032c8:	4318      	orrs	r0, r3
 80032ca:	6178      	str	r0, [r7, #20]
 80032cc:	000a      	movs	r2, r1
 80032ce:	00d2      	lsls	r2, r2, #3
 80032d0:	613a      	str	r2, [r7, #16]
 80032d2:	0033      	movs	r3, r6
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	2300      	movs	r3, #0
 80032d8:	607b      	str	r3, [r7, #4]
 80032da:	6839      	ldr	r1, [r7, #0]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	0008      	movs	r0, r1
 80032e0:	0f43      	lsrs	r3, r0, #29
 80032e2:	0010      	movs	r0, r2
 80032e4:	00c5      	lsls	r5, r0, #3
 80032e6:	431d      	orrs	r5, r3
 80032e8:	000a      	movs	r2, r1
 80032ea:	00d4      	lsls	r4, r2, #3
 80032ec:	0033      	movs	r3, r6
 80032ee:	3307      	adds	r3, #7
 80032f0:	08db      	lsrs	r3, r3, #3
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	466a      	mov	r2, sp
 80032f6:	1ad2      	subs	r2, r2, r3
 80032f8:	4695      	mov	sp, r2
 80032fa:	466b      	mov	r3, sp
 80032fc:	3300      	adds	r3, #0
 80032fe:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t CRC[4];
    memcpy(tempData, buffer, sizeof(tempData));
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	0032      	movs	r2, r6
 8003304:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003306:	0018      	movs	r0, r3
 8003308:	f000 f992 	bl	8003630 <memcpy>
    uint32_t calcCRC = crc32(0, tempData, sizeof(tempData));
 800330c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330e:	0032      	movs	r2, r6
 8003310:	0019      	movs	r1, r3
 8003312:	2000      	movs	r0, #0
 8003314:	f000 f92a 	bl	800356c <crc32>
 8003318:	0003      	movs	r3, r0
 800331a:	627b      	str	r3, [r7, #36]	; 0x24


    //add crc in big endian at the end of the buffer
    CRC[3] = (calcCRC & 0x000000ff);
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	b2da      	uxtb	r2, r3
 8003320:	2108      	movs	r1, #8
 8003322:	2018      	movs	r0, #24
 8003324:	183b      	adds	r3, r7, r0
 8003326:	185b      	adds	r3, r3, r1
 8003328:	70da      	strb	r2, [r3, #3]
    CRC[2] = (calcCRC & 0x0000ff00) >> 8;
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	0a1b      	lsrs	r3, r3, #8
 800332e:	b2da      	uxtb	r2, r3
 8003330:	183b      	adds	r3, r7, r0
 8003332:	185b      	adds	r3, r3, r1
 8003334:	709a      	strb	r2, [r3, #2]
    CRC[1] = (calcCRC & 0x00ff0000) >> 16;
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	0c1b      	lsrs	r3, r3, #16
 800333a:	b2da      	uxtb	r2, r3
 800333c:	183b      	adds	r3, r7, r0
 800333e:	185b      	adds	r3, r3, r1
 8003340:	705a      	strb	r2, [r3, #1]
    CRC[0] = (calcCRC & 0xff000000) >> 24;
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	0e1b      	lsrs	r3, r3, #24
 8003346:	b2da      	uxtb	r2, r3
 8003348:	183b      	adds	r3, r7, r0
 800334a:	185b      	adds	r3, r3, r1
 800334c:	701a      	strb	r2, [r3, #0]
    memcpy(buffer+lastPos+1,CRC,sizeof(CRC));
 800334e:	231b      	movs	r3, #27
 8003350:	2218      	movs	r2, #24
 8003352:	4694      	mov	ip, r2
 8003354:	44bc      	add	ip, r7
 8003356:	4463      	add	r3, ip
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	3301      	adds	r3, #1
 800335c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800335e:	18d2      	adds	r2, r2, r3
 8003360:	183b      	adds	r3, r7, r0
 8003362:	185b      	adds	r3, r3, r1
 8003364:	0010      	movs	r0, r2
 8003366:	0019      	movs	r1, r3
 8003368:	2304      	movs	r3, #4
 800336a:	001a      	movs	r2, r3
 800336c:	f000 f960 	bl	8003630 <memcpy>
 8003370:	46c5      	mov	sp, r8
}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	46bd      	mov	sp, r7
 8003376:	b00e      	add	sp, #56	; 0x38
 8003378:	bc80      	pop	{r7}
 800337a:	46b8      	mov	r8, r7
 800337c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	200005a4 	.word	0x200005a4

08003384 <PacketDisassemble>:
* @return            packet disassemble status: DEFRAME_OK = ok, DEFRAME_INVALID_HEADER = can't find header in the buffer, DEFRAME_INVALID_CRC = crc doesn't match
* @note              none
*********************************************************************************************
*/
deframeReturn PacketDisassemble(uint8_t *id, uint8_t *len, uint8_t *cmd, uint8_t *arg, uint8_t *buffer, int bufferSize)
{
 8003384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003386:	46c6      	mov	lr, r8
 8003388:	b500      	push	{lr}
 800338a:	b094      	sub	sp, #80	; 0x50
 800338c:	af00      	add	r7, sp, #0
 800338e:	6278      	str	r0, [r7, #36]	; 0x24
 8003390:	6239      	str	r1, [r7, #32]
 8003392:	61fa      	str	r2, [r7, #28]
 8003394:	61bb      	str	r3, [r7, #24]
    /*Search for header*/
    int pos = -1;
 8003396:	2301      	movs	r3, #1
 8003398:	425b      	negs	r3, r3
 800339a:	64bb      	str	r3, [r7, #72]	; 0x48
    for (int i = 0; i < bufferSize; i++)
 800339c:	2300      	movs	r3, #0
 800339e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033a0:	e032      	b.n	8003408 <PacketDisassemble+0x84>
    {
        if ((buffer[i] == header[0]) & (bufferSize - i >= MINPKTLEN))//find a start of header before length of message - 4
 80033a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033a6:	18d3      	adds	r3, r2, r3
 80033a8:	781a      	ldrb	r2, [r3, #0]
 80033aa:	4b6f      	ldr	r3, [pc, #444]	; (8003568 <PacketDisassemble+0x1e4>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	425a      	negs	r2, r3
 80033b2:	4153      	adcs	r3, r2
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80033b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033ba:	1a8a      	subs	r2, r1, r2
 80033bc:	2101      	movs	r1, #1
 80033be:	2a0a      	cmp	r2, #10
 80033c0:	dc01      	bgt.n	80033c6 <PacketDisassemble+0x42>
 80033c2:	2200      	movs	r2, #0
 80033c4:	1c11      	adds	r1, r2, #0
 80033c6:	b2ca      	uxtb	r2, r1
 80033c8:	4013      	ands	r3, r2
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d018      	beq.n	8003402 <PacketDisassemble+0x7e>
        {
            uint8_t cmpHeader[4];
            memcpy(cmpHeader, buffer + i, 4);
 80033d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033d4:	18d3      	adds	r3, r2, r3
 80033d6:	2618      	movs	r6, #24
 80033d8:	2218      	movs	r2, #24
 80033da:	18b9      	adds	r1, r7, r2
 80033dc:	198a      	adds	r2, r1, r6
 80033de:	0010      	movs	r0, r2
 80033e0:	0019      	movs	r1, r3
 80033e2:	2304      	movs	r3, #4
 80033e4:	001a      	movs	r2, r3
 80033e6:	f000 f923 	bl	8003630 <memcpy>
            if (!memcmp(cmpHeader, header, 4))
 80033ea:	495f      	ldr	r1, [pc, #380]	; (8003568 <PacketDisassemble+0x1e4>)
 80033ec:	2318      	movs	r3, #24
 80033ee:	18fb      	adds	r3, r7, r3
 80033f0:	199b      	adds	r3, r3, r6
 80033f2:	2204      	movs	r2, #4
 80033f4:	0018      	movs	r0, r3
 80033f6:	f000 f90d 	bl	8003614 <memcmp>
 80033fa:	1e03      	subs	r3, r0, #0
 80033fc:	d101      	bne.n	8003402 <PacketDisassemble+0x7e>
            {
                pos = i;//set the position of the start of the message
 80033fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003400:	64bb      	str	r3, [r7, #72]	; 0x48
    for (int i = 0; i < bufferSize; i++)
 8003402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003404:	3301      	adds	r3, #1
 8003406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003408:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800340a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340c:	429a      	cmp	r2, r3
 800340e:	dbc8      	blt.n	80033a2 <PacketDisassemble+0x1e>
            }
        }
    }
    if (pos == -1)//cant find header
 8003410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003412:	3301      	adds	r3, #1
 8003414:	d101      	bne.n	800341a <PacketDisassemble+0x96>
    {
        return DEFRAME_INVALID_HEADER;
 8003416:	2301      	movs	r3, #1
 8003418:	e0a0      	b.n	800355c <PacketDisassemble+0x1d8>
    }
    else
    {
 800341a:	466b      	mov	r3, sp
 800341c:	4698      	mov	r8, r3
        //CRC verification

        uint32_t givenCRC;
        uint8_t tempCRC[4];
        uint8_t actualLen = buffer[pos + 6] + 1 + 1 + 1+ 4;
 800341e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003420:	3306      	adds	r3, #6
 8003422:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003424:	18d3      	adds	r3, r2, r3
 8003426:	781a      	ldrb	r2, [r3, #0]
 8003428:	212f      	movs	r1, #47	; 0x2f
 800342a:	2018      	movs	r0, #24
 800342c:	183b      	adds	r3, r7, r0
 800342e:	185b      	adds	r3, r3, r1
 8003430:	3207      	adds	r2, #7
 8003432:	701a      	strb	r2, [r3, #0]
        memcpy(tempCRC,buffer+(pos+actualLen),4);//get CRC in the packet
 8003434:	183b      	adds	r3, r7, r0
 8003436:	185b      	adds	r3, r3, r1
 8003438:	781a      	ldrb	r2, [r3, #0]
 800343a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800343c:	18d3      	adds	r3, r2, r3
 800343e:	001a      	movs	r2, r3
 8003440:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003442:	189b      	adds	r3, r3, r2
 8003444:	2614      	movs	r6, #20
 8003446:	183a      	adds	r2, r7, r0
 8003448:	1992      	adds	r2, r2, r6
 800344a:	0010      	movs	r0, r2
 800344c:	0019      	movs	r1, r3
 800344e:	2304      	movs	r3, #4
 8003450:	001a      	movs	r2, r3
 8003452:	f000 f8ed 	bl	8003630 <memcpy>
        givenCRC=(tempCRC[0]<<24)|(tempCRC[1]<<16)|(tempCRC[2]<<8)|(tempCRC[3]);//make the CRC in uint32 form
 8003456:	0031      	movs	r1, r6
 8003458:	2018      	movs	r0, #24
 800345a:	183b      	adds	r3, r7, r0
 800345c:	185b      	adds	r3, r3, r1
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	061a      	lsls	r2, r3, #24
 8003462:	183b      	adds	r3, r7, r0
 8003464:	185b      	adds	r3, r3, r1
 8003466:	785b      	ldrb	r3, [r3, #1]
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	431a      	orrs	r2, r3
 800346c:	183b      	adds	r3, r7, r0
 800346e:	185b      	adds	r3, r3, r1
 8003470:	789b      	ldrb	r3, [r3, #2]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	4313      	orrs	r3, r2
 8003476:	183a      	adds	r2, r7, r0
 8003478:	1852      	adds	r2, r2, r1
 800347a:	78d2      	ldrb	r2, [r2, #3]
 800347c:	4313      	orrs	r3, r2
 800347e:	643b      	str	r3, [r7, #64]	; 0x40

        //copy everything in the packet except the crc (the last 4 bytes)
        uint8_t tempData[actualLen];
 8003480:	212f      	movs	r1, #47	; 0x2f
 8003482:	183b      	adds	r3, r7, r0
 8003484:	185b      	adds	r3, r3, r1
 8003486:	781e      	ldrb	r6, [r3, #0]
 8003488:	0033      	movs	r3, r6
 800348a:	3b01      	subs	r3, #1
 800348c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800348e:	60be      	str	r6, [r7, #8]
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68b9      	ldr	r1, [r7, #8]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	0008      	movs	r0, r1
 800349a:	0f43      	lsrs	r3, r0, #29
 800349c:	0010      	movs	r0, r2
 800349e:	00c0      	lsls	r0, r0, #3
 80034a0:	6178      	str	r0, [r7, #20]
 80034a2:	6978      	ldr	r0, [r7, #20]
 80034a4:	4318      	orrs	r0, r3
 80034a6:	6178      	str	r0, [r7, #20]
 80034a8:	000a      	movs	r2, r1
 80034aa:	00d2      	lsls	r2, r2, #3
 80034ac:	613a      	str	r2, [r7, #16]
 80034ae:	603e      	str	r6, [r7, #0]
 80034b0:	2300      	movs	r3, #0
 80034b2:	607b      	str	r3, [r7, #4]
 80034b4:	6839      	ldr	r1, [r7, #0]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	0008      	movs	r0, r1
 80034ba:	0f43      	lsrs	r3, r0, #29
 80034bc:	0010      	movs	r0, r2
 80034be:	00c5      	lsls	r5, r0, #3
 80034c0:	431d      	orrs	r5, r3
 80034c2:	000a      	movs	r2, r1
 80034c4:	00d4      	lsls	r4, r2, #3
 80034c6:	0033      	movs	r3, r6
 80034c8:	3307      	adds	r3, #7
 80034ca:	08db      	lsrs	r3, r3, #3
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	466a      	mov	r2, sp
 80034d0:	1ad2      	subs	r2, r2, r3
 80034d2:	4695      	mov	sp, r2
 80034d4:	466b      	mov	r3, sp
 80034d6:	3300      	adds	r3, #0
 80034d8:	63bb      	str	r3, [r7, #56]	; 0x38
        memcpy(tempData,buffer+pos,actualLen);
 80034da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034e0:	18d1      	adds	r1, r2, r3
 80034e2:	232f      	movs	r3, #47	; 0x2f
 80034e4:	2218      	movs	r2, #24
 80034e6:	4694      	mov	ip, r2
 80034e8:	44bc      	add	ip, r7
 80034ea:	4463      	add	r3, ip
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	001a      	movs	r2, r3
 80034f0:	f000 f89e 	bl	8003630 <memcpy>

        uint32_t calcCRC = crc32(0,tempData,sizeof(tempData));//calculate the checksum crc32 of the copied message
 80034f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f6:	0032      	movs	r2, r6
 80034f8:	0019      	movs	r1, r3
 80034fa:	2000      	movs	r0, #0
 80034fc:	f000 f836 	bl	800356c <crc32>
 8003500:	0003      	movs	r3, r0
 8003502:	637b      	str	r3, [r7, #52]	; 0x34
        if (calcCRC!=givenCRC){
 8003504:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <PacketDisassemble+0x18c>
            return DEFRAME_INVALID_CRC;//return because crc doesnt match
 800350c:	2302      	movs	r3, #2
 800350e:	e024      	b.n	800355a <PacketDisassemble+0x1d6>
        }

        *id = buffer[pos + 4];
 8003510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003512:	3304      	adds	r3, #4
 8003514:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003516:	18d3      	adds	r3, r2, r3
 8003518:	781a      	ldrb	r2, [r3, #0]
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	701a      	strb	r2, [r3, #0]
        *len = buffer[pos+6];
 800351e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003520:	3306      	adds	r3, #6
 8003522:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003524:	18d3      	adds	r3, r2, r3
 8003526:	781a      	ldrb	r2, [r3, #0]
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	701a      	strb	r2, [r3, #0]
        *cmd = buffer[pos + 5];
 800352c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800352e:	3305      	adds	r3, #5
 8003530:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003532:	18d3      	adds	r3, r2, r3
 8003534:	781a      	ldrb	r2, [r3, #0]
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	701a      	strb	r2, [r3, #0]

        if (*len != 0)//len !=0 means there is a argument to the command
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <PacketDisassemble+0x1d4>
        {
            memcpy(arg, buffer + pos + 7, *len );
 8003542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003544:	3307      	adds	r3, #7
 8003546:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003548:	18d1      	adds	r1, r2, r3
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	001a      	movs	r2, r3
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	0018      	movs	r0, r3
 8003554:	f000 f86c 	bl	8003630 <memcpy>
        }
        return DEFRAME_OK;//return with ok
 8003558:	2300      	movs	r3, #0
 800355a:	46c5      	mov	sp, r8
    }

}
 800355c:	0018      	movs	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	b014      	add	sp, #80	; 0x50
 8003562:	bc80      	pop	{r7}
 8003564:	46b8      	mov	r8, r7
 8003566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003568:	200005a4 	.word	0x200005a4

0800356c <crc32>:
* @note              Used polynomial is 0x04C11DB7. Implementation is standard table algorithm
*                    with reflection and byte reversal. Implementation details borrowed from literature.
*********************************************************************************************
*/
DWORD crc32(DWORD crc, BYTE *buf, DWORD size)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
    BYTE* p = buf;
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	617b      	str	r3, [r7, #20]

    crc = ~crc;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	43db      	mvns	r3, r3
 8003580:	60fb      	str	r3, [r7, #12]

    while (size--)
 8003582:	e00f      	b.n	80035a4 <crc32+0x38>
        crc = crc32_tab[(BYTE)crc ^ *p++] ^ (crc >> 8);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	b2da      	uxtb	r2, r3
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	1c59      	adds	r1, r3, #1
 800358c:	6179      	str	r1, [r7, #20]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	4053      	eors	r3, r2
 8003592:	b2db      	uxtb	r3, r3
 8003594:	001a      	movs	r2, r3
 8003596:	4b09      	ldr	r3, [pc, #36]	; (80035bc <crc32+0x50>)
 8003598:	0092      	lsls	r2, r2, #2
 800359a:	58d2      	ldr	r2, [r2, r3]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	0a1b      	lsrs	r3, r3, #8
 80035a0:	4053      	eors	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
    while (size--)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	1e5a      	subs	r2, r3, #1
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1ea      	bne.n	8003584 <crc32+0x18>

    return ~crc;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	43db      	mvns	r3, r3
}
 80035b2:	0018      	movs	r0, r3
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b006      	add	sp, #24
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	2000000c 	.word	0x2000000c

080035c0 <__errno>:
 80035c0:	4b01      	ldr	r3, [pc, #4]	; (80035c8 <__errno+0x8>)
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	4770      	bx	lr
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	2000040c 	.word	0x2000040c

080035cc <__libc_init_array>:
 80035cc:	b570      	push	{r4, r5, r6, lr}
 80035ce:	2600      	movs	r6, #0
 80035d0:	4d0c      	ldr	r5, [pc, #48]	; (8003604 <__libc_init_array+0x38>)
 80035d2:	4c0d      	ldr	r4, [pc, #52]	; (8003608 <__libc_init_array+0x3c>)
 80035d4:	1b64      	subs	r4, r4, r5
 80035d6:	10a4      	asrs	r4, r4, #2
 80035d8:	42a6      	cmp	r6, r4
 80035da:	d109      	bne.n	80035f0 <__libc_init_array+0x24>
 80035dc:	2600      	movs	r6, #0
 80035de:	f000 ffd7 	bl	8004590 <_init>
 80035e2:	4d0a      	ldr	r5, [pc, #40]	; (800360c <__libc_init_array+0x40>)
 80035e4:	4c0a      	ldr	r4, [pc, #40]	; (8003610 <__libc_init_array+0x44>)
 80035e6:	1b64      	subs	r4, r4, r5
 80035e8:	10a4      	asrs	r4, r4, #2
 80035ea:	42a6      	cmp	r6, r4
 80035ec:	d105      	bne.n	80035fa <__libc_init_array+0x2e>
 80035ee:	bd70      	pop	{r4, r5, r6, pc}
 80035f0:	00b3      	lsls	r3, r6, #2
 80035f2:	58eb      	ldr	r3, [r5, r3]
 80035f4:	4798      	blx	r3
 80035f6:	3601      	adds	r6, #1
 80035f8:	e7ee      	b.n	80035d8 <__libc_init_array+0xc>
 80035fa:	00b3      	lsls	r3, r6, #2
 80035fc:	58eb      	ldr	r3, [r5, r3]
 80035fe:	4798      	blx	r3
 8003600:	3601      	adds	r6, #1
 8003602:	e7f2      	b.n	80035ea <__libc_init_array+0x1e>
 8003604:	080046dc 	.word	0x080046dc
 8003608:	080046dc 	.word	0x080046dc
 800360c:	080046dc 	.word	0x080046dc
 8003610:	080046e0 	.word	0x080046e0

08003614 <memcmp>:
 8003614:	b530      	push	{r4, r5, lr}
 8003616:	2400      	movs	r4, #0
 8003618:	3901      	subs	r1, #1
 800361a:	42a2      	cmp	r2, r4
 800361c:	d101      	bne.n	8003622 <memcmp+0xe>
 800361e:	2000      	movs	r0, #0
 8003620:	e005      	b.n	800362e <memcmp+0x1a>
 8003622:	5d03      	ldrb	r3, [r0, r4]
 8003624:	3401      	adds	r4, #1
 8003626:	5d0d      	ldrb	r5, [r1, r4]
 8003628:	42ab      	cmp	r3, r5
 800362a:	d0f6      	beq.n	800361a <memcmp+0x6>
 800362c:	1b58      	subs	r0, r3, r5
 800362e:	bd30      	pop	{r4, r5, pc}

08003630 <memcpy>:
 8003630:	2300      	movs	r3, #0
 8003632:	b510      	push	{r4, lr}
 8003634:	429a      	cmp	r2, r3
 8003636:	d100      	bne.n	800363a <memcpy+0xa>
 8003638:	bd10      	pop	{r4, pc}
 800363a:	5ccc      	ldrb	r4, [r1, r3]
 800363c:	54c4      	strb	r4, [r0, r3]
 800363e:	3301      	adds	r3, #1
 8003640:	e7f8      	b.n	8003634 <memcpy+0x4>

08003642 <memset>:
 8003642:	0003      	movs	r3, r0
 8003644:	1882      	adds	r2, r0, r2
 8003646:	4293      	cmp	r3, r2
 8003648:	d100      	bne.n	800364c <memset+0xa>
 800364a:	4770      	bx	lr
 800364c:	7019      	strb	r1, [r3, #0]
 800364e:	3301      	adds	r3, #1
 8003650:	e7f9      	b.n	8003646 <memset+0x4>
	...

08003654 <iprintf>:
 8003654:	b40f      	push	{r0, r1, r2, r3}
 8003656:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <iprintf+0x30>)
 8003658:	b513      	push	{r0, r1, r4, lr}
 800365a:	681c      	ldr	r4, [r3, #0]
 800365c:	2c00      	cmp	r4, #0
 800365e:	d005      	beq.n	800366c <iprintf+0x18>
 8003660:	69a3      	ldr	r3, [r4, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d102      	bne.n	800366c <iprintf+0x18>
 8003666:	0020      	movs	r0, r4
 8003668:	f000 f870 	bl	800374c <__sinit>
 800366c:	ab05      	add	r3, sp, #20
 800366e:	0020      	movs	r0, r4
 8003670:	9a04      	ldr	r2, [sp, #16]
 8003672:	68a1      	ldr	r1, [r4, #8]
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	f000 f993 	bl	80039a0 <_vfiprintf_r>
 800367a:	bc16      	pop	{r1, r2, r4}
 800367c:	bc08      	pop	{r3}
 800367e:	b004      	add	sp, #16
 8003680:	4718      	bx	r3
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	2000040c 	.word	0x2000040c

08003688 <std>:
 8003688:	2300      	movs	r3, #0
 800368a:	b510      	push	{r4, lr}
 800368c:	0004      	movs	r4, r0
 800368e:	6003      	str	r3, [r0, #0]
 8003690:	6043      	str	r3, [r0, #4]
 8003692:	6083      	str	r3, [r0, #8]
 8003694:	8181      	strh	r1, [r0, #12]
 8003696:	6643      	str	r3, [r0, #100]	; 0x64
 8003698:	0019      	movs	r1, r3
 800369a:	81c2      	strh	r2, [r0, #14]
 800369c:	6103      	str	r3, [r0, #16]
 800369e:	6143      	str	r3, [r0, #20]
 80036a0:	6183      	str	r3, [r0, #24]
 80036a2:	2208      	movs	r2, #8
 80036a4:	305c      	adds	r0, #92	; 0x5c
 80036a6:	f7ff ffcc 	bl	8003642 <memset>
 80036aa:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <std+0x38>)
 80036ac:	6263      	str	r3, [r4, #36]	; 0x24
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <std+0x3c>)
 80036b0:	6224      	str	r4, [r4, #32]
 80036b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80036b4:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <std+0x40>)
 80036b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80036b8:	4b04      	ldr	r3, [pc, #16]	; (80036cc <std+0x44>)
 80036ba:	6323      	str	r3, [r4, #48]	; 0x30
 80036bc:	bd10      	pop	{r4, pc}
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	08003f3d 	.word	0x08003f3d
 80036c4:	08003f65 	.word	0x08003f65
 80036c8:	08003f9d 	.word	0x08003f9d
 80036cc:	08003fc9 	.word	0x08003fc9

080036d0 <_cleanup_r>:
 80036d0:	b510      	push	{r4, lr}
 80036d2:	4902      	ldr	r1, [pc, #8]	; (80036dc <_cleanup_r+0xc>)
 80036d4:	f000 f8ba 	bl	800384c <_fwalk_reent>
 80036d8:	bd10      	pop	{r4, pc}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	080042d5 	.word	0x080042d5

080036e0 <__sfmoreglue>:
 80036e0:	b570      	push	{r4, r5, r6, lr}
 80036e2:	2568      	movs	r5, #104	; 0x68
 80036e4:	1e4a      	subs	r2, r1, #1
 80036e6:	4355      	muls	r5, r2
 80036e8:	000e      	movs	r6, r1
 80036ea:	0029      	movs	r1, r5
 80036ec:	3174      	adds	r1, #116	; 0x74
 80036ee:	f000 f8d1 	bl	8003894 <_malloc_r>
 80036f2:	1e04      	subs	r4, r0, #0
 80036f4:	d008      	beq.n	8003708 <__sfmoreglue+0x28>
 80036f6:	2100      	movs	r1, #0
 80036f8:	002a      	movs	r2, r5
 80036fa:	6001      	str	r1, [r0, #0]
 80036fc:	6046      	str	r6, [r0, #4]
 80036fe:	300c      	adds	r0, #12
 8003700:	60a0      	str	r0, [r4, #8]
 8003702:	3268      	adds	r2, #104	; 0x68
 8003704:	f7ff ff9d 	bl	8003642 <memset>
 8003708:	0020      	movs	r0, r4
 800370a:	bd70      	pop	{r4, r5, r6, pc}

0800370c <__sfp_lock_acquire>:
 800370c:	b510      	push	{r4, lr}
 800370e:	4802      	ldr	r0, [pc, #8]	; (8003718 <__sfp_lock_acquire+0xc>)
 8003710:	f000 f8bd 	bl	800388e <__retarget_lock_acquire_recursive>
 8003714:	bd10      	pop	{r4, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	200005b0 	.word	0x200005b0

0800371c <__sfp_lock_release>:
 800371c:	b510      	push	{r4, lr}
 800371e:	4802      	ldr	r0, [pc, #8]	; (8003728 <__sfp_lock_release+0xc>)
 8003720:	f000 f8b6 	bl	8003890 <__retarget_lock_release_recursive>
 8003724:	bd10      	pop	{r4, pc}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	200005b0 	.word	0x200005b0

0800372c <__sinit_lock_acquire>:
 800372c:	b510      	push	{r4, lr}
 800372e:	4802      	ldr	r0, [pc, #8]	; (8003738 <__sinit_lock_acquire+0xc>)
 8003730:	f000 f8ad 	bl	800388e <__retarget_lock_acquire_recursive>
 8003734:	bd10      	pop	{r4, pc}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	200005ab 	.word	0x200005ab

0800373c <__sinit_lock_release>:
 800373c:	b510      	push	{r4, lr}
 800373e:	4802      	ldr	r0, [pc, #8]	; (8003748 <__sinit_lock_release+0xc>)
 8003740:	f000 f8a6 	bl	8003890 <__retarget_lock_release_recursive>
 8003744:	bd10      	pop	{r4, pc}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	200005ab 	.word	0x200005ab

0800374c <__sinit>:
 800374c:	b513      	push	{r0, r1, r4, lr}
 800374e:	0004      	movs	r4, r0
 8003750:	f7ff ffec 	bl	800372c <__sinit_lock_acquire>
 8003754:	69a3      	ldr	r3, [r4, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <__sinit+0x14>
 800375a:	f7ff ffef 	bl	800373c <__sinit_lock_release>
 800375e:	bd13      	pop	{r0, r1, r4, pc}
 8003760:	64a3      	str	r3, [r4, #72]	; 0x48
 8003762:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003764:	6523      	str	r3, [r4, #80]	; 0x50
 8003766:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <__sinit+0x68>)
 8003768:	4a13      	ldr	r2, [pc, #76]	; (80037b8 <__sinit+0x6c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	62a2      	str	r2, [r4, #40]	; 0x28
 800376e:	9301      	str	r3, [sp, #4]
 8003770:	42a3      	cmp	r3, r4
 8003772:	d101      	bne.n	8003778 <__sinit+0x2c>
 8003774:	2301      	movs	r3, #1
 8003776:	61a3      	str	r3, [r4, #24]
 8003778:	0020      	movs	r0, r4
 800377a:	f000 f81f 	bl	80037bc <__sfp>
 800377e:	6060      	str	r0, [r4, #4]
 8003780:	0020      	movs	r0, r4
 8003782:	f000 f81b 	bl	80037bc <__sfp>
 8003786:	60a0      	str	r0, [r4, #8]
 8003788:	0020      	movs	r0, r4
 800378a:	f000 f817 	bl	80037bc <__sfp>
 800378e:	2200      	movs	r2, #0
 8003790:	2104      	movs	r1, #4
 8003792:	60e0      	str	r0, [r4, #12]
 8003794:	6860      	ldr	r0, [r4, #4]
 8003796:	f7ff ff77 	bl	8003688 <std>
 800379a:	2201      	movs	r2, #1
 800379c:	2109      	movs	r1, #9
 800379e:	68a0      	ldr	r0, [r4, #8]
 80037a0:	f7ff ff72 	bl	8003688 <std>
 80037a4:	2202      	movs	r2, #2
 80037a6:	2112      	movs	r1, #18
 80037a8:	68e0      	ldr	r0, [r4, #12]
 80037aa:	f7ff ff6d 	bl	8003688 <std>
 80037ae:	2301      	movs	r3, #1
 80037b0:	61a3      	str	r3, [r4, #24]
 80037b2:	e7d2      	b.n	800375a <__sinit+0xe>
 80037b4:	08004644 	.word	0x08004644
 80037b8:	080036d1 	.word	0x080036d1

080037bc <__sfp>:
 80037bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037be:	0007      	movs	r7, r0
 80037c0:	f7ff ffa4 	bl	800370c <__sfp_lock_acquire>
 80037c4:	4b1f      	ldr	r3, [pc, #124]	; (8003844 <__sfp+0x88>)
 80037c6:	681e      	ldr	r6, [r3, #0]
 80037c8:	69b3      	ldr	r3, [r6, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d102      	bne.n	80037d4 <__sfp+0x18>
 80037ce:	0030      	movs	r0, r6
 80037d0:	f7ff ffbc 	bl	800374c <__sinit>
 80037d4:	3648      	adds	r6, #72	; 0x48
 80037d6:	68b4      	ldr	r4, [r6, #8]
 80037d8:	6873      	ldr	r3, [r6, #4]
 80037da:	3b01      	subs	r3, #1
 80037dc:	d504      	bpl.n	80037e8 <__sfp+0x2c>
 80037de:	6833      	ldr	r3, [r6, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d022      	beq.n	800382a <__sfp+0x6e>
 80037e4:	6836      	ldr	r6, [r6, #0]
 80037e6:	e7f6      	b.n	80037d6 <__sfp+0x1a>
 80037e8:	220c      	movs	r2, #12
 80037ea:	5ea5      	ldrsh	r5, [r4, r2]
 80037ec:	2d00      	cmp	r5, #0
 80037ee:	d11a      	bne.n	8003826 <__sfp+0x6a>
 80037f0:	0020      	movs	r0, r4
 80037f2:	4b15      	ldr	r3, [pc, #84]	; (8003848 <__sfp+0x8c>)
 80037f4:	3058      	adds	r0, #88	; 0x58
 80037f6:	60e3      	str	r3, [r4, #12]
 80037f8:	6665      	str	r5, [r4, #100]	; 0x64
 80037fa:	f000 f847 	bl	800388c <__retarget_lock_init_recursive>
 80037fe:	f7ff ff8d 	bl	800371c <__sfp_lock_release>
 8003802:	0020      	movs	r0, r4
 8003804:	2208      	movs	r2, #8
 8003806:	0029      	movs	r1, r5
 8003808:	6025      	str	r5, [r4, #0]
 800380a:	60a5      	str	r5, [r4, #8]
 800380c:	6065      	str	r5, [r4, #4]
 800380e:	6125      	str	r5, [r4, #16]
 8003810:	6165      	str	r5, [r4, #20]
 8003812:	61a5      	str	r5, [r4, #24]
 8003814:	305c      	adds	r0, #92	; 0x5c
 8003816:	f7ff ff14 	bl	8003642 <memset>
 800381a:	6365      	str	r5, [r4, #52]	; 0x34
 800381c:	63a5      	str	r5, [r4, #56]	; 0x38
 800381e:	64a5      	str	r5, [r4, #72]	; 0x48
 8003820:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003822:	0020      	movs	r0, r4
 8003824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003826:	3468      	adds	r4, #104	; 0x68
 8003828:	e7d7      	b.n	80037da <__sfp+0x1e>
 800382a:	2104      	movs	r1, #4
 800382c:	0038      	movs	r0, r7
 800382e:	f7ff ff57 	bl	80036e0 <__sfmoreglue>
 8003832:	1e04      	subs	r4, r0, #0
 8003834:	6030      	str	r0, [r6, #0]
 8003836:	d1d5      	bne.n	80037e4 <__sfp+0x28>
 8003838:	f7ff ff70 	bl	800371c <__sfp_lock_release>
 800383c:	230c      	movs	r3, #12
 800383e:	603b      	str	r3, [r7, #0]
 8003840:	e7ef      	b.n	8003822 <__sfp+0x66>
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	08004644 	.word	0x08004644
 8003848:	ffff0001 	.word	0xffff0001

0800384c <_fwalk_reent>:
 800384c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800384e:	0004      	movs	r4, r0
 8003850:	0006      	movs	r6, r0
 8003852:	2700      	movs	r7, #0
 8003854:	9101      	str	r1, [sp, #4]
 8003856:	3448      	adds	r4, #72	; 0x48
 8003858:	6863      	ldr	r3, [r4, #4]
 800385a:	68a5      	ldr	r5, [r4, #8]
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	9b00      	ldr	r3, [sp, #0]
 8003860:	3b01      	subs	r3, #1
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	d504      	bpl.n	8003870 <_fwalk_reent+0x24>
 8003866:	6824      	ldr	r4, [r4, #0]
 8003868:	2c00      	cmp	r4, #0
 800386a:	d1f5      	bne.n	8003858 <_fwalk_reent+0xc>
 800386c:	0038      	movs	r0, r7
 800386e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003870:	89ab      	ldrh	r3, [r5, #12]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d908      	bls.n	8003888 <_fwalk_reent+0x3c>
 8003876:	220e      	movs	r2, #14
 8003878:	5eab      	ldrsh	r3, [r5, r2]
 800387a:	3301      	adds	r3, #1
 800387c:	d004      	beq.n	8003888 <_fwalk_reent+0x3c>
 800387e:	0029      	movs	r1, r5
 8003880:	0030      	movs	r0, r6
 8003882:	9b01      	ldr	r3, [sp, #4]
 8003884:	4798      	blx	r3
 8003886:	4307      	orrs	r7, r0
 8003888:	3568      	adds	r5, #104	; 0x68
 800388a:	e7e8      	b.n	800385e <_fwalk_reent+0x12>

0800388c <__retarget_lock_init_recursive>:
 800388c:	4770      	bx	lr

0800388e <__retarget_lock_acquire_recursive>:
 800388e:	4770      	bx	lr

08003890 <__retarget_lock_release_recursive>:
 8003890:	4770      	bx	lr
	...

08003894 <_malloc_r>:
 8003894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003896:	2303      	movs	r3, #3
 8003898:	1ccd      	adds	r5, r1, #3
 800389a:	439d      	bics	r5, r3
 800389c:	3508      	adds	r5, #8
 800389e:	0006      	movs	r6, r0
 80038a0:	2d0c      	cmp	r5, #12
 80038a2:	d21f      	bcs.n	80038e4 <_malloc_r+0x50>
 80038a4:	250c      	movs	r5, #12
 80038a6:	42a9      	cmp	r1, r5
 80038a8:	d81e      	bhi.n	80038e8 <_malloc_r+0x54>
 80038aa:	0030      	movs	r0, r6
 80038ac:	f000 fdde 	bl	800446c <__malloc_lock>
 80038b0:	4925      	ldr	r1, [pc, #148]	; (8003948 <_malloc_r+0xb4>)
 80038b2:	680a      	ldr	r2, [r1, #0]
 80038b4:	0014      	movs	r4, r2
 80038b6:	2c00      	cmp	r4, #0
 80038b8:	d11a      	bne.n	80038f0 <_malloc_r+0x5c>
 80038ba:	4f24      	ldr	r7, [pc, #144]	; (800394c <_malloc_r+0xb8>)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d104      	bne.n	80038cc <_malloc_r+0x38>
 80038c2:	0021      	movs	r1, r4
 80038c4:	0030      	movs	r0, r6
 80038c6:	f000 fb27 	bl	8003f18 <_sbrk_r>
 80038ca:	6038      	str	r0, [r7, #0]
 80038cc:	0029      	movs	r1, r5
 80038ce:	0030      	movs	r0, r6
 80038d0:	f000 fb22 	bl	8003f18 <_sbrk_r>
 80038d4:	1c43      	adds	r3, r0, #1
 80038d6:	d12b      	bne.n	8003930 <_malloc_r+0x9c>
 80038d8:	230c      	movs	r3, #12
 80038da:	0030      	movs	r0, r6
 80038dc:	6033      	str	r3, [r6, #0]
 80038de:	f000 fdcd 	bl	800447c <__malloc_unlock>
 80038e2:	e003      	b.n	80038ec <_malloc_r+0x58>
 80038e4:	2d00      	cmp	r5, #0
 80038e6:	dade      	bge.n	80038a6 <_malloc_r+0x12>
 80038e8:	230c      	movs	r3, #12
 80038ea:	6033      	str	r3, [r6, #0]
 80038ec:	2000      	movs	r0, #0
 80038ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	1b5b      	subs	r3, r3, r5
 80038f4:	d419      	bmi.n	800392a <_malloc_r+0x96>
 80038f6:	2b0b      	cmp	r3, #11
 80038f8:	d903      	bls.n	8003902 <_malloc_r+0x6e>
 80038fa:	6023      	str	r3, [r4, #0]
 80038fc:	18e4      	adds	r4, r4, r3
 80038fe:	6025      	str	r5, [r4, #0]
 8003900:	e003      	b.n	800390a <_malloc_r+0x76>
 8003902:	6863      	ldr	r3, [r4, #4]
 8003904:	42a2      	cmp	r2, r4
 8003906:	d10e      	bne.n	8003926 <_malloc_r+0x92>
 8003908:	600b      	str	r3, [r1, #0]
 800390a:	0030      	movs	r0, r6
 800390c:	f000 fdb6 	bl	800447c <__malloc_unlock>
 8003910:	0020      	movs	r0, r4
 8003912:	2207      	movs	r2, #7
 8003914:	300b      	adds	r0, #11
 8003916:	1d23      	adds	r3, r4, #4
 8003918:	4390      	bics	r0, r2
 800391a:	1ac2      	subs	r2, r0, r3
 800391c:	4298      	cmp	r0, r3
 800391e:	d0e6      	beq.n	80038ee <_malloc_r+0x5a>
 8003920:	1a1b      	subs	r3, r3, r0
 8003922:	50a3      	str	r3, [r4, r2]
 8003924:	e7e3      	b.n	80038ee <_malloc_r+0x5a>
 8003926:	6053      	str	r3, [r2, #4]
 8003928:	e7ef      	b.n	800390a <_malloc_r+0x76>
 800392a:	0022      	movs	r2, r4
 800392c:	6864      	ldr	r4, [r4, #4]
 800392e:	e7c2      	b.n	80038b6 <_malloc_r+0x22>
 8003930:	2303      	movs	r3, #3
 8003932:	1cc4      	adds	r4, r0, #3
 8003934:	439c      	bics	r4, r3
 8003936:	42a0      	cmp	r0, r4
 8003938:	d0e1      	beq.n	80038fe <_malloc_r+0x6a>
 800393a:	1a21      	subs	r1, r4, r0
 800393c:	0030      	movs	r0, r6
 800393e:	f000 faeb 	bl	8003f18 <_sbrk_r>
 8003942:	1c43      	adds	r3, r0, #1
 8003944:	d1db      	bne.n	80038fe <_malloc_r+0x6a>
 8003946:	e7c7      	b.n	80038d8 <_malloc_r+0x44>
 8003948:	20000490 	.word	0x20000490
 800394c:	20000494 	.word	0x20000494

08003950 <__sfputc_r>:
 8003950:	6893      	ldr	r3, [r2, #8]
 8003952:	b510      	push	{r4, lr}
 8003954:	3b01      	subs	r3, #1
 8003956:	6093      	str	r3, [r2, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	da04      	bge.n	8003966 <__sfputc_r+0x16>
 800395c:	6994      	ldr	r4, [r2, #24]
 800395e:	42a3      	cmp	r3, r4
 8003960:	db07      	blt.n	8003972 <__sfputc_r+0x22>
 8003962:	290a      	cmp	r1, #10
 8003964:	d005      	beq.n	8003972 <__sfputc_r+0x22>
 8003966:	6813      	ldr	r3, [r2, #0]
 8003968:	1c58      	adds	r0, r3, #1
 800396a:	6010      	str	r0, [r2, #0]
 800396c:	7019      	strb	r1, [r3, #0]
 800396e:	0008      	movs	r0, r1
 8003970:	bd10      	pop	{r4, pc}
 8003972:	f000 fb2f 	bl	8003fd4 <__swbuf_r>
 8003976:	0001      	movs	r1, r0
 8003978:	e7f9      	b.n	800396e <__sfputc_r+0x1e>

0800397a <__sfputs_r>:
 800397a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397c:	0006      	movs	r6, r0
 800397e:	000f      	movs	r7, r1
 8003980:	0014      	movs	r4, r2
 8003982:	18d5      	adds	r5, r2, r3
 8003984:	42ac      	cmp	r4, r5
 8003986:	d101      	bne.n	800398c <__sfputs_r+0x12>
 8003988:	2000      	movs	r0, #0
 800398a:	e007      	b.n	800399c <__sfputs_r+0x22>
 800398c:	7821      	ldrb	r1, [r4, #0]
 800398e:	003a      	movs	r2, r7
 8003990:	0030      	movs	r0, r6
 8003992:	f7ff ffdd 	bl	8003950 <__sfputc_r>
 8003996:	3401      	adds	r4, #1
 8003998:	1c43      	adds	r3, r0, #1
 800399a:	d1f3      	bne.n	8003984 <__sfputs_r+0xa>
 800399c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039a0 <_vfiprintf_r>:
 80039a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039a2:	b0a1      	sub	sp, #132	; 0x84
 80039a4:	0006      	movs	r6, r0
 80039a6:	000c      	movs	r4, r1
 80039a8:	001f      	movs	r7, r3
 80039aa:	9203      	str	r2, [sp, #12]
 80039ac:	2800      	cmp	r0, #0
 80039ae:	d004      	beq.n	80039ba <_vfiprintf_r+0x1a>
 80039b0:	6983      	ldr	r3, [r0, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <_vfiprintf_r+0x1a>
 80039b6:	f7ff fec9 	bl	800374c <__sinit>
 80039ba:	4b8e      	ldr	r3, [pc, #568]	; (8003bf4 <_vfiprintf_r+0x254>)
 80039bc:	429c      	cmp	r4, r3
 80039be:	d11c      	bne.n	80039fa <_vfiprintf_r+0x5a>
 80039c0:	6874      	ldr	r4, [r6, #4]
 80039c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039c4:	07db      	lsls	r3, r3, #31
 80039c6:	d405      	bmi.n	80039d4 <_vfiprintf_r+0x34>
 80039c8:	89a3      	ldrh	r3, [r4, #12]
 80039ca:	059b      	lsls	r3, r3, #22
 80039cc:	d402      	bmi.n	80039d4 <_vfiprintf_r+0x34>
 80039ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039d0:	f7ff ff5d 	bl	800388e <__retarget_lock_acquire_recursive>
 80039d4:	89a3      	ldrh	r3, [r4, #12]
 80039d6:	071b      	lsls	r3, r3, #28
 80039d8:	d502      	bpl.n	80039e0 <_vfiprintf_r+0x40>
 80039da:	6923      	ldr	r3, [r4, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d11d      	bne.n	8003a1c <_vfiprintf_r+0x7c>
 80039e0:	0021      	movs	r1, r4
 80039e2:	0030      	movs	r0, r6
 80039e4:	f000 fb60 	bl	80040a8 <__swsetup_r>
 80039e8:	2800      	cmp	r0, #0
 80039ea:	d017      	beq.n	8003a1c <_vfiprintf_r+0x7c>
 80039ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039ee:	07db      	lsls	r3, r3, #31
 80039f0:	d50d      	bpl.n	8003a0e <_vfiprintf_r+0x6e>
 80039f2:	2001      	movs	r0, #1
 80039f4:	4240      	negs	r0, r0
 80039f6:	b021      	add	sp, #132	; 0x84
 80039f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039fa:	4b7f      	ldr	r3, [pc, #508]	; (8003bf8 <_vfiprintf_r+0x258>)
 80039fc:	429c      	cmp	r4, r3
 80039fe:	d101      	bne.n	8003a04 <_vfiprintf_r+0x64>
 8003a00:	68b4      	ldr	r4, [r6, #8]
 8003a02:	e7de      	b.n	80039c2 <_vfiprintf_r+0x22>
 8003a04:	4b7d      	ldr	r3, [pc, #500]	; (8003bfc <_vfiprintf_r+0x25c>)
 8003a06:	429c      	cmp	r4, r3
 8003a08:	d1db      	bne.n	80039c2 <_vfiprintf_r+0x22>
 8003a0a:	68f4      	ldr	r4, [r6, #12]
 8003a0c:	e7d9      	b.n	80039c2 <_vfiprintf_r+0x22>
 8003a0e:	89a3      	ldrh	r3, [r4, #12]
 8003a10:	059b      	lsls	r3, r3, #22
 8003a12:	d4ee      	bmi.n	80039f2 <_vfiprintf_r+0x52>
 8003a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a16:	f7ff ff3b 	bl	8003890 <__retarget_lock_release_recursive>
 8003a1a:	e7ea      	b.n	80039f2 <_vfiprintf_r+0x52>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	ad08      	add	r5, sp, #32
 8003a20:	616b      	str	r3, [r5, #20]
 8003a22:	3320      	adds	r3, #32
 8003a24:	766b      	strb	r3, [r5, #25]
 8003a26:	3310      	adds	r3, #16
 8003a28:	76ab      	strb	r3, [r5, #26]
 8003a2a:	9707      	str	r7, [sp, #28]
 8003a2c:	9f03      	ldr	r7, [sp, #12]
 8003a2e:	783b      	ldrb	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <_vfiprintf_r+0x98>
 8003a34:	2b25      	cmp	r3, #37	; 0x25
 8003a36:	d14e      	bne.n	8003ad6 <_vfiprintf_r+0x136>
 8003a38:	9b03      	ldr	r3, [sp, #12]
 8003a3a:	1afb      	subs	r3, r7, r3
 8003a3c:	9305      	str	r3, [sp, #20]
 8003a3e:	9b03      	ldr	r3, [sp, #12]
 8003a40:	429f      	cmp	r7, r3
 8003a42:	d00d      	beq.n	8003a60 <_vfiprintf_r+0xc0>
 8003a44:	9b05      	ldr	r3, [sp, #20]
 8003a46:	0021      	movs	r1, r4
 8003a48:	0030      	movs	r0, r6
 8003a4a:	9a03      	ldr	r2, [sp, #12]
 8003a4c:	f7ff ff95 	bl	800397a <__sfputs_r>
 8003a50:	1c43      	adds	r3, r0, #1
 8003a52:	d100      	bne.n	8003a56 <_vfiprintf_r+0xb6>
 8003a54:	e0b5      	b.n	8003bc2 <_vfiprintf_r+0x222>
 8003a56:	696a      	ldr	r2, [r5, #20]
 8003a58:	9b05      	ldr	r3, [sp, #20]
 8003a5a:	4694      	mov	ip, r2
 8003a5c:	4463      	add	r3, ip
 8003a5e:	616b      	str	r3, [r5, #20]
 8003a60:	783b      	ldrb	r3, [r7, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d100      	bne.n	8003a68 <_vfiprintf_r+0xc8>
 8003a66:	e0ac      	b.n	8003bc2 <_vfiprintf_r+0x222>
 8003a68:	2201      	movs	r2, #1
 8003a6a:	1c7b      	adds	r3, r7, #1
 8003a6c:	9303      	str	r3, [sp, #12]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	4252      	negs	r2, r2
 8003a72:	606a      	str	r2, [r5, #4]
 8003a74:	a904      	add	r1, sp, #16
 8003a76:	3254      	adds	r2, #84	; 0x54
 8003a78:	1852      	adds	r2, r2, r1
 8003a7a:	602b      	str	r3, [r5, #0]
 8003a7c:	60eb      	str	r3, [r5, #12]
 8003a7e:	60ab      	str	r3, [r5, #8]
 8003a80:	7013      	strb	r3, [r2, #0]
 8003a82:	65ab      	str	r3, [r5, #88]	; 0x58
 8003a84:	9b03      	ldr	r3, [sp, #12]
 8003a86:	2205      	movs	r2, #5
 8003a88:	7819      	ldrb	r1, [r3, #0]
 8003a8a:	485d      	ldr	r0, [pc, #372]	; (8003c00 <_vfiprintf_r+0x260>)
 8003a8c:	f000 fce2 	bl	8004454 <memchr>
 8003a90:	9b03      	ldr	r3, [sp, #12]
 8003a92:	1c5f      	adds	r7, r3, #1
 8003a94:	2800      	cmp	r0, #0
 8003a96:	d120      	bne.n	8003ada <_vfiprintf_r+0x13a>
 8003a98:	682a      	ldr	r2, [r5, #0]
 8003a9a:	06d3      	lsls	r3, r2, #27
 8003a9c:	d504      	bpl.n	8003aa8 <_vfiprintf_r+0x108>
 8003a9e:	2353      	movs	r3, #83	; 0x53
 8003aa0:	a904      	add	r1, sp, #16
 8003aa2:	185b      	adds	r3, r3, r1
 8003aa4:	2120      	movs	r1, #32
 8003aa6:	7019      	strb	r1, [r3, #0]
 8003aa8:	0713      	lsls	r3, r2, #28
 8003aaa:	d504      	bpl.n	8003ab6 <_vfiprintf_r+0x116>
 8003aac:	2353      	movs	r3, #83	; 0x53
 8003aae:	a904      	add	r1, sp, #16
 8003ab0:	185b      	adds	r3, r3, r1
 8003ab2:	212b      	movs	r1, #43	; 0x2b
 8003ab4:	7019      	strb	r1, [r3, #0]
 8003ab6:	9b03      	ldr	r3, [sp, #12]
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b2a      	cmp	r3, #42	; 0x2a
 8003abc:	d016      	beq.n	8003aec <_vfiprintf_r+0x14c>
 8003abe:	2100      	movs	r1, #0
 8003ac0:	68eb      	ldr	r3, [r5, #12]
 8003ac2:	9f03      	ldr	r7, [sp, #12]
 8003ac4:	783a      	ldrb	r2, [r7, #0]
 8003ac6:	1c78      	adds	r0, r7, #1
 8003ac8:	3a30      	subs	r2, #48	; 0x30
 8003aca:	4684      	mov	ip, r0
 8003acc:	2a09      	cmp	r2, #9
 8003ace:	d94f      	bls.n	8003b70 <_vfiprintf_r+0x1d0>
 8003ad0:	2900      	cmp	r1, #0
 8003ad2:	d111      	bne.n	8003af8 <_vfiprintf_r+0x158>
 8003ad4:	e017      	b.n	8003b06 <_vfiprintf_r+0x166>
 8003ad6:	3701      	adds	r7, #1
 8003ad8:	e7a9      	b.n	8003a2e <_vfiprintf_r+0x8e>
 8003ada:	4b49      	ldr	r3, [pc, #292]	; (8003c00 <_vfiprintf_r+0x260>)
 8003adc:	682a      	ldr	r2, [r5, #0]
 8003ade:	1ac0      	subs	r0, r0, r3
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	4083      	lsls	r3, r0
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	602b      	str	r3, [r5, #0]
 8003ae8:	9703      	str	r7, [sp, #12]
 8003aea:	e7cb      	b.n	8003a84 <_vfiprintf_r+0xe4>
 8003aec:	9b07      	ldr	r3, [sp, #28]
 8003aee:	1d19      	adds	r1, r3, #4
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	9107      	str	r1, [sp, #28]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	db01      	blt.n	8003afc <_vfiprintf_r+0x15c>
 8003af8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003afa:	e004      	b.n	8003b06 <_vfiprintf_r+0x166>
 8003afc:	425b      	negs	r3, r3
 8003afe:	60eb      	str	r3, [r5, #12]
 8003b00:	2302      	movs	r3, #2
 8003b02:	4313      	orrs	r3, r2
 8003b04:	602b      	str	r3, [r5, #0]
 8003b06:	783b      	ldrb	r3, [r7, #0]
 8003b08:	2b2e      	cmp	r3, #46	; 0x2e
 8003b0a:	d10a      	bne.n	8003b22 <_vfiprintf_r+0x182>
 8003b0c:	787b      	ldrb	r3, [r7, #1]
 8003b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b10:	d137      	bne.n	8003b82 <_vfiprintf_r+0x1e2>
 8003b12:	9b07      	ldr	r3, [sp, #28]
 8003b14:	3702      	adds	r7, #2
 8003b16:	1d1a      	adds	r2, r3, #4
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	9207      	str	r2, [sp, #28]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	db2d      	blt.n	8003b7c <_vfiprintf_r+0x1dc>
 8003b20:	9309      	str	r3, [sp, #36]	; 0x24
 8003b22:	2203      	movs	r2, #3
 8003b24:	7839      	ldrb	r1, [r7, #0]
 8003b26:	4837      	ldr	r0, [pc, #220]	; (8003c04 <_vfiprintf_r+0x264>)
 8003b28:	f000 fc94 	bl	8004454 <memchr>
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	d007      	beq.n	8003b40 <_vfiprintf_r+0x1a0>
 8003b30:	4b34      	ldr	r3, [pc, #208]	; (8003c04 <_vfiprintf_r+0x264>)
 8003b32:	682a      	ldr	r2, [r5, #0]
 8003b34:	1ac0      	subs	r0, r0, r3
 8003b36:	2340      	movs	r3, #64	; 0x40
 8003b38:	4083      	lsls	r3, r0
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	3701      	adds	r7, #1
 8003b3e:	602b      	str	r3, [r5, #0]
 8003b40:	7839      	ldrb	r1, [r7, #0]
 8003b42:	1c7b      	adds	r3, r7, #1
 8003b44:	2206      	movs	r2, #6
 8003b46:	4830      	ldr	r0, [pc, #192]	; (8003c08 <_vfiprintf_r+0x268>)
 8003b48:	9303      	str	r3, [sp, #12]
 8003b4a:	7629      	strb	r1, [r5, #24]
 8003b4c:	f000 fc82 	bl	8004454 <memchr>
 8003b50:	2800      	cmp	r0, #0
 8003b52:	d045      	beq.n	8003be0 <_vfiprintf_r+0x240>
 8003b54:	4b2d      	ldr	r3, [pc, #180]	; (8003c0c <_vfiprintf_r+0x26c>)
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d127      	bne.n	8003baa <_vfiprintf_r+0x20a>
 8003b5a:	2207      	movs	r2, #7
 8003b5c:	9b07      	ldr	r3, [sp, #28]
 8003b5e:	3307      	adds	r3, #7
 8003b60:	4393      	bics	r3, r2
 8003b62:	3308      	adds	r3, #8
 8003b64:	9307      	str	r3, [sp, #28]
 8003b66:	696b      	ldr	r3, [r5, #20]
 8003b68:	9a04      	ldr	r2, [sp, #16]
 8003b6a:	189b      	adds	r3, r3, r2
 8003b6c:	616b      	str	r3, [r5, #20]
 8003b6e:	e75d      	b.n	8003a2c <_vfiprintf_r+0x8c>
 8003b70:	210a      	movs	r1, #10
 8003b72:	434b      	muls	r3, r1
 8003b74:	4667      	mov	r7, ip
 8003b76:	189b      	adds	r3, r3, r2
 8003b78:	3909      	subs	r1, #9
 8003b7a:	e7a3      	b.n	8003ac4 <_vfiprintf_r+0x124>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	425b      	negs	r3, r3
 8003b80:	e7ce      	b.n	8003b20 <_vfiprintf_r+0x180>
 8003b82:	2300      	movs	r3, #0
 8003b84:	001a      	movs	r2, r3
 8003b86:	3701      	adds	r7, #1
 8003b88:	606b      	str	r3, [r5, #4]
 8003b8a:	7839      	ldrb	r1, [r7, #0]
 8003b8c:	1c78      	adds	r0, r7, #1
 8003b8e:	3930      	subs	r1, #48	; 0x30
 8003b90:	4684      	mov	ip, r0
 8003b92:	2909      	cmp	r1, #9
 8003b94:	d903      	bls.n	8003b9e <_vfiprintf_r+0x1fe>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0c3      	beq.n	8003b22 <_vfiprintf_r+0x182>
 8003b9a:	9209      	str	r2, [sp, #36]	; 0x24
 8003b9c:	e7c1      	b.n	8003b22 <_vfiprintf_r+0x182>
 8003b9e:	230a      	movs	r3, #10
 8003ba0:	435a      	muls	r2, r3
 8003ba2:	4667      	mov	r7, ip
 8003ba4:	1852      	adds	r2, r2, r1
 8003ba6:	3b09      	subs	r3, #9
 8003ba8:	e7ef      	b.n	8003b8a <_vfiprintf_r+0x1ea>
 8003baa:	ab07      	add	r3, sp, #28
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	0022      	movs	r2, r4
 8003bb0:	0029      	movs	r1, r5
 8003bb2:	0030      	movs	r0, r6
 8003bb4:	4b16      	ldr	r3, [pc, #88]	; (8003c10 <_vfiprintf_r+0x270>)
 8003bb6:	e000      	b.n	8003bba <_vfiprintf_r+0x21a>
 8003bb8:	bf00      	nop
 8003bba:	9004      	str	r0, [sp, #16]
 8003bbc:	9b04      	ldr	r3, [sp, #16]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	d1d1      	bne.n	8003b66 <_vfiprintf_r+0x1c6>
 8003bc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bc4:	07db      	lsls	r3, r3, #31
 8003bc6:	d405      	bmi.n	8003bd4 <_vfiprintf_r+0x234>
 8003bc8:	89a3      	ldrh	r3, [r4, #12]
 8003bca:	059b      	lsls	r3, r3, #22
 8003bcc:	d402      	bmi.n	8003bd4 <_vfiprintf_r+0x234>
 8003bce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bd0:	f7ff fe5e 	bl	8003890 <__retarget_lock_release_recursive>
 8003bd4:	89a3      	ldrh	r3, [r4, #12]
 8003bd6:	065b      	lsls	r3, r3, #25
 8003bd8:	d500      	bpl.n	8003bdc <_vfiprintf_r+0x23c>
 8003bda:	e70a      	b.n	80039f2 <_vfiprintf_r+0x52>
 8003bdc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003bde:	e70a      	b.n	80039f6 <_vfiprintf_r+0x56>
 8003be0:	ab07      	add	r3, sp, #28
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	0022      	movs	r2, r4
 8003be6:	0029      	movs	r1, r5
 8003be8:	0030      	movs	r0, r6
 8003bea:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <_vfiprintf_r+0x270>)
 8003bec:	f000 f882 	bl	8003cf4 <_printf_i>
 8003bf0:	e7e3      	b.n	8003bba <_vfiprintf_r+0x21a>
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	08004668 	.word	0x08004668
 8003bf8:	08004688 	.word	0x08004688
 8003bfc:	08004648 	.word	0x08004648
 8003c00:	080046a8 	.word	0x080046a8
 8003c04:	080046ae 	.word	0x080046ae
 8003c08:	080046b2 	.word	0x080046b2
 8003c0c:	00000000 	.word	0x00000000
 8003c10:	0800397b 	.word	0x0800397b

08003c14 <_printf_common>:
 8003c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c16:	0015      	movs	r5, r2
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	688a      	ldr	r2, [r1, #8]
 8003c1c:	690b      	ldr	r3, [r1, #16]
 8003c1e:	000c      	movs	r4, r1
 8003c20:	9000      	str	r0, [sp, #0]
 8003c22:	4293      	cmp	r3, r2
 8003c24:	da00      	bge.n	8003c28 <_printf_common+0x14>
 8003c26:	0013      	movs	r3, r2
 8003c28:	0022      	movs	r2, r4
 8003c2a:	602b      	str	r3, [r5, #0]
 8003c2c:	3243      	adds	r2, #67	; 0x43
 8003c2e:	7812      	ldrb	r2, [r2, #0]
 8003c30:	2a00      	cmp	r2, #0
 8003c32:	d001      	beq.n	8003c38 <_printf_common+0x24>
 8003c34:	3301      	adds	r3, #1
 8003c36:	602b      	str	r3, [r5, #0]
 8003c38:	6823      	ldr	r3, [r4, #0]
 8003c3a:	069b      	lsls	r3, r3, #26
 8003c3c:	d502      	bpl.n	8003c44 <_printf_common+0x30>
 8003c3e:	682b      	ldr	r3, [r5, #0]
 8003c40:	3302      	adds	r3, #2
 8003c42:	602b      	str	r3, [r5, #0]
 8003c44:	6822      	ldr	r2, [r4, #0]
 8003c46:	2306      	movs	r3, #6
 8003c48:	0017      	movs	r7, r2
 8003c4a:	401f      	ands	r7, r3
 8003c4c:	421a      	tst	r2, r3
 8003c4e:	d027      	beq.n	8003ca0 <_printf_common+0x8c>
 8003c50:	0023      	movs	r3, r4
 8003c52:	3343      	adds	r3, #67	; 0x43
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	1e5a      	subs	r2, r3, #1
 8003c58:	4193      	sbcs	r3, r2
 8003c5a:	6822      	ldr	r2, [r4, #0]
 8003c5c:	0692      	lsls	r2, r2, #26
 8003c5e:	d430      	bmi.n	8003cc2 <_printf_common+0xae>
 8003c60:	0022      	movs	r2, r4
 8003c62:	9901      	ldr	r1, [sp, #4]
 8003c64:	9800      	ldr	r0, [sp, #0]
 8003c66:	9e08      	ldr	r6, [sp, #32]
 8003c68:	3243      	adds	r2, #67	; 0x43
 8003c6a:	47b0      	blx	r6
 8003c6c:	1c43      	adds	r3, r0, #1
 8003c6e:	d025      	beq.n	8003cbc <_printf_common+0xa8>
 8003c70:	2306      	movs	r3, #6
 8003c72:	6820      	ldr	r0, [r4, #0]
 8003c74:	682a      	ldr	r2, [r5, #0]
 8003c76:	68e1      	ldr	r1, [r4, #12]
 8003c78:	2500      	movs	r5, #0
 8003c7a:	4003      	ands	r3, r0
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d103      	bne.n	8003c88 <_printf_common+0x74>
 8003c80:	1a8d      	subs	r5, r1, r2
 8003c82:	43eb      	mvns	r3, r5
 8003c84:	17db      	asrs	r3, r3, #31
 8003c86:	401d      	ands	r5, r3
 8003c88:	68a3      	ldr	r3, [r4, #8]
 8003c8a:	6922      	ldr	r2, [r4, #16]
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	dd01      	ble.n	8003c94 <_printf_common+0x80>
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	18ed      	adds	r5, r5, r3
 8003c94:	2700      	movs	r7, #0
 8003c96:	42bd      	cmp	r5, r7
 8003c98:	d120      	bne.n	8003cdc <_printf_common+0xc8>
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	e010      	b.n	8003cc0 <_printf_common+0xac>
 8003c9e:	3701      	adds	r7, #1
 8003ca0:	68e3      	ldr	r3, [r4, #12]
 8003ca2:	682a      	ldr	r2, [r5, #0]
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	42bb      	cmp	r3, r7
 8003ca8:	ddd2      	ble.n	8003c50 <_printf_common+0x3c>
 8003caa:	0022      	movs	r2, r4
 8003cac:	2301      	movs	r3, #1
 8003cae:	9901      	ldr	r1, [sp, #4]
 8003cb0:	9800      	ldr	r0, [sp, #0]
 8003cb2:	9e08      	ldr	r6, [sp, #32]
 8003cb4:	3219      	adds	r2, #25
 8003cb6:	47b0      	blx	r6
 8003cb8:	1c43      	adds	r3, r0, #1
 8003cba:	d1f0      	bne.n	8003c9e <_printf_common+0x8a>
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	4240      	negs	r0, r0
 8003cc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003cc2:	2030      	movs	r0, #48	; 0x30
 8003cc4:	18e1      	adds	r1, r4, r3
 8003cc6:	3143      	adds	r1, #67	; 0x43
 8003cc8:	7008      	strb	r0, [r1, #0]
 8003cca:	0021      	movs	r1, r4
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	3145      	adds	r1, #69	; 0x45
 8003cd0:	7809      	ldrb	r1, [r1, #0]
 8003cd2:	18a2      	adds	r2, r4, r2
 8003cd4:	3243      	adds	r2, #67	; 0x43
 8003cd6:	3302      	adds	r3, #2
 8003cd8:	7011      	strb	r1, [r2, #0]
 8003cda:	e7c1      	b.n	8003c60 <_printf_common+0x4c>
 8003cdc:	0022      	movs	r2, r4
 8003cde:	2301      	movs	r3, #1
 8003ce0:	9901      	ldr	r1, [sp, #4]
 8003ce2:	9800      	ldr	r0, [sp, #0]
 8003ce4:	9e08      	ldr	r6, [sp, #32]
 8003ce6:	321a      	adds	r2, #26
 8003ce8:	47b0      	blx	r6
 8003cea:	1c43      	adds	r3, r0, #1
 8003cec:	d0e6      	beq.n	8003cbc <_printf_common+0xa8>
 8003cee:	3701      	adds	r7, #1
 8003cf0:	e7d1      	b.n	8003c96 <_printf_common+0x82>
	...

08003cf4 <_printf_i>:
 8003cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf6:	b08b      	sub	sp, #44	; 0x2c
 8003cf8:	9206      	str	r2, [sp, #24]
 8003cfa:	000a      	movs	r2, r1
 8003cfc:	3243      	adds	r2, #67	; 0x43
 8003cfe:	9307      	str	r3, [sp, #28]
 8003d00:	9005      	str	r0, [sp, #20]
 8003d02:	9204      	str	r2, [sp, #16]
 8003d04:	7e0a      	ldrb	r2, [r1, #24]
 8003d06:	000c      	movs	r4, r1
 8003d08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003d0a:	2a78      	cmp	r2, #120	; 0x78
 8003d0c:	d806      	bhi.n	8003d1c <_printf_i+0x28>
 8003d0e:	2a62      	cmp	r2, #98	; 0x62
 8003d10:	d808      	bhi.n	8003d24 <_printf_i+0x30>
 8003d12:	2a00      	cmp	r2, #0
 8003d14:	d100      	bne.n	8003d18 <_printf_i+0x24>
 8003d16:	e0c0      	b.n	8003e9a <_printf_i+0x1a6>
 8003d18:	2a58      	cmp	r2, #88	; 0x58
 8003d1a:	d052      	beq.n	8003dc2 <_printf_i+0xce>
 8003d1c:	0026      	movs	r6, r4
 8003d1e:	3642      	adds	r6, #66	; 0x42
 8003d20:	7032      	strb	r2, [r6, #0]
 8003d22:	e022      	b.n	8003d6a <_printf_i+0x76>
 8003d24:	0010      	movs	r0, r2
 8003d26:	3863      	subs	r0, #99	; 0x63
 8003d28:	2815      	cmp	r0, #21
 8003d2a:	d8f7      	bhi.n	8003d1c <_printf_i+0x28>
 8003d2c:	f7fc f9ea 	bl	8000104 <__gnu_thumb1_case_shi>
 8003d30:	001f0016 	.word	0x001f0016
 8003d34:	fff6fff6 	.word	0xfff6fff6
 8003d38:	fff6fff6 	.word	0xfff6fff6
 8003d3c:	fff6001f 	.word	0xfff6001f
 8003d40:	fff6fff6 	.word	0xfff6fff6
 8003d44:	00a8fff6 	.word	0x00a8fff6
 8003d48:	009a0036 	.word	0x009a0036
 8003d4c:	fff6fff6 	.word	0xfff6fff6
 8003d50:	fff600b9 	.word	0xfff600b9
 8003d54:	fff60036 	.word	0xfff60036
 8003d58:	009efff6 	.word	0x009efff6
 8003d5c:	0026      	movs	r6, r4
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	3642      	adds	r6, #66	; 0x42
 8003d62:	1d11      	adds	r1, r2, #4
 8003d64:	6019      	str	r1, [r3, #0]
 8003d66:	6813      	ldr	r3, [r2, #0]
 8003d68:	7033      	strb	r3, [r6, #0]
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e0a7      	b.n	8003ebe <_printf_i+0x1ca>
 8003d6e:	6808      	ldr	r0, [r1, #0]
 8003d70:	6819      	ldr	r1, [r3, #0]
 8003d72:	1d0a      	adds	r2, r1, #4
 8003d74:	0605      	lsls	r5, r0, #24
 8003d76:	d50b      	bpl.n	8003d90 <_printf_i+0x9c>
 8003d78:	680d      	ldr	r5, [r1, #0]
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	2d00      	cmp	r5, #0
 8003d7e:	da03      	bge.n	8003d88 <_printf_i+0x94>
 8003d80:	232d      	movs	r3, #45	; 0x2d
 8003d82:	9a04      	ldr	r2, [sp, #16]
 8003d84:	426d      	negs	r5, r5
 8003d86:	7013      	strb	r3, [r2, #0]
 8003d88:	4b61      	ldr	r3, [pc, #388]	; (8003f10 <_printf_i+0x21c>)
 8003d8a:	270a      	movs	r7, #10
 8003d8c:	9303      	str	r3, [sp, #12]
 8003d8e:	e032      	b.n	8003df6 <_printf_i+0x102>
 8003d90:	680d      	ldr	r5, [r1, #0]
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	0641      	lsls	r1, r0, #25
 8003d96:	d5f1      	bpl.n	8003d7c <_printf_i+0x88>
 8003d98:	b22d      	sxth	r5, r5
 8003d9a:	e7ef      	b.n	8003d7c <_printf_i+0x88>
 8003d9c:	680d      	ldr	r5, [r1, #0]
 8003d9e:	6819      	ldr	r1, [r3, #0]
 8003da0:	1d08      	adds	r0, r1, #4
 8003da2:	6018      	str	r0, [r3, #0]
 8003da4:	062e      	lsls	r6, r5, #24
 8003da6:	d501      	bpl.n	8003dac <_printf_i+0xb8>
 8003da8:	680d      	ldr	r5, [r1, #0]
 8003daa:	e003      	b.n	8003db4 <_printf_i+0xc0>
 8003dac:	066d      	lsls	r5, r5, #25
 8003dae:	d5fb      	bpl.n	8003da8 <_printf_i+0xb4>
 8003db0:	680d      	ldr	r5, [r1, #0]
 8003db2:	b2ad      	uxth	r5, r5
 8003db4:	4b56      	ldr	r3, [pc, #344]	; (8003f10 <_printf_i+0x21c>)
 8003db6:	270a      	movs	r7, #10
 8003db8:	9303      	str	r3, [sp, #12]
 8003dba:	2a6f      	cmp	r2, #111	; 0x6f
 8003dbc:	d117      	bne.n	8003dee <_printf_i+0xfa>
 8003dbe:	2708      	movs	r7, #8
 8003dc0:	e015      	b.n	8003dee <_printf_i+0xfa>
 8003dc2:	3145      	adds	r1, #69	; 0x45
 8003dc4:	700a      	strb	r2, [r1, #0]
 8003dc6:	4a52      	ldr	r2, [pc, #328]	; (8003f10 <_printf_i+0x21c>)
 8003dc8:	9203      	str	r2, [sp, #12]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	6821      	ldr	r1, [r4, #0]
 8003dce:	ca20      	ldmia	r2!, {r5}
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	0608      	lsls	r0, r1, #24
 8003dd4:	d550      	bpl.n	8003e78 <_printf_i+0x184>
 8003dd6:	07cb      	lsls	r3, r1, #31
 8003dd8:	d502      	bpl.n	8003de0 <_printf_i+0xec>
 8003dda:	2320      	movs	r3, #32
 8003ddc:	4319      	orrs	r1, r3
 8003dde:	6021      	str	r1, [r4, #0]
 8003de0:	2710      	movs	r7, #16
 8003de2:	2d00      	cmp	r5, #0
 8003de4:	d103      	bne.n	8003dee <_printf_i+0xfa>
 8003de6:	2320      	movs	r3, #32
 8003de8:	6822      	ldr	r2, [r4, #0]
 8003dea:	439a      	bics	r2, r3
 8003dec:	6022      	str	r2, [r4, #0]
 8003dee:	0023      	movs	r3, r4
 8003df0:	2200      	movs	r2, #0
 8003df2:	3343      	adds	r3, #67	; 0x43
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	6863      	ldr	r3, [r4, #4]
 8003df8:	60a3      	str	r3, [r4, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	db03      	blt.n	8003e06 <_printf_i+0x112>
 8003dfe:	2204      	movs	r2, #4
 8003e00:	6821      	ldr	r1, [r4, #0]
 8003e02:	4391      	bics	r1, r2
 8003e04:	6021      	str	r1, [r4, #0]
 8003e06:	2d00      	cmp	r5, #0
 8003e08:	d102      	bne.n	8003e10 <_printf_i+0x11c>
 8003e0a:	9e04      	ldr	r6, [sp, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00c      	beq.n	8003e2a <_printf_i+0x136>
 8003e10:	9e04      	ldr	r6, [sp, #16]
 8003e12:	0028      	movs	r0, r5
 8003e14:	0039      	movs	r1, r7
 8003e16:	f7fc fa05 	bl	8000224 <__aeabi_uidivmod>
 8003e1a:	9b03      	ldr	r3, [sp, #12]
 8003e1c:	3e01      	subs	r6, #1
 8003e1e:	5c5b      	ldrb	r3, [r3, r1]
 8003e20:	7033      	strb	r3, [r6, #0]
 8003e22:	002b      	movs	r3, r5
 8003e24:	0005      	movs	r5, r0
 8003e26:	429f      	cmp	r7, r3
 8003e28:	d9f3      	bls.n	8003e12 <_printf_i+0x11e>
 8003e2a:	2f08      	cmp	r7, #8
 8003e2c:	d109      	bne.n	8003e42 <_printf_i+0x14e>
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	07db      	lsls	r3, r3, #31
 8003e32:	d506      	bpl.n	8003e42 <_printf_i+0x14e>
 8003e34:	6863      	ldr	r3, [r4, #4]
 8003e36:	6922      	ldr	r2, [r4, #16]
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	dc02      	bgt.n	8003e42 <_printf_i+0x14e>
 8003e3c:	2330      	movs	r3, #48	; 0x30
 8003e3e:	3e01      	subs	r6, #1
 8003e40:	7033      	strb	r3, [r6, #0]
 8003e42:	9b04      	ldr	r3, [sp, #16]
 8003e44:	1b9b      	subs	r3, r3, r6
 8003e46:	6123      	str	r3, [r4, #16]
 8003e48:	9b07      	ldr	r3, [sp, #28]
 8003e4a:	0021      	movs	r1, r4
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	9805      	ldr	r0, [sp, #20]
 8003e50:	9b06      	ldr	r3, [sp, #24]
 8003e52:	aa09      	add	r2, sp, #36	; 0x24
 8003e54:	f7ff fede 	bl	8003c14 <_printf_common>
 8003e58:	1c43      	adds	r3, r0, #1
 8003e5a:	d135      	bne.n	8003ec8 <_printf_i+0x1d4>
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	4240      	negs	r0, r0
 8003e60:	b00b      	add	sp, #44	; 0x2c
 8003e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e64:	2220      	movs	r2, #32
 8003e66:	6809      	ldr	r1, [r1, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	6022      	str	r2, [r4, #0]
 8003e6c:	0022      	movs	r2, r4
 8003e6e:	2178      	movs	r1, #120	; 0x78
 8003e70:	3245      	adds	r2, #69	; 0x45
 8003e72:	7011      	strb	r1, [r2, #0]
 8003e74:	4a27      	ldr	r2, [pc, #156]	; (8003f14 <_printf_i+0x220>)
 8003e76:	e7a7      	b.n	8003dc8 <_printf_i+0xd4>
 8003e78:	0648      	lsls	r0, r1, #25
 8003e7a:	d5ac      	bpl.n	8003dd6 <_printf_i+0xe2>
 8003e7c:	b2ad      	uxth	r5, r5
 8003e7e:	e7aa      	b.n	8003dd6 <_printf_i+0xe2>
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	680d      	ldr	r5, [r1, #0]
 8003e84:	1d10      	adds	r0, r2, #4
 8003e86:	6949      	ldr	r1, [r1, #20]
 8003e88:	6018      	str	r0, [r3, #0]
 8003e8a:	6813      	ldr	r3, [r2, #0]
 8003e8c:	062e      	lsls	r6, r5, #24
 8003e8e:	d501      	bpl.n	8003e94 <_printf_i+0x1a0>
 8003e90:	6019      	str	r1, [r3, #0]
 8003e92:	e002      	b.n	8003e9a <_printf_i+0x1a6>
 8003e94:	066d      	lsls	r5, r5, #25
 8003e96:	d5fb      	bpl.n	8003e90 <_printf_i+0x19c>
 8003e98:	8019      	strh	r1, [r3, #0]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	9e04      	ldr	r6, [sp, #16]
 8003e9e:	6123      	str	r3, [r4, #16]
 8003ea0:	e7d2      	b.n	8003e48 <_printf_i+0x154>
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	1d11      	adds	r1, r2, #4
 8003ea6:	6019      	str	r1, [r3, #0]
 8003ea8:	6816      	ldr	r6, [r2, #0]
 8003eaa:	2100      	movs	r1, #0
 8003eac:	0030      	movs	r0, r6
 8003eae:	6862      	ldr	r2, [r4, #4]
 8003eb0:	f000 fad0 	bl	8004454 <memchr>
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d001      	beq.n	8003ebc <_printf_i+0x1c8>
 8003eb8:	1b80      	subs	r0, r0, r6
 8003eba:	6060      	str	r0, [r4, #4]
 8003ebc:	6863      	ldr	r3, [r4, #4]
 8003ebe:	6123      	str	r3, [r4, #16]
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	9a04      	ldr	r2, [sp, #16]
 8003ec4:	7013      	strb	r3, [r2, #0]
 8003ec6:	e7bf      	b.n	8003e48 <_printf_i+0x154>
 8003ec8:	6923      	ldr	r3, [r4, #16]
 8003eca:	0032      	movs	r2, r6
 8003ecc:	9906      	ldr	r1, [sp, #24]
 8003ece:	9805      	ldr	r0, [sp, #20]
 8003ed0:	9d07      	ldr	r5, [sp, #28]
 8003ed2:	47a8      	blx	r5
 8003ed4:	1c43      	adds	r3, r0, #1
 8003ed6:	d0c1      	beq.n	8003e5c <_printf_i+0x168>
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	079b      	lsls	r3, r3, #30
 8003edc:	d415      	bmi.n	8003f0a <_printf_i+0x216>
 8003ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ee0:	68e0      	ldr	r0, [r4, #12]
 8003ee2:	4298      	cmp	r0, r3
 8003ee4:	dabc      	bge.n	8003e60 <_printf_i+0x16c>
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	e7ba      	b.n	8003e60 <_printf_i+0x16c>
 8003eea:	0022      	movs	r2, r4
 8003eec:	2301      	movs	r3, #1
 8003eee:	9906      	ldr	r1, [sp, #24]
 8003ef0:	9805      	ldr	r0, [sp, #20]
 8003ef2:	9e07      	ldr	r6, [sp, #28]
 8003ef4:	3219      	adds	r2, #25
 8003ef6:	47b0      	blx	r6
 8003ef8:	1c43      	adds	r3, r0, #1
 8003efa:	d0af      	beq.n	8003e5c <_printf_i+0x168>
 8003efc:	3501      	adds	r5, #1
 8003efe:	68e3      	ldr	r3, [r4, #12]
 8003f00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f02:	1a9b      	subs	r3, r3, r2
 8003f04:	42ab      	cmp	r3, r5
 8003f06:	dcf0      	bgt.n	8003eea <_printf_i+0x1f6>
 8003f08:	e7e9      	b.n	8003ede <_printf_i+0x1ea>
 8003f0a:	2500      	movs	r5, #0
 8003f0c:	e7f7      	b.n	8003efe <_printf_i+0x20a>
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	080046b9 	.word	0x080046b9
 8003f14:	080046ca 	.word	0x080046ca

08003f18 <_sbrk_r>:
 8003f18:	2300      	movs	r3, #0
 8003f1a:	b570      	push	{r4, r5, r6, lr}
 8003f1c:	4d06      	ldr	r5, [pc, #24]	; (8003f38 <_sbrk_r+0x20>)
 8003f1e:	0004      	movs	r4, r0
 8003f20:	0008      	movs	r0, r1
 8003f22:	602b      	str	r3, [r5, #0]
 8003f24:	f7fc fcf4 	bl	8000910 <_sbrk>
 8003f28:	1c43      	adds	r3, r0, #1
 8003f2a:	d103      	bne.n	8003f34 <_sbrk_r+0x1c>
 8003f2c:	682b      	ldr	r3, [r5, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d000      	beq.n	8003f34 <_sbrk_r+0x1c>
 8003f32:	6023      	str	r3, [r4, #0]
 8003f34:	bd70      	pop	{r4, r5, r6, pc}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	200005b4 	.word	0x200005b4

08003f3c <__sread>:
 8003f3c:	b570      	push	{r4, r5, r6, lr}
 8003f3e:	000c      	movs	r4, r1
 8003f40:	250e      	movs	r5, #14
 8003f42:	5f49      	ldrsh	r1, [r1, r5]
 8003f44:	f000 faec 	bl	8004520 <_read_r>
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	db03      	blt.n	8003f54 <__sread+0x18>
 8003f4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003f4e:	181b      	adds	r3, r3, r0
 8003f50:	6563      	str	r3, [r4, #84]	; 0x54
 8003f52:	bd70      	pop	{r4, r5, r6, pc}
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	4a02      	ldr	r2, [pc, #8]	; (8003f60 <__sread+0x24>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	81a3      	strh	r3, [r4, #12]
 8003f5c:	e7f9      	b.n	8003f52 <__sread+0x16>
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	ffffefff 	.word	0xffffefff

08003f64 <__swrite>:
 8003f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f66:	001f      	movs	r7, r3
 8003f68:	898b      	ldrh	r3, [r1, #12]
 8003f6a:	0005      	movs	r5, r0
 8003f6c:	000c      	movs	r4, r1
 8003f6e:	0016      	movs	r6, r2
 8003f70:	05db      	lsls	r3, r3, #23
 8003f72:	d505      	bpl.n	8003f80 <__swrite+0x1c>
 8003f74:	230e      	movs	r3, #14
 8003f76:	5ec9      	ldrsh	r1, [r1, r3]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	f000 f9ea 	bl	8004354 <_lseek_r>
 8003f80:	89a3      	ldrh	r3, [r4, #12]
 8003f82:	4a05      	ldr	r2, [pc, #20]	; (8003f98 <__swrite+0x34>)
 8003f84:	0028      	movs	r0, r5
 8003f86:	4013      	ands	r3, r2
 8003f88:	81a3      	strh	r3, [r4, #12]
 8003f8a:	0032      	movs	r2, r6
 8003f8c:	230e      	movs	r3, #14
 8003f8e:	5ee1      	ldrsh	r1, [r4, r3]
 8003f90:	003b      	movs	r3, r7
 8003f92:	f000 f875 	bl	8004080 <_write_r>
 8003f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f98:	ffffefff 	.word	0xffffefff

08003f9c <__sseek>:
 8003f9c:	b570      	push	{r4, r5, r6, lr}
 8003f9e:	000c      	movs	r4, r1
 8003fa0:	250e      	movs	r5, #14
 8003fa2:	5f49      	ldrsh	r1, [r1, r5]
 8003fa4:	f000 f9d6 	bl	8004354 <_lseek_r>
 8003fa8:	89a3      	ldrh	r3, [r4, #12]
 8003faa:	1c42      	adds	r2, r0, #1
 8003fac:	d103      	bne.n	8003fb6 <__sseek+0x1a>
 8003fae:	4a05      	ldr	r2, [pc, #20]	; (8003fc4 <__sseek+0x28>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	81a3      	strh	r3, [r4, #12]
 8003fb4:	bd70      	pop	{r4, r5, r6, pc}
 8003fb6:	2280      	movs	r2, #128	; 0x80
 8003fb8:	0152      	lsls	r2, r2, #5
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	81a3      	strh	r3, [r4, #12]
 8003fbe:	6560      	str	r0, [r4, #84]	; 0x54
 8003fc0:	e7f8      	b.n	8003fb4 <__sseek+0x18>
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	ffffefff 	.word	0xffffefff

08003fc8 <__sclose>:
 8003fc8:	b510      	push	{r4, lr}
 8003fca:	230e      	movs	r3, #14
 8003fcc:	5ec9      	ldrsh	r1, [r1, r3]
 8003fce:	f000 f8e3 	bl	8004198 <_close_r>
 8003fd2:	bd10      	pop	{r4, pc}

08003fd4 <__swbuf_r>:
 8003fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd6:	0005      	movs	r5, r0
 8003fd8:	000e      	movs	r6, r1
 8003fda:	0014      	movs	r4, r2
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	d004      	beq.n	8003fea <__swbuf_r+0x16>
 8003fe0:	6983      	ldr	r3, [r0, #24]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <__swbuf_r+0x16>
 8003fe6:	f7ff fbb1 	bl	800374c <__sinit>
 8003fea:	4b22      	ldr	r3, [pc, #136]	; (8004074 <__swbuf_r+0xa0>)
 8003fec:	429c      	cmp	r4, r3
 8003fee:	d12e      	bne.n	800404e <__swbuf_r+0x7a>
 8003ff0:	686c      	ldr	r4, [r5, #4]
 8003ff2:	69a3      	ldr	r3, [r4, #24]
 8003ff4:	60a3      	str	r3, [r4, #8]
 8003ff6:	89a3      	ldrh	r3, [r4, #12]
 8003ff8:	071b      	lsls	r3, r3, #28
 8003ffa:	d532      	bpl.n	8004062 <__swbuf_r+0x8e>
 8003ffc:	6923      	ldr	r3, [r4, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d02f      	beq.n	8004062 <__swbuf_r+0x8e>
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	6922      	ldr	r2, [r4, #16]
 8004006:	b2f7      	uxtb	r7, r6
 8004008:	1a98      	subs	r0, r3, r2
 800400a:	6963      	ldr	r3, [r4, #20]
 800400c:	b2f6      	uxtb	r6, r6
 800400e:	4283      	cmp	r3, r0
 8004010:	dc05      	bgt.n	800401e <__swbuf_r+0x4a>
 8004012:	0021      	movs	r1, r4
 8004014:	0028      	movs	r0, r5
 8004016:	f000 f95d 	bl	80042d4 <_fflush_r>
 800401a:	2800      	cmp	r0, #0
 800401c:	d127      	bne.n	800406e <__swbuf_r+0x9a>
 800401e:	68a3      	ldr	r3, [r4, #8]
 8004020:	3001      	adds	r0, #1
 8004022:	3b01      	subs	r3, #1
 8004024:	60a3      	str	r3, [r4, #8]
 8004026:	6823      	ldr	r3, [r4, #0]
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	6022      	str	r2, [r4, #0]
 800402c:	701f      	strb	r7, [r3, #0]
 800402e:	6963      	ldr	r3, [r4, #20]
 8004030:	4283      	cmp	r3, r0
 8004032:	d004      	beq.n	800403e <__swbuf_r+0x6a>
 8004034:	89a3      	ldrh	r3, [r4, #12]
 8004036:	07db      	lsls	r3, r3, #31
 8004038:	d507      	bpl.n	800404a <__swbuf_r+0x76>
 800403a:	2e0a      	cmp	r6, #10
 800403c:	d105      	bne.n	800404a <__swbuf_r+0x76>
 800403e:	0021      	movs	r1, r4
 8004040:	0028      	movs	r0, r5
 8004042:	f000 f947 	bl	80042d4 <_fflush_r>
 8004046:	2800      	cmp	r0, #0
 8004048:	d111      	bne.n	800406e <__swbuf_r+0x9a>
 800404a:	0030      	movs	r0, r6
 800404c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800404e:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <__swbuf_r+0xa4>)
 8004050:	429c      	cmp	r4, r3
 8004052:	d101      	bne.n	8004058 <__swbuf_r+0x84>
 8004054:	68ac      	ldr	r4, [r5, #8]
 8004056:	e7cc      	b.n	8003ff2 <__swbuf_r+0x1e>
 8004058:	4b08      	ldr	r3, [pc, #32]	; (800407c <__swbuf_r+0xa8>)
 800405a:	429c      	cmp	r4, r3
 800405c:	d1c9      	bne.n	8003ff2 <__swbuf_r+0x1e>
 800405e:	68ec      	ldr	r4, [r5, #12]
 8004060:	e7c7      	b.n	8003ff2 <__swbuf_r+0x1e>
 8004062:	0021      	movs	r1, r4
 8004064:	0028      	movs	r0, r5
 8004066:	f000 f81f 	bl	80040a8 <__swsetup_r>
 800406a:	2800      	cmp	r0, #0
 800406c:	d0c9      	beq.n	8004002 <__swbuf_r+0x2e>
 800406e:	2601      	movs	r6, #1
 8004070:	4276      	negs	r6, r6
 8004072:	e7ea      	b.n	800404a <__swbuf_r+0x76>
 8004074:	08004668 	.word	0x08004668
 8004078:	08004688 	.word	0x08004688
 800407c:	08004648 	.word	0x08004648

08004080 <_write_r>:
 8004080:	b570      	push	{r4, r5, r6, lr}
 8004082:	0004      	movs	r4, r0
 8004084:	0008      	movs	r0, r1
 8004086:	0011      	movs	r1, r2
 8004088:	001a      	movs	r2, r3
 800408a:	2300      	movs	r3, #0
 800408c:	4d05      	ldr	r5, [pc, #20]	; (80040a4 <_write_r+0x24>)
 800408e:	602b      	str	r3, [r5, #0]
 8004090:	f7fc fbf5 	bl	800087e <_write>
 8004094:	1c43      	adds	r3, r0, #1
 8004096:	d103      	bne.n	80040a0 <_write_r+0x20>
 8004098:	682b      	ldr	r3, [r5, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d000      	beq.n	80040a0 <_write_r+0x20>
 800409e:	6023      	str	r3, [r4, #0]
 80040a0:	bd70      	pop	{r4, r5, r6, pc}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	200005b4 	.word	0x200005b4

080040a8 <__swsetup_r>:
 80040a8:	4b37      	ldr	r3, [pc, #220]	; (8004188 <__swsetup_r+0xe0>)
 80040aa:	b570      	push	{r4, r5, r6, lr}
 80040ac:	681d      	ldr	r5, [r3, #0]
 80040ae:	0006      	movs	r6, r0
 80040b0:	000c      	movs	r4, r1
 80040b2:	2d00      	cmp	r5, #0
 80040b4:	d005      	beq.n	80040c2 <__swsetup_r+0x1a>
 80040b6:	69ab      	ldr	r3, [r5, #24]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d102      	bne.n	80040c2 <__swsetup_r+0x1a>
 80040bc:	0028      	movs	r0, r5
 80040be:	f7ff fb45 	bl	800374c <__sinit>
 80040c2:	4b32      	ldr	r3, [pc, #200]	; (800418c <__swsetup_r+0xe4>)
 80040c4:	429c      	cmp	r4, r3
 80040c6:	d10f      	bne.n	80040e8 <__swsetup_r+0x40>
 80040c8:	686c      	ldr	r4, [r5, #4]
 80040ca:	230c      	movs	r3, #12
 80040cc:	5ee2      	ldrsh	r2, [r4, r3]
 80040ce:	b293      	uxth	r3, r2
 80040d0:	0711      	lsls	r1, r2, #28
 80040d2:	d42d      	bmi.n	8004130 <__swsetup_r+0x88>
 80040d4:	06d9      	lsls	r1, r3, #27
 80040d6:	d411      	bmi.n	80040fc <__swsetup_r+0x54>
 80040d8:	2309      	movs	r3, #9
 80040da:	2001      	movs	r0, #1
 80040dc:	6033      	str	r3, [r6, #0]
 80040de:	3337      	adds	r3, #55	; 0x37
 80040e0:	4313      	orrs	r3, r2
 80040e2:	81a3      	strh	r3, [r4, #12]
 80040e4:	4240      	negs	r0, r0
 80040e6:	bd70      	pop	{r4, r5, r6, pc}
 80040e8:	4b29      	ldr	r3, [pc, #164]	; (8004190 <__swsetup_r+0xe8>)
 80040ea:	429c      	cmp	r4, r3
 80040ec:	d101      	bne.n	80040f2 <__swsetup_r+0x4a>
 80040ee:	68ac      	ldr	r4, [r5, #8]
 80040f0:	e7eb      	b.n	80040ca <__swsetup_r+0x22>
 80040f2:	4b28      	ldr	r3, [pc, #160]	; (8004194 <__swsetup_r+0xec>)
 80040f4:	429c      	cmp	r4, r3
 80040f6:	d1e8      	bne.n	80040ca <__swsetup_r+0x22>
 80040f8:	68ec      	ldr	r4, [r5, #12]
 80040fa:	e7e6      	b.n	80040ca <__swsetup_r+0x22>
 80040fc:	075b      	lsls	r3, r3, #29
 80040fe:	d513      	bpl.n	8004128 <__swsetup_r+0x80>
 8004100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004102:	2900      	cmp	r1, #0
 8004104:	d008      	beq.n	8004118 <__swsetup_r+0x70>
 8004106:	0023      	movs	r3, r4
 8004108:	3344      	adds	r3, #68	; 0x44
 800410a:	4299      	cmp	r1, r3
 800410c:	d002      	beq.n	8004114 <__swsetup_r+0x6c>
 800410e:	0030      	movs	r0, r6
 8004110:	f000 f9bc 	bl	800448c <_free_r>
 8004114:	2300      	movs	r3, #0
 8004116:	6363      	str	r3, [r4, #52]	; 0x34
 8004118:	2224      	movs	r2, #36	; 0x24
 800411a:	89a3      	ldrh	r3, [r4, #12]
 800411c:	4393      	bics	r3, r2
 800411e:	81a3      	strh	r3, [r4, #12]
 8004120:	2300      	movs	r3, #0
 8004122:	6063      	str	r3, [r4, #4]
 8004124:	6923      	ldr	r3, [r4, #16]
 8004126:	6023      	str	r3, [r4, #0]
 8004128:	2308      	movs	r3, #8
 800412a:	89a2      	ldrh	r2, [r4, #12]
 800412c:	4313      	orrs	r3, r2
 800412e:	81a3      	strh	r3, [r4, #12]
 8004130:	6923      	ldr	r3, [r4, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10b      	bne.n	800414e <__swsetup_r+0xa6>
 8004136:	21a0      	movs	r1, #160	; 0xa0
 8004138:	2280      	movs	r2, #128	; 0x80
 800413a:	89a3      	ldrh	r3, [r4, #12]
 800413c:	0089      	lsls	r1, r1, #2
 800413e:	0092      	lsls	r2, r2, #2
 8004140:	400b      	ands	r3, r1
 8004142:	4293      	cmp	r3, r2
 8004144:	d003      	beq.n	800414e <__swsetup_r+0xa6>
 8004146:	0021      	movs	r1, r4
 8004148:	0030      	movs	r0, r6
 800414a:	f000 f93f 	bl	80043cc <__smakebuf_r>
 800414e:	220c      	movs	r2, #12
 8004150:	5ea3      	ldrsh	r3, [r4, r2]
 8004152:	2001      	movs	r0, #1
 8004154:	001a      	movs	r2, r3
 8004156:	b299      	uxth	r1, r3
 8004158:	4002      	ands	r2, r0
 800415a:	4203      	tst	r3, r0
 800415c:	d00f      	beq.n	800417e <__swsetup_r+0xd6>
 800415e:	2200      	movs	r2, #0
 8004160:	60a2      	str	r2, [r4, #8]
 8004162:	6962      	ldr	r2, [r4, #20]
 8004164:	4252      	negs	r2, r2
 8004166:	61a2      	str	r2, [r4, #24]
 8004168:	2000      	movs	r0, #0
 800416a:	6922      	ldr	r2, [r4, #16]
 800416c:	4282      	cmp	r2, r0
 800416e:	d1ba      	bne.n	80040e6 <__swsetup_r+0x3e>
 8004170:	060a      	lsls	r2, r1, #24
 8004172:	d5b8      	bpl.n	80040e6 <__swsetup_r+0x3e>
 8004174:	2240      	movs	r2, #64	; 0x40
 8004176:	4313      	orrs	r3, r2
 8004178:	81a3      	strh	r3, [r4, #12]
 800417a:	3801      	subs	r0, #1
 800417c:	e7b3      	b.n	80040e6 <__swsetup_r+0x3e>
 800417e:	0788      	lsls	r0, r1, #30
 8004180:	d400      	bmi.n	8004184 <__swsetup_r+0xdc>
 8004182:	6962      	ldr	r2, [r4, #20]
 8004184:	60a2      	str	r2, [r4, #8]
 8004186:	e7ef      	b.n	8004168 <__swsetup_r+0xc0>
 8004188:	2000040c 	.word	0x2000040c
 800418c:	08004668 	.word	0x08004668
 8004190:	08004688 	.word	0x08004688
 8004194:	08004648 	.word	0x08004648

08004198 <_close_r>:
 8004198:	2300      	movs	r3, #0
 800419a:	b570      	push	{r4, r5, r6, lr}
 800419c:	4d06      	ldr	r5, [pc, #24]	; (80041b8 <_close_r+0x20>)
 800419e:	0004      	movs	r4, r0
 80041a0:	0008      	movs	r0, r1
 80041a2:	602b      	str	r3, [r5, #0]
 80041a4:	f7fc fb87 	bl	80008b6 <_close>
 80041a8:	1c43      	adds	r3, r0, #1
 80041aa:	d103      	bne.n	80041b4 <_close_r+0x1c>
 80041ac:	682b      	ldr	r3, [r5, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d000      	beq.n	80041b4 <_close_r+0x1c>
 80041b2:	6023      	str	r3, [r4, #0]
 80041b4:	bd70      	pop	{r4, r5, r6, pc}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	200005b4 	.word	0x200005b4

080041bc <__sflush_r>:
 80041bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041be:	898b      	ldrh	r3, [r1, #12]
 80041c0:	0005      	movs	r5, r0
 80041c2:	000c      	movs	r4, r1
 80041c4:	071a      	lsls	r2, r3, #28
 80041c6:	d45f      	bmi.n	8004288 <__sflush_r+0xcc>
 80041c8:	684a      	ldr	r2, [r1, #4]
 80041ca:	2a00      	cmp	r2, #0
 80041cc:	dc04      	bgt.n	80041d8 <__sflush_r+0x1c>
 80041ce:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80041d0:	2a00      	cmp	r2, #0
 80041d2:	dc01      	bgt.n	80041d8 <__sflush_r+0x1c>
 80041d4:	2000      	movs	r0, #0
 80041d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80041d8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80041da:	2f00      	cmp	r7, #0
 80041dc:	d0fa      	beq.n	80041d4 <__sflush_r+0x18>
 80041de:	2200      	movs	r2, #0
 80041e0:	2180      	movs	r1, #128	; 0x80
 80041e2:	682e      	ldr	r6, [r5, #0]
 80041e4:	602a      	str	r2, [r5, #0]
 80041e6:	001a      	movs	r2, r3
 80041e8:	0149      	lsls	r1, r1, #5
 80041ea:	400a      	ands	r2, r1
 80041ec:	420b      	tst	r3, r1
 80041ee:	d034      	beq.n	800425a <__sflush_r+0x9e>
 80041f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041f2:	89a3      	ldrh	r3, [r4, #12]
 80041f4:	075b      	lsls	r3, r3, #29
 80041f6:	d506      	bpl.n	8004206 <__sflush_r+0x4a>
 80041f8:	6863      	ldr	r3, [r4, #4]
 80041fa:	1ac0      	subs	r0, r0, r3
 80041fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <__sflush_r+0x4a>
 8004202:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004204:	1ac0      	subs	r0, r0, r3
 8004206:	0002      	movs	r2, r0
 8004208:	6a21      	ldr	r1, [r4, #32]
 800420a:	2300      	movs	r3, #0
 800420c:	0028      	movs	r0, r5
 800420e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004210:	47b8      	blx	r7
 8004212:	89a1      	ldrh	r1, [r4, #12]
 8004214:	1c43      	adds	r3, r0, #1
 8004216:	d106      	bne.n	8004226 <__sflush_r+0x6a>
 8004218:	682b      	ldr	r3, [r5, #0]
 800421a:	2b1d      	cmp	r3, #29
 800421c:	d831      	bhi.n	8004282 <__sflush_r+0xc6>
 800421e:	4a2c      	ldr	r2, [pc, #176]	; (80042d0 <__sflush_r+0x114>)
 8004220:	40da      	lsrs	r2, r3
 8004222:	07d3      	lsls	r3, r2, #31
 8004224:	d52d      	bpl.n	8004282 <__sflush_r+0xc6>
 8004226:	2300      	movs	r3, #0
 8004228:	6063      	str	r3, [r4, #4]
 800422a:	6923      	ldr	r3, [r4, #16]
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	04cb      	lsls	r3, r1, #19
 8004230:	d505      	bpl.n	800423e <__sflush_r+0x82>
 8004232:	1c43      	adds	r3, r0, #1
 8004234:	d102      	bne.n	800423c <__sflush_r+0x80>
 8004236:	682b      	ldr	r3, [r5, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d100      	bne.n	800423e <__sflush_r+0x82>
 800423c:	6560      	str	r0, [r4, #84]	; 0x54
 800423e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004240:	602e      	str	r6, [r5, #0]
 8004242:	2900      	cmp	r1, #0
 8004244:	d0c6      	beq.n	80041d4 <__sflush_r+0x18>
 8004246:	0023      	movs	r3, r4
 8004248:	3344      	adds	r3, #68	; 0x44
 800424a:	4299      	cmp	r1, r3
 800424c:	d002      	beq.n	8004254 <__sflush_r+0x98>
 800424e:	0028      	movs	r0, r5
 8004250:	f000 f91c 	bl	800448c <_free_r>
 8004254:	2000      	movs	r0, #0
 8004256:	6360      	str	r0, [r4, #52]	; 0x34
 8004258:	e7bd      	b.n	80041d6 <__sflush_r+0x1a>
 800425a:	2301      	movs	r3, #1
 800425c:	0028      	movs	r0, r5
 800425e:	6a21      	ldr	r1, [r4, #32]
 8004260:	47b8      	blx	r7
 8004262:	1c43      	adds	r3, r0, #1
 8004264:	d1c5      	bne.n	80041f2 <__sflush_r+0x36>
 8004266:	682b      	ldr	r3, [r5, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0c2      	beq.n	80041f2 <__sflush_r+0x36>
 800426c:	2b1d      	cmp	r3, #29
 800426e:	d001      	beq.n	8004274 <__sflush_r+0xb8>
 8004270:	2b16      	cmp	r3, #22
 8004272:	d101      	bne.n	8004278 <__sflush_r+0xbc>
 8004274:	602e      	str	r6, [r5, #0]
 8004276:	e7ad      	b.n	80041d4 <__sflush_r+0x18>
 8004278:	2340      	movs	r3, #64	; 0x40
 800427a:	89a2      	ldrh	r2, [r4, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	81a3      	strh	r3, [r4, #12]
 8004280:	e7a9      	b.n	80041d6 <__sflush_r+0x1a>
 8004282:	2340      	movs	r3, #64	; 0x40
 8004284:	430b      	orrs	r3, r1
 8004286:	e7fa      	b.n	800427e <__sflush_r+0xc2>
 8004288:	690f      	ldr	r7, [r1, #16]
 800428a:	2f00      	cmp	r7, #0
 800428c:	d0a2      	beq.n	80041d4 <__sflush_r+0x18>
 800428e:	680a      	ldr	r2, [r1, #0]
 8004290:	600f      	str	r7, [r1, #0]
 8004292:	1bd2      	subs	r2, r2, r7
 8004294:	9201      	str	r2, [sp, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	079b      	lsls	r3, r3, #30
 800429a:	d100      	bne.n	800429e <__sflush_r+0xe2>
 800429c:	694a      	ldr	r2, [r1, #20]
 800429e:	60a2      	str	r2, [r4, #8]
 80042a0:	9b01      	ldr	r3, [sp, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	dc00      	bgt.n	80042a8 <__sflush_r+0xec>
 80042a6:	e795      	b.n	80041d4 <__sflush_r+0x18>
 80042a8:	003a      	movs	r2, r7
 80042aa:	0028      	movs	r0, r5
 80042ac:	9b01      	ldr	r3, [sp, #4]
 80042ae:	6a21      	ldr	r1, [r4, #32]
 80042b0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80042b2:	47b0      	blx	r6
 80042b4:	2800      	cmp	r0, #0
 80042b6:	dc06      	bgt.n	80042c6 <__sflush_r+0x10a>
 80042b8:	2340      	movs	r3, #64	; 0x40
 80042ba:	2001      	movs	r0, #1
 80042bc:	89a2      	ldrh	r2, [r4, #12]
 80042be:	4240      	negs	r0, r0
 80042c0:	4313      	orrs	r3, r2
 80042c2:	81a3      	strh	r3, [r4, #12]
 80042c4:	e787      	b.n	80041d6 <__sflush_r+0x1a>
 80042c6:	9b01      	ldr	r3, [sp, #4]
 80042c8:	183f      	adds	r7, r7, r0
 80042ca:	1a1b      	subs	r3, r3, r0
 80042cc:	9301      	str	r3, [sp, #4]
 80042ce:	e7e7      	b.n	80042a0 <__sflush_r+0xe4>
 80042d0:	20400001 	.word	0x20400001

080042d4 <_fflush_r>:
 80042d4:	690b      	ldr	r3, [r1, #16]
 80042d6:	b570      	push	{r4, r5, r6, lr}
 80042d8:	0005      	movs	r5, r0
 80042da:	000c      	movs	r4, r1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d102      	bne.n	80042e6 <_fflush_r+0x12>
 80042e0:	2500      	movs	r5, #0
 80042e2:	0028      	movs	r0, r5
 80042e4:	bd70      	pop	{r4, r5, r6, pc}
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d004      	beq.n	80042f4 <_fflush_r+0x20>
 80042ea:	6983      	ldr	r3, [r0, #24]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <_fflush_r+0x20>
 80042f0:	f7ff fa2c 	bl	800374c <__sinit>
 80042f4:	4b14      	ldr	r3, [pc, #80]	; (8004348 <_fflush_r+0x74>)
 80042f6:	429c      	cmp	r4, r3
 80042f8:	d11b      	bne.n	8004332 <_fflush_r+0x5e>
 80042fa:	686c      	ldr	r4, [r5, #4]
 80042fc:	220c      	movs	r2, #12
 80042fe:	5ea3      	ldrsh	r3, [r4, r2]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ed      	beq.n	80042e0 <_fflush_r+0xc>
 8004304:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004306:	07d2      	lsls	r2, r2, #31
 8004308:	d404      	bmi.n	8004314 <_fflush_r+0x40>
 800430a:	059b      	lsls	r3, r3, #22
 800430c:	d402      	bmi.n	8004314 <_fflush_r+0x40>
 800430e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004310:	f7ff fabd 	bl	800388e <__retarget_lock_acquire_recursive>
 8004314:	0028      	movs	r0, r5
 8004316:	0021      	movs	r1, r4
 8004318:	f7ff ff50 	bl	80041bc <__sflush_r>
 800431c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800431e:	0005      	movs	r5, r0
 8004320:	07db      	lsls	r3, r3, #31
 8004322:	d4de      	bmi.n	80042e2 <_fflush_r+0xe>
 8004324:	89a3      	ldrh	r3, [r4, #12]
 8004326:	059b      	lsls	r3, r3, #22
 8004328:	d4db      	bmi.n	80042e2 <_fflush_r+0xe>
 800432a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800432c:	f7ff fab0 	bl	8003890 <__retarget_lock_release_recursive>
 8004330:	e7d7      	b.n	80042e2 <_fflush_r+0xe>
 8004332:	4b06      	ldr	r3, [pc, #24]	; (800434c <_fflush_r+0x78>)
 8004334:	429c      	cmp	r4, r3
 8004336:	d101      	bne.n	800433c <_fflush_r+0x68>
 8004338:	68ac      	ldr	r4, [r5, #8]
 800433a:	e7df      	b.n	80042fc <_fflush_r+0x28>
 800433c:	4b04      	ldr	r3, [pc, #16]	; (8004350 <_fflush_r+0x7c>)
 800433e:	429c      	cmp	r4, r3
 8004340:	d1dc      	bne.n	80042fc <_fflush_r+0x28>
 8004342:	68ec      	ldr	r4, [r5, #12]
 8004344:	e7da      	b.n	80042fc <_fflush_r+0x28>
 8004346:	46c0      	nop			; (mov r8, r8)
 8004348:	08004668 	.word	0x08004668
 800434c:	08004688 	.word	0x08004688
 8004350:	08004648 	.word	0x08004648

08004354 <_lseek_r>:
 8004354:	b570      	push	{r4, r5, r6, lr}
 8004356:	0004      	movs	r4, r0
 8004358:	0008      	movs	r0, r1
 800435a:	0011      	movs	r1, r2
 800435c:	001a      	movs	r2, r3
 800435e:	2300      	movs	r3, #0
 8004360:	4d05      	ldr	r5, [pc, #20]	; (8004378 <_lseek_r+0x24>)
 8004362:	602b      	str	r3, [r5, #0]
 8004364:	f7fc fac8 	bl	80008f8 <_lseek>
 8004368:	1c43      	adds	r3, r0, #1
 800436a:	d103      	bne.n	8004374 <_lseek_r+0x20>
 800436c:	682b      	ldr	r3, [r5, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d000      	beq.n	8004374 <_lseek_r+0x20>
 8004372:	6023      	str	r3, [r4, #0]
 8004374:	bd70      	pop	{r4, r5, r6, pc}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	200005b4 	.word	0x200005b4

0800437c <__swhatbuf_r>:
 800437c:	b570      	push	{r4, r5, r6, lr}
 800437e:	000e      	movs	r6, r1
 8004380:	001d      	movs	r5, r3
 8004382:	230e      	movs	r3, #14
 8004384:	5ec9      	ldrsh	r1, [r1, r3]
 8004386:	0014      	movs	r4, r2
 8004388:	b096      	sub	sp, #88	; 0x58
 800438a:	2900      	cmp	r1, #0
 800438c:	da07      	bge.n	800439e <__swhatbuf_r+0x22>
 800438e:	2300      	movs	r3, #0
 8004390:	602b      	str	r3, [r5, #0]
 8004392:	89b3      	ldrh	r3, [r6, #12]
 8004394:	061b      	lsls	r3, r3, #24
 8004396:	d411      	bmi.n	80043bc <__swhatbuf_r+0x40>
 8004398:	2380      	movs	r3, #128	; 0x80
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	e00f      	b.n	80043be <__swhatbuf_r+0x42>
 800439e:	466a      	mov	r2, sp
 80043a0:	f000 f8d2 	bl	8004548 <_fstat_r>
 80043a4:	2800      	cmp	r0, #0
 80043a6:	dbf2      	blt.n	800438e <__swhatbuf_r+0x12>
 80043a8:	23f0      	movs	r3, #240	; 0xf0
 80043aa:	9901      	ldr	r1, [sp, #4]
 80043ac:	021b      	lsls	r3, r3, #8
 80043ae:	4019      	ands	r1, r3
 80043b0:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <__swhatbuf_r+0x4c>)
 80043b2:	18c9      	adds	r1, r1, r3
 80043b4:	424b      	negs	r3, r1
 80043b6:	4159      	adcs	r1, r3
 80043b8:	6029      	str	r1, [r5, #0]
 80043ba:	e7ed      	b.n	8004398 <__swhatbuf_r+0x1c>
 80043bc:	2340      	movs	r3, #64	; 0x40
 80043be:	2000      	movs	r0, #0
 80043c0:	6023      	str	r3, [r4, #0]
 80043c2:	b016      	add	sp, #88	; 0x58
 80043c4:	bd70      	pop	{r4, r5, r6, pc}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	ffffe000 	.word	0xffffe000

080043cc <__smakebuf_r>:
 80043cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043ce:	2602      	movs	r6, #2
 80043d0:	898b      	ldrh	r3, [r1, #12]
 80043d2:	0005      	movs	r5, r0
 80043d4:	000c      	movs	r4, r1
 80043d6:	4233      	tst	r3, r6
 80043d8:	d006      	beq.n	80043e8 <__smakebuf_r+0x1c>
 80043da:	0023      	movs	r3, r4
 80043dc:	3347      	adds	r3, #71	; 0x47
 80043de:	6023      	str	r3, [r4, #0]
 80043e0:	6123      	str	r3, [r4, #16]
 80043e2:	2301      	movs	r3, #1
 80043e4:	6163      	str	r3, [r4, #20]
 80043e6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80043e8:	466a      	mov	r2, sp
 80043ea:	ab01      	add	r3, sp, #4
 80043ec:	f7ff ffc6 	bl	800437c <__swhatbuf_r>
 80043f0:	9900      	ldr	r1, [sp, #0]
 80043f2:	0007      	movs	r7, r0
 80043f4:	0028      	movs	r0, r5
 80043f6:	f7ff fa4d 	bl	8003894 <_malloc_r>
 80043fa:	2800      	cmp	r0, #0
 80043fc:	d108      	bne.n	8004410 <__smakebuf_r+0x44>
 80043fe:	220c      	movs	r2, #12
 8004400:	5ea3      	ldrsh	r3, [r4, r2]
 8004402:	059a      	lsls	r2, r3, #22
 8004404:	d4ef      	bmi.n	80043e6 <__smakebuf_r+0x1a>
 8004406:	2203      	movs	r2, #3
 8004408:	4393      	bics	r3, r2
 800440a:	431e      	orrs	r6, r3
 800440c:	81a6      	strh	r6, [r4, #12]
 800440e:	e7e4      	b.n	80043da <__smakebuf_r+0xe>
 8004410:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <__smakebuf_r+0x84>)
 8004412:	62ab      	str	r3, [r5, #40]	; 0x28
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	89a2      	ldrh	r2, [r4, #12]
 8004418:	6020      	str	r0, [r4, #0]
 800441a:	4313      	orrs	r3, r2
 800441c:	81a3      	strh	r3, [r4, #12]
 800441e:	9b00      	ldr	r3, [sp, #0]
 8004420:	6120      	str	r0, [r4, #16]
 8004422:	6163      	str	r3, [r4, #20]
 8004424:	9b01      	ldr	r3, [sp, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00d      	beq.n	8004446 <__smakebuf_r+0x7a>
 800442a:	0028      	movs	r0, r5
 800442c:	230e      	movs	r3, #14
 800442e:	5ee1      	ldrsh	r1, [r4, r3]
 8004430:	f000 f89c 	bl	800456c <_isatty_r>
 8004434:	2800      	cmp	r0, #0
 8004436:	d006      	beq.n	8004446 <__smakebuf_r+0x7a>
 8004438:	2203      	movs	r2, #3
 800443a:	89a3      	ldrh	r3, [r4, #12]
 800443c:	4393      	bics	r3, r2
 800443e:	001a      	movs	r2, r3
 8004440:	2301      	movs	r3, #1
 8004442:	4313      	orrs	r3, r2
 8004444:	81a3      	strh	r3, [r4, #12]
 8004446:	89a0      	ldrh	r0, [r4, #12]
 8004448:	4307      	orrs	r7, r0
 800444a:	81a7      	strh	r7, [r4, #12]
 800444c:	e7cb      	b.n	80043e6 <__smakebuf_r+0x1a>
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	080036d1 	.word	0x080036d1

08004454 <memchr>:
 8004454:	b2c9      	uxtb	r1, r1
 8004456:	1882      	adds	r2, r0, r2
 8004458:	4290      	cmp	r0, r2
 800445a:	d101      	bne.n	8004460 <memchr+0xc>
 800445c:	2000      	movs	r0, #0
 800445e:	4770      	bx	lr
 8004460:	7803      	ldrb	r3, [r0, #0]
 8004462:	428b      	cmp	r3, r1
 8004464:	d0fb      	beq.n	800445e <memchr+0xa>
 8004466:	3001      	adds	r0, #1
 8004468:	e7f6      	b.n	8004458 <memchr+0x4>
	...

0800446c <__malloc_lock>:
 800446c:	b510      	push	{r4, lr}
 800446e:	4802      	ldr	r0, [pc, #8]	; (8004478 <__malloc_lock+0xc>)
 8004470:	f7ff fa0d 	bl	800388e <__retarget_lock_acquire_recursive>
 8004474:	bd10      	pop	{r4, pc}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	200005ac 	.word	0x200005ac

0800447c <__malloc_unlock>:
 800447c:	b510      	push	{r4, lr}
 800447e:	4802      	ldr	r0, [pc, #8]	; (8004488 <__malloc_unlock+0xc>)
 8004480:	f7ff fa06 	bl	8003890 <__retarget_lock_release_recursive>
 8004484:	bd10      	pop	{r4, pc}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	200005ac 	.word	0x200005ac

0800448c <_free_r>:
 800448c:	b570      	push	{r4, r5, r6, lr}
 800448e:	0005      	movs	r5, r0
 8004490:	2900      	cmp	r1, #0
 8004492:	d010      	beq.n	80044b6 <_free_r+0x2a>
 8004494:	1f0c      	subs	r4, r1, #4
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	da00      	bge.n	800449e <_free_r+0x12>
 800449c:	18e4      	adds	r4, r4, r3
 800449e:	0028      	movs	r0, r5
 80044a0:	f7ff ffe4 	bl	800446c <__malloc_lock>
 80044a4:	4a1d      	ldr	r2, [pc, #116]	; (800451c <_free_r+0x90>)
 80044a6:	6813      	ldr	r3, [r2, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d105      	bne.n	80044b8 <_free_r+0x2c>
 80044ac:	6063      	str	r3, [r4, #4]
 80044ae:	6014      	str	r4, [r2, #0]
 80044b0:	0028      	movs	r0, r5
 80044b2:	f7ff ffe3 	bl	800447c <__malloc_unlock>
 80044b6:	bd70      	pop	{r4, r5, r6, pc}
 80044b8:	42a3      	cmp	r3, r4
 80044ba:	d908      	bls.n	80044ce <_free_r+0x42>
 80044bc:	6821      	ldr	r1, [r4, #0]
 80044be:	1860      	adds	r0, r4, r1
 80044c0:	4283      	cmp	r3, r0
 80044c2:	d1f3      	bne.n	80044ac <_free_r+0x20>
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	1841      	adds	r1, r0, r1
 80044ca:	6021      	str	r1, [r4, #0]
 80044cc:	e7ee      	b.n	80044ac <_free_r+0x20>
 80044ce:	001a      	movs	r2, r3
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <_free_r+0x4e>
 80044d6:	42a3      	cmp	r3, r4
 80044d8:	d9f9      	bls.n	80044ce <_free_r+0x42>
 80044da:	6811      	ldr	r1, [r2, #0]
 80044dc:	1850      	adds	r0, r2, r1
 80044de:	42a0      	cmp	r0, r4
 80044e0:	d10b      	bne.n	80044fa <_free_r+0x6e>
 80044e2:	6820      	ldr	r0, [r4, #0]
 80044e4:	1809      	adds	r1, r1, r0
 80044e6:	1850      	adds	r0, r2, r1
 80044e8:	6011      	str	r1, [r2, #0]
 80044ea:	4283      	cmp	r3, r0
 80044ec:	d1e0      	bne.n	80044b0 <_free_r+0x24>
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	1841      	adds	r1, r0, r1
 80044f4:	6011      	str	r1, [r2, #0]
 80044f6:	6053      	str	r3, [r2, #4]
 80044f8:	e7da      	b.n	80044b0 <_free_r+0x24>
 80044fa:	42a0      	cmp	r0, r4
 80044fc:	d902      	bls.n	8004504 <_free_r+0x78>
 80044fe:	230c      	movs	r3, #12
 8004500:	602b      	str	r3, [r5, #0]
 8004502:	e7d5      	b.n	80044b0 <_free_r+0x24>
 8004504:	6821      	ldr	r1, [r4, #0]
 8004506:	1860      	adds	r0, r4, r1
 8004508:	4283      	cmp	r3, r0
 800450a:	d103      	bne.n	8004514 <_free_r+0x88>
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	1841      	adds	r1, r0, r1
 8004512:	6021      	str	r1, [r4, #0]
 8004514:	6063      	str	r3, [r4, #4]
 8004516:	6054      	str	r4, [r2, #4]
 8004518:	e7ca      	b.n	80044b0 <_free_r+0x24>
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	20000490 	.word	0x20000490

08004520 <_read_r>:
 8004520:	b570      	push	{r4, r5, r6, lr}
 8004522:	0004      	movs	r4, r0
 8004524:	0008      	movs	r0, r1
 8004526:	0011      	movs	r1, r2
 8004528:	001a      	movs	r2, r3
 800452a:	2300      	movs	r3, #0
 800452c:	4d05      	ldr	r5, [pc, #20]	; (8004544 <_read_r+0x24>)
 800452e:	602b      	str	r3, [r5, #0]
 8004530:	f7fc f988 	bl	8000844 <_read>
 8004534:	1c43      	adds	r3, r0, #1
 8004536:	d103      	bne.n	8004540 <_read_r+0x20>
 8004538:	682b      	ldr	r3, [r5, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d000      	beq.n	8004540 <_read_r+0x20>
 800453e:	6023      	str	r3, [r4, #0]
 8004540:	bd70      	pop	{r4, r5, r6, pc}
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	200005b4 	.word	0x200005b4

08004548 <_fstat_r>:
 8004548:	2300      	movs	r3, #0
 800454a:	b570      	push	{r4, r5, r6, lr}
 800454c:	4d06      	ldr	r5, [pc, #24]	; (8004568 <_fstat_r+0x20>)
 800454e:	0004      	movs	r4, r0
 8004550:	0008      	movs	r0, r1
 8004552:	0011      	movs	r1, r2
 8004554:	602b      	str	r3, [r5, #0]
 8004556:	f7fc f9b8 	bl	80008ca <_fstat>
 800455a:	1c43      	adds	r3, r0, #1
 800455c:	d103      	bne.n	8004566 <_fstat_r+0x1e>
 800455e:	682b      	ldr	r3, [r5, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d000      	beq.n	8004566 <_fstat_r+0x1e>
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	200005b4 	.word	0x200005b4

0800456c <_isatty_r>:
 800456c:	2300      	movs	r3, #0
 800456e:	b570      	push	{r4, r5, r6, lr}
 8004570:	4d06      	ldr	r5, [pc, #24]	; (800458c <_isatty_r+0x20>)
 8004572:	0004      	movs	r4, r0
 8004574:	0008      	movs	r0, r1
 8004576:	602b      	str	r3, [r5, #0]
 8004578:	f7fc f9b5 	bl	80008e6 <_isatty>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d103      	bne.n	8004588 <_isatty_r+0x1c>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d000      	beq.n	8004588 <_isatty_r+0x1c>
 8004586:	6023      	str	r3, [r4, #0]
 8004588:	bd70      	pop	{r4, r5, r6, pc}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	200005b4 	.word	0x200005b4

08004590 <_init>:
 8004590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004596:	bc08      	pop	{r3}
 8004598:	469e      	mov	lr, r3
 800459a:	4770      	bx	lr

0800459c <_fini>:
 800459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a2:	bc08      	pop	{r3}
 80045a4:	469e      	mov	lr, r3
 80045a6:	4770      	bx	lr
