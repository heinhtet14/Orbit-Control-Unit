
DAC_Ben.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d1c  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002ea0  08002ea0  00012ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb8  08002eb8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002eb8  08002eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ec0  08002ec0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ec0  08002ec0  00012ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ec4  08002ec4  00012ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  2000000c  08002ed4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08002ed4  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba43  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b67  00000000  00000000  0002ba78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002d5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002e000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f703  00000000  00000000  0002e988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000acef  00000000  00000000  0004e08b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0f25  00000000  00000000  00058d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00119c9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a60  00000000  00000000  00119cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08002e88 	.word	0x08002e88

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	08002e88 	.word	0x08002e88

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b96e 	b.w	80004b8 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	468e      	mov	lr, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	f040 8083 	bne.w	800030c <__udivmoddi4+0x118>
 8000206:	428a      	cmp	r2, r1
 8000208:	4617      	mov	r7, r2
 800020a:	d947      	bls.n	800029c <__udivmoddi4+0xa8>
 800020c:	fab2 f382 	clz	r3, r2
 8000210:	b14b      	cbz	r3, 8000226 <__udivmoddi4+0x32>
 8000212:	f1c3 0120 	rsb	r1, r3, #32
 8000216:	fa05 fe03 	lsl.w	lr, r5, r3
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	409f      	lsls	r7, r3
 8000220:	ea41 0e0e 	orr.w	lr, r1, lr
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	fbbe fcf8 	udiv	ip, lr, r8
 800022e:	fa1f f987 	uxth.w	r9, r7
 8000232:	fb08 e21c 	mls	r2, r8, ip, lr
 8000236:	fb0c f009 	mul.w	r0, ip, r9
 800023a:	0c21      	lsrs	r1, r4, #16
 800023c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	18ba      	adds	r2, r7, r2
 8000246:	f10c 31ff 	add.w	r1, ip, #4294967295
 800024a:	f080 8118 	bcs.w	800047e <__udivmoddi4+0x28a>
 800024e:	4290      	cmp	r0, r2
 8000250:	f240 8115 	bls.w	800047e <__udivmoddi4+0x28a>
 8000254:	f1ac 0c02 	sub.w	ip, ip, #2
 8000258:	443a      	add	r2, r7
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	fbb2 f0f8 	udiv	r0, r2, r8
 8000260:	fb08 2210 	mls	r2, r8, r0, r2
 8000264:	fb00 f109 	mul.w	r1, r0, r9
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	42a1      	cmp	r1, r4
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x92>
 8000272:	193c      	adds	r4, r7, r4
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 8103 	bcs.w	8000482 <__udivmoddi4+0x28e>
 800027c:	42a1      	cmp	r1, r4
 800027e:	f240 8100 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000282:	3802      	subs	r0, #2
 8000284:	443c      	add	r4, r7
 8000286:	1a64      	subs	r4, r4, r1
 8000288:	2100      	movs	r1, #0
 800028a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa4>
 8000290:	2200      	movs	r2, #0
 8000292:	40dc      	lsrs	r4, r3
 8000294:	e9c6 4200 	strd	r4, r2, [r6]
 8000298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029c:	b902      	cbnz	r2, 80002a0 <__udivmoddi4+0xac>
 800029e:	deff      	udf	#255	; 0xff
 80002a0:	fab2 f382 	clz	r3, r2
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d14f      	bne.n	8000348 <__udivmoddi4+0x154>
 80002a8:	1a8d      	subs	r5, r1, r2
 80002aa:	2101      	movs	r1, #1
 80002ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80002b0:	fa1f f882 	uxth.w	r8, r2
 80002b4:	fbb5 fcfe 	udiv	ip, r5, lr
 80002b8:	fb0e 551c 	mls	r5, lr, ip, r5
 80002bc:	fb08 f00c 	mul.w	r0, r8, ip
 80002c0:	0c22      	lsrs	r2, r4, #16
 80002c2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80002c6:	42a8      	cmp	r0, r5
 80002c8:	d907      	bls.n	80002da <__udivmoddi4+0xe6>
 80002ca:	197d      	adds	r5, r7, r5
 80002cc:	f10c 32ff 	add.w	r2, ip, #4294967295
 80002d0:	d202      	bcs.n	80002d8 <__udivmoddi4+0xe4>
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	f200 80e9 	bhi.w	80004aa <__udivmoddi4+0x2b6>
 80002d8:	4694      	mov	ip, r2
 80002da:	1a2d      	subs	r5, r5, r0
 80002dc:	fbb5 f0fe 	udiv	r0, r5, lr
 80002e0:	fb0e 5510 	mls	r5, lr, r0, r5
 80002e4:	fb08 f800 	mul.w	r8, r8, r0
 80002e8:	b2a4      	uxth	r4, r4
 80002ea:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ee:	45a0      	cmp	r8, r4
 80002f0:	d907      	bls.n	8000302 <__udivmoddi4+0x10e>
 80002f2:	193c      	adds	r4, r7, r4
 80002f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x10c>
 80002fa:	45a0      	cmp	r8, r4
 80002fc:	f200 80d9 	bhi.w	80004b2 <__udivmoddi4+0x2be>
 8000300:	4610      	mov	r0, r2
 8000302:	eba4 0408 	sub.w	r4, r4, r8
 8000306:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030a:	e7c0      	b.n	800028e <__udivmoddi4+0x9a>
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x12e>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80b1 	beq.w	8000478 <__udivmoddi4+0x284>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14b      	bne.n	80003c2 <__udivmoddi4+0x1ce>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0x140>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80b9 	bhi.w	80004a6 <__udivmoddi4+0x2b2>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0aa      	beq.n	8000298 <__udivmoddi4+0xa4>
 8000342:	e9c6 4e00 	strd	r4, lr, [r6]
 8000346:	e7a7      	b.n	8000298 <__udivmoddi4+0xa4>
 8000348:	409f      	lsls	r7, r3
 800034a:	f1c3 0220 	rsb	r2, r3, #32
 800034e:	40d1      	lsrs	r1, r2
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000360:	fa24 f202 	lsr.w	r2, r4, r2
 8000364:	409d      	lsls	r5, r3
 8000366:	fb00 fc08 	mul.w	ip, r0, r8
 800036a:	432a      	orrs	r2, r5
 800036c:	0c15      	lsrs	r5, r2, #16
 800036e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000372:	45ac      	cmp	ip, r5
 8000374:	fa04 f403 	lsl.w	r4, r4, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x19a>
 800037a:	197d      	adds	r5, r7, r5
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	f080 808f 	bcs.w	80004a2 <__udivmoddi4+0x2ae>
 8000384:	45ac      	cmp	ip, r5
 8000386:	f240 808c 	bls.w	80004a2 <__udivmoddi4+0x2ae>
 800038a:	3802      	subs	r0, #2
 800038c:	443d      	add	r5, r7
 800038e:	eba5 050c 	sub.w	r5, r5, ip
 8000392:	fbb5 f1fe 	udiv	r1, r5, lr
 8000396:	fb0e 5c11 	mls	ip, lr, r1, r5
 800039a:	fb01 f908 	mul.w	r9, r1, r8
 800039e:	b295      	uxth	r5, r2
 80003a0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003a4:	45a9      	cmp	r9, r5
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x1c4>
 80003a8:	197d      	adds	r5, r7, r5
 80003aa:	f101 32ff 	add.w	r2, r1, #4294967295
 80003ae:	d274      	bcs.n	800049a <__udivmoddi4+0x2a6>
 80003b0:	45a9      	cmp	r9, r5
 80003b2:	d972      	bls.n	800049a <__udivmoddi4+0x2a6>
 80003b4:	3902      	subs	r1, #2
 80003b6:	443d      	add	r5, r7
 80003b8:	eba5 0509 	sub.w	r5, r5, r9
 80003bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003c0:	e778      	b.n	80002b4 <__udivmoddi4+0xc0>
 80003c2:	f1c1 0720 	rsb	r7, r1, #32
 80003c6:	408b      	lsls	r3, r1
 80003c8:	fa22 fc07 	lsr.w	ip, r2, r7
 80003cc:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d0:	fa25 f407 	lsr.w	r4, r5, r7
 80003d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003d8:	fbb4 f9fe 	udiv	r9, r4, lr
 80003dc:	fa1f f88c 	uxth.w	r8, ip
 80003e0:	fb0e 4419 	mls	r4, lr, r9, r4
 80003e4:	fa20 f307 	lsr.w	r3, r0, r7
 80003e8:	fb09 fa08 	mul.w	sl, r9, r8
 80003ec:	408d      	lsls	r5, r1
 80003ee:	431d      	orrs	r5, r3
 80003f0:	0c2b      	lsrs	r3, r5, #16
 80003f2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f6:	45a2      	cmp	sl, r4
 80003f8:	fa02 f201 	lsl.w	r2, r2, r1
 80003fc:	fa00 f301 	lsl.w	r3, r0, r1
 8000400:	d909      	bls.n	8000416 <__udivmoddi4+0x222>
 8000402:	eb1c 0404 	adds.w	r4, ip, r4
 8000406:	f109 30ff 	add.w	r0, r9, #4294967295
 800040a:	d248      	bcs.n	800049e <__udivmoddi4+0x2aa>
 800040c:	45a2      	cmp	sl, r4
 800040e:	d946      	bls.n	800049e <__udivmoddi4+0x2aa>
 8000410:	f1a9 0902 	sub.w	r9, r9, #2
 8000414:	4464      	add	r4, ip
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	fbb4 f0fe 	udiv	r0, r4, lr
 800041e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000422:	fb00 fa08 	mul.w	sl, r0, r8
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x24e>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f100 35ff 	add.w	r5, r0, #4294967295
 8000438:	d22d      	bcs.n	8000496 <__udivmoddi4+0x2a2>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d92b      	bls.n	8000496 <__udivmoddi4+0x2a2>
 800043e:	3802      	subs	r0, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	464d      	mov	r5, r9
 8000454:	d319      	bcc.n	800048a <__udivmoddi4+0x296>
 8000456:	d016      	beq.n	8000486 <__udivmoddi4+0x292>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x27e>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb64 0405 	sbc.w	r4, r4, r5
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	431f      	orrs	r7, r3
 800046c:	40cc      	lsrs	r4, r1
 800046e:	e9c6 7400 	strd	r7, r4, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	4631      	mov	r1, r6
 800047a:	4630      	mov	r0, r6
 800047c:	e70c      	b.n	8000298 <__udivmoddi4+0xa4>
 800047e:	468c      	mov	ip, r1
 8000480:	e6eb      	b.n	800025a <__udivmoddi4+0x66>
 8000482:	4610      	mov	r0, r2
 8000484:	e6ff      	b.n	8000286 <__udivmoddi4+0x92>
 8000486:	4543      	cmp	r3, r8
 8000488:	d2e6      	bcs.n	8000458 <__udivmoddi4+0x264>
 800048a:	ebb8 0e02 	subs.w	lr, r8, r2
 800048e:	eb69 050c 	sbc.w	r5, r9, ip
 8000492:	3801      	subs	r0, #1
 8000494:	e7e0      	b.n	8000458 <__udivmoddi4+0x264>
 8000496:	4628      	mov	r0, r5
 8000498:	e7d3      	b.n	8000442 <__udivmoddi4+0x24e>
 800049a:	4611      	mov	r1, r2
 800049c:	e78c      	b.n	80003b8 <__udivmoddi4+0x1c4>
 800049e:	4681      	mov	r9, r0
 80004a0:	e7b9      	b.n	8000416 <__udivmoddi4+0x222>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e773      	b.n	800038e <__udivmoddi4+0x19a>
 80004a6:	4608      	mov	r0, r1
 80004a8:	e749      	b.n	800033e <__udivmoddi4+0x14a>
 80004aa:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ae:	443d      	add	r5, r7
 80004b0:	e713      	b.n	80002da <__udivmoddi4+0xe6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	e724      	b.n	8000302 <__udivmoddi4+0x10e>

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 fb9a 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f820 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f8fc 	bl	80006c4 <MX_GPIO_Init>
  MX_ETH_Init();
 80004cc:	f000 f864 	bl	8000598 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80004d0:	f000 f8a4 	bl	800061c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004d4:	f000 f8cc 	bl	8000670 <MX_USB_OTG_FS_PCD_Init>
	//   		 y_out[0] = DC_Update(&dc_convo, x_in[0]);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	for ( k = 0; k < 10; k++)
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <main+0x44>)
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	e009      	b.n	80004f4 <main+0x38>
	{
	   	count++;
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <main+0x48>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	3301      	adds	r3, #1
 80004e6:	4a07      	ldr	r2, [pc, #28]	; (8000504 <main+0x48>)
 80004e8:	6013      	str	r3, [r2, #0]
	for ( k = 0; k < 10; k++)
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <main+0x44>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	3301      	adds	r3, #1
 80004f0:	4a03      	ldr	r2, [pc, #12]	; (8000500 <main+0x44>)
 80004f2:	6013      	str	r3, [r2, #0]
 80004f4:	4b02      	ldr	r3, [pc, #8]	; (8000500 <main+0x44>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b09      	cmp	r3, #9
 80004fa:	ddf1      	ble.n	80004e0 <main+0x24>
 80004fc:	e7ec      	b.n	80004d8 <main+0x1c>
 80004fe:	bf00      	nop
 8000500:	20000474 	.word	0x20000474
 8000504:	20000478 	.word	0x20000478

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b092      	sub	sp, #72	; 0x48
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0318 	add.w	r3, r7, #24
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f002 fcae 	bl	8002e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052a:	2302      	movs	r3, #2
 800052c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052e:	2301      	movs	r3, #1
 8000530:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000532:	2310      	movs	r3, #16
 8000534:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000536:	2302      	movs	r3, #2
 8000538:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800053a:	2300      	movs	r3, #0
 800053c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 800053e:	230d      	movs	r3, #13
 8000540:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8000542:	23c3      	movs	r3, #195	; 0xc3
 8000544:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000546:	2302      	movs	r3, #2
 8000548:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800054a:	2305      	movs	r3, #5
 800054c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054e:	f107 0318 	add.w	r3, r7, #24
 8000552:	4618      	mov	r0, r3
 8000554:	f001 fbf4 	bl	8001d40 <HAL_RCC_OscConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800055e:	f000 f95f 	bl	8000820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000562:	230f      	movs	r3, #15
 8000564:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000566:	2302      	movs	r3, #2
 8000568:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800056e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000572:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000578:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2103      	movs	r1, #3
 800057e:	4618      	mov	r0, r3
 8000580:	f001 fe2e 	bl	80021e0 <HAL_RCC_ClockConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800058a:	f000 f949 	bl	8000820 <Error_Handler>
  }
}
 800058e:	bf00      	nop
 8000590:	3748      	adds	r7, #72	; 0x48
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800059c:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <MX_ETH_Init+0x78>)
 800059e:	4a1d      	ldr	r2, [pc, #116]	; (8000614 <MX_ETH_Init+0x7c>)
 80005a0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80005a2:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <MX_ETH_Init+0x78>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <MX_ETH_Init+0x78>)
 80005aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ae:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80005b0:	4b17      	ldr	r3, [pc, #92]	; (8000610 <MX_ETH_Init+0x78>)
 80005b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005b6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80005b8:	4b15      	ldr	r3, [pc, #84]	; (8000610 <MX_ETH_Init+0x78>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80005be:	4b16      	ldr	r3, [pc, #88]	; (8000618 <MX_ETH_Init+0x80>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <MX_ETH_Init+0x80>)
 80005c6:	2280      	movs	r2, #128	; 0x80
 80005c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005ca:	4b13      	ldr	r3, [pc, #76]	; (8000618 <MX_ETH_Init+0x80>)
 80005cc:	22e1      	movs	r2, #225	; 0xe1
 80005ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_ETH_Init+0x80>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <MX_ETH_Init+0x80>)
 80005d8:	2200      	movs	r2, #0
 80005da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005dc:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_ETH_Init+0x80>)
 80005de:	2200      	movs	r2, #0
 80005e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <MX_ETH_Init+0x78>)
 80005e4:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <MX_ETH_Init+0x80>)
 80005e6:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_ETH_Init+0x78>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <MX_ETH_Init+0x78>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_ETH_Init+0x78>)
 80005f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80005fa:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <MX_ETH_Init+0x78>)
 80005fe:	f000 fc71 	bl	8000ee4 <HAL_ETH_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000608:	f000 f90a 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	2000047c 	.word	0x2000047c
 8000614:	40028000 	.word	0x40028000
 8000618:	20000028 	.word	0x20000028

0800061c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 8000622:	4a12      	ldr	r2, [pc, #72]	; (800066c <MX_USART3_UART_Init+0x50>)
 8000624:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 8000628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800062c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 8000642:	220c      	movs	r2, #12
 8000644:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 8000654:	f001 ffe0 	bl	8002618 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800065e:	f000 f8df 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000030 	.word	0x20000030
 800066c:	40004800 	.word	0x40004800

08000670 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000676:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800067a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800067e:	2204      	movs	r2, #4
 8000680:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000684:	2202      	movs	r2, #2
 8000686:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000688:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000690:	2202      	movs	r2, #2
 8000692:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000696:	2201      	movs	r2, #1
 8000698:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80006ae:	f001 fa29 	bl	8001b04 <HAL_PCD_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80006b8:	f000 f8b2 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000074 	.word	0x20000074

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	; 0x30
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
 80006de:	4b4c      	ldr	r3, [pc, #304]	; (8000810 <MX_GPIO_Init+0x14c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a4b      	ldr	r2, [pc, #300]	; (8000810 <MX_GPIO_Init+0x14c>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b49      	ldr	r3, [pc, #292]	; (8000810 <MX_GPIO_Init+0x14c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	61bb      	str	r3, [r7, #24]
 80006f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	4b45      	ldr	r3, [pc, #276]	; (8000810 <MX_GPIO_Init+0x14c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a44      	ldr	r2, [pc, #272]	; (8000810 <MX_GPIO_Init+0x14c>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b42      	ldr	r3, [pc, #264]	; (8000810 <MX_GPIO_Init+0x14c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	4b3e      	ldr	r3, [pc, #248]	; (8000810 <MX_GPIO_Init+0x14c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a3d      	ldr	r2, [pc, #244]	; (8000810 <MX_GPIO_Init+0x14c>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b3b      	ldr	r3, [pc, #236]	; (8000810 <MX_GPIO_Init+0x14c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	4b37      	ldr	r3, [pc, #220]	; (8000810 <MX_GPIO_Init+0x14c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a36      	ldr	r2, [pc, #216]	; (8000810 <MX_GPIO_Init+0x14c>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b34      	ldr	r3, [pc, #208]	; (8000810 <MX_GPIO_Init+0x14c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	4b30      	ldr	r3, [pc, #192]	; (8000810 <MX_GPIO_Init+0x14c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a2f      	ldr	r2, [pc, #188]	; (8000810 <MX_GPIO_Init+0x14c>)
 8000754:	f043 0308 	orr.w	r3, r3, #8
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <MX_GPIO_Init+0x14c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0308 	and.w	r3, r3, #8
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b29      	ldr	r3, [pc, #164]	; (8000810 <MX_GPIO_Init+0x14c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a28      	ldr	r2, [pc, #160]	; (8000810 <MX_GPIO_Init+0x14c>)
 8000770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_GPIO_Init+0x14c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f244 0181 	movw	r1, #16513	; 0x4081
 8000788:	4822      	ldr	r0, [pc, #136]	; (8000814 <MX_GPIO_Init+0x150>)
 800078a:	f001 f9a3 	bl	8001ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2140      	movs	r1, #64	; 0x40
 8000792:	4821      	ldr	r0, [pc, #132]	; (8000818 <MX_GPIO_Init+0x154>)
 8000794:	f001 f99e 	bl	8001ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	481b      	ldr	r0, [pc, #108]	; (800081c <MX_GPIO_Init+0x158>)
 80007b0:	f000 fff2 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007b4:	f244 0381 	movw	r3, #16513	; 0x4081
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	4811      	ldr	r0, [pc, #68]	; (8000814 <MX_GPIO_Init+0x150>)
 80007ce:	f000 ffe3 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007d2:	2340      	movs	r3, #64	; 0x40
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	480b      	ldr	r0, [pc, #44]	; (8000818 <MX_GPIO_Init+0x154>)
 80007ea:	f000 ffd5 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007ee:	2380      	movs	r3, #128	; 0x80
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_GPIO_Init+0x154>)
 8000802:	f000 ffc9 	bl	8001798 <HAL_GPIO_Init>

}
 8000806:	bf00      	nop
 8000808:	3730      	adds	r7, #48	; 0x30
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40020400 	.word	0x40020400
 8000818:	40021800 	.word	0x40021800
 800081c:	40020800 	.word	0x40020800

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
}
 8000826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000828:	e7fe      	b.n	8000828 <Error_Handler+0x8>
	...

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <HAL_MspInit+0x48>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <HAL_MspInit+0x48>)
 800083c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000840:	6453      	str	r3, [r2, #68]	; 0x44
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <HAL_MspInit+0x48>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_MspInit+0x48>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a07      	ldr	r2, [pc, #28]	; (8000874 <HAL_MspInit+0x48>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_MspInit+0x48>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	40023800 	.word	0x40023800

08000878 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08e      	sub	sp, #56	; 0x38
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a55      	ldr	r2, [pc, #340]	; (80009ec <HAL_ETH_MspInit+0x174>)
 8000896:	4293      	cmp	r3, r2
 8000898:	f040 80a4 	bne.w	80009e4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
 80008a0:	4b53      	ldr	r3, [pc, #332]	; (80009f0 <HAL_ETH_MspInit+0x178>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	4a52      	ldr	r2, [pc, #328]	; (80009f0 <HAL_ETH_MspInit+0x178>)
 80008a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008aa:	6313      	str	r3, [r2, #48]	; 0x30
 80008ac:	4b50      	ldr	r3, [pc, #320]	; (80009f0 <HAL_ETH_MspInit+0x178>)
 80008ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008b4:	623b      	str	r3, [r7, #32]
 80008b6:	6a3b      	ldr	r3, [r7, #32]
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
 80008bc:	4b4c      	ldr	r3, [pc, #304]	; (80009f0 <HAL_ETH_MspInit+0x178>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	4a4b      	ldr	r2, [pc, #300]	; (80009f0 <HAL_ETH_MspInit+0x178>)
 80008c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008c6:	6313      	str	r3, [r2, #48]	; 0x30
 80008c8:	4b49      	ldr	r3, [pc, #292]	; (80009f0 <HAL_ETH_MspInit+0x178>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008d0:	61fb      	str	r3, [r7, #28]
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
 80008d8:	4b45      	ldr	r3, [pc, #276]	; (80009f0 <HAL_ETH_MspInit+0x178>)
 80008da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008dc:	4a44      	ldr	r2, [pc, #272]	; (80009f0 <HAL_ETH_MspInit+0x178>)
 80008de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80008e2:	6313      	str	r3, [r2, #48]	; 0x30
 80008e4:	4b42      	ldr	r3, [pc, #264]	; (80009f0 <HAL_ETH_MspInit+0x178>)
 80008e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	4b3e      	ldr	r3, [pc, #248]	; (80009f0 <HAL_ETH_MspInit+0x178>)
 80008f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f8:	4a3d      	ldr	r2, [pc, #244]	; (80009f0 <HAL_ETH_MspInit+0x178>)
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000900:	4b3b      	ldr	r3, [pc, #236]	; (80009f0 <HAL_ETH_MspInit+0x178>)
 8000902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	4b37      	ldr	r3, [pc, #220]	; (80009f0 <HAL_ETH_MspInit+0x178>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	4a36      	ldr	r2, [pc, #216]	; (80009f0 <HAL_ETH_MspInit+0x178>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	6313      	str	r3, [r2, #48]	; 0x30
 800091c:	4b34      	ldr	r3, [pc, #208]	; (80009f0 <HAL_ETH_MspInit+0x178>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <HAL_ETH_MspInit+0x178>)
 800092e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000930:	4a2f      	ldr	r2, [pc, #188]	; (80009f0 <HAL_ETH_MspInit+0x178>)
 8000932:	f043 0302 	orr.w	r3, r3, #2
 8000936:	6313      	str	r3, [r2, #48]	; 0x30
 8000938:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <HAL_ETH_MspInit+0x178>)
 800093a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093c:	f003 0302 	and.w	r3, r3, #2
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <HAL_ETH_MspInit+0x178>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	4a28      	ldr	r2, [pc, #160]	; (80009f0 <HAL_ETH_MspInit+0x178>)
 800094e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000952:	6313      	str	r3, [r2, #48]	; 0x30
 8000954:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <HAL_ETH_MspInit+0x178>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000960:	2332      	movs	r3, #50	; 0x32
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000970:	230b      	movs	r3, #11
 8000972:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000978:	4619      	mov	r1, r3
 800097a:	481e      	ldr	r0, [pc, #120]	; (80009f4 <HAL_ETH_MspInit+0x17c>)
 800097c:	f000 ff0c 	bl	8001798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000980:	2386      	movs	r3, #134	; 0x86
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000990:	230b      	movs	r3, #11
 8000992:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000998:	4619      	mov	r1, r3
 800099a:	4817      	ldr	r0, [pc, #92]	; (80009f8 <HAL_ETH_MspInit+0x180>)
 800099c:	f000 fefc 	bl	8001798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ae:	2303      	movs	r3, #3
 80009b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b2:	230b      	movs	r3, #11
 80009b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ba:	4619      	mov	r1, r3
 80009bc:	480f      	ldr	r0, [pc, #60]	; (80009fc <HAL_ETH_MspInit+0x184>)
 80009be:	f000 feeb 	bl	8001798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009d4:	230b      	movs	r3, #11
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	4619      	mov	r1, r3
 80009de:	4808      	ldr	r0, [pc, #32]	; (8000a00 <HAL_ETH_MspInit+0x188>)
 80009e0:	f000 feda 	bl	8001798 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80009e4:	bf00      	nop
 80009e6:	3738      	adds	r7, #56	; 0x38
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40028000 	.word	0x40028000
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40020400 	.word	0x40020400
 8000a00:	40021800 	.word	0x40021800

08000a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a19      	ldr	r2, [pc, #100]	; (8000a88 <HAL_UART_MspInit+0x84>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d12c      	bne.n	8000a80 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_UART_MspInit+0x88>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a17      	ldr	r2, [pc, #92]	; (8000a8c <HAL_UART_MspInit+0x88>)
 8000a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_UART_MspInit+0x88>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_UART_MspInit+0x88>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <HAL_UART_MspInit+0x88>)
 8000a4c:	f043 0308 	orr.w	r3, r3, #8
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_UART_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0308 	and.w	r3, r3, #8
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a70:	2307      	movs	r3, #7
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <HAL_UART_MspInit+0x8c>)
 8000a7c:	f000 fe8c 	bl	8001798 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	; 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40004800 	.word	0x40004800
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020c00 	.word	0x40020c00

08000a94 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ab4:	d13f      	bne.n	8000b36 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <HAL_PCD_MspInit+0xac>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a20      	ldr	r2, [pc, #128]	; (8000b40 <HAL_PCD_MspInit+0xac>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <HAL_PCD_MspInit+0xac>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ad2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ae4:	230a      	movs	r3, #10
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	4815      	ldr	r0, [pc, #84]	; (8000b44 <HAL_PCD_MspInit+0xb0>)
 8000af0:	f000 fe52 	bl	8001798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	480e      	ldr	r0, [pc, #56]	; (8000b44 <HAL_PCD_MspInit+0xb0>)
 8000b0a:	f000 fe45 	bl	8001798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_PCD_MspInit+0xac>)
 8000b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <HAL_PCD_MspInit+0xac>)
 8000b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b18:	6353      	str	r3, [r2, #52]	; 0x34
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_PCD_MspInit+0xac>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_PCD_MspInit+0xac>)
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b28:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_PCD_MspInit+0xac>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	; 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <NMI_Handler+0x4>

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr

08000b72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr

08000b8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8e:	f000 f885 	bl	8000c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
	...

08000ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba8:	480d      	ldr	r0, [pc, #52]	; (8000be0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000baa:	490e      	ldr	r1, [pc, #56]	; (8000be4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bac:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bc0:	4c0b      	ldr	r4, [pc, #44]	; (8000bf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bce:	f7ff ffe2 	bl	8000b96 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f002 f92d 	bl	8002e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd6:	f7ff fc71 	bl	80004bc <main>
  bx  lr
 8000bda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000be8:	08002ec8 	.word	0x08002ec8
  ldr r2, =_sbss
 8000bec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bf0:	200004c8 	.word	0x200004c8

08000bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <HAL_Init+0x40>)
 8000c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <HAL_Init+0x40>)
 8000c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_Init+0x40>)
 8000c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f000 f92b 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 f808 	bl	8000c3c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c2c:	f7ff fdfe 	bl	800082c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023c00 	.word	0x40023c00

08000c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x54>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_InitTick+0x58>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f935 	bl	8000eca <HAL_SYSTICK_Config>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00e      	b.n	8000c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b0f      	cmp	r3, #15
 8000c6e:	d80a      	bhi.n	8000c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c70:	2200      	movs	r2, #0
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f000 f90b 	bl	8000e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c7c:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <HAL_InitTick+0x5c>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	e000      	b.n	8000c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000004 	.word	0x20000004

08000c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <HAL_IncTick+0x1c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <HAL_IncTick+0x20>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a03      	ldr	r2, [pc, #12]	; (8000cbc <HAL_IncTick+0x20>)
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	200004c4 	.word	0x200004c4

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b02      	ldr	r3, [pc, #8]	; (8000cd0 <HAL_GetTick+0x10>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	200004c4 	.word	0x200004c4

08000cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cdc:	f7ff fff0 	bl	8000cc0 <HAL_GetTick>
 8000ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cec:	d005      	beq.n	8000cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_Delay+0x44>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cfa:	bf00      	nop
 8000cfc:	f7ff ffe0 	bl	8000cc0 <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d8f7      	bhi.n	8000cfc <HAL_Delay+0x28>
  {
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db0a      	blt.n	8000daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	490c      	ldr	r1, [pc, #48]	; (8000dcc <__NVIC_SetPriority+0x4c>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	440b      	add	r3, r1
 8000da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da8:	e00a      	b.n	8000dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4908      	ldr	r1, [pc, #32]	; (8000dd0 <__NVIC_SetPriority+0x50>)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	3b04      	subs	r3, #4
 8000db8:	0112      	lsls	r2, r2, #4
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	761a      	strb	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f1c3 0307 	rsb	r3, r3, #7
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	bf28      	it	cs
 8000df2:	2304      	movcs	r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d902      	bls.n	8000e04 <NVIC_EncodePriority+0x30>
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3b03      	subs	r3, #3
 8000e02:	e000      	b.n	8000e06 <NVIC_EncodePriority+0x32>
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43da      	mvns	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	401a      	ands	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43d9      	mvns	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	4313      	orrs	r3, r2
         );
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3724      	adds	r7, #36	; 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f7ff ff90 	bl	8000d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff49 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff5e 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff90 	bl	8000dd4 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5f 	bl	8000d80 <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffb0 	bl	8000e38 <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000ef4:	4ba3      	ldr	r3, [pc, #652]	; (8001184 <HAL_ETH_Init+0x2a0>)
 8000ef6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000efc:	2300      	movs	r3, #0
 8000efe:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e173      	b.n	80011f2 <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d106      	bne.n	8000f24 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff fcaa 	bl	8000878 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	4b97      	ldr	r3, [pc, #604]	; (8001188 <HAL_ETH_Init+0x2a4>)
 8000f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2c:	4a96      	ldr	r2, [pc, #600]	; (8001188 <HAL_ETH_Init+0x2a4>)
 8000f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f32:	6453      	str	r3, [r2, #68]	; 0x44
 8000f34:	4b94      	ldr	r3, [pc, #592]	; (8001188 <HAL_ETH_Init+0x2a4>)
 8000f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000f40:	4b92      	ldr	r3, [pc, #584]	; (800118c <HAL_ETH_Init+0x2a8>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	4a91      	ldr	r2, [pc, #580]	; (800118c <HAL_ETH_Init+0x2a8>)
 8000f46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f4a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000f4c:	4b8f      	ldr	r3, [pc, #572]	; (800118c <HAL_ETH_Init+0x2a8>)
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	498d      	ldr	r1, [pc, #564]	; (800118c <HAL_ETH_Init+0x2a8>)
 8000f56:	4313      	orrs	r3, r2
 8000f58:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f042 0201 	orr.w	r2, r2, #1
 8000f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f70:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f72:	f7ff fea5 	bl	8000cc0 <HAL_GetTick>
 8000f76:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000f78:	e011      	b.n	8000f9e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8000f7a:	f7ff fea1 	bl	8000cc0 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f88:	d909      	bls.n	8000f9e <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e129      	b.n	80011f2 <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1e4      	bne.n	8000f7a <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f023 031c 	bic.w	r3, r3, #28
 8000fbe:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000fc0:	f001 fadc 	bl	800257c <HAL_RCC_GetHCLKFreq>
 8000fc4:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	4a71      	ldr	r2, [pc, #452]	; (8001190 <HAL_ETH_Init+0x2ac>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d908      	bls.n	8000fe0 <HAL_ETH_Init+0xfc>
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	4a70      	ldr	r2, [pc, #448]	; (8001194 <HAL_ETH_Init+0x2b0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d804      	bhi.n	8000fe0 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	61fb      	str	r3, [r7, #28]
 8000fde:	e01a      	b.n	8001016 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	4a6c      	ldr	r2, [pc, #432]	; (8001194 <HAL_ETH_Init+0x2b0>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d908      	bls.n	8000ffa <HAL_ETH_Init+0x116>
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	4a66      	ldr	r2, [pc, #408]	; (8001184 <HAL_ETH_Init+0x2a0>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d204      	bcs.n	8000ffa <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f043 030c 	orr.w	r3, r3, #12
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	e00d      	b.n	8001016 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	4a61      	ldr	r2, [pc, #388]	; (8001184 <HAL_ETH_Init+0x2a0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d303      	bcc.n	800100a <HAL_ETH_Init+0x126>
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	4a64      	ldr	r2, [pc, #400]	; (8001198 <HAL_ETH_Init+0x2b4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d904      	bls.n	8001014 <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	61fb      	str	r3, [r7, #28]
 8001012:	e000      	b.n	8001016 <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001014:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	69fa      	ldr	r2, [r7, #28]
 800101c:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800101e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001022:	2100      	movs	r1, #0
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f951 	bl	80012cc <HAL_ETH_WritePHYRegister>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d00b      	beq.n	8001048 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001034:	6939      	ldr	r1, [r7, #16]
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f9ae 	bl	8001398 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2201      	movs	r2, #1
 8001040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e0d4      	b.n	80011f2 <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001048:	20ff      	movs	r0, #255	; 0xff
 800104a:	f7ff fe43 	bl	8000cd4 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 80a2 	beq.w	800119c <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001058:	f7ff fe32 	bl	8000cc0 <HAL_GetTick>
 800105c:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	461a      	mov	r2, r3
 8001064:	2101      	movs	r1, #1
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f8c8 	bl	80011fc <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 800106c:	f7ff fe28 	bl	8000cc0 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	f241 3288 	movw	r2, #5000	; 0x1388
 800107a:	4293      	cmp	r3, r2
 800107c:	d90f      	bls.n	800109e <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001082:	6939      	ldr	r1, [r7, #16]
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f987 	bl	8001398 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e0a9      	b.n	80011f2 <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0da      	beq.n	800105e <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80010a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ac:	2100      	movs	r1, #0
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 f90c 	bl	80012cc <HAL_ETH_WritePHYRegister>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00b      	beq.n	80010d2 <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80010be:	6939      	ldr	r1, [r7, #16]
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 f969 	bl	8001398 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e08f      	b.n	80011f2 <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 80010d2:	f7ff fdf5 	bl	8000cc0 <HAL_GetTick>
 80010d6:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	461a      	mov	r2, r3
 80010de:	2101      	movs	r1, #1
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f88b 	bl	80011fc <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80010e6:	f7ff fdeb 	bl	8000cc0 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d90f      	bls.n	8001118 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80010fc:	6939      	ldr	r1, [r7, #16]
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f94a 	bl	8001398 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2201      	movs	r2, #1
 8001108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e06c      	b.n	80011f2 <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0320 	and.w	r3, r3, #32
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0da      	beq.n	80010d8 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	461a      	mov	r2, r3
 8001128:	2110      	movs	r1, #16
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f866 	bl	80011fc <HAL_ETH_ReadPHYRegister>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00b      	beq.n	800114e <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800113a:	6939      	ldr	r1, [r7, #16]
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 f92b 	bl	8001398 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e051      	b.n	80011f2 <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	d004      	beq.n	8001162 <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	e002      	b.n	8001168 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	e032      	b.n	80011e0 <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	e02d      	b.n	80011e0 <HAL_ETH_Init+0x2fc>
 8001184:	03938700 	.word	0x03938700
 8001188:	40023800 	.word	0x40023800
 800118c:	40013800 	.word	0x40013800
 8001190:	01312cff 	.word	0x01312cff
 8001194:	02160ebf 	.word	0x02160ebf
 8001198:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	08db      	lsrs	r3, r3, #3
 80011a2:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	085b      	lsrs	r3, r3, #1
 80011aa:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	2100      	movs	r1, #0
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f889 	bl	80012cc <HAL_ETH_WritePHYRegister>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00b      	beq.n	80011d8 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80011c4:	6939      	ldr	r1, [r7, #16]
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f8e6 	bl	8001398 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e00c      	b.n	80011f2 <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80011d8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80011dc:	f7ff fd7a 	bl	8000cd4 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80011e0:	6939      	ldr	r1, [r7, #16]
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 f8d8 	bl	8001398 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop

080011fc <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	460b      	mov	r3, r1
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b82      	cmp	r3, #130	; 0x82
 800121c:	d101      	bne.n	8001222 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800121e:	2302      	movs	r3, #2
 8001220:	e050      	b.n	80012c4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2282      	movs	r2, #130	; 0x82
 8001226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f003 031c 	and.w	r3, r3, #28
 8001238:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	8a1b      	ldrh	r3, [r3, #16]
 800123e:	02db      	lsls	r3, r3, #11
 8001240:	b29b      	uxth	r3, r3
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	4313      	orrs	r3, r2
 8001246:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001248:	897b      	ldrh	r3, [r7, #10]
 800124a:	019b      	lsls	r3, r3, #6
 800124c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	4313      	orrs	r3, r2
 8001254:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f023 0302 	bic.w	r3, r3, #2
 800125c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800126e:	f7ff fd27 	bl	8000cc0 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001274:	e015      	b.n	80012a2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001276:	f7ff fd23 	bl	8000cc0 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001284:	d309      	bcc.n	800129a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2201      	movs	r2, #1
 800128a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e014      	b.n	80012c4 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1e4      	bne.n	8001276 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2201      	movs	r2, #1
 80012be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	460b      	mov	r3, r1
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b42      	cmp	r3, #66	; 0x42
 80012ec:	d101      	bne.n	80012f2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80012ee:	2302      	movs	r3, #2
 80012f0:	e04e      	b.n	8001390 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2242      	movs	r2, #66	; 0x42
 80012f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f003 031c 	and.w	r3, r3, #28
 8001308:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	8a1b      	ldrh	r3, [r3, #16]
 800130e:	02db      	lsls	r3, r3, #11
 8001310:	b29b      	uxth	r3, r3
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	4313      	orrs	r3, r2
 8001316:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001318:	897b      	ldrh	r3, [r7, #10]
 800131a:	019b      	lsls	r3, r3, #6
 800131c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	4313      	orrs	r3, r2
 8001324:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	b29a      	uxth	r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001348:	f7ff fcba 	bl	8000cc0 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800134e:	e015      	b.n	800137c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001350:	f7ff fcb6 	bl	8000cc0 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800135e:	d309      	bcc.n	8001374 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e00d      	b.n	8001390 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1e4      	bne.n	8001350 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0b0      	sub	sp, #192	; 0xc0
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d007      	beq.n	80013be <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013b4:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013bc:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d103      	bne.n	80013e6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80013de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e2:	663b      	str	r3, [r7, #96]	; 0x60
 80013e4:	e001      	b.n	80013ea <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80013ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ee:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80013f4:	2300      	movs	r3, #0
 80013f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001404:	2340      	movs	r3, #64	; 0x40
 8001406:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001426:	2300      	movs	r3, #0
 8001428:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800146c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001470:	4bac      	ldr	r3, [pc, #688]	; (8001724 <ETH_MACDMAConfig+0x38c>)
 8001472:	4013      	ands	r3, r2
 8001474:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001478:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 800147a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 800147c:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 800147e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8001480:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8001482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8001484:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 800148a:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 800148c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 800148e:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8001490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 8001492:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8001498:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 800149a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 800149c:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 800149e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 80014a0:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 80014a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 80014a4:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 80014a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 80014a8:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 80014aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 80014ac:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80014ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014b2:	4313      	orrs	r3, r2
 80014b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014c0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014cc:	2001      	movs	r0, #1
 80014ce:	f7ff fc01 	bl	8000cd4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014da:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80014dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80014de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80014e0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80014e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80014e4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 80014e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80014ea:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80014ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 80014f0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80014f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80014f6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80014f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80014fc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001500:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001508:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 800150a:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001516:	2001      	movs	r0, #1
 8001518:	f7ff fbdc 	bl	8000cd4 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001524:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800152e:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001538:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001544:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001548:	f64f 7341 	movw	r3, #65345	; 0xff41
 800154c:	4013      	ands	r3, r2
 800154e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001552:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001556:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001558:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800155c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800155e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001562:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8001564:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001568:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800156a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 800156e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8001570:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001574:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001576:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800157a:	4313      	orrs	r3, r2
 800157c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001588:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001594:	2001      	movs	r0, #1
 8001596:	f7ff fb9d 	bl	8000cd4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015a2:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80015a4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 80015a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff fb88 	bl	8000cd4 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015cc:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80015d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015d6:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 80015dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015e0:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80015f2:	2304      	movs	r3, #4
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80015f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80015fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001600:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001606:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800160c:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8001612:	2300      	movs	r3, #0
 8001614:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001616:	2300      	movs	r3, #0
 8001618:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001622:	3318      	adds	r3, #24
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800162a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800162e:	4b3e      	ldr	r3, [pc, #248]	; (8001728 <ETH_MACDMAConfig+0x390>)
 8001630:	4013      	ands	r3, r2
 8001632:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001636:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 8001638:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800163a:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 800163c:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 800163e:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8001640:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8001642:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8001644:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8001646:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8001648:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 800164a:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 800164c:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 800164e:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8001652:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8001654:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 8001656:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001658:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800165c:	4313      	orrs	r3, r2
 800165e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166a:	3318      	adds	r3, #24
 800166c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001670:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800167a:	3318      	adds	r3, #24
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001682:	2001      	movs	r0, #1
 8001684:	f7ff fb26 	bl	8000cd4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001690:	3318      	adds	r3, #24
 8001692:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001696:	601a      	str	r2, [r3, #0]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 800169a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 800169c:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800169e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 80016a0:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 80016a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80016a4:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 80016a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 80016a8:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 80016aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016ac:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 80016ae:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 80016b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 80016b2:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c0:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f7ff faff 	bl	8000cd4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016e2:	601a      	str	r2, [r3, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d10f      	bne.n	800170c <ETH_MACDMAConfig+0x374>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f4:	331c      	adds	r3, #28
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001708:	331c      	adds	r3, #28
 800170a:	601a      	str	r2, [r3, #0]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	461a      	mov	r2, r3
 8001712:	2100      	movs	r1, #0
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f809 	bl	800172c <ETH_MACAddressConfig>
}
 800171a:	bf00      	nop
 800171c:	37c0      	adds	r7, #192	; 0xc0
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	ff20810f 	.word	0xff20810f
 8001728:	f8de3f23 	.word	0xf8de3f23

0800172c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800172c:	b480      	push	{r7}
 800172e:	b087      	sub	sp, #28
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3305      	adds	r3, #5
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	3204      	adds	r2, #4
 8001744:	7812      	ldrb	r2, [r2, #0]
 8001746:	4313      	orrs	r3, r2
 8001748:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	4b10      	ldr	r3, [pc, #64]	; (8001790 <ETH_MACAddressConfig+0x64>)
 800174e:	4413      	add	r3, r2
 8001750:	461a      	mov	r2, r3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3303      	adds	r3, #3
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	061a      	lsls	r2, r3, #24
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3302      	adds	r3, #2
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	041b      	lsls	r3, r3, #16
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3301      	adds	r3, #1
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	4313      	orrs	r3, r2
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	7812      	ldrb	r2, [r2, #0]
 8001776:	4313      	orrs	r3, r2
 8001778:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <ETH_MACAddressConfig+0x68>)
 800177e:	4413      	add	r3, r2
 8001780:	461a      	mov	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	6013      	str	r3, [r2, #0]
}
 8001786:	bf00      	nop
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	40028040 	.word	0x40028040
 8001794:	40028044 	.word	0x40028044

08001798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a6:	e16f      	b.n	8001a88 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2101      	movs	r1, #1
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	4013      	ands	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8161 	beq.w	8001a82 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d005      	beq.n	80017d8 <HAL_GPIO_Init+0x40>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d130      	bne.n	800183a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800180e:	2201      	movs	r2, #1
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	f003 0201 	and.w	r2, r3, #1
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b03      	cmp	r3, #3
 8001844:	d017      	beq.n	8001876 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d123      	bne.n	80018ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	08da      	lsrs	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3208      	adds	r2, #8
 800188a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	220f      	movs	r2, #15
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	691a      	ldr	r2, [r3, #16]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	08da      	lsrs	r2, r3, #3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3208      	adds	r2, #8
 80018c4:	6939      	ldr	r1, [r7, #16]
 80018c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0203 	and.w	r2, r3, #3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 80bb 	beq.w	8001a82 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	4b64      	ldr	r3, [pc, #400]	; (8001aa4 <HAL_GPIO_Init+0x30c>)
 8001912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001914:	4a63      	ldr	r2, [pc, #396]	; (8001aa4 <HAL_GPIO_Init+0x30c>)
 8001916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800191a:	6453      	str	r3, [r2, #68]	; 0x44
 800191c:	4b61      	ldr	r3, [pc, #388]	; (8001aa4 <HAL_GPIO_Init+0x30c>)
 800191e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001928:	4a5f      	ldr	r2, [pc, #380]	; (8001aa8 <HAL_GPIO_Init+0x310>)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	089b      	lsrs	r3, r3, #2
 800192e:	3302      	adds	r3, #2
 8001930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	220f      	movs	r2, #15
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a57      	ldr	r2, [pc, #348]	; (8001aac <HAL_GPIO_Init+0x314>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d031      	beq.n	80019b8 <HAL_GPIO_Init+0x220>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a56      	ldr	r2, [pc, #344]	; (8001ab0 <HAL_GPIO_Init+0x318>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d02b      	beq.n	80019b4 <HAL_GPIO_Init+0x21c>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a55      	ldr	r2, [pc, #340]	; (8001ab4 <HAL_GPIO_Init+0x31c>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d025      	beq.n	80019b0 <HAL_GPIO_Init+0x218>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a54      	ldr	r2, [pc, #336]	; (8001ab8 <HAL_GPIO_Init+0x320>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d01f      	beq.n	80019ac <HAL_GPIO_Init+0x214>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a53      	ldr	r2, [pc, #332]	; (8001abc <HAL_GPIO_Init+0x324>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d019      	beq.n	80019a8 <HAL_GPIO_Init+0x210>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a52      	ldr	r2, [pc, #328]	; (8001ac0 <HAL_GPIO_Init+0x328>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d013      	beq.n	80019a4 <HAL_GPIO_Init+0x20c>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a51      	ldr	r2, [pc, #324]	; (8001ac4 <HAL_GPIO_Init+0x32c>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d00d      	beq.n	80019a0 <HAL_GPIO_Init+0x208>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a50      	ldr	r2, [pc, #320]	; (8001ac8 <HAL_GPIO_Init+0x330>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d007      	beq.n	800199c <HAL_GPIO_Init+0x204>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a4f      	ldr	r2, [pc, #316]	; (8001acc <HAL_GPIO_Init+0x334>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d101      	bne.n	8001998 <HAL_GPIO_Init+0x200>
 8001994:	2308      	movs	r3, #8
 8001996:	e010      	b.n	80019ba <HAL_GPIO_Init+0x222>
 8001998:	2309      	movs	r3, #9
 800199a:	e00e      	b.n	80019ba <HAL_GPIO_Init+0x222>
 800199c:	2307      	movs	r3, #7
 800199e:	e00c      	b.n	80019ba <HAL_GPIO_Init+0x222>
 80019a0:	2306      	movs	r3, #6
 80019a2:	e00a      	b.n	80019ba <HAL_GPIO_Init+0x222>
 80019a4:	2305      	movs	r3, #5
 80019a6:	e008      	b.n	80019ba <HAL_GPIO_Init+0x222>
 80019a8:	2304      	movs	r3, #4
 80019aa:	e006      	b.n	80019ba <HAL_GPIO_Init+0x222>
 80019ac:	2303      	movs	r3, #3
 80019ae:	e004      	b.n	80019ba <HAL_GPIO_Init+0x222>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e002      	b.n	80019ba <HAL_GPIO_Init+0x222>
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <HAL_GPIO_Init+0x222>
 80019b8:	2300      	movs	r3, #0
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	f002 0203 	and.w	r2, r2, #3
 80019c0:	0092      	lsls	r2, r2, #2
 80019c2:	4093      	lsls	r3, r2
 80019c4:	461a      	mov	r2, r3
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019cc:	4936      	ldr	r1, [pc, #216]	; (8001aa8 <HAL_GPIO_Init+0x310>)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	3302      	adds	r3, #2
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019da:	4b3d      	ldr	r3, [pc, #244]	; (8001ad0 <HAL_GPIO_Init+0x338>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019fe:	4a34      	ldr	r2, [pc, #208]	; (8001ad0 <HAL_GPIO_Init+0x338>)
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a04:	4b32      	ldr	r3, [pc, #200]	; (8001ad0 <HAL_GPIO_Init+0x338>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a28:	4a29      	ldr	r2, [pc, #164]	; (8001ad0 <HAL_GPIO_Init+0x338>)
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a2e:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <HAL_GPIO_Init+0x338>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a52:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <HAL_GPIO_Init+0x338>)
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a58:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <HAL_GPIO_Init+0x338>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a7c:	4a14      	ldr	r2, [pc, #80]	; (8001ad0 <HAL_GPIO_Init+0x338>)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3301      	adds	r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f47f ae88 	bne.w	80017a8 <HAL_GPIO_Init+0x10>
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	371c      	adds	r7, #28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40013800 	.word	0x40013800
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	40020400 	.word	0x40020400
 8001ab4:	40020800 	.word	0x40020800
 8001ab8:	40020c00 	.word	0x40020c00
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40021400 	.word	0x40021400
 8001ac4:	40021800 	.word	0x40021800
 8001ac8:	40021c00 	.word	0x40021c00
 8001acc:	40022000 	.word	0x40022000
 8001ad0:	40013c00 	.word	0x40013c00

08001ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae4:	787b      	ldrb	r3, [r7, #1]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aea:	887a      	ldrh	r2, [r7, #2]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001af0:	e003      	b.n	8001afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001af2:	887b      	ldrh	r3, [r7, #2]
 8001af4:	041a      	lsls	r2, r3, #16
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	619a      	str	r2, [r3, #24]
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b06:	b08f      	sub	sp, #60	; 0x3c
 8001b08:	af0a      	add	r7, sp, #40	; 0x28
 8001b0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e10f      	b.n	8001d36 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d106      	bne.n	8001b36 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7fe ffaf 	bl	8000a94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2203      	movs	r2, #3
 8001b3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d102      	bne.n	8001b50 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 feee 	bl	8002936 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	687e      	ldr	r6, [r7, #4]
 8001b62:	466d      	mov	r5, sp
 8001b64:	f106 0410 	add.w	r4, r6, #16
 8001b68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b74:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b78:	1d33      	adds	r3, r6, #4
 8001b7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b7c:	6838      	ldr	r0, [r7, #0]
 8001b7e:	f000 fe83 	bl	8002888 <USB_CoreInit>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0d0      	b.n	8001d36 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 fedb 	bl	8002956 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	e04a      	b.n	8001c3c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ba6:	7bfa      	ldrb	r2, [r7, #15]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	1a9b      	subs	r3, r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	333d      	adds	r3, #61	; 0x3d
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bba:	7bfa      	ldrb	r2, [r7, #15]
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	1a9b      	subs	r3, r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	333c      	adds	r3, #60	; 0x3c
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	b298      	uxth	r0, r3
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	1a9b      	subs	r3, r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	3342      	adds	r3, #66	; 0x42
 8001be2:	4602      	mov	r2, r0
 8001be4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001be6:	7bfa      	ldrb	r2, [r7, #15]
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	1a9b      	subs	r3, r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	333f      	adds	r3, #63	; 0x3f
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bfa:	7bfa      	ldrb	r2, [r7, #15]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	1a9b      	subs	r3, r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	3344      	adds	r3, #68	; 0x44
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	3348      	adds	r3, #72	; 0x48
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c22:	7bfa      	ldrb	r2, [r7, #15]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	1a9b      	subs	r3, r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	440b      	add	r3, r1
 8001c30:	3350      	adds	r3, #80	; 0x50
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d3af      	bcc.n	8001ba6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	73fb      	strb	r3, [r7, #15]
 8001c4a:	e044      	b.n	8001cd6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c4c:	7bfa      	ldrb	r2, [r7, #15]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	1a9b      	subs	r3, r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c62:	7bfa      	ldrb	r2, [r7, #15]
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	440b      	add	r3, r1
 8001c70:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001c74:	7bfa      	ldrb	r2, [r7, #15]
 8001c76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c78:	7bfa      	ldrb	r2, [r7, #15]
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	1a9b      	subs	r3, r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	1a9b      	subs	r3, r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ca4:	7bfa      	ldrb	r2, [r7, #15]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cba:	7bfa      	ldrb	r2, [r7, #15]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	1a9b      	subs	r3, r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	73fb      	strb	r3, [r7, #15]
 8001cd6:	7bfa      	ldrb	r2, [r7, #15]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d3b5      	bcc.n	8001c4c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	603b      	str	r3, [r7, #0]
 8001ce6:	687e      	ldr	r6, [r7, #4]
 8001ce8:	466d      	mov	r5, sp
 8001cea:	f106 0410 	add.w	r4, r6, #16
 8001cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cfe:	1d33      	adds	r3, r6, #4
 8001d00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d02:	6838      	ldr	r0, [r7, #0]
 8001d04:	f000 fe74 	bl	80029f0 <USB_DevInit>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2202      	movs	r2, #2
 8001d12:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00d      	b.n	8001d36 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f001 f81e 	bl	8002d70 <USB_DevDisconnect>

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	; 0x28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e237      	b.n	80021c2 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d050      	beq.n	8001e00 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d5e:	4ba3      	ldr	r3, [pc, #652]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d00c      	beq.n	8001d84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d6a:	4ba0      	ldr	r3, [pc, #640]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d112      	bne.n	8001d9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d76:	4b9d      	ldr	r3, [pc, #628]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d82:	d10b      	bne.n	8001d9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d84:	4b99      	ldr	r3, [pc, #612]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d036      	beq.n	8001dfe <HAL_RCC_OscConfig+0xbe>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d132      	bne.n	8001dfe <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e212      	b.n	80021c2 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	4b93      	ldr	r3, [pc, #588]	; (8001ff0 <HAL_RCC_OscConfig+0x2b0>)
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d013      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dae:	f7fe ff87 	bl	8000cc0 <HAL_GetTick>
 8001db2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db6:	f7fe ff83 	bl	8000cc0 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b64      	cmp	r3, #100	; 0x64
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e1fc      	b.n	80021c2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc8:	4b88      	ldr	r3, [pc, #544]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x76>
 8001dd4:	e014      	b.n	8001e00 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7fe ff73 	bl	8000cc0 <HAL_GetTick>
 8001dda:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dde:	f7fe ff6f 	bl	8000cc0 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b64      	cmp	r3, #100	; 0x64
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e1e8      	b.n	80021c2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df0:	4b7e      	ldr	r3, [pc, #504]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1f0      	bne.n	8001dde <HAL_RCC_OscConfig+0x9e>
 8001dfc:	e000      	b.n	8001e00 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d077      	beq.n	8001efc <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e0c:	4b77      	ldr	r3, [pc, #476]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 030c 	and.w	r3, r3, #12
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00b      	beq.n	8001e30 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e18:	4b74      	ldr	r3, [pc, #464]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d126      	bne.n	8001e72 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e24:	4b71      	ldr	r3, [pc, #452]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d120      	bne.n	8001e72 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e30:	4b6e      	ldr	r3, [pc, #440]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_OscConfig+0x108>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e1bc      	b.n	80021c2 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e48:	4b68      	ldr	r3, [pc, #416]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	21f8      	movs	r1, #248	; 0xf8
 8001e56:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	69b9      	ldr	r1, [r7, #24]
 8001e5a:	fa91 f1a1 	rbit	r1, r1
 8001e5e:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e60:	6979      	ldr	r1, [r7, #20]
 8001e62:	fab1 f181 	clz	r1, r1
 8001e66:	b2c9      	uxtb	r1, r1
 8001e68:	408b      	lsls	r3, r1
 8001e6a:	4960      	ldr	r1, [pc, #384]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e70:	e044      	b.n	8001efc <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d02a      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e7a:	4b5e      	ldr	r3, [pc, #376]	; (8001ff4 <HAL_RCC_OscConfig+0x2b4>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7fe ff1e 	bl	8000cc0 <HAL_GetTick>
 8001e84:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e88:	f7fe ff1a 	bl	8000cc0 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e193      	b.n	80021c2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9a:	4b54      	ldr	r3, [pc, #336]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea6:	4b51      	ldr	r3, [pc, #324]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	21f8      	movs	r1, #248	; 0xf8
 8001eb4:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	6939      	ldr	r1, [r7, #16]
 8001eb8:	fa91 f1a1 	rbit	r1, r1
 8001ebc:	60f9      	str	r1, [r7, #12]
  return result;
 8001ebe:	68f9      	ldr	r1, [r7, #12]
 8001ec0:	fab1 f181 	clz	r1, r1
 8001ec4:	b2c9      	uxtb	r1, r1
 8001ec6:	408b      	lsls	r3, r1
 8001ec8:	4948      	ldr	r1, [pc, #288]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]
 8001ece:	e015      	b.n	8001efc <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed0:	4b48      	ldr	r3, [pc, #288]	; (8001ff4 <HAL_RCC_OscConfig+0x2b4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed6:	f7fe fef3 	bl	8000cc0 <HAL_GetTick>
 8001eda:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ede:	f7fe feef 	bl	8000cc0 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e168      	b.n	80021c2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef0:	4b3e      	ldr	r3, [pc, #248]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f0      	bne.n	8001ede <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d030      	beq.n	8001f6a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d016      	beq.n	8001f3e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f10:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <HAL_RCC_OscConfig+0x2b8>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f16:	f7fe fed3 	bl	8000cc0 <HAL_GetTick>
 8001f1a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f1e:	f7fe fecf 	bl	8000cc0 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e148      	b.n	80021c2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f30:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1de>
 8001f3c:	e015      	b.n	8001f6a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f3e:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <HAL_RCC_OscConfig+0x2b8>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f44:	f7fe febc 	bl	8000cc0 <HAL_GetTick>
 8001f48:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f4c:	f7fe feb8 	bl	8000cc0 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e131      	b.n	80021c2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f5e:	4b23      	ldr	r3, [pc, #140]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8088 	beq.w	8002088 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d110      	bne.n	8001fac <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	4b17      	ldr	r3, [pc, #92]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	4a16      	ldr	r2, [pc, #88]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9a:	4b14      	ldr	r3, [pc, #80]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <HAL_RCC_OscConfig+0x2bc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <HAL_RCC_OscConfig+0x2bc>)
 8001fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb6:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <HAL_RCC_OscConfig+0x2bc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d123      	bne.n	800200c <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <HAL_RCC_OscConfig+0x2bc>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a0c      	ldr	r2, [pc, #48]	; (8001ffc <HAL_RCC_OscConfig+0x2bc>)
 8001fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd0:	f7fe fe76 	bl	8000cc0 <HAL_GetTick>
 8001fd4:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd6:	e013      	b.n	8002000 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd8:	f7fe fe72 	bl	8000cc0 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d90c      	bls.n	8002000 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e0eb      	b.n	80021c2 <HAL_RCC_OscConfig+0x482>
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40023802 	.word	0x40023802
 8001ff4:	42470000 	.word	0x42470000
 8001ff8:	42470e80 	.word	0x42470e80
 8001ffc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002000:	4b72      	ldr	r3, [pc, #456]	; (80021cc <HAL_RCC_OscConfig+0x48c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0e5      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	4b6f      	ldr	r3, [pc, #444]	; (80021d0 <HAL_RCC_OscConfig+0x490>)
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d015      	beq.n	800204a <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201e:	f7fe fe4f 	bl	8000cc0 <HAL_GetTick>
 8002022:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002024:	e00a      	b.n	800203c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7fe fe4b 	bl	8000cc0 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e0c2      	b.n	80021c2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203c:	4b65      	ldr	r3, [pc, #404]	; (80021d4 <HAL_RCC_OscConfig+0x494>)
 800203e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0ee      	beq.n	8002026 <HAL_RCC_OscConfig+0x2e6>
 8002048:	e014      	b.n	8002074 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204a:	f7fe fe39 	bl	8000cc0 <HAL_GetTick>
 800204e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002050:	e00a      	b.n	8002068 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7fe fe35 	bl	8000cc0 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002060:	4293      	cmp	r3, r2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e0ac      	b.n	80021c2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002068:	4b5a      	ldr	r3, [pc, #360]	; (80021d4 <HAL_RCC_OscConfig+0x494>)
 800206a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1ee      	bne.n	8002052 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002078:	2b01      	cmp	r3, #1
 800207a:	d105      	bne.n	8002088 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207c:	4b55      	ldr	r3, [pc, #340]	; (80021d4 <HAL_RCC_OscConfig+0x494>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	4a54      	ldr	r2, [pc, #336]	; (80021d4 <HAL_RCC_OscConfig+0x494>)
 8002082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002086:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 8097 	beq.w	80021c0 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002092:	4b50      	ldr	r3, [pc, #320]	; (80021d4 <HAL_RCC_OscConfig+0x494>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b08      	cmp	r3, #8
 800209c:	d061      	beq.n	8002162 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d146      	bne.n	8002134 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a6:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <HAL_RCC_OscConfig+0x498>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7fe fe08 	bl	8000cc0 <HAL_GetTick>
 80020b0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b4:	f7fe fe04 	bl	8000cc0 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	; 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e07d      	b.n	80021c2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c6:	4b43      	ldr	r3, [pc, #268]	; (80021d4 <HAL_RCC_OscConfig+0x494>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020d2:	4b40      	ldr	r3, [pc, #256]	; (80021d4 <HAL_RCC_OscConfig+0x494>)
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	4b41      	ldr	r3, [pc, #260]	; (80021dc <HAL_RCC_OscConfig+0x49c>)
 80020d8:	4013      	ands	r3, r2
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	69d1      	ldr	r1, [r2, #28]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6a12      	ldr	r2, [r2, #32]
 80020e2:	4311      	orrs	r1, r2
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020e8:	0192      	lsls	r2, r2, #6
 80020ea:	4311      	orrs	r1, r2
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020f0:	0612      	lsls	r2, r2, #24
 80020f2:	4311      	orrs	r1, r2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80020f8:	0852      	lsrs	r2, r2, #1
 80020fa:	3a01      	subs	r2, #1
 80020fc:	0412      	lsls	r2, r2, #16
 80020fe:	430a      	orrs	r2, r1
 8002100:	4934      	ldr	r1, [pc, #208]	; (80021d4 <HAL_RCC_OscConfig+0x494>)
 8002102:	4313      	orrs	r3, r2
 8002104:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002106:	4b34      	ldr	r3, [pc, #208]	; (80021d8 <HAL_RCC_OscConfig+0x498>)
 8002108:	2201      	movs	r2, #1
 800210a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7fe fdd8 	bl	8000cc0 <HAL_GetTick>
 8002110:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002114:	f7fe fdd4 	bl	8000cc0 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e04d      	b.n	80021c2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002126:	4b2b      	ldr	r3, [pc, #172]	; (80021d4 <HAL_RCC_OscConfig+0x494>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0x3d4>
 8002132:	e045      	b.n	80021c0 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002134:	4b28      	ldr	r3, [pc, #160]	; (80021d8 <HAL_RCC_OscConfig+0x498>)
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213a:	f7fe fdc1 	bl	8000cc0 <HAL_GetTick>
 800213e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002142:	f7fe fdbd 	bl	8000cc0 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b64      	cmp	r3, #100	; 0x64
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e036      	b.n	80021c2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002154:	4b1f      	ldr	r3, [pc, #124]	; (80021d4 <HAL_RCC_OscConfig+0x494>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f0      	bne.n	8002142 <HAL_RCC_OscConfig+0x402>
 8002160:	e02e      	b.n	80021c0 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e029      	b.n	80021c2 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800216e:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <HAL_RCC_OscConfig+0x494>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	429a      	cmp	r2, r3
 8002180:	d11c      	bne.n	80021bc <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218c:	429a      	cmp	r2, r3
 800218e:	d115      	bne.n	80021bc <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	099b      	lsrs	r3, r3, #6
 8002194:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800219c:	429a      	cmp	r2, r3
 800219e:	d10d      	bne.n	80021bc <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d106      	bne.n	80021bc <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3728      	adds	r7, #40	; 0x28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40007000 	.word	0x40007000
 80021d0:	40023870 	.word	0x40023870
 80021d4:	40023800 	.word	0x40023800
 80021d8:	42470060 	.word	0x42470060
 80021dc:	f0bc8000 	.word	0xf0bc8000

080021e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0d2      	b.n	800239a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021f4:	4b6b      	ldr	r3, [pc, #428]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d90c      	bls.n	800221c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b68      	ldr	r3, [pc, #416]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b66      	ldr	r3, [pc, #408]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0be      	b.n	800239a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d020      	beq.n	800226a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002234:	4b5c      	ldr	r3, [pc, #368]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4a5b      	ldr	r2, [pc, #364]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 800223a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800223e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800224c:	4b56      	ldr	r3, [pc, #344]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4a55      	ldr	r2, [pc, #340]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002256:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002258:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4950      	ldr	r1, [pc, #320]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d040      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d107      	bne.n	800228e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	4b4a      	ldr	r3, [pc, #296]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d115      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e085      	b.n	800239a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d107      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002296:	4b44      	ldr	r3, [pc, #272]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d109      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e079      	b.n	800239a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a6:	4b40      	ldr	r3, [pc, #256]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e071      	b.n	800239a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b6:	4b3c      	ldr	r3, [pc, #240]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f023 0203 	bic.w	r2, r3, #3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4939      	ldr	r1, [pc, #228]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c8:	f7fe fcfa 	bl	8000cc0 <HAL_GetTick>
 80022cc:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d0:	f7fe fcf6 	bl	8000cc0 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	; 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e059      	b.n	800239a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 020c 	and.w	r2, r3, #12
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d1eb      	bne.n	80022d0 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f8:	4b2a      	ldr	r3, [pc, #168]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d20c      	bcs.n	8002320 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800230e:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e03c      	b.n	800239a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800232c:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	491b      	ldr	r1, [pc, #108]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d009      	beq.n	800235e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800234a:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4913      	ldr	r1, [pc, #76]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800235e:	f000 f82b 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002362:	4601      	mov	r1, r0
 8002364:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800236c:	22f0      	movs	r2, #240	; 0xf0
 800236e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	fa92 f2a2 	rbit	r2, r2
 8002376:	60fa      	str	r2, [r7, #12]
  return result;
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	fab2 f282 	clz	r2, r2
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	40d3      	lsrs	r3, r2
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <HAL_RCC_ClockConfig+0x1cc>)
 8002384:	5cd3      	ldrb	r3, [r2, r3]
 8002386:	fa21 f303 	lsr.w	r3, r1, r3
 800238a:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <HAL_RCC_ClockConfig+0x1d0>)
 800238c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x1d4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fc52 	bl	8000c3c <HAL_InitTick>

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023c00 	.word	0x40023c00
 80023a8:	40023800 	.word	0x40023800
 80023ac:	08002ea0 	.word	0x08002ea0
 80023b0:	20000000 	.word	0x20000000
 80023b4:	20000004 	.word	0x20000004

080023b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	2300      	movs	r3, #0
 80023ca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d0:	4b67      	ldr	r3, [pc, #412]	; (8002570 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d00d      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x40>
 80023dc:	2b08      	cmp	r3, #8
 80023de:	f200 80bd 	bhi.w	800255c <HAL_RCC_GetSysClockFreq+0x1a4>
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0x34>
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d003      	beq.n	80023f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80023ea:	e0b7      	b.n	800255c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023ec:	4b61      	ldr	r3, [pc, #388]	; (8002574 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80023ee:	60bb      	str	r3, [r7, #8]
       break;
 80023f0:	e0b7      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023f2:	4b61      	ldr	r3, [pc, #388]	; (8002578 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80023f4:	60bb      	str	r3, [r7, #8]
      break;
 80023f6:	e0b4      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f8:	4b5d      	ldr	r3, [pc, #372]	; (8002570 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002400:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002402:	4b5b      	ldr	r3, [pc, #364]	; (8002570 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d04d      	beq.n	80024aa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240e:	4b58      	ldr	r3, [pc, #352]	; (8002570 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	099b      	lsrs	r3, r3, #6
 8002414:	461a      	mov	r2, r3
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800241e:	f04f 0100 	mov.w	r1, #0
 8002422:	ea02 0800 	and.w	r8, r2, r0
 8002426:	ea03 0901 	and.w	r9, r3, r1
 800242a:	4640      	mov	r0, r8
 800242c:	4649      	mov	r1, r9
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	f04f 0300 	mov.w	r3, #0
 8002436:	014b      	lsls	r3, r1, #5
 8002438:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800243c:	0142      	lsls	r2, r0, #5
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	ebb0 0008 	subs.w	r0, r0, r8
 8002446:	eb61 0109 	sbc.w	r1, r1, r9
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	018b      	lsls	r3, r1, #6
 8002454:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002458:	0182      	lsls	r2, r0, #6
 800245a:	1a12      	subs	r2, r2, r0
 800245c:	eb63 0301 	sbc.w	r3, r3, r1
 8002460:	f04f 0000 	mov.w	r0, #0
 8002464:	f04f 0100 	mov.w	r1, #0
 8002468:	00d9      	lsls	r1, r3, #3
 800246a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800246e:	00d0      	lsls	r0, r2, #3
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	eb12 0208 	adds.w	r2, r2, r8
 8002478:	eb43 0309 	adc.w	r3, r3, r9
 800247c:	f04f 0000 	mov.w	r0, #0
 8002480:	f04f 0100 	mov.w	r1, #0
 8002484:	0259      	lsls	r1, r3, #9
 8002486:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800248a:	0250      	lsls	r0, r2, #9
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4610      	mov	r0, r2
 8002492:	4619      	mov	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	461a      	mov	r2, r3
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	f7fd fe92 	bl	80001c4 <__aeabi_uldivmod>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4613      	mov	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	e04a      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024aa:	4b31      	ldr	r3, [pc, #196]	; (8002570 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	099b      	lsrs	r3, r3, #6
 80024b0:	461a      	mov	r2, r3
 80024b2:	f04f 0300 	mov.w	r3, #0
 80024b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024ba:	f04f 0100 	mov.w	r1, #0
 80024be:	ea02 0400 	and.w	r4, r2, r0
 80024c2:	ea03 0501 	and.w	r5, r3, r1
 80024c6:	4620      	mov	r0, r4
 80024c8:	4629      	mov	r1, r5
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	014b      	lsls	r3, r1, #5
 80024d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024d8:	0142      	lsls	r2, r0, #5
 80024da:	4610      	mov	r0, r2
 80024dc:	4619      	mov	r1, r3
 80024de:	1b00      	subs	r0, r0, r4
 80024e0:	eb61 0105 	sbc.w	r1, r1, r5
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	f04f 0300 	mov.w	r3, #0
 80024ec:	018b      	lsls	r3, r1, #6
 80024ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024f2:	0182      	lsls	r2, r0, #6
 80024f4:	1a12      	subs	r2, r2, r0
 80024f6:	eb63 0301 	sbc.w	r3, r3, r1
 80024fa:	f04f 0000 	mov.w	r0, #0
 80024fe:	f04f 0100 	mov.w	r1, #0
 8002502:	00d9      	lsls	r1, r3, #3
 8002504:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002508:	00d0      	lsls	r0, r2, #3
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	1912      	adds	r2, r2, r4
 8002510:	eb45 0303 	adc.w	r3, r5, r3
 8002514:	f04f 0000 	mov.w	r0, #0
 8002518:	f04f 0100 	mov.w	r1, #0
 800251c:	0299      	lsls	r1, r3, #10
 800251e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002522:	0290      	lsls	r0, r2, #10
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4610      	mov	r0, r2
 800252a:	4619      	mov	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	461a      	mov	r2, r3
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	f7fd fe46 	bl	80001c4 <__aeabi_uldivmod>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4613      	mov	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	0c1b      	lsrs	r3, r3, #16
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	3301      	adds	r3, #1
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	fbb2 f3f3 	udiv	r3, r2, r3
 8002558:	60bb      	str	r3, [r7, #8]
      break;
 800255a:	e002      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800255e:	60bb      	str	r3, [r7, #8]
      break;
 8002560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002562:	68bb      	ldr	r3, [r7, #8]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800
 8002574:	00f42400 	.word	0x00f42400
 8002578:	007a1200 	.word	0x007a1200

0800257c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002580:	4b02      	ldr	r3, [pc, #8]	; (800258c <HAL_RCC_GetHCLKFreq+0x10>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	20000000 	.word	0x20000000

08002590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002596:	f7ff fff1 	bl	800257c <HAL_RCC_GetHCLKFreq>
 800259a:	4601      	mov	r1, r0
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80025a4:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80025a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	fa92 f2a2 	rbit	r2, r2
 80025b0:	603a      	str	r2, [r7, #0]
  return result;
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	fab2 f282 	clz	r2, r2
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	40d3      	lsrs	r3, r2
 80025bc:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80025be:	5cd3      	ldrb	r3, [r2, r3]
 80025c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40023800 	.word	0x40023800
 80025d0:	08002eb0 	.word	0x08002eb0

080025d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80025da:	f7ff ffcf 	bl	800257c <HAL_RCC_GetHCLKFreq>
 80025de:	4601      	mov	r1, r0
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80025e8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80025ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	fa92 f2a2 	rbit	r2, r2
 80025f4:	603a      	str	r2, [r7, #0]
  return result;
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	fab2 f282 	clz	r2, r2
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	40d3      	lsrs	r3, r2
 8002600:	4a04      	ldr	r2, [pc, #16]	; (8002614 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002602:	5cd3      	ldrb	r3, [r2, r3]
 8002604:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40023800 	.word	0x40023800
 8002614:	08002eb0 	.word	0x08002eb0

08002618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e03f      	b.n	80026aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d106      	bne.n	8002644 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe f9e0 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2224      	movs	r2, #36	; 0x24
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800265a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f829 	bl	80026b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695a      	ldr	r2, [r3, #20]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002680:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002690:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80026f4:	f023 030c 	bic.w	r3, r3, #12
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	430b      	orrs	r3, r1
 8002700:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699a      	ldr	r2, [r3, #24]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a57      	ldr	r2, [pc, #348]	; (800287c <UART_SetConfig+0x1c8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d004      	beq.n	800272c <UART_SetConfig+0x78>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a56      	ldr	r2, [pc, #344]	; (8002880 <UART_SetConfig+0x1cc>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d103      	bne.n	8002734 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800272c:	f7ff ff52 	bl	80025d4 <HAL_RCC_GetPCLK2Freq>
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	e002      	b.n	800273a <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002734:	f7ff ff2c 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 8002738:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002742:	d14c      	bne.n	80027de <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	009a      	lsls	r2, r3, #2
 800274e:	441a      	add	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	fbb2 f3f3 	udiv	r3, r2, r3
 800275a:	4a4a      	ldr	r2, [pc, #296]	; (8002884 <UART_SetConfig+0x1d0>)
 800275c:	fba2 2303 	umull	r2, r3, r2, r3
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	0119      	lsls	r1, r3, #4
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	009a      	lsls	r2, r3, #2
 800276e:	441a      	add	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	fbb2 f2f3 	udiv	r2, r2, r3
 800277a:	4b42      	ldr	r3, [pc, #264]	; (8002884 <UART_SetConfig+0x1d0>)
 800277c:	fba3 0302 	umull	r0, r3, r3, r2
 8002780:	095b      	lsrs	r3, r3, #5
 8002782:	2064      	movs	r0, #100	; 0x64
 8002784:	fb00 f303 	mul.w	r3, r0, r3
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	3332      	adds	r3, #50	; 0x32
 800278e:	4a3d      	ldr	r2, [pc, #244]	; (8002884 <UART_SetConfig+0x1d0>)
 8002790:	fba2 2303 	umull	r2, r3, r2, r3
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800279c:	4419      	add	r1, r3
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	009a      	lsls	r2, r3, #2
 80027a8:	441a      	add	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027b4:	4b33      	ldr	r3, [pc, #204]	; (8002884 <UART_SetConfig+0x1d0>)
 80027b6:	fba3 0302 	umull	r0, r3, r3, r2
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	2064      	movs	r0, #100	; 0x64
 80027be:	fb00 f303 	mul.w	r3, r0, r3
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	3332      	adds	r3, #50	; 0x32
 80027c8:	4a2e      	ldr	r2, [pc, #184]	; (8002884 <UART_SetConfig+0x1d0>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	f003 0207 	and.w	r2, r3, #7
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	440a      	add	r2, r1
 80027da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027dc:	e04a      	b.n	8002874 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	009a      	lsls	r2, r3, #2
 80027e8:	441a      	add	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f4:	4a23      	ldr	r2, [pc, #140]	; (8002884 <UART_SetConfig+0x1d0>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	0119      	lsls	r1, r3, #4
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	009a      	lsls	r2, r3, #2
 8002808:	441a      	add	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	fbb2 f2f3 	udiv	r2, r2, r3
 8002814:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <UART_SetConfig+0x1d0>)
 8002816:	fba3 0302 	umull	r0, r3, r3, r2
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2064      	movs	r0, #100	; 0x64
 800281e:	fb00 f303 	mul.w	r3, r0, r3
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	3332      	adds	r3, #50	; 0x32
 8002828:	4a16      	ldr	r2, [pc, #88]	; (8002884 <UART_SetConfig+0x1d0>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002834:	4419      	add	r1, r3
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	009a      	lsls	r2, r3, #2
 8002840:	441a      	add	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	fbb2 f2f3 	udiv	r2, r2, r3
 800284c:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <UART_SetConfig+0x1d0>)
 800284e:	fba3 0302 	umull	r0, r3, r3, r2
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	2064      	movs	r0, #100	; 0x64
 8002856:	fb00 f303 	mul.w	r3, r0, r3
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	3332      	adds	r3, #50	; 0x32
 8002860:	4a08      	ldr	r2, [pc, #32]	; (8002884 <UART_SetConfig+0x1d0>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	f003 020f 	and.w	r2, r3, #15
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	440a      	add	r2, r1
 8002872:	609a      	str	r2, [r3, #8]
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40011000 	.word	0x40011000
 8002880:	40011400 	.word	0x40011400
 8002884:	51eb851f 	.word	0x51eb851f

08002888 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002888:	b084      	sub	sp, #16
 800288a:	b580      	push	{r7, lr}
 800288c:	b084      	sub	sp, #16
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	f107 001c 	add.w	r0, r7, #28
 8002896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289c:	2b01      	cmp	r3, #1
 800289e:	d122      	bne.n	80028e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80028b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80028c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d105      	bne.n	80028da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fa76 	bl	8002dcc <USB_CoreReset>
 80028e0:	4603      	mov	r3, r0
 80028e2:	73fb      	strb	r3, [r7, #15]
 80028e4:	e010      	b.n	8002908 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fa6a 	bl	8002dcc <USB_CoreReset>
 80028f8:	4603      	mov	r3, r0
 80028fa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8002908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290a:	2b01      	cmp	r3, #1
 800290c:	d10b      	bne.n	8002926 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f043 0206 	orr.w	r2, r3, #6
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f043 0220 	orr.w	r2, r3, #32
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002926:	7bfb      	ldrb	r3, [r7, #15]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002932:	b004      	add	sp, #16
 8002934:	4770      	bx	lr

08002936 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f023 0201 	bic.w	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d115      	bne.n	80029a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002984:	2001      	movs	r0, #1
 8002986:	f7fe f9a5 	bl	8000cd4 <HAL_Delay>
      ms++;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3301      	adds	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 fa0d 	bl	8002db0 <USB_GetMode>
 8002996:	4603      	mov	r3, r0
 8002998:	2b01      	cmp	r3, #1
 800299a:	d01e      	beq.n	80029da <USB_SetCurrentMode+0x84>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b31      	cmp	r3, #49	; 0x31
 80029a0:	d9f0      	bls.n	8002984 <USB_SetCurrentMode+0x2e>
 80029a2:	e01a      	b.n	80029da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d115      	bne.n	80029d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80029b6:	2001      	movs	r0, #1
 80029b8:	f7fe f98c 	bl	8000cd4 <HAL_Delay>
      ms++;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3301      	adds	r3, #1
 80029c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f9f4 	bl	8002db0 <USB_GetMode>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <USB_SetCurrentMode+0x84>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b31      	cmp	r3, #49	; 0x31
 80029d2:	d9f0      	bls.n	80029b6 <USB_SetCurrentMode+0x60>
 80029d4:	e001      	b.n	80029da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e005      	b.n	80029e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2b32      	cmp	r3, #50	; 0x32
 80029de:	d101      	bne.n	80029e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80029f0:	b084      	sub	sp, #16
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b086      	sub	sp, #24
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80029fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	e009      	b.n	8002a24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	3340      	adds	r3, #64	; 0x40
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	3301      	adds	r3, #1
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	2b0e      	cmp	r3, #14
 8002a28:	d9f2      	bls.n	8002a10 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d11c      	bne.n	8002a6a <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a3e:	f043 0302 	orr.w	r3, r3, #2
 8002a42:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a54:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	639a      	str	r2, [r3, #56]	; 0x38
 8002a68:	e00b      	b.n	8002a82 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a94:	4619      	mov	r1, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	680b      	ldr	r3, [r1, #0]
 8002aa0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d10c      	bne.n	8002ac2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d104      	bne.n	8002ab8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002aae:	2100      	movs	r1, #0
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f945 	bl	8002d40 <USB_SetDevSpeed>
 8002ab6:	e008      	b.n	8002aca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002ab8:	2101      	movs	r1, #1
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f940 	bl	8002d40 <USB_SetDevSpeed>
 8002ac0:	e003      	b.n	8002aca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002ac2:	2103      	movs	r1, #3
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f93b 	bl	8002d40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002aca:	2110      	movs	r1, #16
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f8f3 	bl	8002cb8 <USB_FlushTxFifo>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f90f 	bl	8002d00 <USB_FlushRxFifo>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af2:	461a      	mov	r2, r3
 8002af4:	2300      	movs	r3, #0
 8002af6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afe:	461a      	mov	r2, r3
 8002b00:	2300      	movs	r3, #0
 8002b02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b10:	2300      	movs	r3, #0
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	e043      	b.n	8002b9e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b2c:	d118      	bne.n	8002b60 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10a      	bne.n	8002b4a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b40:	461a      	mov	r2, r3
 8002b42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	e013      	b.n	8002b72 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b56:	461a      	mov	r2, r3
 8002b58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	e008      	b.n	8002b72 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	2300      	movs	r3, #0
 8002b70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2300      	movs	r3, #0
 8002b82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b90:	461a      	mov	r2, r3
 8002b92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d3b7      	bcc.n	8002b16 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	e043      	b.n	8002c34 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bc2:	d118      	bne.n	8002bf6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10a      	bne.n	8002be0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	e013      	b.n	8002c08 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bec:	461a      	mov	r2, r3
 8002bee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	e008      	b.n	8002c08 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c02:	461a      	mov	r2, r3
 8002c04:	2300      	movs	r3, #0
 8002c06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c14:	461a      	mov	r2, r3
 8002c16:	2300      	movs	r3, #0
 8002c18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c26:	461a      	mov	r2, r3
 8002c28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	3301      	adds	r3, #1
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d3b7      	bcc.n	8002bac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002c5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d105      	bne.n	8002c70 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f043 0210 	orr.w	r2, r3, #16
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699a      	ldr	r2, [r3, #24]
 8002c74:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <USB_DevInit+0x2c4>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	f043 0208 	orr.w	r2, r3, #8
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d107      	bne.n	8002ca4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c9c:	f043 0304 	orr.w	r3, r3, #4
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cb0:	b004      	add	sp, #16
 8002cb2:	4770      	bx	lr
 8002cb4:	803c3800 	.word	0x803c3800

08002cb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	019b      	lsls	r3, r3, #6
 8002cca:	f043 0220 	orr.w	r2, r3, #32
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <USB_FlushTxFifo+0x44>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e006      	b.n	8002cf2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d0f0      	beq.n	8002cd2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	00030d40 	.word	0x00030d40

08002d00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2210      	movs	r2, #16
 8002d10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3301      	adds	r3, #1
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4a08      	ldr	r2, [pc, #32]	; (8002d3c <USB_FlushRxFifo+0x3c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d901      	bls.n	8002d24 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e006      	b.n	8002d32 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d0f0      	beq.n	8002d12 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	00030d40 	.word	0x00030d40

08002d40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	68f9      	ldr	r1, [r7, #12]
 8002d5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8002d8a:	f023 0303 	bic.w	r3, r3, #3
 8002d8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d9e:	f043 0302 	orr.w	r3, r3, #2
 8002da2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr
	...

08002dcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4a12      	ldr	r2, [pc, #72]	; (8002e2c <USB_CoreReset+0x60>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e01b      	b.n	8002e22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	daf2      	bge.n	8002dd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f043 0201 	orr.w	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3301      	adds	r3, #1
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a08      	ldr	r2, [pc, #32]	; (8002e2c <USB_CoreReset+0x60>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e006      	b.n	8002e22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d0f0      	beq.n	8002e02 <USB_CoreReset+0x36>

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr
 8002e2c:	00030d40 	.word	0x00030d40

08002e30 <__libc_init_array>:
 8002e30:	b570      	push	{r4, r5, r6, lr}
 8002e32:	2600      	movs	r6, #0
 8002e34:	4d0c      	ldr	r5, [pc, #48]	; (8002e68 <__libc_init_array+0x38>)
 8002e36:	4c0d      	ldr	r4, [pc, #52]	; (8002e6c <__libc_init_array+0x3c>)
 8002e38:	1b64      	subs	r4, r4, r5
 8002e3a:	10a4      	asrs	r4, r4, #2
 8002e3c:	42a6      	cmp	r6, r4
 8002e3e:	d109      	bne.n	8002e54 <__libc_init_array+0x24>
 8002e40:	f000 f822 	bl	8002e88 <_init>
 8002e44:	2600      	movs	r6, #0
 8002e46:	4d0a      	ldr	r5, [pc, #40]	; (8002e70 <__libc_init_array+0x40>)
 8002e48:	4c0a      	ldr	r4, [pc, #40]	; (8002e74 <__libc_init_array+0x44>)
 8002e4a:	1b64      	subs	r4, r4, r5
 8002e4c:	10a4      	asrs	r4, r4, #2
 8002e4e:	42a6      	cmp	r6, r4
 8002e50:	d105      	bne.n	8002e5e <__libc_init_array+0x2e>
 8002e52:	bd70      	pop	{r4, r5, r6, pc}
 8002e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e58:	4798      	blx	r3
 8002e5a:	3601      	adds	r6, #1
 8002e5c:	e7ee      	b.n	8002e3c <__libc_init_array+0xc>
 8002e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e62:	4798      	blx	r3
 8002e64:	3601      	adds	r6, #1
 8002e66:	e7f2      	b.n	8002e4e <__libc_init_array+0x1e>
 8002e68:	08002ec0 	.word	0x08002ec0
 8002e6c:	08002ec0 	.word	0x08002ec0
 8002e70:	08002ec0 	.word	0x08002ec0
 8002e74:	08002ec4 	.word	0x08002ec4

08002e78 <memset>:
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4402      	add	r2, r0
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d100      	bne.n	8002e82 <memset+0xa>
 8002e80:	4770      	bx	lr
 8002e82:	f803 1b01 	strb.w	r1, [r3], #1
 8002e86:	e7f9      	b.n	8002e7c <memset+0x4>

08002e88 <_init>:
 8002e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8a:	bf00      	nop
 8002e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8e:	bc08      	pop	{r3}
 8002e90:	469e      	mov	lr, r3
 8002e92:	4770      	bx	lr

08002e94 <_fini>:
 8002e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e96:	bf00      	nop
 8002e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9a:	bc08      	pop	{r3}
 8002e9c:	469e      	mov	lr, r3
 8002e9e:	4770      	bx	lr
