
OBC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004484  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08004540  08004540  00014540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004674  08004674  00020470  2**0
                  CONTENTS
  4 .ARM          00000000  08004674  08004674  00020470  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004674  08004674  00020470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004674  08004674  00014674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004678  08004678  00014678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000470  20000000  0800467c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000470  08004aec  00020470  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  08004aec  000205b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020470  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cacf  00000000  00000000  00020498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da6  00000000  00000000  0002cf67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  0002ed10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000850  00000000  00000000  0002f628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be19  00000000  00000000  0002fe78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b952  00000000  00000000  0004bc91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4172  00000000  00000000  000575e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fb755  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f8  00000000  00000000  000fb7a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000470 	.word	0x20000470
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004528 	.word	0x08004528

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000474 	.word	0x20000474
 8000100:	08004528 	.word	0x08004528

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <OBC_Transmit_Receive>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void OBC_Transmit_Receive(){
 8000230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000232:	b089      	sub	sp, #36	; 0x24
 8000234:	af02      	add	r7, sp, #8
	PacketInit();
 8000236:	f002 ff8f 	bl	8003158 <PacketInit>
	uint8_t arg[] = {1,2,3,4};
 800023a:	210c      	movs	r1, #12
 800023c:	187b      	adds	r3, r7, r1
 800023e:	4a47      	ldr	r2, [pc, #284]	; (800035c <OBC_Transmit_Receive+0x12c>)
 8000240:	601a      	str	r2, [r3, #0]
	uint8_t id,len,cmd;
	uint8_t argRet[4];

	PacketAssemble(0x11,0x01,arg,sizeof(arg),buffer_tx);
 8000242:	187a      	adds	r2, r7, r1
 8000244:	4b46      	ldr	r3, [pc, #280]	; (8000360 <OBC_Transmit_Receive+0x130>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	2304      	movs	r3, #4
 800024a:	2101      	movs	r1, #1
 800024c:	2011      	movs	r0, #17
 800024e:	f002 ff97 	bl	8003180 <PacketAssemble>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8000252:	2390      	movs	r3, #144	; 0x90
 8000254:	05db      	lsls	r3, r3, #23
 8000256:	2200      	movs	r2, #0
 8000258:	2110      	movs	r1, #16
 800025a:	0018      	movs	r0, r3
 800025c:	f000 fe60 	bl	8000f20 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1,buffer_tx,15,100) != HAL_OK)
 8000260:	493f      	ldr	r1, [pc, #252]	; (8000360 <OBC_Transmit_Receive+0x130>)
 8000262:	4840      	ldr	r0, [pc, #256]	; (8000364 <OBC_Transmit_Receive+0x134>)
 8000264:	2364      	movs	r3, #100	; 0x64
 8000266:	220f      	movs	r2, #15
 8000268:	f001 fd30 	bl	8001ccc <HAL_SPI_Transmit>
 800026c:	1e03      	subs	r3, r0, #0
 800026e:	d001      	beq.n	8000274 <OBC_Transmit_Receive+0x44>
	{
		Error_Handler();
 8000270:	f000 f9d8 	bl	8000624 <Error_Handler>
	}
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8000274:	2390      	movs	r3, #144	; 0x90
 8000276:	05db      	lsls	r3, r3, #23
 8000278:	2201      	movs	r2, #1
 800027a:	2110      	movs	r1, #16
 800027c:	0018      	movs	r0, r3
 800027e:	f000 fe4f 	bl	8000f20 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000282:	2064      	movs	r0, #100	; 0x64
 8000284:	f000 fbfc 	bl	8000a80 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8000288:	2390      	movs	r3, #144	; 0x90
 800028a:	05db      	lsls	r3, r3, #23
 800028c:	2200      	movs	r2, #0
 800028e:	2110      	movs	r1, #16
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fe45 	bl	8000f20 <HAL_GPIO_WritePin>
		if(HAL_SPI_Receive(&hspi1,buffer_rx,15,100) != HAL_OK)
 8000296:	4934      	ldr	r1, [pc, #208]	; (8000368 <OBC_Transmit_Receive+0x138>)
 8000298:	4832      	ldr	r0, [pc, #200]	; (8000364 <OBC_Transmit_Receive+0x134>)
 800029a:	2364      	movs	r3, #100	; 0x64
 800029c:	220f      	movs	r2, #15
 800029e:	f001 fe6d 	bl	8001f7c <HAL_SPI_Receive>
 80002a2:	1e03      	subs	r3, r0, #0
 80002a4:	d001      	beq.n	80002aa <OBC_Transmit_Receive+0x7a>
		{
			Error_Handler();
 80002a6:	f000 f9bd 	bl	8000624 <Error_Handler>
		}
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80002aa:	2390      	movs	r3, #144	; 0x90
 80002ac:	05db      	lsls	r3, r3, #23
 80002ae:	2201      	movs	r2, #1
 80002b0:	2110      	movs	r1, #16
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fe34 	bl	8000f20 <HAL_GPIO_WritePin>
	deframeReturn retVal = PacketDisassemble(&id,&len,&cmd,argRet,buffer_rx,sizeof(buffer_rx)); // disassemble packet from OBC
 80002b8:	2613      	movs	r6, #19
 80002ba:	19bc      	adds	r4, r7, r6
 80002bc:	1d3d      	adds	r5, r7, #4
 80002be:	2309      	movs	r3, #9
 80002c0:	18fa      	adds	r2, r7, r3
 80002c2:	210a      	movs	r1, #10
 80002c4:	1879      	adds	r1, r7, r1
 80002c6:	200b      	movs	r0, #11
 80002c8:	1838      	adds	r0, r7, r0
 80002ca:	230f      	movs	r3, #15
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	4b26      	ldr	r3, [pc, #152]	; (8000368 <OBC_Transmit_Receive+0x138>)
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	002b      	movs	r3, r5
 80002d4:	f003 f822 	bl	800331c <PacketDisassemble>
 80002d8:	0003      	movs	r3, r0
 80002da:	7023      	strb	r3, [r4, #0]
	if(retVal == DEFRAME_OK){
 80002dc:	19bb      	adds	r3, r7, r6
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d129      	bne.n	8000338 <OBC_Transmit_Receive+0x108>
	printf("\nretVal is %d id is %x len is %d cmd is %x\n",retVal, id, len, cmd);
 80002e4:	19bb      	adds	r3, r7, r6
 80002e6:	7819      	ldrb	r1, [r3, #0]
 80002e8:	220b      	movs	r2, #11
 80002ea:	18bb      	adds	r3, r7, r2
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	001a      	movs	r2, r3
 80002f0:	200a      	movs	r0, #10
 80002f2:	183b      	adds	r3, r7, r0
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	001c      	movs	r4, r3
 80002f8:	2309      	movs	r3, #9
 80002fa:	18fb      	adds	r3, r7, r3
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	481b      	ldr	r0, [pc, #108]	; (800036c <OBC_Transmit_Receive+0x13c>)
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	0023      	movs	r3, r4
 8000304:	f003 f972 	bl	80035ec <iprintf>
	for (int i = 0;i<len;i++){
 8000308:	2300      	movs	r3, #0
 800030a:	617b      	str	r3, [r7, #20]
 800030c:	e00c      	b.n	8000328 <OBC_Transmit_Receive+0xf8>
	            printf("arg %d is %x\n",i, argRet[i]);
 800030e:	1d3a      	adds	r2, r7, #4
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	18d3      	adds	r3, r2, r3
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	001a      	movs	r2, r3
 8000318:	6979      	ldr	r1, [r7, #20]
 800031a:	4b15      	ldr	r3, [pc, #84]	; (8000370 <OBC_Transmit_Receive+0x140>)
 800031c:	0018      	movs	r0, r3
 800031e:	f003 f965 	bl	80035ec <iprintf>
	for (int i = 0;i<len;i++){
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	3301      	adds	r3, #1
 8000326:	617b      	str	r3, [r7, #20]
 8000328:	230a      	movs	r3, #10
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	001a      	movs	r2, r3
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	4293      	cmp	r3, r2
 8000334:	dbeb      	blt.n	800030e <OBC_Transmit_Receive+0xde>
	        printf("Can't find header");
	 }else{
	        printf("CRC doesnt match");

	 }
}
 8000336:	e00d      	b.n	8000354 <OBC_Transmit_Receive+0x124>
	 }else if (retVal == DEFRAME_INVALID_HEADER){
 8000338:	2313      	movs	r3, #19
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d104      	bne.n	800034c <OBC_Transmit_Receive+0x11c>
	        printf("Can't find header");
 8000342:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <OBC_Transmit_Receive+0x144>)
 8000344:	0018      	movs	r0, r3
 8000346:	f003 f951 	bl	80035ec <iprintf>
}
 800034a:	e003      	b.n	8000354 <OBC_Transmit_Receive+0x124>
	        printf("CRC doesnt match");
 800034c:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <OBC_Transmit_Receive+0x148>)
 800034e:	0018      	movs	r0, r3
 8000350:	f003 f94c 	bl	80035ec <iprintf>
}
 8000354:	46c0      	nop			; (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	b007      	add	sp, #28
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	04030201 	.word	0x04030201
 8000360:	200004a8 	.word	0x200004a8
 8000364:	200004b8 	.word	0x200004b8
 8000368:	20000498 	.word	0x20000498
 800036c:	08004540 	.word	0x08004540
 8000370:	0800456c 	.word	0x0800456c
 8000374:	0800457c 	.word	0x0800457c
 8000378:	08004590 	.word	0x08004590

0800037c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000380:	f000 fb1a 	bl	80009b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000384:	f000 f809 	bl	800039a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000388:	f000 f8d4 	bl	8000534 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800038c:	f000 f8a2 	bl	80004d4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000390:	f000 f862 	bl	8000458 <MX_SPI1_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 // OBC_Receive();
	  //OBC_Transmit();
	  OBC_Transmit_Receive();
 8000394:	f7ff ff4c 	bl	8000230 <OBC_Transmit_Receive>
 8000398:	e7fc      	b.n	8000394 <main+0x18>

0800039a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039a:	b590      	push	{r4, r7, lr}
 800039c:	b099      	sub	sp, #100	; 0x64
 800039e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a0:	242c      	movs	r4, #44	; 0x2c
 80003a2:	193b      	adds	r3, r7, r4
 80003a4:	0018      	movs	r0, r3
 80003a6:	2334      	movs	r3, #52	; 0x34
 80003a8:	001a      	movs	r2, r3
 80003aa:	2100      	movs	r1, #0
 80003ac:	f003 f915 	bl	80035da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	231c      	movs	r3, #28
 80003b2:	18fb      	adds	r3, r7, r3
 80003b4:	0018      	movs	r0, r3
 80003b6:	2310      	movs	r3, #16
 80003b8:	001a      	movs	r2, r3
 80003ba:	2100      	movs	r1, #0
 80003bc:	f003 f90d 	bl	80035da <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c0:	003b      	movs	r3, r7
 80003c2:	0018      	movs	r0, r3
 80003c4:	231c      	movs	r3, #28
 80003c6:	001a      	movs	r2, r3
 80003c8:	2100      	movs	r1, #0
 80003ca:	f003 f906 	bl	80035da <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ce:	0021      	movs	r1, r4
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2201      	movs	r2, #1
 80003d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	2201      	movs	r2, #1
 80003da:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2202      	movs	r2, #2
 80003e0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	2280      	movs	r2, #128	; 0x80
 80003e6:	0252      	lsls	r2, r2, #9
 80003e8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	22a0      	movs	r2, #160	; 0xa0
 80003ee:	0392      	lsls	r2, r2, #14
 80003f0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80003f2:	187b      	adds	r3, r7, r1
 80003f4:	2201      	movs	r2, #1
 80003f6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	0018      	movs	r0, r3
 80003fc:	f000 fdae 	bl	8000f5c <HAL_RCC_OscConfig>
 8000400:	1e03      	subs	r3, r0, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000404:	f000 f90e 	bl	8000624 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000408:	211c      	movs	r1, #28
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2207      	movs	r2, #7
 800040e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2202      	movs	r2, #2
 8000414:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000416:	187b      	adds	r3, r7, r1
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000422:	187b      	adds	r3, r7, r1
 8000424:	2101      	movs	r1, #1
 8000426:	0018      	movs	r0, r3
 8000428:	f001 f91e 	bl	8001668 <HAL_RCC_ClockConfig>
 800042c:	1e03      	subs	r3, r0, #0
 800042e:	d001      	beq.n	8000434 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000430:	f000 f8f8 	bl	8000624 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000434:	003b      	movs	r3, r7
 8000436:	2202      	movs	r2, #2
 8000438:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800043a:	003b      	movs	r3, r7
 800043c:	2200      	movs	r2, #0
 800043e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000440:	003b      	movs	r3, r7
 8000442:	0018      	movs	r0, r3
 8000444:	f001 fa8a 	bl	800195c <HAL_RCCEx_PeriphCLKConfig>
 8000448:	1e03      	subs	r3, r0, #0
 800044a:	d001      	beq.n	8000450 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800044c:	f000 f8ea 	bl	8000624 <Error_Handler>
  }
}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	b019      	add	sp, #100	; 0x64
 8000456:	bd90      	pop	{r4, r7, pc}

08000458 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800045c:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <MX_SPI1_Init+0x74>)
 800045e:	4a1c      	ldr	r2, [pc, #112]	; (80004d0 <MX_SPI1_Init+0x78>)
 8000460:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000462:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <MX_SPI1_Init+0x74>)
 8000464:	2282      	movs	r2, #130	; 0x82
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800046a:	4b18      	ldr	r3, [pc, #96]	; (80004cc <MX_SPI1_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000470:	4b16      	ldr	r3, [pc, #88]	; (80004cc <MX_SPI1_Init+0x74>)
 8000472:	22e0      	movs	r2, #224	; 0xe0
 8000474:	00d2      	lsls	r2, r2, #3
 8000476:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000478:	4b14      	ldr	r3, [pc, #80]	; (80004cc <MX_SPI1_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800047e:	4b13      	ldr	r3, [pc, #76]	; (80004cc <MX_SPI1_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <MX_SPI1_Init+0x74>)
 8000486:	2280      	movs	r2, #128	; 0x80
 8000488:	0092      	lsls	r2, r2, #2
 800048a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_SPI1_Init+0x74>)
 800048e:	2220      	movs	r2, #32
 8000490:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_SPI1_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_SPI1_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_SPI1_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_SPI1_Init+0x74>)
 80004a6:	2207      	movs	r2, #7
 80004a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_SPI1_Init+0x74>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_SPI1_Init+0x74>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004b6:	4b05      	ldr	r3, [pc, #20]	; (80004cc <MX_SPI1_Init+0x74>)
 80004b8:	0018      	movs	r0, r3
 80004ba:	f001 fb4f 	bl	8001b5c <HAL_SPI_Init>
 80004be:	1e03      	subs	r3, r0, #0
 80004c0:	d001      	beq.n	80004c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004c2:	f000 f8af 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	200004b8 	.word	0x200004b8
 80004d0:	40013000 	.word	0x40013000

080004d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004d8:	4b14      	ldr	r3, [pc, #80]	; (800052c <MX_USART2_UART_Init+0x58>)
 80004da:	4a15      	ldr	r2, [pc, #84]	; (8000530 <MX_USART2_UART_Init+0x5c>)
 80004dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004de:	4b13      	ldr	r3, [pc, #76]	; (800052c <MX_USART2_UART_Init+0x58>)
 80004e0:	22e1      	movs	r2, #225	; 0xe1
 80004e2:	0252      	lsls	r2, r2, #9
 80004e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <MX_USART2_UART_Init+0x58>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <MX_USART2_UART_Init+0x58>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <MX_USART2_UART_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <MX_USART2_UART_Init+0x58>)
 80004fa:	220c      	movs	r2, #12
 80004fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <MX_USART2_UART_Init+0x58>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <MX_USART2_UART_Init+0x58>)
 8000506:	2200      	movs	r2, #0
 8000508:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800050a:	4b08      	ldr	r3, [pc, #32]	; (800052c <MX_USART2_UART_Init+0x58>)
 800050c:	2200      	movs	r2, #0
 800050e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <MX_USART2_UART_Init+0x58>)
 8000512:	2200      	movs	r2, #0
 8000514:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000516:	4b05      	ldr	r3, [pc, #20]	; (800052c <MX_USART2_UART_Init+0x58>)
 8000518:	0018      	movs	r0, r3
 800051a:	f002 fa21 	bl	8002960 <HAL_UART_Init>
 800051e:	1e03      	subs	r3, r0, #0
 8000520:	d001      	beq.n	8000526 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000522:	f000 f87f 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	2000051c 	.word	0x2000051c
 8000530:	40004400 	.word	0x40004400

08000534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b08b      	sub	sp, #44	; 0x2c
 8000538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053a:	2414      	movs	r4, #20
 800053c:	193b      	adds	r3, r7, r4
 800053e:	0018      	movs	r0, r3
 8000540:	2314      	movs	r3, #20
 8000542:	001a      	movs	r2, r3
 8000544:	2100      	movs	r1, #0
 8000546:	f003 f848 	bl	80035da <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800054a:	4b34      	ldr	r3, [pc, #208]	; (800061c <MX_GPIO_Init+0xe8>)
 800054c:	695a      	ldr	r2, [r3, #20]
 800054e:	4b33      	ldr	r3, [pc, #204]	; (800061c <MX_GPIO_Init+0xe8>)
 8000550:	2180      	movs	r1, #128	; 0x80
 8000552:	0309      	lsls	r1, r1, #12
 8000554:	430a      	orrs	r2, r1
 8000556:	615a      	str	r2, [r3, #20]
 8000558:	4b30      	ldr	r3, [pc, #192]	; (800061c <MX_GPIO_Init+0xe8>)
 800055a:	695a      	ldr	r2, [r3, #20]
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	031b      	lsls	r3, r3, #12
 8000560:	4013      	ands	r3, r2
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000566:	4b2d      	ldr	r3, [pc, #180]	; (800061c <MX_GPIO_Init+0xe8>)
 8000568:	695a      	ldr	r2, [r3, #20]
 800056a:	4b2c      	ldr	r3, [pc, #176]	; (800061c <MX_GPIO_Init+0xe8>)
 800056c:	2180      	movs	r1, #128	; 0x80
 800056e:	03c9      	lsls	r1, r1, #15
 8000570:	430a      	orrs	r2, r1
 8000572:	615a      	str	r2, [r3, #20]
 8000574:	4b29      	ldr	r3, [pc, #164]	; (800061c <MX_GPIO_Init+0xe8>)
 8000576:	695a      	ldr	r2, [r3, #20]
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	03db      	lsls	r3, r3, #15
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b26      	ldr	r3, [pc, #152]	; (800061c <MX_GPIO_Init+0xe8>)
 8000584:	695a      	ldr	r2, [r3, #20]
 8000586:	4b25      	ldr	r3, [pc, #148]	; (800061c <MX_GPIO_Init+0xe8>)
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	0289      	lsls	r1, r1, #10
 800058c:	430a      	orrs	r2, r1
 800058e:	615a      	str	r2, [r3, #20]
 8000590:	4b22      	ldr	r3, [pc, #136]	; (800061c <MX_GPIO_Init+0xe8>)
 8000592:	695a      	ldr	r2, [r3, #20]
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	029b      	lsls	r3, r3, #10
 8000598:	4013      	ands	r3, r2
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	4b1f      	ldr	r3, [pc, #124]	; (800061c <MX_GPIO_Init+0xe8>)
 80005a0:	695a      	ldr	r2, [r3, #20]
 80005a2:	4b1e      	ldr	r3, [pc, #120]	; (800061c <MX_GPIO_Init+0xe8>)
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	02c9      	lsls	r1, r1, #11
 80005a8:	430a      	orrs	r2, r1
 80005aa:	615a      	str	r2, [r3, #20]
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <MX_GPIO_Init+0xe8>)
 80005ae:	695a      	ldr	r2, [r3, #20]
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	02db      	lsls	r3, r3, #11
 80005b4:	4013      	ands	r3, r2
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80005ba:	2390      	movs	r3, #144	; 0x90
 80005bc:	05db      	lsls	r3, r3, #23
 80005be:	2200      	movs	r2, #0
 80005c0:	2130      	movs	r1, #48	; 0x30
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 fcac 	bl	8000f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	0192      	lsls	r2, r2, #6
 80005ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2284      	movs	r2, #132	; 0x84
 80005d4:	0392      	lsls	r2, r2, #14
 80005d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	4a0f      	ldr	r2, [pc, #60]	; (8000620 <MX_GPIO_Init+0xec>)
 80005e2:	0019      	movs	r1, r3
 80005e4:	0010      	movs	r0, r2
 80005e6:	f000 fb23 	bl	8000c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 80005ea:	0021      	movs	r1, r4
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2201      	movs	r2, #1
 80005f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000604:	187a      	adds	r2, r7, r1
 8000606:	2390      	movs	r3, #144	; 0x90
 8000608:	05db      	lsls	r3, r3, #23
 800060a:	0011      	movs	r1, r2
 800060c:	0018      	movs	r0, r3
 800060e:	f000 fb0f 	bl	8000c30 <HAL_GPIO_Init>

}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	b00b      	add	sp, #44	; 0x2c
 8000618:	bd90      	pop	{r4, r7, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	40021000 	.word	0x40021000
 8000620:	48000800 	.word	0x48000800

08000624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000628:	b672      	cpsid	i
}
 800062a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800062c:	e7fe      	b.n	800062c <Error_Handler+0x8>
	...

08000630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <HAL_MspInit+0x44>)
 8000638:	699a      	ldr	r2, [r3, #24]
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <HAL_MspInit+0x44>)
 800063c:	2101      	movs	r1, #1
 800063e:	430a      	orrs	r2, r1
 8000640:	619a      	str	r2, [r3, #24]
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <HAL_MspInit+0x44>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	2201      	movs	r2, #1
 8000648:	4013      	ands	r3, r2
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <HAL_MspInit+0x44>)
 8000650:	69da      	ldr	r2, [r3, #28]
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_MspInit+0x44>)
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	0549      	lsls	r1, r1, #21
 8000658:	430a      	orrs	r2, r1
 800065a:	61da      	str	r2, [r3, #28]
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <HAL_MspInit+0x44>)
 800065e:	69da      	ldr	r2, [r3, #28]
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	055b      	lsls	r3, r3, #21
 8000664:	4013      	ands	r3, r2
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b002      	add	sp, #8
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40021000 	.word	0x40021000

08000678 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b08b      	sub	sp, #44	; 0x2c
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	2414      	movs	r4, #20
 8000682:	193b      	adds	r3, r7, r4
 8000684:	0018      	movs	r0, r3
 8000686:	2314      	movs	r3, #20
 8000688:	001a      	movs	r2, r3
 800068a:	2100      	movs	r1, #0
 800068c:	f002 ffa5 	bl	80035da <memset>
  if(hspi->Instance==SPI1)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a2e      	ldr	r2, [pc, #184]	; (8000750 <HAL_SPI_MspInit+0xd8>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d155      	bne.n	8000746 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800069a:	4b2e      	ldr	r3, [pc, #184]	; (8000754 <HAL_SPI_MspInit+0xdc>)
 800069c:	699a      	ldr	r2, [r3, #24]
 800069e:	4b2d      	ldr	r3, [pc, #180]	; (8000754 <HAL_SPI_MspInit+0xdc>)
 80006a0:	2180      	movs	r1, #128	; 0x80
 80006a2:	0149      	lsls	r1, r1, #5
 80006a4:	430a      	orrs	r2, r1
 80006a6:	619a      	str	r2, [r3, #24]
 80006a8:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <HAL_SPI_MspInit+0xdc>)
 80006aa:	699a      	ldr	r2, [r3, #24]
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	015b      	lsls	r3, r3, #5
 80006b0:	4013      	ands	r3, r2
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b27      	ldr	r3, [pc, #156]	; (8000754 <HAL_SPI_MspInit+0xdc>)
 80006b8:	695a      	ldr	r2, [r3, #20]
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <HAL_SPI_MspInit+0xdc>)
 80006bc:	2180      	movs	r1, #128	; 0x80
 80006be:	0289      	lsls	r1, r1, #10
 80006c0:	430a      	orrs	r2, r1
 80006c2:	615a      	str	r2, [r3, #20]
 80006c4:	4b23      	ldr	r3, [pc, #140]	; (8000754 <HAL_SPI_MspInit+0xdc>)
 80006c6:	695a      	ldr	r2, [r3, #20]
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	029b      	lsls	r3, r3, #10
 80006cc:	4013      	ands	r3, r2
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <HAL_SPI_MspInit+0xdc>)
 80006d4:	695a      	ldr	r2, [r3, #20]
 80006d6:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <HAL_SPI_MspInit+0xdc>)
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	02c9      	lsls	r1, r1, #11
 80006dc:	430a      	orrs	r2, r1
 80006de:	615a      	str	r2, [r3, #20]
 80006e0:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <HAL_SPI_MspInit+0xdc>)
 80006e2:	695a      	ldr	r2, [r3, #20]
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	02db      	lsls	r3, r3, #11
 80006e8:	4013      	ands	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	22c0      	movs	r2, #192	; 0xc0
 80006f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2202      	movs	r2, #2
 80006f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2203      	movs	r2, #3
 8000704:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	193a      	adds	r2, r7, r4
 800070e:	2390      	movs	r3, #144	; 0x90
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	0011      	movs	r1, r2
 8000714:	0018      	movs	r0, r3
 8000716:	f000 fa8b 	bl	8000c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800071a:	0021      	movs	r1, r4
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2208      	movs	r2, #8
 8000720:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2202      	movs	r2, #2
 8000726:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2203      	movs	r2, #3
 8000732:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073a:	187b      	adds	r3, r7, r1
 800073c:	4a06      	ldr	r2, [pc, #24]	; (8000758 <HAL_SPI_MspInit+0xe0>)
 800073e:	0019      	movs	r1, r3
 8000740:	0010      	movs	r0, r2
 8000742:	f000 fa75 	bl	8000c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b00b      	add	sp, #44	; 0x2c
 800074c:	bd90      	pop	{r4, r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	40013000 	.word	0x40013000
 8000754:	40021000 	.word	0x40021000
 8000758:	48000400 	.word	0x48000400

0800075c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b08b      	sub	sp, #44	; 0x2c
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	2414      	movs	r4, #20
 8000766:	193b      	adds	r3, r7, r4
 8000768:	0018      	movs	r0, r3
 800076a:	2314      	movs	r3, #20
 800076c:	001a      	movs	r2, r3
 800076e:	2100      	movs	r1, #0
 8000770:	f002 ff33 	bl	80035da <memset>
  if(huart->Instance==USART2)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <HAL_UART_MspInit+0x90>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d132      	bne.n	80007e4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <HAL_UART_MspInit+0x94>)
 8000780:	69da      	ldr	r2, [r3, #28]
 8000782:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <HAL_UART_MspInit+0x94>)
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	0289      	lsls	r1, r1, #10
 8000788:	430a      	orrs	r2, r1
 800078a:	61da      	str	r2, [r3, #28]
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <HAL_UART_MspInit+0x94>)
 800078e:	69da      	ldr	r2, [r3, #28]
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	029b      	lsls	r3, r3, #10
 8000794:	4013      	ands	r3, r2
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <HAL_UART_MspInit+0x94>)
 800079c:	695a      	ldr	r2, [r3, #20]
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <HAL_UART_MspInit+0x94>)
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	0289      	lsls	r1, r1, #10
 80007a4:	430a      	orrs	r2, r1
 80007a6:	615a      	str	r2, [r3, #20]
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <HAL_UART_MspInit+0x94>)
 80007aa:	695a      	ldr	r2, [r3, #20]
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	029b      	lsls	r3, r3, #10
 80007b0:	4013      	ands	r3, r2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007b6:	0021      	movs	r1, r4
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	220c      	movs	r2, #12
 80007bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2202      	movs	r2, #2
 80007c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2201      	movs	r2, #1
 80007d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	187a      	adds	r2, r7, r1
 80007d8:	2390      	movs	r3, #144	; 0x90
 80007da:	05db      	lsls	r3, r3, #23
 80007dc:	0011      	movs	r1, r2
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 fa26 	bl	8000c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b00b      	add	sp, #44	; 0x2c
 80007ea:	bd90      	pop	{r4, r7, pc}
 80007ec:	40004400 	.word	0x40004400
 80007f0:	40021000 	.word	0x40021000

080007f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <NMI_Handler+0x4>

080007fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <HardFault_Handler+0x4>

08000800 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000818:	f000 f916 	bl	8000a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b086      	sub	sp, #24
 8000826:	af00      	add	r7, sp, #0
 8000828:	60f8      	str	r0, [r7, #12]
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	e00a      	b.n	800084a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000834:	e000      	b.n	8000838 <_read+0x16>
 8000836:	bf00      	nop
 8000838:	0001      	movs	r1, r0
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	1c5a      	adds	r2, r3, #1
 800083e:	60ba      	str	r2, [r7, #8]
 8000840:	b2ca      	uxtb	r2, r1
 8000842:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	3301      	adds	r3, #1
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	429a      	cmp	r2, r3
 8000850:	dbf0      	blt.n	8000834 <_read+0x12>
	}

return len;
 8000852:	687b      	ldr	r3, [r7, #4]
}
 8000854:	0018      	movs	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	b006      	add	sp, #24
 800085a:	bd80      	pop	{r7, pc}

0800085c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	e009      	b.n	8000882 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	1c5a      	adds	r2, r3, #1
 8000872:	60ba      	str	r2, [r7, #8]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	0018      	movs	r0, r3
 8000878:	e000      	b.n	800087c <_write+0x20>
 800087a:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	3301      	adds	r3, #1
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	697a      	ldr	r2, [r7, #20]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	429a      	cmp	r2, r3
 8000888:	dbf1      	blt.n	800086e <_write+0x12>
	}
	return len;
 800088a:	687b      	ldr	r3, [r7, #4]
}
 800088c:	0018      	movs	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	b006      	add	sp, #24
 8000892:	bd80      	pop	{r7, pc}

08000894 <_close>:

int _close(int file)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	return -1;
 800089c:	2301      	movs	r3, #1
 800089e:	425b      	negs	r3, r3
}
 80008a0:	0018      	movs	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b002      	add	sp, #8
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	2280      	movs	r2, #128	; 0x80
 80008b6:	0192      	lsls	r2, r2, #6
 80008b8:	605a      	str	r2, [r3, #4]
	return 0;
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	0018      	movs	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	b002      	add	sp, #8
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <_isatty>:

int _isatty(int file)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	return 1;
 80008cc:	2301      	movs	r3, #1
}
 80008ce:	0018      	movs	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b084      	sub	sp, #16
 80008da:	af00      	add	r7, sp, #0
 80008dc:	60f8      	str	r0, [r7, #12]
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
	return 0;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	0018      	movs	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b004      	add	sp, #16
 80008ea:	bd80      	pop	{r7, pc}

080008ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f4:	4a14      	ldr	r2, [pc, #80]	; (8000948 <_sbrk+0x5c>)
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <_sbrk+0x60>)
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <_sbrk+0x64>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d102      	bne.n	800090e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <_sbrk+0x64>)
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <_sbrk+0x68>)
 800090c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	18d3      	adds	r3, r2, r3
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	429a      	cmp	r2, r3
 800091a:	d207      	bcs.n	800092c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800091c:	f002 fe1c 	bl	8003558 <__errno>
 8000920:	0003      	movs	r3, r0
 8000922:	220c      	movs	r2, #12
 8000924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000926:	2301      	movs	r3, #1
 8000928:	425b      	negs	r3, r3
 800092a:	e009      	b.n	8000940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000932:	4b07      	ldr	r3, [pc, #28]	; (8000950 <_sbrk+0x64>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	18d2      	adds	r2, r2, r3
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <_sbrk+0x64>)
 800093c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800093e:	68fb      	ldr	r3, [r7, #12]
}
 8000940:	0018      	movs	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	b006      	add	sp, #24
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20008000 	.word	0x20008000
 800094c:	00000400 	.word	0x00000400
 8000950:	2000048c 	.word	0x2000048c
 8000954:	200005b8 	.word	0x200005b8

08000958 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000966:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800096a:	490e      	ldr	r1, [pc, #56]	; (80009a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800096c:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <LoopForever+0xe>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000980:	4c0b      	ldr	r4, [pc, #44]	; (80009b0 <LoopForever+0x16>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800098e:	f7ff ffe3 	bl	8000958 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000992:	f002 fde7 	bl	8003564 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000996:	f7ff fcf1 	bl	800037c <main>

0800099a <LoopForever>:

LoopForever:
    b LoopForever
 800099a:	e7fe      	b.n	800099a <LoopForever>
  ldr   r0, =_estack
 800099c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	20000470 	.word	0x20000470
  ldr r2, =_sidata
 80009a8:	0800467c 	.word	0x0800467c
  ldr r2, =_sbss
 80009ac:	20000470 	.word	0x20000470
  ldr r4, =_ebss
 80009b0:	200005b8 	.word	0x200005b8

080009b4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC1_COMP_IRQHandler>
	...

080009b8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <HAL_Init+0x24>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_Init+0x24>)
 80009c2:	2110      	movs	r1, #16
 80009c4:	430a      	orrs	r2, r1
 80009c6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f000 f809 	bl	80009e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ce:	f7ff fe2f 	bl	8000630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	0018      	movs	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	40022000 	.word	0x40022000

080009e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <HAL_InitTick+0x5c>)
 80009ea:	681c      	ldr	r4, [r3, #0]
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <HAL_InitTick+0x60>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	0019      	movs	r1, r3
 80009f2:	23fa      	movs	r3, #250	; 0xfa
 80009f4:	0098      	lsls	r0, r3, #2
 80009f6:	f7ff fb8f 	bl	8000118 <__udivsi3>
 80009fa:	0003      	movs	r3, r0
 80009fc:	0019      	movs	r1, r3
 80009fe:	0020      	movs	r0, r4
 8000a00:	f7ff fb8a 	bl	8000118 <__udivsi3>
 8000a04:	0003      	movs	r3, r0
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 f905 	bl	8000c16 <HAL_SYSTICK_Config>
 8000a0c:	1e03      	subs	r3, r0, #0
 8000a0e:	d001      	beq.n	8000a14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	e00f      	b.n	8000a34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b03      	cmp	r3, #3
 8000a18:	d80b      	bhi.n	8000a32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	425b      	negs	r3, r3
 8000a20:	2200      	movs	r2, #0
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 f8e2 	bl	8000bec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_InitTick+0x64>)
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e000      	b.n	8000a34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b003      	add	sp, #12
 8000a3a:	bd90      	pop	{r4, r7, pc}
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000004 	.word	0x20000004

08000a48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_IncTick+0x1c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	001a      	movs	r2, r3
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_IncTick+0x20>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	18d2      	adds	r2, r2, r3
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_IncTick+0x20>)
 8000a5a:	601a      	str	r2, [r3, #0]
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	20000008 	.word	0x20000008
 8000a68:	200005a0 	.word	0x200005a0

08000a6c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b02      	ldr	r3, [pc, #8]	; (8000a7c <HAL_GetTick+0x10>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	0018      	movs	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	200005a0 	.word	0x200005a0

08000a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a88:	f7ff fff0 	bl	8000a6c <HAL_GetTick>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3301      	adds	r3, #1
 8000a98:	d005      	beq.n	8000aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_Delay+0x44>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	001a      	movs	r2, r3
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	189b      	adds	r3, r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	f7ff ffe0 	bl	8000a6c <HAL_GetTick>
 8000aac:	0002      	movs	r2, r0
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d8f7      	bhi.n	8000aa8 <HAL_Delay+0x28>
  {
  }
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b004      	add	sp, #16
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	20000008 	.word	0x20000008

08000ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	0002      	movs	r2, r0
 8000ad0:	6039      	str	r1, [r7, #0]
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b7f      	cmp	r3, #127	; 0x7f
 8000adc:	d828      	bhi.n	8000b30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ade:	4a2f      	ldr	r2, [pc, #188]	; (8000b9c <__NVIC_SetPriority+0xd4>)
 8000ae0:	1dfb      	adds	r3, r7, #7
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b25b      	sxtb	r3, r3
 8000ae6:	089b      	lsrs	r3, r3, #2
 8000ae8:	33c0      	adds	r3, #192	; 0xc0
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	589b      	ldr	r3, [r3, r2]
 8000aee:	1dfa      	adds	r2, r7, #7
 8000af0:	7812      	ldrb	r2, [r2, #0]
 8000af2:	0011      	movs	r1, r2
 8000af4:	2203      	movs	r2, #3
 8000af6:	400a      	ands	r2, r1
 8000af8:	00d2      	lsls	r2, r2, #3
 8000afa:	21ff      	movs	r1, #255	; 0xff
 8000afc:	4091      	lsls	r1, r2
 8000afe:	000a      	movs	r2, r1
 8000b00:	43d2      	mvns	r2, r2
 8000b02:	401a      	ands	r2, r3
 8000b04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	019b      	lsls	r3, r3, #6
 8000b0a:	22ff      	movs	r2, #255	; 0xff
 8000b0c:	401a      	ands	r2, r3
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	0018      	movs	r0, r3
 8000b14:	2303      	movs	r3, #3
 8000b16:	4003      	ands	r3, r0
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1c:	481f      	ldr	r0, [pc, #124]	; (8000b9c <__NVIC_SetPriority+0xd4>)
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b25b      	sxtb	r3, r3
 8000b24:	089b      	lsrs	r3, r3, #2
 8000b26:	430a      	orrs	r2, r1
 8000b28:	33c0      	adds	r3, #192	; 0xc0
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b2e:	e031      	b.n	8000b94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b30:	4a1b      	ldr	r2, [pc, #108]	; (8000ba0 <__NVIC_SetPriority+0xd8>)
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	0019      	movs	r1, r3
 8000b38:	230f      	movs	r3, #15
 8000b3a:	400b      	ands	r3, r1
 8000b3c:	3b08      	subs	r3, #8
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	3306      	adds	r3, #6
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	18d3      	adds	r3, r2, r3
 8000b46:	3304      	adds	r3, #4
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	1dfa      	adds	r2, r7, #7
 8000b4c:	7812      	ldrb	r2, [r2, #0]
 8000b4e:	0011      	movs	r1, r2
 8000b50:	2203      	movs	r2, #3
 8000b52:	400a      	ands	r2, r1
 8000b54:	00d2      	lsls	r2, r2, #3
 8000b56:	21ff      	movs	r1, #255	; 0xff
 8000b58:	4091      	lsls	r1, r2
 8000b5a:	000a      	movs	r2, r1
 8000b5c:	43d2      	mvns	r2, r2
 8000b5e:	401a      	ands	r2, r3
 8000b60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	019b      	lsls	r3, r3, #6
 8000b66:	22ff      	movs	r2, #255	; 0xff
 8000b68:	401a      	ands	r2, r3
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	0018      	movs	r0, r3
 8000b70:	2303      	movs	r3, #3
 8000b72:	4003      	ands	r3, r0
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b78:	4809      	ldr	r0, [pc, #36]	; (8000ba0 <__NVIC_SetPriority+0xd8>)
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	001c      	movs	r4, r3
 8000b80:	230f      	movs	r3, #15
 8000b82:	4023      	ands	r3, r4
 8000b84:	3b08      	subs	r3, #8
 8000b86:	089b      	lsrs	r3, r3, #2
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	3306      	adds	r3, #6
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	18c3      	adds	r3, r0, r3
 8000b90:	3304      	adds	r3, #4
 8000b92:	601a      	str	r2, [r3, #0]
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b003      	add	sp, #12
 8000b9a:	bd90      	pop	{r4, r7, pc}
 8000b9c:	e000e100 	.word	0xe000e100
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	1e5a      	subs	r2, r3, #1
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	045b      	lsls	r3, r3, #17
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d301      	bcc.n	8000bbc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e010      	b.n	8000bde <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <SysTick_Config+0x44>)
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	425b      	negs	r3, r3
 8000bc8:	2103      	movs	r1, #3
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f7ff ff7c 	bl	8000ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <SysTick_Config+0x44>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <SysTick_Config+0x44>)
 8000bd8:	2207      	movs	r2, #7
 8000bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	0018      	movs	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b002      	add	sp, #8
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	e000e010 	.word	0xe000e010

08000bec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	1c02      	adds	r2, r0, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	0011      	movs	r1, r2
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff ff5d 	bl	8000ac8 <__NVIC_SetPriority>
}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b004      	add	sp, #16
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff ffbf 	bl	8000ba4 <SysTick_Config>
 8000c26:	0003      	movs	r3, r0
}
 8000c28:	0018      	movs	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b002      	add	sp, #8
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3e:	e155      	b.n	8000eec <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2101      	movs	r1, #1
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	4091      	lsls	r1, r2
 8000c4a:	000a      	movs	r2, r1
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d100      	bne.n	8000c58 <HAL_GPIO_Init+0x28>
 8000c56:	e146      	b.n	8000ee6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	4013      	ands	r3, r2
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d005      	beq.n	8000c70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	2203      	movs	r2, #3
 8000c6a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d130      	bne.n	8000cd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	409a      	lsls	r2, r3
 8000c7e:	0013      	movs	r3, r2
 8000c80:	43da      	mvns	r2, r3
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	68da      	ldr	r2, [r3, #12]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	409a      	lsls	r2, r3
 8000c92:	0013      	movs	r3, r2
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
 8000cac:	0013      	movs	r3, r2
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	091b      	lsrs	r3, r3, #4
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
 8000cc4:	0013      	movs	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	4013      	ands	r3, r2
 8000cda:	2b03      	cmp	r3, #3
 8000cdc:	d017      	beq.n	8000d0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	2203      	movs	r2, #3
 8000cea:	409a      	lsls	r2, r3
 8000cec:	0013      	movs	r3, r2
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	689a      	ldr	r2, [r3, #8]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	409a      	lsls	r2, r3
 8000d00:	0013      	movs	r3, r2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2203      	movs	r2, #3
 8000d14:	4013      	ands	r3, r2
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d123      	bne.n	8000d62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	08da      	lsrs	r2, r3, #3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3208      	adds	r2, #8
 8000d22:	0092      	lsls	r2, r2, #2
 8000d24:	58d3      	ldr	r3, [r2, r3]
 8000d26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	2207      	movs	r2, #7
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	220f      	movs	r2, #15
 8000d32:	409a      	lsls	r2, r3
 8000d34:	0013      	movs	r3, r2
 8000d36:	43da      	mvns	r2, r3
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	691a      	ldr	r2, [r3, #16]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	2107      	movs	r1, #7
 8000d46:	400b      	ands	r3, r1
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	08da      	lsrs	r2, r3, #3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3208      	adds	r2, #8
 8000d5c:	0092      	lsls	r2, r2, #2
 8000d5e:	6939      	ldr	r1, [r7, #16]
 8000d60:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	409a      	lsls	r2, r3
 8000d70:	0013      	movs	r3, r2
 8000d72:	43da      	mvns	r2, r3
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2203      	movs	r2, #3
 8000d80:	401a      	ands	r2, r3
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	409a      	lsls	r2, r3
 8000d88:	0013      	movs	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	23c0      	movs	r3, #192	; 0xc0
 8000d9c:	029b      	lsls	r3, r3, #10
 8000d9e:	4013      	ands	r3, r2
 8000da0:	d100      	bne.n	8000da4 <HAL_GPIO_Init+0x174>
 8000da2:	e0a0      	b.n	8000ee6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da4:	4b57      	ldr	r3, [pc, #348]	; (8000f04 <HAL_GPIO_Init+0x2d4>)
 8000da6:	699a      	ldr	r2, [r3, #24]
 8000da8:	4b56      	ldr	r3, [pc, #344]	; (8000f04 <HAL_GPIO_Init+0x2d4>)
 8000daa:	2101      	movs	r1, #1
 8000dac:	430a      	orrs	r2, r1
 8000dae:	619a      	str	r2, [r3, #24]
 8000db0:	4b54      	ldr	r3, [pc, #336]	; (8000f04 <HAL_GPIO_Init+0x2d4>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	2201      	movs	r2, #1
 8000db6:	4013      	ands	r3, r2
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dbc:	4a52      	ldr	r2, [pc, #328]	; (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	589b      	ldr	r3, [r3, r2]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	2203      	movs	r2, #3
 8000dce:	4013      	ands	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	409a      	lsls	r2, r3
 8000dd6:	0013      	movs	r3, r2
 8000dd8:	43da      	mvns	r2, r3
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	2390      	movs	r3, #144	; 0x90
 8000de4:	05db      	lsls	r3, r3, #23
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d019      	beq.n	8000e1e <HAL_GPIO_Init+0x1ee>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a47      	ldr	r2, [pc, #284]	; (8000f0c <HAL_GPIO_Init+0x2dc>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d013      	beq.n	8000e1a <HAL_GPIO_Init+0x1ea>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a46      	ldr	r2, [pc, #280]	; (8000f10 <HAL_GPIO_Init+0x2e0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d00d      	beq.n	8000e16 <HAL_GPIO_Init+0x1e6>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a45      	ldr	r2, [pc, #276]	; (8000f14 <HAL_GPIO_Init+0x2e4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d007      	beq.n	8000e12 <HAL_GPIO_Init+0x1e2>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a44      	ldr	r2, [pc, #272]	; (8000f18 <HAL_GPIO_Init+0x2e8>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d101      	bne.n	8000e0e <HAL_GPIO_Init+0x1de>
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	e008      	b.n	8000e20 <HAL_GPIO_Init+0x1f0>
 8000e0e:	2305      	movs	r3, #5
 8000e10:	e006      	b.n	8000e20 <HAL_GPIO_Init+0x1f0>
 8000e12:	2303      	movs	r3, #3
 8000e14:	e004      	b.n	8000e20 <HAL_GPIO_Init+0x1f0>
 8000e16:	2302      	movs	r3, #2
 8000e18:	e002      	b.n	8000e20 <HAL_GPIO_Init+0x1f0>
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e000      	b.n	8000e20 <HAL_GPIO_Init+0x1f0>
 8000e1e:	2300      	movs	r3, #0
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	2103      	movs	r1, #3
 8000e24:	400a      	ands	r2, r1
 8000e26:	0092      	lsls	r2, r2, #2
 8000e28:	4093      	lsls	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e30:	4935      	ldr	r1, [pc, #212]	; (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	089b      	lsrs	r3, r3, #2
 8000e36:	3302      	adds	r3, #2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e3e:	4b37      	ldr	r3, [pc, #220]	; (8000f1c <HAL_GPIO_Init+0x2ec>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	43da      	mvns	r2, r3
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	025b      	lsls	r3, r3, #9
 8000e56:	4013      	ands	r3, r2
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e62:	4b2e      	ldr	r3, [pc, #184]	; (8000f1c <HAL_GPIO_Init+0x2ec>)
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e68:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <HAL_GPIO_Init+0x2ec>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	43da      	mvns	r2, r3
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	029b      	lsls	r3, r3, #10
 8000e80:	4013      	ands	r3, r2
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e8c:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <HAL_GPIO_Init+0x2ec>)
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e92:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <HAL_GPIO_Init+0x2ec>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	035b      	lsls	r3, r3, #13
 8000eaa:	4013      	ands	r3, r2
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <HAL_GPIO_Init+0x2ec>)
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_GPIO_Init+0x2ec>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	43da      	mvns	r2, r3
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	039b      	lsls	r3, r3, #14
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_GPIO_Init+0x2ec>)
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	40da      	lsrs	r2, r3
 8000ef4:	1e13      	subs	r3, r2, #0
 8000ef6:	d000      	beq.n	8000efa <HAL_GPIO_Init+0x2ca>
 8000ef8:	e6a2      	b.n	8000c40 <HAL_GPIO_Init+0x10>
  } 
}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b006      	add	sp, #24
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010000 	.word	0x40010000
 8000f0c:	48000400 	.word	0x48000400
 8000f10:	48000800 	.word	0x48000800
 8000f14:	48000c00 	.word	0x48000c00
 8000f18:	48001000 	.word	0x48001000
 8000f1c:	40010400 	.word	0x40010400

08000f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	0008      	movs	r0, r1
 8000f2a:	0011      	movs	r1, r2
 8000f2c:	1cbb      	adds	r3, r7, #2
 8000f2e:	1c02      	adds	r2, r0, #0
 8000f30:	801a      	strh	r2, [r3, #0]
 8000f32:	1c7b      	adds	r3, r7, #1
 8000f34:	1c0a      	adds	r2, r1, #0
 8000f36:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f38:	1c7b      	adds	r3, r7, #1
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d004      	beq.n	8000f4a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f40:	1cbb      	adds	r3, r7, #2
 8000f42:	881a      	ldrh	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f48:	e003      	b.n	8000f52 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f4a:	1cbb      	adds	r3, r7, #2
 8000f4c:	881a      	ldrh	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b002      	add	sp, #8
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d102      	bne.n	8000f70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	f000 fb76 	bl	800165c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2201      	movs	r2, #1
 8000f76:	4013      	ands	r3, r2
 8000f78:	d100      	bne.n	8000f7c <HAL_RCC_OscConfig+0x20>
 8000f7a:	e08e      	b.n	800109a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f7c:	4bc5      	ldr	r3, [pc, #788]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	220c      	movs	r2, #12
 8000f82:	4013      	ands	r3, r2
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	d00e      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f88:	4bc2      	ldr	r3, [pc, #776]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	220c      	movs	r2, #12
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b08      	cmp	r3, #8
 8000f92:	d117      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x68>
 8000f94:	4bbf      	ldr	r3, [pc, #764]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	23c0      	movs	r3, #192	; 0xc0
 8000f9a:	025b      	lsls	r3, r3, #9
 8000f9c:	401a      	ands	r2, r3
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	025b      	lsls	r3, r3, #9
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d10e      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa6:	4bbb      	ldr	r3, [pc, #748]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	029b      	lsls	r3, r3, #10
 8000fae:	4013      	ands	r3, r2
 8000fb0:	d100      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x58>
 8000fb2:	e071      	b.n	8001098 <HAL_RCC_OscConfig+0x13c>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d000      	beq.n	8000fbe <HAL_RCC_OscConfig+0x62>
 8000fbc:	e06c      	b.n	8001098 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	f000 fb4c 	bl	800165c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d107      	bne.n	8000fdc <HAL_RCC_OscConfig+0x80>
 8000fcc:	4bb1      	ldr	r3, [pc, #708]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4bb0      	ldr	r3, [pc, #704]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	0249      	lsls	r1, r1, #9
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	e02f      	b.n	800103c <HAL_RCC_OscConfig+0xe0>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10c      	bne.n	8000ffe <HAL_RCC_OscConfig+0xa2>
 8000fe4:	4bab      	ldr	r3, [pc, #684]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4baa      	ldr	r3, [pc, #680]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8000fea:	49ab      	ldr	r1, [pc, #684]	; (8001298 <HAL_RCC_OscConfig+0x33c>)
 8000fec:	400a      	ands	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	4ba8      	ldr	r3, [pc, #672]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4ba7      	ldr	r3, [pc, #668]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8000ff6:	49a9      	ldr	r1, [pc, #676]	; (800129c <HAL_RCC_OscConfig+0x340>)
 8000ff8:	400a      	ands	r2, r1
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	e01e      	b.n	800103c <HAL_RCC_OscConfig+0xe0>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b05      	cmp	r3, #5
 8001004:	d10e      	bne.n	8001024 <HAL_RCC_OscConfig+0xc8>
 8001006:	4ba3      	ldr	r3, [pc, #652]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4ba2      	ldr	r3, [pc, #648]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 800100c:	2180      	movs	r1, #128	; 0x80
 800100e:	02c9      	lsls	r1, r1, #11
 8001010:	430a      	orrs	r2, r1
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	4b9f      	ldr	r3, [pc, #636]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b9e      	ldr	r3, [pc, #632]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 800101a:	2180      	movs	r1, #128	; 0x80
 800101c:	0249      	lsls	r1, r1, #9
 800101e:	430a      	orrs	r2, r1
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	e00b      	b.n	800103c <HAL_RCC_OscConfig+0xe0>
 8001024:	4b9b      	ldr	r3, [pc, #620]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b9a      	ldr	r3, [pc, #616]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 800102a:	499b      	ldr	r1, [pc, #620]	; (8001298 <HAL_RCC_OscConfig+0x33c>)
 800102c:	400a      	ands	r2, r1
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	4b98      	ldr	r3, [pc, #608]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b97      	ldr	r3, [pc, #604]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8001036:	4999      	ldr	r1, [pc, #612]	; (800129c <HAL_RCC_OscConfig+0x340>)
 8001038:	400a      	ands	r2, r1
 800103a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d014      	beq.n	800106e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001044:	f7ff fd12 	bl	8000a6c <HAL_GetTick>
 8001048:	0003      	movs	r3, r0
 800104a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800104e:	f7ff fd0d 	bl	8000a6c <HAL_GetTick>
 8001052:	0002      	movs	r2, r0
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b64      	cmp	r3, #100	; 0x64
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e2fd      	b.n	800165c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001060:	4b8c      	ldr	r3, [pc, #560]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	029b      	lsls	r3, r3, #10
 8001068:	4013      	ands	r3, r2
 800106a:	d0f0      	beq.n	800104e <HAL_RCC_OscConfig+0xf2>
 800106c:	e015      	b.n	800109a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106e:	f7ff fcfd 	bl	8000a6c <HAL_GetTick>
 8001072:	0003      	movs	r3, r0
 8001074:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001078:	f7ff fcf8 	bl	8000a6c <HAL_GetTick>
 800107c:	0002      	movs	r2, r0
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b64      	cmp	r3, #100	; 0x64
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e2e8      	b.n	800165c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108a:	4b82      	ldr	r3, [pc, #520]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	029b      	lsls	r3, r3, #10
 8001092:	4013      	ands	r3, r2
 8001094:	d1f0      	bne.n	8001078 <HAL_RCC_OscConfig+0x11c>
 8001096:	e000      	b.n	800109a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001098:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2202      	movs	r2, #2
 80010a0:	4013      	ands	r3, r2
 80010a2:	d100      	bne.n	80010a6 <HAL_RCC_OscConfig+0x14a>
 80010a4:	e06c      	b.n	8001180 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010a6:	4b7b      	ldr	r3, [pc, #492]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	220c      	movs	r2, #12
 80010ac:	4013      	ands	r3, r2
 80010ae:	d00e      	beq.n	80010ce <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010b0:	4b78      	ldr	r3, [pc, #480]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	220c      	movs	r2, #12
 80010b6:	4013      	ands	r3, r2
 80010b8:	2b08      	cmp	r3, #8
 80010ba:	d11f      	bne.n	80010fc <HAL_RCC_OscConfig+0x1a0>
 80010bc:	4b75      	ldr	r3, [pc, #468]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	23c0      	movs	r3, #192	; 0xc0
 80010c2:	025b      	lsls	r3, r3, #9
 80010c4:	401a      	ands	r2, r3
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d116      	bne.n	80010fc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ce:	4b71      	ldr	r3, [pc, #452]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2202      	movs	r2, #2
 80010d4:	4013      	ands	r3, r2
 80010d6:	d005      	beq.n	80010e4 <HAL_RCC_OscConfig+0x188>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d001      	beq.n	80010e4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e2bb      	b.n	800165c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e4:	4b6b      	ldr	r3, [pc, #428]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	22f8      	movs	r2, #248	; 0xf8
 80010ea:	4393      	bics	r3, r2
 80010ec:	0019      	movs	r1, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	00da      	lsls	r2, r3, #3
 80010f4:	4b67      	ldr	r3, [pc, #412]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 80010f6:	430a      	orrs	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fa:	e041      	b.n	8001180 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d024      	beq.n	800114e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001104:	4b63      	ldr	r3, [pc, #396]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b62      	ldr	r3, [pc, #392]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 800110a:	2101      	movs	r1, #1
 800110c:	430a      	orrs	r2, r1
 800110e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001110:	f7ff fcac 	bl	8000a6c <HAL_GetTick>
 8001114:	0003      	movs	r3, r0
 8001116:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800111a:	f7ff fca7 	bl	8000a6c <HAL_GetTick>
 800111e:	0002      	movs	r2, r0
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e297      	b.n	800165c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112c:	4b59      	ldr	r3, [pc, #356]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2202      	movs	r2, #2
 8001132:	4013      	ands	r3, r2
 8001134:	d0f1      	beq.n	800111a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001136:	4b57      	ldr	r3, [pc, #348]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	22f8      	movs	r2, #248	; 0xf8
 800113c:	4393      	bics	r3, r2
 800113e:	0019      	movs	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	00da      	lsls	r2, r3, #3
 8001146:	4b53      	ldr	r3, [pc, #332]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8001148:	430a      	orrs	r2, r1
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e018      	b.n	8001180 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800114e:	4b51      	ldr	r3, [pc, #324]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4b50      	ldr	r3, [pc, #320]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8001154:	2101      	movs	r1, #1
 8001156:	438a      	bics	r2, r1
 8001158:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115a:	f7ff fc87 	bl	8000a6c <HAL_GetTick>
 800115e:	0003      	movs	r3, r0
 8001160:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001164:	f7ff fc82 	bl	8000a6c <HAL_GetTick>
 8001168:	0002      	movs	r2, r0
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e272      	b.n	800165c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001176:	4b47      	ldr	r3, [pc, #284]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2202      	movs	r2, #2
 800117c:	4013      	ands	r3, r2
 800117e:	d1f1      	bne.n	8001164 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2208      	movs	r2, #8
 8001186:	4013      	ands	r3, r2
 8001188:	d036      	beq.n	80011f8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d019      	beq.n	80011c6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001192:	4b40      	ldr	r3, [pc, #256]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8001194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001196:	4b3f      	ldr	r3, [pc, #252]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8001198:	2101      	movs	r1, #1
 800119a:	430a      	orrs	r2, r1
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800119e:	f7ff fc65 	bl	8000a6c <HAL_GetTick>
 80011a2:	0003      	movs	r3, r0
 80011a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a8:	f7ff fc60 	bl	8000a6c <HAL_GetTick>
 80011ac:	0002      	movs	r2, r0
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e250      	b.n	800165c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ba:	4b36      	ldr	r3, [pc, #216]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	2202      	movs	r2, #2
 80011c0:	4013      	ands	r3, r2
 80011c2:	d0f1      	beq.n	80011a8 <HAL_RCC_OscConfig+0x24c>
 80011c4:	e018      	b.n	80011f8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011c6:	4b33      	ldr	r3, [pc, #204]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 80011c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011ca:	4b32      	ldr	r3, [pc, #200]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 80011cc:	2101      	movs	r1, #1
 80011ce:	438a      	bics	r2, r1
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d2:	f7ff fc4b 	bl	8000a6c <HAL_GetTick>
 80011d6:	0003      	movs	r3, r0
 80011d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011dc:	f7ff fc46 	bl	8000a6c <HAL_GetTick>
 80011e0:	0002      	movs	r2, r0
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e236      	b.n	800165c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ee:	4b29      	ldr	r3, [pc, #164]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	2202      	movs	r2, #2
 80011f4:	4013      	ands	r3, r2
 80011f6:	d1f1      	bne.n	80011dc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2204      	movs	r2, #4
 80011fe:	4013      	ands	r3, r2
 8001200:	d100      	bne.n	8001204 <HAL_RCC_OscConfig+0x2a8>
 8001202:	e0b5      	b.n	8001370 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001204:	201f      	movs	r0, #31
 8001206:	183b      	adds	r3, r7, r0
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800120c:	4b21      	ldr	r3, [pc, #132]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 800120e:	69da      	ldr	r2, [r3, #28]
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	055b      	lsls	r3, r3, #21
 8001214:	4013      	ands	r3, r2
 8001216:	d110      	bne.n	800123a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001218:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 800121a:	69da      	ldr	r2, [r3, #28]
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 800121e:	2180      	movs	r1, #128	; 0x80
 8001220:	0549      	lsls	r1, r1, #21
 8001222:	430a      	orrs	r2, r1
 8001224:	61da      	str	r2, [r3, #28]
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8001228:	69da      	ldr	r2, [r3, #28]
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	055b      	lsls	r3, r3, #21
 800122e:	4013      	ands	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001234:	183b      	adds	r3, r7, r0
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123a:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <HAL_RCC_OscConfig+0x344>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4013      	ands	r3, r2
 8001244:	d11a      	bne.n	800127c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <HAL_RCC_OscConfig+0x344>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_RCC_OscConfig+0x344>)
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	0049      	lsls	r1, r1, #1
 8001250:	430a      	orrs	r2, r1
 8001252:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001254:	f7ff fc0a 	bl	8000a6c <HAL_GetTick>
 8001258:	0003      	movs	r3, r0
 800125a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800125e:	f7ff fc05 	bl	8000a6c <HAL_GetTick>
 8001262:	0002      	movs	r2, r0
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b64      	cmp	r3, #100	; 0x64
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e1f5      	b.n	800165c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_RCC_OscConfig+0x344>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4013      	ands	r3, r2
 800127a:	d0f0      	beq.n	800125e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d10f      	bne.n	80012a4 <HAL_RCC_OscConfig+0x348>
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 8001286:	6a1a      	ldr	r2, [r3, #32]
 8001288:	4b02      	ldr	r3, [pc, #8]	; (8001294 <HAL_RCC_OscConfig+0x338>)
 800128a:	2101      	movs	r1, #1
 800128c:	430a      	orrs	r2, r1
 800128e:	621a      	str	r2, [r3, #32]
 8001290:	e036      	b.n	8001300 <HAL_RCC_OscConfig+0x3a4>
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	40021000 	.word	0x40021000
 8001298:	fffeffff 	.word	0xfffeffff
 800129c:	fffbffff 	.word	0xfffbffff
 80012a0:	40007000 	.word	0x40007000
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d10c      	bne.n	80012c6 <HAL_RCC_OscConfig+0x36a>
 80012ac:	4bca      	ldr	r3, [pc, #808]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80012ae:	6a1a      	ldr	r2, [r3, #32]
 80012b0:	4bc9      	ldr	r3, [pc, #804]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80012b2:	2101      	movs	r1, #1
 80012b4:	438a      	bics	r2, r1
 80012b6:	621a      	str	r2, [r3, #32]
 80012b8:	4bc7      	ldr	r3, [pc, #796]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80012ba:	6a1a      	ldr	r2, [r3, #32]
 80012bc:	4bc6      	ldr	r3, [pc, #792]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80012be:	2104      	movs	r1, #4
 80012c0:	438a      	bics	r2, r1
 80012c2:	621a      	str	r2, [r3, #32]
 80012c4:	e01c      	b.n	8001300 <HAL_RCC_OscConfig+0x3a4>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b05      	cmp	r3, #5
 80012cc:	d10c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x38c>
 80012ce:	4bc2      	ldr	r3, [pc, #776]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80012d0:	6a1a      	ldr	r2, [r3, #32]
 80012d2:	4bc1      	ldr	r3, [pc, #772]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80012d4:	2104      	movs	r1, #4
 80012d6:	430a      	orrs	r2, r1
 80012d8:	621a      	str	r2, [r3, #32]
 80012da:	4bbf      	ldr	r3, [pc, #764]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80012dc:	6a1a      	ldr	r2, [r3, #32]
 80012de:	4bbe      	ldr	r3, [pc, #760]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80012e0:	2101      	movs	r1, #1
 80012e2:	430a      	orrs	r2, r1
 80012e4:	621a      	str	r2, [r3, #32]
 80012e6:	e00b      	b.n	8001300 <HAL_RCC_OscConfig+0x3a4>
 80012e8:	4bbb      	ldr	r3, [pc, #748]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80012ea:	6a1a      	ldr	r2, [r3, #32]
 80012ec:	4bba      	ldr	r3, [pc, #744]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80012ee:	2101      	movs	r1, #1
 80012f0:	438a      	bics	r2, r1
 80012f2:	621a      	str	r2, [r3, #32]
 80012f4:	4bb8      	ldr	r3, [pc, #736]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80012f6:	6a1a      	ldr	r2, [r3, #32]
 80012f8:	4bb7      	ldr	r3, [pc, #732]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80012fa:	2104      	movs	r1, #4
 80012fc:	438a      	bics	r2, r1
 80012fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d014      	beq.n	8001332 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001308:	f7ff fbb0 	bl	8000a6c <HAL_GetTick>
 800130c:	0003      	movs	r3, r0
 800130e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001310:	e009      	b.n	8001326 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001312:	f7ff fbab 	bl	8000a6c <HAL_GetTick>
 8001316:	0002      	movs	r2, r0
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	4aaf      	ldr	r2, [pc, #700]	; (80015dc <HAL_RCC_OscConfig+0x680>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e19a      	b.n	800165c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001326:	4bac      	ldr	r3, [pc, #688]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	2202      	movs	r2, #2
 800132c:	4013      	ands	r3, r2
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x3b6>
 8001330:	e013      	b.n	800135a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001332:	f7ff fb9b 	bl	8000a6c <HAL_GetTick>
 8001336:	0003      	movs	r3, r0
 8001338:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800133a:	e009      	b.n	8001350 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800133c:	f7ff fb96 	bl	8000a6c <HAL_GetTick>
 8001340:	0002      	movs	r2, r0
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	4aa5      	ldr	r2, [pc, #660]	; (80015dc <HAL_RCC_OscConfig+0x680>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e185      	b.n	800165c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001350:	4ba1      	ldr	r3, [pc, #644]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	2202      	movs	r2, #2
 8001356:	4013      	ands	r3, r2
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800135a:	231f      	movs	r3, #31
 800135c:	18fb      	adds	r3, r7, r3
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d105      	bne.n	8001370 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001364:	4b9c      	ldr	r3, [pc, #624]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 8001366:	69da      	ldr	r2, [r3, #28]
 8001368:	4b9b      	ldr	r3, [pc, #620]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 800136a:	499d      	ldr	r1, [pc, #628]	; (80015e0 <HAL_RCC_OscConfig+0x684>)
 800136c:	400a      	ands	r2, r1
 800136e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2210      	movs	r2, #16
 8001376:	4013      	ands	r3, r2
 8001378:	d063      	beq.n	8001442 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d12a      	bne.n	80013d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001382:	4b95      	ldr	r3, [pc, #596]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 8001384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001386:	4b94      	ldr	r3, [pc, #592]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 8001388:	2104      	movs	r1, #4
 800138a:	430a      	orrs	r2, r1
 800138c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800138e:	4b92      	ldr	r3, [pc, #584]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 8001390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001392:	4b91      	ldr	r3, [pc, #580]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 8001394:	2101      	movs	r1, #1
 8001396:	430a      	orrs	r2, r1
 8001398:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139a:	f7ff fb67 	bl	8000a6c <HAL_GetTick>
 800139e:	0003      	movs	r3, r0
 80013a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013a4:	f7ff fb62 	bl	8000a6c <HAL_GetTick>
 80013a8:	0002      	movs	r2, r0
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e152      	b.n	800165c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013b6:	4b88      	ldr	r3, [pc, #544]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80013b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ba:	2202      	movs	r2, #2
 80013bc:	4013      	ands	r3, r2
 80013be:	d0f1      	beq.n	80013a4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013c0:	4b85      	ldr	r3, [pc, #532]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80013c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c4:	22f8      	movs	r2, #248	; 0xf8
 80013c6:	4393      	bics	r3, r2
 80013c8:	0019      	movs	r1, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	00da      	lsls	r2, r3, #3
 80013d0:	4b81      	ldr	r3, [pc, #516]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80013d2:	430a      	orrs	r2, r1
 80013d4:	635a      	str	r2, [r3, #52]	; 0x34
 80013d6:	e034      	b.n	8001442 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	3305      	adds	r3, #5
 80013de:	d111      	bne.n	8001404 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80013e0:	4b7d      	ldr	r3, [pc, #500]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80013e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013e4:	4b7c      	ldr	r3, [pc, #496]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80013e6:	2104      	movs	r1, #4
 80013e8:	438a      	bics	r2, r1
 80013ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013ec:	4b7a      	ldr	r3, [pc, #488]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80013ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f0:	22f8      	movs	r2, #248	; 0xf8
 80013f2:	4393      	bics	r3, r2
 80013f4:	0019      	movs	r1, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	00da      	lsls	r2, r3, #3
 80013fc:	4b76      	ldr	r3, [pc, #472]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80013fe:	430a      	orrs	r2, r1
 8001400:	635a      	str	r2, [r3, #52]	; 0x34
 8001402:	e01e      	b.n	8001442 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001404:	4b74      	ldr	r3, [pc, #464]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 8001406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001408:	4b73      	ldr	r3, [pc, #460]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 800140a:	2104      	movs	r1, #4
 800140c:	430a      	orrs	r2, r1
 800140e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001410:	4b71      	ldr	r3, [pc, #452]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 8001412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001414:	4b70      	ldr	r3, [pc, #448]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 8001416:	2101      	movs	r1, #1
 8001418:	438a      	bics	r2, r1
 800141a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141c:	f7ff fb26 	bl	8000a6c <HAL_GetTick>
 8001420:	0003      	movs	r3, r0
 8001422:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001426:	f7ff fb21 	bl	8000a6c <HAL_GetTick>
 800142a:	0002      	movs	r2, r0
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e111      	b.n	800165c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001438:	4b67      	ldr	r3, [pc, #412]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 800143a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143c:	2202      	movs	r2, #2
 800143e:	4013      	ands	r3, r2
 8001440:	d1f1      	bne.n	8001426 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2220      	movs	r2, #32
 8001448:	4013      	ands	r3, r2
 800144a:	d05c      	beq.n	8001506 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800144c:	4b62      	ldr	r3, [pc, #392]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	220c      	movs	r2, #12
 8001452:	4013      	ands	r3, r2
 8001454:	2b0c      	cmp	r3, #12
 8001456:	d00e      	beq.n	8001476 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001458:	4b5f      	ldr	r3, [pc, #380]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	220c      	movs	r2, #12
 800145e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001460:	2b08      	cmp	r3, #8
 8001462:	d114      	bne.n	800148e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001464:	4b5c      	ldr	r3, [pc, #368]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	23c0      	movs	r3, #192	; 0xc0
 800146a:	025b      	lsls	r3, r3, #9
 800146c:	401a      	ands	r2, r3
 800146e:	23c0      	movs	r3, #192	; 0xc0
 8001470:	025b      	lsls	r3, r3, #9
 8001472:	429a      	cmp	r2, r3
 8001474:	d10b      	bne.n	800148e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001476:	4b58      	ldr	r3, [pc, #352]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 8001478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	025b      	lsls	r3, r3, #9
 800147e:	4013      	ands	r3, r2
 8001480:	d040      	beq.n	8001504 <HAL_RCC_OscConfig+0x5a8>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d03c      	beq.n	8001504 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e0e6      	b.n	800165c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d01b      	beq.n	80014ce <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001496:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 8001498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800149a:	4b4f      	ldr	r3, [pc, #316]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 800149c:	2180      	movs	r1, #128	; 0x80
 800149e:	0249      	lsls	r1, r1, #9
 80014a0:	430a      	orrs	r2, r1
 80014a2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fae2 	bl	8000a6c <HAL_GetTick>
 80014a8:	0003      	movs	r3, r0
 80014aa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014ae:	f7ff fadd 	bl	8000a6c <HAL_GetTick>
 80014b2:	0002      	movs	r2, r0
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e0cd      	b.n	800165c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80014c0:	4b45      	ldr	r3, [pc, #276]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80014c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	025b      	lsls	r3, r3, #9
 80014c8:	4013      	ands	r3, r2
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x552>
 80014cc:	e01b      	b.n	8001506 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80014ce:	4b42      	ldr	r3, [pc, #264]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80014d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d2:	4b41      	ldr	r3, [pc, #260]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80014d4:	4943      	ldr	r1, [pc, #268]	; (80015e4 <HAL_RCC_OscConfig+0x688>)
 80014d6:	400a      	ands	r2, r1
 80014d8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff fac7 	bl	8000a6c <HAL_GetTick>
 80014de:	0003      	movs	r3, r0
 80014e0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014e4:	f7ff fac2 	bl	8000a6c <HAL_GetTick>
 80014e8:	0002      	movs	r2, r0
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e0b2      	b.n	800165c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80014f6:	4b38      	ldr	r3, [pc, #224]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80014f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	025b      	lsls	r3, r3, #9
 80014fe:	4013      	ands	r3, r2
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x588>
 8001502:	e000      	b.n	8001506 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001504:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	2b00      	cmp	r3, #0
 800150c:	d100      	bne.n	8001510 <HAL_RCC_OscConfig+0x5b4>
 800150e:	e0a4      	b.n	800165a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001510:	4b31      	ldr	r3, [pc, #196]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	220c      	movs	r2, #12
 8001516:	4013      	ands	r3, r2
 8001518:	2b08      	cmp	r3, #8
 800151a:	d100      	bne.n	800151e <HAL_RCC_OscConfig+0x5c2>
 800151c:	e078      	b.n	8001610 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	2b02      	cmp	r3, #2
 8001524:	d14c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001526:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 800152c:	492e      	ldr	r1, [pc, #184]	; (80015e8 <HAL_RCC_OscConfig+0x68c>)
 800152e:	400a      	ands	r2, r1
 8001530:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff fa9b 	bl	8000a6c <HAL_GetTick>
 8001536:	0003      	movs	r3, r0
 8001538:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153c:	f7ff fa96 	bl	8000a6c <HAL_GetTick>
 8001540:	0002      	movs	r2, r0
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e086      	b.n	800165c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	049b      	lsls	r3, r3, #18
 8001556:	4013      	ands	r3, r2
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800155a:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 800155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155e:	220f      	movs	r2, #15
 8001560:	4393      	bics	r3, r2
 8001562:	0019      	movs	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 800156a:	430a      	orrs	r2, r1
 800156c:	62da      	str	r2, [r3, #44]	; 0x2c
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	4a1e      	ldr	r2, [pc, #120]	; (80015ec <HAL_RCC_OscConfig+0x690>)
 8001574:	4013      	ands	r3, r2
 8001576:	0019      	movs	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001580:	431a      	orrs	r2, r3
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 8001584:	430a      	orrs	r2, r1
 8001586:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 800158e:	2180      	movs	r1, #128	; 0x80
 8001590:	0449      	lsls	r1, r1, #17
 8001592:	430a      	orrs	r2, r1
 8001594:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7ff fa69 	bl	8000a6c <HAL_GetTick>
 800159a:	0003      	movs	r3, r0
 800159c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff fa64 	bl	8000a6c <HAL_GetTick>
 80015a4:	0002      	movs	r2, r0
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e054      	b.n	800165c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	049b      	lsls	r3, r3, #18
 80015ba:	4013      	ands	r3, r2
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x644>
 80015be:	e04c      	b.n	800165a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <HAL_RCC_OscConfig+0x67c>)
 80015c6:	4908      	ldr	r1, [pc, #32]	; (80015e8 <HAL_RCC_OscConfig+0x68c>)
 80015c8:	400a      	ands	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fa4e 	bl	8000a6c <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d4:	e015      	b.n	8001602 <HAL_RCC_OscConfig+0x6a6>
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	40021000 	.word	0x40021000
 80015dc:	00001388 	.word	0x00001388
 80015e0:	efffffff 	.word	0xefffffff
 80015e4:	fffeffff 	.word	0xfffeffff
 80015e8:	feffffff 	.word	0xfeffffff
 80015ec:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f0:	f7ff fa3c 	bl	8000a6c <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e02c      	b.n	800165c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <HAL_RCC_OscConfig+0x708>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	049b      	lsls	r3, r3, #18
 800160a:	4013      	ands	r3, r2
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x694>
 800160e:	e024      	b.n	800165a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e01f      	b.n	800165c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_RCC_OscConfig+0x708>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <HAL_RCC_OscConfig+0x708>)
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001626:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	23c0      	movs	r3, #192	; 0xc0
 800162c:	025b      	lsls	r3, r3, #9
 800162e:	401a      	ands	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001634:	429a      	cmp	r2, r3
 8001636:	d10e      	bne.n	8001656 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	220f      	movs	r2, #15
 800163c:	401a      	ands	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001642:	429a      	cmp	r2, r3
 8001644:	d107      	bne.n	8001656 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	23f0      	movs	r3, #240	; 0xf0
 800164a:	039b      	lsls	r3, r3, #14
 800164c:	401a      	ands	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001652:	429a      	cmp	r2, r3
 8001654:	d001      	beq.n	800165a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	0018      	movs	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	b008      	add	sp, #32
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000

08001668 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0bf      	b.n	80017fc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800167c:	4b61      	ldr	r3, [pc, #388]	; (8001804 <HAL_RCC_ClockConfig+0x19c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2201      	movs	r2, #1
 8001682:	4013      	ands	r3, r2
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d911      	bls.n	80016ae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b5e      	ldr	r3, [pc, #376]	; (8001804 <HAL_RCC_ClockConfig+0x19c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2201      	movs	r2, #1
 8001690:	4393      	bics	r3, r2
 8001692:	0019      	movs	r1, r3
 8001694:	4b5b      	ldr	r3, [pc, #364]	; (8001804 <HAL_RCC_ClockConfig+0x19c>)
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169c:	4b59      	ldr	r3, [pc, #356]	; (8001804 <HAL_RCC_ClockConfig+0x19c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2201      	movs	r2, #1
 80016a2:	4013      	ands	r3, r2
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d001      	beq.n	80016ae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e0a6      	b.n	80017fc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2202      	movs	r2, #2
 80016b4:	4013      	ands	r3, r2
 80016b6:	d015      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2204      	movs	r2, #4
 80016be:	4013      	ands	r3, r2
 80016c0:	d006      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016c2:	4b51      	ldr	r3, [pc, #324]	; (8001808 <HAL_RCC_ClockConfig+0x1a0>)
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	4b50      	ldr	r3, [pc, #320]	; (8001808 <HAL_RCC_ClockConfig+0x1a0>)
 80016c8:	21e0      	movs	r1, #224	; 0xe0
 80016ca:	00c9      	lsls	r1, r1, #3
 80016cc:	430a      	orrs	r2, r1
 80016ce:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d0:	4b4d      	ldr	r3, [pc, #308]	; (8001808 <HAL_RCC_ClockConfig+0x1a0>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	22f0      	movs	r2, #240	; 0xf0
 80016d6:	4393      	bics	r3, r2
 80016d8:	0019      	movs	r1, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	4b4a      	ldr	r3, [pc, #296]	; (8001808 <HAL_RCC_ClockConfig+0x1a0>)
 80016e0:	430a      	orrs	r2, r1
 80016e2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2201      	movs	r2, #1
 80016ea:	4013      	ands	r3, r2
 80016ec:	d04c      	beq.n	8001788 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f6:	4b44      	ldr	r3, [pc, #272]	; (8001808 <HAL_RCC_ClockConfig+0x1a0>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	029b      	lsls	r3, r3, #10
 80016fe:	4013      	ands	r3, r2
 8001700:	d120      	bne.n	8001744 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e07a      	b.n	80017fc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d107      	bne.n	800171e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170e:	4b3e      	ldr	r3, [pc, #248]	; (8001808 <HAL_RCC_ClockConfig+0x1a0>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	049b      	lsls	r3, r3, #18
 8001716:	4013      	ands	r3, r2
 8001718:	d114      	bne.n	8001744 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e06e      	b.n	80017fc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b03      	cmp	r3, #3
 8001724:	d107      	bne.n	8001736 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001726:	4b38      	ldr	r3, [pc, #224]	; (8001808 <HAL_RCC_ClockConfig+0x1a0>)
 8001728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4013      	ands	r3, r2
 8001730:	d108      	bne.n	8001744 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e062      	b.n	80017fc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001736:	4b34      	ldr	r3, [pc, #208]	; (8001808 <HAL_RCC_ClockConfig+0x1a0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2202      	movs	r2, #2
 800173c:	4013      	ands	r3, r2
 800173e:	d101      	bne.n	8001744 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e05b      	b.n	80017fc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001744:	4b30      	ldr	r3, [pc, #192]	; (8001808 <HAL_RCC_ClockConfig+0x1a0>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2203      	movs	r2, #3
 800174a:	4393      	bics	r3, r2
 800174c:	0019      	movs	r1, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <HAL_RCC_ClockConfig+0x1a0>)
 8001754:	430a      	orrs	r2, r1
 8001756:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001758:	f7ff f988 	bl	8000a6c <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001760:	e009      	b.n	8001776 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001762:	f7ff f983 	bl	8000a6c <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	4a27      	ldr	r2, [pc, #156]	; (800180c <HAL_RCC_ClockConfig+0x1a4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e042      	b.n	80017fc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001776:	4b24      	ldr	r3, [pc, #144]	; (8001808 <HAL_RCC_ClockConfig+0x1a0>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	220c      	movs	r2, #12
 800177c:	401a      	ands	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	429a      	cmp	r2, r3
 8001786:	d1ec      	bne.n	8001762 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <HAL_RCC_ClockConfig+0x19c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2201      	movs	r2, #1
 800178e:	4013      	ands	r3, r2
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d211      	bcs.n	80017ba <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_RCC_ClockConfig+0x19c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2201      	movs	r2, #1
 800179c:	4393      	bics	r3, r2
 800179e:	0019      	movs	r1, r3
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_RCC_ClockConfig+0x19c>)
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_RCC_ClockConfig+0x19c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2201      	movs	r2, #1
 80017ae:	4013      	ands	r3, r2
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d001      	beq.n	80017ba <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e020      	b.n	80017fc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2204      	movs	r2, #4
 80017c0:	4013      	ands	r3, r2
 80017c2:	d009      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_RCC_ClockConfig+0x1a0>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	4a11      	ldr	r2, [pc, #68]	; (8001810 <HAL_RCC_ClockConfig+0x1a8>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	0019      	movs	r1, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <HAL_RCC_ClockConfig+0x1a0>)
 80017d4:	430a      	orrs	r2, r1
 80017d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80017d8:	f000 f820 	bl	800181c <HAL_RCC_GetSysClockFreq>
 80017dc:	0001      	movs	r1, r0
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_RCC_ClockConfig+0x1a0>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	220f      	movs	r2, #15
 80017e6:	4013      	ands	r3, r2
 80017e8:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <HAL_RCC_ClockConfig+0x1ac>)
 80017ea:	5cd3      	ldrb	r3, [r2, r3]
 80017ec:	000a      	movs	r2, r1
 80017ee:	40da      	lsrs	r2, r3
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_RCC_ClockConfig+0x1b0>)
 80017f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80017f4:	2000      	movs	r0, #0
 80017f6:	f7ff f8f3 	bl	80009e0 <HAL_InitTick>
  
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	0018      	movs	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	b004      	add	sp, #16
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40022000 	.word	0x40022000
 8001808:	40021000 	.word	0x40021000
 800180c:	00001388 	.word	0x00001388
 8001810:	fffff8ff 	.word	0xfffff8ff
 8001814:	080045c4 	.word	0x080045c4
 8001818:	20000000 	.word	0x20000000

0800181c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b08f      	sub	sp, #60	; 0x3c
 8001820:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001822:	2314      	movs	r3, #20
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	4a38      	ldr	r2, [pc, #224]	; (8001908 <HAL_RCC_GetSysClockFreq+0xec>)
 8001828:	ca13      	ldmia	r2!, {r0, r1, r4}
 800182a:	c313      	stmia	r3!, {r0, r1, r4}
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	4a36      	ldr	r2, [pc, #216]	; (800190c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001834:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001836:	c313      	stmia	r3!, {r0, r1, r4}
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001840:	2300      	movs	r3, #0
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
 8001844:	2300      	movs	r3, #0
 8001846:	637b      	str	r3, [r7, #52]	; 0x34
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001850:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001858:	220c      	movs	r2, #12
 800185a:	4013      	ands	r3, r2
 800185c:	2b0c      	cmp	r3, #12
 800185e:	d047      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0xd4>
 8001860:	d849      	bhi.n	80018f6 <HAL_RCC_GetSysClockFreq+0xda>
 8001862:	2b04      	cmp	r3, #4
 8001864:	d002      	beq.n	800186c <HAL_RCC_GetSysClockFreq+0x50>
 8001866:	2b08      	cmp	r3, #8
 8001868:	d003      	beq.n	8001872 <HAL_RCC_GetSysClockFreq+0x56>
 800186a:	e044      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800186c:	4b29      	ldr	r3, [pc, #164]	; (8001914 <HAL_RCC_GetSysClockFreq+0xf8>)
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001870:	e044      	b.n	80018fc <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001874:	0c9b      	lsrs	r3, r3, #18
 8001876:	220f      	movs	r2, #15
 8001878:	4013      	ands	r3, r2
 800187a:	2214      	movs	r2, #20
 800187c:	18ba      	adds	r2, r7, r2
 800187e:	5cd3      	ldrb	r3, [r2, r3]
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001882:	4b23      	ldr	r3, [pc, #140]	; (8001910 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	220f      	movs	r2, #15
 8001888:	4013      	ands	r3, r2
 800188a:	1d3a      	adds	r2, r7, #4
 800188c:	5cd3      	ldrb	r3, [r2, r3]
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001892:	23c0      	movs	r3, #192	; 0xc0
 8001894:	025b      	lsls	r3, r3, #9
 8001896:	401a      	ands	r2, r3
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	025b      	lsls	r3, r3, #9
 800189c:	429a      	cmp	r2, r3
 800189e:	d109      	bne.n	80018b4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018a2:	481c      	ldr	r0, [pc, #112]	; (8001914 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018a4:	f7fe fc38 	bl	8000118 <__udivsi3>
 80018a8:	0003      	movs	r3, r0
 80018aa:	001a      	movs	r2, r3
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	4353      	muls	r3, r2
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
 80018b2:	e01a      	b.n	80018ea <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80018b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018b6:	23c0      	movs	r3, #192	; 0xc0
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	401a      	ands	r2, r3
 80018bc:	23c0      	movs	r3, #192	; 0xc0
 80018be:	025b      	lsls	r3, r3, #9
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d109      	bne.n	80018d8 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018c6:	4814      	ldr	r0, [pc, #80]	; (8001918 <HAL_RCC_GetSysClockFreq+0xfc>)
 80018c8:	f7fe fc26 	bl	8000118 <__udivsi3>
 80018cc:	0003      	movs	r3, r0
 80018ce:	001a      	movs	r2, r3
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	4353      	muls	r3, r2
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
 80018d6:	e008      	b.n	80018ea <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018da:	480e      	ldr	r0, [pc, #56]	; (8001914 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018dc:	f7fe fc1c 	bl	8000118 <__udivsi3>
 80018e0:	0003      	movs	r3, r0
 80018e2:	001a      	movs	r2, r3
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	4353      	muls	r3, r2
 80018e8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80018ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018ee:	e005      	b.n	80018fc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_RCC_GetSysClockFreq+0xfc>)
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018f4:	e002      	b.n	80018fc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018fa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80018fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80018fe:	0018      	movs	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	b00f      	add	sp, #60	; 0x3c
 8001904:	bd90      	pop	{r4, r7, pc}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	080045a4 	.word	0x080045a4
 800190c:	080045b4 	.word	0x080045b4
 8001910:	40021000 	.word	0x40021000
 8001914:	007a1200 	.word	0x007a1200
 8001918:	02dc6c00 	.word	0x02dc6c00

0800191c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001920:	4b02      	ldr	r3, [pc, #8]	; (800192c <HAL_RCC_GetHCLKFreq+0x10>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	0018      	movs	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	20000000 	.word	0x20000000

08001930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001934:	f7ff fff2 	bl	800191c <HAL_RCC_GetHCLKFreq>
 8001938:	0001      	movs	r1, r0
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_RCC_GetPCLK1Freq+0x24>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	0a1b      	lsrs	r3, r3, #8
 8001940:	2207      	movs	r2, #7
 8001942:	4013      	ands	r3, r2
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001946:	5cd3      	ldrb	r3, [r2, r3]
 8001948:	40d9      	lsrs	r1, r3
 800194a:	000b      	movs	r3, r1
}    
 800194c:	0018      	movs	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	40021000 	.word	0x40021000
 8001958:	080045d4 	.word	0x080045d4

0800195c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	025b      	lsls	r3, r3, #9
 8001974:	4013      	ands	r3, r2
 8001976:	d100      	bne.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001978:	e08e      	b.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800197a:	2017      	movs	r0, #23
 800197c:	183b      	adds	r3, r7, r0
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001982:	4b6e      	ldr	r3, [pc, #440]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001984:	69da      	ldr	r2, [r3, #28]
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	055b      	lsls	r3, r3, #21
 800198a:	4013      	ands	r3, r2
 800198c:	d110      	bne.n	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	4b6b      	ldr	r3, [pc, #428]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001990:	69da      	ldr	r2, [r3, #28]
 8001992:	4b6a      	ldr	r3, [pc, #424]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001994:	2180      	movs	r1, #128	; 0x80
 8001996:	0549      	lsls	r1, r1, #21
 8001998:	430a      	orrs	r2, r1
 800199a:	61da      	str	r2, [r3, #28]
 800199c:	4b67      	ldr	r3, [pc, #412]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800199e:	69da      	ldr	r2, [r3, #28]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	055b      	lsls	r3, r3, #21
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019aa:	183b      	adds	r3, r7, r0
 80019ac:	2201      	movs	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b0:	4b63      	ldr	r3, [pc, #396]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4013      	ands	r3, r2
 80019ba:	d11a      	bne.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019bc:	4b60      	ldr	r3, [pc, #384]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b5f      	ldr	r3, [pc, #380]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019c2:	2180      	movs	r1, #128	; 0x80
 80019c4:	0049      	lsls	r1, r1, #1
 80019c6:	430a      	orrs	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ca:	f7ff f84f 	bl	8000a6c <HAL_GetTick>
 80019ce:	0003      	movs	r3, r0
 80019d0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d2:	e008      	b.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d4:	f7ff f84a 	bl	8000a6c <HAL_GetTick>
 80019d8:	0002      	movs	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b64      	cmp	r3, #100	; 0x64
 80019e0:	d901      	bls.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e0a6      	b.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e6:	4b56      	ldr	r3, [pc, #344]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4013      	ands	r3, r2
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019f2:	4b52      	ldr	r3, [pc, #328]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019f4:	6a1a      	ldr	r2, [r3, #32]
 80019f6:	23c0      	movs	r3, #192	; 0xc0
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4013      	ands	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d034      	beq.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	23c0      	movs	r3, #192	; 0xc0
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d02c      	beq.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a14:	4b49      	ldr	r3, [pc, #292]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	4a4a      	ldr	r2, [pc, #296]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a1e:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a20:	6a1a      	ldr	r2, [r3, #32]
 8001a22:	4b46      	ldr	r3, [pc, #280]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a24:	2180      	movs	r1, #128	; 0x80
 8001a26:	0249      	lsls	r1, r1, #9
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a2c:	4b43      	ldr	r3, [pc, #268]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a2e:	6a1a      	ldr	r2, [r3, #32]
 8001a30:	4b42      	ldr	r3, [pc, #264]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a32:	4945      	ldr	r1, [pc, #276]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a38:	4b40      	ldr	r3, [pc, #256]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2201      	movs	r2, #1
 8001a42:	4013      	ands	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a46:	f7ff f811 	bl	8000a6c <HAL_GetTick>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4e:	e009      	b.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a50:	f7ff f80c 	bl	8000a6c <HAL_GetTick>
 8001a54:	0002      	movs	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	4a3c      	ldr	r2, [pc, #240]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e067      	b.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a64:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	2202      	movs	r2, #2
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a6e:	4b33      	ldr	r3, [pc, #204]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	4a34      	ldr	r2, [pc, #208]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	0019      	movs	r1, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a82:	2317      	movs	r3, #23
 8001a84:	18fb      	adds	r3, r7, r3
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8c:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a8e:	69da      	ldr	r2, [r3, #28]
 8001a90:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a92:	492f      	ldr	r1, [pc, #188]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001a94:	400a      	ands	r2, r1
 8001a96:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d009      	beq.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	4393      	bics	r3, r2
 8001aaa:	0019      	movs	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2202      	movs	r2, #2
 8001abc:	4013      	ands	r3, r2
 8001abe:	d009      	beq.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ac0:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	4a23      	ldr	r2, [pc, #140]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	0019      	movs	r1, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	02db      	lsls	r3, r3, #11
 8001adc:	4013      	ands	r3, r2
 8001ade:	d009      	beq.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	0019      	movs	r1, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691a      	ldr	r2, [r3, #16]
 8001aee:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001af0:	430a      	orrs	r2, r1
 8001af2:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2220      	movs	r2, #32
 8001afa:	4013      	ands	r3, r2
 8001afc:	d009      	beq.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	2210      	movs	r2, #16
 8001b04:	4393      	bics	r3, r2
 8001b06:	0019      	movs	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d009      	beq.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	2240      	movs	r2, #64	; 0x40
 8001b24:	4393      	bics	r3, r2
 8001b26:	0019      	movs	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	699a      	ldr	r2, [r3, #24]
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	0018      	movs	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b006      	add	sp, #24
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40007000 	.word	0x40007000
 8001b44:	fffffcff 	.word	0xfffffcff
 8001b48:	fffeffff 	.word	0xfffeffff
 8001b4c:	00001388 	.word	0x00001388
 8001b50:	efffffff 	.word	0xefffffff
 8001b54:	fffcffff 	.word	0xfffcffff
 8001b58:	fff3ffff 	.word	0xfff3ffff

08001b5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e0a8      	b.n	8001cc0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d109      	bne.n	8001b8a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	2382      	movs	r3, #130	; 0x82
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d009      	beq.n	8001b96 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	61da      	str	r2, [r3, #28]
 8001b88:	e005      	b.n	8001b96 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	225d      	movs	r2, #93	; 0x5d
 8001ba0:	5c9b      	ldrb	r3, [r3, r2]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d107      	bne.n	8001bb8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	225c      	movs	r2, #92	; 0x5c
 8001bac:	2100      	movs	r1, #0
 8001bae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f7fe fd60 	bl	8000678 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	225d      	movs	r2, #93	; 0x5d
 8001bbc:	2102      	movs	r1, #2
 8001bbe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2140      	movs	r1, #64	; 0x40
 8001bcc:	438a      	bics	r2, r1
 8001bce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	23e0      	movs	r3, #224	; 0xe0
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d902      	bls.n	8001be2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	e002      	b.n	8001be8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	015b      	lsls	r3, r3, #5
 8001be6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	23f0      	movs	r3, #240	; 0xf0
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d008      	beq.n	8001c06 <HAL_SPI_Init+0xaa>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	23e0      	movs	r3, #224	; 0xe0
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d002      	beq.n	8001c06 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	2382      	movs	r3, #130	; 0x82
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	401a      	ands	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6899      	ldr	r1, [r3, #8]
 8001c14:	2384      	movs	r3, #132	; 0x84
 8001c16:	021b      	lsls	r3, r3, #8
 8001c18:	400b      	ands	r3, r1
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	2102      	movs	r1, #2
 8001c22:	400b      	ands	r3, r1
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	400b      	ands	r3, r1
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6999      	ldr	r1, [r3, #24]
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	400b      	ands	r3, r1
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	2138      	movs	r1, #56	; 0x38
 8001c42:	400b      	ands	r3, r1
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	2180      	movs	r1, #128	; 0x80
 8001c4c:	400b      	ands	r3, r1
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	0011      	movs	r1, r2
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	019b      	lsls	r3, r3, #6
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	0c1b      	lsrs	r3, r3, #16
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	401a      	ands	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	2110      	movs	r1, #16
 8001c74:	400b      	ands	r3, r1
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7c:	2108      	movs	r1, #8
 8001c7e:	400b      	ands	r3, r1
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68d9      	ldr	r1, [r3, #12]
 8001c86:	23f0      	movs	r3, #240	; 0xf0
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	400b      	ands	r3, r1
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	0011      	movs	r1, r2
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	015b      	lsls	r3, r3, #5
 8001c96:	401a      	ands	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69da      	ldr	r2, [r3, #28]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4907      	ldr	r1, [pc, #28]	; (8001cc8 <HAL_SPI_Init+0x16c>)
 8001cac:	400a      	ands	r2, r1
 8001cae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	225d      	movs	r2, #93	; 0x5d
 8001cba:	2101      	movs	r1, #1
 8001cbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b004      	add	sp, #16
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	fffff7ff 	.word	0xfffff7ff

08001ccc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	1dbb      	adds	r3, r7, #6
 8001cda:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cdc:	231f      	movs	r3, #31
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	225c      	movs	r2, #92	; 0x5c
 8001ce8:	5c9b      	ldrb	r3, [r3, r2]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_SPI_Transmit+0x26>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e140      	b.n	8001f74 <HAL_SPI_Transmit+0x2a8>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	225c      	movs	r2, #92	; 0x5c
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cfa:	f7fe feb7 	bl	8000a6c <HAL_GetTick>
 8001cfe:	0003      	movs	r3, r0
 8001d00:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001d02:	2316      	movs	r3, #22
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	1dba      	adds	r2, r7, #6
 8001d08:	8812      	ldrh	r2, [r2, #0]
 8001d0a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	225d      	movs	r2, #93	; 0x5d
 8001d10:	5c9b      	ldrb	r3, [r3, r2]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d004      	beq.n	8001d22 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001d18:	231f      	movs	r3, #31
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d20:	e11d      	b.n	8001f5e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_SPI_Transmit+0x64>
 8001d28:	1dbb      	adds	r3, r7, #6
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d104      	bne.n	8001d3a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001d30:	231f      	movs	r3, #31
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d38:	e111      	b.n	8001f5e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	225d      	movs	r2, #93	; 0x5d
 8001d3e:	2103      	movs	r1, #3
 8001d40:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	1dba      	adds	r2, r7, #6
 8001d52:	8812      	ldrh	r2, [r2, #0]
 8001d54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1dba      	adds	r2, r7, #6
 8001d5a:	8812      	ldrh	r2, [r2, #0]
 8001d5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2244      	movs	r2, #68	; 0x44
 8001d68:	2100      	movs	r1, #0
 8001d6a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2246      	movs	r2, #70	; 0x46
 8001d70:	2100      	movs	r1, #0
 8001d72:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d110      	bne.n	8001dae <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2140      	movs	r1, #64	; 0x40
 8001d98:	438a      	bics	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2180      	movs	r1, #128	; 0x80
 8001da8:	01c9      	lsls	r1, r1, #7
 8001daa:	430a      	orrs	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2240      	movs	r2, #64	; 0x40
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b40      	cmp	r3, #64	; 0x40
 8001dba:	d007      	beq.n	8001dcc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2140      	movs	r1, #64	; 0x40
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	23e0      	movs	r3, #224	; 0xe0
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d94e      	bls.n	8001e76 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d004      	beq.n	8001dea <HAL_SPI_Transmit+0x11e>
 8001de0:	2316      	movs	r3, #22
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d13f      	bne.n	8001e6a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dee:	881a      	ldrh	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfa:	1c9a      	adds	r2, r3, #2
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e0e:	e02c      	b.n	8001e6a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2202      	movs	r2, #2
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d112      	bne.n	8001e44 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e22:	881a      	ldrh	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2e:	1c9a      	adds	r2, r3, #2
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e42:	e012      	b.n	8001e6a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e44:	f7fe fe12 	bl	8000a6c <HAL_GetTick>
 8001e48:	0002      	movs	r2, r0
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d802      	bhi.n	8001e5a <HAL_SPI_Transmit+0x18e>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	d102      	bne.n	8001e60 <HAL_SPI_Transmit+0x194>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d104      	bne.n	8001e6a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8001e60:	231f      	movs	r3, #31
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	2203      	movs	r2, #3
 8001e66:	701a      	strb	r2, [r3, #0]
          goto error;
 8001e68:	e079      	b.n	8001f5e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1cd      	bne.n	8001e10 <HAL_SPI_Transmit+0x144>
 8001e74:	e04f      	b.n	8001f16 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d004      	beq.n	8001e88 <HAL_SPI_Transmit+0x1bc>
 8001e7e:	2316      	movs	r3, #22
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d141      	bne.n	8001f0c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	330c      	adds	r3, #12
 8001e92:	7812      	ldrb	r2, [r2, #0]
 8001e94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001eae:	e02d      	b.n	8001f0c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d113      	bne.n	8001ee6 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	330c      	adds	r3, #12
 8001ec8:	7812      	ldrb	r2, [r2, #0]
 8001eca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ee4:	e012      	b.n	8001f0c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ee6:	f7fe fdc1 	bl	8000a6c <HAL_GetTick>
 8001eea:	0002      	movs	r2, r0
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d802      	bhi.n	8001efc <HAL_SPI_Transmit+0x230>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	d102      	bne.n	8001f02 <HAL_SPI_Transmit+0x236>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d104      	bne.n	8001f0c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8001f02:	231f      	movs	r3, #31
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	2203      	movs	r2, #3
 8001f08:	701a      	strb	r2, [r3, #0]
          goto error;
 8001f0a:	e028      	b.n	8001f5e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1cc      	bne.n	8001eb0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	6839      	ldr	r1, [r7, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f000 fcd9 	bl	80028d4 <SPI_EndRxTxTransaction>
 8001f22:	1e03      	subs	r3, r0, #0
 8001f24:	d002      	beq.n	8001f2c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10a      	bne.n	8001f4a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f34:	2300      	movs	r3, #0
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d004      	beq.n	8001f5c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8001f52:	231f      	movs	r3, #31
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	2201      	movs	r2, #1
 8001f58:	701a      	strb	r2, [r3, #0]
 8001f5a:	e000      	b.n	8001f5e <HAL_SPI_Transmit+0x292>
  }

error:
 8001f5c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	225d      	movs	r2, #93	; 0x5d
 8001f62:	2101      	movs	r1, #1
 8001f64:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	225c      	movs	r2, #92	; 0x5c
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001f6e:	231f      	movs	r3, #31
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	781b      	ldrb	r3, [r3, #0]
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b008      	add	sp, #32
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b089      	sub	sp, #36	; 0x24
 8001f80:	af02      	add	r7, sp, #8
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	1dbb      	adds	r3, r7, #6
 8001f8a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f8c:	2317      	movs	r3, #23
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	2382      	movs	r3, #130	; 0x82
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d113      	bne.n	8001fc8 <HAL_SPI_Receive+0x4c>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10f      	bne.n	8001fc8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	225d      	movs	r2, #93	; 0x5d
 8001fac:	2104      	movs	r1, #4
 8001fae:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001fb0:	1dbb      	adds	r3, r7, #6
 8001fb2:	881c      	ldrh	r4, [r3, #0]
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	0023      	movs	r3, r4
 8001fc0:	f000 f928 	bl	8002214 <HAL_SPI_TransmitReceive>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	e11c      	b.n	8002202 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	225c      	movs	r2, #92	; 0x5c
 8001fcc:	5c9b      	ldrb	r3, [r3, r2]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_SPI_Receive+0x5a>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e115      	b.n	8002202 <HAL_SPI_Receive+0x286>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	225c      	movs	r2, #92	; 0x5c
 8001fda:	2101      	movs	r1, #1
 8001fdc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fde:	f7fe fd45 	bl	8000a6c <HAL_GetTick>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	225d      	movs	r2, #93	; 0x5d
 8001fea:	5c9b      	ldrb	r3, [r3, r2]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d004      	beq.n	8001ffc <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8001ff2:	2317      	movs	r3, #23
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ffa:	e0f7      	b.n	80021ec <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_SPI_Receive+0x8e>
 8002002:	1dbb      	adds	r3, r7, #6
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d104      	bne.n	8002014 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800200a:	2317      	movs	r3, #23
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
    goto error;
 8002012:	e0eb      	b.n	80021ec <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	225d      	movs	r2, #93	; 0x5d
 8002018:	2104      	movs	r1, #4
 800201a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1dba      	adds	r2, r7, #6
 800202c:	2144      	movs	r1, #68	; 0x44
 800202e:	8812      	ldrh	r2, [r2, #0]
 8002030:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1dba      	adds	r2, r7, #6
 8002036:	2146      	movs	r1, #70	; 0x46
 8002038:	8812      	ldrh	r2, [r2, #0]
 800203a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	23e0      	movs	r3, #224	; 0xe0
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	429a      	cmp	r2, r3
 8002064:	d908      	bls.n	8002078 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4966      	ldr	r1, [pc, #408]	; (800220c <HAL_SPI_Receive+0x290>)
 8002072:	400a      	ands	r2, r1
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	e008      	b.n	800208a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2180      	movs	r1, #128	; 0x80
 8002084:	0149      	lsls	r1, r1, #5
 8002086:	430a      	orrs	r2, r1
 8002088:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	2380      	movs	r3, #128	; 0x80
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	429a      	cmp	r2, r3
 8002094:	d10f      	bne.n	80020b6 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2140      	movs	r1, #64	; 0x40
 80020a2:	438a      	bics	r2, r1
 80020a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4957      	ldr	r1, [pc, #348]	; (8002210 <HAL_SPI_Receive+0x294>)
 80020b2:	400a      	ands	r2, r1
 80020b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2240      	movs	r2, #64	; 0x40
 80020be:	4013      	ands	r3, r2
 80020c0:	2b40      	cmp	r3, #64	; 0x40
 80020c2:	d007      	beq.n	80020d4 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2140      	movs	r1, #64	; 0x40
 80020d0:	430a      	orrs	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	23e0      	movs	r3, #224	; 0xe0
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	429a      	cmp	r2, r3
 80020de:	d900      	bls.n	80020e2 <HAL_SPI_Receive+0x166>
 80020e0:	e069      	b.n	80021b6 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80020e2:	e031      	b.n	8002148 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2201      	movs	r2, #1
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d117      	bne.n	8002122 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	330c      	adds	r3, #12
 80020f8:	001a      	movs	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	7812      	ldrb	r2, [r2, #0]
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2246      	movs	r2, #70	; 0x46
 8002112:	5a9b      	ldrh	r3, [r3, r2]
 8002114:	b29b      	uxth	r3, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	b299      	uxth	r1, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2246      	movs	r2, #70	; 0x46
 800211e:	5299      	strh	r1, [r3, r2]
 8002120:	e012      	b.n	8002148 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002122:	f7fe fca3 	bl	8000a6c <HAL_GetTick>
 8002126:	0002      	movs	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d802      	bhi.n	8002138 <HAL_SPI_Receive+0x1bc>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	3301      	adds	r3, #1
 8002136:	d102      	bne.n	800213e <HAL_SPI_Receive+0x1c2>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d104      	bne.n	8002148 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800213e:	2317      	movs	r3, #23
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	2203      	movs	r2, #3
 8002144:	701a      	strb	r2, [r3, #0]
          goto error;
 8002146:	e051      	b.n	80021ec <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2246      	movs	r2, #70	; 0x46
 800214c:	5a9b      	ldrh	r3, [r3, r2]
 800214e:	b29b      	uxth	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1c7      	bne.n	80020e4 <HAL_SPI_Receive+0x168>
 8002154:	e035      	b.n	80021c2 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2201      	movs	r2, #1
 800215e:	4013      	ands	r3, r2
 8002160:	2b01      	cmp	r3, #1
 8002162:	d115      	bne.n	8002190 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	b292      	uxth	r2, r2
 8002170:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	1c9a      	adds	r2, r3, #2
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2246      	movs	r2, #70	; 0x46
 8002180:	5a9b      	ldrh	r3, [r3, r2]
 8002182:	b29b      	uxth	r3, r3
 8002184:	3b01      	subs	r3, #1
 8002186:	b299      	uxth	r1, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2246      	movs	r2, #70	; 0x46
 800218c:	5299      	strh	r1, [r3, r2]
 800218e:	e012      	b.n	80021b6 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002190:	f7fe fc6c 	bl	8000a6c <HAL_GetTick>
 8002194:	0002      	movs	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d802      	bhi.n	80021a6 <HAL_SPI_Receive+0x22a>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	3301      	adds	r3, #1
 80021a4:	d102      	bne.n	80021ac <HAL_SPI_Receive+0x230>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d104      	bne.n	80021b6 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80021ac:	2317      	movs	r3, #23
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	2203      	movs	r2, #3
 80021b2:	701a      	strb	r2, [r3, #0]
          goto error;
 80021b4:	e01a      	b.n	80021ec <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2246      	movs	r2, #70	; 0x46
 80021ba:	5a9b      	ldrh	r3, [r3, r2]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1c9      	bne.n	8002156 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	6839      	ldr	r1, [r7, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	0018      	movs	r0, r3
 80021ca:	f000 fb25 	bl	8002818 <SPI_EndRxTransaction>
 80021ce:	1e03      	subs	r3, r0, #0
 80021d0:	d002      	beq.n	80021d8 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2220      	movs	r2, #32
 80021d6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d004      	beq.n	80021ea <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80021e0:	2317      	movs	r3, #23
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
 80021e8:	e000      	b.n	80021ec <HAL_SPI_Receive+0x270>
  }

error :
 80021ea:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	225d      	movs	r2, #93	; 0x5d
 80021f0:	2101      	movs	r1, #1
 80021f2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	225c      	movs	r2, #92	; 0x5c
 80021f8:	2100      	movs	r1, #0
 80021fa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80021fc:	2317      	movs	r3, #23
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	781b      	ldrb	r3, [r3, #0]
}
 8002202:	0018      	movs	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	b007      	add	sp, #28
 8002208:	bd90      	pop	{r4, r7, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	ffffefff 	.word	0xffffefff
 8002210:	ffffbfff 	.word	0xffffbfff

08002214 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08a      	sub	sp, #40	; 0x28
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	001a      	movs	r2, r3
 8002222:	1cbb      	adds	r3, r7, #2
 8002224:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002226:	2301      	movs	r3, #1
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800222a:	2323      	movs	r3, #35	; 0x23
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	225c      	movs	r2, #92	; 0x5c
 8002236:	5c9b      	ldrb	r3, [r3, r2]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <HAL_SPI_TransmitReceive+0x2c>
 800223c:	2302      	movs	r3, #2
 800223e:	e1b5      	b.n	80025ac <HAL_SPI_TransmitReceive+0x398>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	225c      	movs	r2, #92	; 0x5c
 8002244:	2101      	movs	r1, #1
 8002246:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002248:	f7fe fc10 	bl	8000a6c <HAL_GetTick>
 800224c:	0003      	movs	r3, r0
 800224e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002250:	201b      	movs	r0, #27
 8002252:	183b      	adds	r3, r7, r0
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	215d      	movs	r1, #93	; 0x5d
 8002258:	5c52      	ldrb	r2, [r2, r1]
 800225a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002262:	2312      	movs	r3, #18
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	1cba      	adds	r2, r7, #2
 8002268:	8812      	ldrh	r2, [r2, #0]
 800226a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800226c:	183b      	adds	r3, r7, r0
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d011      	beq.n	8002298 <HAL_SPI_TransmitReceive+0x84>
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	2382      	movs	r3, #130	; 0x82
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	429a      	cmp	r2, r3
 800227c:	d107      	bne.n	800228e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <HAL_SPI_TransmitReceive+0x7a>
 8002286:	183b      	adds	r3, r7, r0
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b04      	cmp	r3, #4
 800228c:	d004      	beq.n	8002298 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800228e:	2323      	movs	r3, #35	; 0x23
 8002290:	18fb      	adds	r3, r7, r3
 8002292:	2202      	movs	r2, #2
 8002294:	701a      	strb	r2, [r3, #0]
    goto error;
 8002296:	e17e      	b.n	8002596 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d006      	beq.n	80022ac <HAL_SPI_TransmitReceive+0x98>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_SPI_TransmitReceive+0x98>
 80022a4:	1cbb      	adds	r3, r7, #2
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d104      	bne.n	80022b6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80022ac:	2323      	movs	r3, #35	; 0x23
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
    goto error;
 80022b4:	e16f      	b.n	8002596 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	225d      	movs	r2, #93	; 0x5d
 80022ba:	5c9b      	ldrb	r3, [r3, r2]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d003      	beq.n	80022ca <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	225d      	movs	r2, #93	; 0x5d
 80022c6:	2105      	movs	r1, #5
 80022c8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1cba      	adds	r2, r7, #2
 80022da:	2146      	movs	r1, #70	; 0x46
 80022dc:	8812      	ldrh	r2, [r2, #0]
 80022de:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1cba      	adds	r2, r7, #2
 80022e4:	2144      	movs	r1, #68	; 0x44
 80022e6:	8812      	ldrh	r2, [r2, #0]
 80022e8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1cba      	adds	r2, r7, #2
 80022f4:	8812      	ldrh	r2, [r2, #0]
 80022f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1cba      	adds	r2, r7, #2
 80022fc:	8812      	ldrh	r2, [r2, #0]
 80022fe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	23e0      	movs	r3, #224	; 0xe0
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	429a      	cmp	r2, r3
 8002316:	d908      	bls.n	800232a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	49a4      	ldr	r1, [pc, #656]	; (80025b4 <HAL_SPI_TransmitReceive+0x3a0>)
 8002324:	400a      	ands	r2, r1
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	e008      	b.n	800233c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2180      	movs	r1, #128	; 0x80
 8002336:	0149      	lsls	r1, r1, #5
 8002338:	430a      	orrs	r2, r1
 800233a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2240      	movs	r2, #64	; 0x40
 8002344:	4013      	ands	r3, r2
 8002346:	2b40      	cmp	r3, #64	; 0x40
 8002348:	d007      	beq.n	800235a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2140      	movs	r1, #64	; 0x40
 8002356:	430a      	orrs	r2, r1
 8002358:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	23e0      	movs	r3, #224	; 0xe0
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	429a      	cmp	r2, r3
 8002364:	d800      	bhi.n	8002368 <HAL_SPI_TransmitReceive+0x154>
 8002366:	e07f      	b.n	8002468 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_SPI_TransmitReceive+0x168>
 8002370:	2312      	movs	r3, #18
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d000      	beq.n	800237c <HAL_SPI_TransmitReceive+0x168>
 800237a:	e069      	b.n	8002450 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002380:	881a      	ldrh	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238c:	1c9a      	adds	r2, r3, #2
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023a0:	e056      	b.n	8002450 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2202      	movs	r2, #2
 80023aa:	4013      	ands	r3, r2
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d11b      	bne.n	80023e8 <HAL_SPI_TransmitReceive+0x1d4>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d016      	beq.n	80023e8 <HAL_SPI_TransmitReceive+0x1d4>
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d113      	bne.n	80023e8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c4:	881a      	ldrh	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	1c9a      	adds	r2, r3, #2
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2201      	movs	r2, #1
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d11c      	bne.n	8002430 <HAL_SPI_TransmitReceive+0x21c>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2246      	movs	r2, #70	; 0x46
 80023fa:	5a9b      	ldrh	r3, [r3, r2]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d016      	beq.n	8002430 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	b292      	uxth	r2, r2
 800240e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	1c9a      	adds	r2, r3, #2
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2246      	movs	r2, #70	; 0x46
 800241e:	5a9b      	ldrh	r3, [r3, r2]
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b299      	uxth	r1, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2246      	movs	r2, #70	; 0x46
 800242a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800242c:	2301      	movs	r3, #1
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002430:	f7fe fb1c 	bl	8000a6c <HAL_GetTick>
 8002434:	0002      	movs	r2, r0
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800243c:	429a      	cmp	r2, r3
 800243e:	d807      	bhi.n	8002450 <HAL_SPI_TransmitReceive+0x23c>
 8002440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002442:	3301      	adds	r3, #1
 8002444:	d004      	beq.n	8002450 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8002446:	2323      	movs	r3, #35	; 0x23
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	2203      	movs	r2, #3
 800244c:	701a      	strb	r2, [r3, #0]
        goto error;
 800244e:	e0a2      	b.n	8002596 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002454:	b29b      	uxth	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1a3      	bne.n	80023a2 <HAL_SPI_TransmitReceive+0x18e>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2246      	movs	r2, #70	; 0x46
 800245e:	5a9b      	ldrh	r3, [r3, r2]
 8002460:	b29b      	uxth	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d19d      	bne.n	80023a2 <HAL_SPI_TransmitReceive+0x18e>
 8002466:	e085      	b.n	8002574 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_SPI_TransmitReceive+0x268>
 8002470:	2312      	movs	r3, #18
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d000      	beq.n	800247c <HAL_SPI_TransmitReceive+0x268>
 800247a:	e070      	b.n	800255e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	330c      	adds	r3, #12
 8002486:	7812      	ldrb	r2, [r2, #0]
 8002488:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002498:	b29b      	uxth	r3, r3
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024a2:	e05c      	b.n	800255e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2202      	movs	r2, #2
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d11c      	bne.n	80024ec <HAL_SPI_TransmitReceive+0x2d8>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d017      	beq.n	80024ec <HAL_SPI_TransmitReceive+0x2d8>
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d114      	bne.n	80024ec <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	330c      	adds	r3, #12
 80024cc:	7812      	ldrb	r2, [r2, #0]
 80024ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2201      	movs	r2, #1
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d11e      	bne.n	8002538 <HAL_SPI_TransmitReceive+0x324>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2246      	movs	r2, #70	; 0x46
 80024fe:	5a9b      	ldrh	r3, [r3, r2]
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d018      	beq.n	8002538 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	330c      	adds	r3, #12
 800250c:	001a      	movs	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	7812      	ldrb	r2, [r2, #0]
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2246      	movs	r2, #70	; 0x46
 8002526:	5a9b      	ldrh	r3, [r3, r2]
 8002528:	b29b      	uxth	r3, r3
 800252a:	3b01      	subs	r3, #1
 800252c:	b299      	uxth	r1, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2246      	movs	r2, #70	; 0x46
 8002532:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002534:	2301      	movs	r3, #1
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002538:	f7fe fa98 	bl	8000a6c <HAL_GetTick>
 800253c:	0002      	movs	r2, r0
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002544:	429a      	cmp	r2, r3
 8002546:	d802      	bhi.n	800254e <HAL_SPI_TransmitReceive+0x33a>
 8002548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254a:	3301      	adds	r3, #1
 800254c:	d102      	bne.n	8002554 <HAL_SPI_TransmitReceive+0x340>
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	2b00      	cmp	r3, #0
 8002552:	d104      	bne.n	800255e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002554:	2323      	movs	r3, #35	; 0x23
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	2203      	movs	r2, #3
 800255a:	701a      	strb	r2, [r3, #0]
        goto error;
 800255c:	e01b      	b.n	8002596 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d19d      	bne.n	80024a4 <HAL_SPI_TransmitReceive+0x290>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2246      	movs	r2, #70	; 0x46
 800256c:	5a9b      	ldrh	r3, [r3, r2]
 800256e:	b29b      	uxth	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d197      	bne.n	80024a4 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	0018      	movs	r0, r3
 800257c:	f000 f9aa 	bl	80028d4 <SPI_EndRxTxTransaction>
 8002580:	1e03      	subs	r3, r0, #0
 8002582:	d007      	beq.n	8002594 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002584:	2323      	movs	r3, #35	; 0x23
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	2201      	movs	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2220      	movs	r2, #32
 8002590:	661a      	str	r2, [r3, #96]	; 0x60
 8002592:	e000      	b.n	8002596 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002594:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	225d      	movs	r2, #93	; 0x5d
 800259a:	2101      	movs	r1, #1
 800259c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	225c      	movs	r2, #92	; 0x5c
 80025a2:	2100      	movs	r1, #0
 80025a4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80025a6:	2323      	movs	r3, #35	; 0x23
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	781b      	ldrb	r3, [r3, #0]
}
 80025ac:	0018      	movs	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b00a      	add	sp, #40	; 0x28
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	ffffefff 	.word	0xffffefff

080025b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	1dfb      	adds	r3, r7, #7
 80025c6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025c8:	f7fe fa50 	bl	8000a6c <HAL_GetTick>
 80025cc:	0002      	movs	r2, r0
 80025ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	18d3      	adds	r3, r2, r3
 80025d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025d8:	f7fe fa48 	bl	8000a6c <HAL_GetTick>
 80025dc:	0003      	movs	r3, r0
 80025de:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025e0:	4b3a      	ldr	r3, [pc, #232]	; (80026cc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	015b      	lsls	r3, r3, #5
 80025e6:	0d1b      	lsrs	r3, r3, #20
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	4353      	muls	r3, r2
 80025ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025ee:	e058      	b.n	80026a2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	3301      	adds	r3, #1
 80025f4:	d055      	beq.n	80026a2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025f6:	f7fe fa39 	bl	8000a6c <HAL_GetTick>
 80025fa:	0002      	movs	r2, r0
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	69fa      	ldr	r2, [r7, #28]
 8002602:	429a      	cmp	r2, r3
 8002604:	d902      	bls.n	800260c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d142      	bne.n	8002692 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	21e0      	movs	r1, #224	; 0xe0
 8002618:	438a      	bics	r2, r1
 800261a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	2382      	movs	r3, #130	; 0x82
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	429a      	cmp	r2, r3
 8002626:	d113      	bne.n	8002650 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	429a      	cmp	r2, r3
 8002632:	d005      	beq.n	8002640 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	429a      	cmp	r2, r3
 800263e:	d107      	bne.n	8002650 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2140      	movs	r1, #64	; 0x40
 800264c:	438a      	bics	r2, r1
 800264e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	019b      	lsls	r3, r3, #6
 8002658:	429a      	cmp	r2, r3
 800265a:	d110      	bne.n	800267e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	491a      	ldr	r1, [pc, #104]	; (80026d0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002668:	400a      	ands	r2, r1
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2180      	movs	r1, #128	; 0x80
 8002678:	0189      	lsls	r1, r1, #6
 800267a:	430a      	orrs	r2, r1
 800267c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	225d      	movs	r2, #93	; 0x5d
 8002682:	2101      	movs	r1, #1
 8002684:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	225c      	movs	r2, #92	; 0x5c
 800268a:	2100      	movs	r1, #0
 800268c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e017      	b.n	80026c2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	3b01      	subs	r3, #1
 80026a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	4013      	ands	r3, r2
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	425a      	negs	r2, r3
 80026b2:	4153      	adcs	r3, r2
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	001a      	movs	r2, r3
 80026b8:	1dfb      	adds	r3, r7, #7
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d197      	bne.n	80025f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	0018      	movs	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b008      	add	sp, #32
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	20000000 	.word	0x20000000
 80026d0:	ffffdfff 	.word	0xffffdfff

080026d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	; 0x28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80026e2:	2317      	movs	r3, #23
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80026ea:	f7fe f9bf 	bl	8000a6c <HAL_GetTick>
 80026ee:	0002      	movs	r2, r0
 80026f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	18d3      	adds	r3, r2, r3
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80026fa:	f7fe f9b7 	bl	8000a6c <HAL_GetTick>
 80026fe:	0003      	movs	r3, r0
 8002700:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	330c      	adds	r3, #12
 8002708:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800270a:	4b41      	ldr	r3, [pc, #260]	; (8002810 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	0013      	movs	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	189b      	adds	r3, r3, r2
 8002714:	00da      	lsls	r2, r3, #3
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	0d1b      	lsrs	r3, r3, #20
 800271a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271c:	4353      	muls	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002720:	e068      	b.n	80027f4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	23c0      	movs	r3, #192	; 0xc0
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	429a      	cmp	r2, r3
 800272a:	d10a      	bne.n	8002742 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d107      	bne.n	8002742 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	2117      	movs	r1, #23
 800273a:	187b      	adds	r3, r7, r1
 800273c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800273e:	187b      	adds	r3, r7, r1
 8002740:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	d055      	beq.n	80027f4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002748:	f7fe f990 	bl	8000a6c <HAL_GetTick>
 800274c:	0002      	movs	r2, r0
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002754:	429a      	cmp	r2, r3
 8002756:	d902      	bls.n	800275e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	2b00      	cmp	r3, #0
 800275c:	d142      	bne.n	80027e4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	21e0      	movs	r1, #224	; 0xe0
 800276a:	438a      	bics	r2, r1
 800276c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	2382      	movs	r3, #130	; 0x82
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	429a      	cmp	r2, r3
 8002778:	d113      	bne.n	80027a2 <SPI_WaitFifoStateUntilTimeout+0xce>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	021b      	lsls	r3, r3, #8
 8002782:	429a      	cmp	r2, r3
 8002784:	d005      	beq.n	8002792 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	429a      	cmp	r2, r3
 8002790:	d107      	bne.n	80027a2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2140      	movs	r1, #64	; 0x40
 800279e:	438a      	bics	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	019b      	lsls	r3, r3, #6
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d110      	bne.n	80027d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4916      	ldr	r1, [pc, #88]	; (8002814 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80027ba:	400a      	ands	r2, r1
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2180      	movs	r1, #128	; 0x80
 80027ca:	0189      	lsls	r1, r1, #6
 80027cc:	430a      	orrs	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	225d      	movs	r2, #93	; 0x5d
 80027d4:	2101      	movs	r1, #1
 80027d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	225c      	movs	r2, #92	; 0x5c
 80027dc:	2100      	movs	r1, #0
 80027de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e010      	b.n	8002806 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	4013      	ands	r3, r2
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	429a      	cmp	r2, r3
 8002802:	d18e      	bne.n	8002722 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	0018      	movs	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	b00a      	add	sp, #40	; 0x28
 800280c:	bd80      	pop	{r7, pc}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	20000000 	.word	0x20000000
 8002814:	ffffdfff 	.word	0xffffdfff

08002818 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	2382      	movs	r3, #130	; 0x82
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	429a      	cmp	r2, r3
 800282e:	d113      	bne.n	8002858 <SPI_EndRxTransaction+0x40>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	429a      	cmp	r2, r3
 800283a:	d005      	beq.n	8002848 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	429a      	cmp	r2, r3
 8002846:	d107      	bne.n	8002858 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2140      	movs	r1, #64	; 0x40
 8002854:	438a      	bics	r2, r1
 8002856:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	0013      	movs	r3, r2
 8002862:	2200      	movs	r2, #0
 8002864:	2180      	movs	r1, #128	; 0x80
 8002866:	f7ff fea7 	bl	80025b8 <SPI_WaitFlagStateUntilTimeout>
 800286a:	1e03      	subs	r3, r0, #0
 800286c:	d007      	beq.n	800287e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002872:	2220      	movs	r2, #32
 8002874:	431a      	orrs	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e026      	b.n	80028cc <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	2382      	movs	r3, #130	; 0x82
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	429a      	cmp	r2, r3
 8002888:	d11f      	bne.n	80028ca <SPI_EndRxTransaction+0xb2>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	021b      	lsls	r3, r3, #8
 8002892:	429a      	cmp	r2, r3
 8002894:	d005      	beq.n	80028a2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	429a      	cmp	r2, r3
 80028a0:	d113      	bne.n	80028ca <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	23c0      	movs	r3, #192	; 0xc0
 80028a6:	00d9      	lsls	r1, r3, #3
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	0013      	movs	r3, r2
 80028b0:	2200      	movs	r2, #0
 80028b2:	f7ff ff0f 	bl	80026d4 <SPI_WaitFifoStateUntilTimeout>
 80028b6:	1e03      	subs	r3, r0, #0
 80028b8:	d007      	beq.n	80028ca <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028be:	2220      	movs	r2, #32
 80028c0:	431a      	orrs	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e000      	b.n	80028cc <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	0018      	movs	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b004      	add	sp, #16
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	23c0      	movs	r3, #192	; 0xc0
 80028e4:	0159      	lsls	r1, r3, #5
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	0013      	movs	r3, r2
 80028ee:	2200      	movs	r2, #0
 80028f0:	f7ff fef0 	bl	80026d4 <SPI_WaitFifoStateUntilTimeout>
 80028f4:	1e03      	subs	r3, r0, #0
 80028f6:	d007      	beq.n	8002908 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fc:	2220      	movs	r2, #32
 80028fe:	431a      	orrs	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e027      	b.n	8002958 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	0013      	movs	r3, r2
 8002912:	2200      	movs	r2, #0
 8002914:	2180      	movs	r1, #128	; 0x80
 8002916:	f7ff fe4f 	bl	80025b8 <SPI_WaitFlagStateUntilTimeout>
 800291a:	1e03      	subs	r3, r0, #0
 800291c:	d007      	beq.n	800292e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002922:	2220      	movs	r2, #32
 8002924:	431a      	orrs	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e014      	b.n	8002958 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	23c0      	movs	r3, #192	; 0xc0
 8002932:	00d9      	lsls	r1, r3, #3
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	0013      	movs	r3, r2
 800293c:	2200      	movs	r2, #0
 800293e:	f7ff fec9 	bl	80026d4 <SPI_WaitFifoStateUntilTimeout>
 8002942:	1e03      	subs	r3, r0, #0
 8002944:	d007      	beq.n	8002956 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800294a:	2220      	movs	r2, #32
 800294c:	431a      	orrs	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e000      	b.n	8002958 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	0018      	movs	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	b004      	add	sp, #16
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e044      	b.n	80029fc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002976:	2b00      	cmp	r3, #0
 8002978:	d107      	bne.n	800298a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2274      	movs	r2, #116	; 0x74
 800297e:	2100      	movs	r1, #0
 8002980:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	0018      	movs	r0, r3
 8002986:	f7fd fee9 	bl	800075c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2224      	movs	r2, #36	; 0x24
 800298e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2101      	movs	r1, #1
 800299c:	438a      	bics	r2, r1
 800299e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	0018      	movs	r0, r3
 80029a4:	f000 f830 	bl	8002a08 <UART_SetConfig>
 80029a8:	0003      	movs	r3, r0
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e024      	b.n	80029fc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	0018      	movs	r0, r3
 80029be:	f000 fa0b 	bl	8002dd8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	490d      	ldr	r1, [pc, #52]	; (8002a04 <HAL_UART_Init+0xa4>)
 80029ce:	400a      	ands	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	212a      	movs	r1, #42	; 0x2a
 80029de:	438a      	bics	r2, r1
 80029e0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2101      	movs	r1, #1
 80029ee:	430a      	orrs	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 faa3 	bl	8002f40 <UART_CheckIdleState>
 80029fa:	0003      	movs	r3, r0
}
 80029fc:	0018      	movs	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b002      	add	sp, #8
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	ffffb7ff 	.word	0xffffb7ff

08002a08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a10:	231e      	movs	r3, #30
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4abe      	ldr	r2, [pc, #760]	; (8002d30 <UART_SetConfig+0x328>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4ab9      	ldr	r2, [pc, #740]	; (8002d34 <UART_SetConfig+0x32c>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	0019      	movs	r1, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4ab0      	ldr	r2, [pc, #704]	; (8002d38 <UART_SetConfig+0x330>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	0019      	movs	r1, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4aac      	ldr	r2, [pc, #688]	; (8002d3c <UART_SetConfig+0x334>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d127      	bne.n	8002ade <UART_SetConfig+0xd6>
 8002a8e:	4bac      	ldr	r3, [pc, #688]	; (8002d40 <UART_SetConfig+0x338>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	2203      	movs	r2, #3
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d00d      	beq.n	8002ab6 <UART_SetConfig+0xae>
 8002a9a:	d81b      	bhi.n	8002ad4 <UART_SetConfig+0xcc>
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d014      	beq.n	8002aca <UART_SetConfig+0xc2>
 8002aa0:	d818      	bhi.n	8002ad4 <UART_SetConfig+0xcc>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <UART_SetConfig+0xa4>
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d00a      	beq.n	8002ac0 <UART_SetConfig+0xb8>
 8002aaa:	e013      	b.n	8002ad4 <UART_SetConfig+0xcc>
 8002aac:	231f      	movs	r3, #31
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	e0bd      	b.n	8002c32 <UART_SetConfig+0x22a>
 8002ab6:	231f      	movs	r3, #31
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	2202      	movs	r2, #2
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	e0b8      	b.n	8002c32 <UART_SetConfig+0x22a>
 8002ac0:	231f      	movs	r3, #31
 8002ac2:	18fb      	adds	r3, r7, r3
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	e0b3      	b.n	8002c32 <UART_SetConfig+0x22a>
 8002aca:	231f      	movs	r3, #31
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	2208      	movs	r2, #8
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	e0ae      	b.n	8002c32 <UART_SetConfig+0x22a>
 8002ad4:	231f      	movs	r3, #31
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	2210      	movs	r2, #16
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	e0a9      	b.n	8002c32 <UART_SetConfig+0x22a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a98      	ldr	r2, [pc, #608]	; (8002d44 <UART_SetConfig+0x33c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d134      	bne.n	8002b52 <UART_SetConfig+0x14a>
 8002ae8:	4b95      	ldr	r3, [pc, #596]	; (8002d40 <UART_SetConfig+0x338>)
 8002aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aec:	23c0      	movs	r3, #192	; 0xc0
 8002aee:	029b      	lsls	r3, r3, #10
 8002af0:	4013      	ands	r3, r2
 8002af2:	22c0      	movs	r2, #192	; 0xc0
 8002af4:	0292      	lsls	r2, r2, #10
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d017      	beq.n	8002b2a <UART_SetConfig+0x122>
 8002afa:	22c0      	movs	r2, #192	; 0xc0
 8002afc:	0292      	lsls	r2, r2, #10
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d822      	bhi.n	8002b48 <UART_SetConfig+0x140>
 8002b02:	2280      	movs	r2, #128	; 0x80
 8002b04:	0292      	lsls	r2, r2, #10
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d019      	beq.n	8002b3e <UART_SetConfig+0x136>
 8002b0a:	2280      	movs	r2, #128	; 0x80
 8002b0c:	0292      	lsls	r2, r2, #10
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d81a      	bhi.n	8002b48 <UART_SetConfig+0x140>
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d004      	beq.n	8002b20 <UART_SetConfig+0x118>
 8002b16:	2280      	movs	r2, #128	; 0x80
 8002b18:	0252      	lsls	r2, r2, #9
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00a      	beq.n	8002b34 <UART_SetConfig+0x12c>
 8002b1e:	e013      	b.n	8002b48 <UART_SetConfig+0x140>
 8002b20:	231f      	movs	r3, #31
 8002b22:	18fb      	adds	r3, r7, r3
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
 8002b28:	e083      	b.n	8002c32 <UART_SetConfig+0x22a>
 8002b2a:	231f      	movs	r3, #31
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	2202      	movs	r2, #2
 8002b30:	701a      	strb	r2, [r3, #0]
 8002b32:	e07e      	b.n	8002c32 <UART_SetConfig+0x22a>
 8002b34:	231f      	movs	r3, #31
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	2204      	movs	r2, #4
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e079      	b.n	8002c32 <UART_SetConfig+0x22a>
 8002b3e:	231f      	movs	r3, #31
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	2208      	movs	r2, #8
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	e074      	b.n	8002c32 <UART_SetConfig+0x22a>
 8002b48:	231f      	movs	r3, #31
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	2210      	movs	r2, #16
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	e06f      	b.n	8002c32 <UART_SetConfig+0x22a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a7c      	ldr	r2, [pc, #496]	; (8002d48 <UART_SetConfig+0x340>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d134      	bne.n	8002bc6 <UART_SetConfig+0x1be>
 8002b5c:	4b78      	ldr	r3, [pc, #480]	; (8002d40 <UART_SetConfig+0x338>)
 8002b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b60:	23c0      	movs	r3, #192	; 0xc0
 8002b62:	031b      	lsls	r3, r3, #12
 8002b64:	4013      	ands	r3, r2
 8002b66:	22c0      	movs	r2, #192	; 0xc0
 8002b68:	0312      	lsls	r2, r2, #12
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d017      	beq.n	8002b9e <UART_SetConfig+0x196>
 8002b6e:	22c0      	movs	r2, #192	; 0xc0
 8002b70:	0312      	lsls	r2, r2, #12
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d822      	bhi.n	8002bbc <UART_SetConfig+0x1b4>
 8002b76:	2280      	movs	r2, #128	; 0x80
 8002b78:	0312      	lsls	r2, r2, #12
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d019      	beq.n	8002bb2 <UART_SetConfig+0x1aa>
 8002b7e:	2280      	movs	r2, #128	; 0x80
 8002b80:	0312      	lsls	r2, r2, #12
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d81a      	bhi.n	8002bbc <UART_SetConfig+0x1b4>
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d004      	beq.n	8002b94 <UART_SetConfig+0x18c>
 8002b8a:	2280      	movs	r2, #128	; 0x80
 8002b8c:	02d2      	lsls	r2, r2, #11
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00a      	beq.n	8002ba8 <UART_SetConfig+0x1a0>
 8002b92:	e013      	b.n	8002bbc <UART_SetConfig+0x1b4>
 8002b94:	231f      	movs	r3, #31
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]
 8002b9c:	e049      	b.n	8002c32 <UART_SetConfig+0x22a>
 8002b9e:	231f      	movs	r3, #31
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	e044      	b.n	8002c32 <UART_SetConfig+0x22a>
 8002ba8:	231f      	movs	r3, #31
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	2204      	movs	r2, #4
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	e03f      	b.n	8002c32 <UART_SetConfig+0x22a>
 8002bb2:	231f      	movs	r3, #31
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	2208      	movs	r2, #8
 8002bb8:	701a      	strb	r2, [r3, #0]
 8002bba:	e03a      	b.n	8002c32 <UART_SetConfig+0x22a>
 8002bbc:	231f      	movs	r3, #31
 8002bbe:	18fb      	adds	r3, r7, r3
 8002bc0:	2210      	movs	r2, #16
 8002bc2:	701a      	strb	r2, [r3, #0]
 8002bc4:	e035      	b.n	8002c32 <UART_SetConfig+0x22a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a60      	ldr	r2, [pc, #384]	; (8002d4c <UART_SetConfig+0x344>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d104      	bne.n	8002bda <UART_SetConfig+0x1d2>
 8002bd0:	231f      	movs	r3, #31
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]
 8002bd8:	e02b      	b.n	8002c32 <UART_SetConfig+0x22a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a5c      	ldr	r2, [pc, #368]	; (8002d50 <UART_SetConfig+0x348>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d104      	bne.n	8002bee <UART_SetConfig+0x1e6>
 8002be4:	231f      	movs	r3, #31
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	e021      	b.n	8002c32 <UART_SetConfig+0x22a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a58      	ldr	r2, [pc, #352]	; (8002d54 <UART_SetConfig+0x34c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d104      	bne.n	8002c02 <UART_SetConfig+0x1fa>
 8002bf8:	231f      	movs	r3, #31
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
 8002c00:	e017      	b.n	8002c32 <UART_SetConfig+0x22a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a54      	ldr	r2, [pc, #336]	; (8002d58 <UART_SetConfig+0x350>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d104      	bne.n	8002c16 <UART_SetConfig+0x20e>
 8002c0c:	231f      	movs	r3, #31
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	e00d      	b.n	8002c32 <UART_SetConfig+0x22a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a50      	ldr	r2, [pc, #320]	; (8002d5c <UART_SetConfig+0x354>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d104      	bne.n	8002c2a <UART_SetConfig+0x222>
 8002c20:	231f      	movs	r3, #31
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
 8002c28:	e003      	b.n	8002c32 <UART_SetConfig+0x22a>
 8002c2a:	231f      	movs	r3, #31
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	2210      	movs	r2, #16
 8002c30:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69da      	ldr	r2, [r3, #28]
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	021b      	lsls	r3, r3, #8
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d15d      	bne.n	8002cfa <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8002c3e:	231f      	movs	r3, #31
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d015      	beq.n	8002c74 <UART_SetConfig+0x26c>
 8002c48:	dc18      	bgt.n	8002c7c <UART_SetConfig+0x274>
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d00d      	beq.n	8002c6a <UART_SetConfig+0x262>
 8002c4e:	dc15      	bgt.n	8002c7c <UART_SetConfig+0x274>
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <UART_SetConfig+0x252>
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d005      	beq.n	8002c64 <UART_SetConfig+0x25c>
 8002c58:	e010      	b.n	8002c7c <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c5a:	f7fe fe69 	bl	8001930 <HAL_RCC_GetPCLK1Freq>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	61bb      	str	r3, [r7, #24]
        break;
 8002c62:	e012      	b.n	8002c8a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c64:	4b3e      	ldr	r3, [pc, #248]	; (8002d60 <UART_SetConfig+0x358>)
 8002c66:	61bb      	str	r3, [r7, #24]
        break;
 8002c68:	e00f      	b.n	8002c8a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c6a:	f7fe fdd7 	bl	800181c <HAL_RCC_GetSysClockFreq>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	61bb      	str	r3, [r7, #24]
        break;
 8002c72:	e00a      	b.n	8002c8a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	61bb      	str	r3, [r7, #24]
        break;
 8002c7a:	e006      	b.n	8002c8a <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c80:	231e      	movs	r3, #30
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
        break;
 8002c88:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d100      	bne.n	8002c92 <UART_SetConfig+0x28a>
 8002c90:	e095      	b.n	8002dbe <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	005a      	lsls	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	085b      	lsrs	r3, r3, #1
 8002c9c:	18d2      	adds	r2, r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	0010      	movs	r0, r2
 8002ca6:	f7fd fa37 	bl	8000118 <__udivsi3>
 8002caa:	0003      	movs	r3, r0
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2b0f      	cmp	r3, #15
 8002cb4:	d91c      	bls.n	8002cf0 <UART_SetConfig+0x2e8>
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	2380      	movs	r3, #128	; 0x80
 8002cba:	025b      	lsls	r3, r3, #9
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d217      	bcs.n	8002cf0 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	200e      	movs	r0, #14
 8002cc6:	183b      	adds	r3, r7, r0
 8002cc8:	210f      	movs	r1, #15
 8002cca:	438a      	bics	r2, r1
 8002ccc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	085b      	lsrs	r3, r3, #1
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2207      	movs	r2, #7
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	b299      	uxth	r1, r3
 8002cda:	183b      	adds	r3, r7, r0
 8002cdc:	183a      	adds	r2, r7, r0
 8002cde:	8812      	ldrh	r2, [r2, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	183a      	adds	r2, r7, r0
 8002cea:	8812      	ldrh	r2, [r2, #0]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	e066      	b.n	8002dbe <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002cf0:	231e      	movs	r3, #30
 8002cf2:	18fb      	adds	r3, r7, r3
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	701a      	strb	r2, [r3, #0]
 8002cf8:	e061      	b.n	8002dbe <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cfa:	231f      	movs	r3, #31
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d02f      	beq.n	8002d64 <UART_SetConfig+0x35c>
 8002d04:	dc32      	bgt.n	8002d6c <UART_SetConfig+0x364>
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d00d      	beq.n	8002d26 <UART_SetConfig+0x31e>
 8002d0a:	dc2f      	bgt.n	8002d6c <UART_SetConfig+0x364>
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <UART_SetConfig+0x30e>
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d005      	beq.n	8002d20 <UART_SetConfig+0x318>
 8002d14:	e02a      	b.n	8002d6c <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d16:	f7fe fe0b 	bl	8001930 <HAL_RCC_GetPCLK1Freq>
 8002d1a:	0003      	movs	r3, r0
 8002d1c:	61bb      	str	r3, [r7, #24]
        break;
 8002d1e:	e02c      	b.n	8002d7a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <UART_SetConfig+0x358>)
 8002d22:	61bb      	str	r3, [r7, #24]
        break;
 8002d24:	e029      	b.n	8002d7a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d26:	f7fe fd79 	bl	800181c <HAL_RCC_GetSysClockFreq>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	61bb      	str	r3, [r7, #24]
        break;
 8002d2e:	e024      	b.n	8002d7a <UART_SetConfig+0x372>
 8002d30:	efff69f3 	.word	0xefff69f3
 8002d34:	ffffcfff 	.word	0xffffcfff
 8002d38:	fffff4ff 	.word	0xfffff4ff
 8002d3c:	40013800 	.word	0x40013800
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40004400 	.word	0x40004400
 8002d48:	40004800 	.word	0x40004800
 8002d4c:	40004c00 	.word	0x40004c00
 8002d50:	40005000 	.word	0x40005000
 8002d54:	40011400 	.word	0x40011400
 8002d58:	40011800 	.word	0x40011800
 8002d5c:	40011c00 	.word	0x40011c00
 8002d60:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	61bb      	str	r3, [r7, #24]
        break;
 8002d6a:	e006      	b.n	8002d7a <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d70:	231e      	movs	r3, #30
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
        break;
 8002d78:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01e      	beq.n	8002dbe <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	085a      	lsrs	r2, r3, #1
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	18d2      	adds	r2, r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	0019      	movs	r1, r3
 8002d90:	0010      	movs	r0, r2
 8002d92:	f7fd f9c1 	bl	8000118 <__udivsi3>
 8002d96:	0003      	movs	r3, r0
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	2b0f      	cmp	r3, #15
 8002da0:	d909      	bls.n	8002db6 <UART_SetConfig+0x3ae>
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	025b      	lsls	r3, r3, #9
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d204      	bcs.n	8002db6 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	60da      	str	r2, [r3, #12]
 8002db4:	e003      	b.n	8002dbe <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002db6:	231e      	movs	r3, #30
 8002db8:	18fb      	adds	r3, r7, r3
 8002dba:	2201      	movs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002dca:	231e      	movs	r3, #30
 8002dcc:	18fb      	adds	r3, r7, r3
 8002dce:	781b      	ldrb	r3, [r3, #0]
}
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b008      	add	sp, #32
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	2201      	movs	r2, #1
 8002de6:	4013      	ands	r3, r2
 8002de8:	d00b      	beq.n	8002e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4a4a      	ldr	r2, [pc, #296]	; (8002f1c <UART_AdvFeatureConfig+0x144>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	0019      	movs	r1, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	2202      	movs	r2, #2
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d00b      	beq.n	8002e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4a43      	ldr	r2, [pc, #268]	; (8002f20 <UART_AdvFeatureConfig+0x148>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	0019      	movs	r1, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	2204      	movs	r2, #4
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d00b      	beq.n	8002e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	4a3b      	ldr	r2, [pc, #236]	; (8002f24 <UART_AdvFeatureConfig+0x14c>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	0019      	movs	r1, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d00b      	beq.n	8002e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4a34      	ldr	r2, [pc, #208]	; (8002f28 <UART_AdvFeatureConfig+0x150>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	2210      	movs	r2, #16
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d00b      	beq.n	8002e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	4a2c      	ldr	r2, [pc, #176]	; (8002f2c <UART_AdvFeatureConfig+0x154>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	2220      	movs	r2, #32
 8002e90:	4013      	ands	r3, r2
 8002e92:	d00b      	beq.n	8002eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	4a25      	ldr	r2, [pc, #148]	; (8002f30 <UART_AdvFeatureConfig+0x158>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	2240      	movs	r2, #64	; 0x40
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d01d      	beq.n	8002ef2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4a1d      	ldr	r2, [pc, #116]	; (8002f34 <UART_AdvFeatureConfig+0x15c>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	035b      	lsls	r3, r3, #13
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d10b      	bne.n	8002ef2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4a15      	ldr	r2, [pc, #84]	; (8002f38 <UART_AdvFeatureConfig+0x160>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	2280      	movs	r2, #128	; 0x80
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d00b      	beq.n	8002f14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	4a0e      	ldr	r2, [pc, #56]	; (8002f3c <UART_AdvFeatureConfig+0x164>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	0019      	movs	r1, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	605a      	str	r2, [r3, #4]
  }
}
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	fffdffff 	.word	0xfffdffff
 8002f20:	fffeffff 	.word	0xfffeffff
 8002f24:	fffbffff 	.word	0xfffbffff
 8002f28:	ffff7fff 	.word	0xffff7fff
 8002f2c:	ffffefff 	.word	0xffffefff
 8002f30:	ffffdfff 	.word	0xffffdfff
 8002f34:	ffefffff 	.word	0xffefffff
 8002f38:	ff9fffff 	.word	0xff9fffff
 8002f3c:	fff7ffff 	.word	0xfff7ffff

08002f40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2280      	movs	r2, #128	; 0x80
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f50:	f7fd fd8c 	bl	8000a6c <HAL_GetTick>
 8002f54:	0003      	movs	r3, r0
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2208      	movs	r2, #8
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d10c      	bne.n	8002f80 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2280      	movs	r2, #128	; 0x80
 8002f6a:	0391      	lsls	r1, r2, #14
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4a17      	ldr	r2, [pc, #92]	; (8002fcc <UART_CheckIdleState+0x8c>)
 8002f70:	9200      	str	r2, [sp, #0]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f000 f82c 	bl	8002fd0 <UART_WaitOnFlagUntilTimeout>
 8002f78:	1e03      	subs	r3, r0, #0
 8002f7a:	d001      	beq.n	8002f80 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e021      	b.n	8002fc4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2204      	movs	r2, #4
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d10c      	bne.n	8002fa8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2280      	movs	r2, #128	; 0x80
 8002f92:	03d1      	lsls	r1, r2, #15
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	4a0d      	ldr	r2, [pc, #52]	; (8002fcc <UART_CheckIdleState+0x8c>)
 8002f98:	9200      	str	r2, [sp, #0]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f000 f818 	bl	8002fd0 <UART_WaitOnFlagUntilTimeout>
 8002fa0:	1e03      	subs	r3, r0, #0
 8002fa2:	d001      	beq.n	8002fa8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e00d      	b.n	8002fc4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2274      	movs	r2, #116	; 0x74
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b004      	add	sp, #16
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	01ffffff 	.word	0x01ffffff

08002fd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b094      	sub	sp, #80	; 0x50
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	1dfb      	adds	r3, r7, #7
 8002fde:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fe0:	e0a3      	b.n	800312a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	d100      	bne.n	8002fea <UART_WaitOnFlagUntilTimeout+0x1a>
 8002fe8:	e09f      	b.n	800312a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fea:	f7fd fd3f 	bl	8000a6c <HAL_GetTick>
 8002fee:	0002      	movs	r2, r0
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d302      	bcc.n	8003000 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d13d      	bne.n	800307c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003000:	f3ef 8310 	mrs	r3, PRIMASK
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003008:	647b      	str	r3, [r7, #68]	; 0x44
 800300a:	2301      	movs	r3, #1
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003010:	f383 8810 	msr	PRIMASK, r3
}
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	494c      	ldr	r1, [pc, #304]	; (8003154 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003022:	400a      	ands	r2, r1
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003028:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	f383 8810 	msr	PRIMASK, r3
}
 8003030:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003032:	f3ef 8310 	mrs	r3, PRIMASK
 8003036:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303a:	643b      	str	r3, [r7, #64]	; 0x40
 800303c:	2301      	movs	r3, #1
 800303e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003042:	f383 8810 	msr	PRIMASK, r3
}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2101      	movs	r1, #1
 8003054:	438a      	bics	r2, r1
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800305a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800305e:	f383 8810 	msr	PRIMASK, r3
}
 8003062:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2274      	movs	r2, #116	; 0x74
 8003074:	2100      	movs	r1, #0
 8003076:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e067      	b.n	800314c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2204      	movs	r2, #4
 8003084:	4013      	ands	r3, r2
 8003086:	d050      	beq.n	800312a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69da      	ldr	r2, [r3, #28]
 800308e:	2380      	movs	r3, #128	; 0x80
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	401a      	ands	r2, r3
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	429a      	cmp	r2, r3
 800309a:	d146      	bne.n	800312a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2280      	movs	r2, #128	; 0x80
 80030a2:	0112      	lsls	r2, r2, #4
 80030a4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a6:	f3ef 8310 	mrs	r3, PRIMASK
 80030aa:	613b      	str	r3, [r7, #16]
  return(result);
 80030ac:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030b0:	2301      	movs	r3, #1
 80030b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f383 8810 	msr	PRIMASK, r3
}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4923      	ldr	r1, [pc, #140]	; (8003154 <UART_WaitOnFlagUntilTimeout+0x184>)
 80030c8:	400a      	ands	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	f383 8810 	msr	PRIMASK, r3
}
 80030d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d8:	f3ef 8310 	mrs	r3, PRIMASK
 80030dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80030de:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80030e2:	2301      	movs	r3, #1
 80030e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	f383 8810 	msr	PRIMASK, r3
}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2101      	movs	r1, #1
 80030fa:	438a      	bics	r2, r1
 80030fc:	609a      	str	r2, [r3, #8]
 80030fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	f383 8810 	msr	PRIMASK, r3
}
 8003108:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2280      	movs	r2, #128	; 0x80
 800311a:	2120      	movs	r1, #32
 800311c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2274      	movs	r2, #116	; 0x74
 8003122:	2100      	movs	r1, #0
 8003124:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e010      	b.n	800314c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	4013      	ands	r3, r2
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	425a      	negs	r2, r3
 800313a:	4153      	adcs	r3, r2
 800313c:	b2db      	uxtb	r3, r3
 800313e:	001a      	movs	r2, r3
 8003140:	1dfb      	adds	r3, r7, #7
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d100      	bne.n	800314a <UART_WaitOnFlagUntilTimeout+0x17a>
 8003148:	e74b      	b.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	0018      	movs	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	b014      	add	sp, #80	; 0x50
 8003152:	bd80      	pop	{r7, pc}
 8003154:	fffffe5f 	.word	0xfffffe5f

08003158 <PacketInit>:
* @return            none
* @note              none
*********************************************************************************************
*/
void PacketInit(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
    //initialize buffer in big endian byte array
    header[3] = (HEADER & 0x000000ff);
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <PacketInit+0x24>)
 800315e:	2250      	movs	r2, #80	; 0x50
 8003160:	70da      	strb	r2, [r3, #3]
    header[2] = (HEADER & 0x0000ff00) >> 8;
 8003162:	4b06      	ldr	r3, [pc, #24]	; (800317c <PacketInit+0x24>)
 8003164:	2253      	movs	r2, #83	; 0x53
 8003166:	709a      	strb	r2, [r3, #2]
    header[1] = (HEADER & 0x00ff0000) >> 16;
 8003168:	4b04      	ldr	r3, [pc, #16]	; (800317c <PacketInit+0x24>)
 800316a:	2255      	movs	r2, #85	; 0x55
 800316c:	705a      	strb	r2, [r3, #1]
    header[0] = (HEADER & 0xff000000) >> 24;
 800316e:	4b03      	ldr	r3, [pc, #12]	; (800317c <PacketInit+0x24>)
 8003170:	224d      	movs	r2, #77	; 0x4d
 8003172:	701a      	strb	r2, [r3, #0]
}
 8003174:	46c0      	nop			; (mov r8, r8)
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	200005a4 	.word	0x200005a4

08003180 <PacketAssemble>:
* @return            none
* @note              none
*********************************************************************************************
*/
void PacketAssemble(uint8_t id, uint8_t cmd, uint8_t *arg, uint8_t argSize, uint8_t *buffer)
{
 8003180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003182:	46c6      	mov	lr, r8
 8003184:	b500      	push	{lr}
 8003186:	b08e      	sub	sp, #56	; 0x38
 8003188:	af00      	add	r7, sp, #0
 800318a:	0006      	movs	r6, r0
 800318c:	0008      	movs	r0, r1
 800318e:	61ba      	str	r2, [r7, #24]
 8003190:	0019      	movs	r1, r3
 8003192:	231f      	movs	r3, #31
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	1c32      	adds	r2, r6, #0
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	221e      	movs	r2, #30
 800319c:	18bb      	adds	r3, r7, r2
 800319e:	1c02      	adds	r2, r0, #0
 80031a0:	701a      	strb	r2, [r3, #0]
 80031a2:	261d      	movs	r6, #29
 80031a4:	19bb      	adds	r3, r7, r6
 80031a6:	1c0a      	adds	r2, r1, #0
 80031a8:	701a      	strb	r2, [r3, #0]
    //Add header to the buffer
    memcpy(buffer, header, sizeof(header));
 80031aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80031ac:	4b5a      	ldr	r3, [pc, #360]	; (8003318 <PacketAssemble+0x198>)
 80031ae:	0010      	movs	r0, r2
 80031b0:	0019      	movs	r1, r3
 80031b2:	2304      	movs	r3, #4
 80031b4:	001a      	movs	r2, r3
 80031b6:	f000 fa07 	bl	80035c8 <memcpy>
    //Add id, cmd and argsize to the buffer
    buffer[4] = id;
 80031ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031bc:	3304      	adds	r3, #4
 80031be:	211f      	movs	r1, #31
 80031c0:	187a      	adds	r2, r7, r1
 80031c2:	7812      	ldrb	r2, [r2, #0]
 80031c4:	701a      	strb	r2, [r3, #0]
    buffer[5] = cmd;
 80031c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031c8:	3305      	adds	r3, #5
 80031ca:	221e      	movs	r2, #30
 80031cc:	18ba      	adds	r2, r7, r2
 80031ce:	7812      	ldrb	r2, [r2, #0]
 80031d0:	701a      	strb	r2, [r3, #0]
    buffer[6] = argSize;
 80031d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d4:	3306      	adds	r3, #6
 80031d6:	19ba      	adds	r2, r7, r6
 80031d8:	7812      	ldrb	r2, [r2, #0]
 80031da:	701a      	strb	r2, [r3, #0]
    uint8_t lastPos;

    //check if command has an argument and add them to array
    if (argSize)
 80031dc:	19bb      	adds	r3, r7, r6
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d01f      	beq.n	8003224 <PacketAssemble+0xa4>
    {
        for (int i = 0; i < argSize; i++)
 80031e4:	2300      	movs	r3, #0
 80031e6:	637b      	str	r3, [r7, #52]	; 0x34
 80031e8:	e015      	b.n	8003216 <PacketAssemble+0x96>
        {
            buffer[7 + i] = arg[i];
 80031ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	18d2      	adds	r2, r2, r3
 80031f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f2:	3307      	adds	r3, #7
 80031f4:	0019      	movs	r1, r3
 80031f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031f8:	185b      	adds	r3, r3, r1
 80031fa:	7812      	ldrb	r2, [r2, #0]
 80031fc:	701a      	strb	r2, [r3, #0]
            lastPos = 7 + i;
 80031fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003200:	b2da      	uxtb	r2, r3
 8003202:	231b      	movs	r3, #27
 8003204:	2118      	movs	r1, #24
 8003206:	468c      	mov	ip, r1
 8003208:	44bc      	add	ip, r7
 800320a:	4463      	add	r3, ip
 800320c:	3207      	adds	r2, #7
 800320e:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < argSize; i++)
 8003210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003212:	3301      	adds	r3, #1
 8003214:	637b      	str	r3, [r7, #52]	; 0x34
 8003216:	231d      	movs	r3, #29
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800321e:	429a      	cmp	r2, r3
 8003220:	dbe3      	blt.n	80031ea <PacketAssemble+0x6a>
 8003222:	e006      	b.n	8003232 <PacketAssemble+0xb2>
        }
    }
    else
    {
        lastPos = 7;
 8003224:	231b      	movs	r3, #27
 8003226:	2218      	movs	r2, #24
 8003228:	4694      	mov	ip, r2
 800322a:	44bc      	add	ip, r7
 800322c:	4463      	add	r3, ip
 800322e:	2207      	movs	r2, #7
 8003230:	701a      	strb	r2, [r3, #0]
    }
    //calculate CRC
    uint8_t tempData[lastPos+1];
 8003232:	231b      	movs	r3, #27
 8003234:	2218      	movs	r2, #24
 8003236:	4694      	mov	ip, r2
 8003238:	44bc      	add	ip, r7
 800323a:	4463      	add	r3, ip
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	1c5e      	adds	r6, r3, #1
 8003240:	466b      	mov	r3, sp
 8003242:	4698      	mov	r8, r3
 8003244:	1e73      	subs	r3, r6, #1
 8003246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003248:	0033      	movs	r3, r6
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	68b9      	ldr	r1, [r7, #8]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	0008      	movs	r0, r1
 8003256:	0f43      	lsrs	r3, r0, #29
 8003258:	0010      	movs	r0, r2
 800325a:	00c0      	lsls	r0, r0, #3
 800325c:	6178      	str	r0, [r7, #20]
 800325e:	6978      	ldr	r0, [r7, #20]
 8003260:	4318      	orrs	r0, r3
 8003262:	6178      	str	r0, [r7, #20]
 8003264:	000a      	movs	r2, r1
 8003266:	00d2      	lsls	r2, r2, #3
 8003268:	613a      	str	r2, [r7, #16]
 800326a:	0033      	movs	r3, r6
 800326c:	603b      	str	r3, [r7, #0]
 800326e:	2300      	movs	r3, #0
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	6839      	ldr	r1, [r7, #0]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	0008      	movs	r0, r1
 8003278:	0f43      	lsrs	r3, r0, #29
 800327a:	0010      	movs	r0, r2
 800327c:	00c5      	lsls	r5, r0, #3
 800327e:	431d      	orrs	r5, r3
 8003280:	000a      	movs	r2, r1
 8003282:	00d4      	lsls	r4, r2, #3
 8003284:	0033      	movs	r3, r6
 8003286:	3307      	adds	r3, #7
 8003288:	08db      	lsrs	r3, r3, #3
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	466a      	mov	r2, sp
 800328e:	1ad2      	subs	r2, r2, r3
 8003290:	4695      	mov	sp, r2
 8003292:	466b      	mov	r3, sp
 8003294:	3300      	adds	r3, #0
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t CRC[4];
    memcpy(tempData, buffer, sizeof(tempData));
 8003298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329a:	0032      	movs	r2, r6
 800329c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800329e:	0018      	movs	r0, r3
 80032a0:	f000 f992 	bl	80035c8 <memcpy>
    uint32_t calcCRC = crc32(0, tempData, sizeof(tempData));
 80032a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a6:	0032      	movs	r2, r6
 80032a8:	0019      	movs	r1, r3
 80032aa:	2000      	movs	r0, #0
 80032ac:	f000 f92a 	bl	8003504 <crc32>
 80032b0:	0003      	movs	r3, r0
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24


    //add crc in big endian at the end of the buffer
    CRC[3] = (calcCRC & 0x000000ff);
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	2108      	movs	r1, #8
 80032ba:	2018      	movs	r0, #24
 80032bc:	183b      	adds	r3, r7, r0
 80032be:	185b      	adds	r3, r3, r1
 80032c0:	70da      	strb	r2, [r3, #3]
    CRC[2] = (calcCRC & 0x0000ff00) >> 8;
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	0a1b      	lsrs	r3, r3, #8
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	183b      	adds	r3, r7, r0
 80032ca:	185b      	adds	r3, r3, r1
 80032cc:	709a      	strb	r2, [r3, #2]
    CRC[1] = (calcCRC & 0x00ff0000) >> 16;
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	0c1b      	lsrs	r3, r3, #16
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	183b      	adds	r3, r7, r0
 80032d6:	185b      	adds	r3, r3, r1
 80032d8:	705a      	strb	r2, [r3, #1]
    CRC[0] = (calcCRC & 0xff000000) >> 24;
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	0e1b      	lsrs	r3, r3, #24
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	183b      	adds	r3, r7, r0
 80032e2:	185b      	adds	r3, r3, r1
 80032e4:	701a      	strb	r2, [r3, #0]
    memcpy(buffer+lastPos+1,CRC,sizeof(CRC));
 80032e6:	231b      	movs	r3, #27
 80032e8:	2218      	movs	r2, #24
 80032ea:	4694      	mov	ip, r2
 80032ec:	44bc      	add	ip, r7
 80032ee:	4463      	add	r3, ip
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	3301      	adds	r3, #1
 80032f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80032f6:	18d2      	adds	r2, r2, r3
 80032f8:	183b      	adds	r3, r7, r0
 80032fa:	185b      	adds	r3, r3, r1
 80032fc:	0010      	movs	r0, r2
 80032fe:	0019      	movs	r1, r3
 8003300:	2304      	movs	r3, #4
 8003302:	001a      	movs	r2, r3
 8003304:	f000 f960 	bl	80035c8 <memcpy>
 8003308:	46c5      	mov	sp, r8
}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	46bd      	mov	sp, r7
 800330e:	b00e      	add	sp, #56	; 0x38
 8003310:	bc80      	pop	{r7}
 8003312:	46b8      	mov	r8, r7
 8003314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	200005a4 	.word	0x200005a4

0800331c <PacketDisassemble>:
* @return            packet disassemble status: DEFRAME_OK = ok, DEFRAME_INVALID_HEADER = can't find header in the buffer, DEFRAME_INVALID_CRC = crc doesn't match
* @note              none
*********************************************************************************************
*/
deframeReturn PacketDisassemble(uint8_t *id, uint8_t *len, uint8_t *cmd, uint8_t *arg, uint8_t *buffer, int bufferSize)
{
 800331c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800331e:	46c6      	mov	lr, r8
 8003320:	b500      	push	{lr}
 8003322:	b094      	sub	sp, #80	; 0x50
 8003324:	af00      	add	r7, sp, #0
 8003326:	6278      	str	r0, [r7, #36]	; 0x24
 8003328:	6239      	str	r1, [r7, #32]
 800332a:	61fa      	str	r2, [r7, #28]
 800332c:	61bb      	str	r3, [r7, #24]
    /*Search for header*/
    int pos = -1;
 800332e:	2301      	movs	r3, #1
 8003330:	425b      	negs	r3, r3
 8003332:	64bb      	str	r3, [r7, #72]	; 0x48
    for (int i = 0; i < bufferSize; i++)
 8003334:	2300      	movs	r3, #0
 8003336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003338:	e032      	b.n	80033a0 <PacketDisassemble+0x84>
    {
        if ((buffer[i] == header[0]) & (bufferSize - i >= MINPKTLEN))//find a start of header before length of message - 4
 800333a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800333c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800333e:	18d3      	adds	r3, r2, r3
 8003340:	781a      	ldrb	r2, [r3, #0]
 8003342:	4b6f      	ldr	r3, [pc, #444]	; (8003500 <PacketDisassemble+0x1e4>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	425a      	negs	r2, r3
 800334a:	4153      	adcs	r3, r2
 800334c:	b2db      	uxtb	r3, r3
 800334e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003350:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003352:	1a8a      	subs	r2, r1, r2
 8003354:	2101      	movs	r1, #1
 8003356:	2a0a      	cmp	r2, #10
 8003358:	dc01      	bgt.n	800335e <PacketDisassemble+0x42>
 800335a:	2200      	movs	r2, #0
 800335c:	1c11      	adds	r1, r2, #0
 800335e:	b2ca      	uxtb	r2, r1
 8003360:	4013      	ands	r3, r2
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d018      	beq.n	800339a <PacketDisassemble+0x7e>
        {
            uint8_t cmpHeader[4];
            memcpy(cmpHeader, buffer + i, 4);
 8003368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800336a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800336c:	18d3      	adds	r3, r2, r3
 800336e:	2618      	movs	r6, #24
 8003370:	2218      	movs	r2, #24
 8003372:	18b9      	adds	r1, r7, r2
 8003374:	198a      	adds	r2, r1, r6
 8003376:	0010      	movs	r0, r2
 8003378:	0019      	movs	r1, r3
 800337a:	2304      	movs	r3, #4
 800337c:	001a      	movs	r2, r3
 800337e:	f000 f923 	bl	80035c8 <memcpy>
            if (!memcmp(cmpHeader, header, 4))
 8003382:	495f      	ldr	r1, [pc, #380]	; (8003500 <PacketDisassemble+0x1e4>)
 8003384:	2318      	movs	r3, #24
 8003386:	18fb      	adds	r3, r7, r3
 8003388:	199b      	adds	r3, r3, r6
 800338a:	2204      	movs	r2, #4
 800338c:	0018      	movs	r0, r3
 800338e:	f000 f90d 	bl	80035ac <memcmp>
 8003392:	1e03      	subs	r3, r0, #0
 8003394:	d101      	bne.n	800339a <PacketDisassemble+0x7e>
            {
                pos = i;//set the position of the start of the message
 8003396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003398:	64bb      	str	r3, [r7, #72]	; 0x48
    for (int i = 0; i < bufferSize; i++)
 800339a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800339c:	3301      	adds	r3, #1
 800339e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a4:	429a      	cmp	r2, r3
 80033a6:	dbc8      	blt.n	800333a <PacketDisassemble+0x1e>
            }
        }
    }
    if (pos == -1)//cant find header
 80033a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033aa:	3301      	adds	r3, #1
 80033ac:	d101      	bne.n	80033b2 <PacketDisassemble+0x96>
    {
        return DEFRAME_INVALID_HEADER;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e0a0      	b.n	80034f4 <PacketDisassemble+0x1d8>
    }
    else
    {
 80033b2:	466b      	mov	r3, sp
 80033b4:	4698      	mov	r8, r3
        //CRC verification

        uint32_t givenCRC;
        uint8_t tempCRC[4];
        uint8_t actualLen = buffer[pos + 6] + 1 + 1 + 1+ 4;
 80033b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033b8:	3306      	adds	r3, #6
 80033ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033bc:	18d3      	adds	r3, r2, r3
 80033be:	781a      	ldrb	r2, [r3, #0]
 80033c0:	212f      	movs	r1, #47	; 0x2f
 80033c2:	2018      	movs	r0, #24
 80033c4:	183b      	adds	r3, r7, r0
 80033c6:	185b      	adds	r3, r3, r1
 80033c8:	3207      	adds	r2, #7
 80033ca:	701a      	strb	r2, [r3, #0]
        memcpy(tempCRC,buffer+(pos+actualLen),4);//get CRC in the packet
 80033cc:	183b      	adds	r3, r7, r0
 80033ce:	185b      	adds	r3, r3, r1
 80033d0:	781a      	ldrb	r2, [r3, #0]
 80033d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d4:	18d3      	adds	r3, r2, r3
 80033d6:	001a      	movs	r2, r3
 80033d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033da:	189b      	adds	r3, r3, r2
 80033dc:	2614      	movs	r6, #20
 80033de:	183a      	adds	r2, r7, r0
 80033e0:	1992      	adds	r2, r2, r6
 80033e2:	0010      	movs	r0, r2
 80033e4:	0019      	movs	r1, r3
 80033e6:	2304      	movs	r3, #4
 80033e8:	001a      	movs	r2, r3
 80033ea:	f000 f8ed 	bl	80035c8 <memcpy>
        givenCRC=(tempCRC[0]<<24)|(tempCRC[1]<<16)|(tempCRC[2]<<8)|(tempCRC[3]);//make the CRC in uint32 form
 80033ee:	0031      	movs	r1, r6
 80033f0:	2018      	movs	r0, #24
 80033f2:	183b      	adds	r3, r7, r0
 80033f4:	185b      	adds	r3, r3, r1
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	061a      	lsls	r2, r3, #24
 80033fa:	183b      	adds	r3, r7, r0
 80033fc:	185b      	adds	r3, r3, r1
 80033fe:	785b      	ldrb	r3, [r3, #1]
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	431a      	orrs	r2, r3
 8003404:	183b      	adds	r3, r7, r0
 8003406:	185b      	adds	r3, r3, r1
 8003408:	789b      	ldrb	r3, [r3, #2]
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	4313      	orrs	r3, r2
 800340e:	183a      	adds	r2, r7, r0
 8003410:	1852      	adds	r2, r2, r1
 8003412:	78d2      	ldrb	r2, [r2, #3]
 8003414:	4313      	orrs	r3, r2
 8003416:	643b      	str	r3, [r7, #64]	; 0x40

        //copy everything in the packet except the crc (the last 4 bytes)
        uint8_t tempData[actualLen];
 8003418:	212f      	movs	r1, #47	; 0x2f
 800341a:	183b      	adds	r3, r7, r0
 800341c:	185b      	adds	r3, r3, r1
 800341e:	781e      	ldrb	r6, [r3, #0]
 8003420:	0033      	movs	r3, r6
 8003422:	3b01      	subs	r3, #1
 8003424:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003426:	60be      	str	r6, [r7, #8]
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	0008      	movs	r0, r1
 8003432:	0f43      	lsrs	r3, r0, #29
 8003434:	0010      	movs	r0, r2
 8003436:	00c0      	lsls	r0, r0, #3
 8003438:	6178      	str	r0, [r7, #20]
 800343a:	6978      	ldr	r0, [r7, #20]
 800343c:	4318      	orrs	r0, r3
 800343e:	6178      	str	r0, [r7, #20]
 8003440:	000a      	movs	r2, r1
 8003442:	00d2      	lsls	r2, r2, #3
 8003444:	613a      	str	r2, [r7, #16]
 8003446:	603e      	str	r6, [r7, #0]
 8003448:	2300      	movs	r3, #0
 800344a:	607b      	str	r3, [r7, #4]
 800344c:	6839      	ldr	r1, [r7, #0]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	0008      	movs	r0, r1
 8003452:	0f43      	lsrs	r3, r0, #29
 8003454:	0010      	movs	r0, r2
 8003456:	00c5      	lsls	r5, r0, #3
 8003458:	431d      	orrs	r5, r3
 800345a:	000a      	movs	r2, r1
 800345c:	00d4      	lsls	r4, r2, #3
 800345e:	0033      	movs	r3, r6
 8003460:	3307      	adds	r3, #7
 8003462:	08db      	lsrs	r3, r3, #3
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	466a      	mov	r2, sp
 8003468:	1ad2      	subs	r2, r2, r3
 800346a:	4695      	mov	sp, r2
 800346c:	466b      	mov	r3, sp
 800346e:	3300      	adds	r3, #0
 8003470:	63bb      	str	r3, [r7, #56]	; 0x38
        memcpy(tempData,buffer+pos,actualLen);
 8003472:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003476:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003478:	18d1      	adds	r1, r2, r3
 800347a:	232f      	movs	r3, #47	; 0x2f
 800347c:	2218      	movs	r2, #24
 800347e:	4694      	mov	ip, r2
 8003480:	44bc      	add	ip, r7
 8003482:	4463      	add	r3, ip
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	001a      	movs	r2, r3
 8003488:	f000 f89e 	bl	80035c8 <memcpy>

        uint32_t calcCRC = crc32(0,tempData,sizeof(tempData));//calculate the checksum crc32 of the copied message
 800348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348e:	0032      	movs	r2, r6
 8003490:	0019      	movs	r1, r3
 8003492:	2000      	movs	r0, #0
 8003494:	f000 f836 	bl	8003504 <crc32>
 8003498:	0003      	movs	r3, r0
 800349a:	637b      	str	r3, [r7, #52]	; 0x34
        if (calcCRC!=givenCRC){
 800349c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800349e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <PacketDisassemble+0x18c>
            return DEFRAME_INVALID_CRC;//return because crc doesnt match
 80034a4:	2302      	movs	r3, #2
 80034a6:	e024      	b.n	80034f2 <PacketDisassemble+0x1d6>
        }

        *id = buffer[pos + 4];
 80034a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034aa:	3304      	adds	r3, #4
 80034ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034ae:	18d3      	adds	r3, r2, r3
 80034b0:	781a      	ldrb	r2, [r3, #0]
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	701a      	strb	r2, [r3, #0]
        *len = buffer[pos+6];
 80034b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034b8:	3306      	adds	r3, #6
 80034ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034bc:	18d3      	adds	r3, r2, r3
 80034be:	781a      	ldrb	r2, [r3, #0]
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	701a      	strb	r2, [r3, #0]
        *cmd = buffer[pos + 5];
 80034c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c6:	3305      	adds	r3, #5
 80034c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034ca:	18d3      	adds	r3, r2, r3
 80034cc:	781a      	ldrb	r2, [r3, #0]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	701a      	strb	r2, [r3, #0]

        if (*len != 0)//len !=0 means there is a argument to the command
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <PacketDisassemble+0x1d4>
        {
            memcpy(arg, buffer + pos + 7, *len );
 80034da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034dc:	3307      	adds	r3, #7
 80034de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034e0:	18d1      	adds	r1, r2, r3
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	001a      	movs	r2, r3
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	0018      	movs	r0, r3
 80034ec:	f000 f86c 	bl	80035c8 <memcpy>
        }
        return DEFRAME_OK;//return with ok
 80034f0:	2300      	movs	r3, #0
 80034f2:	46c5      	mov	sp, r8
    }

}
 80034f4:	0018      	movs	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b014      	add	sp, #80	; 0x50
 80034fa:	bc80      	pop	{r7}
 80034fc:	46b8      	mov	r8, r7
 80034fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003500:	200005a4 	.word	0x200005a4

08003504 <crc32>:
* @note              Used polynomial is 0x04C11DB7. Implementation is standard table algorithm
*                    with reflection and byte reversal. Implementation details borrowed from literature.
*********************************************************************************************
*/
DWORD crc32(DWORD crc, BYTE *buf, DWORD size)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
    BYTE* p = buf;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	617b      	str	r3, [r7, #20]

    crc = ~crc;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	43db      	mvns	r3, r3
 8003518:	60fb      	str	r3, [r7, #12]

    while (size--)
 800351a:	e00f      	b.n	800353c <crc32+0x38>
        crc = crc32_tab[(BYTE)crc ^ *p++] ^ (crc >> 8);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	b2da      	uxtb	r2, r3
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	1c59      	adds	r1, r3, #1
 8003524:	6179      	str	r1, [r7, #20]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	4053      	eors	r3, r2
 800352a:	b2db      	uxtb	r3, r3
 800352c:	001a      	movs	r2, r3
 800352e:	4b09      	ldr	r3, [pc, #36]	; (8003554 <crc32+0x50>)
 8003530:	0092      	lsls	r2, r2, #2
 8003532:	58d2      	ldr	r2, [r2, r3]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	0a1b      	lsrs	r3, r3, #8
 8003538:	4053      	eors	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
    while (size--)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	1e5a      	subs	r2, r3, #1
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1ea      	bne.n	800351c <crc32+0x18>

    return ~crc;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	43db      	mvns	r3, r3
}
 800354a:	0018      	movs	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	b006      	add	sp, #24
 8003550:	bd80      	pop	{r7, pc}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	2000000c 	.word	0x2000000c

08003558 <__errno>:
 8003558:	4b01      	ldr	r3, [pc, #4]	; (8003560 <__errno+0x8>)
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	4770      	bx	lr
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	2000040c 	.word	0x2000040c

08003564 <__libc_init_array>:
 8003564:	b570      	push	{r4, r5, r6, lr}
 8003566:	2600      	movs	r6, #0
 8003568:	4d0c      	ldr	r5, [pc, #48]	; (800359c <__libc_init_array+0x38>)
 800356a:	4c0d      	ldr	r4, [pc, #52]	; (80035a0 <__libc_init_array+0x3c>)
 800356c:	1b64      	subs	r4, r4, r5
 800356e:	10a4      	asrs	r4, r4, #2
 8003570:	42a6      	cmp	r6, r4
 8003572:	d109      	bne.n	8003588 <__libc_init_array+0x24>
 8003574:	2600      	movs	r6, #0
 8003576:	f000 ffd7 	bl	8004528 <_init>
 800357a:	4d0a      	ldr	r5, [pc, #40]	; (80035a4 <__libc_init_array+0x40>)
 800357c:	4c0a      	ldr	r4, [pc, #40]	; (80035a8 <__libc_init_array+0x44>)
 800357e:	1b64      	subs	r4, r4, r5
 8003580:	10a4      	asrs	r4, r4, #2
 8003582:	42a6      	cmp	r6, r4
 8003584:	d105      	bne.n	8003592 <__libc_init_array+0x2e>
 8003586:	bd70      	pop	{r4, r5, r6, pc}
 8003588:	00b3      	lsls	r3, r6, #2
 800358a:	58eb      	ldr	r3, [r5, r3]
 800358c:	4798      	blx	r3
 800358e:	3601      	adds	r6, #1
 8003590:	e7ee      	b.n	8003570 <__libc_init_array+0xc>
 8003592:	00b3      	lsls	r3, r6, #2
 8003594:	58eb      	ldr	r3, [r5, r3]
 8003596:	4798      	blx	r3
 8003598:	3601      	adds	r6, #1
 800359a:	e7f2      	b.n	8003582 <__libc_init_array+0x1e>
 800359c:	08004674 	.word	0x08004674
 80035a0:	08004674 	.word	0x08004674
 80035a4:	08004674 	.word	0x08004674
 80035a8:	08004678 	.word	0x08004678

080035ac <memcmp>:
 80035ac:	b530      	push	{r4, r5, lr}
 80035ae:	2400      	movs	r4, #0
 80035b0:	3901      	subs	r1, #1
 80035b2:	42a2      	cmp	r2, r4
 80035b4:	d101      	bne.n	80035ba <memcmp+0xe>
 80035b6:	2000      	movs	r0, #0
 80035b8:	e005      	b.n	80035c6 <memcmp+0x1a>
 80035ba:	5d03      	ldrb	r3, [r0, r4]
 80035bc:	3401      	adds	r4, #1
 80035be:	5d0d      	ldrb	r5, [r1, r4]
 80035c0:	42ab      	cmp	r3, r5
 80035c2:	d0f6      	beq.n	80035b2 <memcmp+0x6>
 80035c4:	1b58      	subs	r0, r3, r5
 80035c6:	bd30      	pop	{r4, r5, pc}

080035c8 <memcpy>:
 80035c8:	2300      	movs	r3, #0
 80035ca:	b510      	push	{r4, lr}
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d100      	bne.n	80035d2 <memcpy+0xa>
 80035d0:	bd10      	pop	{r4, pc}
 80035d2:	5ccc      	ldrb	r4, [r1, r3]
 80035d4:	54c4      	strb	r4, [r0, r3]
 80035d6:	3301      	adds	r3, #1
 80035d8:	e7f8      	b.n	80035cc <memcpy+0x4>

080035da <memset>:
 80035da:	0003      	movs	r3, r0
 80035dc:	1882      	adds	r2, r0, r2
 80035de:	4293      	cmp	r3, r2
 80035e0:	d100      	bne.n	80035e4 <memset+0xa>
 80035e2:	4770      	bx	lr
 80035e4:	7019      	strb	r1, [r3, #0]
 80035e6:	3301      	adds	r3, #1
 80035e8:	e7f9      	b.n	80035de <memset+0x4>
	...

080035ec <iprintf>:
 80035ec:	b40f      	push	{r0, r1, r2, r3}
 80035ee:	4b0b      	ldr	r3, [pc, #44]	; (800361c <iprintf+0x30>)
 80035f0:	b513      	push	{r0, r1, r4, lr}
 80035f2:	681c      	ldr	r4, [r3, #0]
 80035f4:	2c00      	cmp	r4, #0
 80035f6:	d005      	beq.n	8003604 <iprintf+0x18>
 80035f8:	69a3      	ldr	r3, [r4, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d102      	bne.n	8003604 <iprintf+0x18>
 80035fe:	0020      	movs	r0, r4
 8003600:	f000 f870 	bl	80036e4 <__sinit>
 8003604:	ab05      	add	r3, sp, #20
 8003606:	0020      	movs	r0, r4
 8003608:	9a04      	ldr	r2, [sp, #16]
 800360a:	68a1      	ldr	r1, [r4, #8]
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	f000 f993 	bl	8003938 <_vfiprintf_r>
 8003612:	bc16      	pop	{r1, r2, r4}
 8003614:	bc08      	pop	{r3}
 8003616:	b004      	add	sp, #16
 8003618:	4718      	bx	r3
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	2000040c 	.word	0x2000040c

08003620 <std>:
 8003620:	2300      	movs	r3, #0
 8003622:	b510      	push	{r4, lr}
 8003624:	0004      	movs	r4, r0
 8003626:	6003      	str	r3, [r0, #0]
 8003628:	6043      	str	r3, [r0, #4]
 800362a:	6083      	str	r3, [r0, #8]
 800362c:	8181      	strh	r1, [r0, #12]
 800362e:	6643      	str	r3, [r0, #100]	; 0x64
 8003630:	0019      	movs	r1, r3
 8003632:	81c2      	strh	r2, [r0, #14]
 8003634:	6103      	str	r3, [r0, #16]
 8003636:	6143      	str	r3, [r0, #20]
 8003638:	6183      	str	r3, [r0, #24]
 800363a:	2208      	movs	r2, #8
 800363c:	305c      	adds	r0, #92	; 0x5c
 800363e:	f7ff ffcc 	bl	80035da <memset>
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <std+0x38>)
 8003644:	6263      	str	r3, [r4, #36]	; 0x24
 8003646:	4b05      	ldr	r3, [pc, #20]	; (800365c <std+0x3c>)
 8003648:	6224      	str	r4, [r4, #32]
 800364a:	62a3      	str	r3, [r4, #40]	; 0x28
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <std+0x40>)
 800364e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003650:	4b04      	ldr	r3, [pc, #16]	; (8003664 <std+0x44>)
 8003652:	6323      	str	r3, [r4, #48]	; 0x30
 8003654:	bd10      	pop	{r4, pc}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	08003ed5 	.word	0x08003ed5
 800365c:	08003efd 	.word	0x08003efd
 8003660:	08003f35 	.word	0x08003f35
 8003664:	08003f61 	.word	0x08003f61

08003668 <_cleanup_r>:
 8003668:	b510      	push	{r4, lr}
 800366a:	4902      	ldr	r1, [pc, #8]	; (8003674 <_cleanup_r+0xc>)
 800366c:	f000 f8ba 	bl	80037e4 <_fwalk_reent>
 8003670:	bd10      	pop	{r4, pc}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	0800426d 	.word	0x0800426d

08003678 <__sfmoreglue>:
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	2568      	movs	r5, #104	; 0x68
 800367c:	1e4a      	subs	r2, r1, #1
 800367e:	4355      	muls	r5, r2
 8003680:	000e      	movs	r6, r1
 8003682:	0029      	movs	r1, r5
 8003684:	3174      	adds	r1, #116	; 0x74
 8003686:	f000 f8d1 	bl	800382c <_malloc_r>
 800368a:	1e04      	subs	r4, r0, #0
 800368c:	d008      	beq.n	80036a0 <__sfmoreglue+0x28>
 800368e:	2100      	movs	r1, #0
 8003690:	002a      	movs	r2, r5
 8003692:	6001      	str	r1, [r0, #0]
 8003694:	6046      	str	r6, [r0, #4]
 8003696:	300c      	adds	r0, #12
 8003698:	60a0      	str	r0, [r4, #8]
 800369a:	3268      	adds	r2, #104	; 0x68
 800369c:	f7ff ff9d 	bl	80035da <memset>
 80036a0:	0020      	movs	r0, r4
 80036a2:	bd70      	pop	{r4, r5, r6, pc}

080036a4 <__sfp_lock_acquire>:
 80036a4:	b510      	push	{r4, lr}
 80036a6:	4802      	ldr	r0, [pc, #8]	; (80036b0 <__sfp_lock_acquire+0xc>)
 80036a8:	f000 f8bd 	bl	8003826 <__retarget_lock_acquire_recursive>
 80036ac:	bd10      	pop	{r4, pc}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	200005b0 	.word	0x200005b0

080036b4 <__sfp_lock_release>:
 80036b4:	b510      	push	{r4, lr}
 80036b6:	4802      	ldr	r0, [pc, #8]	; (80036c0 <__sfp_lock_release+0xc>)
 80036b8:	f000 f8b6 	bl	8003828 <__retarget_lock_release_recursive>
 80036bc:	bd10      	pop	{r4, pc}
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	200005b0 	.word	0x200005b0

080036c4 <__sinit_lock_acquire>:
 80036c4:	b510      	push	{r4, lr}
 80036c6:	4802      	ldr	r0, [pc, #8]	; (80036d0 <__sinit_lock_acquire+0xc>)
 80036c8:	f000 f8ad 	bl	8003826 <__retarget_lock_acquire_recursive>
 80036cc:	bd10      	pop	{r4, pc}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	200005ab 	.word	0x200005ab

080036d4 <__sinit_lock_release>:
 80036d4:	b510      	push	{r4, lr}
 80036d6:	4802      	ldr	r0, [pc, #8]	; (80036e0 <__sinit_lock_release+0xc>)
 80036d8:	f000 f8a6 	bl	8003828 <__retarget_lock_release_recursive>
 80036dc:	bd10      	pop	{r4, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	200005ab 	.word	0x200005ab

080036e4 <__sinit>:
 80036e4:	b513      	push	{r0, r1, r4, lr}
 80036e6:	0004      	movs	r4, r0
 80036e8:	f7ff ffec 	bl	80036c4 <__sinit_lock_acquire>
 80036ec:	69a3      	ldr	r3, [r4, #24]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <__sinit+0x14>
 80036f2:	f7ff ffef 	bl	80036d4 <__sinit_lock_release>
 80036f6:	bd13      	pop	{r0, r1, r4, pc}
 80036f8:	64a3      	str	r3, [r4, #72]	; 0x48
 80036fa:	64e3      	str	r3, [r4, #76]	; 0x4c
 80036fc:	6523      	str	r3, [r4, #80]	; 0x50
 80036fe:	4b13      	ldr	r3, [pc, #76]	; (800374c <__sinit+0x68>)
 8003700:	4a13      	ldr	r2, [pc, #76]	; (8003750 <__sinit+0x6c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	62a2      	str	r2, [r4, #40]	; 0x28
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	42a3      	cmp	r3, r4
 800370a:	d101      	bne.n	8003710 <__sinit+0x2c>
 800370c:	2301      	movs	r3, #1
 800370e:	61a3      	str	r3, [r4, #24]
 8003710:	0020      	movs	r0, r4
 8003712:	f000 f81f 	bl	8003754 <__sfp>
 8003716:	6060      	str	r0, [r4, #4]
 8003718:	0020      	movs	r0, r4
 800371a:	f000 f81b 	bl	8003754 <__sfp>
 800371e:	60a0      	str	r0, [r4, #8]
 8003720:	0020      	movs	r0, r4
 8003722:	f000 f817 	bl	8003754 <__sfp>
 8003726:	2200      	movs	r2, #0
 8003728:	2104      	movs	r1, #4
 800372a:	60e0      	str	r0, [r4, #12]
 800372c:	6860      	ldr	r0, [r4, #4]
 800372e:	f7ff ff77 	bl	8003620 <std>
 8003732:	2201      	movs	r2, #1
 8003734:	2109      	movs	r1, #9
 8003736:	68a0      	ldr	r0, [r4, #8]
 8003738:	f7ff ff72 	bl	8003620 <std>
 800373c:	2202      	movs	r2, #2
 800373e:	2112      	movs	r1, #18
 8003740:	68e0      	ldr	r0, [r4, #12]
 8003742:	f7ff ff6d 	bl	8003620 <std>
 8003746:	2301      	movs	r3, #1
 8003748:	61a3      	str	r3, [r4, #24]
 800374a:	e7d2      	b.n	80036f2 <__sinit+0xe>
 800374c:	080045dc 	.word	0x080045dc
 8003750:	08003669 	.word	0x08003669

08003754 <__sfp>:
 8003754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003756:	0007      	movs	r7, r0
 8003758:	f7ff ffa4 	bl	80036a4 <__sfp_lock_acquire>
 800375c:	4b1f      	ldr	r3, [pc, #124]	; (80037dc <__sfp+0x88>)
 800375e:	681e      	ldr	r6, [r3, #0]
 8003760:	69b3      	ldr	r3, [r6, #24]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <__sfp+0x18>
 8003766:	0030      	movs	r0, r6
 8003768:	f7ff ffbc 	bl	80036e4 <__sinit>
 800376c:	3648      	adds	r6, #72	; 0x48
 800376e:	68b4      	ldr	r4, [r6, #8]
 8003770:	6873      	ldr	r3, [r6, #4]
 8003772:	3b01      	subs	r3, #1
 8003774:	d504      	bpl.n	8003780 <__sfp+0x2c>
 8003776:	6833      	ldr	r3, [r6, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d022      	beq.n	80037c2 <__sfp+0x6e>
 800377c:	6836      	ldr	r6, [r6, #0]
 800377e:	e7f6      	b.n	800376e <__sfp+0x1a>
 8003780:	220c      	movs	r2, #12
 8003782:	5ea5      	ldrsh	r5, [r4, r2]
 8003784:	2d00      	cmp	r5, #0
 8003786:	d11a      	bne.n	80037be <__sfp+0x6a>
 8003788:	0020      	movs	r0, r4
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <__sfp+0x8c>)
 800378c:	3058      	adds	r0, #88	; 0x58
 800378e:	60e3      	str	r3, [r4, #12]
 8003790:	6665      	str	r5, [r4, #100]	; 0x64
 8003792:	f000 f847 	bl	8003824 <__retarget_lock_init_recursive>
 8003796:	f7ff ff8d 	bl	80036b4 <__sfp_lock_release>
 800379a:	0020      	movs	r0, r4
 800379c:	2208      	movs	r2, #8
 800379e:	0029      	movs	r1, r5
 80037a0:	6025      	str	r5, [r4, #0]
 80037a2:	60a5      	str	r5, [r4, #8]
 80037a4:	6065      	str	r5, [r4, #4]
 80037a6:	6125      	str	r5, [r4, #16]
 80037a8:	6165      	str	r5, [r4, #20]
 80037aa:	61a5      	str	r5, [r4, #24]
 80037ac:	305c      	adds	r0, #92	; 0x5c
 80037ae:	f7ff ff14 	bl	80035da <memset>
 80037b2:	6365      	str	r5, [r4, #52]	; 0x34
 80037b4:	63a5      	str	r5, [r4, #56]	; 0x38
 80037b6:	64a5      	str	r5, [r4, #72]	; 0x48
 80037b8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80037ba:	0020      	movs	r0, r4
 80037bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037be:	3468      	adds	r4, #104	; 0x68
 80037c0:	e7d7      	b.n	8003772 <__sfp+0x1e>
 80037c2:	2104      	movs	r1, #4
 80037c4:	0038      	movs	r0, r7
 80037c6:	f7ff ff57 	bl	8003678 <__sfmoreglue>
 80037ca:	1e04      	subs	r4, r0, #0
 80037cc:	6030      	str	r0, [r6, #0]
 80037ce:	d1d5      	bne.n	800377c <__sfp+0x28>
 80037d0:	f7ff ff70 	bl	80036b4 <__sfp_lock_release>
 80037d4:	230c      	movs	r3, #12
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	e7ef      	b.n	80037ba <__sfp+0x66>
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	080045dc 	.word	0x080045dc
 80037e0:	ffff0001 	.word	0xffff0001

080037e4 <_fwalk_reent>:
 80037e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037e6:	0004      	movs	r4, r0
 80037e8:	0006      	movs	r6, r0
 80037ea:	2700      	movs	r7, #0
 80037ec:	9101      	str	r1, [sp, #4]
 80037ee:	3448      	adds	r4, #72	; 0x48
 80037f0:	6863      	ldr	r3, [r4, #4]
 80037f2:	68a5      	ldr	r5, [r4, #8]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	9b00      	ldr	r3, [sp, #0]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	d504      	bpl.n	8003808 <_fwalk_reent+0x24>
 80037fe:	6824      	ldr	r4, [r4, #0]
 8003800:	2c00      	cmp	r4, #0
 8003802:	d1f5      	bne.n	80037f0 <_fwalk_reent+0xc>
 8003804:	0038      	movs	r0, r7
 8003806:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003808:	89ab      	ldrh	r3, [r5, #12]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d908      	bls.n	8003820 <_fwalk_reent+0x3c>
 800380e:	220e      	movs	r2, #14
 8003810:	5eab      	ldrsh	r3, [r5, r2]
 8003812:	3301      	adds	r3, #1
 8003814:	d004      	beq.n	8003820 <_fwalk_reent+0x3c>
 8003816:	0029      	movs	r1, r5
 8003818:	0030      	movs	r0, r6
 800381a:	9b01      	ldr	r3, [sp, #4]
 800381c:	4798      	blx	r3
 800381e:	4307      	orrs	r7, r0
 8003820:	3568      	adds	r5, #104	; 0x68
 8003822:	e7e8      	b.n	80037f6 <_fwalk_reent+0x12>

08003824 <__retarget_lock_init_recursive>:
 8003824:	4770      	bx	lr

08003826 <__retarget_lock_acquire_recursive>:
 8003826:	4770      	bx	lr

08003828 <__retarget_lock_release_recursive>:
 8003828:	4770      	bx	lr
	...

0800382c <_malloc_r>:
 800382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382e:	2303      	movs	r3, #3
 8003830:	1ccd      	adds	r5, r1, #3
 8003832:	439d      	bics	r5, r3
 8003834:	3508      	adds	r5, #8
 8003836:	0006      	movs	r6, r0
 8003838:	2d0c      	cmp	r5, #12
 800383a:	d21f      	bcs.n	800387c <_malloc_r+0x50>
 800383c:	250c      	movs	r5, #12
 800383e:	42a9      	cmp	r1, r5
 8003840:	d81e      	bhi.n	8003880 <_malloc_r+0x54>
 8003842:	0030      	movs	r0, r6
 8003844:	f000 fdde 	bl	8004404 <__malloc_lock>
 8003848:	4925      	ldr	r1, [pc, #148]	; (80038e0 <_malloc_r+0xb4>)
 800384a:	680a      	ldr	r2, [r1, #0]
 800384c:	0014      	movs	r4, r2
 800384e:	2c00      	cmp	r4, #0
 8003850:	d11a      	bne.n	8003888 <_malloc_r+0x5c>
 8003852:	4f24      	ldr	r7, [pc, #144]	; (80038e4 <_malloc_r+0xb8>)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d104      	bne.n	8003864 <_malloc_r+0x38>
 800385a:	0021      	movs	r1, r4
 800385c:	0030      	movs	r0, r6
 800385e:	f000 fb27 	bl	8003eb0 <_sbrk_r>
 8003862:	6038      	str	r0, [r7, #0]
 8003864:	0029      	movs	r1, r5
 8003866:	0030      	movs	r0, r6
 8003868:	f000 fb22 	bl	8003eb0 <_sbrk_r>
 800386c:	1c43      	adds	r3, r0, #1
 800386e:	d12b      	bne.n	80038c8 <_malloc_r+0x9c>
 8003870:	230c      	movs	r3, #12
 8003872:	0030      	movs	r0, r6
 8003874:	6033      	str	r3, [r6, #0]
 8003876:	f000 fdcd 	bl	8004414 <__malloc_unlock>
 800387a:	e003      	b.n	8003884 <_malloc_r+0x58>
 800387c:	2d00      	cmp	r5, #0
 800387e:	dade      	bge.n	800383e <_malloc_r+0x12>
 8003880:	230c      	movs	r3, #12
 8003882:	6033      	str	r3, [r6, #0]
 8003884:	2000      	movs	r0, #0
 8003886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	1b5b      	subs	r3, r3, r5
 800388c:	d419      	bmi.n	80038c2 <_malloc_r+0x96>
 800388e:	2b0b      	cmp	r3, #11
 8003890:	d903      	bls.n	800389a <_malloc_r+0x6e>
 8003892:	6023      	str	r3, [r4, #0]
 8003894:	18e4      	adds	r4, r4, r3
 8003896:	6025      	str	r5, [r4, #0]
 8003898:	e003      	b.n	80038a2 <_malloc_r+0x76>
 800389a:	6863      	ldr	r3, [r4, #4]
 800389c:	42a2      	cmp	r2, r4
 800389e:	d10e      	bne.n	80038be <_malloc_r+0x92>
 80038a0:	600b      	str	r3, [r1, #0]
 80038a2:	0030      	movs	r0, r6
 80038a4:	f000 fdb6 	bl	8004414 <__malloc_unlock>
 80038a8:	0020      	movs	r0, r4
 80038aa:	2207      	movs	r2, #7
 80038ac:	300b      	adds	r0, #11
 80038ae:	1d23      	adds	r3, r4, #4
 80038b0:	4390      	bics	r0, r2
 80038b2:	1ac2      	subs	r2, r0, r3
 80038b4:	4298      	cmp	r0, r3
 80038b6:	d0e6      	beq.n	8003886 <_malloc_r+0x5a>
 80038b8:	1a1b      	subs	r3, r3, r0
 80038ba:	50a3      	str	r3, [r4, r2]
 80038bc:	e7e3      	b.n	8003886 <_malloc_r+0x5a>
 80038be:	6053      	str	r3, [r2, #4]
 80038c0:	e7ef      	b.n	80038a2 <_malloc_r+0x76>
 80038c2:	0022      	movs	r2, r4
 80038c4:	6864      	ldr	r4, [r4, #4]
 80038c6:	e7c2      	b.n	800384e <_malloc_r+0x22>
 80038c8:	2303      	movs	r3, #3
 80038ca:	1cc4      	adds	r4, r0, #3
 80038cc:	439c      	bics	r4, r3
 80038ce:	42a0      	cmp	r0, r4
 80038d0:	d0e1      	beq.n	8003896 <_malloc_r+0x6a>
 80038d2:	1a21      	subs	r1, r4, r0
 80038d4:	0030      	movs	r0, r6
 80038d6:	f000 faeb 	bl	8003eb0 <_sbrk_r>
 80038da:	1c43      	adds	r3, r0, #1
 80038dc:	d1db      	bne.n	8003896 <_malloc_r+0x6a>
 80038de:	e7c7      	b.n	8003870 <_malloc_r+0x44>
 80038e0:	20000490 	.word	0x20000490
 80038e4:	20000494 	.word	0x20000494

080038e8 <__sfputc_r>:
 80038e8:	6893      	ldr	r3, [r2, #8]
 80038ea:	b510      	push	{r4, lr}
 80038ec:	3b01      	subs	r3, #1
 80038ee:	6093      	str	r3, [r2, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	da04      	bge.n	80038fe <__sfputc_r+0x16>
 80038f4:	6994      	ldr	r4, [r2, #24]
 80038f6:	42a3      	cmp	r3, r4
 80038f8:	db07      	blt.n	800390a <__sfputc_r+0x22>
 80038fa:	290a      	cmp	r1, #10
 80038fc:	d005      	beq.n	800390a <__sfputc_r+0x22>
 80038fe:	6813      	ldr	r3, [r2, #0]
 8003900:	1c58      	adds	r0, r3, #1
 8003902:	6010      	str	r0, [r2, #0]
 8003904:	7019      	strb	r1, [r3, #0]
 8003906:	0008      	movs	r0, r1
 8003908:	bd10      	pop	{r4, pc}
 800390a:	f000 fb2f 	bl	8003f6c <__swbuf_r>
 800390e:	0001      	movs	r1, r0
 8003910:	e7f9      	b.n	8003906 <__sfputc_r+0x1e>

08003912 <__sfputs_r>:
 8003912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003914:	0006      	movs	r6, r0
 8003916:	000f      	movs	r7, r1
 8003918:	0014      	movs	r4, r2
 800391a:	18d5      	adds	r5, r2, r3
 800391c:	42ac      	cmp	r4, r5
 800391e:	d101      	bne.n	8003924 <__sfputs_r+0x12>
 8003920:	2000      	movs	r0, #0
 8003922:	e007      	b.n	8003934 <__sfputs_r+0x22>
 8003924:	7821      	ldrb	r1, [r4, #0]
 8003926:	003a      	movs	r2, r7
 8003928:	0030      	movs	r0, r6
 800392a:	f7ff ffdd 	bl	80038e8 <__sfputc_r>
 800392e:	3401      	adds	r4, #1
 8003930:	1c43      	adds	r3, r0, #1
 8003932:	d1f3      	bne.n	800391c <__sfputs_r+0xa>
 8003934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003938 <_vfiprintf_r>:
 8003938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800393a:	b0a1      	sub	sp, #132	; 0x84
 800393c:	0006      	movs	r6, r0
 800393e:	000c      	movs	r4, r1
 8003940:	001f      	movs	r7, r3
 8003942:	9203      	str	r2, [sp, #12]
 8003944:	2800      	cmp	r0, #0
 8003946:	d004      	beq.n	8003952 <_vfiprintf_r+0x1a>
 8003948:	6983      	ldr	r3, [r0, #24]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <_vfiprintf_r+0x1a>
 800394e:	f7ff fec9 	bl	80036e4 <__sinit>
 8003952:	4b8e      	ldr	r3, [pc, #568]	; (8003b8c <_vfiprintf_r+0x254>)
 8003954:	429c      	cmp	r4, r3
 8003956:	d11c      	bne.n	8003992 <_vfiprintf_r+0x5a>
 8003958:	6874      	ldr	r4, [r6, #4]
 800395a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800395c:	07db      	lsls	r3, r3, #31
 800395e:	d405      	bmi.n	800396c <_vfiprintf_r+0x34>
 8003960:	89a3      	ldrh	r3, [r4, #12]
 8003962:	059b      	lsls	r3, r3, #22
 8003964:	d402      	bmi.n	800396c <_vfiprintf_r+0x34>
 8003966:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003968:	f7ff ff5d 	bl	8003826 <__retarget_lock_acquire_recursive>
 800396c:	89a3      	ldrh	r3, [r4, #12]
 800396e:	071b      	lsls	r3, r3, #28
 8003970:	d502      	bpl.n	8003978 <_vfiprintf_r+0x40>
 8003972:	6923      	ldr	r3, [r4, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d11d      	bne.n	80039b4 <_vfiprintf_r+0x7c>
 8003978:	0021      	movs	r1, r4
 800397a:	0030      	movs	r0, r6
 800397c:	f000 fb60 	bl	8004040 <__swsetup_r>
 8003980:	2800      	cmp	r0, #0
 8003982:	d017      	beq.n	80039b4 <_vfiprintf_r+0x7c>
 8003984:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003986:	07db      	lsls	r3, r3, #31
 8003988:	d50d      	bpl.n	80039a6 <_vfiprintf_r+0x6e>
 800398a:	2001      	movs	r0, #1
 800398c:	4240      	negs	r0, r0
 800398e:	b021      	add	sp, #132	; 0x84
 8003990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003992:	4b7f      	ldr	r3, [pc, #508]	; (8003b90 <_vfiprintf_r+0x258>)
 8003994:	429c      	cmp	r4, r3
 8003996:	d101      	bne.n	800399c <_vfiprintf_r+0x64>
 8003998:	68b4      	ldr	r4, [r6, #8]
 800399a:	e7de      	b.n	800395a <_vfiprintf_r+0x22>
 800399c:	4b7d      	ldr	r3, [pc, #500]	; (8003b94 <_vfiprintf_r+0x25c>)
 800399e:	429c      	cmp	r4, r3
 80039a0:	d1db      	bne.n	800395a <_vfiprintf_r+0x22>
 80039a2:	68f4      	ldr	r4, [r6, #12]
 80039a4:	e7d9      	b.n	800395a <_vfiprintf_r+0x22>
 80039a6:	89a3      	ldrh	r3, [r4, #12]
 80039a8:	059b      	lsls	r3, r3, #22
 80039aa:	d4ee      	bmi.n	800398a <_vfiprintf_r+0x52>
 80039ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039ae:	f7ff ff3b 	bl	8003828 <__retarget_lock_release_recursive>
 80039b2:	e7ea      	b.n	800398a <_vfiprintf_r+0x52>
 80039b4:	2300      	movs	r3, #0
 80039b6:	ad08      	add	r5, sp, #32
 80039b8:	616b      	str	r3, [r5, #20]
 80039ba:	3320      	adds	r3, #32
 80039bc:	766b      	strb	r3, [r5, #25]
 80039be:	3310      	adds	r3, #16
 80039c0:	76ab      	strb	r3, [r5, #26]
 80039c2:	9707      	str	r7, [sp, #28]
 80039c4:	9f03      	ldr	r7, [sp, #12]
 80039c6:	783b      	ldrb	r3, [r7, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <_vfiprintf_r+0x98>
 80039cc:	2b25      	cmp	r3, #37	; 0x25
 80039ce:	d14e      	bne.n	8003a6e <_vfiprintf_r+0x136>
 80039d0:	9b03      	ldr	r3, [sp, #12]
 80039d2:	1afb      	subs	r3, r7, r3
 80039d4:	9305      	str	r3, [sp, #20]
 80039d6:	9b03      	ldr	r3, [sp, #12]
 80039d8:	429f      	cmp	r7, r3
 80039da:	d00d      	beq.n	80039f8 <_vfiprintf_r+0xc0>
 80039dc:	9b05      	ldr	r3, [sp, #20]
 80039de:	0021      	movs	r1, r4
 80039e0:	0030      	movs	r0, r6
 80039e2:	9a03      	ldr	r2, [sp, #12]
 80039e4:	f7ff ff95 	bl	8003912 <__sfputs_r>
 80039e8:	1c43      	adds	r3, r0, #1
 80039ea:	d100      	bne.n	80039ee <_vfiprintf_r+0xb6>
 80039ec:	e0b5      	b.n	8003b5a <_vfiprintf_r+0x222>
 80039ee:	696a      	ldr	r2, [r5, #20]
 80039f0:	9b05      	ldr	r3, [sp, #20]
 80039f2:	4694      	mov	ip, r2
 80039f4:	4463      	add	r3, ip
 80039f6:	616b      	str	r3, [r5, #20]
 80039f8:	783b      	ldrb	r3, [r7, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d100      	bne.n	8003a00 <_vfiprintf_r+0xc8>
 80039fe:	e0ac      	b.n	8003b5a <_vfiprintf_r+0x222>
 8003a00:	2201      	movs	r2, #1
 8003a02:	1c7b      	adds	r3, r7, #1
 8003a04:	9303      	str	r3, [sp, #12]
 8003a06:	2300      	movs	r3, #0
 8003a08:	4252      	negs	r2, r2
 8003a0a:	606a      	str	r2, [r5, #4]
 8003a0c:	a904      	add	r1, sp, #16
 8003a0e:	3254      	adds	r2, #84	; 0x54
 8003a10:	1852      	adds	r2, r2, r1
 8003a12:	602b      	str	r3, [r5, #0]
 8003a14:	60eb      	str	r3, [r5, #12]
 8003a16:	60ab      	str	r3, [r5, #8]
 8003a18:	7013      	strb	r3, [r2, #0]
 8003a1a:	65ab      	str	r3, [r5, #88]	; 0x58
 8003a1c:	9b03      	ldr	r3, [sp, #12]
 8003a1e:	2205      	movs	r2, #5
 8003a20:	7819      	ldrb	r1, [r3, #0]
 8003a22:	485d      	ldr	r0, [pc, #372]	; (8003b98 <_vfiprintf_r+0x260>)
 8003a24:	f000 fce2 	bl	80043ec <memchr>
 8003a28:	9b03      	ldr	r3, [sp, #12]
 8003a2a:	1c5f      	adds	r7, r3, #1
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	d120      	bne.n	8003a72 <_vfiprintf_r+0x13a>
 8003a30:	682a      	ldr	r2, [r5, #0]
 8003a32:	06d3      	lsls	r3, r2, #27
 8003a34:	d504      	bpl.n	8003a40 <_vfiprintf_r+0x108>
 8003a36:	2353      	movs	r3, #83	; 0x53
 8003a38:	a904      	add	r1, sp, #16
 8003a3a:	185b      	adds	r3, r3, r1
 8003a3c:	2120      	movs	r1, #32
 8003a3e:	7019      	strb	r1, [r3, #0]
 8003a40:	0713      	lsls	r3, r2, #28
 8003a42:	d504      	bpl.n	8003a4e <_vfiprintf_r+0x116>
 8003a44:	2353      	movs	r3, #83	; 0x53
 8003a46:	a904      	add	r1, sp, #16
 8003a48:	185b      	adds	r3, r3, r1
 8003a4a:	212b      	movs	r1, #43	; 0x2b
 8003a4c:	7019      	strb	r1, [r3, #0]
 8003a4e:	9b03      	ldr	r3, [sp, #12]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b2a      	cmp	r3, #42	; 0x2a
 8003a54:	d016      	beq.n	8003a84 <_vfiprintf_r+0x14c>
 8003a56:	2100      	movs	r1, #0
 8003a58:	68eb      	ldr	r3, [r5, #12]
 8003a5a:	9f03      	ldr	r7, [sp, #12]
 8003a5c:	783a      	ldrb	r2, [r7, #0]
 8003a5e:	1c78      	adds	r0, r7, #1
 8003a60:	3a30      	subs	r2, #48	; 0x30
 8003a62:	4684      	mov	ip, r0
 8003a64:	2a09      	cmp	r2, #9
 8003a66:	d94f      	bls.n	8003b08 <_vfiprintf_r+0x1d0>
 8003a68:	2900      	cmp	r1, #0
 8003a6a:	d111      	bne.n	8003a90 <_vfiprintf_r+0x158>
 8003a6c:	e017      	b.n	8003a9e <_vfiprintf_r+0x166>
 8003a6e:	3701      	adds	r7, #1
 8003a70:	e7a9      	b.n	80039c6 <_vfiprintf_r+0x8e>
 8003a72:	4b49      	ldr	r3, [pc, #292]	; (8003b98 <_vfiprintf_r+0x260>)
 8003a74:	682a      	ldr	r2, [r5, #0]
 8003a76:	1ac0      	subs	r0, r0, r3
 8003a78:	2301      	movs	r3, #1
 8003a7a:	4083      	lsls	r3, r0
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	602b      	str	r3, [r5, #0]
 8003a80:	9703      	str	r7, [sp, #12]
 8003a82:	e7cb      	b.n	8003a1c <_vfiprintf_r+0xe4>
 8003a84:	9b07      	ldr	r3, [sp, #28]
 8003a86:	1d19      	adds	r1, r3, #4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	9107      	str	r1, [sp, #28]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	db01      	blt.n	8003a94 <_vfiprintf_r+0x15c>
 8003a90:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a92:	e004      	b.n	8003a9e <_vfiprintf_r+0x166>
 8003a94:	425b      	negs	r3, r3
 8003a96:	60eb      	str	r3, [r5, #12]
 8003a98:	2302      	movs	r3, #2
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	602b      	str	r3, [r5, #0]
 8003a9e:	783b      	ldrb	r3, [r7, #0]
 8003aa0:	2b2e      	cmp	r3, #46	; 0x2e
 8003aa2:	d10a      	bne.n	8003aba <_vfiprintf_r+0x182>
 8003aa4:	787b      	ldrb	r3, [r7, #1]
 8003aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8003aa8:	d137      	bne.n	8003b1a <_vfiprintf_r+0x1e2>
 8003aaa:	9b07      	ldr	r3, [sp, #28]
 8003aac:	3702      	adds	r7, #2
 8003aae:	1d1a      	adds	r2, r3, #4
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	9207      	str	r2, [sp, #28]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	db2d      	blt.n	8003b14 <_vfiprintf_r+0x1dc>
 8003ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8003aba:	2203      	movs	r2, #3
 8003abc:	7839      	ldrb	r1, [r7, #0]
 8003abe:	4837      	ldr	r0, [pc, #220]	; (8003b9c <_vfiprintf_r+0x264>)
 8003ac0:	f000 fc94 	bl	80043ec <memchr>
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	d007      	beq.n	8003ad8 <_vfiprintf_r+0x1a0>
 8003ac8:	4b34      	ldr	r3, [pc, #208]	; (8003b9c <_vfiprintf_r+0x264>)
 8003aca:	682a      	ldr	r2, [r5, #0]
 8003acc:	1ac0      	subs	r0, r0, r3
 8003ace:	2340      	movs	r3, #64	; 0x40
 8003ad0:	4083      	lsls	r3, r0
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	3701      	adds	r7, #1
 8003ad6:	602b      	str	r3, [r5, #0]
 8003ad8:	7839      	ldrb	r1, [r7, #0]
 8003ada:	1c7b      	adds	r3, r7, #1
 8003adc:	2206      	movs	r2, #6
 8003ade:	4830      	ldr	r0, [pc, #192]	; (8003ba0 <_vfiprintf_r+0x268>)
 8003ae0:	9303      	str	r3, [sp, #12]
 8003ae2:	7629      	strb	r1, [r5, #24]
 8003ae4:	f000 fc82 	bl	80043ec <memchr>
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	d045      	beq.n	8003b78 <_vfiprintf_r+0x240>
 8003aec:	4b2d      	ldr	r3, [pc, #180]	; (8003ba4 <_vfiprintf_r+0x26c>)
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d127      	bne.n	8003b42 <_vfiprintf_r+0x20a>
 8003af2:	2207      	movs	r2, #7
 8003af4:	9b07      	ldr	r3, [sp, #28]
 8003af6:	3307      	adds	r3, #7
 8003af8:	4393      	bics	r3, r2
 8003afa:	3308      	adds	r3, #8
 8003afc:	9307      	str	r3, [sp, #28]
 8003afe:	696b      	ldr	r3, [r5, #20]
 8003b00:	9a04      	ldr	r2, [sp, #16]
 8003b02:	189b      	adds	r3, r3, r2
 8003b04:	616b      	str	r3, [r5, #20]
 8003b06:	e75d      	b.n	80039c4 <_vfiprintf_r+0x8c>
 8003b08:	210a      	movs	r1, #10
 8003b0a:	434b      	muls	r3, r1
 8003b0c:	4667      	mov	r7, ip
 8003b0e:	189b      	adds	r3, r3, r2
 8003b10:	3909      	subs	r1, #9
 8003b12:	e7a3      	b.n	8003a5c <_vfiprintf_r+0x124>
 8003b14:	2301      	movs	r3, #1
 8003b16:	425b      	negs	r3, r3
 8003b18:	e7ce      	b.n	8003ab8 <_vfiprintf_r+0x180>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	001a      	movs	r2, r3
 8003b1e:	3701      	adds	r7, #1
 8003b20:	606b      	str	r3, [r5, #4]
 8003b22:	7839      	ldrb	r1, [r7, #0]
 8003b24:	1c78      	adds	r0, r7, #1
 8003b26:	3930      	subs	r1, #48	; 0x30
 8003b28:	4684      	mov	ip, r0
 8003b2a:	2909      	cmp	r1, #9
 8003b2c:	d903      	bls.n	8003b36 <_vfiprintf_r+0x1fe>
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0c3      	beq.n	8003aba <_vfiprintf_r+0x182>
 8003b32:	9209      	str	r2, [sp, #36]	; 0x24
 8003b34:	e7c1      	b.n	8003aba <_vfiprintf_r+0x182>
 8003b36:	230a      	movs	r3, #10
 8003b38:	435a      	muls	r2, r3
 8003b3a:	4667      	mov	r7, ip
 8003b3c:	1852      	adds	r2, r2, r1
 8003b3e:	3b09      	subs	r3, #9
 8003b40:	e7ef      	b.n	8003b22 <_vfiprintf_r+0x1ea>
 8003b42:	ab07      	add	r3, sp, #28
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	0022      	movs	r2, r4
 8003b48:	0029      	movs	r1, r5
 8003b4a:	0030      	movs	r0, r6
 8003b4c:	4b16      	ldr	r3, [pc, #88]	; (8003ba8 <_vfiprintf_r+0x270>)
 8003b4e:	e000      	b.n	8003b52 <_vfiprintf_r+0x21a>
 8003b50:	bf00      	nop
 8003b52:	9004      	str	r0, [sp, #16]
 8003b54:	9b04      	ldr	r3, [sp, #16]
 8003b56:	3301      	adds	r3, #1
 8003b58:	d1d1      	bne.n	8003afe <_vfiprintf_r+0x1c6>
 8003b5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b5c:	07db      	lsls	r3, r3, #31
 8003b5e:	d405      	bmi.n	8003b6c <_vfiprintf_r+0x234>
 8003b60:	89a3      	ldrh	r3, [r4, #12]
 8003b62:	059b      	lsls	r3, r3, #22
 8003b64:	d402      	bmi.n	8003b6c <_vfiprintf_r+0x234>
 8003b66:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b68:	f7ff fe5e 	bl	8003828 <__retarget_lock_release_recursive>
 8003b6c:	89a3      	ldrh	r3, [r4, #12]
 8003b6e:	065b      	lsls	r3, r3, #25
 8003b70:	d500      	bpl.n	8003b74 <_vfiprintf_r+0x23c>
 8003b72:	e70a      	b.n	800398a <_vfiprintf_r+0x52>
 8003b74:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003b76:	e70a      	b.n	800398e <_vfiprintf_r+0x56>
 8003b78:	ab07      	add	r3, sp, #28
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	0022      	movs	r2, r4
 8003b7e:	0029      	movs	r1, r5
 8003b80:	0030      	movs	r0, r6
 8003b82:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <_vfiprintf_r+0x270>)
 8003b84:	f000 f882 	bl	8003c8c <_printf_i>
 8003b88:	e7e3      	b.n	8003b52 <_vfiprintf_r+0x21a>
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	08004600 	.word	0x08004600
 8003b90:	08004620 	.word	0x08004620
 8003b94:	080045e0 	.word	0x080045e0
 8003b98:	08004640 	.word	0x08004640
 8003b9c:	08004646 	.word	0x08004646
 8003ba0:	0800464a 	.word	0x0800464a
 8003ba4:	00000000 	.word	0x00000000
 8003ba8:	08003913 	.word	0x08003913

08003bac <_printf_common>:
 8003bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bae:	0015      	movs	r5, r2
 8003bb0:	9301      	str	r3, [sp, #4]
 8003bb2:	688a      	ldr	r2, [r1, #8]
 8003bb4:	690b      	ldr	r3, [r1, #16]
 8003bb6:	000c      	movs	r4, r1
 8003bb8:	9000      	str	r0, [sp, #0]
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	da00      	bge.n	8003bc0 <_printf_common+0x14>
 8003bbe:	0013      	movs	r3, r2
 8003bc0:	0022      	movs	r2, r4
 8003bc2:	602b      	str	r3, [r5, #0]
 8003bc4:	3243      	adds	r2, #67	; 0x43
 8003bc6:	7812      	ldrb	r2, [r2, #0]
 8003bc8:	2a00      	cmp	r2, #0
 8003bca:	d001      	beq.n	8003bd0 <_printf_common+0x24>
 8003bcc:	3301      	adds	r3, #1
 8003bce:	602b      	str	r3, [r5, #0]
 8003bd0:	6823      	ldr	r3, [r4, #0]
 8003bd2:	069b      	lsls	r3, r3, #26
 8003bd4:	d502      	bpl.n	8003bdc <_printf_common+0x30>
 8003bd6:	682b      	ldr	r3, [r5, #0]
 8003bd8:	3302      	adds	r3, #2
 8003bda:	602b      	str	r3, [r5, #0]
 8003bdc:	6822      	ldr	r2, [r4, #0]
 8003bde:	2306      	movs	r3, #6
 8003be0:	0017      	movs	r7, r2
 8003be2:	401f      	ands	r7, r3
 8003be4:	421a      	tst	r2, r3
 8003be6:	d027      	beq.n	8003c38 <_printf_common+0x8c>
 8003be8:	0023      	movs	r3, r4
 8003bea:	3343      	adds	r3, #67	; 0x43
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	1e5a      	subs	r2, r3, #1
 8003bf0:	4193      	sbcs	r3, r2
 8003bf2:	6822      	ldr	r2, [r4, #0]
 8003bf4:	0692      	lsls	r2, r2, #26
 8003bf6:	d430      	bmi.n	8003c5a <_printf_common+0xae>
 8003bf8:	0022      	movs	r2, r4
 8003bfa:	9901      	ldr	r1, [sp, #4]
 8003bfc:	9800      	ldr	r0, [sp, #0]
 8003bfe:	9e08      	ldr	r6, [sp, #32]
 8003c00:	3243      	adds	r2, #67	; 0x43
 8003c02:	47b0      	blx	r6
 8003c04:	1c43      	adds	r3, r0, #1
 8003c06:	d025      	beq.n	8003c54 <_printf_common+0xa8>
 8003c08:	2306      	movs	r3, #6
 8003c0a:	6820      	ldr	r0, [r4, #0]
 8003c0c:	682a      	ldr	r2, [r5, #0]
 8003c0e:	68e1      	ldr	r1, [r4, #12]
 8003c10:	2500      	movs	r5, #0
 8003c12:	4003      	ands	r3, r0
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d103      	bne.n	8003c20 <_printf_common+0x74>
 8003c18:	1a8d      	subs	r5, r1, r2
 8003c1a:	43eb      	mvns	r3, r5
 8003c1c:	17db      	asrs	r3, r3, #31
 8003c1e:	401d      	ands	r5, r3
 8003c20:	68a3      	ldr	r3, [r4, #8]
 8003c22:	6922      	ldr	r2, [r4, #16]
 8003c24:	4293      	cmp	r3, r2
 8003c26:	dd01      	ble.n	8003c2c <_printf_common+0x80>
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	18ed      	adds	r5, r5, r3
 8003c2c:	2700      	movs	r7, #0
 8003c2e:	42bd      	cmp	r5, r7
 8003c30:	d120      	bne.n	8003c74 <_printf_common+0xc8>
 8003c32:	2000      	movs	r0, #0
 8003c34:	e010      	b.n	8003c58 <_printf_common+0xac>
 8003c36:	3701      	adds	r7, #1
 8003c38:	68e3      	ldr	r3, [r4, #12]
 8003c3a:	682a      	ldr	r2, [r5, #0]
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	42bb      	cmp	r3, r7
 8003c40:	ddd2      	ble.n	8003be8 <_printf_common+0x3c>
 8003c42:	0022      	movs	r2, r4
 8003c44:	2301      	movs	r3, #1
 8003c46:	9901      	ldr	r1, [sp, #4]
 8003c48:	9800      	ldr	r0, [sp, #0]
 8003c4a:	9e08      	ldr	r6, [sp, #32]
 8003c4c:	3219      	adds	r2, #25
 8003c4e:	47b0      	blx	r6
 8003c50:	1c43      	adds	r3, r0, #1
 8003c52:	d1f0      	bne.n	8003c36 <_printf_common+0x8a>
 8003c54:	2001      	movs	r0, #1
 8003c56:	4240      	negs	r0, r0
 8003c58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c5a:	2030      	movs	r0, #48	; 0x30
 8003c5c:	18e1      	adds	r1, r4, r3
 8003c5e:	3143      	adds	r1, #67	; 0x43
 8003c60:	7008      	strb	r0, [r1, #0]
 8003c62:	0021      	movs	r1, r4
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	3145      	adds	r1, #69	; 0x45
 8003c68:	7809      	ldrb	r1, [r1, #0]
 8003c6a:	18a2      	adds	r2, r4, r2
 8003c6c:	3243      	adds	r2, #67	; 0x43
 8003c6e:	3302      	adds	r3, #2
 8003c70:	7011      	strb	r1, [r2, #0]
 8003c72:	e7c1      	b.n	8003bf8 <_printf_common+0x4c>
 8003c74:	0022      	movs	r2, r4
 8003c76:	2301      	movs	r3, #1
 8003c78:	9901      	ldr	r1, [sp, #4]
 8003c7a:	9800      	ldr	r0, [sp, #0]
 8003c7c:	9e08      	ldr	r6, [sp, #32]
 8003c7e:	321a      	adds	r2, #26
 8003c80:	47b0      	blx	r6
 8003c82:	1c43      	adds	r3, r0, #1
 8003c84:	d0e6      	beq.n	8003c54 <_printf_common+0xa8>
 8003c86:	3701      	adds	r7, #1
 8003c88:	e7d1      	b.n	8003c2e <_printf_common+0x82>
	...

08003c8c <_printf_i>:
 8003c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c8e:	b08b      	sub	sp, #44	; 0x2c
 8003c90:	9206      	str	r2, [sp, #24]
 8003c92:	000a      	movs	r2, r1
 8003c94:	3243      	adds	r2, #67	; 0x43
 8003c96:	9307      	str	r3, [sp, #28]
 8003c98:	9005      	str	r0, [sp, #20]
 8003c9a:	9204      	str	r2, [sp, #16]
 8003c9c:	7e0a      	ldrb	r2, [r1, #24]
 8003c9e:	000c      	movs	r4, r1
 8003ca0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003ca2:	2a78      	cmp	r2, #120	; 0x78
 8003ca4:	d806      	bhi.n	8003cb4 <_printf_i+0x28>
 8003ca6:	2a62      	cmp	r2, #98	; 0x62
 8003ca8:	d808      	bhi.n	8003cbc <_printf_i+0x30>
 8003caa:	2a00      	cmp	r2, #0
 8003cac:	d100      	bne.n	8003cb0 <_printf_i+0x24>
 8003cae:	e0c0      	b.n	8003e32 <_printf_i+0x1a6>
 8003cb0:	2a58      	cmp	r2, #88	; 0x58
 8003cb2:	d052      	beq.n	8003d5a <_printf_i+0xce>
 8003cb4:	0026      	movs	r6, r4
 8003cb6:	3642      	adds	r6, #66	; 0x42
 8003cb8:	7032      	strb	r2, [r6, #0]
 8003cba:	e022      	b.n	8003d02 <_printf_i+0x76>
 8003cbc:	0010      	movs	r0, r2
 8003cbe:	3863      	subs	r0, #99	; 0x63
 8003cc0:	2815      	cmp	r0, #21
 8003cc2:	d8f7      	bhi.n	8003cb4 <_printf_i+0x28>
 8003cc4:	f7fc fa1e 	bl	8000104 <__gnu_thumb1_case_shi>
 8003cc8:	001f0016 	.word	0x001f0016
 8003ccc:	fff6fff6 	.word	0xfff6fff6
 8003cd0:	fff6fff6 	.word	0xfff6fff6
 8003cd4:	fff6001f 	.word	0xfff6001f
 8003cd8:	fff6fff6 	.word	0xfff6fff6
 8003cdc:	00a8fff6 	.word	0x00a8fff6
 8003ce0:	009a0036 	.word	0x009a0036
 8003ce4:	fff6fff6 	.word	0xfff6fff6
 8003ce8:	fff600b9 	.word	0xfff600b9
 8003cec:	fff60036 	.word	0xfff60036
 8003cf0:	009efff6 	.word	0x009efff6
 8003cf4:	0026      	movs	r6, r4
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	3642      	adds	r6, #66	; 0x42
 8003cfa:	1d11      	adds	r1, r2, #4
 8003cfc:	6019      	str	r1, [r3, #0]
 8003cfe:	6813      	ldr	r3, [r2, #0]
 8003d00:	7033      	strb	r3, [r6, #0]
 8003d02:	2301      	movs	r3, #1
 8003d04:	e0a7      	b.n	8003e56 <_printf_i+0x1ca>
 8003d06:	6808      	ldr	r0, [r1, #0]
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	1d0a      	adds	r2, r1, #4
 8003d0c:	0605      	lsls	r5, r0, #24
 8003d0e:	d50b      	bpl.n	8003d28 <_printf_i+0x9c>
 8003d10:	680d      	ldr	r5, [r1, #0]
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	2d00      	cmp	r5, #0
 8003d16:	da03      	bge.n	8003d20 <_printf_i+0x94>
 8003d18:	232d      	movs	r3, #45	; 0x2d
 8003d1a:	9a04      	ldr	r2, [sp, #16]
 8003d1c:	426d      	negs	r5, r5
 8003d1e:	7013      	strb	r3, [r2, #0]
 8003d20:	4b61      	ldr	r3, [pc, #388]	; (8003ea8 <_printf_i+0x21c>)
 8003d22:	270a      	movs	r7, #10
 8003d24:	9303      	str	r3, [sp, #12]
 8003d26:	e032      	b.n	8003d8e <_printf_i+0x102>
 8003d28:	680d      	ldr	r5, [r1, #0]
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	0641      	lsls	r1, r0, #25
 8003d2e:	d5f1      	bpl.n	8003d14 <_printf_i+0x88>
 8003d30:	b22d      	sxth	r5, r5
 8003d32:	e7ef      	b.n	8003d14 <_printf_i+0x88>
 8003d34:	680d      	ldr	r5, [r1, #0]
 8003d36:	6819      	ldr	r1, [r3, #0]
 8003d38:	1d08      	adds	r0, r1, #4
 8003d3a:	6018      	str	r0, [r3, #0]
 8003d3c:	062e      	lsls	r6, r5, #24
 8003d3e:	d501      	bpl.n	8003d44 <_printf_i+0xb8>
 8003d40:	680d      	ldr	r5, [r1, #0]
 8003d42:	e003      	b.n	8003d4c <_printf_i+0xc0>
 8003d44:	066d      	lsls	r5, r5, #25
 8003d46:	d5fb      	bpl.n	8003d40 <_printf_i+0xb4>
 8003d48:	680d      	ldr	r5, [r1, #0]
 8003d4a:	b2ad      	uxth	r5, r5
 8003d4c:	4b56      	ldr	r3, [pc, #344]	; (8003ea8 <_printf_i+0x21c>)
 8003d4e:	270a      	movs	r7, #10
 8003d50:	9303      	str	r3, [sp, #12]
 8003d52:	2a6f      	cmp	r2, #111	; 0x6f
 8003d54:	d117      	bne.n	8003d86 <_printf_i+0xfa>
 8003d56:	2708      	movs	r7, #8
 8003d58:	e015      	b.n	8003d86 <_printf_i+0xfa>
 8003d5a:	3145      	adds	r1, #69	; 0x45
 8003d5c:	700a      	strb	r2, [r1, #0]
 8003d5e:	4a52      	ldr	r2, [pc, #328]	; (8003ea8 <_printf_i+0x21c>)
 8003d60:	9203      	str	r2, [sp, #12]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	6821      	ldr	r1, [r4, #0]
 8003d66:	ca20      	ldmia	r2!, {r5}
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	0608      	lsls	r0, r1, #24
 8003d6c:	d550      	bpl.n	8003e10 <_printf_i+0x184>
 8003d6e:	07cb      	lsls	r3, r1, #31
 8003d70:	d502      	bpl.n	8003d78 <_printf_i+0xec>
 8003d72:	2320      	movs	r3, #32
 8003d74:	4319      	orrs	r1, r3
 8003d76:	6021      	str	r1, [r4, #0]
 8003d78:	2710      	movs	r7, #16
 8003d7a:	2d00      	cmp	r5, #0
 8003d7c:	d103      	bne.n	8003d86 <_printf_i+0xfa>
 8003d7e:	2320      	movs	r3, #32
 8003d80:	6822      	ldr	r2, [r4, #0]
 8003d82:	439a      	bics	r2, r3
 8003d84:	6022      	str	r2, [r4, #0]
 8003d86:	0023      	movs	r3, r4
 8003d88:	2200      	movs	r2, #0
 8003d8a:	3343      	adds	r3, #67	; 0x43
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	6863      	ldr	r3, [r4, #4]
 8003d90:	60a3      	str	r3, [r4, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	db03      	blt.n	8003d9e <_printf_i+0x112>
 8003d96:	2204      	movs	r2, #4
 8003d98:	6821      	ldr	r1, [r4, #0]
 8003d9a:	4391      	bics	r1, r2
 8003d9c:	6021      	str	r1, [r4, #0]
 8003d9e:	2d00      	cmp	r5, #0
 8003da0:	d102      	bne.n	8003da8 <_printf_i+0x11c>
 8003da2:	9e04      	ldr	r6, [sp, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00c      	beq.n	8003dc2 <_printf_i+0x136>
 8003da8:	9e04      	ldr	r6, [sp, #16]
 8003daa:	0028      	movs	r0, r5
 8003dac:	0039      	movs	r1, r7
 8003dae:	f7fc fa39 	bl	8000224 <__aeabi_uidivmod>
 8003db2:	9b03      	ldr	r3, [sp, #12]
 8003db4:	3e01      	subs	r6, #1
 8003db6:	5c5b      	ldrb	r3, [r3, r1]
 8003db8:	7033      	strb	r3, [r6, #0]
 8003dba:	002b      	movs	r3, r5
 8003dbc:	0005      	movs	r5, r0
 8003dbe:	429f      	cmp	r7, r3
 8003dc0:	d9f3      	bls.n	8003daa <_printf_i+0x11e>
 8003dc2:	2f08      	cmp	r7, #8
 8003dc4:	d109      	bne.n	8003dda <_printf_i+0x14e>
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	07db      	lsls	r3, r3, #31
 8003dca:	d506      	bpl.n	8003dda <_printf_i+0x14e>
 8003dcc:	6863      	ldr	r3, [r4, #4]
 8003dce:	6922      	ldr	r2, [r4, #16]
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	dc02      	bgt.n	8003dda <_printf_i+0x14e>
 8003dd4:	2330      	movs	r3, #48	; 0x30
 8003dd6:	3e01      	subs	r6, #1
 8003dd8:	7033      	strb	r3, [r6, #0]
 8003dda:	9b04      	ldr	r3, [sp, #16]
 8003ddc:	1b9b      	subs	r3, r3, r6
 8003dde:	6123      	str	r3, [r4, #16]
 8003de0:	9b07      	ldr	r3, [sp, #28]
 8003de2:	0021      	movs	r1, r4
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	9805      	ldr	r0, [sp, #20]
 8003de8:	9b06      	ldr	r3, [sp, #24]
 8003dea:	aa09      	add	r2, sp, #36	; 0x24
 8003dec:	f7ff fede 	bl	8003bac <_printf_common>
 8003df0:	1c43      	adds	r3, r0, #1
 8003df2:	d135      	bne.n	8003e60 <_printf_i+0x1d4>
 8003df4:	2001      	movs	r0, #1
 8003df6:	4240      	negs	r0, r0
 8003df8:	b00b      	add	sp, #44	; 0x2c
 8003dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	6809      	ldr	r1, [r1, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	6022      	str	r2, [r4, #0]
 8003e04:	0022      	movs	r2, r4
 8003e06:	2178      	movs	r1, #120	; 0x78
 8003e08:	3245      	adds	r2, #69	; 0x45
 8003e0a:	7011      	strb	r1, [r2, #0]
 8003e0c:	4a27      	ldr	r2, [pc, #156]	; (8003eac <_printf_i+0x220>)
 8003e0e:	e7a7      	b.n	8003d60 <_printf_i+0xd4>
 8003e10:	0648      	lsls	r0, r1, #25
 8003e12:	d5ac      	bpl.n	8003d6e <_printf_i+0xe2>
 8003e14:	b2ad      	uxth	r5, r5
 8003e16:	e7aa      	b.n	8003d6e <_printf_i+0xe2>
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	680d      	ldr	r5, [r1, #0]
 8003e1c:	1d10      	adds	r0, r2, #4
 8003e1e:	6949      	ldr	r1, [r1, #20]
 8003e20:	6018      	str	r0, [r3, #0]
 8003e22:	6813      	ldr	r3, [r2, #0]
 8003e24:	062e      	lsls	r6, r5, #24
 8003e26:	d501      	bpl.n	8003e2c <_printf_i+0x1a0>
 8003e28:	6019      	str	r1, [r3, #0]
 8003e2a:	e002      	b.n	8003e32 <_printf_i+0x1a6>
 8003e2c:	066d      	lsls	r5, r5, #25
 8003e2e:	d5fb      	bpl.n	8003e28 <_printf_i+0x19c>
 8003e30:	8019      	strh	r1, [r3, #0]
 8003e32:	2300      	movs	r3, #0
 8003e34:	9e04      	ldr	r6, [sp, #16]
 8003e36:	6123      	str	r3, [r4, #16]
 8003e38:	e7d2      	b.n	8003de0 <_printf_i+0x154>
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	1d11      	adds	r1, r2, #4
 8003e3e:	6019      	str	r1, [r3, #0]
 8003e40:	6816      	ldr	r6, [r2, #0]
 8003e42:	2100      	movs	r1, #0
 8003e44:	0030      	movs	r0, r6
 8003e46:	6862      	ldr	r2, [r4, #4]
 8003e48:	f000 fad0 	bl	80043ec <memchr>
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d001      	beq.n	8003e54 <_printf_i+0x1c8>
 8003e50:	1b80      	subs	r0, r0, r6
 8003e52:	6060      	str	r0, [r4, #4]
 8003e54:	6863      	ldr	r3, [r4, #4]
 8003e56:	6123      	str	r3, [r4, #16]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	9a04      	ldr	r2, [sp, #16]
 8003e5c:	7013      	strb	r3, [r2, #0]
 8003e5e:	e7bf      	b.n	8003de0 <_printf_i+0x154>
 8003e60:	6923      	ldr	r3, [r4, #16]
 8003e62:	0032      	movs	r2, r6
 8003e64:	9906      	ldr	r1, [sp, #24]
 8003e66:	9805      	ldr	r0, [sp, #20]
 8003e68:	9d07      	ldr	r5, [sp, #28]
 8003e6a:	47a8      	blx	r5
 8003e6c:	1c43      	adds	r3, r0, #1
 8003e6e:	d0c1      	beq.n	8003df4 <_printf_i+0x168>
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	079b      	lsls	r3, r3, #30
 8003e74:	d415      	bmi.n	8003ea2 <_printf_i+0x216>
 8003e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e78:	68e0      	ldr	r0, [r4, #12]
 8003e7a:	4298      	cmp	r0, r3
 8003e7c:	dabc      	bge.n	8003df8 <_printf_i+0x16c>
 8003e7e:	0018      	movs	r0, r3
 8003e80:	e7ba      	b.n	8003df8 <_printf_i+0x16c>
 8003e82:	0022      	movs	r2, r4
 8003e84:	2301      	movs	r3, #1
 8003e86:	9906      	ldr	r1, [sp, #24]
 8003e88:	9805      	ldr	r0, [sp, #20]
 8003e8a:	9e07      	ldr	r6, [sp, #28]
 8003e8c:	3219      	adds	r2, #25
 8003e8e:	47b0      	blx	r6
 8003e90:	1c43      	adds	r3, r0, #1
 8003e92:	d0af      	beq.n	8003df4 <_printf_i+0x168>
 8003e94:	3501      	adds	r5, #1
 8003e96:	68e3      	ldr	r3, [r4, #12]
 8003e98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	42ab      	cmp	r3, r5
 8003e9e:	dcf0      	bgt.n	8003e82 <_printf_i+0x1f6>
 8003ea0:	e7e9      	b.n	8003e76 <_printf_i+0x1ea>
 8003ea2:	2500      	movs	r5, #0
 8003ea4:	e7f7      	b.n	8003e96 <_printf_i+0x20a>
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	08004651 	.word	0x08004651
 8003eac:	08004662 	.word	0x08004662

08003eb0 <_sbrk_r>:
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	b570      	push	{r4, r5, r6, lr}
 8003eb4:	4d06      	ldr	r5, [pc, #24]	; (8003ed0 <_sbrk_r+0x20>)
 8003eb6:	0004      	movs	r4, r0
 8003eb8:	0008      	movs	r0, r1
 8003eba:	602b      	str	r3, [r5, #0]
 8003ebc:	f7fc fd16 	bl	80008ec <_sbrk>
 8003ec0:	1c43      	adds	r3, r0, #1
 8003ec2:	d103      	bne.n	8003ecc <_sbrk_r+0x1c>
 8003ec4:	682b      	ldr	r3, [r5, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d000      	beq.n	8003ecc <_sbrk_r+0x1c>
 8003eca:	6023      	str	r3, [r4, #0]
 8003ecc:	bd70      	pop	{r4, r5, r6, pc}
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	200005b4 	.word	0x200005b4

08003ed4 <__sread>:
 8003ed4:	b570      	push	{r4, r5, r6, lr}
 8003ed6:	000c      	movs	r4, r1
 8003ed8:	250e      	movs	r5, #14
 8003eda:	5f49      	ldrsh	r1, [r1, r5]
 8003edc:	f000 faec 	bl	80044b8 <_read_r>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	db03      	blt.n	8003eec <__sread+0x18>
 8003ee4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ee6:	181b      	adds	r3, r3, r0
 8003ee8:	6563      	str	r3, [r4, #84]	; 0x54
 8003eea:	bd70      	pop	{r4, r5, r6, pc}
 8003eec:	89a3      	ldrh	r3, [r4, #12]
 8003eee:	4a02      	ldr	r2, [pc, #8]	; (8003ef8 <__sread+0x24>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	81a3      	strh	r3, [r4, #12]
 8003ef4:	e7f9      	b.n	8003eea <__sread+0x16>
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	ffffefff 	.word	0xffffefff

08003efc <__swrite>:
 8003efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efe:	001f      	movs	r7, r3
 8003f00:	898b      	ldrh	r3, [r1, #12]
 8003f02:	0005      	movs	r5, r0
 8003f04:	000c      	movs	r4, r1
 8003f06:	0016      	movs	r6, r2
 8003f08:	05db      	lsls	r3, r3, #23
 8003f0a:	d505      	bpl.n	8003f18 <__swrite+0x1c>
 8003f0c:	230e      	movs	r3, #14
 8003f0e:	5ec9      	ldrsh	r1, [r1, r3]
 8003f10:	2200      	movs	r2, #0
 8003f12:	2302      	movs	r3, #2
 8003f14:	f000 f9ea 	bl	80042ec <_lseek_r>
 8003f18:	89a3      	ldrh	r3, [r4, #12]
 8003f1a:	4a05      	ldr	r2, [pc, #20]	; (8003f30 <__swrite+0x34>)
 8003f1c:	0028      	movs	r0, r5
 8003f1e:	4013      	ands	r3, r2
 8003f20:	81a3      	strh	r3, [r4, #12]
 8003f22:	0032      	movs	r2, r6
 8003f24:	230e      	movs	r3, #14
 8003f26:	5ee1      	ldrsh	r1, [r4, r3]
 8003f28:	003b      	movs	r3, r7
 8003f2a:	f000 f875 	bl	8004018 <_write_r>
 8003f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f30:	ffffefff 	.word	0xffffefff

08003f34 <__sseek>:
 8003f34:	b570      	push	{r4, r5, r6, lr}
 8003f36:	000c      	movs	r4, r1
 8003f38:	250e      	movs	r5, #14
 8003f3a:	5f49      	ldrsh	r1, [r1, r5]
 8003f3c:	f000 f9d6 	bl	80042ec <_lseek_r>
 8003f40:	89a3      	ldrh	r3, [r4, #12]
 8003f42:	1c42      	adds	r2, r0, #1
 8003f44:	d103      	bne.n	8003f4e <__sseek+0x1a>
 8003f46:	4a05      	ldr	r2, [pc, #20]	; (8003f5c <__sseek+0x28>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	81a3      	strh	r3, [r4, #12]
 8003f4c:	bd70      	pop	{r4, r5, r6, pc}
 8003f4e:	2280      	movs	r2, #128	; 0x80
 8003f50:	0152      	lsls	r2, r2, #5
 8003f52:	4313      	orrs	r3, r2
 8003f54:	81a3      	strh	r3, [r4, #12]
 8003f56:	6560      	str	r0, [r4, #84]	; 0x54
 8003f58:	e7f8      	b.n	8003f4c <__sseek+0x18>
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	ffffefff 	.word	0xffffefff

08003f60 <__sclose>:
 8003f60:	b510      	push	{r4, lr}
 8003f62:	230e      	movs	r3, #14
 8003f64:	5ec9      	ldrsh	r1, [r1, r3]
 8003f66:	f000 f8e3 	bl	8004130 <_close_r>
 8003f6a:	bd10      	pop	{r4, pc}

08003f6c <__swbuf_r>:
 8003f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6e:	0005      	movs	r5, r0
 8003f70:	000e      	movs	r6, r1
 8003f72:	0014      	movs	r4, r2
 8003f74:	2800      	cmp	r0, #0
 8003f76:	d004      	beq.n	8003f82 <__swbuf_r+0x16>
 8003f78:	6983      	ldr	r3, [r0, #24]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <__swbuf_r+0x16>
 8003f7e:	f7ff fbb1 	bl	80036e4 <__sinit>
 8003f82:	4b22      	ldr	r3, [pc, #136]	; (800400c <__swbuf_r+0xa0>)
 8003f84:	429c      	cmp	r4, r3
 8003f86:	d12e      	bne.n	8003fe6 <__swbuf_r+0x7a>
 8003f88:	686c      	ldr	r4, [r5, #4]
 8003f8a:	69a3      	ldr	r3, [r4, #24]
 8003f8c:	60a3      	str	r3, [r4, #8]
 8003f8e:	89a3      	ldrh	r3, [r4, #12]
 8003f90:	071b      	lsls	r3, r3, #28
 8003f92:	d532      	bpl.n	8003ffa <__swbuf_r+0x8e>
 8003f94:	6923      	ldr	r3, [r4, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d02f      	beq.n	8003ffa <__swbuf_r+0x8e>
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	6922      	ldr	r2, [r4, #16]
 8003f9e:	b2f7      	uxtb	r7, r6
 8003fa0:	1a98      	subs	r0, r3, r2
 8003fa2:	6963      	ldr	r3, [r4, #20]
 8003fa4:	b2f6      	uxtb	r6, r6
 8003fa6:	4283      	cmp	r3, r0
 8003fa8:	dc05      	bgt.n	8003fb6 <__swbuf_r+0x4a>
 8003faa:	0021      	movs	r1, r4
 8003fac:	0028      	movs	r0, r5
 8003fae:	f000 f95d 	bl	800426c <_fflush_r>
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	d127      	bne.n	8004006 <__swbuf_r+0x9a>
 8003fb6:	68a3      	ldr	r3, [r4, #8]
 8003fb8:	3001      	adds	r0, #1
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	60a3      	str	r3, [r4, #8]
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	6022      	str	r2, [r4, #0]
 8003fc4:	701f      	strb	r7, [r3, #0]
 8003fc6:	6963      	ldr	r3, [r4, #20]
 8003fc8:	4283      	cmp	r3, r0
 8003fca:	d004      	beq.n	8003fd6 <__swbuf_r+0x6a>
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	07db      	lsls	r3, r3, #31
 8003fd0:	d507      	bpl.n	8003fe2 <__swbuf_r+0x76>
 8003fd2:	2e0a      	cmp	r6, #10
 8003fd4:	d105      	bne.n	8003fe2 <__swbuf_r+0x76>
 8003fd6:	0021      	movs	r1, r4
 8003fd8:	0028      	movs	r0, r5
 8003fda:	f000 f947 	bl	800426c <_fflush_r>
 8003fde:	2800      	cmp	r0, #0
 8003fe0:	d111      	bne.n	8004006 <__swbuf_r+0x9a>
 8003fe2:	0030      	movs	r0, r6
 8003fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fe6:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <__swbuf_r+0xa4>)
 8003fe8:	429c      	cmp	r4, r3
 8003fea:	d101      	bne.n	8003ff0 <__swbuf_r+0x84>
 8003fec:	68ac      	ldr	r4, [r5, #8]
 8003fee:	e7cc      	b.n	8003f8a <__swbuf_r+0x1e>
 8003ff0:	4b08      	ldr	r3, [pc, #32]	; (8004014 <__swbuf_r+0xa8>)
 8003ff2:	429c      	cmp	r4, r3
 8003ff4:	d1c9      	bne.n	8003f8a <__swbuf_r+0x1e>
 8003ff6:	68ec      	ldr	r4, [r5, #12]
 8003ff8:	e7c7      	b.n	8003f8a <__swbuf_r+0x1e>
 8003ffa:	0021      	movs	r1, r4
 8003ffc:	0028      	movs	r0, r5
 8003ffe:	f000 f81f 	bl	8004040 <__swsetup_r>
 8004002:	2800      	cmp	r0, #0
 8004004:	d0c9      	beq.n	8003f9a <__swbuf_r+0x2e>
 8004006:	2601      	movs	r6, #1
 8004008:	4276      	negs	r6, r6
 800400a:	e7ea      	b.n	8003fe2 <__swbuf_r+0x76>
 800400c:	08004600 	.word	0x08004600
 8004010:	08004620 	.word	0x08004620
 8004014:	080045e0 	.word	0x080045e0

08004018 <_write_r>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	0004      	movs	r4, r0
 800401c:	0008      	movs	r0, r1
 800401e:	0011      	movs	r1, r2
 8004020:	001a      	movs	r2, r3
 8004022:	2300      	movs	r3, #0
 8004024:	4d05      	ldr	r5, [pc, #20]	; (800403c <_write_r+0x24>)
 8004026:	602b      	str	r3, [r5, #0]
 8004028:	f7fc fc18 	bl	800085c <_write>
 800402c:	1c43      	adds	r3, r0, #1
 800402e:	d103      	bne.n	8004038 <_write_r+0x20>
 8004030:	682b      	ldr	r3, [r5, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d000      	beq.n	8004038 <_write_r+0x20>
 8004036:	6023      	str	r3, [r4, #0]
 8004038:	bd70      	pop	{r4, r5, r6, pc}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	200005b4 	.word	0x200005b4

08004040 <__swsetup_r>:
 8004040:	4b37      	ldr	r3, [pc, #220]	; (8004120 <__swsetup_r+0xe0>)
 8004042:	b570      	push	{r4, r5, r6, lr}
 8004044:	681d      	ldr	r5, [r3, #0]
 8004046:	0006      	movs	r6, r0
 8004048:	000c      	movs	r4, r1
 800404a:	2d00      	cmp	r5, #0
 800404c:	d005      	beq.n	800405a <__swsetup_r+0x1a>
 800404e:	69ab      	ldr	r3, [r5, #24]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <__swsetup_r+0x1a>
 8004054:	0028      	movs	r0, r5
 8004056:	f7ff fb45 	bl	80036e4 <__sinit>
 800405a:	4b32      	ldr	r3, [pc, #200]	; (8004124 <__swsetup_r+0xe4>)
 800405c:	429c      	cmp	r4, r3
 800405e:	d10f      	bne.n	8004080 <__swsetup_r+0x40>
 8004060:	686c      	ldr	r4, [r5, #4]
 8004062:	230c      	movs	r3, #12
 8004064:	5ee2      	ldrsh	r2, [r4, r3]
 8004066:	b293      	uxth	r3, r2
 8004068:	0711      	lsls	r1, r2, #28
 800406a:	d42d      	bmi.n	80040c8 <__swsetup_r+0x88>
 800406c:	06d9      	lsls	r1, r3, #27
 800406e:	d411      	bmi.n	8004094 <__swsetup_r+0x54>
 8004070:	2309      	movs	r3, #9
 8004072:	2001      	movs	r0, #1
 8004074:	6033      	str	r3, [r6, #0]
 8004076:	3337      	adds	r3, #55	; 0x37
 8004078:	4313      	orrs	r3, r2
 800407a:	81a3      	strh	r3, [r4, #12]
 800407c:	4240      	negs	r0, r0
 800407e:	bd70      	pop	{r4, r5, r6, pc}
 8004080:	4b29      	ldr	r3, [pc, #164]	; (8004128 <__swsetup_r+0xe8>)
 8004082:	429c      	cmp	r4, r3
 8004084:	d101      	bne.n	800408a <__swsetup_r+0x4a>
 8004086:	68ac      	ldr	r4, [r5, #8]
 8004088:	e7eb      	b.n	8004062 <__swsetup_r+0x22>
 800408a:	4b28      	ldr	r3, [pc, #160]	; (800412c <__swsetup_r+0xec>)
 800408c:	429c      	cmp	r4, r3
 800408e:	d1e8      	bne.n	8004062 <__swsetup_r+0x22>
 8004090:	68ec      	ldr	r4, [r5, #12]
 8004092:	e7e6      	b.n	8004062 <__swsetup_r+0x22>
 8004094:	075b      	lsls	r3, r3, #29
 8004096:	d513      	bpl.n	80040c0 <__swsetup_r+0x80>
 8004098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800409a:	2900      	cmp	r1, #0
 800409c:	d008      	beq.n	80040b0 <__swsetup_r+0x70>
 800409e:	0023      	movs	r3, r4
 80040a0:	3344      	adds	r3, #68	; 0x44
 80040a2:	4299      	cmp	r1, r3
 80040a4:	d002      	beq.n	80040ac <__swsetup_r+0x6c>
 80040a6:	0030      	movs	r0, r6
 80040a8:	f000 f9bc 	bl	8004424 <_free_r>
 80040ac:	2300      	movs	r3, #0
 80040ae:	6363      	str	r3, [r4, #52]	; 0x34
 80040b0:	2224      	movs	r2, #36	; 0x24
 80040b2:	89a3      	ldrh	r3, [r4, #12]
 80040b4:	4393      	bics	r3, r2
 80040b6:	81a3      	strh	r3, [r4, #12]
 80040b8:	2300      	movs	r3, #0
 80040ba:	6063      	str	r3, [r4, #4]
 80040bc:	6923      	ldr	r3, [r4, #16]
 80040be:	6023      	str	r3, [r4, #0]
 80040c0:	2308      	movs	r3, #8
 80040c2:	89a2      	ldrh	r2, [r4, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	81a3      	strh	r3, [r4, #12]
 80040c8:	6923      	ldr	r3, [r4, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10b      	bne.n	80040e6 <__swsetup_r+0xa6>
 80040ce:	21a0      	movs	r1, #160	; 0xa0
 80040d0:	2280      	movs	r2, #128	; 0x80
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	0089      	lsls	r1, r1, #2
 80040d6:	0092      	lsls	r2, r2, #2
 80040d8:	400b      	ands	r3, r1
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <__swsetup_r+0xa6>
 80040de:	0021      	movs	r1, r4
 80040e0:	0030      	movs	r0, r6
 80040e2:	f000 f93f 	bl	8004364 <__smakebuf_r>
 80040e6:	220c      	movs	r2, #12
 80040e8:	5ea3      	ldrsh	r3, [r4, r2]
 80040ea:	2001      	movs	r0, #1
 80040ec:	001a      	movs	r2, r3
 80040ee:	b299      	uxth	r1, r3
 80040f0:	4002      	ands	r2, r0
 80040f2:	4203      	tst	r3, r0
 80040f4:	d00f      	beq.n	8004116 <__swsetup_r+0xd6>
 80040f6:	2200      	movs	r2, #0
 80040f8:	60a2      	str	r2, [r4, #8]
 80040fa:	6962      	ldr	r2, [r4, #20]
 80040fc:	4252      	negs	r2, r2
 80040fe:	61a2      	str	r2, [r4, #24]
 8004100:	2000      	movs	r0, #0
 8004102:	6922      	ldr	r2, [r4, #16]
 8004104:	4282      	cmp	r2, r0
 8004106:	d1ba      	bne.n	800407e <__swsetup_r+0x3e>
 8004108:	060a      	lsls	r2, r1, #24
 800410a:	d5b8      	bpl.n	800407e <__swsetup_r+0x3e>
 800410c:	2240      	movs	r2, #64	; 0x40
 800410e:	4313      	orrs	r3, r2
 8004110:	81a3      	strh	r3, [r4, #12]
 8004112:	3801      	subs	r0, #1
 8004114:	e7b3      	b.n	800407e <__swsetup_r+0x3e>
 8004116:	0788      	lsls	r0, r1, #30
 8004118:	d400      	bmi.n	800411c <__swsetup_r+0xdc>
 800411a:	6962      	ldr	r2, [r4, #20]
 800411c:	60a2      	str	r2, [r4, #8]
 800411e:	e7ef      	b.n	8004100 <__swsetup_r+0xc0>
 8004120:	2000040c 	.word	0x2000040c
 8004124:	08004600 	.word	0x08004600
 8004128:	08004620 	.word	0x08004620
 800412c:	080045e0 	.word	0x080045e0

08004130 <_close_r>:
 8004130:	2300      	movs	r3, #0
 8004132:	b570      	push	{r4, r5, r6, lr}
 8004134:	4d06      	ldr	r5, [pc, #24]	; (8004150 <_close_r+0x20>)
 8004136:	0004      	movs	r4, r0
 8004138:	0008      	movs	r0, r1
 800413a:	602b      	str	r3, [r5, #0]
 800413c:	f7fc fbaa 	bl	8000894 <_close>
 8004140:	1c43      	adds	r3, r0, #1
 8004142:	d103      	bne.n	800414c <_close_r+0x1c>
 8004144:	682b      	ldr	r3, [r5, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d000      	beq.n	800414c <_close_r+0x1c>
 800414a:	6023      	str	r3, [r4, #0]
 800414c:	bd70      	pop	{r4, r5, r6, pc}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	200005b4 	.word	0x200005b4

08004154 <__sflush_r>:
 8004154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004156:	898b      	ldrh	r3, [r1, #12]
 8004158:	0005      	movs	r5, r0
 800415a:	000c      	movs	r4, r1
 800415c:	071a      	lsls	r2, r3, #28
 800415e:	d45f      	bmi.n	8004220 <__sflush_r+0xcc>
 8004160:	684a      	ldr	r2, [r1, #4]
 8004162:	2a00      	cmp	r2, #0
 8004164:	dc04      	bgt.n	8004170 <__sflush_r+0x1c>
 8004166:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004168:	2a00      	cmp	r2, #0
 800416a:	dc01      	bgt.n	8004170 <__sflush_r+0x1c>
 800416c:	2000      	movs	r0, #0
 800416e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004170:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004172:	2f00      	cmp	r7, #0
 8004174:	d0fa      	beq.n	800416c <__sflush_r+0x18>
 8004176:	2200      	movs	r2, #0
 8004178:	2180      	movs	r1, #128	; 0x80
 800417a:	682e      	ldr	r6, [r5, #0]
 800417c:	602a      	str	r2, [r5, #0]
 800417e:	001a      	movs	r2, r3
 8004180:	0149      	lsls	r1, r1, #5
 8004182:	400a      	ands	r2, r1
 8004184:	420b      	tst	r3, r1
 8004186:	d034      	beq.n	80041f2 <__sflush_r+0x9e>
 8004188:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800418a:	89a3      	ldrh	r3, [r4, #12]
 800418c:	075b      	lsls	r3, r3, #29
 800418e:	d506      	bpl.n	800419e <__sflush_r+0x4a>
 8004190:	6863      	ldr	r3, [r4, #4]
 8004192:	1ac0      	subs	r0, r0, r3
 8004194:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <__sflush_r+0x4a>
 800419a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800419c:	1ac0      	subs	r0, r0, r3
 800419e:	0002      	movs	r2, r0
 80041a0:	6a21      	ldr	r1, [r4, #32]
 80041a2:	2300      	movs	r3, #0
 80041a4:	0028      	movs	r0, r5
 80041a6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80041a8:	47b8      	blx	r7
 80041aa:	89a1      	ldrh	r1, [r4, #12]
 80041ac:	1c43      	adds	r3, r0, #1
 80041ae:	d106      	bne.n	80041be <__sflush_r+0x6a>
 80041b0:	682b      	ldr	r3, [r5, #0]
 80041b2:	2b1d      	cmp	r3, #29
 80041b4:	d831      	bhi.n	800421a <__sflush_r+0xc6>
 80041b6:	4a2c      	ldr	r2, [pc, #176]	; (8004268 <__sflush_r+0x114>)
 80041b8:	40da      	lsrs	r2, r3
 80041ba:	07d3      	lsls	r3, r2, #31
 80041bc:	d52d      	bpl.n	800421a <__sflush_r+0xc6>
 80041be:	2300      	movs	r3, #0
 80041c0:	6063      	str	r3, [r4, #4]
 80041c2:	6923      	ldr	r3, [r4, #16]
 80041c4:	6023      	str	r3, [r4, #0]
 80041c6:	04cb      	lsls	r3, r1, #19
 80041c8:	d505      	bpl.n	80041d6 <__sflush_r+0x82>
 80041ca:	1c43      	adds	r3, r0, #1
 80041cc:	d102      	bne.n	80041d4 <__sflush_r+0x80>
 80041ce:	682b      	ldr	r3, [r5, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d100      	bne.n	80041d6 <__sflush_r+0x82>
 80041d4:	6560      	str	r0, [r4, #84]	; 0x54
 80041d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041d8:	602e      	str	r6, [r5, #0]
 80041da:	2900      	cmp	r1, #0
 80041dc:	d0c6      	beq.n	800416c <__sflush_r+0x18>
 80041de:	0023      	movs	r3, r4
 80041e0:	3344      	adds	r3, #68	; 0x44
 80041e2:	4299      	cmp	r1, r3
 80041e4:	d002      	beq.n	80041ec <__sflush_r+0x98>
 80041e6:	0028      	movs	r0, r5
 80041e8:	f000 f91c 	bl	8004424 <_free_r>
 80041ec:	2000      	movs	r0, #0
 80041ee:	6360      	str	r0, [r4, #52]	; 0x34
 80041f0:	e7bd      	b.n	800416e <__sflush_r+0x1a>
 80041f2:	2301      	movs	r3, #1
 80041f4:	0028      	movs	r0, r5
 80041f6:	6a21      	ldr	r1, [r4, #32]
 80041f8:	47b8      	blx	r7
 80041fa:	1c43      	adds	r3, r0, #1
 80041fc:	d1c5      	bne.n	800418a <__sflush_r+0x36>
 80041fe:	682b      	ldr	r3, [r5, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0c2      	beq.n	800418a <__sflush_r+0x36>
 8004204:	2b1d      	cmp	r3, #29
 8004206:	d001      	beq.n	800420c <__sflush_r+0xb8>
 8004208:	2b16      	cmp	r3, #22
 800420a:	d101      	bne.n	8004210 <__sflush_r+0xbc>
 800420c:	602e      	str	r6, [r5, #0]
 800420e:	e7ad      	b.n	800416c <__sflush_r+0x18>
 8004210:	2340      	movs	r3, #64	; 0x40
 8004212:	89a2      	ldrh	r2, [r4, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	81a3      	strh	r3, [r4, #12]
 8004218:	e7a9      	b.n	800416e <__sflush_r+0x1a>
 800421a:	2340      	movs	r3, #64	; 0x40
 800421c:	430b      	orrs	r3, r1
 800421e:	e7fa      	b.n	8004216 <__sflush_r+0xc2>
 8004220:	690f      	ldr	r7, [r1, #16]
 8004222:	2f00      	cmp	r7, #0
 8004224:	d0a2      	beq.n	800416c <__sflush_r+0x18>
 8004226:	680a      	ldr	r2, [r1, #0]
 8004228:	600f      	str	r7, [r1, #0]
 800422a:	1bd2      	subs	r2, r2, r7
 800422c:	9201      	str	r2, [sp, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	079b      	lsls	r3, r3, #30
 8004232:	d100      	bne.n	8004236 <__sflush_r+0xe2>
 8004234:	694a      	ldr	r2, [r1, #20]
 8004236:	60a2      	str	r2, [r4, #8]
 8004238:	9b01      	ldr	r3, [sp, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	dc00      	bgt.n	8004240 <__sflush_r+0xec>
 800423e:	e795      	b.n	800416c <__sflush_r+0x18>
 8004240:	003a      	movs	r2, r7
 8004242:	0028      	movs	r0, r5
 8004244:	9b01      	ldr	r3, [sp, #4]
 8004246:	6a21      	ldr	r1, [r4, #32]
 8004248:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800424a:	47b0      	blx	r6
 800424c:	2800      	cmp	r0, #0
 800424e:	dc06      	bgt.n	800425e <__sflush_r+0x10a>
 8004250:	2340      	movs	r3, #64	; 0x40
 8004252:	2001      	movs	r0, #1
 8004254:	89a2      	ldrh	r2, [r4, #12]
 8004256:	4240      	negs	r0, r0
 8004258:	4313      	orrs	r3, r2
 800425a:	81a3      	strh	r3, [r4, #12]
 800425c:	e787      	b.n	800416e <__sflush_r+0x1a>
 800425e:	9b01      	ldr	r3, [sp, #4]
 8004260:	183f      	adds	r7, r7, r0
 8004262:	1a1b      	subs	r3, r3, r0
 8004264:	9301      	str	r3, [sp, #4]
 8004266:	e7e7      	b.n	8004238 <__sflush_r+0xe4>
 8004268:	20400001 	.word	0x20400001

0800426c <_fflush_r>:
 800426c:	690b      	ldr	r3, [r1, #16]
 800426e:	b570      	push	{r4, r5, r6, lr}
 8004270:	0005      	movs	r5, r0
 8004272:	000c      	movs	r4, r1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d102      	bne.n	800427e <_fflush_r+0x12>
 8004278:	2500      	movs	r5, #0
 800427a:	0028      	movs	r0, r5
 800427c:	bd70      	pop	{r4, r5, r6, pc}
 800427e:	2800      	cmp	r0, #0
 8004280:	d004      	beq.n	800428c <_fflush_r+0x20>
 8004282:	6983      	ldr	r3, [r0, #24]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <_fflush_r+0x20>
 8004288:	f7ff fa2c 	bl	80036e4 <__sinit>
 800428c:	4b14      	ldr	r3, [pc, #80]	; (80042e0 <_fflush_r+0x74>)
 800428e:	429c      	cmp	r4, r3
 8004290:	d11b      	bne.n	80042ca <_fflush_r+0x5e>
 8004292:	686c      	ldr	r4, [r5, #4]
 8004294:	220c      	movs	r2, #12
 8004296:	5ea3      	ldrsh	r3, [r4, r2]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0ed      	beq.n	8004278 <_fflush_r+0xc>
 800429c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800429e:	07d2      	lsls	r2, r2, #31
 80042a0:	d404      	bmi.n	80042ac <_fflush_r+0x40>
 80042a2:	059b      	lsls	r3, r3, #22
 80042a4:	d402      	bmi.n	80042ac <_fflush_r+0x40>
 80042a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042a8:	f7ff fabd 	bl	8003826 <__retarget_lock_acquire_recursive>
 80042ac:	0028      	movs	r0, r5
 80042ae:	0021      	movs	r1, r4
 80042b0:	f7ff ff50 	bl	8004154 <__sflush_r>
 80042b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042b6:	0005      	movs	r5, r0
 80042b8:	07db      	lsls	r3, r3, #31
 80042ba:	d4de      	bmi.n	800427a <_fflush_r+0xe>
 80042bc:	89a3      	ldrh	r3, [r4, #12]
 80042be:	059b      	lsls	r3, r3, #22
 80042c0:	d4db      	bmi.n	800427a <_fflush_r+0xe>
 80042c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042c4:	f7ff fab0 	bl	8003828 <__retarget_lock_release_recursive>
 80042c8:	e7d7      	b.n	800427a <_fflush_r+0xe>
 80042ca:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <_fflush_r+0x78>)
 80042cc:	429c      	cmp	r4, r3
 80042ce:	d101      	bne.n	80042d4 <_fflush_r+0x68>
 80042d0:	68ac      	ldr	r4, [r5, #8]
 80042d2:	e7df      	b.n	8004294 <_fflush_r+0x28>
 80042d4:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <_fflush_r+0x7c>)
 80042d6:	429c      	cmp	r4, r3
 80042d8:	d1dc      	bne.n	8004294 <_fflush_r+0x28>
 80042da:	68ec      	ldr	r4, [r5, #12]
 80042dc:	e7da      	b.n	8004294 <_fflush_r+0x28>
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	08004600 	.word	0x08004600
 80042e4:	08004620 	.word	0x08004620
 80042e8:	080045e0 	.word	0x080045e0

080042ec <_lseek_r>:
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	0004      	movs	r4, r0
 80042f0:	0008      	movs	r0, r1
 80042f2:	0011      	movs	r1, r2
 80042f4:	001a      	movs	r2, r3
 80042f6:	2300      	movs	r3, #0
 80042f8:	4d05      	ldr	r5, [pc, #20]	; (8004310 <_lseek_r+0x24>)
 80042fa:	602b      	str	r3, [r5, #0]
 80042fc:	f7fc faeb 	bl	80008d6 <_lseek>
 8004300:	1c43      	adds	r3, r0, #1
 8004302:	d103      	bne.n	800430c <_lseek_r+0x20>
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d000      	beq.n	800430c <_lseek_r+0x20>
 800430a:	6023      	str	r3, [r4, #0]
 800430c:	bd70      	pop	{r4, r5, r6, pc}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	200005b4 	.word	0x200005b4

08004314 <__swhatbuf_r>:
 8004314:	b570      	push	{r4, r5, r6, lr}
 8004316:	000e      	movs	r6, r1
 8004318:	001d      	movs	r5, r3
 800431a:	230e      	movs	r3, #14
 800431c:	5ec9      	ldrsh	r1, [r1, r3]
 800431e:	0014      	movs	r4, r2
 8004320:	b096      	sub	sp, #88	; 0x58
 8004322:	2900      	cmp	r1, #0
 8004324:	da07      	bge.n	8004336 <__swhatbuf_r+0x22>
 8004326:	2300      	movs	r3, #0
 8004328:	602b      	str	r3, [r5, #0]
 800432a:	89b3      	ldrh	r3, [r6, #12]
 800432c:	061b      	lsls	r3, r3, #24
 800432e:	d411      	bmi.n	8004354 <__swhatbuf_r+0x40>
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	e00f      	b.n	8004356 <__swhatbuf_r+0x42>
 8004336:	466a      	mov	r2, sp
 8004338:	f000 f8d2 	bl	80044e0 <_fstat_r>
 800433c:	2800      	cmp	r0, #0
 800433e:	dbf2      	blt.n	8004326 <__swhatbuf_r+0x12>
 8004340:	23f0      	movs	r3, #240	; 0xf0
 8004342:	9901      	ldr	r1, [sp, #4]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	4019      	ands	r1, r3
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <__swhatbuf_r+0x4c>)
 800434a:	18c9      	adds	r1, r1, r3
 800434c:	424b      	negs	r3, r1
 800434e:	4159      	adcs	r1, r3
 8004350:	6029      	str	r1, [r5, #0]
 8004352:	e7ed      	b.n	8004330 <__swhatbuf_r+0x1c>
 8004354:	2340      	movs	r3, #64	; 0x40
 8004356:	2000      	movs	r0, #0
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	b016      	add	sp, #88	; 0x58
 800435c:	bd70      	pop	{r4, r5, r6, pc}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	ffffe000 	.word	0xffffe000

08004364 <__smakebuf_r>:
 8004364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004366:	2602      	movs	r6, #2
 8004368:	898b      	ldrh	r3, [r1, #12]
 800436a:	0005      	movs	r5, r0
 800436c:	000c      	movs	r4, r1
 800436e:	4233      	tst	r3, r6
 8004370:	d006      	beq.n	8004380 <__smakebuf_r+0x1c>
 8004372:	0023      	movs	r3, r4
 8004374:	3347      	adds	r3, #71	; 0x47
 8004376:	6023      	str	r3, [r4, #0]
 8004378:	6123      	str	r3, [r4, #16]
 800437a:	2301      	movs	r3, #1
 800437c:	6163      	str	r3, [r4, #20]
 800437e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004380:	466a      	mov	r2, sp
 8004382:	ab01      	add	r3, sp, #4
 8004384:	f7ff ffc6 	bl	8004314 <__swhatbuf_r>
 8004388:	9900      	ldr	r1, [sp, #0]
 800438a:	0007      	movs	r7, r0
 800438c:	0028      	movs	r0, r5
 800438e:	f7ff fa4d 	bl	800382c <_malloc_r>
 8004392:	2800      	cmp	r0, #0
 8004394:	d108      	bne.n	80043a8 <__smakebuf_r+0x44>
 8004396:	220c      	movs	r2, #12
 8004398:	5ea3      	ldrsh	r3, [r4, r2]
 800439a:	059a      	lsls	r2, r3, #22
 800439c:	d4ef      	bmi.n	800437e <__smakebuf_r+0x1a>
 800439e:	2203      	movs	r2, #3
 80043a0:	4393      	bics	r3, r2
 80043a2:	431e      	orrs	r6, r3
 80043a4:	81a6      	strh	r6, [r4, #12]
 80043a6:	e7e4      	b.n	8004372 <__smakebuf_r+0xe>
 80043a8:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <__smakebuf_r+0x84>)
 80043aa:	62ab      	str	r3, [r5, #40]	; 0x28
 80043ac:	2380      	movs	r3, #128	; 0x80
 80043ae:	89a2      	ldrh	r2, [r4, #12]
 80043b0:	6020      	str	r0, [r4, #0]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	81a3      	strh	r3, [r4, #12]
 80043b6:	9b00      	ldr	r3, [sp, #0]
 80043b8:	6120      	str	r0, [r4, #16]
 80043ba:	6163      	str	r3, [r4, #20]
 80043bc:	9b01      	ldr	r3, [sp, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00d      	beq.n	80043de <__smakebuf_r+0x7a>
 80043c2:	0028      	movs	r0, r5
 80043c4:	230e      	movs	r3, #14
 80043c6:	5ee1      	ldrsh	r1, [r4, r3]
 80043c8:	f000 f89c 	bl	8004504 <_isatty_r>
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d006      	beq.n	80043de <__smakebuf_r+0x7a>
 80043d0:	2203      	movs	r2, #3
 80043d2:	89a3      	ldrh	r3, [r4, #12]
 80043d4:	4393      	bics	r3, r2
 80043d6:	001a      	movs	r2, r3
 80043d8:	2301      	movs	r3, #1
 80043da:	4313      	orrs	r3, r2
 80043dc:	81a3      	strh	r3, [r4, #12]
 80043de:	89a0      	ldrh	r0, [r4, #12]
 80043e0:	4307      	orrs	r7, r0
 80043e2:	81a7      	strh	r7, [r4, #12]
 80043e4:	e7cb      	b.n	800437e <__smakebuf_r+0x1a>
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	08003669 	.word	0x08003669

080043ec <memchr>:
 80043ec:	b2c9      	uxtb	r1, r1
 80043ee:	1882      	adds	r2, r0, r2
 80043f0:	4290      	cmp	r0, r2
 80043f2:	d101      	bne.n	80043f8 <memchr+0xc>
 80043f4:	2000      	movs	r0, #0
 80043f6:	4770      	bx	lr
 80043f8:	7803      	ldrb	r3, [r0, #0]
 80043fa:	428b      	cmp	r3, r1
 80043fc:	d0fb      	beq.n	80043f6 <memchr+0xa>
 80043fe:	3001      	adds	r0, #1
 8004400:	e7f6      	b.n	80043f0 <memchr+0x4>
	...

08004404 <__malloc_lock>:
 8004404:	b510      	push	{r4, lr}
 8004406:	4802      	ldr	r0, [pc, #8]	; (8004410 <__malloc_lock+0xc>)
 8004408:	f7ff fa0d 	bl	8003826 <__retarget_lock_acquire_recursive>
 800440c:	bd10      	pop	{r4, pc}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	200005ac 	.word	0x200005ac

08004414 <__malloc_unlock>:
 8004414:	b510      	push	{r4, lr}
 8004416:	4802      	ldr	r0, [pc, #8]	; (8004420 <__malloc_unlock+0xc>)
 8004418:	f7ff fa06 	bl	8003828 <__retarget_lock_release_recursive>
 800441c:	bd10      	pop	{r4, pc}
 800441e:	46c0      	nop			; (mov r8, r8)
 8004420:	200005ac 	.word	0x200005ac

08004424 <_free_r>:
 8004424:	b570      	push	{r4, r5, r6, lr}
 8004426:	0005      	movs	r5, r0
 8004428:	2900      	cmp	r1, #0
 800442a:	d010      	beq.n	800444e <_free_r+0x2a>
 800442c:	1f0c      	subs	r4, r1, #4
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	da00      	bge.n	8004436 <_free_r+0x12>
 8004434:	18e4      	adds	r4, r4, r3
 8004436:	0028      	movs	r0, r5
 8004438:	f7ff ffe4 	bl	8004404 <__malloc_lock>
 800443c:	4a1d      	ldr	r2, [pc, #116]	; (80044b4 <_free_r+0x90>)
 800443e:	6813      	ldr	r3, [r2, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d105      	bne.n	8004450 <_free_r+0x2c>
 8004444:	6063      	str	r3, [r4, #4]
 8004446:	6014      	str	r4, [r2, #0]
 8004448:	0028      	movs	r0, r5
 800444a:	f7ff ffe3 	bl	8004414 <__malloc_unlock>
 800444e:	bd70      	pop	{r4, r5, r6, pc}
 8004450:	42a3      	cmp	r3, r4
 8004452:	d908      	bls.n	8004466 <_free_r+0x42>
 8004454:	6821      	ldr	r1, [r4, #0]
 8004456:	1860      	adds	r0, r4, r1
 8004458:	4283      	cmp	r3, r0
 800445a:	d1f3      	bne.n	8004444 <_free_r+0x20>
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	1841      	adds	r1, r0, r1
 8004462:	6021      	str	r1, [r4, #0]
 8004464:	e7ee      	b.n	8004444 <_free_r+0x20>
 8004466:	001a      	movs	r2, r3
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <_free_r+0x4e>
 800446e:	42a3      	cmp	r3, r4
 8004470:	d9f9      	bls.n	8004466 <_free_r+0x42>
 8004472:	6811      	ldr	r1, [r2, #0]
 8004474:	1850      	adds	r0, r2, r1
 8004476:	42a0      	cmp	r0, r4
 8004478:	d10b      	bne.n	8004492 <_free_r+0x6e>
 800447a:	6820      	ldr	r0, [r4, #0]
 800447c:	1809      	adds	r1, r1, r0
 800447e:	1850      	adds	r0, r2, r1
 8004480:	6011      	str	r1, [r2, #0]
 8004482:	4283      	cmp	r3, r0
 8004484:	d1e0      	bne.n	8004448 <_free_r+0x24>
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	1841      	adds	r1, r0, r1
 800448c:	6011      	str	r1, [r2, #0]
 800448e:	6053      	str	r3, [r2, #4]
 8004490:	e7da      	b.n	8004448 <_free_r+0x24>
 8004492:	42a0      	cmp	r0, r4
 8004494:	d902      	bls.n	800449c <_free_r+0x78>
 8004496:	230c      	movs	r3, #12
 8004498:	602b      	str	r3, [r5, #0]
 800449a:	e7d5      	b.n	8004448 <_free_r+0x24>
 800449c:	6821      	ldr	r1, [r4, #0]
 800449e:	1860      	adds	r0, r4, r1
 80044a0:	4283      	cmp	r3, r0
 80044a2:	d103      	bne.n	80044ac <_free_r+0x88>
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	1841      	adds	r1, r0, r1
 80044aa:	6021      	str	r1, [r4, #0]
 80044ac:	6063      	str	r3, [r4, #4]
 80044ae:	6054      	str	r4, [r2, #4]
 80044b0:	e7ca      	b.n	8004448 <_free_r+0x24>
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	20000490 	.word	0x20000490

080044b8 <_read_r>:
 80044b8:	b570      	push	{r4, r5, r6, lr}
 80044ba:	0004      	movs	r4, r0
 80044bc:	0008      	movs	r0, r1
 80044be:	0011      	movs	r1, r2
 80044c0:	001a      	movs	r2, r3
 80044c2:	2300      	movs	r3, #0
 80044c4:	4d05      	ldr	r5, [pc, #20]	; (80044dc <_read_r+0x24>)
 80044c6:	602b      	str	r3, [r5, #0]
 80044c8:	f7fc f9ab 	bl	8000822 <_read>
 80044cc:	1c43      	adds	r3, r0, #1
 80044ce:	d103      	bne.n	80044d8 <_read_r+0x20>
 80044d0:	682b      	ldr	r3, [r5, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d000      	beq.n	80044d8 <_read_r+0x20>
 80044d6:	6023      	str	r3, [r4, #0]
 80044d8:	bd70      	pop	{r4, r5, r6, pc}
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	200005b4 	.word	0x200005b4

080044e0 <_fstat_r>:
 80044e0:	2300      	movs	r3, #0
 80044e2:	b570      	push	{r4, r5, r6, lr}
 80044e4:	4d06      	ldr	r5, [pc, #24]	; (8004500 <_fstat_r+0x20>)
 80044e6:	0004      	movs	r4, r0
 80044e8:	0008      	movs	r0, r1
 80044ea:	0011      	movs	r1, r2
 80044ec:	602b      	str	r3, [r5, #0]
 80044ee:	f7fc f9db 	bl	80008a8 <_fstat>
 80044f2:	1c43      	adds	r3, r0, #1
 80044f4:	d103      	bne.n	80044fe <_fstat_r+0x1e>
 80044f6:	682b      	ldr	r3, [r5, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d000      	beq.n	80044fe <_fstat_r+0x1e>
 80044fc:	6023      	str	r3, [r4, #0]
 80044fe:	bd70      	pop	{r4, r5, r6, pc}
 8004500:	200005b4 	.word	0x200005b4

08004504 <_isatty_r>:
 8004504:	2300      	movs	r3, #0
 8004506:	b570      	push	{r4, r5, r6, lr}
 8004508:	4d06      	ldr	r5, [pc, #24]	; (8004524 <_isatty_r+0x20>)
 800450a:	0004      	movs	r4, r0
 800450c:	0008      	movs	r0, r1
 800450e:	602b      	str	r3, [r5, #0]
 8004510:	f7fc f9d8 	bl	80008c4 <_isatty>
 8004514:	1c43      	adds	r3, r0, #1
 8004516:	d103      	bne.n	8004520 <_isatty_r+0x1c>
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d000      	beq.n	8004520 <_isatty_r+0x1c>
 800451e:	6023      	str	r3, [r4, #0]
 8004520:	bd70      	pop	{r4, r5, r6, pc}
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	200005b4 	.word	0x200005b4

08004528 <_init>:
 8004528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452e:	bc08      	pop	{r3}
 8004530:	469e      	mov	lr, r3
 8004532:	4770      	bx	lr

08004534 <_fini>:
 8004534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453a:	bc08      	pop	{r3}
 800453c:	469e      	mov	lr, r3
 800453e:	4770      	bx	lr
