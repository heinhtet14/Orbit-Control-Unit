
DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004654  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080047e0  080047e0  000147e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049d0  080049d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080049d0  080049d0  000149d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049d8  080049d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049d8  080049d8  000149d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049dc  080049dc  000149dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080049e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000000c  080049ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  080049ec  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfed  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cda  00000000  00000000  0002c022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0002dd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  0002e848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f99b  00000000  00000000  0002f2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2c7  00000000  00000000  0004ec53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1ad8  00000000  00000000  0005af1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011c9f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032e0  00000000  00000000  0011ca48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080047c4 	.word	0x080047c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080047c4 	.word	0x080047c4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b96e 	b.w	8000df8 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9e08      	ldr	r6, [sp, #32]
 8000b3a:	460d      	mov	r5, r1
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	468e      	mov	lr, r1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	f040 8083 	bne.w	8000c4c <__udivmoddi4+0x118>
 8000b46:	428a      	cmp	r2, r1
 8000b48:	4617      	mov	r7, r2
 8000b4a:	d947      	bls.n	8000bdc <__udivmoddi4+0xa8>
 8000b4c:	fab2 f382 	clz	r3, r2
 8000b50:	b14b      	cbz	r3, 8000b66 <__udivmoddi4+0x32>
 8000b52:	f1c3 0120 	rsb	r1, r3, #32
 8000b56:	fa05 fe03 	lsl.w	lr, r5, r3
 8000b5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000b5e:	409f      	lsls	r7, r3
 8000b60:	ea41 0e0e 	orr.w	lr, r1, lr
 8000b64:	409c      	lsls	r4, r3
 8000b66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b6a:	fbbe fcf8 	udiv	ip, lr, r8
 8000b6e:	fa1f f987 	uxth.w	r9, r7
 8000b72:	fb08 e21c 	mls	r2, r8, ip, lr
 8000b76:	fb0c f009 	mul.w	r0, ip, r9
 8000b7a:	0c21      	lsrs	r1, r4, #16
 8000b7c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000b80:	4290      	cmp	r0, r2
 8000b82:	d90a      	bls.n	8000b9a <__udivmoddi4+0x66>
 8000b84:	18ba      	adds	r2, r7, r2
 8000b86:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000b8a:	f080 8118 	bcs.w	8000dbe <__udivmoddi4+0x28a>
 8000b8e:	4290      	cmp	r0, r2
 8000b90:	f240 8115 	bls.w	8000dbe <__udivmoddi4+0x28a>
 8000b94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b98:	443a      	add	r2, r7
 8000b9a:	1a12      	subs	r2, r2, r0
 8000b9c:	fbb2 f0f8 	udiv	r0, r2, r8
 8000ba0:	fb08 2210 	mls	r2, r8, r0, r2
 8000ba4:	fb00 f109 	mul.w	r1, r0, r9
 8000ba8:	b2a4      	uxth	r4, r4
 8000baa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bae:	42a1      	cmp	r1, r4
 8000bb0:	d909      	bls.n	8000bc6 <__udivmoddi4+0x92>
 8000bb2:	193c      	adds	r4, r7, r4
 8000bb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bb8:	f080 8103 	bcs.w	8000dc2 <__udivmoddi4+0x28e>
 8000bbc:	42a1      	cmp	r1, r4
 8000bbe:	f240 8100 	bls.w	8000dc2 <__udivmoddi4+0x28e>
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	443c      	add	r4, r7
 8000bc6:	1a64      	subs	r4, r4, r1
 8000bc8:	2100      	movs	r1, #0
 8000bca:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bce:	b11e      	cbz	r6, 8000bd8 <__udivmoddi4+0xa4>
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	40dc      	lsrs	r4, r3
 8000bd4:	e9c6 4200 	strd	r4, r2, [r6]
 8000bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bdc:	b902      	cbnz	r2, 8000be0 <__udivmoddi4+0xac>
 8000bde:	deff      	udf	#255	; 0xff
 8000be0:	fab2 f382 	clz	r3, r2
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14f      	bne.n	8000c88 <__udivmoddi4+0x154>
 8000be8:	1a8d      	subs	r5, r1, r2
 8000bea:	2101      	movs	r1, #1
 8000bec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000bf0:	fa1f f882 	uxth.w	r8, r2
 8000bf4:	fbb5 fcfe 	udiv	ip, r5, lr
 8000bf8:	fb0e 551c 	mls	r5, lr, ip, r5
 8000bfc:	fb08 f00c 	mul.w	r0, r8, ip
 8000c00:	0c22      	lsrs	r2, r4, #16
 8000c02:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000c06:	42a8      	cmp	r0, r5
 8000c08:	d907      	bls.n	8000c1a <__udivmoddi4+0xe6>
 8000c0a:	197d      	adds	r5, r7, r5
 8000c0c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000c10:	d202      	bcs.n	8000c18 <__udivmoddi4+0xe4>
 8000c12:	42a8      	cmp	r0, r5
 8000c14:	f200 80e9 	bhi.w	8000dea <__udivmoddi4+0x2b6>
 8000c18:	4694      	mov	ip, r2
 8000c1a:	1a2d      	subs	r5, r5, r0
 8000c1c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c20:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c24:	fb08 f800 	mul.w	r8, r8, r0
 8000c28:	b2a4      	uxth	r4, r4
 8000c2a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c2e:	45a0      	cmp	r8, r4
 8000c30:	d907      	bls.n	8000c42 <__udivmoddi4+0x10e>
 8000c32:	193c      	adds	r4, r7, r4
 8000c34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x10c>
 8000c3a:	45a0      	cmp	r8, r4
 8000c3c:	f200 80d9 	bhi.w	8000df2 <__udivmoddi4+0x2be>
 8000c40:	4610      	mov	r0, r2
 8000c42:	eba4 0408 	sub.w	r4, r4, r8
 8000c46:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c4a:	e7c0      	b.n	8000bce <__udivmoddi4+0x9a>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x12e>
 8000c50:	2e00      	cmp	r6, #0
 8000c52:	f000 80b1 	beq.w	8000db8 <__udivmoddi4+0x284>
 8000c56:	2100      	movs	r1, #0
 8000c58:	e9c6 0500 	strd	r0, r5, [r6]
 8000c5c:	4608      	mov	r0, r1
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	fab3 f183 	clz	r1, r3
 8000c66:	2900      	cmp	r1, #0
 8000c68:	d14b      	bne.n	8000d02 <__udivmoddi4+0x1ce>
 8000c6a:	42ab      	cmp	r3, r5
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0x140>
 8000c6e:	4282      	cmp	r2, r0
 8000c70:	f200 80b9 	bhi.w	8000de6 <__udivmoddi4+0x2b2>
 8000c74:	1a84      	subs	r4, r0, r2
 8000c76:	eb65 0303 	sbc.w	r3, r5, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	469e      	mov	lr, r3
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	d0aa      	beq.n	8000bd8 <__udivmoddi4+0xa4>
 8000c82:	e9c6 4e00 	strd	r4, lr, [r6]
 8000c86:	e7a7      	b.n	8000bd8 <__udivmoddi4+0xa4>
 8000c88:	409f      	lsls	r7, r3
 8000c8a:	f1c3 0220 	rsb	r2, r3, #32
 8000c8e:	40d1      	lsrs	r1, r2
 8000c90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c98:	fa1f f887 	uxth.w	r8, r7
 8000c9c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca0:	fa24 f202 	lsr.w	r2, r4, r2
 8000ca4:	409d      	lsls	r5, r3
 8000ca6:	fb00 fc08 	mul.w	ip, r0, r8
 8000caa:	432a      	orrs	r2, r5
 8000cac:	0c15      	lsrs	r5, r2, #16
 8000cae:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000cb2:	45ac      	cmp	ip, r5
 8000cb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0x19a>
 8000cba:	197d      	adds	r5, r7, r5
 8000cbc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc0:	f080 808f 	bcs.w	8000de2 <__udivmoddi4+0x2ae>
 8000cc4:	45ac      	cmp	ip, r5
 8000cc6:	f240 808c 	bls.w	8000de2 <__udivmoddi4+0x2ae>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	443d      	add	r5, r7
 8000cce:	eba5 050c 	sub.w	r5, r5, ip
 8000cd2:	fbb5 f1fe 	udiv	r1, r5, lr
 8000cd6:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000cda:	fb01 f908 	mul.w	r9, r1, r8
 8000cde:	b295      	uxth	r5, r2
 8000ce0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000ce4:	45a9      	cmp	r9, r5
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ce8:	197d      	adds	r5, r7, r5
 8000cea:	f101 32ff 	add.w	r2, r1, #4294967295
 8000cee:	d274      	bcs.n	8000dda <__udivmoddi4+0x2a6>
 8000cf0:	45a9      	cmp	r9, r5
 8000cf2:	d972      	bls.n	8000dda <__udivmoddi4+0x2a6>
 8000cf4:	3902      	subs	r1, #2
 8000cf6:	443d      	add	r5, r7
 8000cf8:	eba5 0509 	sub.w	r5, r5, r9
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e778      	b.n	8000bf4 <__udivmoddi4+0xc0>
 8000d02:	f1c1 0720 	rsb	r7, r1, #32
 8000d06:	408b      	lsls	r3, r1
 8000d08:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d10:	fa25 f407 	lsr.w	r4, r5, r7
 8000d14:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d18:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d1c:	fa1f f88c 	uxth.w	r8, ip
 8000d20:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d24:	fa20 f307 	lsr.w	r3, r0, r7
 8000d28:	fb09 fa08 	mul.w	sl, r9, r8
 8000d2c:	408d      	lsls	r5, r1
 8000d2e:	431d      	orrs	r5, r3
 8000d30:	0c2b      	lsrs	r3, r5, #16
 8000d32:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d36:	45a2      	cmp	sl, r4
 8000d38:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3c:	fa00 f301 	lsl.w	r3, r0, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x222>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d4a:	d248      	bcs.n	8000dde <__udivmoddi4+0x2aa>
 8000d4c:	45a2      	cmp	sl, r4
 8000d4e:	d946      	bls.n	8000dde <__udivmoddi4+0x2aa>
 8000d50:	f1a9 0902 	sub.w	r9, r9, #2
 8000d54:	4464      	add	r4, ip
 8000d56:	eba4 040a 	sub.w	r4, r4, sl
 8000d5a:	fbb4 f0fe 	udiv	r0, r4, lr
 8000d5e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d62:	fb00 fa08 	mul.w	sl, r0, r8
 8000d66:	b2ad      	uxth	r5, r5
 8000d68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d6c:	45a2      	cmp	sl, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x24e>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d78:	d22d      	bcs.n	8000dd6 <__udivmoddi4+0x2a2>
 8000d7a:	45a2      	cmp	sl, r4
 8000d7c:	d92b      	bls.n	8000dd6 <__udivmoddi4+0x2a2>
 8000d7e:	3802      	subs	r0, #2
 8000d80:	4464      	add	r4, ip
 8000d82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d86:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8a:	eba4 040a 	sub.w	r4, r4, sl
 8000d8e:	454c      	cmp	r4, r9
 8000d90:	46c6      	mov	lr, r8
 8000d92:	464d      	mov	r5, r9
 8000d94:	d319      	bcc.n	8000dca <__udivmoddi4+0x296>
 8000d96:	d016      	beq.n	8000dc6 <__udivmoddi4+0x292>
 8000d98:	b15e      	cbz	r6, 8000db2 <__udivmoddi4+0x27e>
 8000d9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000d9e:	eb64 0405 	sbc.w	r4, r4, r5
 8000da2:	fa04 f707 	lsl.w	r7, r4, r7
 8000da6:	fa22 f301 	lsr.w	r3, r2, r1
 8000daa:	431f      	orrs	r7, r3
 8000dac:	40cc      	lsrs	r4, r1
 8000dae:	e9c6 7400 	strd	r7, r4, [r6]
 8000db2:	2100      	movs	r1, #0
 8000db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db8:	4631      	mov	r1, r6
 8000dba:	4630      	mov	r0, r6
 8000dbc:	e70c      	b.n	8000bd8 <__udivmoddi4+0xa4>
 8000dbe:	468c      	mov	ip, r1
 8000dc0:	e6eb      	b.n	8000b9a <__udivmoddi4+0x66>
 8000dc2:	4610      	mov	r0, r2
 8000dc4:	e6ff      	b.n	8000bc6 <__udivmoddi4+0x92>
 8000dc6:	4543      	cmp	r3, r8
 8000dc8:	d2e6      	bcs.n	8000d98 <__udivmoddi4+0x264>
 8000dca:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dce:	eb69 050c 	sbc.w	r5, r9, ip
 8000dd2:	3801      	subs	r0, #1
 8000dd4:	e7e0      	b.n	8000d98 <__udivmoddi4+0x264>
 8000dd6:	4628      	mov	r0, r5
 8000dd8:	e7d3      	b.n	8000d82 <__udivmoddi4+0x24e>
 8000dda:	4611      	mov	r1, r2
 8000ddc:	e78c      	b.n	8000cf8 <__udivmoddi4+0x1c4>
 8000dde:	4681      	mov	r9, r0
 8000de0:	e7b9      	b.n	8000d56 <__udivmoddi4+0x222>
 8000de2:	4608      	mov	r0, r1
 8000de4:	e773      	b.n	8000cce <__udivmoddi4+0x19a>
 8000de6:	4608      	mov	r0, r1
 8000de8:	e749      	b.n	8000c7e <__udivmoddi4+0x14a>
 8000dea:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dee:	443d      	add	r5, r7
 8000df0:	e713      	b.n	8000c1a <__udivmoddi4+0xe6>
 8000df2:	3802      	subs	r0, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	e724      	b.n	8000c42 <__udivmoddi4+0x10e>

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	0000      	movs	r0, r0
	...

08000e00 <get_sin_val>:
/* USER CODE BEGIN 0 */
float value = 0.2;
uint32_t var;
uint32_t sine_val[100];

void get_sin_val(){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
	for (int i=0; i<100; i++){
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	e034      	b.n	8000e76 <get_sin_val+0x76>
		sine_val[i] = ((sin(i*2*PI/100) + 1) * (4096/2));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fb2b 	bl	800046c <__aeabi_i2d>
 8000e16:	a31c      	add	r3, pc, #112	; (adr r3, 8000e88 <get_sin_val+0x88>)
 8000e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1c:	f7ff fb90 	bl	8000540 <__aeabi_dmul>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4610      	mov	r0, r2
 8000e26:	4619      	mov	r1, r3
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <get_sin_val+0x90>)
 8000e2e:	f7ff fcb1 	bl	8000794 <__aeabi_ddiv>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4610      	mov	r0, r2
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f002 fcc3 	bl	80037c4 <sin>
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <get_sin_val+0x94>)
 8000e44:	f7ff f9c6 	bl	80001d4 <__adddf3>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f04f 0200 	mov.w	r2, #0
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <get_sin_val+0x98>)
 8000e56:	f7ff fb73 	bl	8000540 <__aeabi_dmul>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	4610      	mov	r0, r2
 8000e60:	4619      	mov	r1, r3
 8000e62:	f7ff fe2f 	bl	8000ac4 <__aeabi_d2uiz>
 8000e66:	4602      	mov	r2, r0
 8000e68:	490c      	ldr	r1, [pc, #48]	; (8000e9c <get_sin_val+0x9c>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i<100; i++){
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3301      	adds	r3, #1
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b63      	cmp	r3, #99	; 0x63
 8000e7a:	ddc7      	ble.n	8000e0c <get_sin_val+0xc>
	}
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	1569f490 	.word	0x1569f490
 8000e8c:	400921fd 	.word	0x400921fd
 8000e90:	40590000 	.word	0x40590000
 8000e94:	3ff00000 	.word	0x3ff00000
 8000e98:	40a00000 	.word	0x40a00000
 8000e9c:	20000028 	.word	0x20000028

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea6:	f000 fb57 	bl	8001558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eaa:	f000 f821 	bl	8000ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eae:	f000 f8fb 	bl	80010a8 <MX_GPIO_Init>
  MX_DAC_Init();
 8000eb2:	f000 f863 	bl	8000f7c <MX_DAC_Init>
  MX_DMA_Init();
 8000eb6:	f000 f8d7 	bl	8001068 <MX_DMA_Init>
  MX_TIM2_Init();
 8000eba:	f000 f889 	bl	8000fd0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
 HAL_TIM_Base_Start(&htim2);
 8000ebe:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <main+0x44>)
 8000ec0:	f002 f834 	bl	8002f2c <HAL_TIM_Base_Start>
 get_sin_val();
 8000ec4:	f7ff ff9c 	bl	8000e00 <get_sin_val>
 if (HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1,sine_val,100,DAC_ALIGN_12B_R) != HAL_OK)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2364      	movs	r3, #100	; 0x64
 8000ece:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <main+0x48>)
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4806      	ldr	r0, [pc, #24]	; (8000eec <main+0x4c>)
 8000ed4:	f000 fcde 	bl	8001894 <HAL_DAC_Start_DMA>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <main+0x42>
 {
	 Error_Handler();
 8000ede:	f000 fa05 	bl	80012ec <Error_Handler>
 }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <main+0x42>
 8000ee4:	20000230 	.word	0x20000230
 8000ee8:	20000028 	.word	0x20000028
 8000eec:	20000218 	.word	0x20000218

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b092      	sub	sp, #72	; 0x48
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0318 	add.w	r3, r7, #24
 8000efa:	2230      	movs	r2, #48	; 0x30
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 fc58 	bl	80037b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f12:	2301      	movs	r3, #1
 8000f14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f24:	2308      	movs	r3, #8
 8000f26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000f28:	23f0      	movs	r3, #240	; 0xf0
 8000f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f30:	2304      	movs	r3, #4
 8000f32:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f34:	f107 0318 	add.w	r3, r7, #24
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f001 fb89 	bl	8002650 <HAL_RCC_OscConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f44:	f000 f9d2 	bl	80012ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f48:	230f      	movs	r3, #15
 8000f4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2103      	movs	r1, #3
 8000f64:	4618      	mov	r0, r3
 8000f66:	f001 fdc3 	bl	8002af0 <HAL_RCC_ClockConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000f70:	f000 f9bc 	bl	80012ec <Error_Handler>
  }
}
 8000f74:	bf00      	nop
 8000f76:	3748      	adds	r7, #72	; 0x48
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f82:	463b      	mov	r3, r7
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_DAC_Init+0x4c>)
 8000f8c:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <MX_DAC_Init+0x50>)
 8000f8e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <MX_DAC_Init+0x4c>)
 8000f92:	f000 fc5c 	bl	800184e <HAL_DAC_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f9c:	f000 f9a6 	bl	80012ec <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000fa0:	2324      	movs	r3, #36	; 0x24
 8000fa2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	2200      	movs	r2, #0
 8000fac:	4619      	mov	r1, r3
 8000fae:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <MX_DAC_Init+0x4c>)
 8000fb0:	f000 fd57 	bl	8001a62 <HAL_DAC_ConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000fba:	f000 f997 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000218 	.word	0x20000218
 8000fcc:	40007400 	.word	0x40007400

08000fd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd6:	f107 0308 	add.w	r3, r7, #8
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_TIM2_Init+0x94>)
 8000fee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ff2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60 - 1;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_TIM2_Init+0x94>)
 8000ff6:	223b      	movs	r2, #59	; 0x3b
 8000ff8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <MX_TIM2_Init+0x94>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100 -1;
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_TIM2_Init+0x94>)
 8001002:	2263      	movs	r2, #99	; 0x63
 8001004:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_TIM2_Init+0x94>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_TIM2_Init+0x94>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001012:	4814      	ldr	r0, [pc, #80]	; (8001064 <MX_TIM2_Init+0x94>)
 8001014:	f001 ff3a 	bl	8002e8c <HAL_TIM_Base_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800101e:	f000 f965 	bl	80012ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001026:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	4619      	mov	r1, r3
 800102e:	480d      	ldr	r0, [pc, #52]	; (8001064 <MX_TIM2_Init+0x94>)
 8001030:	f002 f8ea 	bl	8003208 <HAL_TIM_ConfigClockSource>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800103a:	f000 f957 	bl	80012ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800103e:	2320      	movs	r3, #32
 8001040:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001046:	463b      	mov	r3, r7
 8001048:	4619      	mov	r1, r3
 800104a:	4806      	ldr	r0, [pc, #24]	; (8001064 <MX_TIM2_Init+0x94>)
 800104c:	f002 fb02 	bl	8003654 <HAL_TIMEx_MasterConfigSynchronization>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001056:	f000 f949 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000230 	.word	0x20000230

08001068 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_DMA_Init+0x3c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <MX_DMA_Init+0x3c>)
 8001078:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_DMA_Init+0x3c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2010      	movs	r0, #16
 8001090:	f000 fba7 	bl	80017e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001094:	2010      	movs	r0, #16
 8001096:	f000 fbc0 	bl	800181a <HAL_NVIC_EnableIRQ>

}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	; 0x30
 80010ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	4b84      	ldr	r3, [pc, #528]	; (80012d4 <MX_GPIO_Init+0x22c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a83      	ldr	r2, [pc, #524]	; (80012d4 <MX_GPIO_Init+0x22c>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b81      	ldr	r3, [pc, #516]	; (80012d4 <MX_GPIO_Init+0x22c>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	61bb      	str	r3, [r7, #24]
 80010d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	4b7d      	ldr	r3, [pc, #500]	; (80012d4 <MX_GPIO_Init+0x22c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a7c      	ldr	r2, [pc, #496]	; (80012d4 <MX_GPIO_Init+0x22c>)
 80010e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b7a      	ldr	r3, [pc, #488]	; (80012d4 <MX_GPIO_Init+0x22c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b76      	ldr	r3, [pc, #472]	; (80012d4 <MX_GPIO_Init+0x22c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a75      	ldr	r2, [pc, #468]	; (80012d4 <MX_GPIO_Init+0x22c>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b73      	ldr	r3, [pc, #460]	; (80012d4 <MX_GPIO_Init+0x22c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b6f      	ldr	r3, [pc, #444]	; (80012d4 <MX_GPIO_Init+0x22c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a6e      	ldr	r2, [pc, #440]	; (80012d4 <MX_GPIO_Init+0x22c>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b6c      	ldr	r3, [pc, #432]	; (80012d4 <MX_GPIO_Init+0x22c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	4b68      	ldr	r3, [pc, #416]	; (80012d4 <MX_GPIO_Init+0x22c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a67      	ldr	r2, [pc, #412]	; (80012d4 <MX_GPIO_Init+0x22c>)
 8001138:	f043 0308 	orr.w	r3, r3, #8
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b65      	ldr	r3, [pc, #404]	; (80012d4 <MX_GPIO_Init+0x22c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	4b61      	ldr	r3, [pc, #388]	; (80012d4 <MX_GPIO_Init+0x22c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a60      	ldr	r2, [pc, #384]	; (80012d4 <MX_GPIO_Init+0x22c>)
 8001154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b5e      	ldr	r3, [pc, #376]	; (80012d4 <MX_GPIO_Init+0x22c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f244 0181 	movw	r1, #16513	; 0x4081
 800116c:	485a      	ldr	r0, [pc, #360]	; (80012d8 <MX_GPIO_Init+0x230>)
 800116e:	f001 fa57 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2140      	movs	r1, #64	; 0x40
 8001176:	4859      	ldr	r0, [pc, #356]	; (80012dc <MX_GPIO_Init+0x234>)
 8001178:	f001 fa52 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800117c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001182:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001186:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4619      	mov	r1, r3
 8001192:	4853      	ldr	r0, [pc, #332]	; (80012e0 <MX_GPIO_Init+0x238>)
 8001194:	f001 f8a6 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001198:	2332      	movs	r3, #50	; 0x32
 800119a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011a8:	230b      	movs	r3, #11
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	484b      	ldr	r0, [pc, #300]	; (80012e0 <MX_GPIO_Init+0x238>)
 80011b4:	f001 f896 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011b8:	2386      	movs	r3, #134	; 0x86
 80011ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011c8:	230b      	movs	r3, #11
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	4844      	ldr	r0, [pc, #272]	; (80012e4 <MX_GPIO_Init+0x23c>)
 80011d4:	f001 f886 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011d8:	f244 0381 	movw	r3, #16513	; 0x4081
 80011dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	4619      	mov	r1, r3
 80011f0:	4839      	ldr	r0, [pc, #228]	; (80012d8 <MX_GPIO_Init+0x230>)
 80011f2:	f001 f877 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001208:	230b      	movs	r3, #11
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	4619      	mov	r1, r3
 8001212:	4831      	ldr	r0, [pc, #196]	; (80012d8 <MX_GPIO_Init+0x230>)
 8001214:	f001 f866 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001218:	f44f 7340 	mov.w	r3, #768	; 0x300
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800122a:	2307      	movs	r3, #7
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	482c      	ldr	r0, [pc, #176]	; (80012e8 <MX_GPIO_Init+0x240>)
 8001236:	f001 f855 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800123a:	2340      	movs	r3, #64	; 0x40
 800123c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	4619      	mov	r1, r3
 8001250:	4822      	ldr	r0, [pc, #136]	; (80012dc <MX_GPIO_Init+0x234>)
 8001252:	f001 f847 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	481c      	ldr	r0, [pc, #112]	; (80012dc <MX_GPIO_Init+0x234>)
 800126a:	f001 f83b 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800126e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001280:	230a      	movs	r3, #10
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	4816      	ldr	r0, [pc, #88]	; (80012e4 <MX_GPIO_Init+0x23c>)
 800128c:	f001 f82a 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	480f      	ldr	r0, [pc, #60]	; (80012e4 <MX_GPIO_Init+0x23c>)
 80012a6:	f001 f81d 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80012ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012bc:	230b      	movs	r3, #11
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	4619      	mov	r1, r3
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_GPIO_Init+0x234>)
 80012c8:	f001 f80c 	bl	80022e4 <HAL_GPIO_Init>

}
 80012cc:	bf00      	nop
 80012ce:	3730      	adds	r7, #48	; 0x30
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40021800 	.word	0x40021800
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020000 	.word	0x40020000
 80012e8:	40020c00 	.word	0x40020c00

080012ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f0:	b672      	cpsid	i
}
 80012f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <Error_Handler+0x8>
	...

080012f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_MspInit+0x48>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <HAL_MspInit+0x48>)
 8001308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130c:	6453      	str	r3, [r2, #68]	; 0x44
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <HAL_MspInit+0x48>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_MspInit+0x48>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_MspInit+0x48>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
 800132a:	4b05      	ldr	r3, [pc, #20]	; (8001340 <HAL_MspInit+0x48>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	40023800 	.word	0x40023800

08001344 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a2f      	ldr	r2, [pc, #188]	; (8001420 <HAL_DAC_MspInit+0xdc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d158      	bne.n	8001418 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b2e      	ldr	r3, [pc, #184]	; (8001424 <HAL_DAC_MspInit+0xe0>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a2d      	ldr	r2, [pc, #180]	; (8001424 <HAL_DAC_MspInit+0xe0>)
 8001370:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <HAL_DAC_MspInit+0xe0>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b27      	ldr	r3, [pc, #156]	; (8001424 <HAL_DAC_MspInit+0xe0>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a26      	ldr	r2, [pc, #152]	; (8001424 <HAL_DAC_MspInit+0xe0>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b24      	ldr	r3, [pc, #144]	; (8001424 <HAL_DAC_MspInit+0xe0>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800139e:	2310      	movs	r3, #16
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a2:	2303      	movs	r3, #3
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	481d      	ldr	r0, [pc, #116]	; (8001428 <HAL_DAC_MspInit+0xe4>)
 80013b2:	f000 ff97 	bl	80022e4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <HAL_DAC_MspInit+0xe8>)
 80013b8:	4a1d      	ldr	r2, [pc, #116]	; (8001430 <HAL_DAC_MspInit+0xec>)
 80013ba:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <HAL_DAC_MspInit+0xe8>)
 80013be:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80013c2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_DAC_MspInit+0xe8>)
 80013c6:	2240      	movs	r2, #64	; 0x40
 80013c8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <HAL_DAC_MspInit+0xe8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <HAL_DAC_MspInit+0xe8>)
 80013d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <HAL_DAC_MspInit+0xe8>)
 80013da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013de:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_DAC_MspInit+0xe8>)
 80013e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <HAL_DAC_MspInit+0xe8>)
 80013ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ee:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <HAL_DAC_MspInit+0xe8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <HAL_DAC_MspInit+0xe8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80013fc:	480b      	ldr	r0, [pc, #44]	; (800142c <HAL_DAC_MspInit+0xe8>)
 80013fe:	f000 fc05 	bl	8001c0c <HAL_DMA_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001408:	f7ff ff70 	bl	80012ec <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a07      	ldr	r2, [pc, #28]	; (800142c <HAL_DAC_MspInit+0xe8>)
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	4a06      	ldr	r2, [pc, #24]	; (800142c <HAL_DAC_MspInit+0xe8>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001418:	bf00      	nop
 800141a:	3728      	adds	r7, #40	; 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40007400 	.word	0x40007400
 8001424:	40023800 	.word	0x40023800
 8001428:	40020000 	.word	0x40020000
 800142c:	200001b8 	.word	0x200001b8
 8001430:	40026088 	.word	0x40026088

08001434 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001444:	d115      	bne.n	8001472 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_TIM_Base_MspInit+0x48>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <HAL_TIM_Base_MspInit+0x48>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_TIM_Base_MspInit+0x48>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	201c      	movs	r0, #28
 8001468:	f000 f9bb 	bl	80017e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800146c:	201c      	movs	r0, #28
 800146e:	f000 f9d4 	bl	800181a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <NMI_Handler+0x4>

08001486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <MemManage_Handler+0x4>

08001492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <UsageFault_Handler+0x4>

0800149e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr

080014c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c6:	f000 f899 	bl	80015fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <DMA1_Stream5_IRQHandler+0x10>)
 80014d6:	f000 fc9f 	bl	8001e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200001b8 	.word	0x200001b8

080014e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <TIM2_IRQHandler+0x10>)
 80014ea:	f001 fd85 	bl	8002ff8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000230 	.word	0x20000230

080014f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001504:	f8df d034 	ldr.w	sp, [pc, #52]	; 800153c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001508:	480d      	ldr	r0, [pc, #52]	; (8001540 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800150a:	490e      	ldr	r1, [pc, #56]	; (8001544 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800150c:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a0b      	ldr	r2, [pc, #44]	; (800154c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001520:	4c0b      	ldr	r4, [pc, #44]	; (8001550 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800152e:	f7ff ffe3 	bl	80014f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001532:	f002 f91b 	bl	800376c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001536:	f7ff fcb3 	bl	8000ea0 <main>
  bx  lr
 800153a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800153c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001544:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001548:	080049e0 	.word	0x080049e0
  ldr r2, =_sbss
 800154c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001550:	2000027c 	.word	0x2000027c

08001554 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <ADC_IRQHandler>
	...

08001558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <HAL_Init+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <HAL_Init+0x40>)
 8001562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001566:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_Init+0x40>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <HAL_Init+0x40>)
 800156e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001572:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <HAL_Init+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a07      	ldr	r2, [pc, #28]	; (8001598 <HAL_Init+0x40>)
 800157a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001580:	2003      	movs	r0, #3
 8001582:	f000 f923 	bl	80017cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001586:	2000      	movs	r0, #0
 8001588:	f000 f808 	bl	800159c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800158c:	f7ff feb4 	bl	80012f8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023c00 	.word	0x40023c00

0800159c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_InitTick+0x54>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_InitTick+0x58>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f93b 	bl	8001836 <HAL_SYSTICK_Config>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00e      	b.n	80015e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b0f      	cmp	r3, #15
 80015ce:	d80a      	bhi.n	80015e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d0:	2200      	movs	r2, #0
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f000 f903 	bl	80017e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015dc:	4a06      	ldr	r2, [pc, #24]	; (80015f8 <HAL_InitTick+0x5c>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	e000      	b.n	80015e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000008 	.word	0x20000008
 80015f8:	20000004 	.word	0x20000004

080015fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_IncTick+0x1c>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_IncTick+0x20>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a03      	ldr	r2, [pc, #12]	; (800161c <HAL_IncTick+0x20>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	20000008 	.word	0x20000008
 800161c:	20000278 	.word	0x20000278

08001620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b02      	ldr	r3, [pc, #8]	; (8001630 <HAL_GetTick+0x10>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	20000278 	.word	0x20000278

08001634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800165c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001666:	4a04      	ldr	r2, [pc, #16]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	60d3      	str	r3, [r2, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <__NVIC_GetPriorityGrouping+0x18>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0307 	and.w	r3, r3, #7
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db0b      	blt.n	80016c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 021f 	and.w	r2, r3, #31
 80016b0:	4906      	ldr	r1, [pc, #24]	; (80016cc <__NVIC_EnableIRQ+0x34>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	2001      	movs	r0, #1
 80016ba:	fa00 f202 	lsl.w	r2, r0, r2
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100

080016d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	db0a      	blt.n	80016fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	490c      	ldr	r1, [pc, #48]	; (800171c <__NVIC_SetPriority+0x4c>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	440b      	add	r3, r1
 80016f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f8:	e00a      	b.n	8001710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4908      	ldr	r1, [pc, #32]	; (8001720 <__NVIC_SetPriority+0x50>)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	3b04      	subs	r3, #4
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	440b      	add	r3, r1
 800170e:	761a      	strb	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000e100 	.word	0xe000e100
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f1c3 0307 	rsb	r3, r3, #7
 800173e:	2b04      	cmp	r3, #4
 8001740:	bf28      	it	cs
 8001742:	2304      	movcs	r3, #4
 8001744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3304      	adds	r3, #4
 800174a:	2b06      	cmp	r3, #6
 800174c:	d902      	bls.n	8001754 <NVIC_EncodePriority+0x30>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b03      	subs	r3, #3
 8001752:	e000      	b.n	8001756 <NVIC_EncodePriority+0x32>
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800176c:	f04f 31ff 	mov.w	r1, #4294967295
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43d9      	mvns	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	4313      	orrs	r3, r2
         );
}
 800177e:	4618      	mov	r0, r3
 8001780:	3724      	adds	r7, #36	; 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001798:	d301      	bcc.n	800179e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179a:	2301      	movs	r3, #1
 800179c:	e00f      	b.n	80017be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <SysTick_Config+0x40>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a6:	210f      	movs	r1, #15
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ac:	f7ff ff90 	bl	80016d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <SysTick_Config+0x40>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <SysTick_Config+0x40>)
 80017b8:	2207      	movs	r2, #7
 80017ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	e000e010 	.word	0xe000e010

080017cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ff2d 	bl	8001634 <__NVIC_SetPriorityGrouping>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f4:	f7ff ff42 	bl	800167c <__NVIC_GetPriorityGrouping>
 80017f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	6978      	ldr	r0, [r7, #20]
 8001800:	f7ff ff90 	bl	8001724 <NVIC_EncodePriority>
 8001804:	4602      	mov	r2, r0
 8001806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff5f 	bl	80016d0 <__NVIC_SetPriority>
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff35 	bl	8001698 <__NVIC_EnableIRQ>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ffa2 	bl	8001788 <SysTick_Config>
 8001844:	4603      	mov	r3, r0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e014      	b.n	800188a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	791b      	ldrb	r3, [r3, #4]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d105      	bne.n	8001876 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff fd67 	bl	8001344 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2202      	movs	r2, #2
 800187a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	795b      	ldrb	r3, [r3, #5]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_DAC_Start_DMA+0x1e>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e0ab      	b.n	8001a0a <HAL_DAC_Start_DMA+0x176>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2201      	movs	r2, #1
 80018b6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2202      	movs	r2, #2
 80018bc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d12f      	bne.n	8001924 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a52      	ldr	r2, [pc, #328]	; (8001a14 <HAL_DAC_Start_DMA+0x180>)
 80018ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	4a51      	ldr	r2, [pc, #324]	; (8001a18 <HAL_DAC_Start_DMA+0x184>)
 80018d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	4a50      	ldr	r2, [pc, #320]	; (8001a1c <HAL_DAC_Start_DMA+0x188>)
 80018da:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80018ea:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d013      	beq.n	800191a <HAL_DAC_Start_DMA+0x86>
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d845      	bhi.n	8001984 <HAL_DAC_Start_DMA+0xf0>
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_DAC_Start_DMA+0x72>
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	2b04      	cmp	r3, #4
 8001902:	d005      	beq.n	8001910 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001904:	e03e      	b.n	8001984 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	3308      	adds	r3, #8
 800190c:	613b      	str	r3, [r7, #16]
        break;
 800190e:	e03c      	b.n	800198a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	330c      	adds	r3, #12
 8001916:	613b      	str	r3, [r7, #16]
        break;
 8001918:	e037      	b.n	800198a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	3310      	adds	r3, #16
 8001920:	613b      	str	r3, [r7, #16]
        break;
 8001922:	e032      	b.n	800198a <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4a3d      	ldr	r2, [pc, #244]	; (8001a20 <HAL_DAC_Start_DMA+0x18c>)
 800192a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	4a3c      	ldr	r2, [pc, #240]	; (8001a24 <HAL_DAC_Start_DMA+0x190>)
 8001932:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4a3b      	ldr	r2, [pc, #236]	; (8001a28 <HAL_DAC_Start_DMA+0x194>)
 800193a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800194a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	2b08      	cmp	r3, #8
 8001950:	d013      	beq.n	800197a <HAL_DAC_Start_DMA+0xe6>
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	2b08      	cmp	r3, #8
 8001956:	d817      	bhi.n	8001988 <HAL_DAC_Start_DMA+0xf4>
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_DAC_Start_DMA+0xd2>
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	2b04      	cmp	r3, #4
 8001962:	d005      	beq.n	8001970 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001964:	e010      	b.n	8001988 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	3314      	adds	r3, #20
 800196c:	613b      	str	r3, [r7, #16]
        break;
 800196e:	e00c      	b.n	800198a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	3318      	adds	r3, #24
 8001976:	613b      	str	r3, [r7, #16]
        break;
 8001978:	e007      	b.n	800198a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	331c      	adds	r3, #28
 8001980:	613b      	str	r3, [r7, #16]
        break;
 8001982:	e002      	b.n	800198a <HAL_DAC_Start_DMA+0xf6>
        break;
 8001984:	bf00      	nop
 8001986:	e000      	b.n	800198a <HAL_DAC_Start_DMA+0xf6>
        break;
 8001988:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d111      	bne.n	80019b4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800199e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6898      	ldr	r0, [r3, #8]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	f000 f9dd 	bl	8001d68 <HAL_DMA_Start_IT>
 80019ae:	4603      	mov	r3, r0
 80019b0:	75fb      	strb	r3, [r7, #23]
 80019b2:	e010      	b.n	80019d6 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80019c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	68d8      	ldr	r0, [r3, #12]
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	f000 f9cb 	bl	8001d68 <HAL_DMA_Start_IT>
 80019d2:	4603      	mov	r3, r0
 80019d4:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80019dc:	7dfb      	ldrb	r3, [r7, #23]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10c      	bne.n	80019fc <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6819      	ldr	r1, [r3, #0]
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	f003 0310 	and.w	r3, r3, #16
 80019ee:	2201      	movs	r2, #1
 80019f0:	409a      	lsls	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	e005      	b.n	8001a08 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	f043 0204 	orr.w	r2, r3, #4
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	08001aff 	.word	0x08001aff
 8001a18:	08001b21 	.word	0x08001b21
 8001a1c:	08001b3d 	.word	0x08001b3d
 8001a20:	08001ba1 	.word	0x08001ba1
 8001a24:	08001bc3 	.word	0x08001bc3
 8001a28:	08001bdf 	.word	0x08001bdf

08001a2c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr

08001a3e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr

08001a50 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b087      	sub	sp, #28
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	795b      	ldrb	r3, [r3, #5]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_DAC_ConfigChannel+0x18>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e03c      	b.n	8001af4 <HAL_DAC_ConfigChannel+0x92>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2202      	movs	r2, #2
 8001a84:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f003 0310 	and.w	r3, r3, #16
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6819      	ldr	r1, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	22c0      	movs	r2, #192	; 0xc0
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43da      	mvns	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	400a      	ands	r2, r1
 8001ae4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f7ff ff8d 	bl	8001a2c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2201      	movs	r2, #1
 8001b16:	711a      	strb	r2, [r3, #4]
}
 8001b18:	bf00      	nop
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f7ff ff85 	bl	8001a3e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b48:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	f043 0204 	orr.w	r2, r3, #4
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f7ff ff7a 	bl	8001a50 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	711a      	strb	r2, [r3, #4]
}
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr

08001b8e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f7ff ffdb 	bl	8001b6a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	711a      	strb	r2, [r3, #4]
}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bce:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f7ff ffd3 	bl	8001b7c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b084      	sub	sp, #16
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	f043 0204 	orr.w	r2, r3, #4
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f7ff ffc8 	bl	8001b8e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2201      	movs	r2, #1
 8001c02:	711a      	strb	r2, [r3, #4]
}
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c18:	f7ff fd02 	bl	8001620 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e099      	b.n	8001d5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0201 	bic.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c48:	e00f      	b.n	8001c6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c4a:	f7ff fce9 	bl	8001620 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b05      	cmp	r3, #5
 8001c56:	d908      	bls.n	8001c6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2203      	movs	r2, #3
 8001c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e078      	b.n	8001d5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e8      	bne.n	8001c4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <HAL_DMA_Init+0x158>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d107      	bne.n	8001cd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f023 0307 	bic.w	r3, r3, #7
 8001cea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d117      	bne.n	8001d2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00e      	beq.n	8001d2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 fa6d 	bl	80021f0 <DMA_CheckFifoParam>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e016      	b.n	8001d5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fa26 	bl	8002188 <DMA_CalcBaseAndBitshift>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d44:	223f      	movs	r2, #63	; 0x3f
 8001d46:	409a      	lsls	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	f010803f 	.word	0xf010803f

08001d68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_DMA_Start_IT+0x26>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e040      	b.n	8001e10 <HAL_DMA_Start_IT+0xa8>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d12f      	bne.n	8001e02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2202      	movs	r2, #2
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 f9b8 	bl	800212c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc0:	223f      	movs	r2, #63	; 0x3f
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0216 	orr.w	r2, r2, #22
 8001dd6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d007      	beq.n	8001df0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0208 	orr.w	r2, r2, #8
 8001dee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e005      	b.n	8001e0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e24:	4b92      	ldr	r3, [pc, #584]	; (8002070 <HAL_DMA_IRQHandler+0x258>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a92      	ldr	r2, [pc, #584]	; (8002074 <HAL_DMA_IRQHandler+0x25c>)
 8001e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2e:	0a9b      	lsrs	r3, r3, #10
 8001e30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e42:	2208      	movs	r2, #8
 8001e44:	409a      	lsls	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d01a      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d013      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0204 	bic.w	r2, r2, #4
 8001e6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	2208      	movs	r2, #8
 8001e72:	409a      	lsls	r2, r3
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7c:	f043 0201 	orr.w	r2, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e88:	2201      	movs	r2, #1
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d012      	beq.n	8001eba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00b      	beq.n	8001eba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb2:	f043 0202 	orr.w	r2, r3, #2
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d012      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00b      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001edc:	2204      	movs	r2, #4
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee8:	f043 0204 	orr.w	r2, r3, #4
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef4:	2210      	movs	r2, #16
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d043      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d03c      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f12:	2210      	movs	r2, #16
 8001f14:	409a      	lsls	r2, r3
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d018      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d108      	bne.n	8001f48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d024      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	4798      	blx	r3
 8001f46:	e01f      	b.n	8001f88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01b      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	4798      	blx	r3
 8001f58:	e016      	b.n	8001f88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d107      	bne.n	8001f78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0208 	bic.w	r2, r2, #8
 8001f76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 808e 	beq.w	80020b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 8086 	beq.w	80020b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fae:	2220      	movs	r2, #32
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b05      	cmp	r3, #5
 8001fc0:	d136      	bne.n	8002030 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0216 	bic.w	r2, r2, #22
 8001fd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d103      	bne.n	8001ff2 <HAL_DMA_IRQHandler+0x1da>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d007      	beq.n	8002002 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0208 	bic.w	r2, r2, #8
 8002000:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002006:	223f      	movs	r2, #63	; 0x3f
 8002008:	409a      	lsls	r2, r3
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002022:	2b00      	cmp	r3, #0
 8002024:	d07d      	beq.n	8002122 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	4798      	blx	r3
        }
        return;
 800202e:	e078      	b.n	8002122 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d01c      	beq.n	8002078 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d108      	bne.n	800205e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	2b00      	cmp	r3, #0
 8002052:	d030      	beq.n	80020b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4798      	blx	r3
 800205c:	e02b      	b.n	80020b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002062:	2b00      	cmp	r3, #0
 8002064:	d027      	beq.n	80020b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	4798      	blx	r3
 800206e:	e022      	b.n	80020b6 <HAL_DMA_IRQHandler+0x29e>
 8002070:	20000000 	.word	0x20000000
 8002074:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10f      	bne.n	80020a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0210 	bic.w	r2, r2, #16
 8002094:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d032      	beq.n	8002124 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d022      	beq.n	8002110 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2205      	movs	r2, #5
 80020ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0201 	bic.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	3301      	adds	r3, #1
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d307      	bcc.n	80020fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1f2      	bne.n	80020e2 <HAL_DMA_IRQHandler+0x2ca>
 80020fc:	e000      	b.n	8002100 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80020fe:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	4798      	blx	r3
 8002120:	e000      	b.n	8002124 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002122:	bf00      	nop
    }
  }
}
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop

0800212c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002148:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b40      	cmp	r3, #64	; 0x40
 8002158:	d108      	bne.n	800216c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800216a:	e007      	b.n	800217c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	60da      	str	r2, [r3, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
	...

08002188 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	3b10      	subs	r3, #16
 8002198:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <DMA_CalcBaseAndBitshift+0x60>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	091b      	lsrs	r3, r3, #4
 80021a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021a2:	4a12      	ldr	r2, [pc, #72]	; (80021ec <DMA_CalcBaseAndBitshift+0x64>)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4413      	add	r3, r2
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d909      	bls.n	80021ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021be:	f023 0303 	bic.w	r3, r3, #3
 80021c2:	1d1a      	adds	r2, r3, #4
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	659a      	str	r2, [r3, #88]	; 0x58
 80021c8:	e007      	b.n	80021da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021d2:	f023 0303 	bic.w	r3, r3, #3
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	aaaaaaab 	.word	0xaaaaaaab
 80021ec:	080047f0 	.word	0x080047f0

080021f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d11f      	bne.n	800224a <DMA_CheckFifoParam+0x5a>
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d856      	bhi.n	80022be <DMA_CheckFifoParam+0xce>
 8002210:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <DMA_CheckFifoParam+0x28>)
 8002212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002216:	bf00      	nop
 8002218:	08002229 	.word	0x08002229
 800221c:	0800223b 	.word	0x0800223b
 8002220:	08002229 	.word	0x08002229
 8002224:	080022bf 	.word	0x080022bf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d046      	beq.n	80022c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002238:	e043      	b.n	80022c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002242:	d140      	bne.n	80022c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002248:	e03d      	b.n	80022c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002252:	d121      	bne.n	8002298 <DMA_CheckFifoParam+0xa8>
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d837      	bhi.n	80022ca <DMA_CheckFifoParam+0xda>
 800225a:	a201      	add	r2, pc, #4	; (adr r2, 8002260 <DMA_CheckFifoParam+0x70>)
 800225c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002260:	08002271 	.word	0x08002271
 8002264:	08002277 	.word	0x08002277
 8002268:	08002271 	.word	0x08002271
 800226c:	08002289 	.word	0x08002289
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
      break;
 8002274:	e030      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d025      	beq.n	80022ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002286:	e022      	b.n	80022ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002290:	d11f      	bne.n	80022d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002296:	e01c      	b.n	80022d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d903      	bls.n	80022a6 <DMA_CheckFifoParam+0xb6>
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d003      	beq.n	80022ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022a4:	e018      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	73fb      	strb	r3, [r7, #15]
      break;
 80022aa:	e015      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00e      	beq.n	80022d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
      break;
 80022bc:	e00b      	b.n	80022d6 <DMA_CheckFifoParam+0xe6>
      break;
 80022be:	bf00      	nop
 80022c0:	e00a      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      break;
 80022c2:	bf00      	nop
 80022c4:	e008      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      break;
 80022c6:	bf00      	nop
 80022c8:	e006      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      break;
 80022ca:	bf00      	nop
 80022cc:	e004      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      break;
 80022ce:	bf00      	nop
 80022d0:	e002      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80022d2:	bf00      	nop
 80022d4:	e000      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      break;
 80022d6:	bf00      	nop
    }
  } 
  
  return status; 
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f2:	e16f      	b.n	80025d4 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	2101      	movs	r1, #1
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 8161 	beq.w	80025ce <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b01      	cmp	r3, #1
 8002316:	d005      	beq.n	8002324 <HAL_GPIO_Init+0x40>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d130      	bne.n	8002386 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800235a:	2201      	movs	r2, #1
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	f003 0201 	and.w	r2, r3, #1
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b03      	cmp	r3, #3
 8002390:	d017      	beq.n	80023c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	2203      	movs	r2, #3
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d123      	bne.n	8002416 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	08da      	lsrs	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3208      	adds	r2, #8
 80023d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	220f      	movs	r2, #15
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	691a      	ldr	r2, [r3, #16]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	08da      	lsrs	r2, r3, #3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3208      	adds	r2, #8
 8002410:	6939      	ldr	r1, [r7, #16]
 8002412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0203 	and.w	r2, r3, #3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 80bb 	beq.w	80025ce <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002458:	2300      	movs	r3, #0
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	4b64      	ldr	r3, [pc, #400]	; (80025f0 <HAL_GPIO_Init+0x30c>)
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	4a63      	ldr	r2, [pc, #396]	; (80025f0 <HAL_GPIO_Init+0x30c>)
 8002462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002466:	6453      	str	r3, [r2, #68]	; 0x44
 8002468:	4b61      	ldr	r3, [pc, #388]	; (80025f0 <HAL_GPIO_Init+0x30c>)
 800246a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002474:	4a5f      	ldr	r2, [pc, #380]	; (80025f4 <HAL_GPIO_Init+0x310>)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	089b      	lsrs	r3, r3, #2
 800247a:	3302      	adds	r3, #2
 800247c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	220f      	movs	r2, #15
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a57      	ldr	r2, [pc, #348]	; (80025f8 <HAL_GPIO_Init+0x314>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d031      	beq.n	8002504 <HAL_GPIO_Init+0x220>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a56      	ldr	r2, [pc, #344]	; (80025fc <HAL_GPIO_Init+0x318>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d02b      	beq.n	8002500 <HAL_GPIO_Init+0x21c>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a55      	ldr	r2, [pc, #340]	; (8002600 <HAL_GPIO_Init+0x31c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d025      	beq.n	80024fc <HAL_GPIO_Init+0x218>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a54      	ldr	r2, [pc, #336]	; (8002604 <HAL_GPIO_Init+0x320>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d01f      	beq.n	80024f8 <HAL_GPIO_Init+0x214>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a53      	ldr	r2, [pc, #332]	; (8002608 <HAL_GPIO_Init+0x324>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d019      	beq.n	80024f4 <HAL_GPIO_Init+0x210>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a52      	ldr	r2, [pc, #328]	; (800260c <HAL_GPIO_Init+0x328>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d013      	beq.n	80024f0 <HAL_GPIO_Init+0x20c>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a51      	ldr	r2, [pc, #324]	; (8002610 <HAL_GPIO_Init+0x32c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00d      	beq.n	80024ec <HAL_GPIO_Init+0x208>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a50      	ldr	r2, [pc, #320]	; (8002614 <HAL_GPIO_Init+0x330>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d007      	beq.n	80024e8 <HAL_GPIO_Init+0x204>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a4f      	ldr	r2, [pc, #316]	; (8002618 <HAL_GPIO_Init+0x334>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d101      	bne.n	80024e4 <HAL_GPIO_Init+0x200>
 80024e0:	2308      	movs	r3, #8
 80024e2:	e010      	b.n	8002506 <HAL_GPIO_Init+0x222>
 80024e4:	2309      	movs	r3, #9
 80024e6:	e00e      	b.n	8002506 <HAL_GPIO_Init+0x222>
 80024e8:	2307      	movs	r3, #7
 80024ea:	e00c      	b.n	8002506 <HAL_GPIO_Init+0x222>
 80024ec:	2306      	movs	r3, #6
 80024ee:	e00a      	b.n	8002506 <HAL_GPIO_Init+0x222>
 80024f0:	2305      	movs	r3, #5
 80024f2:	e008      	b.n	8002506 <HAL_GPIO_Init+0x222>
 80024f4:	2304      	movs	r3, #4
 80024f6:	e006      	b.n	8002506 <HAL_GPIO_Init+0x222>
 80024f8:	2303      	movs	r3, #3
 80024fa:	e004      	b.n	8002506 <HAL_GPIO_Init+0x222>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e002      	b.n	8002506 <HAL_GPIO_Init+0x222>
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <HAL_GPIO_Init+0x222>
 8002504:	2300      	movs	r3, #0
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	f002 0203 	and.w	r2, r2, #3
 800250c:	0092      	lsls	r2, r2, #2
 800250e:	4093      	lsls	r3, r2
 8002510:	461a      	mov	r2, r3
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002518:	4936      	ldr	r1, [pc, #216]	; (80025f4 <HAL_GPIO_Init+0x310>)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	3302      	adds	r3, #2
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002526:	4b3d      	ldr	r3, [pc, #244]	; (800261c <HAL_GPIO_Init+0x338>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	43db      	mvns	r3, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800254a:	4a34      	ldr	r2, [pc, #208]	; (800261c <HAL_GPIO_Init+0x338>)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002550:	4b32      	ldr	r3, [pc, #200]	; (800261c <HAL_GPIO_Init+0x338>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	43db      	mvns	r3, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002574:	4a29      	ldr	r2, [pc, #164]	; (800261c <HAL_GPIO_Init+0x338>)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800257a:	4b28      	ldr	r3, [pc, #160]	; (800261c <HAL_GPIO_Init+0x338>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	43db      	mvns	r3, r3
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800259e:	4a1f      	ldr	r2, [pc, #124]	; (800261c <HAL_GPIO_Init+0x338>)
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025a4:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_GPIO_Init+0x338>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025c8:	4a14      	ldr	r2, [pc, #80]	; (800261c <HAL_GPIO_Init+0x338>)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	3301      	adds	r3, #1
 80025d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	fa22 f303 	lsr.w	r3, r2, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f47f ae88 	bne.w	80022f4 <HAL_GPIO_Init+0x10>
  }
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	371c      	adds	r7, #28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40013800 	.word	0x40013800
 80025f8:	40020000 	.word	0x40020000
 80025fc:	40020400 	.word	0x40020400
 8002600:	40020800 	.word	0x40020800
 8002604:	40020c00 	.word	0x40020c00
 8002608:	40021000 	.word	0x40021000
 800260c:	40021400 	.word	0x40021400
 8002610:	40021800 	.word	0x40021800
 8002614:	40021c00 	.word	0x40021c00
 8002618:	40022000 	.word	0x40022000
 800261c:	40013c00 	.word	0x40013c00

08002620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
 800262c:	4613      	mov	r3, r2
 800262e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002630:	787b      	ldrb	r3, [r7, #1]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800263c:	e003      	b.n	8002646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800263e:	887b      	ldrh	r3, [r7, #2]
 8002640:	041a      	lsls	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	619a      	str	r2, [r3, #24]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e237      	b.n	8002ad2 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d050      	beq.n	8002710 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800266e:	4ba3      	ldr	r3, [pc, #652]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b04      	cmp	r3, #4
 8002678:	d00c      	beq.n	8002694 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800267a:	4ba0      	ldr	r3, [pc, #640]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002682:	2b08      	cmp	r3, #8
 8002684:	d112      	bne.n	80026ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002686:	4b9d      	ldr	r3, [pc, #628]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002692:	d10b      	bne.n	80026ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	4b99      	ldr	r3, [pc, #612]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d036      	beq.n	800270e <HAL_RCC_OscConfig+0xbe>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d132      	bne.n	800270e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e212      	b.n	8002ad2 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	4b93      	ldr	r3, [pc, #588]	; (8002900 <HAL_RCC_OscConfig+0x2b0>)
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d013      	beq.n	80026e6 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026be:	f7fe ffaf 	bl	8001620 <HAL_GetTick>
 80026c2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c6:	f7fe ffab 	bl	8001620 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b64      	cmp	r3, #100	; 0x64
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e1fc      	b.n	8002ad2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d8:	4b88      	ldr	r3, [pc, #544]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x76>
 80026e4:	e014      	b.n	8002710 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7fe ff9b 	bl	8001620 <HAL_GetTick>
 80026ea:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ee:	f7fe ff97 	bl	8001620 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b64      	cmp	r3, #100	; 0x64
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e1e8      	b.n	8002ad2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002700:	4b7e      	ldr	r3, [pc, #504]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f0      	bne.n	80026ee <HAL_RCC_OscConfig+0x9e>
 800270c:	e000      	b.n	8002710 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d077      	beq.n	800280c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800271c:	4b77      	ldr	r3, [pc, #476]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 030c 	and.w	r3, r3, #12
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00b      	beq.n	8002740 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002728:	4b74      	ldr	r3, [pc, #464]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002730:	2b08      	cmp	r3, #8
 8002732:	d126      	bne.n	8002782 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002734:	4b71      	ldr	r3, [pc, #452]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d120      	bne.n	8002782 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002740:	4b6e      	ldr	r3, [pc, #440]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_OscConfig+0x108>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d001      	beq.n	8002758 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e1bc      	b.n	8002ad2 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002758:	4b68      	ldr	r3, [pc, #416]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	21f8      	movs	r1, #248	; 0xf8
 8002766:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002768:	69b9      	ldr	r1, [r7, #24]
 800276a:	fa91 f1a1 	rbit	r1, r1
 800276e:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002770:	6979      	ldr	r1, [r7, #20]
 8002772:	fab1 f181 	clz	r1, r1
 8002776:	b2c9      	uxtb	r1, r1
 8002778:	408b      	lsls	r3, r1
 800277a:	4960      	ldr	r1, [pc, #384]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 800277c:	4313      	orrs	r3, r2
 800277e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002780:	e044      	b.n	800280c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d02a      	beq.n	80027e0 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800278a:	4b5e      	ldr	r3, [pc, #376]	; (8002904 <HAL_RCC_OscConfig+0x2b4>)
 800278c:	2201      	movs	r2, #1
 800278e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7fe ff46 	bl	8001620 <HAL_GetTick>
 8002794:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002798:	f7fe ff42 	bl	8001620 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e193      	b.n	8002ad2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027aa:	4b54      	ldr	r3, [pc, #336]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b6:	4b51      	ldr	r3, [pc, #324]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	21f8      	movs	r1, #248	; 0xf8
 80027c4:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	6939      	ldr	r1, [r7, #16]
 80027c8:	fa91 f1a1 	rbit	r1, r1
 80027cc:	60f9      	str	r1, [r7, #12]
  return result;
 80027ce:	68f9      	ldr	r1, [r7, #12]
 80027d0:	fab1 f181 	clz	r1, r1
 80027d4:	b2c9      	uxtb	r1, r1
 80027d6:	408b      	lsls	r3, r1
 80027d8:	4948      	ldr	r1, [pc, #288]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]
 80027de:	e015      	b.n	800280c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e0:	4b48      	ldr	r3, [pc, #288]	; (8002904 <HAL_RCC_OscConfig+0x2b4>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7fe ff1b 	bl	8001620 <HAL_GetTick>
 80027ea:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ee:	f7fe ff17 	bl	8001620 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e168      	b.n	8002ad2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002800:	4b3e      	ldr	r3, [pc, #248]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f0      	bne.n	80027ee <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d030      	beq.n	800287a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d016      	beq.n	800284e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002820:	4b39      	ldr	r3, [pc, #228]	; (8002908 <HAL_RCC_OscConfig+0x2b8>)
 8002822:	2201      	movs	r2, #1
 8002824:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002826:	f7fe fefb 	bl	8001620 <HAL_GetTick>
 800282a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800282e:	f7fe fef7 	bl	8001620 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e148      	b.n	8002ad2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002840:	4b2e      	ldr	r3, [pc, #184]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 8002842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x1de>
 800284c:	e015      	b.n	800287a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800284e:	4b2e      	ldr	r3, [pc, #184]	; (8002908 <HAL_RCC_OscConfig+0x2b8>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002854:	f7fe fee4 	bl	8001620 <HAL_GetTick>
 8002858:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800285c:	f7fe fee0 	bl	8001620 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e131      	b.n	8002ad2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286e:	4b23      	ldr	r3, [pc, #140]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 8002870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 8088 	beq.w	8002998 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002888:	2300      	movs	r3, #0
 800288a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800288e:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d110      	bne.n	80028bc <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	4b17      	ldr	r3, [pc, #92]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	4a16      	ldr	r2, [pc, #88]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80028a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a8:	6413      	str	r3, [r2, #64]	; 0x40
 80028aa:	4b14      	ldr	r3, [pc, #80]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b6:	2301      	movs	r3, #1
 80028b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80028bc:	4b13      	ldr	r3, [pc, #76]	; (800290c <HAL_RCC_OscConfig+0x2bc>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a12      	ldr	r2, [pc, #72]	; (800290c <HAL_RCC_OscConfig+0x2bc>)
 80028c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c6:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c8:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_RCC_OscConfig+0x2bc>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d123      	bne.n	800291c <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <HAL_RCC_OscConfig+0x2bc>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0c      	ldr	r2, [pc, #48]	; (800290c <HAL_RCC_OscConfig+0x2bc>)
 80028da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e0:	f7fe fe9e 	bl	8001620 <HAL_GetTick>
 80028e4:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e6:	e013      	b.n	8002910 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e8:	f7fe fe9a 	bl	8001620 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d90c      	bls.n	8002910 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e0eb      	b.n	8002ad2 <HAL_RCC_OscConfig+0x482>
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800
 8002900:	40023802 	.word	0x40023802
 8002904:	42470000 	.word	0x42470000
 8002908:	42470e80 	.word	0x42470e80
 800290c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002910:	4b72      	ldr	r3, [pc, #456]	; (8002adc <HAL_RCC_OscConfig+0x48c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0e5      	beq.n	80028e8 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	4b6f      	ldr	r3, [pc, #444]	; (8002ae0 <HAL_RCC_OscConfig+0x490>)
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d015      	beq.n	800295a <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292e:	f7fe fe77 	bl	8001620 <HAL_GetTick>
 8002932:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002934:	e00a      	b.n	800294c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002936:	f7fe fe73 	bl	8001620 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f241 3288 	movw	r2, #5000	; 0x1388
 8002944:	4293      	cmp	r3, r2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e0c2      	b.n	8002ad2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294c:	4b65      	ldr	r3, [pc, #404]	; (8002ae4 <HAL_RCC_OscConfig+0x494>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0ee      	beq.n	8002936 <HAL_RCC_OscConfig+0x2e6>
 8002958:	e014      	b.n	8002984 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295a:	f7fe fe61 	bl	8001620 <HAL_GetTick>
 800295e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002960:	e00a      	b.n	8002978 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002962:	f7fe fe5d 	bl	8001620 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e0ac      	b.n	8002ad2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002978:	4b5a      	ldr	r3, [pc, #360]	; (8002ae4 <HAL_RCC_OscConfig+0x494>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1ee      	bne.n	8002962 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002988:	2b01      	cmp	r3, #1
 800298a:	d105      	bne.n	8002998 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800298c:	4b55      	ldr	r3, [pc, #340]	; (8002ae4 <HAL_RCC_OscConfig+0x494>)
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	4a54      	ldr	r2, [pc, #336]	; (8002ae4 <HAL_RCC_OscConfig+0x494>)
 8002992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002996:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8097 	beq.w	8002ad0 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029a2:	4b50      	ldr	r3, [pc, #320]	; (8002ae4 <HAL_RCC_OscConfig+0x494>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d061      	beq.n	8002a72 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d146      	bne.n	8002a44 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b6:	4b4c      	ldr	r3, [pc, #304]	; (8002ae8 <HAL_RCC_OscConfig+0x498>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7fe fe30 	bl	8001620 <HAL_GetTick>
 80029c0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe fe2c 	bl	8001620 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b64      	cmp	r3, #100	; 0x64
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e07d      	b.n	8002ad2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d6:	4b43      	ldr	r3, [pc, #268]	; (8002ae4 <HAL_RCC_OscConfig+0x494>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e2:	4b40      	ldr	r3, [pc, #256]	; (8002ae4 <HAL_RCC_OscConfig+0x494>)
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	4b41      	ldr	r3, [pc, #260]	; (8002aec <HAL_RCC_OscConfig+0x49c>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	69d1      	ldr	r1, [r2, #28]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6a12      	ldr	r2, [r2, #32]
 80029f2:	4311      	orrs	r1, r2
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029f8:	0192      	lsls	r2, r2, #6
 80029fa:	4311      	orrs	r1, r2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a00:	0612      	lsls	r2, r2, #24
 8002a02:	4311      	orrs	r1, r2
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002a08:	0852      	lsrs	r2, r2, #1
 8002a0a:	3a01      	subs	r2, #1
 8002a0c:	0412      	lsls	r2, r2, #16
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	4934      	ldr	r1, [pc, #208]	; (8002ae4 <HAL_RCC_OscConfig+0x494>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a16:	4b34      	ldr	r3, [pc, #208]	; (8002ae8 <HAL_RCC_OscConfig+0x498>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fe00 	bl	8001620 <HAL_GetTick>
 8002a20:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a24:	f7fe fdfc 	bl	8001620 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b64      	cmp	r3, #100	; 0x64
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e04d      	b.n	8002ad2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a36:	4b2b      	ldr	r3, [pc, #172]	; (8002ae4 <HAL_RCC_OscConfig+0x494>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x3d4>
 8002a42:	e045      	b.n	8002ad0 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a44:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <HAL_RCC_OscConfig+0x498>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4a:	f7fe fde9 	bl	8001620 <HAL_GetTick>
 8002a4e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a52:	f7fe fde5 	bl	8001620 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b64      	cmp	r3, #100	; 0x64
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e036      	b.n	8002ad2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a64:	4b1f      	ldr	r3, [pc, #124]	; (8002ae4 <HAL_RCC_OscConfig+0x494>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1f0      	bne.n	8002a52 <HAL_RCC_OscConfig+0x402>
 8002a70:	e02e      	b.n	8002ad0 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e029      	b.n	8002ad2 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002a7e:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <HAL_RCC_OscConfig+0x494>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d11c      	bne.n	8002acc <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d115      	bne.n	8002acc <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	099b      	lsrs	r3, r3, #6
 8002aa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d10d      	bne.n	8002acc <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d106      	bne.n	8002acc <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3728      	adds	r7, #40	; 0x28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40007000 	.word	0x40007000
 8002ae0:	40023870 	.word	0x40023870
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	42470060 	.word	0x42470060
 8002aec:	f0bc8000 	.word	0xf0bc8000

08002af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0d2      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b04:	4b6b      	ldr	r3, [pc, #428]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d90c      	bls.n	8002b2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b12:	4b68      	ldr	r3, [pc, #416]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	4b66      	ldr	r3, [pc, #408]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0be      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d020      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b44:	4b5c      	ldr	r3, [pc, #368]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	4a5b      	ldr	r2, [pc, #364]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002b5c:	4b56      	ldr	r3, [pc, #344]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4a55      	ldr	r2, [pc, #340]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b68:	4b53      	ldr	r3, [pc, #332]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4950      	ldr	r1, [pc, #320]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d040      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d107      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8e:	4b4a      	ldr	r3, [pc, #296]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d115      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e085      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba6:	4b44      	ldr	r3, [pc, #272]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e079      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb6:	4b40      	ldr	r3, [pc, #256]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e071      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc6:	4b3c      	ldr	r3, [pc, #240]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f023 0203 	bic.w	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4939      	ldr	r1, [pc, #228]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd8:	f7fe fd22 	bl	8001620 <HAL_GetTick>
 8002bdc:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be0:	f7fe fd1e 	bl	8001620 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e059      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	4b30      	ldr	r3, [pc, #192]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 020c 	and.w	r2, r3, #12
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d1eb      	bne.n	8002be0 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c08:	4b2a      	ldr	r3, [pc, #168]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d20c      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b27      	ldr	r3, [pc, #156]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b25      	ldr	r3, [pc, #148]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e03c      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3c:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	491b      	ldr	r1, [pc, #108]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5a:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4913      	ldr	r1, [pc, #76]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002c6e:	f000 f82b 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8002c72:	4601      	mov	r1, r0
 8002c74:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c7c:	22f0      	movs	r2, #240	; 0xf0
 8002c7e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	fa92 f2a2 	rbit	r2, r2
 8002c86:	60fa      	str	r2, [r7, #12]
  return result;
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	fab2 f282 	clz	r2, r2
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	40d3      	lsrs	r3, r2
 8002c92:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <HAL_RCC_ClockConfig+0x1cc>)
 8002c94:	5cd3      	ldrb	r3, [r2, r3]
 8002c96:	fa21 f303 	lsr.w	r3, r1, r3
 8002c9a:	4a09      	ldr	r2, [pc, #36]	; (8002cc0 <HAL_RCC_ClockConfig+0x1d0>)
 8002c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x1d4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe fc7a 	bl	800159c <HAL_InitTick>

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023c00 	.word	0x40023c00
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	080047e0 	.word	0x080047e0
 8002cc0:	20000000 	.word	0x20000000
 8002cc4:	20000004 	.word	0x20000004

08002cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	607b      	str	r3, [r7, #4]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce0:	4b67      	ldr	r3, [pc, #412]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 030c 	and.w	r3, r3, #12
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d00d      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x40>
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	f200 80bd 	bhi.w	8002e6c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0x34>
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d003      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cfa:	e0b7      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cfc:	4b61      	ldr	r3, [pc, #388]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002cfe:	60bb      	str	r3, [r7, #8]
       break;
 8002d00:	e0b7      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d02:	4b61      	ldr	r3, [pc, #388]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002d04:	60bb      	str	r3, [r7, #8]
      break;
 8002d06:	e0b4      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d08:	4b5d      	ldr	r3, [pc, #372]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d12:	4b5b      	ldr	r3, [pc, #364]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d04d      	beq.n	8002dba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1e:	4b58      	ldr	r3, [pc, #352]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	099b      	lsrs	r3, r3, #6
 8002d24:	461a      	mov	r2, r3
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d2e:	f04f 0100 	mov.w	r1, #0
 8002d32:	ea02 0800 	and.w	r8, r2, r0
 8002d36:	ea03 0901 	and.w	r9, r3, r1
 8002d3a:	4640      	mov	r0, r8
 8002d3c:	4649      	mov	r1, r9
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	014b      	lsls	r3, r1, #5
 8002d48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d4c:	0142      	lsls	r2, r0, #5
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	ebb0 0008 	subs.w	r0, r0, r8
 8002d56:	eb61 0109 	sbc.w	r1, r1, r9
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	018b      	lsls	r3, r1, #6
 8002d64:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d68:	0182      	lsls	r2, r0, #6
 8002d6a:	1a12      	subs	r2, r2, r0
 8002d6c:	eb63 0301 	sbc.w	r3, r3, r1
 8002d70:	f04f 0000 	mov.w	r0, #0
 8002d74:	f04f 0100 	mov.w	r1, #0
 8002d78:	00d9      	lsls	r1, r3, #3
 8002d7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d7e:	00d0      	lsls	r0, r2, #3
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	eb12 0208 	adds.w	r2, r2, r8
 8002d88:	eb43 0309 	adc.w	r3, r3, r9
 8002d8c:	f04f 0000 	mov.w	r0, #0
 8002d90:	f04f 0100 	mov.w	r1, #0
 8002d94:	0259      	lsls	r1, r3, #9
 8002d96:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d9a:	0250      	lsls	r0, r2, #9
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4610      	mov	r0, r2
 8002da2:	4619      	mov	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	461a      	mov	r2, r3
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	f7fd feaa 	bl	8000b04 <__aeabi_uldivmod>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4613      	mov	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	e04a      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dba:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	099b      	lsrs	r3, r3, #6
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dca:	f04f 0100 	mov.w	r1, #0
 8002dce:	ea02 0400 	and.w	r4, r2, r0
 8002dd2:	ea03 0501 	and.w	r5, r3, r1
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	4629      	mov	r1, r5
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	014b      	lsls	r3, r1, #5
 8002de4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002de8:	0142      	lsls	r2, r0, #5
 8002dea:	4610      	mov	r0, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	1b00      	subs	r0, r0, r4
 8002df0:	eb61 0105 	sbc.w	r1, r1, r5
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	018b      	lsls	r3, r1, #6
 8002dfe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e02:	0182      	lsls	r2, r0, #6
 8002e04:	1a12      	subs	r2, r2, r0
 8002e06:	eb63 0301 	sbc.w	r3, r3, r1
 8002e0a:	f04f 0000 	mov.w	r0, #0
 8002e0e:	f04f 0100 	mov.w	r1, #0
 8002e12:	00d9      	lsls	r1, r3, #3
 8002e14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e18:	00d0      	lsls	r0, r2, #3
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	1912      	adds	r2, r2, r4
 8002e20:	eb45 0303 	adc.w	r3, r5, r3
 8002e24:	f04f 0000 	mov.w	r0, #0
 8002e28:	f04f 0100 	mov.w	r1, #0
 8002e2c:	0299      	lsls	r1, r3, #10
 8002e2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e32:	0290      	lsls	r0, r2, #10
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	f7fd fe5e 	bl	8000b04 <__aeabi_uldivmod>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	0c1b      	lsrs	r3, r3, #16
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e68:	60bb      	str	r3, [r7, #8]
      break;
 8002e6a:	e002      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e6e:	60bb      	str	r3, [r7, #8]
      break;
 8002e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e72:	68bb      	ldr	r3, [r7, #8]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e7e:	bf00      	nop
 8002e80:	40023800 	.word	0x40023800
 8002e84:	00f42400 	.word	0x00f42400
 8002e88:	007a1200 	.word	0x007a1200

08002e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e041      	b.n	8002f22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fe fabe 	bl	8001434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f000 fa8e 	bl	80033ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d001      	beq.n	8002f44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e046      	b.n	8002fd2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a22      	ldr	r2, [pc, #136]	; (8002fdc <HAL_TIM_Base_Start+0xb0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d022      	beq.n	8002f9c <HAL_TIM_Base_Start+0x70>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5e:	d01d      	beq.n	8002f9c <HAL_TIM_Base_Start+0x70>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1e      	ldr	r2, [pc, #120]	; (8002fe0 <HAL_TIM_Base_Start+0xb4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d018      	beq.n	8002f9c <HAL_TIM_Base_Start+0x70>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1d      	ldr	r2, [pc, #116]	; (8002fe4 <HAL_TIM_Base_Start+0xb8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d013      	beq.n	8002f9c <HAL_TIM_Base_Start+0x70>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1b      	ldr	r2, [pc, #108]	; (8002fe8 <HAL_TIM_Base_Start+0xbc>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00e      	beq.n	8002f9c <HAL_TIM_Base_Start+0x70>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1a      	ldr	r2, [pc, #104]	; (8002fec <HAL_TIM_Base_Start+0xc0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d009      	beq.n	8002f9c <HAL_TIM_Base_Start+0x70>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a18      	ldr	r2, [pc, #96]	; (8002ff0 <HAL_TIM_Base_Start+0xc4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d004      	beq.n	8002f9c <HAL_TIM_Base_Start+0x70>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a17      	ldr	r2, [pc, #92]	; (8002ff4 <HAL_TIM_Base_Start+0xc8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d111      	bne.n	8002fc0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b06      	cmp	r3, #6
 8002fac:	d010      	beq.n	8002fd0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0201 	orr.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fbe:	e007      	b.n	8002fd0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	40010000 	.word	0x40010000
 8002fe0:	40000400 	.word	0x40000400
 8002fe4:	40000800 	.word	0x40000800
 8002fe8:	40000c00 	.word	0x40000c00
 8002fec:	40010400 	.word	0x40010400
 8002ff0:	40014000 	.word	0x40014000
 8002ff4:	40001800 	.word	0x40001800

08002ff8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b02      	cmp	r3, #2
 800300c:	d122      	bne.n	8003054 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b02      	cmp	r3, #2
 800301a:	d11b      	bne.n	8003054 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0202 	mvn.w	r2, #2
 8003024:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f9ba 	bl	80033b4 <HAL_TIM_IC_CaptureCallback>
 8003040:	e005      	b.n	800304e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f9ad 	bl	80033a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f9bc 	bl	80033c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b04      	cmp	r3, #4
 8003060:	d122      	bne.n	80030a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b04      	cmp	r3, #4
 800306e:	d11b      	bne.n	80030a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f06f 0204 	mvn.w	r2, #4
 8003078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2202      	movs	r2, #2
 800307e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f990 	bl	80033b4 <HAL_TIM_IC_CaptureCallback>
 8003094:	e005      	b.n	80030a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f983 	bl	80033a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f992 	bl	80033c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d122      	bne.n	80030fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d11b      	bne.n	80030fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0208 	mvn.w	r2, #8
 80030cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2204      	movs	r2, #4
 80030d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f966 	bl	80033b4 <HAL_TIM_IC_CaptureCallback>
 80030e8:	e005      	b.n	80030f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f959 	bl	80033a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f968 	bl	80033c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	2b10      	cmp	r3, #16
 8003108:	d122      	bne.n	8003150 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b10      	cmp	r3, #16
 8003116:	d11b      	bne.n	8003150 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0210 	mvn.w	r2, #16
 8003120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2208      	movs	r2, #8
 8003126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f93c 	bl	80033b4 <HAL_TIM_IC_CaptureCallback>
 800313c:	e005      	b.n	800314a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f92f 	bl	80033a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f93e 	bl	80033c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b01      	cmp	r3, #1
 800315c:	d10e      	bne.n	800317c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b01      	cmp	r3, #1
 800316a:	d107      	bne.n	800317c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0201 	mvn.w	r2, #1
 8003174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f90a 	bl	8003390 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003186:	2b80      	cmp	r3, #128	; 0x80
 8003188:	d10e      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003194:	2b80      	cmp	r3, #128	; 0x80
 8003196:	d107      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fad9 	bl	800375a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b2:	2b40      	cmp	r3, #64	; 0x40
 80031b4:	d10e      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c0:	2b40      	cmp	r3, #64	; 0x40
 80031c2:	d107      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f902 	bl	80033d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d10e      	bne.n	8003200 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d107      	bne.n	8003200 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0220 	mvn.w	r2, #32
 80031f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 faa4 	bl	8003748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_TIM_ConfigClockSource+0x18>
 800321c:	2302      	movs	r3, #2
 800321e:	e0b3      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x180>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800323e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003246:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003258:	d03e      	beq.n	80032d8 <HAL_TIM_ConfigClockSource+0xd0>
 800325a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800325e:	f200 8087 	bhi.w	8003370 <HAL_TIM_ConfigClockSource+0x168>
 8003262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003266:	f000 8085 	beq.w	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 800326a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326e:	d87f      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x168>
 8003270:	2b70      	cmp	r3, #112	; 0x70
 8003272:	d01a      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0xa2>
 8003274:	2b70      	cmp	r3, #112	; 0x70
 8003276:	d87b      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x168>
 8003278:	2b60      	cmp	r3, #96	; 0x60
 800327a:	d050      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x116>
 800327c:	2b60      	cmp	r3, #96	; 0x60
 800327e:	d877      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x168>
 8003280:	2b50      	cmp	r3, #80	; 0x50
 8003282:	d03c      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0xf6>
 8003284:	2b50      	cmp	r3, #80	; 0x50
 8003286:	d873      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x168>
 8003288:	2b40      	cmp	r3, #64	; 0x40
 800328a:	d058      	beq.n	800333e <HAL_TIM_ConfigClockSource+0x136>
 800328c:	2b40      	cmp	r3, #64	; 0x40
 800328e:	d86f      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x168>
 8003290:	2b30      	cmp	r3, #48	; 0x30
 8003292:	d064      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x156>
 8003294:	2b30      	cmp	r3, #48	; 0x30
 8003296:	d86b      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x168>
 8003298:	2b20      	cmp	r3, #32
 800329a:	d060      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x156>
 800329c:	2b20      	cmp	r3, #32
 800329e:	d867      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x168>
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d05c      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x156>
 80032a4:	2b10      	cmp	r3, #16
 80032a6:	d05a      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80032a8:	e062      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6899      	ldr	r1, [r3, #8]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f000 f9ac 	bl	8003616 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	609a      	str	r2, [r3, #8]
      break;
 80032d6:	e04e      	b.n	8003376 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	6899      	ldr	r1, [r3, #8]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f000 f995 	bl	8003616 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032fa:	609a      	str	r2, [r3, #8]
      break;
 80032fc:	e03b      	b.n	8003376 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6859      	ldr	r1, [r3, #4]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	461a      	mov	r2, r3
 800330c:	f000 f90c 	bl	8003528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2150      	movs	r1, #80	; 0x50
 8003316:	4618      	mov	r0, r3
 8003318:	f000 f963 	bl	80035e2 <TIM_ITRx_SetConfig>
      break;
 800331c:	e02b      	b.n	8003376 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	6859      	ldr	r1, [r3, #4]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	461a      	mov	r2, r3
 800332c:	f000 f92a 	bl	8003584 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2160      	movs	r1, #96	; 0x60
 8003336:	4618      	mov	r0, r3
 8003338:	f000 f953 	bl	80035e2 <TIM_ITRx_SetConfig>
      break;
 800333c:	e01b      	b.n	8003376 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	461a      	mov	r2, r3
 800334c:	f000 f8ec 	bl	8003528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2140      	movs	r1, #64	; 0x40
 8003356:	4618      	mov	r0, r3
 8003358:	f000 f943 	bl	80035e2 <TIM_ITRx_SetConfig>
      break;
 800335c:	e00b      	b.n	8003376 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f000 f93a 	bl	80035e2 <TIM_ITRx_SetConfig>
        break;
 800336e:	e002      	b.n	8003376 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003370:	bf00      	nop
 8003372:	e000      	b.n	8003376 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003374:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr

080033a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr

080033c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
	...

080033ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a3f      	ldr	r2, [pc, #252]	; (80034fc <TIM_Base_SetConfig+0x110>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d013      	beq.n	800342c <TIM_Base_SetConfig+0x40>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800340a:	d00f      	beq.n	800342c <TIM_Base_SetConfig+0x40>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a3c      	ldr	r2, [pc, #240]	; (8003500 <TIM_Base_SetConfig+0x114>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00b      	beq.n	800342c <TIM_Base_SetConfig+0x40>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a3b      	ldr	r2, [pc, #236]	; (8003504 <TIM_Base_SetConfig+0x118>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d007      	beq.n	800342c <TIM_Base_SetConfig+0x40>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a3a      	ldr	r2, [pc, #232]	; (8003508 <TIM_Base_SetConfig+0x11c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d003      	beq.n	800342c <TIM_Base_SetConfig+0x40>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a39      	ldr	r2, [pc, #228]	; (800350c <TIM_Base_SetConfig+0x120>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d108      	bne.n	800343e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	4313      	orrs	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a2e      	ldr	r2, [pc, #184]	; (80034fc <TIM_Base_SetConfig+0x110>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d02b      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344c:	d027      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a2b      	ldr	r2, [pc, #172]	; (8003500 <TIM_Base_SetConfig+0x114>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d023      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a2a      	ldr	r2, [pc, #168]	; (8003504 <TIM_Base_SetConfig+0x118>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d01f      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a29      	ldr	r2, [pc, #164]	; (8003508 <TIM_Base_SetConfig+0x11c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d01b      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a28      	ldr	r2, [pc, #160]	; (800350c <TIM_Base_SetConfig+0x120>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d017      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a27      	ldr	r2, [pc, #156]	; (8003510 <TIM_Base_SetConfig+0x124>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d013      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a26      	ldr	r2, [pc, #152]	; (8003514 <TIM_Base_SetConfig+0x128>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00f      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a25      	ldr	r2, [pc, #148]	; (8003518 <TIM_Base_SetConfig+0x12c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00b      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a24      	ldr	r2, [pc, #144]	; (800351c <TIM_Base_SetConfig+0x130>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d007      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a23      	ldr	r2, [pc, #140]	; (8003520 <TIM_Base_SetConfig+0x134>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d003      	beq.n	800349e <TIM_Base_SetConfig+0xb2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a22      	ldr	r2, [pc, #136]	; (8003524 <TIM_Base_SetConfig+0x138>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d108      	bne.n	80034b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a09      	ldr	r2, [pc, #36]	; (80034fc <TIM_Base_SetConfig+0x110>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d003      	beq.n	80034e4 <TIM_Base_SetConfig+0xf8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a0b      	ldr	r2, [pc, #44]	; (800350c <TIM_Base_SetConfig+0x120>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d103      	bne.n	80034ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	615a      	str	r2, [r3, #20]
}
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr
 80034fc:	40010000 	.word	0x40010000
 8003500:	40000400 	.word	0x40000400
 8003504:	40000800 	.word	0x40000800
 8003508:	40000c00 	.word	0x40000c00
 800350c:	40010400 	.word	0x40010400
 8003510:	40014000 	.word	0x40014000
 8003514:	40014400 	.word	0x40014400
 8003518:	40014800 	.word	0x40014800
 800351c:	40001800 	.word	0x40001800
 8003520:	40001c00 	.word	0x40001c00
 8003524:	40002000 	.word	0x40002000

08003528 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	f023 0201 	bic.w	r2, r3, #1
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f023 030a 	bic.w	r3, r3, #10
 8003564:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	621a      	str	r2, [r3, #32]
}
 800357a:	bf00      	nop
 800357c:	371c      	adds	r7, #28
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr

08003584 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f023 0210 	bic.w	r2, r3, #16
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	031b      	lsls	r3, r3, #12
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	621a      	str	r2, [r3, #32]
}
 80035d8:	bf00      	nop
 80035da:	371c      	adds	r7, #28
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr

080035e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b085      	sub	sp, #20
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	f043 0307 	orr.w	r3, r3, #7
 8003604:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	609a      	str	r2, [r3, #8]
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr

08003616 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003616:	b480      	push	{r7}
 8003618:	b087      	sub	sp, #28
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003630:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	021a      	lsls	r2, r3, #8
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	431a      	orrs	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	4313      	orrs	r3, r2
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	609a      	str	r2, [r3, #8]
}
 800364a:	bf00      	nop
 800364c:	371c      	adds	r7, #28
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr

08003654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003668:	2302      	movs	r3, #2
 800366a:	e05a      	b.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003692:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a20      	ldr	r2, [pc, #128]	; (800372c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d022      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b8:	d01d      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a1c      	ldr	r2, [pc, #112]	; (8003730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d018      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1a      	ldr	r2, [pc, #104]	; (8003734 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a19      	ldr	r2, [pc, #100]	; (8003738 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00e      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a17      	ldr	r2, [pc, #92]	; (800373c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d009      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a16      	ldr	r2, [pc, #88]	; (8003740 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d004      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a14      	ldr	r2, [pc, #80]	; (8003744 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d10c      	bne.n	8003710 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	4313      	orrs	r3, r2
 8003706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	40010000 	.word	0x40010000
 8003730:	40000400 	.word	0x40000400
 8003734:	40000800 	.word	0x40000800
 8003738:	40000c00 	.word	0x40000c00
 800373c:	40010400 	.word	0x40010400
 8003740:	40014000 	.word	0x40014000
 8003744:	40001800 	.word	0x40001800

08003748 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <__libc_init_array>:
 800376c:	b570      	push	{r4, r5, r6, lr}
 800376e:	2600      	movs	r6, #0
 8003770:	4d0c      	ldr	r5, [pc, #48]	; (80037a4 <__libc_init_array+0x38>)
 8003772:	4c0d      	ldr	r4, [pc, #52]	; (80037a8 <__libc_init_array+0x3c>)
 8003774:	1b64      	subs	r4, r4, r5
 8003776:	10a4      	asrs	r4, r4, #2
 8003778:	42a6      	cmp	r6, r4
 800377a:	d109      	bne.n	8003790 <__libc_init_array+0x24>
 800377c:	f001 f822 	bl	80047c4 <_init>
 8003780:	2600      	movs	r6, #0
 8003782:	4d0a      	ldr	r5, [pc, #40]	; (80037ac <__libc_init_array+0x40>)
 8003784:	4c0a      	ldr	r4, [pc, #40]	; (80037b0 <__libc_init_array+0x44>)
 8003786:	1b64      	subs	r4, r4, r5
 8003788:	10a4      	asrs	r4, r4, #2
 800378a:	42a6      	cmp	r6, r4
 800378c:	d105      	bne.n	800379a <__libc_init_array+0x2e>
 800378e:	bd70      	pop	{r4, r5, r6, pc}
 8003790:	f855 3b04 	ldr.w	r3, [r5], #4
 8003794:	4798      	blx	r3
 8003796:	3601      	adds	r6, #1
 8003798:	e7ee      	b.n	8003778 <__libc_init_array+0xc>
 800379a:	f855 3b04 	ldr.w	r3, [r5], #4
 800379e:	4798      	blx	r3
 80037a0:	3601      	adds	r6, #1
 80037a2:	e7f2      	b.n	800378a <__libc_init_array+0x1e>
 80037a4:	080049d8 	.word	0x080049d8
 80037a8:	080049d8 	.word	0x080049d8
 80037ac:	080049d8 	.word	0x080049d8
 80037b0:	080049dc 	.word	0x080049dc

080037b4 <memset>:
 80037b4:	4603      	mov	r3, r0
 80037b6:	4402      	add	r2, r0
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d100      	bne.n	80037be <memset+0xa>
 80037bc:	4770      	bx	lr
 80037be:	f803 1b01 	strb.w	r1, [r3], #1
 80037c2:	e7f9      	b.n	80037b8 <memset+0x4>

080037c4 <sin>:
 80037c4:	b530      	push	{r4, r5, lr}
 80037c6:	4a20      	ldr	r2, [pc, #128]	; (8003848 <sin+0x84>)
 80037c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80037cc:	4293      	cmp	r3, r2
 80037ce:	b087      	sub	sp, #28
 80037d0:	dc06      	bgt.n	80037e0 <sin+0x1c>
 80037d2:	2300      	movs	r3, #0
 80037d4:	2200      	movs	r2, #0
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2300      	movs	r3, #0
 80037da:	f000 fe31 	bl	8004440 <__kernel_sin>
 80037de:	e006      	b.n	80037ee <sin+0x2a>
 80037e0:	4a1a      	ldr	r2, [pc, #104]	; (800384c <sin+0x88>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	dd05      	ble.n	80037f2 <sin+0x2e>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	f7fc fcf1 	bl	80001d0 <__aeabi_dsub>
 80037ee:	b007      	add	sp, #28
 80037f0:	bd30      	pop	{r4, r5, pc}
 80037f2:	aa02      	add	r2, sp, #8
 80037f4:	f000 f82c 	bl	8003850 <__ieee754_rem_pio2>
 80037f8:	f000 0003 	and.w	r0, r0, #3
 80037fc:	2801      	cmp	r0, #1
 80037fe:	d009      	beq.n	8003814 <sin+0x50>
 8003800:	2802      	cmp	r0, #2
 8003802:	d00e      	beq.n	8003822 <sin+0x5e>
 8003804:	b9c0      	cbnz	r0, 8003838 <sin+0x74>
 8003806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800380a:	2301      	movs	r3, #1
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003812:	e7e2      	b.n	80037da <sin+0x16>
 8003814:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003818:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800381c:	f000 fa08 	bl	8003c30 <__kernel_cos>
 8003820:	e7e5      	b.n	80037ee <sin+0x2a>
 8003822:	2301      	movs	r3, #1
 8003824:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800382e:	f000 fe07 	bl	8004440 <__kernel_sin>
 8003832:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003836:	e7da      	b.n	80037ee <sin+0x2a>
 8003838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800383c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003840:	f000 f9f6 	bl	8003c30 <__kernel_cos>
 8003844:	e7f5      	b.n	8003832 <sin+0x6e>
 8003846:	bf00      	nop
 8003848:	3fe921fb 	.word	0x3fe921fb
 800384c:	7fefffff 	.word	0x7fefffff

08003850 <__ieee754_rem_pio2>:
 8003850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003854:	4614      	mov	r4, r2
 8003856:	4ac4      	ldr	r2, [pc, #784]	; (8003b68 <__ieee754_rem_pio2+0x318>)
 8003858:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800385c:	b08d      	sub	sp, #52	; 0x34
 800385e:	4592      	cmp	sl, r2
 8003860:	9104      	str	r1, [sp, #16]
 8003862:	dc07      	bgt.n	8003874 <__ieee754_rem_pio2+0x24>
 8003864:	2200      	movs	r2, #0
 8003866:	2300      	movs	r3, #0
 8003868:	e9c4 0100 	strd	r0, r1, [r4]
 800386c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003870:	2500      	movs	r5, #0
 8003872:	e024      	b.n	80038be <__ieee754_rem_pio2+0x6e>
 8003874:	4abd      	ldr	r2, [pc, #756]	; (8003b6c <__ieee754_rem_pio2+0x31c>)
 8003876:	4592      	cmp	sl, r2
 8003878:	dc72      	bgt.n	8003960 <__ieee754_rem_pio2+0x110>
 800387a:	9b04      	ldr	r3, [sp, #16]
 800387c:	4dbc      	ldr	r5, [pc, #752]	; (8003b70 <__ieee754_rem_pio2+0x320>)
 800387e:	2b00      	cmp	r3, #0
 8003880:	a3ab      	add	r3, pc, #684	; (adr r3, 8003b30 <__ieee754_rem_pio2+0x2e0>)
 8003882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003886:	dd36      	ble.n	80038f6 <__ieee754_rem_pio2+0xa6>
 8003888:	f7fc fca2 	bl	80001d0 <__aeabi_dsub>
 800388c:	45aa      	cmp	sl, r5
 800388e:	4606      	mov	r6, r0
 8003890:	460f      	mov	r7, r1
 8003892:	d018      	beq.n	80038c6 <__ieee754_rem_pio2+0x76>
 8003894:	a3a8      	add	r3, pc, #672	; (adr r3, 8003b38 <__ieee754_rem_pio2+0x2e8>)
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	f7fc fc99 	bl	80001d0 <__aeabi_dsub>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4630      	mov	r0, r6
 80038a4:	e9c4 2300 	strd	r2, r3, [r4]
 80038a8:	4639      	mov	r1, r7
 80038aa:	f7fc fc91 	bl	80001d0 <__aeabi_dsub>
 80038ae:	a3a2      	add	r3, pc, #648	; (adr r3, 8003b38 <__ieee754_rem_pio2+0x2e8>)
 80038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b4:	f7fc fc8c 	bl	80001d0 <__aeabi_dsub>
 80038b8:	2501      	movs	r5, #1
 80038ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80038be:	4628      	mov	r0, r5
 80038c0:	b00d      	add	sp, #52	; 0x34
 80038c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c6:	a39e      	add	r3, pc, #632	; (adr r3, 8003b40 <__ieee754_rem_pio2+0x2f0>)
 80038c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038cc:	f7fc fc80 	bl	80001d0 <__aeabi_dsub>
 80038d0:	a39d      	add	r3, pc, #628	; (adr r3, 8003b48 <__ieee754_rem_pio2+0x2f8>)
 80038d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d6:	4606      	mov	r6, r0
 80038d8:	460f      	mov	r7, r1
 80038da:	f7fc fc79 	bl	80001d0 <__aeabi_dsub>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4630      	mov	r0, r6
 80038e4:	e9c4 2300 	strd	r2, r3, [r4]
 80038e8:	4639      	mov	r1, r7
 80038ea:	f7fc fc71 	bl	80001d0 <__aeabi_dsub>
 80038ee:	a396      	add	r3, pc, #600	; (adr r3, 8003b48 <__ieee754_rem_pio2+0x2f8>)
 80038f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f4:	e7de      	b.n	80038b4 <__ieee754_rem_pio2+0x64>
 80038f6:	f7fc fc6d 	bl	80001d4 <__adddf3>
 80038fa:	45aa      	cmp	sl, r5
 80038fc:	4606      	mov	r6, r0
 80038fe:	460f      	mov	r7, r1
 8003900:	d016      	beq.n	8003930 <__ieee754_rem_pio2+0xe0>
 8003902:	a38d      	add	r3, pc, #564	; (adr r3, 8003b38 <__ieee754_rem_pio2+0x2e8>)
 8003904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003908:	f7fc fc64 	bl	80001d4 <__adddf3>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4630      	mov	r0, r6
 8003912:	e9c4 2300 	strd	r2, r3, [r4]
 8003916:	4639      	mov	r1, r7
 8003918:	f7fc fc5a 	bl	80001d0 <__aeabi_dsub>
 800391c:	a386      	add	r3, pc, #536	; (adr r3, 8003b38 <__ieee754_rem_pio2+0x2e8>)
 800391e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003922:	f7fc fc57 	bl	80001d4 <__adddf3>
 8003926:	f04f 35ff 	mov.w	r5, #4294967295
 800392a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800392e:	e7c6      	b.n	80038be <__ieee754_rem_pio2+0x6e>
 8003930:	a383      	add	r3, pc, #524	; (adr r3, 8003b40 <__ieee754_rem_pio2+0x2f0>)
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	f7fc fc4d 	bl	80001d4 <__adddf3>
 800393a:	a383      	add	r3, pc, #524	; (adr r3, 8003b48 <__ieee754_rem_pio2+0x2f8>)
 800393c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003940:	4606      	mov	r6, r0
 8003942:	460f      	mov	r7, r1
 8003944:	f7fc fc46 	bl	80001d4 <__adddf3>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4630      	mov	r0, r6
 800394e:	e9c4 2300 	strd	r2, r3, [r4]
 8003952:	4639      	mov	r1, r7
 8003954:	f7fc fc3c 	bl	80001d0 <__aeabi_dsub>
 8003958:	a37b      	add	r3, pc, #492	; (adr r3, 8003b48 <__ieee754_rem_pio2+0x2f8>)
 800395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395e:	e7e0      	b.n	8003922 <__ieee754_rem_pio2+0xd2>
 8003960:	4a84      	ldr	r2, [pc, #528]	; (8003b74 <__ieee754_rem_pio2+0x324>)
 8003962:	4592      	cmp	sl, r2
 8003964:	f300 80d5 	bgt.w	8003b12 <__ieee754_rem_pio2+0x2c2>
 8003968:	f000 fe20 	bl	80045ac <fabs>
 800396c:	a378      	add	r3, pc, #480	; (adr r3, 8003b50 <__ieee754_rem_pio2+0x300>)
 800396e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003972:	4606      	mov	r6, r0
 8003974:	460f      	mov	r7, r1
 8003976:	f7fc fde3 	bl	8000540 <__aeabi_dmul>
 800397a:	2200      	movs	r2, #0
 800397c:	4b7e      	ldr	r3, [pc, #504]	; (8003b78 <__ieee754_rem_pio2+0x328>)
 800397e:	f7fc fc29 	bl	80001d4 <__adddf3>
 8003982:	f7fd f877 	bl	8000a74 <__aeabi_d2iz>
 8003986:	4605      	mov	r5, r0
 8003988:	f7fc fd70 	bl	800046c <__aeabi_i2d>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003994:	a366      	add	r3, pc, #408	; (adr r3, 8003b30 <__ieee754_rem_pio2+0x2e0>)
 8003996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399a:	f7fc fdd1 	bl	8000540 <__aeabi_dmul>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4630      	mov	r0, r6
 80039a4:	4639      	mov	r1, r7
 80039a6:	f7fc fc13 	bl	80001d0 <__aeabi_dsub>
 80039aa:	a363      	add	r3, pc, #396	; (adr r3, 8003b38 <__ieee754_rem_pio2+0x2e8>)
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	4680      	mov	r8, r0
 80039b2:	4689      	mov	r9, r1
 80039b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039b8:	f7fc fdc2 	bl	8000540 <__aeabi_dmul>
 80039bc:	2d1f      	cmp	r5, #31
 80039be:	4606      	mov	r6, r0
 80039c0:	460f      	mov	r7, r1
 80039c2:	dc0e      	bgt.n	80039e2 <__ieee754_rem_pio2+0x192>
 80039c4:	4b6d      	ldr	r3, [pc, #436]	; (8003b7c <__ieee754_rem_pio2+0x32c>)
 80039c6:	1e6a      	subs	r2, r5, #1
 80039c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039cc:	4553      	cmp	r3, sl
 80039ce:	d008      	beq.n	80039e2 <__ieee754_rem_pio2+0x192>
 80039d0:	4632      	mov	r2, r6
 80039d2:	463b      	mov	r3, r7
 80039d4:	4640      	mov	r0, r8
 80039d6:	4649      	mov	r1, r9
 80039d8:	f7fc fbfa 	bl	80001d0 <__aeabi_dsub>
 80039dc:	e9c4 0100 	strd	r0, r1, [r4]
 80039e0:	e013      	b.n	8003a0a <__ieee754_rem_pio2+0x1ba>
 80039e2:	463b      	mov	r3, r7
 80039e4:	4632      	mov	r2, r6
 80039e6:	4640      	mov	r0, r8
 80039e8:	4649      	mov	r1, r9
 80039ea:	f7fc fbf1 	bl	80001d0 <__aeabi_dsub>
 80039ee:	ea4f 532a 	mov.w	r3, sl, asr #20
 80039f2:	9305      	str	r3, [sp, #20]
 80039f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80039f8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80039fc:	f1ba 0f10 	cmp.w	sl, #16
 8003a00:	dc1f      	bgt.n	8003a42 <__ieee754_rem_pio2+0x1f2>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	e9c4 2300 	strd	r2, r3, [r4]
 8003a0a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8003a0e:	4640      	mov	r0, r8
 8003a10:	4653      	mov	r3, sl
 8003a12:	4649      	mov	r1, r9
 8003a14:	f7fc fbdc 	bl	80001d0 <__aeabi_dsub>
 8003a18:	4632      	mov	r2, r6
 8003a1a:	463b      	mov	r3, r7
 8003a1c:	f7fc fbd8 	bl	80001d0 <__aeabi_dsub>
 8003a20:	460b      	mov	r3, r1
 8003a22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003a26:	9904      	ldr	r1, [sp, #16]
 8003a28:	4602      	mov	r2, r0
 8003a2a:	2900      	cmp	r1, #0
 8003a2c:	f6bf af47 	bge.w	80038be <__ieee754_rem_pio2+0x6e>
 8003a30:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8003a34:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8003a38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003a3c:	60e3      	str	r3, [r4, #12]
 8003a3e:	426d      	negs	r5, r5
 8003a40:	e73d      	b.n	80038be <__ieee754_rem_pio2+0x6e>
 8003a42:	a33f      	add	r3, pc, #252	; (adr r3, 8003b40 <__ieee754_rem_pio2+0x2f0>)
 8003a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a4c:	f7fc fd78 	bl	8000540 <__aeabi_dmul>
 8003a50:	4606      	mov	r6, r0
 8003a52:	460f      	mov	r7, r1
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4640      	mov	r0, r8
 8003a5a:	4649      	mov	r1, r9
 8003a5c:	f7fc fbb8 	bl	80001d0 <__aeabi_dsub>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4682      	mov	sl, r0
 8003a66:	468b      	mov	fp, r1
 8003a68:	4640      	mov	r0, r8
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	f7fc fbb0 	bl	80001d0 <__aeabi_dsub>
 8003a70:	4632      	mov	r2, r6
 8003a72:	463b      	mov	r3, r7
 8003a74:	f7fc fbac 	bl	80001d0 <__aeabi_dsub>
 8003a78:	a333      	add	r3, pc, #204	; (adr r3, 8003b48 <__ieee754_rem_pio2+0x2f8>)
 8003a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7e:	4606      	mov	r6, r0
 8003a80:	460f      	mov	r7, r1
 8003a82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a86:	f7fc fd5b 	bl	8000540 <__aeabi_dmul>
 8003a8a:	4632      	mov	r2, r6
 8003a8c:	463b      	mov	r3, r7
 8003a8e:	f7fc fb9f 	bl	80001d0 <__aeabi_dsub>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4606      	mov	r6, r0
 8003a98:	460f      	mov	r7, r1
 8003a9a:	4650      	mov	r0, sl
 8003a9c:	4659      	mov	r1, fp
 8003a9e:	f7fc fb97 	bl	80001d0 <__aeabi_dsub>
 8003aa2:	9a05      	ldr	r2, [sp, #20]
 8003aa4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b31      	cmp	r3, #49	; 0x31
 8003aac:	dc06      	bgt.n	8003abc <__ieee754_rem_pio2+0x26c>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	46d0      	mov	r8, sl
 8003ab4:	46d9      	mov	r9, fp
 8003ab6:	e9c4 2300 	strd	r2, r3, [r4]
 8003aba:	e7a6      	b.n	8003a0a <__ieee754_rem_pio2+0x1ba>
 8003abc:	a326      	add	r3, pc, #152	; (adr r3, 8003b58 <__ieee754_rem_pio2+0x308>)
 8003abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ac6:	f7fc fd3b 	bl	8000540 <__aeabi_dmul>
 8003aca:	4606      	mov	r6, r0
 8003acc:	460f      	mov	r7, r1
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4650      	mov	r0, sl
 8003ad4:	4659      	mov	r1, fp
 8003ad6:	f7fc fb7b 	bl	80001d0 <__aeabi_dsub>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4680      	mov	r8, r0
 8003ae0:	4689      	mov	r9, r1
 8003ae2:	4650      	mov	r0, sl
 8003ae4:	4659      	mov	r1, fp
 8003ae6:	f7fc fb73 	bl	80001d0 <__aeabi_dsub>
 8003aea:	4632      	mov	r2, r6
 8003aec:	463b      	mov	r3, r7
 8003aee:	f7fc fb6f 	bl	80001d0 <__aeabi_dsub>
 8003af2:	a31b      	add	r3, pc, #108	; (adr r3, 8003b60 <__ieee754_rem_pio2+0x310>)
 8003af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af8:	4606      	mov	r6, r0
 8003afa:	460f      	mov	r7, r1
 8003afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b00:	f7fc fd1e 	bl	8000540 <__aeabi_dmul>
 8003b04:	4632      	mov	r2, r6
 8003b06:	463b      	mov	r3, r7
 8003b08:	f7fc fb62 	bl	80001d0 <__aeabi_dsub>
 8003b0c:	4606      	mov	r6, r0
 8003b0e:	460f      	mov	r7, r1
 8003b10:	e75e      	b.n	80039d0 <__ieee754_rem_pio2+0x180>
 8003b12:	4a1b      	ldr	r2, [pc, #108]	; (8003b80 <__ieee754_rem_pio2+0x330>)
 8003b14:	4592      	cmp	sl, r2
 8003b16:	dd35      	ble.n	8003b84 <__ieee754_rem_pio2+0x334>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	f7fc fb58 	bl	80001d0 <__aeabi_dsub>
 8003b20:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003b24:	e9c4 0100 	strd	r0, r1, [r4]
 8003b28:	e6a2      	b.n	8003870 <__ieee754_rem_pio2+0x20>
 8003b2a:	bf00      	nop
 8003b2c:	f3af 8000 	nop.w
 8003b30:	54400000 	.word	0x54400000
 8003b34:	3ff921fb 	.word	0x3ff921fb
 8003b38:	1a626331 	.word	0x1a626331
 8003b3c:	3dd0b461 	.word	0x3dd0b461
 8003b40:	1a600000 	.word	0x1a600000
 8003b44:	3dd0b461 	.word	0x3dd0b461
 8003b48:	2e037073 	.word	0x2e037073
 8003b4c:	3ba3198a 	.word	0x3ba3198a
 8003b50:	6dc9c883 	.word	0x6dc9c883
 8003b54:	3fe45f30 	.word	0x3fe45f30
 8003b58:	2e000000 	.word	0x2e000000
 8003b5c:	3ba3198a 	.word	0x3ba3198a
 8003b60:	252049c1 	.word	0x252049c1
 8003b64:	397b839a 	.word	0x397b839a
 8003b68:	3fe921fb 	.word	0x3fe921fb
 8003b6c:	4002d97b 	.word	0x4002d97b
 8003b70:	3ff921fb 	.word	0x3ff921fb
 8003b74:	413921fb 	.word	0x413921fb
 8003b78:	3fe00000 	.word	0x3fe00000
 8003b7c:	080047f8 	.word	0x080047f8
 8003b80:	7fefffff 	.word	0x7fefffff
 8003b84:	ea4f 552a 	mov.w	r5, sl, asr #20
 8003b88:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8003b8c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8003b90:	460f      	mov	r7, r1
 8003b92:	4606      	mov	r6, r0
 8003b94:	f7fc ff6e 	bl	8000a74 <__aeabi_d2iz>
 8003b98:	f7fc fc68 	bl	800046c <__aeabi_i2d>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	4639      	mov	r1, r7
 8003ba4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003ba8:	f7fc fb12 	bl	80001d0 <__aeabi_dsub>
 8003bac:	2200      	movs	r2, #0
 8003bae:	4b1e      	ldr	r3, [pc, #120]	; (8003c28 <__ieee754_rem_pio2+0x3d8>)
 8003bb0:	f7fc fcc6 	bl	8000540 <__aeabi_dmul>
 8003bb4:	460f      	mov	r7, r1
 8003bb6:	4606      	mov	r6, r0
 8003bb8:	f7fc ff5c 	bl	8000a74 <__aeabi_d2iz>
 8003bbc:	f7fc fc56 	bl	800046c <__aeabi_i2d>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	4639      	mov	r1, r7
 8003bc8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003bcc:	f7fc fb00 	bl	80001d0 <__aeabi_dsub>
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	4b15      	ldr	r3, [pc, #84]	; (8003c28 <__ieee754_rem_pio2+0x3d8>)
 8003bd4:	f7fc fcb4 	bl	8000540 <__aeabi_dmul>
 8003bd8:	f04f 0803 	mov.w	r8, #3
 8003bdc:	2600      	movs	r6, #0
 8003bde:	2700      	movs	r7, #0
 8003be0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003be4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8003be8:	4632      	mov	r2, r6
 8003bea:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8003bee:	463b      	mov	r3, r7
 8003bf0:	46c2      	mov	sl, r8
 8003bf2:	f108 38ff 	add.w	r8, r8, #4294967295
 8003bf6:	f7fc ff0b 	bl	8000a10 <__aeabi_dcmpeq>
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	d1f4      	bne.n	8003be8 <__ieee754_rem_pio2+0x398>
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <__ieee754_rem_pio2+0x3dc>)
 8003c00:	462a      	mov	r2, r5
 8003c02:	9301      	str	r3, [sp, #4]
 8003c04:	2302      	movs	r3, #2
 8003c06:	4621      	mov	r1, r4
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	a806      	add	r0, sp, #24
 8003c0c:	4653      	mov	r3, sl
 8003c0e:	f000 f8cd 	bl	8003dac <__kernel_rem_pio2>
 8003c12:	9b04      	ldr	r3, [sp, #16]
 8003c14:	4605      	mov	r5, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f6bf ae51 	bge.w	80038be <__ieee754_rem_pio2+0x6e>
 8003c1c:	6863      	ldr	r3, [r4, #4]
 8003c1e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003c22:	6063      	str	r3, [r4, #4]
 8003c24:	68e3      	ldr	r3, [r4, #12]
 8003c26:	e707      	b.n	8003a38 <__ieee754_rem_pio2+0x1e8>
 8003c28:	41700000 	.word	0x41700000
 8003c2c:	08004878 	.word	0x08004878

08003c30 <__kernel_cos>:
 8003c30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c34:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003c38:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8003c3c:	4680      	mov	r8, r0
 8003c3e:	460f      	mov	r7, r1
 8003c40:	e9cd 2300 	strd	r2, r3, [sp]
 8003c44:	da04      	bge.n	8003c50 <__kernel_cos+0x20>
 8003c46:	f7fc ff15 	bl	8000a74 <__aeabi_d2iz>
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	f000 8086 	beq.w	8003d5c <__kernel_cos+0x12c>
 8003c50:	4642      	mov	r2, r8
 8003c52:	463b      	mov	r3, r7
 8003c54:	4640      	mov	r0, r8
 8003c56:	4639      	mov	r1, r7
 8003c58:	f7fc fc72 	bl	8000540 <__aeabi_dmul>
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	4b4e      	ldr	r3, [pc, #312]	; (8003d98 <__kernel_cos+0x168>)
 8003c60:	4604      	mov	r4, r0
 8003c62:	460d      	mov	r5, r1
 8003c64:	f7fc fc6c 	bl	8000540 <__aeabi_dmul>
 8003c68:	a33f      	add	r3, pc, #252	; (adr r3, 8003d68 <__kernel_cos+0x138>)
 8003c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6e:	4682      	mov	sl, r0
 8003c70:	468b      	mov	fp, r1
 8003c72:	4620      	mov	r0, r4
 8003c74:	4629      	mov	r1, r5
 8003c76:	f7fc fc63 	bl	8000540 <__aeabi_dmul>
 8003c7a:	a33d      	add	r3, pc, #244	; (adr r3, 8003d70 <__kernel_cos+0x140>)
 8003c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c80:	f7fc faa8 	bl	80001d4 <__adddf3>
 8003c84:	4622      	mov	r2, r4
 8003c86:	462b      	mov	r3, r5
 8003c88:	f7fc fc5a 	bl	8000540 <__aeabi_dmul>
 8003c8c:	a33a      	add	r3, pc, #232	; (adr r3, 8003d78 <__kernel_cos+0x148>)
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	f7fc fa9d 	bl	80001d0 <__aeabi_dsub>
 8003c96:	4622      	mov	r2, r4
 8003c98:	462b      	mov	r3, r5
 8003c9a:	f7fc fc51 	bl	8000540 <__aeabi_dmul>
 8003c9e:	a338      	add	r3, pc, #224	; (adr r3, 8003d80 <__kernel_cos+0x150>)
 8003ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca4:	f7fc fa96 	bl	80001d4 <__adddf3>
 8003ca8:	4622      	mov	r2, r4
 8003caa:	462b      	mov	r3, r5
 8003cac:	f7fc fc48 	bl	8000540 <__aeabi_dmul>
 8003cb0:	a335      	add	r3, pc, #212	; (adr r3, 8003d88 <__kernel_cos+0x158>)
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	f7fc fa8b 	bl	80001d0 <__aeabi_dsub>
 8003cba:	4622      	mov	r2, r4
 8003cbc:	462b      	mov	r3, r5
 8003cbe:	f7fc fc3f 	bl	8000540 <__aeabi_dmul>
 8003cc2:	a333      	add	r3, pc, #204	; (adr r3, 8003d90 <__kernel_cos+0x160>)
 8003cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc8:	f7fc fa84 	bl	80001d4 <__adddf3>
 8003ccc:	4622      	mov	r2, r4
 8003cce:	462b      	mov	r3, r5
 8003cd0:	f7fc fc36 	bl	8000540 <__aeabi_dmul>
 8003cd4:	4622      	mov	r2, r4
 8003cd6:	462b      	mov	r3, r5
 8003cd8:	f7fc fc32 	bl	8000540 <__aeabi_dmul>
 8003cdc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ce0:	4604      	mov	r4, r0
 8003ce2:	460d      	mov	r5, r1
 8003ce4:	4640      	mov	r0, r8
 8003ce6:	4639      	mov	r1, r7
 8003ce8:	f7fc fc2a 	bl	8000540 <__aeabi_dmul>
 8003cec:	460b      	mov	r3, r1
 8003cee:	4602      	mov	r2, r0
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f7fc fa6c 	bl	80001d0 <__aeabi_dsub>
 8003cf8:	4b28      	ldr	r3, [pc, #160]	; (8003d9c <__kernel_cos+0x16c>)
 8003cfa:	4680      	mov	r8, r0
 8003cfc:	429e      	cmp	r6, r3
 8003cfe:	4689      	mov	r9, r1
 8003d00:	dc0e      	bgt.n	8003d20 <__kernel_cos+0xf0>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4650      	mov	r0, sl
 8003d08:	4659      	mov	r1, fp
 8003d0a:	f7fc fa61 	bl	80001d0 <__aeabi_dsub>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	2000      	movs	r0, #0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4922      	ldr	r1, [pc, #136]	; (8003da0 <__kernel_cos+0x170>)
 8003d16:	f7fc fa5b 	bl	80001d0 <__aeabi_dsub>
 8003d1a:	b003      	add	sp, #12
 8003d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d20:	2400      	movs	r4, #0
 8003d22:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <__kernel_cos+0x174>)
 8003d24:	4622      	mov	r2, r4
 8003d26:	429e      	cmp	r6, r3
 8003d28:	bfcc      	ite	gt
 8003d2a:	4d1f      	ldrgt	r5, [pc, #124]	; (8003da8 <__kernel_cos+0x178>)
 8003d2c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8003d30:	462b      	mov	r3, r5
 8003d32:	2000      	movs	r0, #0
 8003d34:	491a      	ldr	r1, [pc, #104]	; (8003da0 <__kernel_cos+0x170>)
 8003d36:	f7fc fa4b 	bl	80001d0 <__aeabi_dsub>
 8003d3a:	4622      	mov	r2, r4
 8003d3c:	4606      	mov	r6, r0
 8003d3e:	460f      	mov	r7, r1
 8003d40:	462b      	mov	r3, r5
 8003d42:	4650      	mov	r0, sl
 8003d44:	4659      	mov	r1, fp
 8003d46:	f7fc fa43 	bl	80001d0 <__aeabi_dsub>
 8003d4a:	4642      	mov	r2, r8
 8003d4c:	464b      	mov	r3, r9
 8003d4e:	f7fc fa3f 	bl	80001d0 <__aeabi_dsub>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4630      	mov	r0, r6
 8003d58:	4639      	mov	r1, r7
 8003d5a:	e7dc      	b.n	8003d16 <__kernel_cos+0xe6>
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	4910      	ldr	r1, [pc, #64]	; (8003da0 <__kernel_cos+0x170>)
 8003d60:	e7db      	b.n	8003d1a <__kernel_cos+0xea>
 8003d62:	bf00      	nop
 8003d64:	f3af 8000 	nop.w
 8003d68:	be8838d4 	.word	0xbe8838d4
 8003d6c:	bda8fae9 	.word	0xbda8fae9
 8003d70:	bdb4b1c4 	.word	0xbdb4b1c4
 8003d74:	3e21ee9e 	.word	0x3e21ee9e
 8003d78:	809c52ad 	.word	0x809c52ad
 8003d7c:	3e927e4f 	.word	0x3e927e4f
 8003d80:	19cb1590 	.word	0x19cb1590
 8003d84:	3efa01a0 	.word	0x3efa01a0
 8003d88:	16c15177 	.word	0x16c15177
 8003d8c:	3f56c16c 	.word	0x3f56c16c
 8003d90:	5555554c 	.word	0x5555554c
 8003d94:	3fa55555 	.word	0x3fa55555
 8003d98:	3fe00000 	.word	0x3fe00000
 8003d9c:	3fd33332 	.word	0x3fd33332
 8003da0:	3ff00000 	.word	0x3ff00000
 8003da4:	3fe90000 	.word	0x3fe90000
 8003da8:	3fd20000 	.word	0x3fd20000

08003dac <__kernel_rem_pio2>:
 8003dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003db4:	9308      	str	r3, [sp, #32]
 8003db6:	9101      	str	r1, [sp, #4]
 8003db8:	4bc0      	ldr	r3, [pc, #768]	; (80040bc <__kernel_rem_pio2+0x310>)
 8003dba:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8003dbc:	f112 0f14 	cmn.w	r2, #20
 8003dc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003dc4:	bfa8      	it	ge
 8003dc6:	1ed4      	subge	r4, r2, #3
 8003dc8:	9304      	str	r3, [sp, #16]
 8003dca:	9b08      	ldr	r3, [sp, #32]
 8003dcc:	bfb8      	it	lt
 8003dce:	2400      	movlt	r4, #0
 8003dd0:	f103 33ff 	add.w	r3, r3, #4294967295
 8003dd4:	9306      	str	r3, [sp, #24]
 8003dd6:	bfa4      	itt	ge
 8003dd8:	2318      	movge	r3, #24
 8003dda:	fb94 f4f3 	sdivge	r4, r4, r3
 8003dde:	f06f 0317 	mvn.w	r3, #23
 8003de2:	fb04 3303 	mla	r3, r4, r3, r3
 8003de6:	eb03 0a02 	add.w	sl, r3, r2
 8003dea:	9a06      	ldr	r2, [sp, #24]
 8003dec:	9b04      	ldr	r3, [sp, #16]
 8003dee:	1aa7      	subs	r7, r4, r2
 8003df0:	eb03 0802 	add.w	r8, r3, r2
 8003df4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003df6:	2500      	movs	r5, #0
 8003df8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2300      	movs	r3, #0
 8003e00:	9009      	str	r0, [sp, #36]	; 0x24
 8003e02:	ae20      	add	r6, sp, #128	; 0x80
 8003e04:	4545      	cmp	r5, r8
 8003e06:	dd19      	ble.n	8003e3c <__kernel_rem_pio2+0x90>
 8003e08:	9b08      	ldr	r3, [sp, #32]
 8003e0a:	aa20      	add	r2, sp, #128	; 0x80
 8003e0c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003e10:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003e14:	f1c3 0301 	rsb	r3, r3, #1
 8003e18:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8003e1c:	9307      	str	r3, [sp, #28]
 8003e1e:	9b07      	ldr	r3, [sp, #28]
 8003e20:	9a04      	ldr	r2, [sp, #16]
 8003e22:	4443      	add	r3, r8
 8003e24:	429a      	cmp	r2, r3
 8003e26:	db35      	blt.n	8003e94 <__kernel_rem_pio2+0xe8>
 8003e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f1a3 0908 	sub.w	r9, r3, #8
 8003e30:	2300      	movs	r3, #0
 8003e32:	462f      	mov	r7, r5
 8003e34:	2600      	movs	r6, #0
 8003e36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e3a:	e01f      	b.n	8003e7c <__kernel_rem_pio2+0xd0>
 8003e3c:	42ef      	cmn	r7, r5
 8003e3e:	d40b      	bmi.n	8003e58 <__kernel_rem_pio2+0xac>
 8003e40:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003e44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e48:	f7fc fb10 	bl	800046c <__aeabi_i2d>
 8003e4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e50:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003e54:	3501      	adds	r5, #1
 8003e56:	e7d5      	b.n	8003e04 <__kernel_rem_pio2+0x58>
 8003e58:	4610      	mov	r0, r2
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	e7f8      	b.n	8003e50 <__kernel_rem_pio2+0xa4>
 8003e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e62:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8003e66:	f7fc fb6b 	bl	8000540 <__aeabi_dmul>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e72:	f7fc f9af 	bl	80001d4 <__adddf3>
 8003e76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e7a:	3601      	adds	r6, #1
 8003e7c:	9b06      	ldr	r3, [sp, #24]
 8003e7e:	3f08      	subs	r7, #8
 8003e80:	429e      	cmp	r6, r3
 8003e82:	ddec      	ble.n	8003e5e <__kernel_rem_pio2+0xb2>
 8003e84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e88:	3508      	adds	r5, #8
 8003e8a:	e8eb 2302 	strd	r2, r3, [fp], #8
 8003e8e:	f108 0801 	add.w	r8, r8, #1
 8003e92:	e7c4      	b.n	8003e1e <__kernel_rem_pio2+0x72>
 8003e94:	9b04      	ldr	r3, [sp, #16]
 8003e96:	aa0c      	add	r2, sp, #48	; 0x30
 8003e98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003e9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e9e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003ea0:	9f04      	ldr	r7, [sp, #16]
 8003ea2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003ea6:	930a      	str	r3, [sp, #40]	; 0x28
 8003ea8:	463e      	mov	r6, r7
 8003eaa:	ab98      	add	r3, sp, #608	; 0x260
 8003eac:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8003eb0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003eb4:	f8cd b008 	str.w	fp, [sp, #8]
 8003eb8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8003ebc:	2e00      	cmp	r6, #0
 8003ebe:	dc71      	bgt.n	8003fa4 <__kernel_rem_pio2+0x1f8>
 8003ec0:	4652      	mov	r2, sl
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	f000 fbf7 	bl	80046b8 <scalbn>
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003ed0:	4604      	mov	r4, r0
 8003ed2:	460d      	mov	r5, r1
 8003ed4:	f7fc fb34 	bl	8000540 <__aeabi_dmul>
 8003ed8:	f000 fb6e 	bl	80045b8 <floor>
 8003edc:	2200      	movs	r2, #0
 8003ede:	4b78      	ldr	r3, [pc, #480]	; (80040c0 <__kernel_rem_pio2+0x314>)
 8003ee0:	f7fc fb2e 	bl	8000540 <__aeabi_dmul>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4620      	mov	r0, r4
 8003eea:	4629      	mov	r1, r5
 8003eec:	f7fc f970 	bl	80001d0 <__aeabi_dsub>
 8003ef0:	460d      	mov	r5, r1
 8003ef2:	4604      	mov	r4, r0
 8003ef4:	f7fc fdbe 	bl	8000a74 <__aeabi_d2iz>
 8003ef8:	9007      	str	r0, [sp, #28]
 8003efa:	f7fc fab7 	bl	800046c <__aeabi_i2d>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4620      	mov	r0, r4
 8003f04:	4629      	mov	r1, r5
 8003f06:	f7fc f963 	bl	80001d0 <__aeabi_dsub>
 8003f0a:	f1ba 0f00 	cmp.w	sl, #0
 8003f0e:	4680      	mov	r8, r0
 8003f10:	4689      	mov	r9, r1
 8003f12:	dd70      	ble.n	8003ff6 <__kernel_rem_pio2+0x24a>
 8003f14:	1e7a      	subs	r2, r7, #1
 8003f16:	ab0c      	add	r3, sp, #48	; 0x30
 8003f18:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003f1c:	9c07      	ldr	r4, [sp, #28]
 8003f1e:	f1ca 0118 	rsb	r1, sl, #24
 8003f22:	fa40 f301 	asr.w	r3, r0, r1
 8003f26:	441c      	add	r4, r3
 8003f28:	408b      	lsls	r3, r1
 8003f2a:	1ac0      	subs	r0, r0, r3
 8003f2c:	ab0c      	add	r3, sp, #48	; 0x30
 8003f2e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003f32:	f1ca 0317 	rsb	r3, sl, #23
 8003f36:	9407      	str	r4, [sp, #28]
 8003f38:	fa40 f303 	asr.w	r3, r0, r3
 8003f3c:	9302      	str	r3, [sp, #8]
 8003f3e:	9b02      	ldr	r3, [sp, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	dd66      	ble.n	8004012 <__kernel_rem_pio2+0x266>
 8003f44:	2200      	movs	r2, #0
 8003f46:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003f4a:	4614      	mov	r4, r2
 8003f4c:	9b07      	ldr	r3, [sp, #28]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	9307      	str	r3, [sp, #28]
 8003f52:	4297      	cmp	r7, r2
 8003f54:	f300 809f 	bgt.w	8004096 <__kernel_rem_pio2+0x2ea>
 8003f58:	f1ba 0f00 	cmp.w	sl, #0
 8003f5c:	dd07      	ble.n	8003f6e <__kernel_rem_pio2+0x1c2>
 8003f5e:	f1ba 0f01 	cmp.w	sl, #1
 8003f62:	f000 80b9 	beq.w	80040d8 <__kernel_rem_pio2+0x32c>
 8003f66:	f1ba 0f02 	cmp.w	sl, #2
 8003f6a:	f000 80bf 	beq.w	80040ec <__kernel_rem_pio2+0x340>
 8003f6e:	9b02      	ldr	r3, [sp, #8]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d14e      	bne.n	8004012 <__kernel_rem_pio2+0x266>
 8003f74:	4642      	mov	r2, r8
 8003f76:	464b      	mov	r3, r9
 8003f78:	2000      	movs	r0, #0
 8003f7a:	4952      	ldr	r1, [pc, #328]	; (80040c4 <__kernel_rem_pio2+0x318>)
 8003f7c:	f7fc f928 	bl	80001d0 <__aeabi_dsub>
 8003f80:	4680      	mov	r8, r0
 8003f82:	4689      	mov	r9, r1
 8003f84:	2c00      	cmp	r4, #0
 8003f86:	d044      	beq.n	8004012 <__kernel_rem_pio2+0x266>
 8003f88:	4652      	mov	r2, sl
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	494d      	ldr	r1, [pc, #308]	; (80040c4 <__kernel_rem_pio2+0x318>)
 8003f8e:	f000 fb93 	bl	80046b8 <scalbn>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4640      	mov	r0, r8
 8003f98:	4649      	mov	r1, r9
 8003f9a:	f7fc f919 	bl	80001d0 <__aeabi_dsub>
 8003f9e:	4680      	mov	r8, r0
 8003fa0:	4689      	mov	r9, r1
 8003fa2:	e036      	b.n	8004012 <__kernel_rem_pio2+0x266>
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	4b48      	ldr	r3, [pc, #288]	; (80040c8 <__kernel_rem_pio2+0x31c>)
 8003fa8:	4620      	mov	r0, r4
 8003faa:	4629      	mov	r1, r5
 8003fac:	f7fc fac8 	bl	8000540 <__aeabi_dmul>
 8003fb0:	f7fc fd60 	bl	8000a74 <__aeabi_d2iz>
 8003fb4:	f7fc fa5a 	bl	800046c <__aeabi_i2d>
 8003fb8:	2200      	movs	r2, #0
 8003fba:	4b44      	ldr	r3, [pc, #272]	; (80040cc <__kernel_rem_pio2+0x320>)
 8003fbc:	4680      	mov	r8, r0
 8003fbe:	4689      	mov	r9, r1
 8003fc0:	f7fc fabe 	bl	8000540 <__aeabi_dmul>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4620      	mov	r0, r4
 8003fca:	4629      	mov	r1, r5
 8003fcc:	f7fc f900 	bl	80001d0 <__aeabi_dsub>
 8003fd0:	f7fc fd50 	bl	8000a74 <__aeabi_d2iz>
 8003fd4:	9b02      	ldr	r3, [sp, #8]
 8003fd6:	3e01      	subs	r6, #1
 8003fd8:	f843 0b04 	str.w	r0, [r3], #4
 8003fdc:	9302      	str	r3, [sp, #8]
 8003fde:	ab70      	add	r3, sp, #448	; 0x1c0
 8003fe0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003fe4:	4640      	mov	r0, r8
 8003fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fea:	4649      	mov	r1, r9
 8003fec:	f7fc f8f2 	bl	80001d4 <__adddf3>
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	460d      	mov	r5, r1
 8003ff4:	e762      	b.n	8003ebc <__kernel_rem_pio2+0x110>
 8003ff6:	d105      	bne.n	8004004 <__kernel_rem_pio2+0x258>
 8003ff8:	1e7b      	subs	r3, r7, #1
 8003ffa:	aa0c      	add	r2, sp, #48	; 0x30
 8003ffc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004000:	15c3      	asrs	r3, r0, #23
 8004002:	e79b      	b.n	8003f3c <__kernel_rem_pio2+0x190>
 8004004:	2200      	movs	r2, #0
 8004006:	4b32      	ldr	r3, [pc, #200]	; (80040d0 <__kernel_rem_pio2+0x324>)
 8004008:	f7fc fd20 	bl	8000a4c <__aeabi_dcmpge>
 800400c:	2800      	cmp	r0, #0
 800400e:	d13f      	bne.n	8004090 <__kernel_rem_pio2+0x2e4>
 8004010:	9002      	str	r0, [sp, #8]
 8004012:	2200      	movs	r2, #0
 8004014:	2300      	movs	r3, #0
 8004016:	4640      	mov	r0, r8
 8004018:	4649      	mov	r1, r9
 800401a:	f7fc fcf9 	bl	8000a10 <__aeabi_dcmpeq>
 800401e:	2800      	cmp	r0, #0
 8004020:	f000 80b5 	beq.w	800418e <__kernel_rem_pio2+0x3e2>
 8004024:	1e7c      	subs	r4, r7, #1
 8004026:	4623      	mov	r3, r4
 8004028:	2200      	movs	r2, #0
 800402a:	9904      	ldr	r1, [sp, #16]
 800402c:	428b      	cmp	r3, r1
 800402e:	da64      	bge.n	80040fa <__kernel_rem_pio2+0x34e>
 8004030:	2a00      	cmp	r2, #0
 8004032:	d078      	beq.n	8004126 <__kernel_rem_pio2+0x37a>
 8004034:	ab0c      	add	r3, sp, #48	; 0x30
 8004036:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800403a:	f1aa 0a18 	sub.w	sl, sl, #24
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 80a3 	beq.w	800418a <__kernel_rem_pio2+0x3de>
 8004044:	4652      	mov	r2, sl
 8004046:	2000      	movs	r0, #0
 8004048:	491e      	ldr	r1, [pc, #120]	; (80040c4 <__kernel_rem_pio2+0x318>)
 800404a:	f000 fb35 	bl	80046b8 <scalbn>
 800404e:	46a2      	mov	sl, r4
 8004050:	4606      	mov	r6, r0
 8004052:	460f      	mov	r7, r1
 8004054:	f04f 0800 	mov.w	r8, #0
 8004058:	00e3      	lsls	r3, r4, #3
 800405a:	9306      	str	r3, [sp, #24]
 800405c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80040c8 <__kernel_rem_pio2+0x31c>
 8004060:	ab70      	add	r3, sp, #448	; 0x1c0
 8004062:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8004066:	f1ba 0f00 	cmp.w	sl, #0
 800406a:	f280 80c6 	bge.w	80041fa <__kernel_rem_pio2+0x44e>
 800406e:	4627      	mov	r7, r4
 8004070:	f04f 0800 	mov.w	r8, #0
 8004074:	2f00      	cmp	r7, #0
 8004076:	f2c0 80f3 	blt.w	8004260 <__kernel_rem_pio2+0x4b4>
 800407a:	4b16      	ldr	r3, [pc, #88]	; (80040d4 <__kernel_rem_pio2+0x328>)
 800407c:	f04f 0a00 	mov.w	sl, #0
 8004080:	461d      	mov	r5, r3
 8004082:	ab70      	add	r3, sp, #448	; 0x1c0
 8004084:	f04f 0b00 	mov.w	fp, #0
 8004088:	2600      	movs	r6, #0
 800408a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800408e:	e0d9      	b.n	8004244 <__kernel_rem_pio2+0x498>
 8004090:	2302      	movs	r3, #2
 8004092:	9302      	str	r3, [sp, #8]
 8004094:	e756      	b.n	8003f44 <__kernel_rem_pio2+0x198>
 8004096:	f8db 3000 	ldr.w	r3, [fp]
 800409a:	b954      	cbnz	r4, 80040b2 <__kernel_rem_pio2+0x306>
 800409c:	b123      	cbz	r3, 80040a8 <__kernel_rem_pio2+0x2fc>
 800409e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80040a2:	f8cb 3000 	str.w	r3, [fp]
 80040a6:	2301      	movs	r3, #1
 80040a8:	461c      	mov	r4, r3
 80040aa:	3201      	adds	r2, #1
 80040ac:	f10b 0b04 	add.w	fp, fp, #4
 80040b0:	e74f      	b.n	8003f52 <__kernel_rem_pio2+0x1a6>
 80040b2:	1acb      	subs	r3, r1, r3
 80040b4:	f8cb 3000 	str.w	r3, [fp]
 80040b8:	4623      	mov	r3, r4
 80040ba:	e7f5      	b.n	80040a8 <__kernel_rem_pio2+0x2fc>
 80040bc:	080049c0 	.word	0x080049c0
 80040c0:	40200000 	.word	0x40200000
 80040c4:	3ff00000 	.word	0x3ff00000
 80040c8:	3e700000 	.word	0x3e700000
 80040cc:	41700000 	.word	0x41700000
 80040d0:	3fe00000 	.word	0x3fe00000
 80040d4:	08004980 	.word	0x08004980
 80040d8:	1e7a      	subs	r2, r7, #1
 80040da:	ab0c      	add	r3, sp, #48	; 0x30
 80040dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80040e4:	a90c      	add	r1, sp, #48	; 0x30
 80040e6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80040ea:	e740      	b.n	8003f6e <__kernel_rem_pio2+0x1c2>
 80040ec:	1e7a      	subs	r2, r7, #1
 80040ee:	ab0c      	add	r3, sp, #48	; 0x30
 80040f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80040f8:	e7f4      	b.n	80040e4 <__kernel_rem_pio2+0x338>
 80040fa:	a90c      	add	r1, sp, #48	; 0x30
 80040fc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004100:	3b01      	subs	r3, #1
 8004102:	430a      	orrs	r2, r1
 8004104:	e791      	b.n	800402a <__kernel_rem_pio2+0x27e>
 8004106:	3401      	adds	r4, #1
 8004108:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800410c:	2a00      	cmp	r2, #0
 800410e:	d0fa      	beq.n	8004106 <__kernel_rem_pio2+0x35a>
 8004110:	9b08      	ldr	r3, [sp, #32]
 8004112:	1c7e      	adds	r6, r7, #1
 8004114:	18fd      	adds	r5, r7, r3
 8004116:	ab20      	add	r3, sp, #128	; 0x80
 8004118:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800411c:	443c      	add	r4, r7
 800411e:	42b4      	cmp	r4, r6
 8004120:	da04      	bge.n	800412c <__kernel_rem_pio2+0x380>
 8004122:	4627      	mov	r7, r4
 8004124:	e6c0      	b.n	8003ea8 <__kernel_rem_pio2+0xfc>
 8004126:	2401      	movs	r4, #1
 8004128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800412a:	e7ed      	b.n	8004108 <__kernel_rem_pio2+0x35c>
 800412c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800412e:	462f      	mov	r7, r5
 8004130:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004134:	f7fc f99a 	bl	800046c <__aeabi_i2d>
 8004138:	f04f 0b00 	mov.w	fp, #0
 800413c:	f04f 0800 	mov.w	r8, #0
 8004140:	f04f 0900 	mov.w	r9, #0
 8004144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004146:	e8e7 0102 	strd	r0, r1, [r7], #8
 800414a:	3b08      	subs	r3, #8
 800414c:	9302      	str	r3, [sp, #8]
 800414e:	9b06      	ldr	r3, [sp, #24]
 8004150:	459b      	cmp	fp, r3
 8004152:	dd07      	ble.n	8004164 <__kernel_rem_pio2+0x3b8>
 8004154:	ab70      	add	r3, sp, #448	; 0x1c0
 8004156:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800415a:	463d      	mov	r5, r7
 800415c:	e9c3 8900 	strd	r8, r9, [r3]
 8004160:	3601      	adds	r6, #1
 8004162:	e7dc      	b.n	800411e <__kernel_rem_pio2+0x372>
 8004164:	9902      	ldr	r1, [sp, #8]
 8004166:	f10b 0b01 	add.w	fp, fp, #1
 800416a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800416e:	9102      	str	r1, [sp, #8]
 8004170:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8004174:	f7fc f9e4 	bl	8000540 <__aeabi_dmul>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4640      	mov	r0, r8
 800417e:	4649      	mov	r1, r9
 8004180:	f7fc f828 	bl	80001d4 <__adddf3>
 8004184:	4680      	mov	r8, r0
 8004186:	4689      	mov	r9, r1
 8004188:	e7e1      	b.n	800414e <__kernel_rem_pio2+0x3a2>
 800418a:	3c01      	subs	r4, #1
 800418c:	e752      	b.n	8004034 <__kernel_rem_pio2+0x288>
 800418e:	f1ca 0200 	rsb	r2, sl, #0
 8004192:	4640      	mov	r0, r8
 8004194:	4649      	mov	r1, r9
 8004196:	f000 fa8f 	bl	80046b8 <scalbn>
 800419a:	2200      	movs	r2, #0
 800419c:	4ba5      	ldr	r3, [pc, #660]	; (8004434 <__kernel_rem_pio2+0x688>)
 800419e:	4604      	mov	r4, r0
 80041a0:	460d      	mov	r5, r1
 80041a2:	f7fc fc53 	bl	8000a4c <__aeabi_dcmpge>
 80041a6:	b1f8      	cbz	r0, 80041e8 <__kernel_rem_pio2+0x43c>
 80041a8:	2200      	movs	r2, #0
 80041aa:	4ba3      	ldr	r3, [pc, #652]	; (8004438 <__kernel_rem_pio2+0x68c>)
 80041ac:	4620      	mov	r0, r4
 80041ae:	4629      	mov	r1, r5
 80041b0:	f7fc f9c6 	bl	8000540 <__aeabi_dmul>
 80041b4:	f7fc fc5e 	bl	8000a74 <__aeabi_d2iz>
 80041b8:	4606      	mov	r6, r0
 80041ba:	f7fc f957 	bl	800046c <__aeabi_i2d>
 80041be:	2200      	movs	r2, #0
 80041c0:	4b9c      	ldr	r3, [pc, #624]	; (8004434 <__kernel_rem_pio2+0x688>)
 80041c2:	f7fc f9bd 	bl	8000540 <__aeabi_dmul>
 80041c6:	460b      	mov	r3, r1
 80041c8:	4602      	mov	r2, r0
 80041ca:	4629      	mov	r1, r5
 80041cc:	4620      	mov	r0, r4
 80041ce:	f7fb ffff 	bl	80001d0 <__aeabi_dsub>
 80041d2:	f7fc fc4f 	bl	8000a74 <__aeabi_d2iz>
 80041d6:	1c7c      	adds	r4, r7, #1
 80041d8:	ab0c      	add	r3, sp, #48	; 0x30
 80041da:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80041de:	f10a 0a18 	add.w	sl, sl, #24
 80041e2:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80041e6:	e72d      	b.n	8004044 <__kernel_rem_pio2+0x298>
 80041e8:	4620      	mov	r0, r4
 80041ea:	4629      	mov	r1, r5
 80041ec:	f7fc fc42 	bl	8000a74 <__aeabi_d2iz>
 80041f0:	ab0c      	add	r3, sp, #48	; 0x30
 80041f2:	463c      	mov	r4, r7
 80041f4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80041f8:	e724      	b.n	8004044 <__kernel_rem_pio2+0x298>
 80041fa:	ab0c      	add	r3, sp, #48	; 0x30
 80041fc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004200:	f7fc f934 	bl	800046c <__aeabi_i2d>
 8004204:	4632      	mov	r2, r6
 8004206:	463b      	mov	r3, r7
 8004208:	f7fc f99a 	bl	8000540 <__aeabi_dmul>
 800420c:	4642      	mov	r2, r8
 800420e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8004212:	464b      	mov	r3, r9
 8004214:	4630      	mov	r0, r6
 8004216:	4639      	mov	r1, r7
 8004218:	f7fc f992 	bl	8000540 <__aeabi_dmul>
 800421c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004220:	4606      	mov	r6, r0
 8004222:	460f      	mov	r7, r1
 8004224:	e71f      	b.n	8004066 <__kernel_rem_pio2+0x2ba>
 8004226:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800422a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800422e:	f7fc f987 	bl	8000540 <__aeabi_dmul>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	4650      	mov	r0, sl
 8004238:	4659      	mov	r1, fp
 800423a:	f7fb ffcb 	bl	80001d4 <__adddf3>
 800423e:	4682      	mov	sl, r0
 8004240:	468b      	mov	fp, r1
 8004242:	3601      	adds	r6, #1
 8004244:	9b04      	ldr	r3, [sp, #16]
 8004246:	429e      	cmp	r6, r3
 8004248:	dc01      	bgt.n	800424e <__kernel_rem_pio2+0x4a2>
 800424a:	45b0      	cmp	r8, r6
 800424c:	daeb      	bge.n	8004226 <__kernel_rem_pio2+0x47a>
 800424e:	ab48      	add	r3, sp, #288	; 0x120
 8004250:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004254:	e9c3 ab00 	strd	sl, fp, [r3]
 8004258:	3f01      	subs	r7, #1
 800425a:	f108 0801 	add.w	r8, r8, #1
 800425e:	e709      	b.n	8004074 <__kernel_rem_pio2+0x2c8>
 8004260:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004262:	2b02      	cmp	r3, #2
 8004264:	dc09      	bgt.n	800427a <__kernel_rem_pio2+0x4ce>
 8004266:	2b00      	cmp	r3, #0
 8004268:	dc34      	bgt.n	80042d4 <__kernel_rem_pio2+0x528>
 800426a:	d05e      	beq.n	800432a <__kernel_rem_pio2+0x57e>
 800426c:	9b07      	ldr	r3, [sp, #28]
 800426e:	f003 0007 	and.w	r0, r3, #7
 8004272:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800427a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800427c:	2b03      	cmp	r3, #3
 800427e:	d1f5      	bne.n	800426c <__kernel_rem_pio2+0x4c0>
 8004280:	9a06      	ldr	r2, [sp, #24]
 8004282:	ab48      	add	r3, sp, #288	; 0x120
 8004284:	441a      	add	r2, r3
 8004286:	4615      	mov	r5, r2
 8004288:	4692      	mov	sl, r2
 800428a:	46a3      	mov	fp, r4
 800428c:	f1bb 0f00 	cmp.w	fp, #0
 8004290:	dc7a      	bgt.n	8004388 <__kernel_rem_pio2+0x5dc>
 8004292:	46aa      	mov	sl, r5
 8004294:	46a3      	mov	fp, r4
 8004296:	f1bb 0f01 	cmp.w	fp, #1
 800429a:	f300 8094 	bgt.w	80043c6 <__kernel_rem_pio2+0x61a>
 800429e:	2700      	movs	r7, #0
 80042a0:	463e      	mov	r6, r7
 80042a2:	2c01      	cmp	r4, #1
 80042a4:	f300 80ae 	bgt.w	8004404 <__kernel_rem_pio2+0x658>
 80042a8:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80042ac:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80042b0:	9b02      	ldr	r3, [sp, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f040 80b0 	bne.w	8004418 <__kernel_rem_pio2+0x66c>
 80042b8:	4603      	mov	r3, r0
 80042ba:	462a      	mov	r2, r5
 80042bc:	9801      	ldr	r0, [sp, #4]
 80042be:	e9c0 2300 	strd	r2, r3, [r0]
 80042c2:	4622      	mov	r2, r4
 80042c4:	460b      	mov	r3, r1
 80042c6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80042ca:	463a      	mov	r2, r7
 80042cc:	4633      	mov	r3, r6
 80042ce:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80042d2:	e7cb      	b.n	800426c <__kernel_rem_pio2+0x4c0>
 80042d4:	2000      	movs	r0, #0
 80042d6:	9a06      	ldr	r2, [sp, #24]
 80042d8:	ab48      	add	r3, sp, #288	; 0x120
 80042da:	441a      	add	r2, r3
 80042dc:	4615      	mov	r5, r2
 80042de:	46a0      	mov	r8, r4
 80042e0:	4601      	mov	r1, r0
 80042e2:	f1b8 0f00 	cmp.w	r8, #0
 80042e6:	da3c      	bge.n	8004362 <__kernel_rem_pio2+0x5b6>
 80042e8:	9b02      	ldr	r3, [sp, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d040      	beq.n	8004370 <__kernel_rem_pio2+0x5c4>
 80042ee:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80042f2:	4602      	mov	r2, r0
 80042f4:	462b      	mov	r3, r5
 80042f6:	9d01      	ldr	r5, [sp, #4]
 80042f8:	2601      	movs	r6, #1
 80042fa:	e9c5 2300 	strd	r2, r3, [r5]
 80042fe:	460b      	mov	r3, r1
 8004300:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004304:	f7fb ff64 	bl	80001d0 <__aeabi_dsub>
 8004308:	4684      	mov	ip, r0
 800430a:	460f      	mov	r7, r1
 800430c:	ad48      	add	r5, sp, #288	; 0x120
 800430e:	42b4      	cmp	r4, r6
 8004310:	f105 0508 	add.w	r5, r5, #8
 8004314:	da2e      	bge.n	8004374 <__kernel_rem_pio2+0x5c8>
 8004316:	9b02      	ldr	r3, [sp, #8]
 8004318:	b10b      	cbz	r3, 800431e <__kernel_rem_pio2+0x572>
 800431a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800431e:	4662      	mov	r2, ip
 8004320:	463b      	mov	r3, r7
 8004322:	9901      	ldr	r1, [sp, #4]
 8004324:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004328:	e7a0      	b.n	800426c <__kernel_rem_pio2+0x4c0>
 800432a:	9a06      	ldr	r2, [sp, #24]
 800432c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800432e:	ab48      	add	r3, sp, #288	; 0x120
 8004330:	441a      	add	r2, r3
 8004332:	4615      	mov	r5, r2
 8004334:	4637      	mov	r7, r6
 8004336:	2c00      	cmp	r4, #0
 8004338:	da09      	bge.n	800434e <__kernel_rem_pio2+0x5a2>
 800433a:	9b02      	ldr	r3, [sp, #8]
 800433c:	b10b      	cbz	r3, 8004342 <__kernel_rem_pio2+0x596>
 800433e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004342:	4632      	mov	r2, r6
 8004344:	463b      	mov	r3, r7
 8004346:	9901      	ldr	r1, [sp, #4]
 8004348:	e9c1 2300 	strd	r2, r3, [r1]
 800434c:	e78e      	b.n	800426c <__kernel_rem_pio2+0x4c0>
 800434e:	4630      	mov	r0, r6
 8004350:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004354:	4639      	mov	r1, r7
 8004356:	f7fb ff3d 	bl	80001d4 <__adddf3>
 800435a:	3c01      	subs	r4, #1
 800435c:	4606      	mov	r6, r0
 800435e:	460f      	mov	r7, r1
 8004360:	e7e9      	b.n	8004336 <__kernel_rem_pio2+0x58a>
 8004362:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004366:	f7fb ff35 	bl	80001d4 <__adddf3>
 800436a:	f108 38ff 	add.w	r8, r8, #4294967295
 800436e:	e7b8      	b.n	80042e2 <__kernel_rem_pio2+0x536>
 8004370:	460d      	mov	r5, r1
 8004372:	e7be      	b.n	80042f2 <__kernel_rem_pio2+0x546>
 8004374:	4660      	mov	r0, ip
 8004376:	e9d5 2300 	ldrd	r2, r3, [r5]
 800437a:	4639      	mov	r1, r7
 800437c:	f7fb ff2a 	bl	80001d4 <__adddf3>
 8004380:	3601      	adds	r6, #1
 8004382:	4684      	mov	ip, r0
 8004384:	460f      	mov	r7, r1
 8004386:	e7c2      	b.n	800430e <__kernel_rem_pio2+0x562>
 8004388:	e9da 6700 	ldrd	r6, r7, [sl]
 800438c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8004390:	4632      	mov	r2, r6
 8004392:	463b      	mov	r3, r7
 8004394:	4640      	mov	r0, r8
 8004396:	4649      	mov	r1, r9
 8004398:	f7fb ff1c 	bl	80001d4 <__adddf3>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043a4:	4640      	mov	r0, r8
 80043a6:	4649      	mov	r1, r9
 80043a8:	f7fb ff12 	bl	80001d0 <__aeabi_dsub>
 80043ac:	4632      	mov	r2, r6
 80043ae:	463b      	mov	r3, r7
 80043b0:	f7fb ff10 	bl	80001d4 <__adddf3>
 80043b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043b8:	e86a 0102 	strd	r0, r1, [sl], #-8
 80043bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80043c0:	e9ca 2300 	strd	r2, r3, [sl]
 80043c4:	e762      	b.n	800428c <__kernel_rem_pio2+0x4e0>
 80043c6:	e9da 8900 	ldrd	r8, r9, [sl]
 80043ca:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80043ce:	4642      	mov	r2, r8
 80043d0:	464b      	mov	r3, r9
 80043d2:	4630      	mov	r0, r6
 80043d4:	4639      	mov	r1, r7
 80043d6:	f7fb fefd 	bl	80001d4 <__adddf3>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043e2:	4630      	mov	r0, r6
 80043e4:	4639      	mov	r1, r7
 80043e6:	f7fb fef3 	bl	80001d0 <__aeabi_dsub>
 80043ea:	4642      	mov	r2, r8
 80043ec:	464b      	mov	r3, r9
 80043ee:	f7fb fef1 	bl	80001d4 <__adddf3>
 80043f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043f6:	e86a 0102 	strd	r0, r1, [sl], #-8
 80043fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80043fe:	e9ca 2300 	strd	r2, r3, [sl]
 8004402:	e748      	b.n	8004296 <__kernel_rem_pio2+0x4ea>
 8004404:	4638      	mov	r0, r7
 8004406:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800440a:	4631      	mov	r1, r6
 800440c:	f7fb fee2 	bl	80001d4 <__adddf3>
 8004410:	3c01      	subs	r4, #1
 8004412:	4607      	mov	r7, r0
 8004414:	460e      	mov	r6, r1
 8004416:	e744      	b.n	80042a2 <__kernel_rem_pio2+0x4f6>
 8004418:	9b01      	ldr	r3, [sp, #4]
 800441a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800441e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004422:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8004426:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800442a:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800442e:	601d      	str	r5, [r3, #0]
 8004430:	615e      	str	r6, [r3, #20]
 8004432:	e71b      	b.n	800426c <__kernel_rem_pio2+0x4c0>
 8004434:	41700000 	.word	0x41700000
 8004438:	3e700000 	.word	0x3e700000
 800443c:	00000000 	.word	0x00000000

08004440 <__kernel_sin>:
 8004440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004444:	b086      	sub	sp, #24
 8004446:	e9cd 2300 	strd	r2, r3, [sp]
 800444a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800444e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004452:	4682      	mov	sl, r0
 8004454:	460c      	mov	r4, r1
 8004456:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004458:	da03      	bge.n	8004462 <__kernel_sin+0x22>
 800445a:	f7fc fb0b 	bl	8000a74 <__aeabi_d2iz>
 800445e:	2800      	cmp	r0, #0
 8004460:	d050      	beq.n	8004504 <__kernel_sin+0xc4>
 8004462:	4652      	mov	r2, sl
 8004464:	4623      	mov	r3, r4
 8004466:	4650      	mov	r0, sl
 8004468:	4621      	mov	r1, r4
 800446a:	f7fc f869 	bl	8000540 <__aeabi_dmul>
 800446e:	4606      	mov	r6, r0
 8004470:	460f      	mov	r7, r1
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4650      	mov	r0, sl
 8004478:	4621      	mov	r1, r4
 800447a:	f7fc f861 	bl	8000540 <__aeabi_dmul>
 800447e:	a33e      	add	r3, pc, #248	; (adr r3, 8004578 <__kernel_sin+0x138>)
 8004480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004484:	4680      	mov	r8, r0
 8004486:	4689      	mov	r9, r1
 8004488:	4630      	mov	r0, r6
 800448a:	4639      	mov	r1, r7
 800448c:	f7fc f858 	bl	8000540 <__aeabi_dmul>
 8004490:	a33b      	add	r3, pc, #236	; (adr r3, 8004580 <__kernel_sin+0x140>)
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	f7fb fe9b 	bl	80001d0 <__aeabi_dsub>
 800449a:	4632      	mov	r2, r6
 800449c:	463b      	mov	r3, r7
 800449e:	f7fc f84f 	bl	8000540 <__aeabi_dmul>
 80044a2:	a339      	add	r3, pc, #228	; (adr r3, 8004588 <__kernel_sin+0x148>)
 80044a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a8:	f7fb fe94 	bl	80001d4 <__adddf3>
 80044ac:	4632      	mov	r2, r6
 80044ae:	463b      	mov	r3, r7
 80044b0:	f7fc f846 	bl	8000540 <__aeabi_dmul>
 80044b4:	a336      	add	r3, pc, #216	; (adr r3, 8004590 <__kernel_sin+0x150>)
 80044b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ba:	f7fb fe89 	bl	80001d0 <__aeabi_dsub>
 80044be:	4632      	mov	r2, r6
 80044c0:	463b      	mov	r3, r7
 80044c2:	f7fc f83d 	bl	8000540 <__aeabi_dmul>
 80044c6:	a334      	add	r3, pc, #208	; (adr r3, 8004598 <__kernel_sin+0x158>)
 80044c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044cc:	f7fb fe82 	bl	80001d4 <__adddf3>
 80044d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044d4:	b9dd      	cbnz	r5, 800450e <__kernel_sin+0xce>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4630      	mov	r0, r6
 80044dc:	4639      	mov	r1, r7
 80044de:	f7fc f82f 	bl	8000540 <__aeabi_dmul>
 80044e2:	a32f      	add	r3, pc, #188	; (adr r3, 80045a0 <__kernel_sin+0x160>)
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	f7fb fe72 	bl	80001d0 <__aeabi_dsub>
 80044ec:	4642      	mov	r2, r8
 80044ee:	464b      	mov	r3, r9
 80044f0:	f7fc f826 	bl	8000540 <__aeabi_dmul>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4650      	mov	r0, sl
 80044fa:	4621      	mov	r1, r4
 80044fc:	f7fb fe6a 	bl	80001d4 <__adddf3>
 8004500:	4682      	mov	sl, r0
 8004502:	460c      	mov	r4, r1
 8004504:	4650      	mov	r0, sl
 8004506:	4621      	mov	r1, r4
 8004508:	b006      	add	sp, #24
 800450a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800450e:	2200      	movs	r2, #0
 8004510:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004514:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <__kernel_sin+0x168>)
 8004516:	f7fc f813 	bl	8000540 <__aeabi_dmul>
 800451a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800451e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004522:	4640      	mov	r0, r8
 8004524:	4649      	mov	r1, r9
 8004526:	f7fc f80b 	bl	8000540 <__aeabi_dmul>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004532:	f7fb fe4d 	bl	80001d0 <__aeabi_dsub>
 8004536:	4632      	mov	r2, r6
 8004538:	463b      	mov	r3, r7
 800453a:	f7fc f801 	bl	8000540 <__aeabi_dmul>
 800453e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004542:	f7fb fe45 	bl	80001d0 <__aeabi_dsub>
 8004546:	a316      	add	r3, pc, #88	; (adr r3, 80045a0 <__kernel_sin+0x160>)
 8004548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454c:	4606      	mov	r6, r0
 800454e:	460f      	mov	r7, r1
 8004550:	4640      	mov	r0, r8
 8004552:	4649      	mov	r1, r9
 8004554:	f7fb fff4 	bl	8000540 <__aeabi_dmul>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4630      	mov	r0, r6
 800455e:	4639      	mov	r1, r7
 8004560:	f7fb fe38 	bl	80001d4 <__adddf3>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4650      	mov	r0, sl
 800456a:	4621      	mov	r1, r4
 800456c:	f7fb fe30 	bl	80001d0 <__aeabi_dsub>
 8004570:	e7c6      	b.n	8004500 <__kernel_sin+0xc0>
 8004572:	bf00      	nop
 8004574:	f3af 8000 	nop.w
 8004578:	5acfd57c 	.word	0x5acfd57c
 800457c:	3de5d93a 	.word	0x3de5d93a
 8004580:	8a2b9ceb 	.word	0x8a2b9ceb
 8004584:	3e5ae5e6 	.word	0x3e5ae5e6
 8004588:	57b1fe7d 	.word	0x57b1fe7d
 800458c:	3ec71de3 	.word	0x3ec71de3
 8004590:	19c161d5 	.word	0x19c161d5
 8004594:	3f2a01a0 	.word	0x3f2a01a0
 8004598:	1110f8a6 	.word	0x1110f8a6
 800459c:	3f811111 	.word	0x3f811111
 80045a0:	55555549 	.word	0x55555549
 80045a4:	3fc55555 	.word	0x3fc55555
 80045a8:	3fe00000 	.word	0x3fe00000

080045ac <fabs>:
 80045ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80045b0:	4770      	bx	lr
 80045b2:	0000      	movs	r0, r0
 80045b4:	0000      	movs	r0, r0
	...

080045b8 <floor>:
 80045b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045bc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80045c0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80045c4:	2e13      	cmp	r6, #19
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4607      	mov	r7, r0
 80045cc:	460c      	mov	r4, r1
 80045ce:	4605      	mov	r5, r0
 80045d0:	dc34      	bgt.n	800463c <floor+0x84>
 80045d2:	2e00      	cmp	r6, #0
 80045d4:	da15      	bge.n	8004602 <floor+0x4a>
 80045d6:	a334      	add	r3, pc, #208	; (adr r3, 80046a8 <floor+0xf0>)
 80045d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045dc:	f7fb fdfa 	bl	80001d4 <__adddf3>
 80045e0:	2200      	movs	r2, #0
 80045e2:	2300      	movs	r3, #0
 80045e4:	f7fc fa3c 	bl	8000a60 <__aeabi_dcmpgt>
 80045e8:	b140      	cbz	r0, 80045fc <floor+0x44>
 80045ea:	2c00      	cmp	r4, #0
 80045ec:	da59      	bge.n	80046a2 <floor+0xea>
 80045ee:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80045f2:	ea57 0503 	orrs.w	r5, r7, r3
 80045f6:	d001      	beq.n	80045fc <floor+0x44>
 80045f8:	2500      	movs	r5, #0
 80045fa:	4c2d      	ldr	r4, [pc, #180]	; (80046b0 <floor+0xf8>)
 80045fc:	4623      	mov	r3, r4
 80045fe:	462f      	mov	r7, r5
 8004600:	e025      	b.n	800464e <floor+0x96>
 8004602:	4a2c      	ldr	r2, [pc, #176]	; (80046b4 <floor+0xfc>)
 8004604:	fa42 f806 	asr.w	r8, r2, r6
 8004608:	ea01 0208 	and.w	r2, r1, r8
 800460c:	4302      	orrs	r2, r0
 800460e:	d01e      	beq.n	800464e <floor+0x96>
 8004610:	a325      	add	r3, pc, #148	; (adr r3, 80046a8 <floor+0xf0>)
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	f7fb fddd 	bl	80001d4 <__adddf3>
 800461a:	2200      	movs	r2, #0
 800461c:	2300      	movs	r3, #0
 800461e:	f7fc fa1f 	bl	8000a60 <__aeabi_dcmpgt>
 8004622:	2800      	cmp	r0, #0
 8004624:	d0ea      	beq.n	80045fc <floor+0x44>
 8004626:	2c00      	cmp	r4, #0
 8004628:	bfbe      	ittt	lt
 800462a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800462e:	fa43 f606 	asrlt.w	r6, r3, r6
 8004632:	19a4      	addlt	r4, r4, r6
 8004634:	2500      	movs	r5, #0
 8004636:	ea24 0408 	bic.w	r4, r4, r8
 800463a:	e7df      	b.n	80045fc <floor+0x44>
 800463c:	2e33      	cmp	r6, #51	; 0x33
 800463e:	dd0a      	ble.n	8004656 <floor+0x9e>
 8004640:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004644:	d103      	bne.n	800464e <floor+0x96>
 8004646:	f7fb fdc5 	bl	80001d4 <__adddf3>
 800464a:	4607      	mov	r7, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4638      	mov	r0, r7
 8004650:	4619      	mov	r1, r3
 8004652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004656:	f04f 32ff 	mov.w	r2, #4294967295
 800465a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800465e:	fa22 f808 	lsr.w	r8, r2, r8
 8004662:	ea18 0f00 	tst.w	r8, r0
 8004666:	d0f2      	beq.n	800464e <floor+0x96>
 8004668:	a30f      	add	r3, pc, #60	; (adr r3, 80046a8 <floor+0xf0>)
 800466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466e:	f7fb fdb1 	bl	80001d4 <__adddf3>
 8004672:	2200      	movs	r2, #0
 8004674:	2300      	movs	r3, #0
 8004676:	f7fc f9f3 	bl	8000a60 <__aeabi_dcmpgt>
 800467a:	2800      	cmp	r0, #0
 800467c:	d0be      	beq.n	80045fc <floor+0x44>
 800467e:	2c00      	cmp	r4, #0
 8004680:	da02      	bge.n	8004688 <floor+0xd0>
 8004682:	2e14      	cmp	r6, #20
 8004684:	d103      	bne.n	800468e <floor+0xd6>
 8004686:	3401      	adds	r4, #1
 8004688:	ea25 0508 	bic.w	r5, r5, r8
 800468c:	e7b6      	b.n	80045fc <floor+0x44>
 800468e:	2301      	movs	r3, #1
 8004690:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004694:	fa03 f606 	lsl.w	r6, r3, r6
 8004698:	4435      	add	r5, r6
 800469a:	42bd      	cmp	r5, r7
 800469c:	bf38      	it	cc
 800469e:	18e4      	addcc	r4, r4, r3
 80046a0:	e7f2      	b.n	8004688 <floor+0xd0>
 80046a2:	2500      	movs	r5, #0
 80046a4:	462c      	mov	r4, r5
 80046a6:	e7a9      	b.n	80045fc <floor+0x44>
 80046a8:	8800759c 	.word	0x8800759c
 80046ac:	7e37e43c 	.word	0x7e37e43c
 80046b0:	bff00000 	.word	0xbff00000
 80046b4:	000fffff 	.word	0x000fffff

080046b8 <scalbn>:
 80046b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ba:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80046be:	4604      	mov	r4, r0
 80046c0:	460d      	mov	r5, r1
 80046c2:	4617      	mov	r7, r2
 80046c4:	460b      	mov	r3, r1
 80046c6:	b996      	cbnz	r6, 80046ee <scalbn+0x36>
 80046c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80046cc:	4303      	orrs	r3, r0
 80046ce:	d039      	beq.n	8004744 <scalbn+0x8c>
 80046d0:	4b35      	ldr	r3, [pc, #212]	; (80047a8 <scalbn+0xf0>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	f7fb ff34 	bl	8000540 <__aeabi_dmul>
 80046d8:	4b34      	ldr	r3, [pc, #208]	; (80047ac <scalbn+0xf4>)
 80046da:	4604      	mov	r4, r0
 80046dc:	429f      	cmp	r7, r3
 80046de:	460d      	mov	r5, r1
 80046e0:	da0f      	bge.n	8004702 <scalbn+0x4a>
 80046e2:	a32d      	add	r3, pc, #180	; (adr r3, 8004798 <scalbn+0xe0>)
 80046e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e8:	f7fb ff2a 	bl	8000540 <__aeabi_dmul>
 80046ec:	e006      	b.n	80046fc <scalbn+0x44>
 80046ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80046f2:	4296      	cmp	r6, r2
 80046f4:	d10a      	bne.n	800470c <scalbn+0x54>
 80046f6:	4602      	mov	r2, r0
 80046f8:	f7fb fd6c 	bl	80001d4 <__adddf3>
 80046fc:	4604      	mov	r4, r0
 80046fe:	460d      	mov	r5, r1
 8004700:	e020      	b.n	8004744 <scalbn+0x8c>
 8004702:	460b      	mov	r3, r1
 8004704:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004708:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800470c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004710:	19b9      	adds	r1, r7, r6
 8004712:	4291      	cmp	r1, r2
 8004714:	dd0e      	ble.n	8004734 <scalbn+0x7c>
 8004716:	a322      	add	r3, pc, #136	; (adr r3, 80047a0 <scalbn+0xe8>)
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004720:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8004724:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8004728:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800472c:	4820      	ldr	r0, [pc, #128]	; (80047b0 <scalbn+0xf8>)
 800472e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8004732:	e7d9      	b.n	80046e8 <scalbn+0x30>
 8004734:	2900      	cmp	r1, #0
 8004736:	dd08      	ble.n	800474a <scalbn+0x92>
 8004738:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800473c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004740:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004744:	4620      	mov	r0, r4
 8004746:	4629      	mov	r1, r5
 8004748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800474a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800474e:	da16      	bge.n	800477e <scalbn+0xc6>
 8004750:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004754:	429f      	cmp	r7, r3
 8004756:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800475a:	dd08      	ble.n	800476e <scalbn+0xb6>
 800475c:	4c15      	ldr	r4, [pc, #84]	; (80047b4 <scalbn+0xfc>)
 800475e:	4814      	ldr	r0, [pc, #80]	; (80047b0 <scalbn+0xf8>)
 8004760:	f363 74df 	bfi	r4, r3, #31, #1
 8004764:	a30e      	add	r3, pc, #56	; (adr r3, 80047a0 <scalbn+0xe8>)
 8004766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476a:	4621      	mov	r1, r4
 800476c:	e7bc      	b.n	80046e8 <scalbn+0x30>
 800476e:	4c12      	ldr	r4, [pc, #72]	; (80047b8 <scalbn+0x100>)
 8004770:	4812      	ldr	r0, [pc, #72]	; (80047bc <scalbn+0x104>)
 8004772:	f363 74df 	bfi	r4, r3, #31, #1
 8004776:	a308      	add	r3, pc, #32	; (adr r3, 8004798 <scalbn+0xe0>)
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	e7f5      	b.n	800476a <scalbn+0xb2>
 800477e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004782:	3136      	adds	r1, #54	; 0x36
 8004784:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004788:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800478c:	4620      	mov	r0, r4
 800478e:	4629      	mov	r1, r5
 8004790:	2200      	movs	r2, #0
 8004792:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <scalbn+0x108>)
 8004794:	e7a8      	b.n	80046e8 <scalbn+0x30>
 8004796:	bf00      	nop
 8004798:	c2f8f359 	.word	0xc2f8f359
 800479c:	01a56e1f 	.word	0x01a56e1f
 80047a0:	8800759c 	.word	0x8800759c
 80047a4:	7e37e43c 	.word	0x7e37e43c
 80047a8:	43500000 	.word	0x43500000
 80047ac:	ffff3cb0 	.word	0xffff3cb0
 80047b0:	8800759c 	.word	0x8800759c
 80047b4:	7e37e43c 	.word	0x7e37e43c
 80047b8:	01a56e1f 	.word	0x01a56e1f
 80047bc:	c2f8f359 	.word	0xc2f8f359
 80047c0:	3c900000 	.word	0x3c900000

080047c4 <_init>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	bf00      	nop
 80047c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ca:	bc08      	pop	{r3}
 80047cc:	469e      	mov	lr, r3
 80047ce:	4770      	bx	lr

080047d0 <_fini>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	bf00      	nop
 80047d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d6:	bc08      	pop	{r3}
 80047d8:	469e      	mov	lr, r3
 80047da:	4770      	bx	lr
