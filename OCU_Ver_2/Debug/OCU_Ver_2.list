
OCU_Ver_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060d4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800636c  0800636c  0001636c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080063a4  080063a4  000163a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080063ac  080063ac  000163ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080063b0  080063b0  000163b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080063b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  080063c4  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08006424  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  240000d0  08006484  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240006e0  08006484  000206e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024a2c  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034aa  00000000  00000000  00044b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00047fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  000490b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003527  00000000  00000000  0004a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e42  00000000  00000000  0004d5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00163bad  00000000  00000000  00063419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c6fc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004818  00000000  00000000  001c701c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006354 	.word	0x08006354

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006354 	.word	0x08006354

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fdbe 	bl	8001154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f80c 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f9aa 	bl	8000934 <MX_GPIO_Init>
  MX_ETH_Init();
 80005e0:	f000 f888 	bl	80006f4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005e4:	f000 f928 	bl	8000838 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e8:	f000 f972 	bl	80008d0 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80005ec:	f000 f8ce 	bl	800078c <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0x20>
	...

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b09c      	sub	sp, #112	; 0x70
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fe:	224c      	movs	r2, #76	; 0x4c
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f005 fe9e 	bl	8006344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2220      	movs	r2, #32
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f005 fe98 	bl	8006344 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000614:	2002      	movs	r0, #2
 8000616:	f001 fe7f 	bl	8002318 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800061a:	2300      	movs	r3, #0
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	4b33      	ldr	r3, [pc, #204]	; (80006ec <SystemClock_Config+0xf8>)
 8000620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000622:	4a32      	ldr	r2, [pc, #200]	; (80006ec <SystemClock_Config+0xf8>)
 8000624:	f023 0301 	bic.w	r3, r3, #1
 8000628:	62d3      	str	r3, [r2, #44]	; 0x2c
 800062a:	4b30      	ldr	r3, [pc, #192]	; (80006ec <SystemClock_Config+0xf8>)
 800062c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <SystemClock_Config+0xfc>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800063c:	4a2c      	ldr	r2, [pc, #176]	; (80006f0 <SystemClock_Config+0xfc>)
 800063e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <SystemClock_Config+0xfc>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000650:	bf00      	nop
 8000652:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <SystemClock_Config+0xfc>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800065a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800065e:	d1f8      	bne.n	8000652 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000660:	2303      	movs	r3, #3
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000664:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000668:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800066a:	2301      	movs	r3, #1
 800066c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066e:	2340      	movs	r3, #64	; 0x40
 8000670:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	2302      	movs	r3, #2
 8000678:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800067a:	2301      	movs	r3, #1
 800067c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800067e:	2318      	movs	r3, #24
 8000680:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000682:	2302      	movs	r3, #2
 8000684:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000686:	2304      	movs	r3, #4
 8000688:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800068a:	2302      	movs	r3, #2
 800068c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800068e:	230c      	movs	r3, #12
 8000690:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000692:	2300      	movs	r3, #0
 8000694:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fe84 	bl	80023ac <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006aa:	f000 fa1f 	bl	8000aec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	233f      	movs	r3, #63	; 0x3f
 80006b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2101      	movs	r1, #1
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fa96 	bl	8002c04 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80006de:	f000 fa05 	bl	8000aec <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3770      	adds	r7, #112	; 0x70
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	58000400 	.word	0x58000400
 80006f0:	58024800 	.word	0x58024800

080006f4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_ETH_Init+0x80>)
 80006fa:	4a1f      	ldr	r2, [pc, #124]	; (8000778 <MX_ETH_Init+0x84>)
 80006fc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006fe:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_ETH_Init+0x88>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_ETH_Init+0x88>)
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_ETH_Init+0x88>)
 800070c:	22e1      	movs	r2, #225	; 0xe1
 800070e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_ETH_Init+0x88>)
 8000712:	2200      	movs	r2, #0
 8000714:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_ETH_Init+0x88>)
 8000718:	2200      	movs	r2, #0
 800071a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800071c:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_ETH_Init+0x88>)
 800071e:	2200      	movs	r2, #0
 8000720:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_ETH_Init+0x80>)
 8000724:	4a15      	ldr	r2, [pc, #84]	; (800077c <MX_ETH_Init+0x88>)
 8000726:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_ETH_Init+0x80>)
 800072a:	2201      	movs	r2, #1
 800072c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_ETH_Init+0x80>)
 8000730:	4a13      	ldr	r2, [pc, #76]	; (8000780 <MX_ETH_Init+0x8c>)
 8000732:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_ETH_Init+0x80>)
 8000736:	4a13      	ldr	r2, [pc, #76]	; (8000784 <MX_ETH_Init+0x90>)
 8000738:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_ETH_Init+0x80>)
 800073c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000740:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000742:	480c      	ldr	r0, [pc, #48]	; (8000774 <MX_ETH_Init+0x80>)
 8000744:	f000 fec0 	bl	80014c8 <HAL_ETH_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800074e:	f000 f9cd 	bl	8000aec <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000752:	2234      	movs	r2, #52	; 0x34
 8000754:	2100      	movs	r1, #0
 8000756:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_ETH_Init+0x94>)
 8000758:	f005 fdf4 	bl	8006344 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <MX_ETH_Init+0x94>)
 800075e:	2221      	movs	r2, #33	; 0x21
 8000760:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_ETH_Init+0x94>)
 8000764:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000768:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <MX_ETH_Init+0x94>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	24000620 	.word	0x24000620
 8000778:	40028000 	.word	0x40028000
 800077c:	240000ec 	.word	0x240000ec
 8000780:	24000070 	.word	0x24000070
 8000784:	24000010 	.word	0x24000010
 8000788:	240006a8 	.word	0x240006a8

0800078c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000790:	4b27      	ldr	r3, [pc, #156]	; (8000830 <MX_SPI1_Init+0xa4>)
 8000792:	4a28      	ldr	r2, [pc, #160]	; (8000834 <MX_SPI1_Init+0xa8>)
 8000794:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_SPI1_Init+0xa4>)
 8000798:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800079c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800079e:	4b24      	ldr	r3, [pc, #144]	; (8000830 <MX_SPI1_Init+0xa4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <MX_SPI1_Init+0xa4>)
 80007a6:	2207      	movs	r2, #7
 80007a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <MX_SPI1_Init+0xa4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_SPI1_Init+0xa4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007b6:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <MX_SPI1_Init+0xa4>)
 80007b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80007bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_SPI1_Init+0xa4>)
 80007c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80007c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_SPI1_Init+0xa4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_SPI1_Init+0xa4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_SPI1_Init+0xa4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_SPI1_Init+0xa4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_SPI1_Init+0xa4>)
 80007e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007e4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_SPI1_Init+0xa4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_SPI1_Init+0xa4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_SPI1_Init+0xa4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007f8:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <MX_SPI1_Init+0xa4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_SPI1_Init+0xa4>)
 8000800:	2200      	movs	r2, #0
 8000802:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_SPI1_Init+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_SPI1_Init+0xa4>)
 800080c:	2200      	movs	r2, #0
 800080e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_SPI1_Init+0xa4>)
 8000812:	2200      	movs	r2, #0
 8000814:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_SPI1_Init+0xa4>)
 8000818:	2200      	movs	r2, #0
 800081a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_SPI1_Init+0xa4>)
 800081e:	f004 f8df 	bl	80049e0 <HAL_SPI_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000828:	f000 f960 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	24000598 	.word	0x24000598
 8000834:	40013000 	.word	0x40013000

08000838 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800083c:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <MX_USART3_UART_Init+0x90>)
 800083e:	4a23      	ldr	r2, [pc, #140]	; (80008cc <MX_USART3_UART_Init+0x94>)
 8000840:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000842:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <MX_USART3_UART_Init+0x90>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_USART3_UART_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_USART3_UART_Init+0x90>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <MX_USART3_UART_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_USART3_UART_Init+0x90>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_USART3_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_USART3_UART_Init+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_USART3_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_USART3_UART_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_USART3_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000880:	4811      	ldr	r0, [pc, #68]	; (80008c8 <MX_USART3_UART_Init+0x90>)
 8000882:	f004 f9ce 	bl	8004c22 <HAL_UART_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800088c:	f000 f92e 	bl	8000aec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000890:	2100      	movs	r1, #0
 8000892:	480d      	ldr	r0, [pc, #52]	; (80008c8 <MX_USART3_UART_Init+0x90>)
 8000894:	f005 f964 	bl	8005b60 <HAL_UARTEx_SetTxFifoThreshold>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800089e:	f000 f925 	bl	8000aec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4808      	ldr	r0, [pc, #32]	; (80008c8 <MX_USART3_UART_Init+0x90>)
 80008a6:	f005 f999 	bl	8005bdc <HAL_UARTEx_SetRxFifoThreshold>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008b0:	f000 f91c 	bl	8000aec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_USART3_UART_Init+0x90>)
 80008b6:	f005 f91a 	bl	8005aee <HAL_UARTEx_DisableFifoMode>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008c0:	f000 f914 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	240000f4 	.word	0x240000f4
 80008cc:	40004800 	.word	0x40004800

080008d0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008d6:	4a16      	ldr	r2, [pc, #88]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80008d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008dc:	2209      	movs	r2, #9
 80008de:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e2:	2202      	movs	r2, #2
 80008e4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ee:	2202      	movs	r2, #2
 80008f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000900:	2200      	movs	r2, #0
 8000902:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000906:	2201      	movs	r2, #1
 8000908:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800090c:	2201      	movs	r2, #1
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000912:	2200      	movs	r2, #0
 8000914:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000918:	f001 fbb5 	bl	8002086 <HAL_PCD_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000922:	f000 f8e3 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	24000184 	.word	0x24000184
 8000930:	40080000 	.word	0x40080000

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	; 0x30
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	4b62      	ldr	r3, [pc, #392]	; (8000ad4 <MX_GPIO_Init+0x1a0>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000950:	4a60      	ldr	r2, [pc, #384]	; (8000ad4 <MX_GPIO_Init+0x1a0>)
 8000952:	f043 0304 	orr.w	r3, r3, #4
 8000956:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800095a:	4b5e      	ldr	r3, [pc, #376]	; (8000ad4 <MX_GPIO_Init+0x1a0>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000960:	f003 0304 	and.w	r3, r3, #4
 8000964:	61bb      	str	r3, [r7, #24]
 8000966:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000968:	4b5a      	ldr	r3, [pc, #360]	; (8000ad4 <MX_GPIO_Init+0x1a0>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096e:	4a59      	ldr	r2, [pc, #356]	; (8000ad4 <MX_GPIO_Init+0x1a0>)
 8000970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000974:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000978:	4b56      	ldr	r3, [pc, #344]	; (8000ad4 <MX_GPIO_Init+0x1a0>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b53      	ldr	r3, [pc, #332]	; (8000ad4 <MX_GPIO_Init+0x1a0>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	4a51      	ldr	r2, [pc, #324]	; (8000ad4 <MX_GPIO_Init+0x1a0>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000996:	4b4f      	ldr	r3, [pc, #316]	; (8000ad4 <MX_GPIO_Init+0x1a0>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a4:	4b4b      	ldr	r3, [pc, #300]	; (8000ad4 <MX_GPIO_Init+0x1a0>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009aa:	4a4a      	ldr	r2, [pc, #296]	; (8000ad4 <MX_GPIO_Init+0x1a0>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b4:	4b47      	ldr	r3, [pc, #284]	; (8000ad4 <MX_GPIO_Init+0x1a0>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c2:	4b44      	ldr	r3, [pc, #272]	; (8000ad4 <MX_GPIO_Init+0x1a0>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	4a42      	ldr	r2, [pc, #264]	; (8000ad4 <MX_GPIO_Init+0x1a0>)
 80009ca:	f043 0308 	orr.w	r3, r3, #8
 80009ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d2:	4b40      	ldr	r3, [pc, #256]	; (8000ad4 <MX_GPIO_Init+0x1a0>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	f003 0308 	and.w	r3, r3, #8
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e0:	4b3c      	ldr	r3, [pc, #240]	; (8000ad4 <MX_GPIO_Init+0x1a0>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e6:	4a3b      	ldr	r2, [pc, #236]	; (8000ad4 <MX_GPIO_Init+0x1a0>)
 80009e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f0:	4b38      	ldr	r3, [pc, #224]	; (8000ad4 <MX_GPIO_Init+0x1a0>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009fe:	4b35      	ldr	r3, [pc, #212]	; (8000ad4 <MX_GPIO_Init+0x1a0>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	4a33      	ldr	r2, [pc, #204]	; (8000ad4 <MX_GPIO_Init+0x1a0>)
 8000a06:	f043 0310 	orr.w	r3, r3, #16
 8000a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0e:	4b31      	ldr	r3, [pc, #196]	; (8000ad4 <MX_GPIO_Init+0x1a0>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	f003 0310 	and.w	r3, r3, #16
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a22:	482d      	ldr	r0, [pc, #180]	; (8000ad8 <MX_GPIO_Init+0x1a4>)
 8000a24:	f001 fb16 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a2e:	482b      	ldr	r0, [pc, #172]	; (8000adc <MX_GPIO_Init+0x1a8>)
 8000a30:	f001 fb10 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2102      	movs	r1, #2
 8000a38:	4829      	ldr	r0, [pc, #164]	; (8000ae0 <MX_GPIO_Init+0x1ac>)
 8000a3a:	f001 fb0b 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4824      	ldr	r0, [pc, #144]	; (8000ae4 <MX_GPIO_Init+0x1b0>)
 8000a54:	f001 f94e 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a58:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4819      	ldr	r0, [pc, #100]	; (8000ad8 <MX_GPIO_Init+0x1a4>)
 8000a72:	f001 f93f 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4813      	ldr	r0, [pc, #76]	; (8000adc <MX_GPIO_Init+0x1a8>)
 8000a90:	f001 f930 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a98:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <MX_GPIO_Init+0x1b4>)
 8000aaa:	f001 f923 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <MX_GPIO_Init+0x1ac>)
 8000ac6:	f001 f915 	bl	8001cf4 <HAL_GPIO_Init>

}
 8000aca:	bf00      	nop
 8000acc:	3730      	adds	r7, #48	; 0x30
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	58024400 	.word	0x58024400
 8000ad8:	58020400 	.word	0x58020400
 8000adc:	58020c00 	.word	0x58020c00
 8000ae0:	58021000 	.word	0x58021000
 8000ae4:	58020800 	.word	0x58020800
 8000ae8:	58021800 	.word	0x58021800

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <Error_Handler+0x8>
	...

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_MspInit+0x30>)
 8000b00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b04:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <HAL_MspInit+0x30>)
 8000b06:	f043 0302 	orr.w	r3, r3, #2
 8000b0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_MspInit+0x30>)
 8000b10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b14:	f003 0302 	and.w	r3, r3, #2
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	58024400 	.word	0x58024400

08000b2c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08e      	sub	sp, #56	; 0x38
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a59      	ldr	r2, [pc, #356]	; (8000cb0 <HAL_ETH_MspInit+0x184>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	f040 80ab 	bne.w	8000ca6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b50:	4b58      	ldr	r3, [pc, #352]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000b52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b56:	4a57      	ldr	r2, [pc, #348]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b5c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b60:	4b54      	ldr	r3, [pc, #336]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000b62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b6a:	623b      	str	r3, [r7, #32]
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b6e:	4b51      	ldr	r3, [pc, #324]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000b70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b74:	4a4f      	ldr	r2, [pc, #316]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b7a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b7e:	4b4d      	ldr	r3, [pc, #308]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000b80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b88:	61fb      	str	r3, [r7, #28]
 8000b8a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b8c:	4b49      	ldr	r3, [pc, #292]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000b8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b92:	4a48      	ldr	r2, [pc, #288]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b9c:	4b45      	ldr	r3, [pc, #276]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000b9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba6:	61bb      	str	r3, [r7, #24]
 8000ba8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000baa:	4b42      	ldr	r3, [pc, #264]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	4a40      	ldr	r2, [pc, #256]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000bb2:	f043 0304 	orr.w	r3, r3, #4
 8000bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bba:	4b3e      	ldr	r3, [pc, #248]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b3a      	ldr	r3, [pc, #232]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bce:	4a39      	ldr	r2, [pc, #228]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd8:	4b36      	ldr	r3, [pc, #216]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	4b33      	ldr	r3, [pc, #204]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bec:	4a31      	ldr	r2, [pc, #196]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000bee:	f043 0302 	orr.w	r3, r3, #2
 8000bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf6:	4b2f      	ldr	r3, [pc, #188]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c04:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0a:	4a2a      	ldr	r2, [pc, #168]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c14:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <HAL_ETH_MspInit+0x188>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c22:	2332      	movs	r3, #50	; 0x32
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c32:	230b      	movs	r3, #11
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	481e      	ldr	r0, [pc, #120]	; (8000cb8 <HAL_ETH_MspInit+0x18c>)
 8000c3e:	f001 f859 	bl	8001cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c42:	2386      	movs	r3, #134	; 0x86
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c52:	230b      	movs	r3, #11
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4817      	ldr	r0, [pc, #92]	; (8000cbc <HAL_ETH_MspInit+0x190>)
 8000c5e:	f001 f849 	bl	8001cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c74:	230b      	movs	r3, #11
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4810      	ldr	r0, [pc, #64]	; (8000cc0 <HAL_ETH_MspInit+0x194>)
 8000c80:	f001 f838 	bl	8001cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c84:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c96:	230b      	movs	r3, #11
 8000c98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4808      	ldr	r0, [pc, #32]	; (8000cc4 <HAL_ETH_MspInit+0x198>)
 8000ca2:	f001 f827 	bl	8001cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3738      	adds	r7, #56	; 0x38
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40028000 	.word	0x40028000
 8000cb4:	58024400 	.word	0x58024400
 8000cb8:	58020800 	.word	0x58020800
 8000cbc:	58020000 	.word	0x58020000
 8000cc0:	58020400 	.word	0x58020400
 8000cc4:	58021800 	.word	0x58021800

08000cc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b0ba      	sub	sp, #232	; 0xe8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce0:	f107 0318 	add.w	r3, r7, #24
 8000ce4:	22bc      	movs	r2, #188	; 0xbc
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f005 fb2b 	bl	8006344 <memset>
  if(hspi->Instance==SPI1)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a36      	ldr	r2, [pc, #216]	; (8000dcc <HAL_SPI_MspInit+0x104>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d165      	bne.n	8000dc4 <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d02:	f107 0318 	add.w	r3, r7, #24
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 fb08 	bl	800331c <HAL_RCCEx_PeriphCLKConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000d12:	f7ff feeb 	bl	8000aec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d16:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <HAL_SPI_MspInit+0x108>)
 8000d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d1c:	4a2c      	ldr	r2, [pc, #176]	; (8000dd0 <HAL_SPI_MspInit+0x108>)
 8000d1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d22:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d26:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <HAL_SPI_MspInit+0x108>)
 8000d28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d34:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <HAL_SPI_MspInit+0x108>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3a:	4a25      	ldr	r2, [pc, #148]	; (8000dd0 <HAL_SPI_MspInit+0x108>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <HAL_SPI_MspInit+0x108>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d52:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <HAL_SPI_MspInit+0x108>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d58:	4a1d      	ldr	r2, [pc, #116]	; (8000dd0 <HAL_SPI_MspInit+0x108>)
 8000d5a:	f043 0308 	orr.w	r3, r3, #8
 8000d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_SPI_MspInit+0x108>)
 8000d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d68:	f003 0308 	and.w	r3, r3, #8
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d70:	2360      	movs	r3, #96	; 0x60
 8000d72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d88:	2305      	movs	r3, #5
 8000d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d92:	4619      	mov	r1, r3
 8000d94:	480f      	ldr	r0, [pc, #60]	; (8000dd4 <HAL_SPI_MspInit+0x10c>)
 8000d96:	f000 ffad 	bl	8001cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d9a:	2380      	movs	r3, #128	; 0x80
 8000d9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000db2:	2305      	movs	r3, #5
 8000db4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <HAL_SPI_MspInit+0x110>)
 8000dc0:	f000 ff98 	bl	8001cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dc4:	bf00      	nop
 8000dc6:	37e8      	adds	r7, #232	; 0xe8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40013000 	.word	0x40013000
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	58020000 	.word	0x58020000
 8000dd8:	58020c00 	.word	0x58020c00

08000ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b0b8      	sub	sp, #224	; 0xe0
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	22bc      	movs	r2, #188	; 0xbc
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f005 faa1 	bl	8006344 <memset>
  if(huart->Instance==USART3)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a25      	ldr	r2, [pc, #148]	; (8000e9c <HAL_UART_MspInit+0xc0>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d142      	bne.n	8000e92 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f002 fa7e 	bl	800331c <HAL_RCCEx_PeriphCLKConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e26:	f7ff fe61 	bl	8000aec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <HAL_UART_MspInit+0xc4>)
 8000e2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e30:	4a1b      	ldr	r2, [pc, #108]	; (8000ea0 <HAL_UART_MspInit+0xc4>)
 8000e32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e3a:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <HAL_UART_MspInit+0xc4>)
 8000e3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e48:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_UART_MspInit+0xc4>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4e:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <HAL_UART_MspInit+0xc4>)
 8000e50:	f043 0308 	orr.w	r3, r3, #8
 8000e54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_UART_MspInit+0xc4>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e80:	2307      	movs	r3, #7
 8000e82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e86:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <HAL_UART_MspInit+0xc8>)
 8000e8e:	f000 ff31 	bl	8001cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	37e0      	adds	r7, #224	; 0xe0
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40004800 	.word	0x40004800
 8000ea0:	58024400 	.word	0x58024400
 8000ea4:	58020c00 	.word	0x58020c00

08000ea8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b0b8      	sub	sp, #224	; 0xe0
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	22bc      	movs	r2, #188	; 0xbc
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f005 fa3b 	bl	8006344 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a2f      	ldr	r2, [pc, #188]	; (8000f90 <HAL_PCD_MspInit+0xe8>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d156      	bne.n	8000f86 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ed8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000edc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000ede:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ee2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	4618      	mov	r0, r3
 8000eec:	f002 fa16 	bl	800331c <HAL_RCCEx_PeriphCLKConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000ef6:	f7ff fdf9 	bl	8000aec <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000efa:	f001 fa47 	bl	800238c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <HAL_PCD_MspInit+0xec>)
 8000f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f04:	4a23      	ldr	r2, [pc, #140]	; (8000f94 <HAL_PCD_MspInit+0xec>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <HAL_PCD_MspInit+0xec>)
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f1c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f36:	230a      	movs	r3, #10
 8000f38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f40:	4619      	mov	r1, r3
 8000f42:	4815      	ldr	r0, [pc, #84]	; (8000f98 <HAL_PCD_MspInit+0xf0>)
 8000f44:	f000 fed6 	bl	8001cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f60:	4619      	mov	r1, r3
 8000f62:	480d      	ldr	r0, [pc, #52]	; (8000f98 <HAL_PCD_MspInit+0xf0>)
 8000f64:	f000 fec6 	bl	8001cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_PCD_MspInit+0xec>)
 8000f6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f6e:	4a09      	ldr	r2, [pc, #36]	; (8000f94 <HAL_PCD_MspInit+0xec>)
 8000f70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f74:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_PCD_MspInit+0xec>)
 8000f7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	37e0      	adds	r7, #224	; 0xe0
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40080000 	.word	0x40080000
 8000f94:	58024400 	.word	0x58024400
 8000f98:	58020000 	.word	0x58020000

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <HardFault_Handler+0x4>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <MemManage_Handler+0x4>

08000fae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe8:	f000 f926 	bl	8001238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b37      	ldr	r3, [pc, #220]	; (80010d4 <SystemInit+0xe4>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffa:	4a36      	ldr	r2, [pc, #216]	; (80010d4 <SystemInit+0xe4>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001004:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <SystemInit+0xe8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 030f 	and.w	r3, r3, #15
 800100c:	2b06      	cmp	r3, #6
 800100e:	d807      	bhi.n	8001020 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001010:	4b31      	ldr	r3, [pc, #196]	; (80010d8 <SystemInit+0xe8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f023 030f 	bic.w	r3, r3, #15
 8001018:	4a2f      	ldr	r2, [pc, #188]	; (80010d8 <SystemInit+0xe8>)
 800101a:	f043 0307 	orr.w	r3, r3, #7
 800101e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001020:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <SystemInit+0xec>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a2d      	ldr	r2, [pc, #180]	; (80010dc <SystemInit+0xec>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800102c:	4b2b      	ldr	r3, [pc, #172]	; (80010dc <SystemInit+0xec>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001032:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <SystemInit+0xec>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	4929      	ldr	r1, [pc, #164]	; (80010dc <SystemInit+0xec>)
 8001038:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <SystemInit+0xf0>)
 800103a:	4013      	ands	r3, r2
 800103c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800103e:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <SystemInit+0xe8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	2b00      	cmp	r3, #0
 8001048:	d007      	beq.n	800105a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800104a:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <SystemInit+0xe8>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f023 030f 	bic.w	r3, r3, #15
 8001052:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <SystemInit+0xe8>)
 8001054:	f043 0307 	orr.w	r3, r3, #7
 8001058:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <SystemInit+0xec>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <SystemInit+0xec>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <SystemInit+0xec>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800106c:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <SystemInit+0xec>)
 800106e:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <SystemInit+0xf4>)
 8001070:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <SystemInit+0xec>)
 8001074:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <SystemInit+0xf8>)
 8001076:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <SystemInit+0xec>)
 800107a:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <SystemInit+0xfc>)
 800107c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <SystemInit+0xec>)
 8001080:	2200      	movs	r2, #0
 8001082:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001084:	4b15      	ldr	r3, [pc, #84]	; (80010dc <SystemInit+0xec>)
 8001086:	4a19      	ldr	r2, [pc, #100]	; (80010ec <SystemInit+0xfc>)
 8001088:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <SystemInit+0xec>)
 800108c:	2200      	movs	r2, #0
 800108e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <SystemInit+0xec>)
 8001092:	4a16      	ldr	r2, [pc, #88]	; (80010ec <SystemInit+0xfc>)
 8001094:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <SystemInit+0xec>)
 8001098:	2200      	movs	r2, #0
 800109a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <SystemInit+0xec>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <SystemInit+0xec>)
 80010a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <SystemInit+0xec>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <SystemInit+0x100>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <SystemInit+0x104>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010ba:	d202      	bcs.n	80010c2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <SystemInit+0x108>)
 80010be:	2201      	movs	r2, #1
 80010c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <SystemInit+0x10c>)
 80010c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80010c8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00
 80010d8:	52002000 	.word	0x52002000
 80010dc:	58024400 	.word	0x58024400
 80010e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80010e4:	02020200 	.word	0x02020200
 80010e8:	01ff0000 	.word	0x01ff0000
 80010ec:	01010280 	.word	0x01010280
 80010f0:	5c001000 	.word	0x5c001000
 80010f4:	ffff0000 	.word	0xffff0000
 80010f8:	51008108 	.word	0x51008108
 80010fc:	52004000 	.word	0x52004000

08001100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001138 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001104:	f7ff ff74 	bl	8000ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001108:	480c      	ldr	r0, [pc, #48]	; (800113c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800110a:	490d      	ldr	r1, [pc, #52]	; (8001140 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001120:	4c0a      	ldr	r4, [pc, #40]	; (800114c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112e:	f005 f8e5 	bl	80062fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001132:	f7ff fa4d 	bl	80005d0 <main>
  bx  lr
 8001136:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001138:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800113c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001140:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001144:	080063b4 	.word	0x080063b4
  ldr r2, =_sbss
 8001148:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 800114c:	240006e0 	.word	0x240006e0

08001150 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC3_IRQHandler>
	...

08001154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115a:	2003      	movs	r0, #3
 800115c:	f000 f982 	bl	8001464 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001160:	f001 ff06 	bl	8002f70 <HAL_RCC_GetSysClockFreq>
 8001164:	4602      	mov	r2, r0
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <HAL_Init+0x68>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	0a1b      	lsrs	r3, r3, #8
 800116c:	f003 030f 	and.w	r3, r3, #15
 8001170:	4913      	ldr	r1, [pc, #76]	; (80011c0 <HAL_Init+0x6c>)
 8001172:	5ccb      	ldrb	r3, [r1, r3]
 8001174:	f003 031f 	and.w	r3, r3, #31
 8001178:	fa22 f303 	lsr.w	r3, r2, r3
 800117c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_Init+0x68>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <HAL_Init+0x6c>)
 8001188:	5cd3      	ldrb	r3, [r2, r3]
 800118a:	f003 031f 	and.w	r3, r3, #31
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	fa22 f303 	lsr.w	r3, r2, r3
 8001194:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <HAL_Init+0x70>)
 8001196:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001198:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <HAL_Init+0x74>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800119e:	2000      	movs	r0, #0
 80011a0:	f000 f814 	bl	80011cc <HAL_InitTick>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e002      	b.n	80011b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011ae:	f7ff fca3 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	58024400 	.word	0x58024400
 80011c0:	0800636c 	.word	0x0800636c
 80011c4:	24000004 	.word	0x24000004
 80011c8:	24000000 	.word	0x24000000

080011cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_InitTick+0x60>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e021      	b.n	8001224 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <HAL_InitTick+0x64>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_InitTick+0x60>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f959 	bl	80014ae <HAL_SYSTICK_Config>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e00e      	b.n	8001224 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	d80a      	bhi.n	8001222 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120c:	2200      	movs	r2, #0
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f000 f931 	bl	800147a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001218:	4a06      	ldr	r2, [pc, #24]	; (8001234 <HAL_InitTick+0x68>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2400000c 	.word	0x2400000c
 8001230:	24000000 	.word	0x24000000
 8001234:	24000008 	.word	0x24000008

08001238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x20>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_IncTick+0x24>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_IncTick+0x24>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	2400000c 	.word	0x2400000c
 800125c:	240006dc 	.word	0x240006dc

08001260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <HAL_GetTick+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	240006dc 	.word	0x240006dc

08001278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff ffee 	bl	8001260 <HAL_GetTick>
 8001284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001290:	d005      	beq.n	800129e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_Delay+0x44>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800129e:	bf00      	nop
 80012a0:	f7ff ffde 	bl	8001260 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d8f7      	bhi.n	80012a0 <HAL_Delay+0x28>
  {
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2400000c 	.word	0x2400000c

080012c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_GetREVID+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	0c1b      	lsrs	r3, r3, #16
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	5c001000 	.word	0x5c001000

080012d8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80012e8:	4904      	ldr	r1, [pc, #16]	; (80012fc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	604b      	str	r3, [r1, #4]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	58000400 	.word	0x58000400

08001300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <__NVIC_SetPriorityGrouping+0x40>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 800132a:	4313      	orrs	r3, r2
 800132c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132e:	4a04      	ldr	r2, [pc, #16]	; (8001340 <__NVIC_SetPriorityGrouping+0x40>)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	60d3      	str	r3, [r2, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00
 8001344:	05fa0000 	.word	0x05fa0000

08001348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	; (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001430:	d301      	bcc.n	8001436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001432:	2301      	movs	r3, #1
 8001434:	e00f      	b.n	8001456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <SysTick_Config+0x40>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143e:	210f      	movs	r1, #15
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f7ff ff8e 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <SysTick_Config+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <SysTick_Config+0x40>)
 8001450:	2207      	movs	r2, #7
 8001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010

08001464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff47 	bl	8001300 <__NVIC_SetPriorityGrouping>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001488:	f7ff ff5e 	bl	8001348 <__NVIC_GetPriorityGrouping>
 800148c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	f7ff ff90 	bl	80013b8 <NVIC_EncodePriority>
 8001498:	4602      	mov	r2, r0
 800149a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff5f 	bl	8001364 <__NVIC_SetPriority>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ffb2 	bl	8001420 <SysTick_Config>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0c6      	b.n	8001668 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d102      	bne.n	80014e8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff fb22 	bl	8000b2c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2223      	movs	r2, #35	; 0x23
 80014ec:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	4b60      	ldr	r3, [pc, #384]	; (8001670 <HAL_ETH_Init+0x1a8>)
 80014f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014f4:	4a5e      	ldr	r2, [pc, #376]	; (8001670 <HAL_ETH_Init+0x1a8>)
 80014f6:	f043 0302 	orr.w	r3, r3, #2
 80014fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014fe:	4b5c      	ldr	r3, [pc, #368]	; (8001670 <HAL_ETH_Init+0x1a8>)
 8001500:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7a1b      	ldrb	r3, [r3, #8]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d103      	bne.n	800151c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001514:	2000      	movs	r0, #0
 8001516:	f7ff fedf 	bl	80012d8 <HAL_SYSCFG_ETHInterfaceSelect>
 800151a:	e003      	b.n	8001524 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800151c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001520:	f7ff feda 	bl	80012d8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 0201 	orr.w	r2, r2, #1
 8001536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800153a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800153c:	f7ff fe90 	bl	8001260 <HAL_GetTick>
 8001540:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001542:	e00f      	b.n	8001564 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001544:	f7ff fe8c 	bl	8001260 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001552:	d907      	bls.n	8001564 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2204      	movs	r2, #4
 8001558:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	22e0      	movs	r2, #224	; 0xe0
 800155e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e081      	b.n	8001668 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1e6      	bne.n	8001544 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 fac0 	bl	8001afc <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800157c:	f001 fe72 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 8001580:	4603      	mov	r3, r0
 8001582:	4a3c      	ldr	r2, [pc, #240]	; (8001674 <HAL_ETH_Init+0x1ac>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	0c9a      	lsrs	r2, r3, #18
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	3a01      	subs	r2, #1
 8001590:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 fa13 	bl	80019c0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80015b0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80015b4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d007      	beq.n	80015d2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	22e0      	movs	r2, #224	; 0xe0
 80015cc:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e04a      	b.n	8001668 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	f241 1308 	movw	r3, #4360	; 0x1108
 80015da:	4413      	add	r3, r2
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4b26      	ldr	r3, [pc, #152]	; (8001678 <HAL_ETH_Init+0x1b0>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6952      	ldr	r2, [r2, #20]
 80015e6:	0052      	lsls	r2, r2, #1
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	6809      	ldr	r1, [r1, #0]
 80015ec:	431a      	orrs	r2, r3
 80015ee:	f241 1308 	movw	r3, #4360	; 0x1108
 80015f2:	440b      	add	r3, r1
 80015f4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 fad8 	bl	8001bac <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 fb1c 	bl	8001c3a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	3305      	adds	r3, #5
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	021a      	lsls	r2, r3, #8
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	3304      	adds	r3, #4
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	3303      	adds	r3, #3
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	061a      	lsls	r2, r3, #24
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	3302      	adds	r3, #2
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	041b      	lsls	r3, r3, #16
 8001634:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	3301      	adds	r3, #1
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001640:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800164e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001650:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2210      	movs	r2, #16
 800165e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2210      	movs	r2, #16
 8001664:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	58024400 	.word	0x58024400
 8001674:	431bde83 	.word	0x431bde83
 8001678:	ffff8001 	.word	0xffff8001

0800167c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800168e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	791b      	ldrb	r3, [r3, #4]
 8001694:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001696:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	7b1b      	ldrb	r3, [r3, #12]
 800169c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800169e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	7b5b      	ldrb	r3, [r3, #13]
 80016a4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80016a6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	7b9b      	ldrb	r3, [r3, #14]
 80016ac:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80016ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	7bdb      	ldrb	r3, [r3, #15]
 80016b4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80016b6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	7c12      	ldrb	r2, [r2, #16]
 80016bc:	2a00      	cmp	r2, #0
 80016be:	d102      	bne.n	80016c6 <ETH_SetMACConfig+0x4a>
 80016c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016c4:	e000      	b.n	80016c8 <ETH_SetMACConfig+0x4c>
 80016c6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80016c8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	7c52      	ldrb	r2, [r2, #17]
 80016ce:	2a00      	cmp	r2, #0
 80016d0:	d102      	bne.n	80016d8 <ETH_SetMACConfig+0x5c>
 80016d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016d6:	e000      	b.n	80016da <ETH_SetMACConfig+0x5e>
 80016d8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80016da:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	7c9b      	ldrb	r3, [r3, #18]
 80016e0:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80016e2:	431a      	orrs	r2, r3
                                macconf->Speed |
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80016e8:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80016ee:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	7f1b      	ldrb	r3, [r3, #28]
 80016f4:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80016f6:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	7f5b      	ldrb	r3, [r3, #29]
 80016fc:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80016fe:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	7f92      	ldrb	r2, [r2, #30]
 8001704:	2a00      	cmp	r2, #0
 8001706:	d102      	bne.n	800170e <ETH_SetMACConfig+0x92>
 8001708:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800170c:	e000      	b.n	8001710 <ETH_SetMACConfig+0x94>
 800170e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001710:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	7fdb      	ldrb	r3, [r3, #31]
 8001716:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001718:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001720:	2a00      	cmp	r2, #0
 8001722:	d102      	bne.n	800172a <ETH_SetMACConfig+0xae>
 8001724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001728:	e000      	b.n	800172c <ETH_SetMACConfig+0xb0>
 800172a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800172c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001732:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800173a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800173c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001742:	4313      	orrs	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b56      	ldr	r3, [pc, #344]	; (80018a8 <ETH_SetMACConfig+0x22c>)
 800174e:	4013      	ands	r3, r2
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	68f9      	ldr	r1, [r7, #12]
 8001756:	430b      	orrs	r3, r1
 8001758:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800175e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001766:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001768:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001770:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001772:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800177a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800177c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001784:	2a00      	cmp	r2, #0
 8001786:	d102      	bne.n	800178e <ETH_SetMACConfig+0x112>
 8001788:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800178c:	e000      	b.n	8001790 <ETH_SetMACConfig+0x114>
 800178e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001790:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001796:	4313      	orrs	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	4b42      	ldr	r3, [pc, #264]	; (80018ac <ETH_SetMACConfig+0x230>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	68f9      	ldr	r1, [r7, #12]
 80017aa:	430b      	orrs	r3, r1
 80017ac:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017b4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80017ba:	4313      	orrs	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	4b3a      	ldr	r3, [pc, #232]	; (80018b0 <ETH_SetMACConfig+0x234>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	68f9      	ldr	r1, [r7, #12]
 80017ce:	430b      	orrs	r3, r1
 80017d0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80017d8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80017de:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80017e6:	2a00      	cmp	r2, #0
 80017e8:	d101      	bne.n	80017ee <ETH_SetMACConfig+0x172>
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	e000      	b.n	80017f0 <ETH_SetMACConfig+0x174>
 80017ee:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80017f0:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017f6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80017f8:	4313      	orrs	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001802:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001806:	4013      	ands	r3, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	68f9      	ldr	r1, [r7, #12]
 800180e:	430b      	orrs	r3, r1
 8001810:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001818:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001820:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001822:	4313      	orrs	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182e:	f023 0103 	bic.w	r1, r3, #3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	430a      	orrs	r2, r1
 800183a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001846:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001862:	2a00      	cmp	r2, #0
 8001864:	d101      	bne.n	800186a <ETH_SetMACConfig+0x1ee>
 8001866:	2240      	movs	r2, #64	; 0x40
 8001868:	e000      	b.n	800186c <ETH_SetMACConfig+0x1f0>
 800186a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800186c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001874:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001876:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800187e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001880:	4313      	orrs	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800188c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	430a      	orrs	r2, r1
 8001898:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	00048083 	.word	0x00048083
 80018ac:	c0f88000 	.word	0xc0f88000
 80018b0:	fffffef0 	.word	0xfffffef0

080018b4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b38      	ldr	r3, [pc, #224]	; (80019ac <ETH_SetDMAConfig+0xf8>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	6809      	ldr	r1, [r1, #0]
 80018d4:	431a      	orrs	r2, r3
 80018d6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80018da:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	791b      	ldrb	r3, [r3, #4]
 80018e0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80018e6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	7b1b      	ldrb	r3, [r3, #12]
 80018ec:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80018ee:	4313      	orrs	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	f241 0304 	movw	r3, #4100	; 0x1004
 80018fa:	4413      	add	r3, r2
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <ETH_SetDMAConfig+0xfc>)
 8001900:	4013      	ands	r3, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6811      	ldr	r1, [r2, #0]
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	431a      	orrs	r2, r3
 800190a:	f241 0304 	movw	r3, #4100	; 0x1004
 800190e:	440b      	add	r3, r1
 8001910:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	7b5b      	ldrb	r3, [r3, #13]
 8001916:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800191c:	4313      	orrs	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <ETH_SetDMAConfig+0x100>)
 800192c:	4013      	ands	r3, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6811      	ldr	r1, [r2, #0]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	431a      	orrs	r2, r3
 8001936:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800193a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	7d1b      	ldrb	r3, [r3, #20]
 8001944:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001946:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	7f5b      	ldrb	r3, [r3, #29]
 800194c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800194e:	4313      	orrs	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	f241 1304 	movw	r3, #4356	; 0x1104
 800195a:	4413      	add	r3, r2
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <ETH_SetDMAConfig+0x104>)
 8001960:	4013      	ands	r3, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6811      	ldr	r1, [r2, #0]
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	431a      	orrs	r2, r3
 800196a:	f241 1304 	movw	r3, #4356	; 0x1104
 800196e:	440b      	add	r3, r1
 8001970:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	7f1b      	ldrb	r3, [r3, #28]
 8001976:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800197c:	4313      	orrs	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	f241 1308 	movw	r3, #4360	; 0x1108
 8001988:	4413      	add	r3, r2
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <ETH_SetDMAConfig+0x108>)
 800198e:	4013      	ands	r3, r2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6811      	ldr	r1, [r2, #0]
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	431a      	orrs	r2, r3
 8001998:	f241 1308 	movw	r3, #4360	; 0x1108
 800199c:	440b      	add	r3, r1
 800199e:	601a      	str	r2, [r3, #0]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	ffff87fd 	.word	0xffff87fd
 80019b0:	ffff2ffe 	.word	0xffff2ffe
 80019b4:	fffec000 	.word	0xfffec000
 80019b8:	ffc0efef 	.word	0xffc0efef
 80019bc:	7fc0ffff 	.word	0x7fc0ffff

080019c0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b0a4      	sub	sp, #144	; 0x90
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80019c8:	2301      	movs	r3, #1
 80019ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80019ce:	2300      	movs	r3, #0
 80019d0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80019de:	2301      	movs	r3, #1
 80019e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80019e4:	2301      	movs	r3, #1
 80019e6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80019f6:	2301      	movs	r3, #1
 80019f8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80019fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a00:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001a18:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001a1c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001a24:	2300      	movs	r3, #0
 8001a26:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001a42:	2300      	movs	r3, #0
 8001a44:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a52:	2301      	movs	r3, #1
 8001a54:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001a58:	2320      	movs	r3, #32
 8001a5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001a6a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a74:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001a94:	2301      	movs	r3, #1
 8001a96:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001aa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff fde6 	bl	800167c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001aca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ace:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ad4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ad8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001ae0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001ae4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ae6:	f107 0308 	add.w	r3, r7, #8
 8001aea:	4619      	mov	r1, r3
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff fee1 	bl	80018b4 <ETH_SetDMAConfig>
}
 8001af2:	bf00      	nop
 8001af4:	3790      	adds	r7, #144	; 0x90
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b16:	f001 fba5 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 8001b1a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d908      	bls.n	8001b36 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4a1d      	ldr	r2, [pc, #116]	; (8001b9c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d804      	bhi.n	8001b36 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	e027      	b.n	8001b86 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	4a18      	ldr	r2, [pc, #96]	; (8001b9c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d908      	bls.n	8001b50 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	4a17      	ldr	r2, [pc, #92]	; (8001ba0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d204      	bcs.n	8001b50 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	e01a      	b.n	8001b86 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4a13      	ldr	r2, [pc, #76]	; (8001ba0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d303      	bcc.n	8001b60 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d911      	bls.n	8001b84 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d908      	bls.n	8001b7a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ba8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d804      	bhi.n	8001b7a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	e005      	b.n	8001b86 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	e000      	b.n	8001b86 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001b84:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001b90:	bf00      	nop
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	01312cff 	.word	0x01312cff
 8001b9c:	02160ebf 	.word	0x02160ebf
 8001ba0:	03938700 	.word	0x03938700
 8001ba4:	05f5e0ff 	.word	0x05f5e0ff
 8001ba8:	08f0d17f 	.word	0x08f0d17f

08001bac <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	e01d      	b.n	8001bf6 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68d9      	ldr	r1, [r3, #12]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	440b      	add	r3, r1
 8001bca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2200      	movs	r2, #0
 8001be2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	3206      	adds	r2, #6
 8001bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d9de      	bls.n	8001bba <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	f241 132c 	movw	r3, #4396	; 0x112c
 8001c0a:	4413      	add	r3, r2
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68d9      	ldr	r1, [r3, #12]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	f241 1314 	movw	r3, #4372	; 0x1114
 8001c1c:	4413      	add	r3, r2
 8001c1e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001c2c:	601a      	str	r2, [r3, #0]
}
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b085      	sub	sp, #20
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	e024      	b.n	8001c92 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6919      	ldr	r1, [r3, #16]
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	440b      	add	r3, r1
 8001c58:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2200      	movs	r2, #0
 8001c64:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	3310      	adds	r3, #16
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d9d7      	bls.n	8001c48 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	f241 1330 	movw	r3, #4400	; 0x1130
 8001cbe:	4413      	add	r3, r2
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6919      	ldr	r1, [r3, #16]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	f241 131c 	movw	r3, #4380	; 0x111c
 8001cd0:	4413      	add	r3, r2
 8001cd2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	f241 1328 	movw	r3, #4392	; 0x1128
 8001ce4:	4413      	add	r3, r2
 8001ce6:	6019      	str	r1, [r3, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b089      	sub	sp, #36	; 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d02:	4b89      	ldr	r3, [pc, #548]	; (8001f28 <HAL_GPIO_Init+0x234>)
 8001d04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d06:	e194      	b.n	8002032 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 8186 	beq.w	800202c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d005      	beq.n	8001d38 <HAL_GPIO_Init+0x44>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d130      	bne.n	8001d9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	2203      	movs	r2, #3
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d6e:	2201      	movs	r2, #1
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	091b      	lsrs	r3, r3, #4
 8001d84:	f003 0201 	and.w	r2, r3, #1
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d017      	beq.n	8001dd6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	2203      	movs	r2, #3
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d123      	bne.n	8001e2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	08da      	lsrs	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3208      	adds	r2, #8
 8001dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	220f      	movs	r2, #15
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	691a      	ldr	r2, [r3, #16]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	08da      	lsrs	r2, r3, #3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3208      	adds	r2, #8
 8001e24:	69b9      	ldr	r1, [r7, #24]
 8001e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	2203      	movs	r2, #3
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 0203 	and.w	r2, r3, #3
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 80e0 	beq.w	800202c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <HAL_GPIO_Init+0x238>)
 8001e6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e72:	4a2e      	ldr	r2, [pc, #184]	; (8001f2c <HAL_GPIO_Init+0x238>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e7c:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <HAL_GPIO_Init+0x238>)
 8001e7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e8a:	4a29      	ldr	r2, [pc, #164]	; (8001f30 <HAL_GPIO_Init+0x23c>)
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	089b      	lsrs	r3, r3, #2
 8001e90:	3302      	adds	r3, #2
 8001e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	220f      	movs	r2, #15
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a20      	ldr	r2, [pc, #128]	; (8001f34 <HAL_GPIO_Init+0x240>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d052      	beq.n	8001f5c <HAL_GPIO_Init+0x268>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a1f      	ldr	r2, [pc, #124]	; (8001f38 <HAL_GPIO_Init+0x244>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d031      	beq.n	8001f22 <HAL_GPIO_Init+0x22e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a1e      	ldr	r2, [pc, #120]	; (8001f3c <HAL_GPIO_Init+0x248>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d02b      	beq.n	8001f1e <HAL_GPIO_Init+0x22a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <HAL_GPIO_Init+0x24c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d025      	beq.n	8001f1a <HAL_GPIO_Init+0x226>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a1c      	ldr	r2, [pc, #112]	; (8001f44 <HAL_GPIO_Init+0x250>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01f      	beq.n	8001f16 <HAL_GPIO_Init+0x222>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a1b      	ldr	r2, [pc, #108]	; (8001f48 <HAL_GPIO_Init+0x254>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d019      	beq.n	8001f12 <HAL_GPIO_Init+0x21e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a1a      	ldr	r2, [pc, #104]	; (8001f4c <HAL_GPIO_Init+0x258>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_GPIO_Init+0x21a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a19      	ldr	r2, [pc, #100]	; (8001f50 <HAL_GPIO_Init+0x25c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00d      	beq.n	8001f0a <HAL_GPIO_Init+0x216>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a18      	ldr	r2, [pc, #96]	; (8001f54 <HAL_GPIO_Init+0x260>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d007      	beq.n	8001f06 <HAL_GPIO_Init+0x212>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a17      	ldr	r2, [pc, #92]	; (8001f58 <HAL_GPIO_Init+0x264>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d101      	bne.n	8001f02 <HAL_GPIO_Init+0x20e>
 8001efe:	2309      	movs	r3, #9
 8001f00:	e02d      	b.n	8001f5e <HAL_GPIO_Init+0x26a>
 8001f02:	230a      	movs	r3, #10
 8001f04:	e02b      	b.n	8001f5e <HAL_GPIO_Init+0x26a>
 8001f06:	2308      	movs	r3, #8
 8001f08:	e029      	b.n	8001f5e <HAL_GPIO_Init+0x26a>
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	e027      	b.n	8001f5e <HAL_GPIO_Init+0x26a>
 8001f0e:	2306      	movs	r3, #6
 8001f10:	e025      	b.n	8001f5e <HAL_GPIO_Init+0x26a>
 8001f12:	2305      	movs	r3, #5
 8001f14:	e023      	b.n	8001f5e <HAL_GPIO_Init+0x26a>
 8001f16:	2304      	movs	r3, #4
 8001f18:	e021      	b.n	8001f5e <HAL_GPIO_Init+0x26a>
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e01f      	b.n	8001f5e <HAL_GPIO_Init+0x26a>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e01d      	b.n	8001f5e <HAL_GPIO_Init+0x26a>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e01b      	b.n	8001f5e <HAL_GPIO_Init+0x26a>
 8001f26:	bf00      	nop
 8001f28:	58000080 	.word	0x58000080
 8001f2c:	58024400 	.word	0x58024400
 8001f30:	58000400 	.word	0x58000400
 8001f34:	58020000 	.word	0x58020000
 8001f38:	58020400 	.word	0x58020400
 8001f3c:	58020800 	.word	0x58020800
 8001f40:	58020c00 	.word	0x58020c00
 8001f44:	58021000 	.word	0x58021000
 8001f48:	58021400 	.word	0x58021400
 8001f4c:	58021800 	.word	0x58021800
 8001f50:	58021c00 	.word	0x58021c00
 8001f54:	58022000 	.word	0x58022000
 8001f58:	58022400 	.word	0x58022400
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	f002 0203 	and.w	r2, r2, #3
 8001f64:	0092      	lsls	r2, r2, #2
 8001f66:	4093      	lsls	r3, r2
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f6e:	4938      	ldr	r1, [pc, #224]	; (8002050 <HAL_GPIO_Init+0x35c>)
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	089b      	lsrs	r3, r3, #2
 8001f74:	3302      	adds	r3, #2
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	3301      	adds	r3, #1
 8002030:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	f47f ae63 	bne.w	8001d08 <HAL_GPIO_Init+0x14>
  }
}
 8002042:	bf00      	nop
 8002044:	bf00      	nop
 8002046:	3724      	adds	r7, #36	; 0x24
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	58000400 	.word	0x58000400

08002054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	807b      	strh	r3, [r7, #2]
 8002060:	4613      	mov	r3, r2
 8002062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002064:	787b      	ldrb	r3, [r7, #1]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002070:	e003      	b.n	800207a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002072:	887b      	ldrh	r3, [r7, #2]
 8002074:	041a      	lsls	r2, r3, #16
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	619a      	str	r2, [r3, #24]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002086:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002088:	b08f      	sub	sp, #60	; 0x3c
 800208a:	af0a      	add	r7, sp, #40	; 0x28
 800208c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e116      	b.n	80022c6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7fe fef8 	bl	8000ea8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2203      	movs	r2, #3
 80020bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d102      	bne.n	80020d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f003 fe7a 	bl	8005dd0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	687e      	ldr	r6, [r7, #4]
 80020e4:	466d      	mov	r5, sp
 80020e6:	f106 0410 	add.w	r4, r6, #16
 80020ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80020fa:	1d33      	adds	r3, r6, #4
 80020fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020fe:	6838      	ldr	r0, [r7, #0]
 8002100:	f003 fdf8 	bl	8005cf4 <USB_CoreInit>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2202      	movs	r2, #2
 800210e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e0d7      	b.n	80022c6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f003 fe68 	bl	8005df2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002122:	2300      	movs	r3, #0
 8002124:	73fb      	strb	r3, [r7, #15]
 8002126:	e04a      	b.n	80021be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	1a9b      	subs	r3, r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	333d      	adds	r3, #61	; 0x3d
 8002138:	2201      	movs	r2, #1
 800213a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	333c      	adds	r3, #60	; 0x3c
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	b298      	uxth	r0, r3
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	1a9b      	subs	r3, r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3342      	adds	r3, #66	; 0x42
 8002164:	4602      	mov	r2, r0
 8002166:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	333f      	adds	r3, #63	; 0x3f
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	3344      	adds	r3, #68	; 0x44
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	1a9b      	subs	r3, r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	3348      	adds	r3, #72	; 0x48
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	1a9b      	subs	r3, r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	3350      	adds	r3, #80	; 0x50
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	3301      	adds	r3, #1
 80021bc:	73fb      	strb	r3, [r7, #15]
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d3af      	bcc.n	8002128 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c8:	2300      	movs	r3, #0
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e044      	b.n	8002258 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021fa:	7bfa      	ldrb	r2, [r7, #15]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	1a9b      	subs	r3, r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	1a9b      	subs	r3, r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002226:	7bfa      	ldrb	r2, [r7, #15]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	3301      	adds	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	429a      	cmp	r2, r3
 8002260:	d3b5      	bcc.n	80021ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	687e      	ldr	r6, [r7, #4]
 800226a:	466d      	mov	r5, sp
 800226c:	f106 0410 	add.w	r4, r6, #16
 8002270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002276:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002278:	e894 0003 	ldmia.w	r4, {r0, r1}
 800227c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002280:	1d33      	adds	r3, r6, #4
 8002282:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002284:	6838      	ldr	r0, [r7, #0]
 8002286:	f003 fe01 	bl	8005e8c <USB_DevInit>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e014      	b.n	80022c6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d102      	bne.n	80022ba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f80b 	bl	80022d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f003 ffbb 	bl	800623a <USB_DevDisconnect>

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080022d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_PCDEx_ActivateLPM+0x44>)
 8002300:	4313      	orrs	r3, r2
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	10000003 	.word	0x10000003

08002318 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002320:	4b19      	ldr	r3, [pc, #100]	; (8002388 <HAL_PWREx_ConfigSupply+0x70>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b04      	cmp	r3, #4
 800232a:	d00a      	beq.n	8002342 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800232c:	4b16      	ldr	r3, [pc, #88]	; (8002388 <HAL_PWREx_ConfigSupply+0x70>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	429a      	cmp	r2, r3
 8002338:	d001      	beq.n	800233e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e01f      	b.n	800237e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	e01d      	b.n	800237e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002342:	4b11      	ldr	r3, [pc, #68]	; (8002388 <HAL_PWREx_ConfigSupply+0x70>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	f023 0207 	bic.w	r2, r3, #7
 800234a:	490f      	ldr	r1, [pc, #60]	; (8002388 <HAL_PWREx_ConfigSupply+0x70>)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4313      	orrs	r3, r2
 8002350:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002352:	f7fe ff85 	bl	8001260 <HAL_GetTick>
 8002356:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002358:	e009      	b.n	800236e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800235a:	f7fe ff81 	bl	8001260 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002368:	d901      	bls.n	800236e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e007      	b.n	800237e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_PWREx_ConfigSupply+0x70>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800237a:	d1ee      	bne.n	800235a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	58024800 	.word	0x58024800

0800238c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800239a:	60d3      	str	r3, [r2, #12]
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	58024800 	.word	0x58024800

080023ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08c      	sub	sp, #48	; 0x30
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d102      	bne.n	80023c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	f000 bc1c 	b.w	8002bf8 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 8087 	beq.w	80024dc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ce:	4b9e      	ldr	r3, [pc, #632]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023d8:	4b9b      	ldr	r3, [pc, #620]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e0:	2b10      	cmp	r3, #16
 80023e2:	d007      	beq.n	80023f4 <HAL_RCC_OscConfig+0x48>
 80023e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e6:	2b18      	cmp	r3, #24
 80023e8:	d110      	bne.n	800240c <HAL_RCC_OscConfig+0x60>
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d10b      	bne.n	800240c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f4:	4b94      	ldr	r3, [pc, #592]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d06c      	beq.n	80024da <HAL_RCC_OscConfig+0x12e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d168      	bne.n	80024da <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e3f5      	b.n	8002bf8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002414:	d106      	bne.n	8002424 <HAL_RCC_OscConfig+0x78>
 8002416:	4b8c      	ldr	r3, [pc, #560]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a8b      	ldr	r2, [pc, #556]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 800241c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e02e      	b.n	8002482 <HAL_RCC_OscConfig+0xd6>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10c      	bne.n	8002446 <HAL_RCC_OscConfig+0x9a>
 800242c:	4b86      	ldr	r3, [pc, #536]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a85      	ldr	r2, [pc, #532]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 8002432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	4b83      	ldr	r3, [pc, #524]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a82      	ldr	r2, [pc, #520]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 800243e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	e01d      	b.n	8002482 <HAL_RCC_OscConfig+0xd6>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800244e:	d10c      	bne.n	800246a <HAL_RCC_OscConfig+0xbe>
 8002450:	4b7d      	ldr	r3, [pc, #500]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a7c      	ldr	r2, [pc, #496]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 8002456:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	4b7a      	ldr	r3, [pc, #488]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a79      	ldr	r2, [pc, #484]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 8002462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	e00b      	b.n	8002482 <HAL_RCC_OscConfig+0xd6>
 800246a:	4b77      	ldr	r3, [pc, #476]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a76      	ldr	r2, [pc, #472]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 8002470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b74      	ldr	r3, [pc, #464]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a73      	ldr	r2, [pc, #460]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 800247c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002480:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d013      	beq.n	80024b2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f7fe fee9 	bl	8001260 <HAL_GetTick>
 800248e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002492:	f7fe fee5 	bl	8001260 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b64      	cmp	r3, #100	; 0x64
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e3a9      	b.n	8002bf8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024a4:	4b68      	ldr	r3, [pc, #416]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0xe6>
 80024b0:	e014      	b.n	80024dc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7fe fed5 	bl	8001260 <HAL_GetTick>
 80024b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ba:	f7fe fed1 	bl	8001260 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b64      	cmp	r3, #100	; 0x64
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e395      	b.n	8002bf8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024cc:	4b5e      	ldr	r3, [pc, #376]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x10e>
 80024d8:	e000      	b.n	80024dc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80ca 	beq.w	800267e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ea:	4b57      	ldr	r3, [pc, #348]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024f2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024f4:	4b54      	ldr	r3, [pc, #336]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 80024f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <HAL_RCC_OscConfig+0x164>
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	2b18      	cmp	r3, #24
 8002504:	d156      	bne.n	80025b4 <HAL_RCC_OscConfig+0x208>
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d151      	bne.n	80025b4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002510:	4b4d      	ldr	r3, [pc, #308]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_RCC_OscConfig+0x17c>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e367      	b.n	8002bf8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002528:	4b47      	ldr	r3, [pc, #284]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f023 0219 	bic.w	r2, r3, #25
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4944      	ldr	r1, [pc, #272]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800253a:	f7fe fe91 	bl	8001260 <HAL_GetTick>
 800253e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002542:	f7fe fe8d 	bl	8001260 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e351      	b.n	8002bf8 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002554:	4b3c      	ldr	r3, [pc, #240]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f0      	beq.n	8002542 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002560:	f7fe feae 	bl	80012c0 <HAL_GetREVID>
 8002564:	4603      	mov	r3, r0
 8002566:	f241 0203 	movw	r2, #4099	; 0x1003
 800256a:	4293      	cmp	r3, r2
 800256c:	d817      	bhi.n	800259e <HAL_RCC_OscConfig+0x1f2>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	2b40      	cmp	r3, #64	; 0x40
 8002574:	d108      	bne.n	8002588 <HAL_RCC_OscConfig+0x1dc>
 8002576:	4b34      	ldr	r3, [pc, #208]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800257e:	4a32      	ldr	r2, [pc, #200]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 8002580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002584:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002586:	e07a      	b.n	800267e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002588:	4b2f      	ldr	r3, [pc, #188]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	031b      	lsls	r3, r3, #12
 8002596:	492c      	ldr	r1, [pc, #176]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800259c:	e06f      	b.n	800267e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259e:	4b2a      	ldr	r3, [pc, #168]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	061b      	lsls	r3, r3, #24
 80025ac:	4926      	ldr	r1, [pc, #152]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b2:	e064      	b.n	800267e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d047      	beq.n	800264c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025bc:	4b22      	ldr	r3, [pc, #136]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f023 0219 	bic.w	r2, r3, #25
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	491f      	ldr	r1, [pc, #124]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ce:	f7fe fe47 	bl	8001260 <HAL_GetTick>
 80025d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d6:	f7fe fe43 	bl	8001260 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e307      	b.n	8002bf8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025e8:	4b17      	ldr	r3, [pc, #92]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f4:	f7fe fe64 	bl	80012c0 <HAL_GetREVID>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f241 0203 	movw	r2, #4099	; 0x1003
 80025fe:	4293      	cmp	r3, r2
 8002600:	d817      	bhi.n	8002632 <HAL_RCC_OscConfig+0x286>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b40      	cmp	r3, #64	; 0x40
 8002608:	d108      	bne.n	800261c <HAL_RCC_OscConfig+0x270>
 800260a:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002612:	4a0d      	ldr	r2, [pc, #52]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 8002614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002618:	6053      	str	r3, [r2, #4]
 800261a:	e030      	b.n	800267e <HAL_RCC_OscConfig+0x2d2>
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	031b      	lsls	r3, r3, #12
 800262a:	4907      	ldr	r1, [pc, #28]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
 8002630:	e025      	b.n	800267e <HAL_RCC_OscConfig+0x2d2>
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	061b      	lsls	r3, r3, #24
 8002640:	4901      	ldr	r1, [pc, #4]	; (8002648 <HAL_RCC_OscConfig+0x29c>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
 8002646:	e01a      	b.n	800267e <HAL_RCC_OscConfig+0x2d2>
 8002648:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264c:	4b9e      	ldr	r3, [pc, #632]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a9d      	ldr	r2, [pc, #628]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 8002652:	f023 0301 	bic.w	r3, r3, #1
 8002656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7fe fe02 	bl	8001260 <HAL_GetTick>
 800265c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002660:	f7fe fdfe 	bl	8001260 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e2c2      	b.n	8002bf8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002672:	4b95      	ldr	r3, [pc, #596]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 80a9 	beq.w	80027de <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800268c:	4b8e      	ldr	r3, [pc, #568]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002694:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002696:	4b8c      	ldr	r3, [pc, #560]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d007      	beq.n	80026b2 <HAL_RCC_OscConfig+0x306>
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	2b18      	cmp	r3, #24
 80026a6:	d13a      	bne.n	800271e <HAL_RCC_OscConfig+0x372>
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d135      	bne.n	800271e <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026b2:	4b85      	ldr	r3, [pc, #532]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_RCC_OscConfig+0x31e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	2b80      	cmp	r3, #128	; 0x80
 80026c4:	d001      	beq.n	80026ca <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e296      	b.n	8002bf8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026ca:	f7fe fdf9 	bl	80012c0 <HAL_GetREVID>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d817      	bhi.n	8002708 <HAL_RCC_OscConfig+0x35c>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d108      	bne.n	80026f2 <HAL_RCC_OscConfig+0x346>
 80026e0:	4b79      	ldr	r3, [pc, #484]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80026e8:	4a77      	ldr	r2, [pc, #476]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 80026ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026ee:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026f0:	e075      	b.n	80027de <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026f2:	4b75      	ldr	r3, [pc, #468]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	069b      	lsls	r3, r3, #26
 8002700:	4971      	ldr	r1, [pc, #452]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 8002702:	4313      	orrs	r3, r2
 8002704:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002706:	e06a      	b.n	80027de <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002708:	4b6f      	ldr	r3, [pc, #444]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	061b      	lsls	r3, r3, #24
 8002716:	496c      	ldr	r1, [pc, #432]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 8002718:	4313      	orrs	r3, r2
 800271a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800271c:	e05f      	b.n	80027de <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d042      	beq.n	80027ac <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002726:	4b68      	ldr	r3, [pc, #416]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a67      	ldr	r2, [pc, #412]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 800272c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002732:	f7fe fd95 	bl	8001260 <HAL_GetTick>
 8002736:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800273a:	f7fe fd91 	bl	8001260 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e255      	b.n	8002bf8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800274c:	4b5e      	ldr	r3, [pc, #376]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002758:	f7fe fdb2 	bl	80012c0 <HAL_GetREVID>
 800275c:	4603      	mov	r3, r0
 800275e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002762:	4293      	cmp	r3, r2
 8002764:	d817      	bhi.n	8002796 <HAL_RCC_OscConfig+0x3ea>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	2b20      	cmp	r3, #32
 800276c:	d108      	bne.n	8002780 <HAL_RCC_OscConfig+0x3d4>
 800276e:	4b56      	ldr	r3, [pc, #344]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002776:	4a54      	ldr	r2, [pc, #336]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 8002778:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800277c:	6053      	str	r3, [r2, #4]
 800277e:	e02e      	b.n	80027de <HAL_RCC_OscConfig+0x432>
 8002780:	4b51      	ldr	r3, [pc, #324]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	069b      	lsls	r3, r3, #26
 800278e:	494e      	ldr	r1, [pc, #312]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
 8002794:	e023      	b.n	80027de <HAL_RCC_OscConfig+0x432>
 8002796:	4b4c      	ldr	r3, [pc, #304]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	061b      	lsls	r3, r3, #24
 80027a4:	4948      	ldr	r1, [pc, #288]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60cb      	str	r3, [r1, #12]
 80027aa:	e018      	b.n	80027de <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027ac:	4b46      	ldr	r3, [pc, #280]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a45      	ldr	r2, [pc, #276]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 80027b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7fe fd52 	bl	8001260 <HAL_GetTick>
 80027bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80027c0:	f7fe fd4e 	bl	8001260 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e212      	b.n	8002bf8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027d2:	4b3d      	ldr	r3, [pc, #244]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d036      	beq.n	8002858 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d019      	beq.n	8002826 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f2:	4b35      	ldr	r3, [pc, #212]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 80027f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f6:	4a34      	ldr	r2, [pc, #208]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fe:	f7fe fd2f 	bl	8001260 <HAL_GetTick>
 8002802:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002806:	f7fe fd2b 	bl	8001260 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e1ef      	b.n	8002bf8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002818:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 800281a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x45a>
 8002824:	e018      	b.n	8002858 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002826:	4b28      	ldr	r3, [pc, #160]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 8002828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282a:	4a27      	ldr	r2, [pc, #156]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002832:	f7fe fd15 	bl	8001260 <HAL_GetTick>
 8002836:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283a:	f7fe fd11 	bl	8001260 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e1d5      	b.n	8002bf8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800284c:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 800284e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f0      	bne.n	800283a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	2b00      	cmp	r3, #0
 8002862:	d039      	beq.n	80028d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d019      	beq.n	80028a0 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800286c:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a15      	ldr	r2, [pc, #84]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 8002872:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002876:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002878:	f7fe fcf2 	bl	8001260 <HAL_GetTick>
 800287c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002880:	f7fe fcee 	bl	8001260 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e1b2      	b.n	8002bf8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002892:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x4d4>
 800289e:	e01b      	b.n	80028d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a08      	ldr	r2, [pc, #32]	; (80028c8 <HAL_RCC_OscConfig+0x51c>)
 80028a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028ac:	f7fe fcd8 	bl	8001260 <HAL_GetTick>
 80028b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028b2:	e00b      	b.n	80028cc <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80028b4:	f7fe fcd4 	bl	8001260 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d904      	bls.n	80028cc <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e198      	b.n	8002bf8 <HAL_RCC_OscConfig+0x84c>
 80028c6:	bf00      	nop
 80028c8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028cc:	4ba3      	ldr	r3, [pc, #652]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1ed      	bne.n	80028b4 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8081 	beq.w	80029e8 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028e6:	4b9e      	ldr	r3, [pc, #632]	; (8002b60 <HAL_RCC_OscConfig+0x7b4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a9d      	ldr	r2, [pc, #628]	; (8002b60 <HAL_RCC_OscConfig+0x7b4>)
 80028ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028f2:	f7fe fcb5 	bl	8001260 <HAL_GetTick>
 80028f6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80028fa:	f7fe fcb1 	bl	8001260 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b64      	cmp	r3, #100	; 0x64
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e175      	b.n	8002bf8 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800290c:	4b94      	ldr	r3, [pc, #592]	; (8002b60 <HAL_RCC_OscConfig+0x7b4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0f0      	beq.n	80028fa <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d106      	bne.n	800292e <HAL_RCC_OscConfig+0x582>
 8002920:	4b8e      	ldr	r3, [pc, #568]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002924:	4a8d      	ldr	r2, [pc, #564]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6713      	str	r3, [r2, #112]	; 0x70
 800292c:	e02d      	b.n	800298a <HAL_RCC_OscConfig+0x5de>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10c      	bne.n	8002950 <HAL_RCC_OscConfig+0x5a4>
 8002936:	4b89      	ldr	r3, [pc, #548]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293a:	4a88      	ldr	r2, [pc, #544]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	6713      	str	r3, [r2, #112]	; 0x70
 8002942:	4b86      	ldr	r3, [pc, #536]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002946:	4a85      	ldr	r2, [pc, #532]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002948:	f023 0304 	bic.w	r3, r3, #4
 800294c:	6713      	str	r3, [r2, #112]	; 0x70
 800294e:	e01c      	b.n	800298a <HAL_RCC_OscConfig+0x5de>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b05      	cmp	r3, #5
 8002956:	d10c      	bne.n	8002972 <HAL_RCC_OscConfig+0x5c6>
 8002958:	4b80      	ldr	r3, [pc, #512]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295c:	4a7f      	ldr	r2, [pc, #508]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 800295e:	f043 0304 	orr.w	r3, r3, #4
 8002962:	6713      	str	r3, [r2, #112]	; 0x70
 8002964:	4b7d      	ldr	r3, [pc, #500]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002968:	4a7c      	ldr	r2, [pc, #496]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6713      	str	r3, [r2, #112]	; 0x70
 8002970:	e00b      	b.n	800298a <HAL_RCC_OscConfig+0x5de>
 8002972:	4b7a      	ldr	r3, [pc, #488]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002976:	4a79      	ldr	r2, [pc, #484]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	6713      	str	r3, [r2, #112]	; 0x70
 800297e:	4b77      	ldr	r3, [pc, #476]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	4a76      	ldr	r2, [pc, #472]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002984:	f023 0304 	bic.w	r3, r3, #4
 8002988:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d015      	beq.n	80029be <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002992:	f7fe fc65 	bl	8001260 <HAL_GetTick>
 8002996:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002998:	e00a      	b.n	80029b0 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800299a:	f7fe fc61 	bl	8001260 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e123      	b.n	8002bf8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029b0:	4b6a      	ldr	r3, [pc, #424]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0ee      	beq.n	800299a <HAL_RCC_OscConfig+0x5ee>
 80029bc:	e014      	b.n	80029e8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029be:	f7fe fc4f 	bl	8001260 <HAL_GetTick>
 80029c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029c4:	e00a      	b.n	80029dc <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7fe fc4b 	bl	8001260 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e10d      	b.n	8002bf8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029dc:	4b5f      	ldr	r3, [pc, #380]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1ee      	bne.n	80029c6 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 8102 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80029f2:	4b5a      	ldr	r3, [pc, #360]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029fa:	2b18      	cmp	r3, #24
 80029fc:	f000 80bd 	beq.w	8002b7a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	f040 8095 	bne.w	8002b34 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0a:	4b54      	ldr	r3, [pc, #336]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a53      	ldr	r2, [pc, #332]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002a10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a16:	f7fe fc23 	bl	8001260 <HAL_GetTick>
 8002a1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1e:	f7fe fc1f 	bl	8001260 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e0e3      	b.n	8002bf8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a30:	4b4a      	ldr	r3, [pc, #296]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f0      	bne.n	8002a1e <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a3c:	4b47      	ldr	r3, [pc, #284]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002a3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a40:	4b48      	ldr	r3, [pc, #288]	; (8002b64 <HAL_RCC_OscConfig+0x7b8>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a4c:	0112      	lsls	r2, r2, #4
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	4942      	ldr	r1, [pc, #264]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	628b      	str	r3, [r1, #40]	; 0x28
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a64:	3b01      	subs	r3, #1
 8002a66:	025b      	lsls	r3, r3, #9
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	3b01      	subs	r3, #1
 8002a72:	041b      	lsls	r3, r3, #16
 8002a74:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	061b      	lsls	r3, r3, #24
 8002a82:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a86:	4935      	ldr	r1, [pc, #212]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002a8c:	4b33      	ldr	r3, [pc, #204]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	4a32      	ldr	r2, [pc, #200]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002a92:	f023 0301 	bic.w	r3, r3, #1
 8002a96:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a98:	4b30      	ldr	r3, [pc, #192]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002a9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a9c:	4b32      	ldr	r3, [pc, #200]	; (8002b68 <HAL_RCC_OscConfig+0x7bc>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002aa4:	00d2      	lsls	r2, r2, #3
 8002aa6:	492d      	ldr	r1, [pc, #180]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002aac:	4b2b      	ldr	r3, [pc, #172]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	f023 020c 	bic.w	r2, r3, #12
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	4928      	ldr	r1, [pc, #160]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002abe:	4b27      	ldr	r3, [pc, #156]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac2:	f023 0202 	bic.w	r2, r3, #2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	4924      	ldr	r1, [pc, #144]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ad0:	4b22      	ldr	r3, [pc, #136]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	4a21      	ldr	r2, [pc, #132]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ada:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002adc:	4b1f      	ldr	r3, [pc, #124]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	4a1e      	ldr	r2, [pc, #120]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	4a1b      	ldr	r2, [pc, #108]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002aee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002af2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002af4:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	4a18      	ldr	r2, [pc, #96]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b00:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a15      	ldr	r2, [pc, #84]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fba8 	bl	8001260 <HAL_GetTick>
 8002b10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b14:	f7fe fba4 	bl	8001260 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e068      	b.n	8002bf8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b26:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x768>
 8002b32:	e060      	b.n	8002bf6 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b34:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a08      	ldr	r2, [pc, #32]	; (8002b5c <HAL_RCC_OscConfig+0x7b0>)
 8002b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe fb8e 	bl	8001260 <HAL_GetTick>
 8002b44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b46:	e011      	b.n	8002b6c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b48:	f7fe fb8a 	bl	8001260 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d90a      	bls.n	8002b6c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e04e      	b.n	8002bf8 <HAL_RCC_OscConfig+0x84c>
 8002b5a:	bf00      	nop
 8002b5c:	58024400 	.word	0x58024400
 8002b60:	58024800 	.word	0x58024800
 8002b64:	fffffc0c 	.word	0xfffffc0c
 8002b68:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b6c:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <HAL_RCC_OscConfig+0x854>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1e7      	bne.n	8002b48 <HAL_RCC_OscConfig+0x79c>
 8002b78:	e03d      	b.n	8002bf6 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b7a:	4b21      	ldr	r3, [pc, #132]	; (8002c00 <HAL_RCC_OscConfig+0x854>)
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b80:	4b1f      	ldr	r3, [pc, #124]	; (8002c00 <HAL_RCC_OscConfig+0x854>)
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d031      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f003 0203 	and.w	r2, r3, #3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d12a      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	091b      	lsrs	r3, r3, #4
 8002ba0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d122      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d11a      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	0a5b      	lsrs	r3, r3, #9
 8002bc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d111      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	0c1b      	lsrs	r3, r3, #16
 8002bd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d108      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	0e1b      	lsrs	r3, r3, #24
 8002be4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d001      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3730      	adds	r7, #48	; 0x30
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	58024400 	.word	0x58024400

08002c04 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e19c      	b.n	8002f52 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c18:	4b8a      	ldr	r3, [pc, #552]	; (8002e44 <HAL_RCC_ClockConfig+0x240>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d910      	bls.n	8002c48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b87      	ldr	r3, [pc, #540]	; (8002e44 <HAL_RCC_ClockConfig+0x240>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 020f 	bic.w	r2, r3, #15
 8002c2e:	4985      	ldr	r1, [pc, #532]	; (8002e44 <HAL_RCC_ClockConfig+0x240>)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b83      	ldr	r3, [pc, #524]	; (8002e44 <HAL_RCC_ClockConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e184      	b.n	8002f52 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d010      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	4b7b      	ldr	r3, [pc, #492]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d908      	bls.n	8002c76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c64:	4b78      	ldr	r3, [pc, #480]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	4975      	ldr	r1, [pc, #468]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d010      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	4b70      	ldr	r3, [pc, #448]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d908      	bls.n	8002ca4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c92:	4b6d      	ldr	r3, [pc, #436]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	496a      	ldr	r1, [pc, #424]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d010      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699a      	ldr	r2, [r3, #24]
 8002cb4:	4b64      	ldr	r3, [pc, #400]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d908      	bls.n	8002cd2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cc0:	4b61      	ldr	r3, [pc, #388]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	495e      	ldr	r1, [pc, #376]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d010      	beq.n	8002d00 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69da      	ldr	r2, [r3, #28]
 8002ce2:	4b59      	ldr	r3, [pc, #356]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d908      	bls.n	8002d00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002cee:	4b56      	ldr	r3, [pc, #344]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	4953      	ldr	r1, [pc, #332]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d010      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	4b4d      	ldr	r3, [pc, #308]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f003 030f 	and.w	r3, r3, #15
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d908      	bls.n	8002d2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1c:	4b4a      	ldr	r3, [pc, #296]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	f023 020f 	bic.w	r2, r3, #15
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4947      	ldr	r1, [pc, #284]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d055      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d3a:	4b43      	ldr	r3, [pc, #268]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	4940      	ldr	r1, [pc, #256]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d107      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d54:	4b3c      	ldr	r3, [pc, #240]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d121      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0f6      	b.n	8002f52 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d107      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d6c:	4b36      	ldr	r3, [pc, #216]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d115      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0ea      	b.n	8002f52 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d107      	bne.n	8002d94 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d84:	4b30      	ldr	r3, [pc, #192]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0de      	b.n	8002f52 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d94:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0d6      	b.n	8002f52 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002da4:	4b28      	ldr	r3, [pc, #160]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f023 0207 	bic.w	r2, r3, #7
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4925      	ldr	r1, [pc, #148]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db6:	f7fe fa53 	bl	8001260 <HAL_GetTick>
 8002dba:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dbe:	f7fe fa4f 	bl	8001260 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e0be      	b.n	8002f52 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd4:	4b1c      	ldr	r3, [pc, #112]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d1eb      	bne.n	8002dbe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d010      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	4b14      	ldr	r3, [pc, #80]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d208      	bcs.n	8002e14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e02:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f023 020f 	bic.w	r2, r3, #15
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	490e      	ldr	r1, [pc, #56]	; (8002e48 <HAL_RCC_ClockConfig+0x244>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_ClockConfig+0x240>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 030f 	and.w	r3, r3, #15
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d214      	bcs.n	8002e4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <HAL_RCC_ClockConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 020f 	bic.w	r2, r3, #15
 8002e2a:	4906      	ldr	r1, [pc, #24]	; (8002e44 <HAL_RCC_ClockConfig+0x240>)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e32:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <HAL_RCC_ClockConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d005      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e086      	b.n	8002f52 <HAL_RCC_ClockConfig+0x34e>
 8002e44:	52002000 	.word	0x52002000
 8002e48:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d010      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	4b3f      	ldr	r3, [pc, #252]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d208      	bcs.n	8002e7a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e68:	4b3c      	ldr	r3, [pc, #240]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	4939      	ldr	r1, [pc, #228]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d010      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	4b34      	ldr	r3, [pc, #208]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d208      	bcs.n	8002ea8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e96:	4b31      	ldr	r3, [pc, #196]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	492e      	ldr	r1, [pc, #184]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d010      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699a      	ldr	r2, [r3, #24]
 8002eb8:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d208      	bcs.n	8002ed6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ec4:	4b25      	ldr	r3, [pc, #148]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	4922      	ldr	r1, [pc, #136]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d010      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69da      	ldr	r2, [r3, #28]
 8002ee6:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d208      	bcs.n	8002f04 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002ef2:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	4917      	ldr	r1, [pc, #92]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f04:	f000 f834 	bl	8002f70 <HAL_RCC_GetSysClockFreq>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	0a1b      	lsrs	r3, r3, #8
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	4912      	ldr	r1, [pc, #72]	; (8002f60 <HAL_RCC_ClockConfig+0x35c>)
 8002f16:	5ccb      	ldrb	r3, [r1, r3]
 8002f18:	f003 031f 	and.w	r3, r3, #31
 8002f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f20:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f22:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <HAL_RCC_ClockConfig+0x358>)
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	4a0d      	ldr	r2, [pc, #52]	; (8002f60 <HAL_RCC_ClockConfig+0x35c>)
 8002f2c:	5cd3      	ldrb	r3, [r2, r3]
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	fa22 f303 	lsr.w	r3, r2, r3
 8002f38:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <HAL_RCC_ClockConfig+0x360>)
 8002f3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f3c:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <HAL_RCC_ClockConfig+0x364>)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002f42:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <HAL_RCC_ClockConfig+0x368>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe f940 	bl	80011cc <HAL_InitTick>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	58024400 	.word	0x58024400
 8002f60:	0800636c 	.word	0x0800636c
 8002f64:	24000004 	.word	0x24000004
 8002f68:	24000000 	.word	0x24000000
 8002f6c:	24000008 	.word	0x24000008

08002f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b089      	sub	sp, #36	; 0x24
 8002f74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f76:	4bb3      	ldr	r3, [pc, #716]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f7e:	2b18      	cmp	r3, #24
 8002f80:	f200 8155 	bhi.w	800322e <HAL_RCC_GetSysClockFreq+0x2be>
 8002f84:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8a:	bf00      	nop
 8002f8c:	08002ff1 	.word	0x08002ff1
 8002f90:	0800322f 	.word	0x0800322f
 8002f94:	0800322f 	.word	0x0800322f
 8002f98:	0800322f 	.word	0x0800322f
 8002f9c:	0800322f 	.word	0x0800322f
 8002fa0:	0800322f 	.word	0x0800322f
 8002fa4:	0800322f 	.word	0x0800322f
 8002fa8:	0800322f 	.word	0x0800322f
 8002fac:	08003017 	.word	0x08003017
 8002fb0:	0800322f 	.word	0x0800322f
 8002fb4:	0800322f 	.word	0x0800322f
 8002fb8:	0800322f 	.word	0x0800322f
 8002fbc:	0800322f 	.word	0x0800322f
 8002fc0:	0800322f 	.word	0x0800322f
 8002fc4:	0800322f 	.word	0x0800322f
 8002fc8:	0800322f 	.word	0x0800322f
 8002fcc:	0800301d 	.word	0x0800301d
 8002fd0:	0800322f 	.word	0x0800322f
 8002fd4:	0800322f 	.word	0x0800322f
 8002fd8:	0800322f 	.word	0x0800322f
 8002fdc:	0800322f 	.word	0x0800322f
 8002fe0:	0800322f 	.word	0x0800322f
 8002fe4:	0800322f 	.word	0x0800322f
 8002fe8:	0800322f 	.word	0x0800322f
 8002fec:	08003023 	.word	0x08003023
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ff0:	4b94      	ldr	r3, [pc, #592]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d009      	beq.n	8003010 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ffc:	4b91      	ldr	r3, [pc, #580]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	08db      	lsrs	r3, r3, #3
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	4a90      	ldr	r2, [pc, #576]	; (8003248 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
 800300c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800300e:	e111      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003010:	4b8d      	ldr	r3, [pc, #564]	; (8003248 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003012:	61bb      	str	r3, [r7, #24]
    break;
 8003014:	e10e      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003016:	4b8d      	ldr	r3, [pc, #564]	; (800324c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003018:	61bb      	str	r3, [r7, #24]
    break;
 800301a:	e10b      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800301c:	4b8c      	ldr	r3, [pc, #560]	; (8003250 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800301e:	61bb      	str	r3, [r7, #24]
    break;
 8003020:	e108      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003022:	4b88      	ldr	r3, [pc, #544]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800302c:	4b85      	ldr	r3, [pc, #532]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003036:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003038:	4b82      	ldr	r3, [pc, #520]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003042:	4b80      	ldr	r3, [pc, #512]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003046:	08db      	lsrs	r3, r3, #3
 8003048:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	fb02 f303 	mul.w	r3, r2, r3
 8003052:	ee07 3a90 	vmov	s15, r3
 8003056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800305a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 80e1 	beq.w	8003228 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2b02      	cmp	r3, #2
 800306a:	f000 8083 	beq.w	8003174 <HAL_RCC_GetSysClockFreq+0x204>
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b02      	cmp	r3, #2
 8003072:	f200 80a1 	bhi.w	80031b8 <HAL_RCC_GetSysClockFreq+0x248>
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_RCC_GetSysClockFreq+0x114>
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d056      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003082:	e099      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003084:	4b6f      	ldr	r3, [pc, #444]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d02d      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003090:	4b6c      	ldr	r3, [pc, #432]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	08db      	lsrs	r3, r3, #3
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	4a6b      	ldr	r2, [pc, #428]	; (8003248 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
 80030a0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	ee07 3a90 	vmov	s15, r3
 80030a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	ee07 3a90 	vmov	s15, r3
 80030b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ba:	4b62      	ldr	r3, [pc, #392]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c2:	ee07 3a90 	vmov	s15, r3
 80030c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003254 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80030ea:	e087      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003258 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030fe:	4b51      	ldr	r3, [pc, #324]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800310e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003112:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003254 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800311a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800311e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800312e:	e065      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	ee07 3a90 	vmov	s15, r3
 8003136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800325c <HAL_RCC_GetSysClockFreq+0x2ec>
 800313e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003142:	4b40      	ldr	r3, [pc, #256]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003152:	ed97 6a02 	vldr	s12, [r7, #8]
 8003156:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003254 <HAL_RCC_GetSysClockFreq+0x2e4>
 800315a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800315e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800316a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003172:	e043      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	ee07 3a90 	vmov	s15, r3
 800317a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003260 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003186:	4b2f      	ldr	r3, [pc, #188]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003196:	ed97 6a02 	vldr	s12, [r7, #8]
 800319a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003254 <HAL_RCC_GetSysClockFreq+0x2e4>
 800319e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031b6:	e021      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800325c <HAL_RCC_GetSysClockFreq+0x2ec>
 80031c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ca:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d2:	ee07 3a90 	vmov	s15, r3
 80031d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031da:	ed97 6a02 	vldr	s12, [r7, #8]
 80031de:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003254 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031fa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	0a5b      	lsrs	r3, r3, #9
 8003202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003206:	3301      	adds	r3, #1
 8003208:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	ee07 3a90 	vmov	s15, r3
 8003210:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003214:	edd7 6a07 	vldr	s13, [r7, #28]
 8003218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800321c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003220:	ee17 3a90 	vmov	r3, s15
 8003224:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003226:	e005      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	61bb      	str	r3, [r7, #24]
    break;
 800322c:	e002      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800322e:	4b07      	ldr	r3, [pc, #28]	; (800324c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003230:	61bb      	str	r3, [r7, #24]
    break;
 8003232:	bf00      	nop
  }

  return sysclockfreq;
 8003234:	69bb      	ldr	r3, [r7, #24]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3724      	adds	r7, #36	; 0x24
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	58024400 	.word	0x58024400
 8003248:	03d09000 	.word	0x03d09000
 800324c:	003d0900 	.word	0x003d0900
 8003250:	007a1200 	.word	0x007a1200
 8003254:	46000000 	.word	0x46000000
 8003258:	4c742400 	.word	0x4c742400
 800325c:	4a742400 	.word	0x4a742400
 8003260:	4af42400 	.word	0x4af42400

08003264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800326a:	f7ff fe81 	bl	8002f70 <HAL_RCC_GetSysClockFreq>
 800326e:	4602      	mov	r2, r0
 8003270:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	0a1b      	lsrs	r3, r3, #8
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	490f      	ldr	r1, [pc, #60]	; (80032b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800327c:	5ccb      	ldrb	r3, [r1, r3]
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	fa22 f303 	lsr.w	r3, r2, r3
 8003286:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003288:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	4a09      	ldr	r2, [pc, #36]	; (80032b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003292:	5cd3      	ldrb	r3, [r2, r3]
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	fa22 f303 	lsr.w	r3, r2, r3
 800329e:	4a07      	ldr	r2, [pc, #28]	; (80032bc <HAL_RCC_GetHCLKFreq+0x58>)
 80032a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032a2:	4a07      	ldr	r2, [pc, #28]	; (80032c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80032a8:	4b04      	ldr	r3, [pc, #16]	; (80032bc <HAL_RCC_GetHCLKFreq+0x58>)
 80032aa:	681b      	ldr	r3, [r3, #0]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	58024400 	.word	0x58024400
 80032b8:	0800636c 	.word	0x0800636c
 80032bc:	24000004 	.word	0x24000004
 80032c0:	24000000 	.word	0x24000000

080032c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80032c8:	f7ff ffcc 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 80032cc:	4602      	mov	r2, r0
 80032ce:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	091b      	lsrs	r3, r3, #4
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	4904      	ldr	r1, [pc, #16]	; (80032ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80032da:	5ccb      	ldrb	r3, [r1, r3]
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	58024400 	.word	0x58024400
 80032ec:	0800636c 	.word	0x0800636c

080032f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80032f4:	f7ff ffb6 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 80032f8:	4602      	mov	r2, r0
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	4904      	ldr	r1, [pc, #16]	; (8003318 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003306:	5ccb      	ldrb	r3, [r1, r3]
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003310:	4618      	mov	r0, r3
 8003312:	bd80      	pop	{r7, pc}
 8003314:	58024400 	.word	0x58024400
 8003318:	0800636c 	.word	0x0800636c

0800331c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003324:	2300      	movs	r3, #0
 8003326:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003328:	2300      	movs	r3, #0
 800332a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d03f      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800333c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003340:	d02a      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003342:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003346:	d824      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003348:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800334c:	d018      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800334e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003352:	d81e      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800335c:	d007      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800335e:	e018      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003360:	4bab      	ldr	r3, [pc, #684]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	4aaa      	ldr	r2, [pc, #680]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800336a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800336c:	e015      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3304      	adds	r3, #4
 8003372:	2102      	movs	r1, #2
 8003374:	4618      	mov	r0, r3
 8003376:	f001 f9cf 	bl	8004718 <RCCEx_PLL2_Config>
 800337a:	4603      	mov	r3, r0
 800337c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800337e:	e00c      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3324      	adds	r3, #36	; 0x24
 8003384:	2102      	movs	r1, #2
 8003386:	4618      	mov	r0, r3
 8003388:	f001 fa78 	bl	800487c <RCCEx_PLL3_Config>
 800338c:	4603      	mov	r3, r0
 800338e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003390:	e003      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	75fb      	strb	r3, [r7, #23]
      break;
 8003396:	e000      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003398:	bf00      	nop
    }

    if(ret == HAL_OK)
 800339a:	7dfb      	ldrb	r3, [r7, #23]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d109      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80033a0:	4b9b      	ldr	r3, [pc, #620]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ac:	4998      	ldr	r1, [pc, #608]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	650b      	str	r3, [r1, #80]	; 0x50
 80033b2:	e001      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b4:	7dfb      	ldrb	r3, [r7, #23]
 80033b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d03d      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d826      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80033cc:	a201      	add	r2, pc, #4	; (adr r2, 80033d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80033ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d2:	bf00      	nop
 80033d4:	080033e9 	.word	0x080033e9
 80033d8:	080033f7 	.word	0x080033f7
 80033dc:	08003409 	.word	0x08003409
 80033e0:	08003421 	.word	0x08003421
 80033e4:	08003421 	.word	0x08003421
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033e8:	4b89      	ldr	r3, [pc, #548]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	4a88      	ldr	r2, [pc, #544]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033f4:	e015      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3304      	adds	r3, #4
 80033fa:	2100      	movs	r1, #0
 80033fc:	4618      	mov	r0, r3
 80033fe:	f001 f98b 	bl	8004718 <RCCEx_PLL2_Config>
 8003402:	4603      	mov	r3, r0
 8003404:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003406:	e00c      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3324      	adds	r3, #36	; 0x24
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f001 fa34 	bl	800487c <RCCEx_PLL3_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003418:	e003      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	75fb      	strb	r3, [r7, #23]
      break;
 800341e:	e000      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003422:	7dfb      	ldrb	r3, [r7, #23]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d109      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003428:	4b79      	ldr	r3, [pc, #484]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800342a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800342c:	f023 0207 	bic.w	r2, r3, #7
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003434:	4976      	ldr	r1, [pc, #472]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003436:	4313      	orrs	r3, r2
 8003438:	650b      	str	r3, [r1, #80]	; 0x50
 800343a:	e001      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343c:	7dfb      	ldrb	r3, [r7, #23]
 800343e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003448:	2b00      	cmp	r3, #0
 800344a:	d042      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003454:	d02b      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800345a:	d825      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800345c:	2bc0      	cmp	r3, #192	; 0xc0
 800345e:	d028      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003460:	2bc0      	cmp	r3, #192	; 0xc0
 8003462:	d821      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003464:	2b80      	cmp	r3, #128	; 0x80
 8003466:	d016      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003468:	2b80      	cmp	r3, #128	; 0x80
 800346a:	d81d      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003470:	2b40      	cmp	r3, #64	; 0x40
 8003472:	d007      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003474:	e018      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003476:	4b66      	ldr	r3, [pc, #408]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347a:	4a65      	ldr	r2, [pc, #404]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800347c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003480:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003482:	e017      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3304      	adds	r3, #4
 8003488:	2100      	movs	r1, #0
 800348a:	4618      	mov	r0, r3
 800348c:	f001 f944 	bl	8004718 <RCCEx_PLL2_Config>
 8003490:	4603      	mov	r3, r0
 8003492:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003494:	e00e      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3324      	adds	r3, #36	; 0x24
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f001 f9ed 	bl	800487c <RCCEx_PLL3_Config>
 80034a2:	4603      	mov	r3, r0
 80034a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80034a6:	e005      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	75fb      	strb	r3, [r7, #23]
      break;
 80034ac:	e002      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80034ae:	bf00      	nop
 80034b0:	e000      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80034b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80034ba:	4b55      	ldr	r3, [pc, #340]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034be:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c6:	4952      	ldr	r1, [pc, #328]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	650b      	str	r3, [r1, #80]	; 0x50
 80034cc:	e001      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
 80034d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d049      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80034e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034e8:	d030      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80034ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034ee:	d82a      	bhi.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80034f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80034f4:	d02c      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80034f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80034fa:	d824      	bhi.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80034fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003500:	d018      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003506:	d81e      	bhi.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800350c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003510:	d007      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003512:	e018      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003514:	4b3e      	ldr	r3, [pc, #248]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	4a3d      	ldr	r2, [pc, #244]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800351a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800351e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003520:	e017      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3304      	adds	r3, #4
 8003526:	2100      	movs	r1, #0
 8003528:	4618      	mov	r0, r3
 800352a:	f001 f8f5 	bl	8004718 <RCCEx_PLL2_Config>
 800352e:	4603      	mov	r3, r0
 8003530:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003532:	e00e      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3324      	adds	r3, #36	; 0x24
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f001 f99e 	bl	800487c <RCCEx_PLL3_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003544:	e005      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	75fb      	strb	r3, [r7, #23]
      break;
 800354a:	e002      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800354c:	bf00      	nop
 800354e:	e000      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003550:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003552:	7dfb      	ldrb	r3, [r7, #23]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10a      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003558:	4b2d      	ldr	r3, [pc, #180]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003566:	492a      	ldr	r1, [pc, #168]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003568:	4313      	orrs	r3, r2
 800356a:	658b      	str	r3, [r1, #88]	; 0x58
 800356c:	e001      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356e:	7dfb      	ldrb	r3, [r7, #23]
 8003570:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357a:	2b00      	cmp	r3, #0
 800357c:	d04c      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003584:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003588:	d030      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800358a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800358e:	d82a      	bhi.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003590:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003594:	d02c      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003596:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800359a:	d824      	bhi.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800359c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035a0:	d018      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80035a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035a6:	d81e      	bhi.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80035ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035b0:	d007      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80035b2:	e018      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035b4:	4b16      	ldr	r3, [pc, #88]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	4a15      	ldr	r2, [pc, #84]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035c0:	e017      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3304      	adds	r3, #4
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f001 f8a5 	bl	8004718 <RCCEx_PLL2_Config>
 80035ce:	4603      	mov	r3, r0
 80035d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80035d2:	e00e      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3324      	adds	r3, #36	; 0x24
 80035d8:	2100      	movs	r1, #0
 80035da:	4618      	mov	r0, r3
 80035dc:	f001 f94e 	bl	800487c <RCCEx_PLL3_Config>
 80035e0:	4603      	mov	r3, r0
 80035e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035e4:	e005      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	75fb      	strb	r3, [r7, #23]
      break;
 80035ea:	e002      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80035ec:	bf00      	nop
 80035ee:	e000      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80035f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10d      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80035f8:	4b05      	ldr	r3, [pc, #20]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003606:	4902      	ldr	r1, [pc, #8]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003608:	4313      	orrs	r3, r2
 800360a:	658b      	str	r3, [r1, #88]	; 0x58
 800360c:	e004      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800360e:	bf00      	nop
 8003610:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003614:	7dfb      	ldrb	r3, [r7, #23]
 8003616:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d032      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003628:	2b30      	cmp	r3, #48	; 0x30
 800362a:	d01c      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800362c:	2b30      	cmp	r3, #48	; 0x30
 800362e:	d817      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003630:	2b20      	cmp	r3, #32
 8003632:	d00c      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003634:	2b20      	cmp	r3, #32
 8003636:	d813      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003638:	2b00      	cmp	r3, #0
 800363a:	d016      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800363c:	2b10      	cmp	r3, #16
 800363e:	d10f      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003640:	4baf      	ldr	r3, [pc, #700]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	4aae      	ldr	r2, [pc, #696]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800364c:	e00e      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3304      	adds	r3, #4
 8003652:	2102      	movs	r1, #2
 8003654:	4618      	mov	r0, r3
 8003656:	f001 f85f 	bl	8004718 <RCCEx_PLL2_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800365e:	e005      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	75fb      	strb	r3, [r7, #23]
      break;
 8003664:	e002      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003666:	bf00      	nop
 8003668:	e000      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800366a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800366c:	7dfb      	ldrb	r3, [r7, #23]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003672:	4ba3      	ldr	r3, [pc, #652]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003676:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800367e:	49a0      	ldr	r1, [pc, #640]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003680:	4313      	orrs	r3, r2
 8003682:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003684:	e001      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003686:	7dfb      	ldrb	r3, [r7, #23]
 8003688:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d047      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800369e:	d030      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80036a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036a4:	d82a      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80036a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036aa:	d02c      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80036ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036b0:	d824      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80036b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036b6:	d018      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80036b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036bc:	d81e      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80036c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c6:	d007      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80036c8:	e018      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ca:	4b8d      	ldr	r3, [pc, #564]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	4a8c      	ldr	r2, [pc, #560]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80036d6:	e017      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3304      	adds	r3, #4
 80036dc:	2100      	movs	r1, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f001 f81a 	bl	8004718 <RCCEx_PLL2_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80036e8:	e00e      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3324      	adds	r3, #36	; 0x24
 80036ee:	2100      	movs	r1, #0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f001 f8c3 	bl	800487c <RCCEx_PLL3_Config>
 80036f6:	4603      	mov	r3, r0
 80036f8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80036fa:	e005      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003700:	e002      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003702:	bf00      	nop
 8003704:	e000      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003706:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003708:	7dfb      	ldrb	r3, [r7, #23]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800370e:	4b7c      	ldr	r3, [pc, #496]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003712:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371a:	4979      	ldr	r1, [pc, #484]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800371c:	4313      	orrs	r3, r2
 800371e:	650b      	str	r3, [r1, #80]	; 0x50
 8003720:	e001      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003722:	7dfb      	ldrb	r3, [r7, #23]
 8003724:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d049      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003736:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800373a:	d02e      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800373c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003740:	d828      	bhi.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003742:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003746:	d02a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003748:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800374c:	d822      	bhi.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800374e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003752:	d026      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003754:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003758:	d81c      	bhi.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800375a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800375e:	d010      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003760:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003764:	d816      	bhi.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003766:	2b00      	cmp	r3, #0
 8003768:	d01d      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800376a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376e:	d111      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3304      	adds	r3, #4
 8003774:	2101      	movs	r1, #1
 8003776:	4618      	mov	r0, r3
 8003778:	f000 ffce 	bl	8004718 <RCCEx_PLL2_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003780:	e012      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3324      	adds	r3, #36	; 0x24
 8003786:	2101      	movs	r1, #1
 8003788:	4618      	mov	r0, r3
 800378a:	f001 f877 	bl	800487c <RCCEx_PLL3_Config>
 800378e:	4603      	mov	r3, r0
 8003790:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003792:	e009      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	75fb      	strb	r3, [r7, #23]
      break;
 8003798:	e006      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800379a:	bf00      	nop
 800379c:	e004      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800379e:	bf00      	nop
 80037a0:	e002      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80037a2:	bf00      	nop
 80037a4:	e000      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80037a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037a8:	7dfb      	ldrb	r3, [r7, #23]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037ae:	4b54      	ldr	r3, [pc, #336]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ba:	4951      	ldr	r1, [pc, #324]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	650b      	str	r3, [r1, #80]	; 0x50
 80037c0:	e001      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c2:	7dfb      	ldrb	r3, [r7, #23]
 80037c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d04b      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037dc:	d02e      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x520>
 80037de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037e2:	d828      	bhi.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80037e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e8:	d02a      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80037ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ee:	d822      	bhi.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80037f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037f4:	d026      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80037f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037fa:	d81c      	bhi.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80037fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003800:	d010      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003806:	d816      	bhi.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003808:	2b00      	cmp	r3, #0
 800380a:	d01d      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800380c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003810:	d111      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3304      	adds	r3, #4
 8003816:	2101      	movs	r1, #1
 8003818:	4618      	mov	r0, r3
 800381a:	f000 ff7d 	bl	8004718 <RCCEx_PLL2_Config>
 800381e:	4603      	mov	r3, r0
 8003820:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003822:	e012      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3324      	adds	r3, #36	; 0x24
 8003828:	2101      	movs	r1, #1
 800382a:	4618      	mov	r0, r3
 800382c:	f001 f826 	bl	800487c <RCCEx_PLL3_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003834:	e009      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	75fb      	strb	r3, [r7, #23]
      break;
 800383a:	e006      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800383c:	bf00      	nop
 800383e:	e004      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003840:	bf00      	nop
 8003842:	e002      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003844:	bf00      	nop
 8003846:	e000      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003848:	bf00      	nop
    }

    if(ret == HAL_OK)
 800384a:	7dfb      	ldrb	r3, [r7, #23]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10a      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003850:	4b2b      	ldr	r3, [pc, #172]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800385e:	4928      	ldr	r1, [pc, #160]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003860:	4313      	orrs	r3, r2
 8003862:	658b      	str	r3, [r1, #88]	; 0x58
 8003864:	e001      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003866:	7dfb      	ldrb	r3, [r7, #23]
 8003868:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d02f      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800387a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800387e:	d00e      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003884:	d814      	bhi.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003886:	2b00      	cmp	r3, #0
 8003888:	d015      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800388a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800388e:	d10f      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003890:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	4a1a      	ldr	r2, [pc, #104]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800389a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800389c:	e00c      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3304      	adds	r3, #4
 80038a2:	2101      	movs	r1, #1
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 ff37 	bl	8004718 <RCCEx_PLL2_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80038ae:	e003      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	75fb      	strb	r3, [r7, #23]
      break;
 80038b4:	e000      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80038b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038b8:	7dfb      	ldrb	r3, [r7, #23]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038be:	4b10      	ldr	r3, [pc, #64]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ca:	490d      	ldr	r1, [pc, #52]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	650b      	str	r3, [r1, #80]	; 0x50
 80038d0:	e001      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
 80038d4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d033      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d81c      	bhi.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80038ea:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80038ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f0:	0800392b 	.word	0x0800392b
 80038f4:	08003905 	.word	0x08003905
 80038f8:	08003913 	.word	0x08003913
 80038fc:	0800392b 	.word	0x0800392b
 8003900:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003904:	4bb8      	ldr	r3, [pc, #736]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003908:	4ab7      	ldr	r2, [pc, #732]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800390a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800390e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003910:	e00c      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3304      	adds	r3, #4
 8003916:	2102      	movs	r1, #2
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fefd 	bl	8004718 <RCCEx_PLL2_Config>
 800391e:	4603      	mov	r3, r0
 8003920:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003922:	e003      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	75fb      	strb	r3, [r7, #23]
      break;
 8003928:	e000      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800392a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003932:	4bad      	ldr	r3, [pc, #692]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003936:	f023 0203 	bic.w	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	49aa      	ldr	r1, [pc, #680]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003940:	4313      	orrs	r3, r2
 8003942:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003944:	e001      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003946:	7dfb      	ldrb	r3, [r7, #23]
 8003948:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 8086 	beq.w	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003958:	4ba4      	ldr	r3, [pc, #656]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4aa3      	ldr	r2, [pc, #652]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800395e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003962:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003964:	f7fd fc7c 	bl	8001260 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800396a:	e009      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396c:	f7fd fc78 	bl	8001260 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b64      	cmp	r3, #100	; 0x64
 8003978:	d902      	bls.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	75fb      	strb	r3, [r7, #23]
        break;
 800397e:	e005      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003980:	4b9a      	ldr	r3, [pc, #616]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0ef      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800398c:	7dfb      	ldrb	r3, [r7, #23]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d166      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003992:	4b95      	ldr	r3, [pc, #596]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003994:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800399c:	4053      	eors	r3, r2
 800399e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d013      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039a6:	4b90      	ldr	r3, [pc, #576]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039b0:	4b8d      	ldr	r3, [pc, #564]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b4:	4a8c      	ldr	r2, [pc, #560]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039bc:	4b8a      	ldr	r3, [pc, #552]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	4a89      	ldr	r2, [pc, #548]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80039c8:	4a87      	ldr	r2, [pc, #540]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039d8:	d115      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039da:	f7fd fc41 	bl	8001260 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039e0:	e00b      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e2:	f7fd fc3d 	bl	8001260 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d902      	bls.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	75fb      	strb	r3, [r7, #23]
            break;
 80039f8:	e005      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039fa:	4b7b      	ldr	r3, [pc, #492]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0ed      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003a06:	7dfb      	ldrb	r3, [r7, #23]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d126      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a1a:	d10d      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003a1c:	4b72      	ldr	r3, [pc, #456]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a2a:	0919      	lsrs	r1, r3, #4
 8003a2c:	4b70      	ldr	r3, [pc, #448]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003a2e:	400b      	ands	r3, r1
 8003a30:	496d      	ldr	r1, [pc, #436]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	610b      	str	r3, [r1, #16]
 8003a36:	e005      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003a38:	4b6b      	ldr	r3, [pc, #428]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	4a6a      	ldr	r2, [pc, #424]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a42:	6113      	str	r3, [r2, #16]
 8003a44:	4b68      	ldr	r3, [pc, #416]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a52:	4965      	ldr	r1, [pc, #404]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	670b      	str	r3, [r1, #112]	; 0x70
 8003a58:	e004      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
 8003a5c:	75bb      	strb	r3, [r7, #22]
 8003a5e:	e001      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d07e      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a74:	2b28      	cmp	r3, #40	; 0x28
 8003a76:	d867      	bhi.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003a78:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7e:	bf00      	nop
 8003a80:	08003b4f 	.word	0x08003b4f
 8003a84:	08003b49 	.word	0x08003b49
 8003a88:	08003b49 	.word	0x08003b49
 8003a8c:	08003b49 	.word	0x08003b49
 8003a90:	08003b49 	.word	0x08003b49
 8003a94:	08003b49 	.word	0x08003b49
 8003a98:	08003b49 	.word	0x08003b49
 8003a9c:	08003b49 	.word	0x08003b49
 8003aa0:	08003b25 	.word	0x08003b25
 8003aa4:	08003b49 	.word	0x08003b49
 8003aa8:	08003b49 	.word	0x08003b49
 8003aac:	08003b49 	.word	0x08003b49
 8003ab0:	08003b49 	.word	0x08003b49
 8003ab4:	08003b49 	.word	0x08003b49
 8003ab8:	08003b49 	.word	0x08003b49
 8003abc:	08003b49 	.word	0x08003b49
 8003ac0:	08003b37 	.word	0x08003b37
 8003ac4:	08003b49 	.word	0x08003b49
 8003ac8:	08003b49 	.word	0x08003b49
 8003acc:	08003b49 	.word	0x08003b49
 8003ad0:	08003b49 	.word	0x08003b49
 8003ad4:	08003b49 	.word	0x08003b49
 8003ad8:	08003b49 	.word	0x08003b49
 8003adc:	08003b49 	.word	0x08003b49
 8003ae0:	08003b4f 	.word	0x08003b4f
 8003ae4:	08003b49 	.word	0x08003b49
 8003ae8:	08003b49 	.word	0x08003b49
 8003aec:	08003b49 	.word	0x08003b49
 8003af0:	08003b49 	.word	0x08003b49
 8003af4:	08003b49 	.word	0x08003b49
 8003af8:	08003b49 	.word	0x08003b49
 8003afc:	08003b49 	.word	0x08003b49
 8003b00:	08003b4f 	.word	0x08003b4f
 8003b04:	08003b49 	.word	0x08003b49
 8003b08:	08003b49 	.word	0x08003b49
 8003b0c:	08003b49 	.word	0x08003b49
 8003b10:	08003b49 	.word	0x08003b49
 8003b14:	08003b49 	.word	0x08003b49
 8003b18:	08003b49 	.word	0x08003b49
 8003b1c:	08003b49 	.word	0x08003b49
 8003b20:	08003b4f 	.word	0x08003b4f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3304      	adds	r3, #4
 8003b28:	2101      	movs	r1, #1
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fdf4 	bl	8004718 <RCCEx_PLL2_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003b34:	e00c      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3324      	adds	r3, #36	; 0x24
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fe9d 	bl	800487c <RCCEx_PLL3_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003b46:	e003      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b4c:	e000      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b50:	7dfb      	ldrb	r3, [r7, #23]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d109      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b56:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b62:	4921      	ldr	r1, [pc, #132]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	654b      	str	r3, [r1, #84]	; 0x54
 8003b68:	e001      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6a:	7dfb      	ldrb	r3, [r7, #23]
 8003b6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d03e      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b7e:	2b05      	cmp	r3, #5
 8003b80:	d820      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003b82:	a201      	add	r2, pc, #4	; (adr r2, 8003b88 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b88:	08003bcb 	.word	0x08003bcb
 8003b8c:	08003ba1 	.word	0x08003ba1
 8003b90:	08003bb3 	.word	0x08003bb3
 8003b94:	08003bcb 	.word	0x08003bcb
 8003b98:	08003bcb 	.word	0x08003bcb
 8003b9c:	08003bcb 	.word	0x08003bcb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fdb6 	bl	8004718 <RCCEx_PLL2_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003bb0:	e00c      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3324      	adds	r3, #36	; 0x24
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fe5f 	bl	800487c <RCCEx_PLL3_Config>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003bc2:	e003      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc8:	e000      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bcc:	7dfb      	ldrb	r3, [r7, #23]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d110      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003bd2:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd6:	f023 0207 	bic.w	r2, r3, #7
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bde:	4902      	ldr	r1, [pc, #8]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	654b      	str	r3, [r1, #84]	; 0x54
 8003be4:	e008      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003be6:	bf00      	nop
 8003be8:	58024400 	.word	0x58024400
 8003bec:	58024800 	.word	0x58024800
 8003bf0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
 8003bf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d039      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0a:	2b05      	cmp	r3, #5
 8003c0c:	d820      	bhi.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003c0e:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003c57 	.word	0x08003c57
 8003c18:	08003c2d 	.word	0x08003c2d
 8003c1c:	08003c3f 	.word	0x08003c3f
 8003c20:	08003c57 	.word	0x08003c57
 8003c24:	08003c57 	.word	0x08003c57
 8003c28:	08003c57 	.word	0x08003c57
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	2101      	movs	r1, #1
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fd70 	bl	8004718 <RCCEx_PLL2_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003c3c:	e00c      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3324      	adds	r3, #36	; 0x24
 8003c42:	2101      	movs	r1, #1
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fe19 	bl	800487c <RCCEx_PLL3_Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003c4e:	e003      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	75fb      	strb	r3, [r7, #23]
      break;
 8003c54:	e000      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003c56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10a      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c5e:	4bb7      	ldr	r3, [pc, #732]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c62:	f023 0207 	bic.w	r2, r3, #7
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6c:	49b3      	ldr	r1, [pc, #716]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	658b      	str	r3, [r1, #88]	; 0x58
 8003c72:	e001      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c74:	7dfb      	ldrb	r3, [r7, #23]
 8003c76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d04b      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c8e:	d02e      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003c90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c94:	d828      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9a:	d02a      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca0:	d822      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003ca2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ca6:	d026      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003ca8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cac:	d81c      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb2:	d010      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb8:	d816      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d01d      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cc2:	d111      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fd24 	bl	8004718 <RCCEx_PLL2_Config>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003cd4:	e012      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3324      	adds	r3, #36	; 0x24
 8003cda:	2102      	movs	r1, #2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fdcd 	bl	800487c <RCCEx_PLL3_Config>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ce6:	e009      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	75fb      	strb	r3, [r7, #23]
      break;
 8003cec:	e006      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003cee:	bf00      	nop
 8003cf0:	e004      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003cf2:	bf00      	nop
 8003cf4:	e002      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003cf6:	bf00      	nop
 8003cf8:	e000      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003cfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10a      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d02:	4b8e      	ldr	r3, [pc, #568]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d06:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d10:	498a      	ldr	r1, [pc, #552]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	654b      	str	r3, [r1, #84]	; 0x54
 8003d16:	e001      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d18:	7dfb      	ldrb	r3, [r7, #23]
 8003d1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d04b      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d32:	d02e      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003d34:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d38:	d828      	bhi.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d3e:	d02a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d44:	d822      	bhi.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003d46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d4a:	d026      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003d4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d50:	d81c      	bhi.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d56:	d010      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d5c:	d816      	bhi.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d01d      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d66:	d111      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fcd2 	bl	8004718 <RCCEx_PLL2_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d78:	e012      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3324      	adds	r3, #36	; 0x24
 8003d7e:	2102      	movs	r1, #2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fd7b 	bl	800487c <RCCEx_PLL3_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d8a:	e009      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d90:	e006      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003d92:	bf00      	nop
 8003d94:	e004      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003d96:	bf00      	nop
 8003d98:	e002      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003d9a:	bf00      	nop
 8003d9c:	e000      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003d9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003da0:	7dfb      	ldrb	r3, [r7, #23]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10a      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003da6:	4b65      	ldr	r3, [pc, #404]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003daa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003db4:	4961      	ldr	r1, [pc, #388]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	658b      	str	r3, [r1, #88]	; 0x58
 8003dba:	e001      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
 8003dbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d04b      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dd2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003dd6:	d02e      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003dd8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ddc:	d828      	bhi.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de2:	d02a      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de8:	d822      	bhi.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003dea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003dee:	d026      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003df0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003df4:	d81c      	bhi.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dfa:	d010      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e00:	d816      	bhi.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d01d      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e0a:	d111      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	2100      	movs	r1, #0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fc80 	bl	8004718 <RCCEx_PLL2_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003e1c:	e012      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3324      	adds	r3, #36	; 0x24
 8003e22:	2102      	movs	r1, #2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 fd29 	bl	800487c <RCCEx_PLL3_Config>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003e2e:	e009      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	75fb      	strb	r3, [r7, #23]
      break;
 8003e34:	e006      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003e36:	bf00      	nop
 8003e38:	e004      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003e3a:	bf00      	nop
 8003e3c:	e002      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003e3e:	bf00      	nop
 8003e40:	e000      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e44:	7dfb      	ldrb	r3, [r7, #23]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e4a:	4b3c      	ldr	r3, [pc, #240]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e58:	4938      	ldr	r1, [pc, #224]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	658b      	str	r3, [r1, #88]	; 0x58
 8003e5e:	e001      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d01a      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e7a:	d10a      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3324      	adds	r3, #36	; 0x24
 8003e80:	2102      	movs	r1, #2
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fcfa 	bl	800487c <RCCEx_PLL3_Config>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003e92:	4b2a      	ldr	r3, [pc, #168]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ea0:	4926      	ldr	r1, [pc, #152]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0310 	and.w	r3, r3, #16
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d01a      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ebc:	d10a      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3324      	adds	r3, #36	; 0x24
 8003ec2:	2102      	movs	r1, #2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fcd9 	bl	800487c <RCCEx_PLL3_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ed4:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ee2:	4916      	ldr	r1, [pc, #88]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d036      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003efa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003efe:	d01f      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003f00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f04:	d817      	bhi.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0e:	d009      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003f10:	e011      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3304      	adds	r3, #4
 8003f16:	2100      	movs	r1, #0
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 fbfd 	bl	8004718 <RCCEx_PLL2_Config>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f22:	e00e      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3324      	adds	r3, #36	; 0x24
 8003f28:	2102      	movs	r1, #2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fca6 	bl	800487c <RCCEx_PLL3_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f34:	e005      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	75fb      	strb	r3, [r7, #23]
      break;
 8003f3a:	e002      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003f3c:	58024400 	.word	0x58024400
      break;
 8003f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f42:	7dfb      	ldrb	r3, [r7, #23]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f48:	4b93      	ldr	r3, [pc, #588]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f56:	4990      	ldr	r1, [pc, #576]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	658b      	str	r3, [r1, #88]	; 0x58
 8003f5c:	e001      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
 8003f60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d033      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f78:	d01c      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003f7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f7e:	d816      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003f80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f84:	d003      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003f86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f8a:	d007      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003f8c:	e00f      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f8e:	4b82      	ldr	r3, [pc, #520]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	4a81      	ldr	r2, [pc, #516]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003f9a:	e00c      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3324      	adds	r3, #36	; 0x24
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fc6a 	bl	800487c <RCCEx_PLL3_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003fac:	e003      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fb6:	7dfb      	ldrb	r3, [r7, #23]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fbc:	4b76      	ldr	r3, [pc, #472]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fca:	4973      	ldr	r1, [pc, #460]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	654b      	str	r3, [r1, #84]	; 0x54
 8003fd0:	e001      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
 8003fd4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d029      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8003fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fee:	d007      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8003ff0:	e00f      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ff2:	4b69      	ldr	r3, [pc, #420]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	4a68      	ldr	r2, [pc, #416]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003ffe:	e00b      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	2102      	movs	r1, #2
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fb86 	bl	8004718 <RCCEx_PLL2_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004010:	e002      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	75fb      	strb	r3, [r7, #23]
      break;
 8004016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004018:	7dfb      	ldrb	r3, [r7, #23]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d109      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800401e:	4b5e      	ldr	r3, [pc, #376]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004022:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402a:	495b      	ldr	r1, [pc, #364]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800402c:	4313      	orrs	r3, r2
 800402e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004030:	e001      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004032:	7dfb      	ldrb	r3, [r7, #23]
 8004034:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3324      	adds	r3, #36	; 0x24
 8004046:	2102      	movs	r1, #2
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fc17 	bl	800487c <RCCEx_PLL3_Config>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d030      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004068:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800406c:	d017      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800406e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004072:	d811      	bhi.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004078:	d013      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800407a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800407e:	d80b      	bhi.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004080:	2b00      	cmp	r3, #0
 8004082:	d010      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004088:	d106      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800408a:	4b43      	ldr	r3, [pc, #268]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	4a42      	ldr	r2, [pc, #264]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004094:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004096:	e007      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	75fb      	strb	r3, [r7, #23]
      break;
 800409c:	e004      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800409e:	bf00      	nop
 80040a0:	e002      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80040a2:	bf00      	nop
 80040a4:	e000      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80040a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a8:	7dfb      	ldrb	r3, [r7, #23]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d109      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040ae:	4b3a      	ldr	r3, [pc, #232]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ba:	4937      	ldr	r1, [pc, #220]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	654b      	str	r3, [r1, #84]	; 0x54
 80040c0:	e001      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c2:	7dfb      	ldrb	r3, [r7, #23]
 80040c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040d2:	4b31      	ldr	r3, [pc, #196]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	492e      	ldr	r1, [pc, #184]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d009      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80040f0:	4b29      	ldr	r3, [pc, #164]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80040fe:	4926      	ldr	r1, [pc, #152]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004100:	4313      	orrs	r3, r2
 8004102:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004110:	4b21      	ldr	r3, [pc, #132]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004114:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800411c:	491e      	ldr	r1, [pc, #120]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800411e:	4313      	orrs	r3, r2
 8004120:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00d      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800412e:	4b1a      	ldr	r3, [pc, #104]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	4a19      	ldr	r2, [pc, #100]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004134:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004138:	6113      	str	r3, [r2, #16]
 800413a:	4b17      	ldr	r3, [pc, #92]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004144:	4914      	ldr	r1, [pc, #80]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004146:	4313      	orrs	r3, r2
 8004148:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	da08      	bge.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004152:	4b11      	ldr	r3, [pc, #68]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004156:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415e:	490e      	ldr	r1, [pc, #56]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004160:	4313      	orrs	r3, r2
 8004162:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d009      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004174:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	4906      	ldr	r1, [pc, #24]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004180:	4313      	orrs	r3, r2
 8004182:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004184:	7dbb      	ldrb	r3, [r7, #22]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	e000      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	58024400 	.word	0x58024400

0800419c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80041a0:	f7ff f860 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	091b      	lsrs	r3, r3, #4
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	4904      	ldr	r1, [pc, #16]	; (80041c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80041b2:	5ccb      	ldrb	r3, [r1, r3]
 80041b4:	f003 031f 	and.w	r3, r3, #31
 80041b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80041bc:	4618      	mov	r0, r3
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	58024400 	.word	0x58024400
 80041c4:	0800636c 	.word	0x0800636c

080041c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b089      	sub	sp, #36	; 0x24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041d0:	4ba1      	ldr	r3, [pc, #644]	; (8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80041da:	4b9f      	ldr	r3, [pc, #636]	; (8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	0b1b      	lsrs	r3, r3, #12
 80041e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80041e6:	4b9c      	ldr	r3, [pc, #624]	; (8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	091b      	lsrs	r3, r3, #4
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80041f2:	4b99      	ldr	r3, [pc, #612]	; (8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f6:	08db      	lsrs	r3, r3, #3
 80041f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	fb02 f303 	mul.w	r3, r2, r3
 8004202:	ee07 3a90 	vmov	s15, r3
 8004206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8111 	beq.w	8004438 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	2b02      	cmp	r3, #2
 800421a:	f000 8083 	beq.w	8004324 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	2b02      	cmp	r3, #2
 8004222:	f200 80a1 	bhi.w	8004368 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d056      	beq.n	80042e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004232:	e099      	b.n	8004368 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004234:	4b88      	ldr	r3, [pc, #544]	; (8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b00      	cmp	r3, #0
 800423e:	d02d      	beq.n	800429c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004240:	4b85      	ldr	r3, [pc, #532]	; (8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	08db      	lsrs	r3, r3, #3
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	4a84      	ldr	r2, [pc, #528]	; (800445c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800424c:	fa22 f303 	lsr.w	r3, r2, r3
 8004250:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	ee07 3a90 	vmov	s15, r3
 8004258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800426a:	4b7b      	ldr	r3, [pc, #492]	; (8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004272:	ee07 3a90 	vmov	s15, r3
 8004276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800427a:	ed97 6a03 	vldr	s12, [r7, #12]
 800427e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004460 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800428a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800428e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004296:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800429a:	e087      	b.n	80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	ee07 3a90 	vmov	s15, r3
 80042a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004464 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80042aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ae:	4b6a      	ldr	r3, [pc, #424]	; (8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b6:	ee07 3a90 	vmov	s15, r3
 80042ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042be:	ed97 6a03 	vldr	s12, [r7, #12]
 80042c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004460 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042de:	e065      	b.n	80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	ee07 3a90 	vmov	s15, r3
 80042e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80042ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042f2:	4b59      	ldr	r3, [pc, #356]	; (8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042fa:	ee07 3a90 	vmov	s15, r3
 80042fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004302:	ed97 6a03 	vldr	s12, [r7, #12]
 8004306:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004460 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800430a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800430e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800431a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800431e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004322:	e043      	b.n	80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	ee07 3a90 	vmov	s15, r3
 800432a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800446c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004336:	4b48      	ldr	r3, [pc, #288]	; (8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800433e:	ee07 3a90 	vmov	s15, r3
 8004342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004346:	ed97 6a03 	vldr	s12, [r7, #12]
 800434a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004460 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800434e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800435a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800435e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004362:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004366:	e021      	b.n	80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	ee07 3a90 	vmov	s15, r3
 800436e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004372:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800437a:	4b37      	ldr	r3, [pc, #220]	; (8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004382:	ee07 3a90 	vmov	s15, r3
 8004386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800438a:	ed97 6a03 	vldr	s12, [r7, #12]
 800438e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004460 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800439a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800439e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80043ac:	4b2a      	ldr	r3, [pc, #168]	; (8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	0a5b      	lsrs	r3, r3, #9
 80043b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80043ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043d2:	ee17 2a90 	vmov	r2, s15
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80043da:	4b1f      	ldr	r3, [pc, #124]	; (8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	0c1b      	lsrs	r3, r3, #16
 80043e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043e4:	ee07 3a90 	vmov	s15, r3
 80043e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80043f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004400:	ee17 2a90 	vmov	r2, s15
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004408:	4b13      	ldr	r3, [pc, #76]	; (8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440c:	0e1b      	lsrs	r3, r3, #24
 800440e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800441e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004422:	edd7 6a07 	vldr	s13, [r7, #28]
 8004426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800442a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800442e:	ee17 2a90 	vmov	r2, s15
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004436:	e008      	b.n	800444a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	609a      	str	r2, [r3, #8]
}
 800444a:	bf00      	nop
 800444c:	3724      	adds	r7, #36	; 0x24
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	58024400 	.word	0x58024400
 800445c:	03d09000 	.word	0x03d09000
 8004460:	46000000 	.word	0x46000000
 8004464:	4c742400 	.word	0x4c742400
 8004468:	4a742400 	.word	0x4a742400
 800446c:	4af42400 	.word	0x4af42400

08004470 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004470:	b480      	push	{r7}
 8004472:	b089      	sub	sp, #36	; 0x24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004478:	4ba1      	ldr	r3, [pc, #644]	; (8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	f003 0303 	and.w	r3, r3, #3
 8004480:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004482:	4b9f      	ldr	r3, [pc, #636]	; (8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004486:	0d1b      	lsrs	r3, r3, #20
 8004488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800448c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800448e:	4b9c      	ldr	r3, [pc, #624]	; (8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004492:	0a1b      	lsrs	r3, r3, #8
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800449a:	4b99      	ldr	r3, [pc, #612]	; (8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	08db      	lsrs	r3, r3, #3
 80044a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	fb02 f303 	mul.w	r3, r2, r3
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 8111 	beq.w	80046e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	f000 8083 	beq.w	80045cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	f200 80a1 	bhi.w	8004610 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d056      	beq.n	8004588 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80044da:	e099      	b.n	8004610 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044dc:	4b88      	ldr	r3, [pc, #544]	; (8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0320 	and.w	r3, r3, #32
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d02d      	beq.n	8004544 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044e8:	4b85      	ldr	r3, [pc, #532]	; (8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	08db      	lsrs	r3, r3, #3
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	4a84      	ldr	r2, [pc, #528]	; (8004704 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80044f4:	fa22 f303 	lsr.w	r3, r2, r3
 80044f8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	ee07 3a90 	vmov	s15, r3
 8004500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004512:	4b7b      	ldr	r3, [pc, #492]	; (8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004522:	ed97 6a03 	vldr	s12, [r7, #12]
 8004526:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004708 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800452a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800452e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800453a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004542:	e087      	b.n	8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800470c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004556:	4b6a      	ldr	r3, [pc, #424]	; (8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455e:	ee07 3a90 	vmov	s15, r3
 8004562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004566:	ed97 6a03 	vldr	s12, [r7, #12]
 800456a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004708 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800456e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800457a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800457e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004582:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004586:	e065      	b.n	8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	ee07 3a90 	vmov	s15, r3
 800458e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004592:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800459a:	4b59      	ldr	r3, [pc, #356]	; (8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004708 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045ca:	e043      	b.n	8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	ee07 3a90 	vmov	s15, r3
 80045d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004714 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80045da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045de:	4b48      	ldr	r3, [pc, #288]	; (8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e6:	ee07 3a90 	vmov	s15, r3
 80045ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80045f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004708 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800460e:	e021      	b.n	8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800461e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004622:	4b37      	ldr	r3, [pc, #220]	; (8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004632:	ed97 6a03 	vldr	s12, [r7, #12]
 8004636:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004708 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800463a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800463e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800464a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004652:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004654:	4b2a      	ldr	r3, [pc, #168]	; (8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	0a5b      	lsrs	r3, r3, #9
 800465a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004666:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800466a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800466e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800467a:	ee17 2a90 	vmov	r2, s15
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004682:	4b1f      	ldr	r3, [pc, #124]	; (8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	0c1b      	lsrs	r3, r3, #16
 8004688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800468c:	ee07 3a90 	vmov	s15, r3
 8004690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004694:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004698:	ee37 7a87 	vadd.f32	s14, s15, s14
 800469c:	edd7 6a07 	vldr	s13, [r7, #28]
 80046a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046a8:	ee17 2a90 	vmov	r2, s15
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80046b0:	4b13      	ldr	r3, [pc, #76]	; (8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	0e1b      	lsrs	r3, r3, #24
 80046b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80046ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046d6:	ee17 2a90 	vmov	r2, s15
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80046de:	e008      	b.n	80046f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	609a      	str	r2, [r3, #8]
}
 80046f2:	bf00      	nop
 80046f4:	3724      	adds	r7, #36	; 0x24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	58024400 	.word	0x58024400
 8004704:	03d09000 	.word	0x03d09000
 8004708:	46000000 	.word	0x46000000
 800470c:	4c742400 	.word	0x4c742400
 8004710:	4a742400 	.word	0x4a742400
 8004714:	4af42400 	.word	0x4af42400

08004718 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004726:	4b53      	ldr	r3, [pc, #332]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b03      	cmp	r3, #3
 8004730:	d101      	bne.n	8004736 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e099      	b.n	800486a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004736:	4b4f      	ldr	r3, [pc, #316]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a4e      	ldr	r2, [pc, #312]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 800473c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004742:	f7fc fd8d 	bl	8001260 <HAL_GetTick>
 8004746:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004748:	e008      	b.n	800475c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800474a:	f7fc fd89 	bl	8001260 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e086      	b.n	800486a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800475c:	4b45      	ldr	r3, [pc, #276]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1f0      	bne.n	800474a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004768:	4b42      	ldr	r3, [pc, #264]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 800476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	031b      	lsls	r3, r3, #12
 8004776:	493f      	ldr	r1, [pc, #252]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 8004778:	4313      	orrs	r3, r2
 800477a:	628b      	str	r3, [r1, #40]	; 0x28
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	3b01      	subs	r3, #1
 8004782:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	3b01      	subs	r3, #1
 800478c:	025b      	lsls	r3, r3, #9
 800478e:	b29b      	uxth	r3, r3
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	3b01      	subs	r3, #1
 8004798:	041b      	lsls	r3, r3, #16
 800479a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	061b      	lsls	r3, r3, #24
 80047a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047ac:	4931      	ldr	r1, [pc, #196]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80047b2:	4b30      	ldr	r3, [pc, #192]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	492d      	ldr	r1, [pc, #180]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80047c4:	4b2b      	ldr	r3, [pc, #172]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	f023 0220 	bic.w	r2, r3, #32
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	4928      	ldr	r1, [pc, #160]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80047d6:	4b27      	ldr	r3, [pc, #156]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	4a26      	ldr	r2, [pc, #152]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 80047dc:	f023 0310 	bic.w	r3, r3, #16
 80047e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80047e2:	4b24      	ldr	r3, [pc, #144]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 80047e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047e6:	4b24      	ldr	r3, [pc, #144]	; (8004878 <RCCEx_PLL2_Config+0x160>)
 80047e8:	4013      	ands	r3, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	69d2      	ldr	r2, [r2, #28]
 80047ee:	00d2      	lsls	r2, r2, #3
 80047f0:	4920      	ldr	r1, [pc, #128]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80047f6:	4b1f      	ldr	r3, [pc, #124]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 80047f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fa:	4a1e      	ldr	r2, [pc, #120]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 80047fc:	f043 0310 	orr.w	r3, r3, #16
 8004800:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d106      	bne.n	8004816 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004808:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	4a19      	ldr	r2, [pc, #100]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 800480e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004812:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004814:	e00f      	b.n	8004836 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d106      	bne.n	800482a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800481c:	4b15      	ldr	r3, [pc, #84]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	4a14      	ldr	r2, [pc, #80]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 8004822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004826:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004828:	e005      	b.n	8004836 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800482a:	4b12      	ldr	r3, [pc, #72]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	4a11      	ldr	r2, [pc, #68]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 8004830:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004834:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004836:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a0e      	ldr	r2, [pc, #56]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 800483c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004840:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004842:	f7fc fd0d 	bl	8001260 <HAL_GetTick>
 8004846:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004848:	e008      	b.n	800485c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800484a:	f7fc fd09 	bl	8001260 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e006      	b.n	800486a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800485c:	4b05      	ldr	r3, [pc, #20]	; (8004874 <RCCEx_PLL2_Config+0x15c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0f0      	beq.n	800484a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004868:	7bfb      	ldrb	r3, [r7, #15]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	58024400 	.word	0x58024400
 8004878:	ffff0007 	.word	0xffff0007

0800487c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800488a:	4b53      	ldr	r3, [pc, #332]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b03      	cmp	r3, #3
 8004894:	d101      	bne.n	800489a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e099      	b.n	80049ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800489a:	4b4f      	ldr	r3, [pc, #316]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a4e      	ldr	r2, [pc, #312]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 80048a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a6:	f7fc fcdb 	bl	8001260 <HAL_GetTick>
 80048aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048ac:	e008      	b.n	80048c0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80048ae:	f7fc fcd7 	bl	8001260 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e086      	b.n	80049ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048c0:	4b45      	ldr	r3, [pc, #276]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f0      	bne.n	80048ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80048cc:	4b42      	ldr	r3, [pc, #264]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	051b      	lsls	r3, r3, #20
 80048da:	493f      	ldr	r1, [pc, #252]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	628b      	str	r3, [r1, #40]	; 0x28
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	3b01      	subs	r3, #1
 80048e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	025b      	lsls	r3, r3, #9
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	041b      	lsls	r3, r3, #16
 80048fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	3b01      	subs	r3, #1
 800490a:	061b      	lsls	r3, r3, #24
 800490c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004910:	4931      	ldr	r1, [pc, #196]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 8004912:	4313      	orrs	r3, r2
 8004914:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004916:	4b30      	ldr	r3, [pc, #192]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	492d      	ldr	r1, [pc, #180]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 8004924:	4313      	orrs	r3, r2
 8004926:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004928:	4b2b      	ldr	r3, [pc, #172]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	4928      	ldr	r1, [pc, #160]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 8004936:	4313      	orrs	r3, r2
 8004938:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800493a:	4b27      	ldr	r3, [pc, #156]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	4a26      	ldr	r2, [pc, #152]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 8004940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004944:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004946:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 8004948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800494a:	4b24      	ldr	r3, [pc, #144]	; (80049dc <RCCEx_PLL3_Config+0x160>)
 800494c:	4013      	ands	r3, r2
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	69d2      	ldr	r2, [r2, #28]
 8004952:	00d2      	lsls	r2, r2, #3
 8004954:	4920      	ldr	r1, [pc, #128]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 8004956:	4313      	orrs	r3, r2
 8004958:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800495a:	4b1f      	ldr	r3, [pc, #124]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	4a1e      	ldr	r2, [pc, #120]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 8004960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004964:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d106      	bne.n	800497a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800496c:	4b1a      	ldr	r3, [pc, #104]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	4a19      	ldr	r2, [pc, #100]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 8004972:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004976:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004978:	e00f      	b.n	800499a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d106      	bne.n	800498e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004980:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	4a14      	ldr	r2, [pc, #80]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 8004986:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800498a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800498c:	e005      	b.n	800499a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800498e:	4b12      	ldr	r3, [pc, #72]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	4a11      	ldr	r2, [pc, #68]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 8004994:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004998:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800499a:	4b0f      	ldr	r3, [pc, #60]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a0e      	ldr	r2, [pc, #56]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 80049a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a6:	f7fc fc5b 	bl	8001260 <HAL_GetTick>
 80049aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049ac:	e008      	b.n	80049c0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80049ae:	f7fc fc57 	bl	8001260 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e006      	b.n	80049ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <RCCEx_PLL3_Config+0x15c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f0      	beq.n	80049ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	58024400 	.word	0x58024400
 80049dc:	ffff0007 	.word	0xffff0007

080049e0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e0f1      	b.n	8004bd6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a78      	ldr	r2, [pc, #480]	; (8004be0 <HAL_SPI_Init+0x200>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00f      	beq.n	8004a22 <HAL_SPI_Init+0x42>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a77      	ldr	r2, [pc, #476]	; (8004be4 <HAL_SPI_Init+0x204>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00a      	beq.n	8004a22 <HAL_SPI_Init+0x42>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a75      	ldr	r2, [pc, #468]	; (8004be8 <HAL_SPI_Init+0x208>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d005      	beq.n	8004a22 <HAL_SPI_Init+0x42>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	2b0f      	cmp	r3, #15
 8004a1c:	d901      	bls.n	8004a22 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e0d9      	b.n	8004bd6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f8e2 	bl	8004bec <SPI_GetPacketSize>
 8004a28:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a6c      	ldr	r2, [pc, #432]	; (8004be0 <HAL_SPI_Init+0x200>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00c      	beq.n	8004a4e <HAL_SPI_Init+0x6e>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a6a      	ldr	r2, [pc, #424]	; (8004be4 <HAL_SPI_Init+0x204>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d007      	beq.n	8004a4e <HAL_SPI_Init+0x6e>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a69      	ldr	r2, [pc, #420]	; (8004be8 <HAL_SPI_Init+0x208>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d002      	beq.n	8004a4e <HAL_SPI_Init+0x6e>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b08      	cmp	r3, #8
 8004a4c:	d811      	bhi.n	8004a72 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004a52:	4a63      	ldr	r2, [pc, #396]	; (8004be0 <HAL_SPI_Init+0x200>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d009      	beq.n	8004a6c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a61      	ldr	r2, [pc, #388]	; (8004be4 <HAL_SPI_Init+0x204>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d004      	beq.n	8004a6c <HAL_SPI_Init+0x8c>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a60      	ldr	r2, [pc, #384]	; (8004be8 <HAL_SPI_Init+0x208>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d104      	bne.n	8004a76 <HAL_SPI_Init+0x96>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2b10      	cmp	r3, #16
 8004a70:	d901      	bls.n	8004a76 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e0af      	b.n	8004bd6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7fc f91c 	bl	8000cc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0201 	bic.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004ab2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004abc:	d119      	bne.n	8004af2 <HAL_SPI_Init+0x112>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ac6:	d103      	bne.n	8004ad0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d008      	beq.n	8004ae2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10c      	bne.n	8004af2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004adc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ae0:	d107      	bne.n	8004af2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004af0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69da      	ldr	r2, [r3, #28]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afa:	431a      	orrs	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b04:	ea42 0103 	orr.w	r1, r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b52:	ea42 0103 	orr.w	r1, r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d113      	bne.n	8004b92 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b7c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b90:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0201 	bic.w	r2, r2, #1
 8004ba0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40013000 	.word	0x40013000
 8004be4:	40003800 	.word	0x40003800
 8004be8:	40003c00 	.word	0x40003c00

08004bec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	3301      	adds	r3, #1
 8004c04:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	3307      	adds	r3, #7
 8004c0a:	08db      	lsrs	r3, r3, #3
 8004c0c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	fb02 f303 	mul.w	r3, r2, r3
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b082      	sub	sp, #8
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e042      	b.n	8004cba <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fc f8c8 	bl	8000ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2224      	movs	r2, #36	; 0x24
 8004c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0201 	bic.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f82d 	bl	8004cc4 <UART_SetConfig>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e022      	b.n	8004cba <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fd81 	bl	8005784 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c90:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ca0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f042 0201 	orr.w	r2, r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fe08 	bl	80058c8 <UART_CheckIdleState>
 8004cb8:	4603      	mov	r3, r0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
	...

08004cc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc4:	b5b0      	push	{r4, r5, r7, lr}
 8004cc6:	b08e      	sub	sp, #56	; 0x38
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	4bbf      	ldr	r3, [pc, #764]	; (8004ff0 <UART_SetConfig+0x32c>)
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6812      	ldr	r2, [r2, #0]
 8004cf8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004cfa:	430b      	orrs	r3, r1
 8004cfc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4ab5      	ldr	r2, [pc, #724]	; (8004ff4 <UART_SetConfig+0x330>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d004      	beq.n	8004d2e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	4bb0      	ldr	r3, [pc, #704]	; (8004ff8 <UART_SetConfig+0x334>)
 8004d36:	4013      	ands	r3, r2
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6812      	ldr	r2, [r2, #0]
 8004d3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d3e:	430b      	orrs	r3, r1
 8004d40:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	f023 010f 	bic.w	r1, r3, #15
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4aa7      	ldr	r2, [pc, #668]	; (8004ffc <UART_SetConfig+0x338>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d176      	bne.n	8004e50 <UART_SetConfig+0x18c>
 8004d62:	4ba7      	ldr	r3, [pc, #668]	; (8005000 <UART_SetConfig+0x33c>)
 8004d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d6a:	2b28      	cmp	r3, #40	; 0x28
 8004d6c:	d86c      	bhi.n	8004e48 <UART_SetConfig+0x184>
 8004d6e:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <UART_SetConfig+0xb0>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004e19 	.word	0x08004e19
 8004d78:	08004e49 	.word	0x08004e49
 8004d7c:	08004e49 	.word	0x08004e49
 8004d80:	08004e49 	.word	0x08004e49
 8004d84:	08004e49 	.word	0x08004e49
 8004d88:	08004e49 	.word	0x08004e49
 8004d8c:	08004e49 	.word	0x08004e49
 8004d90:	08004e49 	.word	0x08004e49
 8004d94:	08004e21 	.word	0x08004e21
 8004d98:	08004e49 	.word	0x08004e49
 8004d9c:	08004e49 	.word	0x08004e49
 8004da0:	08004e49 	.word	0x08004e49
 8004da4:	08004e49 	.word	0x08004e49
 8004da8:	08004e49 	.word	0x08004e49
 8004dac:	08004e49 	.word	0x08004e49
 8004db0:	08004e49 	.word	0x08004e49
 8004db4:	08004e29 	.word	0x08004e29
 8004db8:	08004e49 	.word	0x08004e49
 8004dbc:	08004e49 	.word	0x08004e49
 8004dc0:	08004e49 	.word	0x08004e49
 8004dc4:	08004e49 	.word	0x08004e49
 8004dc8:	08004e49 	.word	0x08004e49
 8004dcc:	08004e49 	.word	0x08004e49
 8004dd0:	08004e49 	.word	0x08004e49
 8004dd4:	08004e31 	.word	0x08004e31
 8004dd8:	08004e49 	.word	0x08004e49
 8004ddc:	08004e49 	.word	0x08004e49
 8004de0:	08004e49 	.word	0x08004e49
 8004de4:	08004e49 	.word	0x08004e49
 8004de8:	08004e49 	.word	0x08004e49
 8004dec:	08004e49 	.word	0x08004e49
 8004df0:	08004e49 	.word	0x08004e49
 8004df4:	08004e39 	.word	0x08004e39
 8004df8:	08004e49 	.word	0x08004e49
 8004dfc:	08004e49 	.word	0x08004e49
 8004e00:	08004e49 	.word	0x08004e49
 8004e04:	08004e49 	.word	0x08004e49
 8004e08:	08004e49 	.word	0x08004e49
 8004e0c:	08004e49 	.word	0x08004e49
 8004e10:	08004e49 	.word	0x08004e49
 8004e14:	08004e41 	.word	0x08004e41
 8004e18:	2301      	movs	r3, #1
 8004e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e1e:	e222      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004e20:	2304      	movs	r3, #4
 8004e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e26:	e21e      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004e28:	2308      	movs	r3, #8
 8004e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e2e:	e21a      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004e30:	2310      	movs	r3, #16
 8004e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e36:	e216      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004e38:	2320      	movs	r3, #32
 8004e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e3e:	e212      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004e40:	2340      	movs	r3, #64	; 0x40
 8004e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e46:	e20e      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004e48:	2380      	movs	r3, #128	; 0x80
 8004e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e4e:	e20a      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a6b      	ldr	r2, [pc, #428]	; (8005004 <UART_SetConfig+0x340>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d130      	bne.n	8004ebc <UART_SetConfig+0x1f8>
 8004e5a:	4b69      	ldr	r3, [pc, #420]	; (8005000 <UART_SetConfig+0x33c>)
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	2b05      	cmp	r3, #5
 8004e64:	d826      	bhi.n	8004eb4 <UART_SetConfig+0x1f0>
 8004e66:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <UART_SetConfig+0x1a8>)
 8004e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6c:	08004e85 	.word	0x08004e85
 8004e70:	08004e8d 	.word	0x08004e8d
 8004e74:	08004e95 	.word	0x08004e95
 8004e78:	08004e9d 	.word	0x08004e9d
 8004e7c:	08004ea5 	.word	0x08004ea5
 8004e80:	08004ead 	.word	0x08004ead
 8004e84:	2300      	movs	r3, #0
 8004e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e8a:	e1ec      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e92:	e1e8      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004e94:	2308      	movs	r3, #8
 8004e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e9a:	e1e4      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ea2:	e1e0      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004ea4:	2320      	movs	r3, #32
 8004ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eaa:	e1dc      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004eac:	2340      	movs	r3, #64	; 0x40
 8004eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eb2:	e1d8      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004eb4:	2380      	movs	r3, #128	; 0x80
 8004eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eba:	e1d4      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a51      	ldr	r2, [pc, #324]	; (8005008 <UART_SetConfig+0x344>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d130      	bne.n	8004f28 <UART_SetConfig+0x264>
 8004ec6:	4b4e      	ldr	r3, [pc, #312]	; (8005000 <UART_SetConfig+0x33c>)
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	2b05      	cmp	r3, #5
 8004ed0:	d826      	bhi.n	8004f20 <UART_SetConfig+0x25c>
 8004ed2:	a201      	add	r2, pc, #4	; (adr r2, 8004ed8 <UART_SetConfig+0x214>)
 8004ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed8:	08004ef1 	.word	0x08004ef1
 8004edc:	08004ef9 	.word	0x08004ef9
 8004ee0:	08004f01 	.word	0x08004f01
 8004ee4:	08004f09 	.word	0x08004f09
 8004ee8:	08004f11 	.word	0x08004f11
 8004eec:	08004f19 	.word	0x08004f19
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ef6:	e1b6      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004ef8:	2304      	movs	r3, #4
 8004efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004efe:	e1b2      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004f00:	2308      	movs	r3, #8
 8004f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f06:	e1ae      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004f08:	2310      	movs	r3, #16
 8004f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f0e:	e1aa      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004f10:	2320      	movs	r3, #32
 8004f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f16:	e1a6      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004f18:	2340      	movs	r3, #64	; 0x40
 8004f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f1e:	e1a2      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004f20:	2380      	movs	r3, #128	; 0x80
 8004f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f26:	e19e      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a37      	ldr	r2, [pc, #220]	; (800500c <UART_SetConfig+0x348>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d130      	bne.n	8004f94 <UART_SetConfig+0x2d0>
 8004f32:	4b33      	ldr	r3, [pc, #204]	; (8005000 <UART_SetConfig+0x33c>)
 8004f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	2b05      	cmp	r3, #5
 8004f3c:	d826      	bhi.n	8004f8c <UART_SetConfig+0x2c8>
 8004f3e:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <UART_SetConfig+0x280>)
 8004f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f44:	08004f5d 	.word	0x08004f5d
 8004f48:	08004f65 	.word	0x08004f65
 8004f4c:	08004f6d 	.word	0x08004f6d
 8004f50:	08004f75 	.word	0x08004f75
 8004f54:	08004f7d 	.word	0x08004f7d
 8004f58:	08004f85 	.word	0x08004f85
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f62:	e180      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004f64:	2304      	movs	r3, #4
 8004f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f6a:	e17c      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004f6c:	2308      	movs	r3, #8
 8004f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f72:	e178      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004f74:	2310      	movs	r3, #16
 8004f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f7a:	e174      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004f7c:	2320      	movs	r3, #32
 8004f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f82:	e170      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004f84:	2340      	movs	r3, #64	; 0x40
 8004f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f8a:	e16c      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004f8c:	2380      	movs	r3, #128	; 0x80
 8004f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f92:	e168      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a1d      	ldr	r2, [pc, #116]	; (8005010 <UART_SetConfig+0x34c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d142      	bne.n	8005024 <UART_SetConfig+0x360>
 8004f9e:	4b18      	ldr	r3, [pc, #96]	; (8005000 <UART_SetConfig+0x33c>)
 8004fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	2b05      	cmp	r3, #5
 8004fa8:	d838      	bhi.n	800501c <UART_SetConfig+0x358>
 8004faa:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <UART_SetConfig+0x2ec>)
 8004fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb0:	08004fc9 	.word	0x08004fc9
 8004fb4:	08004fd1 	.word	0x08004fd1
 8004fb8:	08004fd9 	.word	0x08004fd9
 8004fbc:	08004fe1 	.word	0x08004fe1
 8004fc0:	08004fe9 	.word	0x08004fe9
 8004fc4:	08005015 	.word	0x08005015
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fce:	e14a      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fd6:	e146      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004fd8:	2308      	movs	r3, #8
 8004fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fde:	e142      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fe6:	e13e      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004fe8:	2320      	movs	r3, #32
 8004fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fee:	e13a      	b.n	8005266 <UART_SetConfig+0x5a2>
 8004ff0:	cfff69f3 	.word	0xcfff69f3
 8004ff4:	58000c00 	.word	0x58000c00
 8004ff8:	11fff4ff 	.word	0x11fff4ff
 8004ffc:	40011000 	.word	0x40011000
 8005000:	58024400 	.word	0x58024400
 8005004:	40004400 	.word	0x40004400
 8005008:	40004800 	.word	0x40004800
 800500c:	40004c00 	.word	0x40004c00
 8005010:	40005000 	.word	0x40005000
 8005014:	2340      	movs	r3, #64	; 0x40
 8005016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800501a:	e124      	b.n	8005266 <UART_SetConfig+0x5a2>
 800501c:	2380      	movs	r3, #128	; 0x80
 800501e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005022:	e120      	b.n	8005266 <UART_SetConfig+0x5a2>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4acc      	ldr	r2, [pc, #816]	; (800535c <UART_SetConfig+0x698>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d176      	bne.n	800511c <UART_SetConfig+0x458>
 800502e:	4bcc      	ldr	r3, [pc, #816]	; (8005360 <UART_SetConfig+0x69c>)
 8005030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005032:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005036:	2b28      	cmp	r3, #40	; 0x28
 8005038:	d86c      	bhi.n	8005114 <UART_SetConfig+0x450>
 800503a:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <UART_SetConfig+0x37c>)
 800503c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005040:	080050e5 	.word	0x080050e5
 8005044:	08005115 	.word	0x08005115
 8005048:	08005115 	.word	0x08005115
 800504c:	08005115 	.word	0x08005115
 8005050:	08005115 	.word	0x08005115
 8005054:	08005115 	.word	0x08005115
 8005058:	08005115 	.word	0x08005115
 800505c:	08005115 	.word	0x08005115
 8005060:	080050ed 	.word	0x080050ed
 8005064:	08005115 	.word	0x08005115
 8005068:	08005115 	.word	0x08005115
 800506c:	08005115 	.word	0x08005115
 8005070:	08005115 	.word	0x08005115
 8005074:	08005115 	.word	0x08005115
 8005078:	08005115 	.word	0x08005115
 800507c:	08005115 	.word	0x08005115
 8005080:	080050f5 	.word	0x080050f5
 8005084:	08005115 	.word	0x08005115
 8005088:	08005115 	.word	0x08005115
 800508c:	08005115 	.word	0x08005115
 8005090:	08005115 	.word	0x08005115
 8005094:	08005115 	.word	0x08005115
 8005098:	08005115 	.word	0x08005115
 800509c:	08005115 	.word	0x08005115
 80050a0:	080050fd 	.word	0x080050fd
 80050a4:	08005115 	.word	0x08005115
 80050a8:	08005115 	.word	0x08005115
 80050ac:	08005115 	.word	0x08005115
 80050b0:	08005115 	.word	0x08005115
 80050b4:	08005115 	.word	0x08005115
 80050b8:	08005115 	.word	0x08005115
 80050bc:	08005115 	.word	0x08005115
 80050c0:	08005105 	.word	0x08005105
 80050c4:	08005115 	.word	0x08005115
 80050c8:	08005115 	.word	0x08005115
 80050cc:	08005115 	.word	0x08005115
 80050d0:	08005115 	.word	0x08005115
 80050d4:	08005115 	.word	0x08005115
 80050d8:	08005115 	.word	0x08005115
 80050dc:	08005115 	.word	0x08005115
 80050e0:	0800510d 	.word	0x0800510d
 80050e4:	2301      	movs	r3, #1
 80050e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ea:	e0bc      	b.n	8005266 <UART_SetConfig+0x5a2>
 80050ec:	2304      	movs	r3, #4
 80050ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050f2:	e0b8      	b.n	8005266 <UART_SetConfig+0x5a2>
 80050f4:	2308      	movs	r3, #8
 80050f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050fa:	e0b4      	b.n	8005266 <UART_SetConfig+0x5a2>
 80050fc:	2310      	movs	r3, #16
 80050fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005102:	e0b0      	b.n	8005266 <UART_SetConfig+0x5a2>
 8005104:	2320      	movs	r3, #32
 8005106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800510a:	e0ac      	b.n	8005266 <UART_SetConfig+0x5a2>
 800510c:	2340      	movs	r3, #64	; 0x40
 800510e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005112:	e0a8      	b.n	8005266 <UART_SetConfig+0x5a2>
 8005114:	2380      	movs	r3, #128	; 0x80
 8005116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800511a:	e0a4      	b.n	8005266 <UART_SetConfig+0x5a2>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a90      	ldr	r2, [pc, #576]	; (8005364 <UART_SetConfig+0x6a0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d130      	bne.n	8005188 <UART_SetConfig+0x4c4>
 8005126:	4b8e      	ldr	r3, [pc, #568]	; (8005360 <UART_SetConfig+0x69c>)
 8005128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	2b05      	cmp	r3, #5
 8005130:	d826      	bhi.n	8005180 <UART_SetConfig+0x4bc>
 8005132:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <UART_SetConfig+0x474>)
 8005134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005138:	08005151 	.word	0x08005151
 800513c:	08005159 	.word	0x08005159
 8005140:	08005161 	.word	0x08005161
 8005144:	08005169 	.word	0x08005169
 8005148:	08005171 	.word	0x08005171
 800514c:	08005179 	.word	0x08005179
 8005150:	2300      	movs	r3, #0
 8005152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005156:	e086      	b.n	8005266 <UART_SetConfig+0x5a2>
 8005158:	2304      	movs	r3, #4
 800515a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800515e:	e082      	b.n	8005266 <UART_SetConfig+0x5a2>
 8005160:	2308      	movs	r3, #8
 8005162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005166:	e07e      	b.n	8005266 <UART_SetConfig+0x5a2>
 8005168:	2310      	movs	r3, #16
 800516a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800516e:	e07a      	b.n	8005266 <UART_SetConfig+0x5a2>
 8005170:	2320      	movs	r3, #32
 8005172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005176:	e076      	b.n	8005266 <UART_SetConfig+0x5a2>
 8005178:	2340      	movs	r3, #64	; 0x40
 800517a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800517e:	e072      	b.n	8005266 <UART_SetConfig+0x5a2>
 8005180:	2380      	movs	r3, #128	; 0x80
 8005182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005186:	e06e      	b.n	8005266 <UART_SetConfig+0x5a2>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a76      	ldr	r2, [pc, #472]	; (8005368 <UART_SetConfig+0x6a4>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d130      	bne.n	80051f4 <UART_SetConfig+0x530>
 8005192:	4b73      	ldr	r3, [pc, #460]	; (8005360 <UART_SetConfig+0x69c>)
 8005194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	2b05      	cmp	r3, #5
 800519c:	d826      	bhi.n	80051ec <UART_SetConfig+0x528>
 800519e:	a201      	add	r2, pc, #4	; (adr r2, 80051a4 <UART_SetConfig+0x4e0>)
 80051a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a4:	080051bd 	.word	0x080051bd
 80051a8:	080051c5 	.word	0x080051c5
 80051ac:	080051cd 	.word	0x080051cd
 80051b0:	080051d5 	.word	0x080051d5
 80051b4:	080051dd 	.word	0x080051dd
 80051b8:	080051e5 	.word	0x080051e5
 80051bc:	2300      	movs	r3, #0
 80051be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051c2:	e050      	b.n	8005266 <UART_SetConfig+0x5a2>
 80051c4:	2304      	movs	r3, #4
 80051c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ca:	e04c      	b.n	8005266 <UART_SetConfig+0x5a2>
 80051cc:	2308      	movs	r3, #8
 80051ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051d2:	e048      	b.n	8005266 <UART_SetConfig+0x5a2>
 80051d4:	2310      	movs	r3, #16
 80051d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051da:	e044      	b.n	8005266 <UART_SetConfig+0x5a2>
 80051dc:	2320      	movs	r3, #32
 80051de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051e2:	e040      	b.n	8005266 <UART_SetConfig+0x5a2>
 80051e4:	2340      	movs	r3, #64	; 0x40
 80051e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ea:	e03c      	b.n	8005266 <UART_SetConfig+0x5a2>
 80051ec:	2380      	movs	r3, #128	; 0x80
 80051ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051f2:	e038      	b.n	8005266 <UART_SetConfig+0x5a2>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a5c      	ldr	r2, [pc, #368]	; (800536c <UART_SetConfig+0x6a8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d130      	bne.n	8005260 <UART_SetConfig+0x59c>
 80051fe:	4b58      	ldr	r3, [pc, #352]	; (8005360 <UART_SetConfig+0x69c>)
 8005200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	2b05      	cmp	r3, #5
 8005208:	d826      	bhi.n	8005258 <UART_SetConfig+0x594>
 800520a:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <UART_SetConfig+0x54c>)
 800520c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005210:	08005229 	.word	0x08005229
 8005214:	08005231 	.word	0x08005231
 8005218:	08005239 	.word	0x08005239
 800521c:	08005241 	.word	0x08005241
 8005220:	08005249 	.word	0x08005249
 8005224:	08005251 	.word	0x08005251
 8005228:	2302      	movs	r3, #2
 800522a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800522e:	e01a      	b.n	8005266 <UART_SetConfig+0x5a2>
 8005230:	2304      	movs	r3, #4
 8005232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005236:	e016      	b.n	8005266 <UART_SetConfig+0x5a2>
 8005238:	2308      	movs	r3, #8
 800523a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800523e:	e012      	b.n	8005266 <UART_SetConfig+0x5a2>
 8005240:	2310      	movs	r3, #16
 8005242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005246:	e00e      	b.n	8005266 <UART_SetConfig+0x5a2>
 8005248:	2320      	movs	r3, #32
 800524a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800524e:	e00a      	b.n	8005266 <UART_SetConfig+0x5a2>
 8005250:	2340      	movs	r3, #64	; 0x40
 8005252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005256:	e006      	b.n	8005266 <UART_SetConfig+0x5a2>
 8005258:	2380      	movs	r3, #128	; 0x80
 800525a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800525e:	e002      	b.n	8005266 <UART_SetConfig+0x5a2>
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a40      	ldr	r2, [pc, #256]	; (800536c <UART_SetConfig+0x6a8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	f040 80ef 	bne.w	8005450 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005272:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005276:	2b20      	cmp	r3, #32
 8005278:	dc46      	bgt.n	8005308 <UART_SetConfig+0x644>
 800527a:	2b02      	cmp	r3, #2
 800527c:	f2c0 8081 	blt.w	8005382 <UART_SetConfig+0x6be>
 8005280:	3b02      	subs	r3, #2
 8005282:	2b1e      	cmp	r3, #30
 8005284:	d87d      	bhi.n	8005382 <UART_SetConfig+0x6be>
 8005286:	a201      	add	r2, pc, #4	; (adr r2, 800528c <UART_SetConfig+0x5c8>)
 8005288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528c:	0800530f 	.word	0x0800530f
 8005290:	08005383 	.word	0x08005383
 8005294:	08005317 	.word	0x08005317
 8005298:	08005383 	.word	0x08005383
 800529c:	08005383 	.word	0x08005383
 80052a0:	08005383 	.word	0x08005383
 80052a4:	08005327 	.word	0x08005327
 80052a8:	08005383 	.word	0x08005383
 80052ac:	08005383 	.word	0x08005383
 80052b0:	08005383 	.word	0x08005383
 80052b4:	08005383 	.word	0x08005383
 80052b8:	08005383 	.word	0x08005383
 80052bc:	08005383 	.word	0x08005383
 80052c0:	08005383 	.word	0x08005383
 80052c4:	08005337 	.word	0x08005337
 80052c8:	08005383 	.word	0x08005383
 80052cc:	08005383 	.word	0x08005383
 80052d0:	08005383 	.word	0x08005383
 80052d4:	08005383 	.word	0x08005383
 80052d8:	08005383 	.word	0x08005383
 80052dc:	08005383 	.word	0x08005383
 80052e0:	08005383 	.word	0x08005383
 80052e4:	08005383 	.word	0x08005383
 80052e8:	08005383 	.word	0x08005383
 80052ec:	08005383 	.word	0x08005383
 80052f0:	08005383 	.word	0x08005383
 80052f4:	08005383 	.word	0x08005383
 80052f8:	08005383 	.word	0x08005383
 80052fc:	08005383 	.word	0x08005383
 8005300:	08005383 	.word	0x08005383
 8005304:	08005375 	.word	0x08005375
 8005308:	2b40      	cmp	r3, #64	; 0x40
 800530a:	d036      	beq.n	800537a <UART_SetConfig+0x6b6>
 800530c:	e039      	b.n	8005382 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800530e:	f7fe ff45 	bl	800419c <HAL_RCCEx_GetD3PCLK1Freq>
 8005312:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005314:	e03b      	b.n	800538e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005316:	f107 0314 	add.w	r3, r7, #20
 800531a:	4618      	mov	r0, r3
 800531c:	f7fe ff54 	bl	80041c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005324:	e033      	b.n	800538e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005326:	f107 0308 	add.w	r3, r7, #8
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff f8a0 	bl	8004470 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005334:	e02b      	b.n	800538e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005336:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <UART_SetConfig+0x69c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0320 	and.w	r3, r3, #32
 800533e:	2b00      	cmp	r3, #0
 8005340:	d009      	beq.n	8005356 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005342:	4b07      	ldr	r3, [pc, #28]	; (8005360 <UART_SetConfig+0x69c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	08db      	lsrs	r3, r3, #3
 8005348:	f003 0303 	and.w	r3, r3, #3
 800534c:	4a08      	ldr	r2, [pc, #32]	; (8005370 <UART_SetConfig+0x6ac>)
 800534e:	fa22 f303 	lsr.w	r3, r2, r3
 8005352:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005354:	e01b      	b.n	800538e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <UART_SetConfig+0x6ac>)
 8005358:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800535a:	e018      	b.n	800538e <UART_SetConfig+0x6ca>
 800535c:	40011400 	.word	0x40011400
 8005360:	58024400 	.word	0x58024400
 8005364:	40007800 	.word	0x40007800
 8005368:	40007c00 	.word	0x40007c00
 800536c:	58000c00 	.word	0x58000c00
 8005370:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005374:	4bc4      	ldr	r3, [pc, #784]	; (8005688 <UART_SetConfig+0x9c4>)
 8005376:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005378:	e009      	b.n	800538e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800537a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800537e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005380:	e005      	b.n	800538e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800538c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800538e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 81da 	beq.w	800574a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	4abc      	ldr	r2, [pc, #752]	; (800568c <UART_SetConfig+0x9c8>)
 800539c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053a0:	461a      	mov	r2, r3
 80053a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80053a8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	4613      	mov	r3, r2
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	4413      	add	r3, r2
 80053b4:	6a3a      	ldr	r2, [r7, #32]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d305      	bcc.n	80053c6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053c0:	6a3a      	ldr	r2, [r7, #32]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d903      	bls.n	80053ce <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80053cc:	e1bd      	b.n	800574a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d0:	4618      	mov	r0, r3
 80053d2:	f04f 0100 	mov.w	r1, #0
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	4aac      	ldr	r2, [pc, #688]	; (800568c <UART_SetConfig+0x9c8>)
 80053dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	f04f 0300 	mov.w	r3, #0
 80053e6:	f7fa ff77 	bl	80002d8 <__aeabi_uldivmod>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4610      	mov	r0, r2
 80053f0:	4619      	mov	r1, r3
 80053f2:	f04f 0200 	mov.w	r2, #0
 80053f6:	f04f 0300 	mov.w	r3, #0
 80053fa:	020b      	lsls	r3, r1, #8
 80053fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005400:	0202      	lsls	r2, r0, #8
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	6849      	ldr	r1, [r1, #4]
 8005406:	0849      	lsrs	r1, r1, #1
 8005408:	4608      	mov	r0, r1
 800540a:	f04f 0100 	mov.w	r1, #0
 800540e:	1814      	adds	r4, r2, r0
 8005410:	eb43 0501 	adc.w	r5, r3, r1
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	461a      	mov	r2, r3
 800541a:	f04f 0300 	mov.w	r3, #0
 800541e:	4620      	mov	r0, r4
 8005420:	4629      	mov	r1, r5
 8005422:	f7fa ff59 	bl	80002d8 <__aeabi_uldivmod>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	4613      	mov	r3, r2
 800542c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005434:	d308      	bcc.n	8005448 <UART_SetConfig+0x784>
 8005436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800543c:	d204      	bcs.n	8005448 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005444:	60da      	str	r2, [r3, #12]
 8005446:	e180      	b.n	800574a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800544e:	e17c      	b.n	800574a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005458:	f040 80be 	bne.w	80055d8 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800545c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005460:	2b20      	cmp	r3, #32
 8005462:	dc49      	bgt.n	80054f8 <UART_SetConfig+0x834>
 8005464:	2b00      	cmp	r3, #0
 8005466:	db7c      	blt.n	8005562 <UART_SetConfig+0x89e>
 8005468:	2b20      	cmp	r3, #32
 800546a:	d87a      	bhi.n	8005562 <UART_SetConfig+0x89e>
 800546c:	a201      	add	r2, pc, #4	; (adr r2, 8005474 <UART_SetConfig+0x7b0>)
 800546e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005472:	bf00      	nop
 8005474:	080054ff 	.word	0x080054ff
 8005478:	08005507 	.word	0x08005507
 800547c:	08005563 	.word	0x08005563
 8005480:	08005563 	.word	0x08005563
 8005484:	0800550f 	.word	0x0800550f
 8005488:	08005563 	.word	0x08005563
 800548c:	08005563 	.word	0x08005563
 8005490:	08005563 	.word	0x08005563
 8005494:	0800551f 	.word	0x0800551f
 8005498:	08005563 	.word	0x08005563
 800549c:	08005563 	.word	0x08005563
 80054a0:	08005563 	.word	0x08005563
 80054a4:	08005563 	.word	0x08005563
 80054a8:	08005563 	.word	0x08005563
 80054ac:	08005563 	.word	0x08005563
 80054b0:	08005563 	.word	0x08005563
 80054b4:	0800552f 	.word	0x0800552f
 80054b8:	08005563 	.word	0x08005563
 80054bc:	08005563 	.word	0x08005563
 80054c0:	08005563 	.word	0x08005563
 80054c4:	08005563 	.word	0x08005563
 80054c8:	08005563 	.word	0x08005563
 80054cc:	08005563 	.word	0x08005563
 80054d0:	08005563 	.word	0x08005563
 80054d4:	08005563 	.word	0x08005563
 80054d8:	08005563 	.word	0x08005563
 80054dc:	08005563 	.word	0x08005563
 80054e0:	08005563 	.word	0x08005563
 80054e4:	08005563 	.word	0x08005563
 80054e8:	08005563 	.word	0x08005563
 80054ec:	08005563 	.word	0x08005563
 80054f0:	08005563 	.word	0x08005563
 80054f4:	08005555 	.word	0x08005555
 80054f8:	2b40      	cmp	r3, #64	; 0x40
 80054fa:	d02e      	beq.n	800555a <UART_SetConfig+0x896>
 80054fc:	e031      	b.n	8005562 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054fe:	f7fd fee1 	bl	80032c4 <HAL_RCC_GetPCLK1Freq>
 8005502:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005504:	e033      	b.n	800556e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005506:	f7fd fef3 	bl	80032f0 <HAL_RCC_GetPCLK2Freq>
 800550a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800550c:	e02f      	b.n	800556e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800550e:	f107 0314 	add.w	r3, r7, #20
 8005512:	4618      	mov	r0, r3
 8005514:	f7fe fe58 	bl	80041c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800551c:	e027      	b.n	800556e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800551e:	f107 0308 	add.w	r3, r7, #8
 8005522:	4618      	mov	r0, r3
 8005524:	f7fe ffa4 	bl	8004470 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800552c:	e01f      	b.n	800556e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800552e:	4b58      	ldr	r3, [pc, #352]	; (8005690 <UART_SetConfig+0x9cc>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800553a:	4b55      	ldr	r3, [pc, #340]	; (8005690 <UART_SetConfig+0x9cc>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	08db      	lsrs	r3, r3, #3
 8005540:	f003 0303 	and.w	r3, r3, #3
 8005544:	4a53      	ldr	r2, [pc, #332]	; (8005694 <UART_SetConfig+0x9d0>)
 8005546:	fa22 f303 	lsr.w	r3, r2, r3
 800554a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800554c:	e00f      	b.n	800556e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800554e:	4b51      	ldr	r3, [pc, #324]	; (8005694 <UART_SetConfig+0x9d0>)
 8005550:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005552:	e00c      	b.n	800556e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005554:	4b4c      	ldr	r3, [pc, #304]	; (8005688 <UART_SetConfig+0x9c4>)
 8005556:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005558:	e009      	b.n	800556e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800555a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800555e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005560:	e005      	b.n	800556e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800556c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 80ea 	beq.w	800574a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	4a44      	ldr	r2, [pc, #272]	; (800568c <UART_SetConfig+0x9c8>)
 800557c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005580:	461a      	mov	r2, r3
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	fbb3 f3f2 	udiv	r3, r3, r2
 8005588:	005a      	lsls	r2, r3, #1
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	085b      	lsrs	r3, r3, #1
 8005590:	441a      	add	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	fbb2 f3f3 	udiv	r3, r2, r3
 800559a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800559c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559e:	2b0f      	cmp	r3, #15
 80055a0:	d916      	bls.n	80055d0 <UART_SetConfig+0x90c>
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a8:	d212      	bcs.n	80055d0 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	f023 030f 	bic.w	r3, r3, #15
 80055b2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	085b      	lsrs	r3, r3, #1
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	b29a      	uxth	r2, r3
 80055c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055c2:	4313      	orrs	r3, r2
 80055c4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80055cc:	60da      	str	r2, [r3, #12]
 80055ce:	e0bc      	b.n	800574a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80055d6:	e0b8      	b.n	800574a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80055dc:	2b20      	cmp	r3, #32
 80055de:	dc4b      	bgt.n	8005678 <UART_SetConfig+0x9b4>
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f2c0 8087 	blt.w	80056f4 <UART_SetConfig+0xa30>
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	f200 8084 	bhi.w	80056f4 <UART_SetConfig+0xa30>
 80055ec:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <UART_SetConfig+0x930>)
 80055ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f2:	bf00      	nop
 80055f4:	0800567f 	.word	0x0800567f
 80055f8:	08005699 	.word	0x08005699
 80055fc:	080056f5 	.word	0x080056f5
 8005600:	080056f5 	.word	0x080056f5
 8005604:	080056a1 	.word	0x080056a1
 8005608:	080056f5 	.word	0x080056f5
 800560c:	080056f5 	.word	0x080056f5
 8005610:	080056f5 	.word	0x080056f5
 8005614:	080056b1 	.word	0x080056b1
 8005618:	080056f5 	.word	0x080056f5
 800561c:	080056f5 	.word	0x080056f5
 8005620:	080056f5 	.word	0x080056f5
 8005624:	080056f5 	.word	0x080056f5
 8005628:	080056f5 	.word	0x080056f5
 800562c:	080056f5 	.word	0x080056f5
 8005630:	080056f5 	.word	0x080056f5
 8005634:	080056c1 	.word	0x080056c1
 8005638:	080056f5 	.word	0x080056f5
 800563c:	080056f5 	.word	0x080056f5
 8005640:	080056f5 	.word	0x080056f5
 8005644:	080056f5 	.word	0x080056f5
 8005648:	080056f5 	.word	0x080056f5
 800564c:	080056f5 	.word	0x080056f5
 8005650:	080056f5 	.word	0x080056f5
 8005654:	080056f5 	.word	0x080056f5
 8005658:	080056f5 	.word	0x080056f5
 800565c:	080056f5 	.word	0x080056f5
 8005660:	080056f5 	.word	0x080056f5
 8005664:	080056f5 	.word	0x080056f5
 8005668:	080056f5 	.word	0x080056f5
 800566c:	080056f5 	.word	0x080056f5
 8005670:	080056f5 	.word	0x080056f5
 8005674:	080056e7 	.word	0x080056e7
 8005678:	2b40      	cmp	r3, #64	; 0x40
 800567a:	d037      	beq.n	80056ec <UART_SetConfig+0xa28>
 800567c:	e03a      	b.n	80056f4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800567e:	f7fd fe21 	bl	80032c4 <HAL_RCC_GetPCLK1Freq>
 8005682:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005684:	e03c      	b.n	8005700 <UART_SetConfig+0xa3c>
 8005686:	bf00      	nop
 8005688:	003d0900 	.word	0x003d0900
 800568c:	0800637c 	.word	0x0800637c
 8005690:	58024400 	.word	0x58024400
 8005694:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005698:	f7fd fe2a 	bl	80032f0 <HAL_RCC_GetPCLK2Freq>
 800569c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800569e:	e02f      	b.n	8005700 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056a0:	f107 0314 	add.w	r3, r7, #20
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fe fd8f 	bl	80041c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056ae:	e027      	b.n	8005700 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056b0:	f107 0308 	add.w	r3, r7, #8
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7fe fedb 	bl	8004470 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056be:	e01f      	b.n	8005700 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056c0:	4b2c      	ldr	r3, [pc, #176]	; (8005774 <UART_SetConfig+0xab0>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d009      	beq.n	80056e0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80056cc:	4b29      	ldr	r3, [pc, #164]	; (8005774 <UART_SetConfig+0xab0>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	08db      	lsrs	r3, r3, #3
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	4a28      	ldr	r2, [pc, #160]	; (8005778 <UART_SetConfig+0xab4>)
 80056d8:	fa22 f303 	lsr.w	r3, r2, r3
 80056dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056de:	e00f      	b.n	8005700 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80056e0:	4b25      	ldr	r3, [pc, #148]	; (8005778 <UART_SetConfig+0xab4>)
 80056e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056e4:	e00c      	b.n	8005700 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056e6:	4b25      	ldr	r3, [pc, #148]	; (800577c <UART_SetConfig+0xab8>)
 80056e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056ea:	e009      	b.n	8005700 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056f2:	e005      	b.n	8005700 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80056fe:	bf00      	nop
    }

    if (pclk != 0U)
 8005700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005702:	2b00      	cmp	r3, #0
 8005704:	d021      	beq.n	800574a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	4a1d      	ldr	r2, [pc, #116]	; (8005780 <UART_SetConfig+0xabc>)
 800570c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005710:	461a      	mov	r2, r3
 8005712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005714:	fbb3 f2f2 	udiv	r2, r3, r2
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	085b      	lsrs	r3, r3, #1
 800571e:	441a      	add	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572c:	2b0f      	cmp	r3, #15
 800572e:	d909      	bls.n	8005744 <UART_SetConfig+0xa80>
 8005730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005736:	d205      	bcs.n	8005744 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573a:	b29a      	uxth	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	60da      	str	r2, [r3, #12]
 8005742:	e002      	b.n	800574a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005766:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800576a:	4618      	mov	r0, r3
 800576c:	3738      	adds	r7, #56	; 0x38
 800576e:	46bd      	mov	sp, r7
 8005770:	bdb0      	pop	{r4, r5, r7, pc}
 8005772:	bf00      	nop
 8005774:	58024400 	.word	0x58024400
 8005778:	03d09000 	.word	0x03d09000
 800577c:	003d0900 	.word	0x003d0900
 8005780:	0800637c 	.word	0x0800637c

08005784 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00a      	beq.n	80057ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005818:	f003 0310 	and.w	r3, r3, #16
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00a      	beq.n	8005836 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583a:	f003 0320 	and.w	r3, r3, #32
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d01a      	beq.n	800589a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800587e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005882:	d10a      	bne.n	800589a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	605a      	str	r2, [r3, #4]
  }
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af02      	add	r7, sp, #8
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058d8:	f7fb fcc2 	bl	8001260 <HAL_GetTick>
 80058dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d10e      	bne.n	800590a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f82f 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e025      	b.n	8005956 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b04      	cmp	r3, #4
 8005916:	d10e      	bne.n	8005936 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005918:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f819 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e00f      	b.n	8005956 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2220      	movs	r2, #32
 8005942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b09c      	sub	sp, #112	; 0x70
 8005962:	af00      	add	r7, sp, #0
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	603b      	str	r3, [r7, #0]
 800596a:	4613      	mov	r3, r2
 800596c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800596e:	e0a9      	b.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005976:	f000 80a5 	beq.w	8005ac4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597a:	f7fb fc71 	bl	8001260 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005986:	429a      	cmp	r2, r3
 8005988:	d302      	bcc.n	8005990 <UART_WaitOnFlagUntilTimeout+0x32>
 800598a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800598c:	2b00      	cmp	r3, #0
 800598e:	d140      	bne.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800599e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059a4:	667b      	str	r3, [r7, #100]	; 0x64
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1e6      	bne.n	8005990 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3308      	adds	r3, #8
 80059c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	f023 0301 	bic.w	r3, r3, #1
 80059d8:	663b      	str	r3, [r7, #96]	; 0x60
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3308      	adds	r3, #8
 80059e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80059e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1e5      	bne.n	80059c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e069      	b.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d051      	beq.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a2e:	d149      	bne.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	461a      	mov	r2, r3
 8005a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a58:	637b      	str	r3, [r7, #52]	; 0x34
 8005a5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e6      	bne.n	8005a3a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3308      	adds	r3, #8
 8005a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	e853 3f00 	ldrex	r3, [r3]
 8005a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f023 0301 	bic.w	r3, r3, #1
 8005a82:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3308      	adds	r3, #8
 8005a8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a8c:	623a      	str	r2, [r7, #32]
 8005a8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a90:	69f9      	ldr	r1, [r7, #28]
 8005a92:	6a3a      	ldr	r2, [r7, #32]
 8005a94:	e841 2300 	strex	r3, r2, [r1]
 8005a98:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e5      	bne.n	8005a6c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e010      	b.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69da      	ldr	r2, [r3, #28]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	4013      	ands	r3, r2
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	bf0c      	ite	eq
 8005ad4:	2301      	moveq	r3, #1
 8005ad6:	2300      	movne	r3, #0
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	461a      	mov	r2, r3
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	f43f af46 	beq.w	8005970 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3770      	adds	r7, #112	; 0x70
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b085      	sub	sp, #20
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d101      	bne.n	8005b04 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b00:	2302      	movs	r3, #2
 8005b02:	e027      	b.n	8005b54 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2224      	movs	r2, #36	; 0x24
 8005b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0201 	bic.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e02d      	b.n	8005bd4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2224      	movs	r2, #36	; 0x24
 8005b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0201 	bic.w	r2, r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f84f 	bl	8005c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e02d      	b.n	8005c50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2224      	movs	r2, #36	; 0x24
 8005c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f022 0201 	bic.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f811 	bl	8005c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2220      	movs	r2, #32
 8005c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d108      	bne.n	8005c7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c78:	e031      	b.n	8005cde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c7a:	2310      	movs	r3, #16
 8005c7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c7e:	2310      	movs	r3, #16
 8005c80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	0e5b      	lsrs	r3, r3, #25
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	0f5b      	lsrs	r3, r3, #29
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ca2:	7bbb      	ldrb	r3, [r7, #14]
 8005ca4:	7b3a      	ldrb	r2, [r7, #12]
 8005ca6:	4911      	ldr	r1, [pc, #68]	; (8005cec <UARTEx_SetNbDataToProcess+0x94>)
 8005ca8:	5c8a      	ldrb	r2, [r1, r2]
 8005caa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cae:	7b3a      	ldrb	r2, [r7, #12]
 8005cb0:	490f      	ldr	r1, [pc, #60]	; (8005cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8005cb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
 8005cc2:	7b7a      	ldrb	r2, [r7, #13]
 8005cc4:	4909      	ldr	r1, [pc, #36]	; (8005cec <UARTEx_SetNbDataToProcess+0x94>)
 8005cc6:	5c8a      	ldrb	r2, [r1, r2]
 8005cc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ccc:	7b7a      	ldrb	r2, [r7, #13]
 8005cce:	4908      	ldr	r1, [pc, #32]	; (8005cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8005cd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005cde:	bf00      	nop
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	08006394 	.word	0x08006394
 8005cf0:	0800639c 	.word	0x0800639c

08005cf4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	f107 001c 	add.w	r0, r7, #28
 8005d02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d120      	bne.n	8005d4e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	4b2a      	ldr	r3, [pc, #168]	; (8005dc8 <USB_CoreInit+0xd4>)
 8005d1e:	4013      	ands	r3, r2
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d105      	bne.n	8005d42 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 faa8 	bl	8006298 <USB_CoreReset>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	73fb      	strb	r3, [r7, #15]
 8005d4c:	e01a      	b.n	8005d84 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fa9c 	bl	8006298 <USB_CoreReset>
 8005d60:	4603      	mov	r3, r0
 8005d62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d106      	bne.n	8005d78 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	639a      	str	r2, [r3, #56]	; 0x38
 8005d76:	e005      	b.n	8005d84 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d116      	bne.n	8005db8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d98:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <USB_CoreInit+0xd8>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f043 0206 	orr.w	r2, r3, #6
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f043 0220 	orr.w	r2, r3, #32
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dc4:	b004      	add	sp, #16
 8005dc6:	4770      	bx	lr
 8005dc8:	ffbdffbf 	.word	0xffbdffbf
 8005dcc:	03ee0000 	.word	0x03ee0000

08005dd0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f023 0201 	bic.w	r2, r3, #1
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e0e:	78fb      	ldrb	r3, [r7, #3]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d115      	bne.n	8005e40 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e20:	2001      	movs	r0, #1
 8005e22:	f7fb fa29 	bl	8001278 <HAL_Delay>
      ms++;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fa25 	bl	800627c <USB_GetMode>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d01e      	beq.n	8005e76 <USB_SetCurrentMode+0x84>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b31      	cmp	r3, #49	; 0x31
 8005e3c:	d9f0      	bls.n	8005e20 <USB_SetCurrentMode+0x2e>
 8005e3e:	e01a      	b.n	8005e76 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d115      	bne.n	8005e72 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e52:	2001      	movs	r0, #1
 8005e54:	f7fb fa10 	bl	8001278 <HAL_Delay>
      ms++;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fa0c 	bl	800627c <USB_GetMode>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <USB_SetCurrentMode+0x84>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2b31      	cmp	r3, #49	; 0x31
 8005e6e:	d9f0      	bls.n	8005e52 <USB_SetCurrentMode+0x60>
 8005e70:	e001      	b.n	8005e76 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e005      	b.n	8005e82 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b32      	cmp	r3, #50	; 0x32
 8005e7a:	d101      	bne.n	8005e80 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e000      	b.n	8005e82 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b086      	sub	sp, #24
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	613b      	str	r3, [r7, #16]
 8005eaa:	e009      	b.n	8005ec0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	3340      	adds	r3, #64	; 0x40
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	613b      	str	r3, [r7, #16]
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	2b0e      	cmp	r3, #14
 8005ec4:	d9f2      	bls.n	8005eac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d11c      	bne.n	8005f06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eda:	f043 0302 	orr.w	r3, r3, #2
 8005ede:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	e005      	b.n	8005f12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f18:	461a      	mov	r2, r3
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f24:	4619      	mov	r1, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	680b      	ldr	r3, [r1, #0]
 8005f30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d10c      	bne.n	8005f52 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d104      	bne.n	8005f48 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f3e:	2100      	movs	r1, #0
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f961 	bl	8006208 <USB_SetDevSpeed>
 8005f46:	e008      	b.n	8005f5a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f48:	2101      	movs	r1, #1
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f95c 	bl	8006208 <USB_SetDevSpeed>
 8005f50:	e003      	b.n	8005f5a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f52:	2103      	movs	r1, #3
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f957 	bl	8006208 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f5a:	2110      	movs	r1, #16
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f8f3 	bl	8006148 <USB_FlushTxFifo>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f91d 	bl	80061ac <USB_FlushRxFifo>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f82:	461a      	mov	r2, r3
 8005f84:	2300      	movs	r3, #0
 8005f86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8e:	461a      	mov	r2, r3
 8005f90:	2300      	movs	r3, #0
 8005f92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	613b      	str	r3, [r7, #16]
 8005fa4:	e043      	b.n	800602e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fbc:	d118      	bne.n	8005ff0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10a      	bne.n	8005fda <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	e013      	b.n	8006002 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fec:	6013      	str	r3, [r2, #0]
 8005fee:	e008      	b.n	8006002 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	2300      	movs	r3, #0
 8006000:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	4413      	add	r3, r2
 800600a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600e:	461a      	mov	r2, r3
 8006010:	2300      	movs	r3, #0
 8006012:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	4413      	add	r3, r2
 800601c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006020:	461a      	mov	r2, r3
 8006022:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006026:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	3301      	adds	r3, #1
 800602c:	613b      	str	r3, [r7, #16]
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	429a      	cmp	r2, r3
 8006034:	d3b7      	bcc.n	8005fa6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006036:	2300      	movs	r3, #0
 8006038:	613b      	str	r3, [r7, #16]
 800603a:	e043      	b.n	80060c4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800604e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006052:	d118      	bne.n	8006086 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10a      	bne.n	8006070 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006066:	461a      	mov	r2, r3
 8006068:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	e013      	b.n	8006098 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607c:	461a      	mov	r2, r3
 800607e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006082:	6013      	str	r3, [r2, #0]
 8006084:	e008      	b.n	8006098 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4413      	add	r3, r2
 800608e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006092:	461a      	mov	r2, r3
 8006094:	2300      	movs	r3, #0
 8006096:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a4:	461a      	mov	r2, r3
 80060a6:	2300      	movs	r3, #0
 80060a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b6:	461a      	mov	r2, r3
 80060b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	3301      	adds	r3, #1
 80060c2:	613b      	str	r3, [r7, #16]
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d3b7      	bcc.n	800603c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80060ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d105      	bne.n	8006100 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	f043 0210 	orr.w	r2, r3, #16
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699a      	ldr	r2, [r3, #24]
 8006104:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <USB_DevInit+0x2b4>)
 8006106:	4313      	orrs	r3, r2
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800610c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800610e:	2b00      	cmp	r3, #0
 8006110:	d005      	beq.n	800611e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	f043 0208 	orr.w	r2, r3, #8
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800611e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006120:	2b01      	cmp	r3, #1
 8006122:	d105      	bne.n	8006130 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	699a      	ldr	r2, [r3, #24]
 8006128:	4b06      	ldr	r3, [pc, #24]	; (8006144 <USB_DevInit+0x2b8>)
 800612a:	4313      	orrs	r3, r2
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006130:	7dfb      	ldrb	r3, [r7, #23]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800613c:	b004      	add	sp, #16
 800613e:	4770      	bx	lr
 8006140:	803c3800 	.word	0x803c3800
 8006144:	40000004 	.word	0x40000004

08006148 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	3301      	adds	r3, #1
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	4a12      	ldr	r2, [pc, #72]	; (80061a8 <USB_FlushTxFifo+0x60>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d901      	bls.n	8006166 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e01a      	b.n	800619c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	daf3      	bge.n	8006156 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	019b      	lsls	r3, r3, #6
 8006176:	f043 0220 	orr.w	r2, r3, #32
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3301      	adds	r3, #1
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	4a08      	ldr	r2, [pc, #32]	; (80061a8 <USB_FlushTxFifo+0x60>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d901      	bls.n	800618e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e006      	b.n	800619c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0320 	and.w	r3, r3, #32
 8006196:	2b20      	cmp	r3, #32
 8006198:	d0f1      	beq.n	800617e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	00030d40 	.word	0x00030d40

080061ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061b4:	2300      	movs	r3, #0
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3301      	adds	r3, #1
 80061bc:	60fb      	str	r3, [r7, #12]
 80061be:	4a11      	ldr	r2, [pc, #68]	; (8006204 <USB_FlushRxFifo+0x58>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d901      	bls.n	80061c8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e017      	b.n	80061f8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	daf3      	bge.n	80061b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2210      	movs	r2, #16
 80061d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	3301      	adds	r3, #1
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	4a08      	ldr	r2, [pc, #32]	; (8006204 <USB_FlushRxFifo+0x58>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d901      	bls.n	80061ea <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e006      	b.n	80061f8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	2b10      	cmp	r3, #16
 80061f4:	d0f1      	beq.n	80061da <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3714      	adds	r7, #20
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	00030d40 	.word	0x00030d40

08006208 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	68f9      	ldr	r1, [r7, #12]
 8006224:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006228:	4313      	orrs	r3, r2
 800622a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800623a:	b480      	push	{r7}
 800623c:	b085      	sub	sp, #20
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006254:	f023 0303 	bic.w	r3, r3, #3
 8006258:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006268:	f043 0302 	orr.w	r3, r3, #2
 800626c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	f003 0301 	and.w	r3, r3, #1
}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	3301      	adds	r3, #1
 80062a8:	60fb      	str	r3, [r7, #12]
 80062aa:	4a13      	ldr	r2, [pc, #76]	; (80062f8 <USB_CoreReset+0x60>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d901      	bls.n	80062b4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e01a      	b.n	80062ea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	daf3      	bge.n	80062a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f043 0201 	orr.w	r2, r3, #1
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3301      	adds	r3, #1
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	4a09      	ldr	r2, [pc, #36]	; (80062f8 <USB_CoreReset+0x60>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d901      	bls.n	80062dc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e006      	b.n	80062ea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d0f1      	beq.n	80062cc <USB_CoreReset+0x34>

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	00030d40 	.word	0x00030d40

080062fc <__libc_init_array>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	4d0d      	ldr	r5, [pc, #52]	; (8006334 <__libc_init_array+0x38>)
 8006300:	4c0d      	ldr	r4, [pc, #52]	; (8006338 <__libc_init_array+0x3c>)
 8006302:	1b64      	subs	r4, r4, r5
 8006304:	10a4      	asrs	r4, r4, #2
 8006306:	2600      	movs	r6, #0
 8006308:	42a6      	cmp	r6, r4
 800630a:	d109      	bne.n	8006320 <__libc_init_array+0x24>
 800630c:	4d0b      	ldr	r5, [pc, #44]	; (800633c <__libc_init_array+0x40>)
 800630e:	4c0c      	ldr	r4, [pc, #48]	; (8006340 <__libc_init_array+0x44>)
 8006310:	f000 f820 	bl	8006354 <_init>
 8006314:	1b64      	subs	r4, r4, r5
 8006316:	10a4      	asrs	r4, r4, #2
 8006318:	2600      	movs	r6, #0
 800631a:	42a6      	cmp	r6, r4
 800631c:	d105      	bne.n	800632a <__libc_init_array+0x2e>
 800631e:	bd70      	pop	{r4, r5, r6, pc}
 8006320:	f855 3b04 	ldr.w	r3, [r5], #4
 8006324:	4798      	blx	r3
 8006326:	3601      	adds	r6, #1
 8006328:	e7ee      	b.n	8006308 <__libc_init_array+0xc>
 800632a:	f855 3b04 	ldr.w	r3, [r5], #4
 800632e:	4798      	blx	r3
 8006330:	3601      	adds	r6, #1
 8006332:	e7f2      	b.n	800631a <__libc_init_array+0x1e>
 8006334:	080063ac 	.word	0x080063ac
 8006338:	080063ac 	.word	0x080063ac
 800633c:	080063ac 	.word	0x080063ac
 8006340:	080063b0 	.word	0x080063b0

08006344 <memset>:
 8006344:	4402      	add	r2, r0
 8006346:	4603      	mov	r3, r0
 8006348:	4293      	cmp	r3, r2
 800634a:	d100      	bne.n	800634e <memset+0xa>
 800634c:	4770      	bx	lr
 800634e:	f803 1b01 	strb.w	r1, [r3], #1
 8006352:	e7f9      	b.n	8006348 <memset+0x4>

08006354 <_init>:
 8006354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006356:	bf00      	nop
 8006358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800635a:	bc08      	pop	{r3}
 800635c:	469e      	mov	lr, r3
 800635e:	4770      	bx	lr

08006360 <_fini>:
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006362:	bf00      	nop
 8006364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006366:	bc08      	pop	{r3}
 8006368:	469e      	mov	lr, r3
 800636a:	4770      	bx	lr
