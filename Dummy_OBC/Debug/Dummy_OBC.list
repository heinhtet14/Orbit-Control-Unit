
Dummy_OBC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005330  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005528  08005528  00015528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005548  08005548  0002040c  2**0
                  CONTENTS
  4 .ARM          00000008  08005548  08005548  00015548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005550  08005550  0002040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005550  08005550  00015550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005554  08005554  00015554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000040c  20000000  08005558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  2000040c  08005964  0002040c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000adc  08005964  00020adc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002040c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180b1  00000000  00000000  0002043a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d69  00000000  00000000  000384eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  0003b258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  0003c480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a007  00000000  00000000  0003d580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016155  00000000  00000000  00067587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001092bc  00000000  00000000  0007d6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00186998  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cd0  00000000  00000000  001869ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000040c 	.word	0x2000040c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005510 	.word	0x08005510

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000410 	.word	0x20000410
 8000234:	08005510 	.word	0x08005510

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <PacketInit>:
* @return            none
* @note              none
*********************************************************************************************
*/
void PacketInit(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
    //initialize buffer in big endian byte array
    header[3] = (HEADER & 0x000000ff);
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <PacketInit+0x28>)
 8000536:	2250      	movs	r2, #80	; 0x50
 8000538:	70da      	strb	r2, [r3, #3]
    header[2] = (HEADER & 0x0000ff00) >> 8;
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <PacketInit+0x28>)
 800053c:	2253      	movs	r2, #83	; 0x53
 800053e:	709a      	strb	r2, [r3, #2]
    header[1] = (HEADER & 0x00ff0000) >> 16;
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <PacketInit+0x28>)
 8000542:	2255      	movs	r2, #85	; 0x55
 8000544:	705a      	strb	r2, [r3, #1]
    header[0] = (HEADER & 0xff000000) >> 24;
 8000546:	4b04      	ldr	r3, [pc, #16]	; (8000558 <PacketInit+0x28>)
 8000548:	224d      	movs	r2, #77	; 0x4d
 800054a:	701a      	strb	r2, [r3, #0]
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20000488 	.word	0x20000488

0800055c <PacketAssemble>:
* @return            none
* @note              none
*********************************************************************************************
*/
void PacketAssemble(uint8_t id, uint8_t cmd, uint8_t *arg, uint8_t argSize, uint8_t *buffer)
{
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
 8000562:	603a      	str	r2, [r7, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
 800056a:	460b      	mov	r3, r1
 800056c:	71bb      	strb	r3, [r7, #6]
 800056e:	4613      	mov	r3, r2
 8000570:	717b      	strb	r3, [r7, #5]
 8000572:	4b3e      	ldr	r3, [pc, #248]	; (800066c <PacketAssemble+0x110>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	461a      	mov	r2, r3
    //Add header to the buffer
    memcpy(buffer, header, sizeof(header));
 8000578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800057a:	601a      	str	r2, [r3, #0]
    //Add id, cmd and argsize to the buffer
    buffer[4] = id;
 800057c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800057e:	3304      	adds	r3, #4
 8000580:	79fa      	ldrb	r2, [r7, #7]
 8000582:	701a      	strb	r2, [r3, #0]
    buffer[5] = cmd;
 8000584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000586:	3305      	adds	r3, #5
 8000588:	79ba      	ldrb	r2, [r7, #6]
 800058a:	701a      	strb	r2, [r3, #0]
    buffer[6] = argSize;
 800058c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800058e:	3306      	adds	r3, #6
 8000590:	797a      	ldrb	r2, [r7, #5]
 8000592:	701a      	strb	r2, [r3, #0]
    uint8_t lastPos;

    //check if command has an argument and add them to array
    if (argSize)
 8000594:	797b      	ldrb	r3, [r7, #5]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d018      	beq.n	80005cc <PacketAssemble+0x70>
    {
        for (int i = 0; i < argSize; i++)
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
 800059e:	e010      	b.n	80005c2 <PacketAssemble+0x66>
        {
            buffer[7 + i] = arg[i];
 80005a0:	69fb      	ldr	r3, [r7, #28]
 80005a2:	683a      	ldr	r2, [r7, #0]
 80005a4:	441a      	add	r2, r3
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	3307      	adds	r3, #7
 80005aa:	4619      	mov	r1, r3
 80005ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005ae:	440b      	add	r3, r1
 80005b0:	7812      	ldrb	r2, [r2, #0]
 80005b2:	701a      	strb	r2, [r3, #0]
            lastPos = 7 + i;
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	3307      	adds	r3, #7
 80005ba:	76fb      	strb	r3, [r7, #27]
        for (int i = 0; i < argSize; i++)
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	3301      	adds	r3, #1
 80005c0:	61fb      	str	r3, [r7, #28]
 80005c2:	797b      	ldrb	r3, [r7, #5]
 80005c4:	69fa      	ldr	r2, [r7, #28]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	dbea      	blt.n	80005a0 <PacketAssemble+0x44>
 80005ca:	e001      	b.n	80005d0 <PacketAssemble+0x74>
        }
    }
    else
    {
        lastPos = 7;
 80005cc:	2307      	movs	r3, #7
 80005ce:	76fb      	strb	r3, [r7, #27]
    }
    //calculate CRC
    uint8_t tempData[lastPos+1];
 80005d0:	7efb      	ldrb	r3, [r7, #27]
 80005d2:	1c5c      	adds	r4, r3, #1
 80005d4:	466b      	mov	r3, sp
 80005d6:	461d      	mov	r5, r3
 80005d8:	1e63      	subs	r3, r4, #1
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	4623      	mov	r3, r4
 80005de:	4618      	mov	r0, r3
 80005e0:	f04f 0100 	mov.w	r1, #0
 80005e4:	f04f 0200 	mov.w	r2, #0
 80005e8:	f04f 0300 	mov.w	r3, #0
 80005ec:	00cb      	lsls	r3, r1, #3
 80005ee:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80005f2:	00c2      	lsls	r2, r0, #3
 80005f4:	4623      	mov	r3, r4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f04f 0100 	mov.w	r1, #0
 80005fc:	f04f 0200 	mov.w	r2, #0
 8000600:	f04f 0300 	mov.w	r3, #0
 8000604:	00cb      	lsls	r3, r1, #3
 8000606:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800060a:	00c2      	lsls	r2, r0, #3
 800060c:	4623      	mov	r3, r4
 800060e:	3307      	adds	r3, #7
 8000610:	08db      	lsrs	r3, r3, #3
 8000612:	00db      	lsls	r3, r3, #3
 8000614:	ebad 0d03 	sub.w	sp, sp, r3
 8000618:	466b      	mov	r3, sp
 800061a:	3300      	adds	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
    uint8_t CRC[4];
    memcpy(tempData, buffer, sizeof(tempData));
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	4622      	mov	r2, r4
 8000622:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000624:	4618      	mov	r0, r3
 8000626:	f004 ff5d 	bl	80054e4 <memcpy>
    uint32_t calcCRC = crc32(0, tempData, sizeof(tempData));
 800062a:	693b      	ldr	r3, [r7, #16]
 800062c:	4622      	mov	r2, r4
 800062e:	4619      	mov	r1, r3
 8000630:	2000      	movs	r0, #0
 8000632:	f000 f8e3 	bl	80007fc <crc32>
 8000636:	60f8      	str	r0, [r7, #12]

 
    //add crc in big endian at the end of the buffer
    CRC[3] = (calcCRC & 0x000000ff);
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	72fb      	strb	r3, [r7, #11]
    CRC[2] = (calcCRC & 0x0000ff00) >> 8;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	b2db      	uxtb	r3, r3
 8000644:	72bb      	strb	r3, [r7, #10]
    CRC[1] = (calcCRC & 0x00ff0000) >> 16;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	0c1b      	lsrs	r3, r3, #16
 800064a:	b2db      	uxtb	r3, r3
 800064c:	727b      	strb	r3, [r7, #9]
    CRC[0] = (calcCRC & 0xff000000) >> 24;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	0e1b      	lsrs	r3, r3, #24
 8000652:	b2db      	uxtb	r3, r3
 8000654:	723b      	strb	r3, [r7, #8]
    memcpy(buffer+lastPos+1,CRC,sizeof(CRC));
 8000656:	7efb      	ldrb	r3, [r7, #27]
 8000658:	3301      	adds	r3, #1
 800065a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800065c:	4413      	add	r3, r2
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	46ad      	mov	sp, r5
}
 8000664:	bf00      	nop
 8000666:	3720      	adds	r7, #32
 8000668:	46bd      	mov	sp, r7
 800066a:	bdb0      	pop	{r4, r5, r7, pc}
 800066c:	20000488 	.word	0x20000488

08000670 <PacketDisassemble>:
* @return            packet disassemble status: DEFRAME_OK = ok, DEFRAME_INVALID_HEADER = can't find header in the buffer, DEFRAME_INVALID_CRC = crc doesn't match
* @note              none
*********************************************************************************************
*/
deframeReturn PacketDisassemble(uint8_t *id, uint8_t *len, uint8_t *cmd, uint8_t *arg, uint8_t *buffer, int bufferSize)
{
 8000670:	b5b0      	push	{r4, r5, r7, lr}
 8000672:	b08e      	sub	sp, #56	; 0x38
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
 800067c:	603b      	str	r3, [r7, #0]
    /*Search for header*/
    int pos = -1;
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
    for (int i = 0; i < bufferSize; i++)
 8000684:	2300      	movs	r3, #0
 8000686:	637b      	str	r3, [r7, #52]	; 0x34
 8000688:	e02a      	b.n	80006e0 <PacketDisassemble+0x70>
    {
        if ((buffer[i] == header[0]) & (bufferSize - i >= MINPKTLEN))//find a start of header before length of message - 4
 800068a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800068c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800068e:	4413      	add	r3, r2
 8000690:	781a      	ldrb	r2, [r3, #0]
 8000692:	4b59      	ldr	r3, [pc, #356]	; (80007f8 <PacketDisassemble+0x188>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	429a      	cmp	r2, r3
 8000698:	bf0c      	ite	eq
 800069a:	2301      	moveq	r3, #1
 800069c:	2300      	movne	r3, #0
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80006a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a4:	1acb      	subs	r3, r1, r3
 80006a6:	2b0a      	cmp	r3, #10
 80006a8:	bfcc      	ite	gt
 80006aa:	2301      	movgt	r3, #1
 80006ac:	2300      	movle	r3, #0
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	4013      	ands	r3, r2
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d010      	beq.n	80006da <PacketDisassemble+0x6a>
        {
            uint8_t cmpHeader[4];
            memcpy(cmpHeader, buffer + i, 4);
 80006b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80006bc:	4413      	add	r3, r2
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	61bb      	str	r3, [r7, #24]
            if (!memcmp(cmpHeader, header, 4))
 80006c2:	f107 0318 	add.w	r3, r7, #24
 80006c6:	2204      	movs	r2, #4
 80006c8:	494b      	ldr	r1, [pc, #300]	; (80007f8 <PacketDisassemble+0x188>)
 80006ca:	4618      	mov	r0, r3
 80006cc:	f004 fefc 	bl	80054c8 <memcmp>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d101      	bne.n	80006da <PacketDisassemble+0x6a>
            {
                pos = i;//set the position of the start of the message
 80006d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
    for (int i = 0; i < bufferSize; i++)
 80006da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006dc:	3301      	adds	r3, #1
 80006de:	637b      	str	r3, [r7, #52]	; 0x34
 80006e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006e4:	429a      	cmp	r2, r3
 80006e6:	dbd0      	blt.n	800068a <PacketDisassemble+0x1a>
            }
        }
    }
    if (pos == -1)//cant find header
 80006e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ee:	d101      	bne.n	80006f4 <PacketDisassemble+0x84>
    {
        return DEFRAME_INVALID_HEADER;
 80006f0:	2301      	movs	r3, #1
 80006f2:	e07c      	b.n	80007ee <PacketDisassemble+0x17e>
    }
    else
    {
 80006f4:	466b      	mov	r3, sp
 80006f6:	461d      	mov	r5, r3
        //CRC verification

        uint32_t givenCRC;
        uint8_t tempCRC[4];
        uint8_t actualLen = buffer[pos + 6] + 1 + 1 + 1+ 4;
 80006f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006fa:	3306      	adds	r3, #6
 80006fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80006fe:	4413      	add	r3, r2
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	3307      	adds	r3, #7
 8000704:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        memcpy(tempCRC,buffer+(pos+actualLen),4);//get CRC in the packet
 8000708:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800070c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800070e:	4413      	add	r3, r2
 8000710:	461a      	mov	r2, r3
 8000712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000714:	4413      	add	r3, r2
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	617b      	str	r3, [r7, #20]
        givenCRC=(tempCRC[0]<<24)|(tempCRC[1]<<16)|(tempCRC[2]<<8)|(tempCRC[3]);//make the CRC in uint32 form
 800071a:	7d3b      	ldrb	r3, [r7, #20]
 800071c:	061a      	lsls	r2, r3, #24
 800071e:	7d7b      	ldrb	r3, [r7, #21]
 8000720:	041b      	lsls	r3, r3, #16
 8000722:	431a      	orrs	r2, r3
 8000724:	7dbb      	ldrb	r3, [r7, #22]
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	4313      	orrs	r3, r2
 800072a:	7dfa      	ldrb	r2, [r7, #23]
 800072c:	4313      	orrs	r3, r2
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
        
        //copy everything in the packet except the crc (the last 4 bytes)
        uint8_t tempData[actualLen];
 8000730:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8000734:	4623      	mov	r3, r4
 8000736:	3b01      	subs	r3, #1
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
 800073a:	b2e0      	uxtb	r0, r4
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	f04f 0200 	mov.w	r2, #0
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	00cb      	lsls	r3, r1, #3
 800074a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800074e:	00c2      	lsls	r2, r0, #3
 8000750:	b2e0      	uxtb	r0, r4
 8000752:	f04f 0100 	mov.w	r1, #0
 8000756:	f04f 0200 	mov.w	r2, #0
 800075a:	f04f 0300 	mov.w	r3, #0
 800075e:	00cb      	lsls	r3, r1, #3
 8000760:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000764:	00c2      	lsls	r2, r0, #3
 8000766:	4623      	mov	r3, r4
 8000768:	3307      	adds	r3, #7
 800076a:	08db      	lsrs	r3, r3, #3
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	ebad 0d03 	sub.w	sp, sp, r3
 8000772:	466b      	mov	r3, sp
 8000774:	3300      	adds	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
        memcpy(tempData,buffer+pos,actualLen);
 8000778:	6a38      	ldr	r0, [r7, #32]
 800077a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800077c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800077e:	4413      	add	r3, r2
 8000780:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000784:	4619      	mov	r1, r3
 8000786:	f004 fead 	bl	80054e4 <memcpy>

        uint32_t calcCRC = crc32(0,tempData,sizeof(tempData));//calculate the checksum crc32 of the copied message
 800078a:	6a3b      	ldr	r3, [r7, #32]
 800078c:	4622      	mov	r2, r4
 800078e:	4619      	mov	r1, r3
 8000790:	2000      	movs	r0, #0
 8000792:	f000 f833 	bl	80007fc <crc32>
 8000796:	61f8      	str	r0, [r7, #28]
        if (calcCRC!=givenCRC){
 8000798:	69fa      	ldr	r2, [r7, #28]
 800079a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800079c:	429a      	cmp	r2, r3
 800079e:	d001      	beq.n	80007a4 <PacketDisassemble+0x134>
            return DEFRAME_INVALID_CRC;//return because crc doesnt match
 80007a0:	2302      	movs	r3, #2
 80007a2:	e023      	b.n	80007ec <PacketDisassemble+0x17c>
        }

        *id = buffer[pos + 4];
 80007a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007a6:	3304      	adds	r3, #4
 80007a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007aa:	4413      	add	r3, r2
 80007ac:	781a      	ldrb	r2, [r3, #0]
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	701a      	strb	r2, [r3, #0]
        *len = buffer[pos+6];
 80007b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007b4:	3306      	adds	r3, #6
 80007b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007b8:	4413      	add	r3, r2
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	701a      	strb	r2, [r3, #0]
        *cmd = buffer[pos + 5];
 80007c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007c2:	3305      	adds	r3, #5
 80007c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007c6:	4413      	add	r3, r2
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	701a      	strb	r2, [r3, #0]

        if (*len != 0)//len !=0 means there is a argument to the command
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d009      	beq.n	80007ea <PacketDisassemble+0x17a>
        {
            memcpy(arg, buffer + pos + 7, *len );
 80007d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007d8:	3307      	adds	r3, #7
 80007da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007dc:	18d1      	adds	r1, r2, r3
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	6838      	ldr	r0, [r7, #0]
 80007e6:	f004 fe7d 	bl	80054e4 <memcpy>
        }
        return DEFRAME_OK;//return with ok
 80007ea:	2300      	movs	r3, #0
 80007ec:	46ad      	mov	sp, r5
    }

}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3738      	adds	r7, #56	; 0x38
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bdb0      	pop	{r4, r5, r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000488 	.word	0x20000488

080007fc <crc32>:
* @note              Used polynomial is 0x04C11DB7. Implementation is standard table algorithm
*                    with reflection and byte reversal. Implementation details borrowed from literature.
*********************************************************************************************
*/
DWORD crc32(DWORD crc, BYTE *buf, DWORD size)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
    BYTE* p = buf;
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	617b      	str	r3, [r7, #20]

    crc = ~crc;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	43db      	mvns	r3, r3
 8000810:	60fb      	str	r3, [r7, #12]

    while (size--)
 8000812:	e00f      	b.n	8000834 <crc32+0x38>
        crc = crc32_tab[(BYTE)crc ^ *p++] ^ (crc >> 8);
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	b2da      	uxtb	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	1c59      	adds	r1, r3, #1
 800081c:	6179      	str	r1, [r7, #20]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4053      	eors	r3, r2
 8000822:	b2db      	uxtb	r3, r3
 8000824:	461a      	mov	r2, r3
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <crc32+0x54>)
 8000828:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	0a1b      	lsrs	r3, r3, #8
 8000830:	4053      	eors	r3, r2
 8000832:	60fb      	str	r3, [r7, #12]
    while (size--)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	1e5a      	subs	r2, r3, #1
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1ea      	bne.n	8000814 <crc32+0x18>

    return ~crc;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	43db      	mvns	r3, r3
}
 8000842:	4618      	mov	r0, r3
 8000844:	371c      	adds	r7, #28
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000000 	.word	0x20000000

08000854 <Clear>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*---------------------- CLEAR BUFFERS  ----------------------*/
void Clear(uint8_t *buffer, int len)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < len; i++)
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	e007      	b.n	8000874 <Clear+0x20>
	{
		buffer[i] = 0x00;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < len; i++)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fa      	ldr	r2, [r7, #12]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	dbf3      	blt.n	8000864 <Clear+0x10>
	}
}
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
	...

0800088c <Get_Current>:
/*---------------------- OCU GET CURRENT ----------------------*/
void Get_Current()
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af02      	add	r7, sp, #8

/*---------------------- OCU GET_CURRENT FIRST MESSAGE ----------------------*/
	uint8_t arg[] = {0x0C};
 8000892:	230c      	movs	r3, #12
 8000894:	713b      	strb	r3, [r7, #4]
	PacketAssemble(OCU_BUS_ID, OCU_HANDSHAKE, arg, 1, BufferTx);
 8000896:	1d3a      	adds	r2, r7, #4
 8000898:	4b54      	ldr	r3, [pc, #336]	; (80009ec <Get_Current+0x160>)
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2301      	movs	r3, #1
 800089e:	2100      	movs	r1, #0
 80008a0:	2001      	movs	r0, #1
 80008a2:	f7ff fe5b 	bl	800055c <PacketAssemble>
	HAL_Delay(5000);
 80008a6:	f241 3088 	movw	r0, #5000	; 0x1388
 80008aa:	f000 fd6f 	bl	800138c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2110      	movs	r1, #16
 80008b2:	484f      	ldr	r0, [pc, #316]	; (80009f0 <Get_Current+0x164>)
 80008b4:	f001 fb0a 	bl	8001ecc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi4, BufferTx, sizeof(BufferTx), HAL_MAX_DELAY);
 80008b8:	f04f 33ff 	mov.w	r3, #4294967295
 80008bc:	220c      	movs	r2, #12
 80008be:	494b      	ldr	r1, [pc, #300]	; (80009ec <Get_Current+0x160>)
 80008c0:	484c      	ldr	r0, [pc, #304]	; (80009f4 <Get_Current+0x168>)
 80008c2:	f002 fe48 	bl	8003556 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	2110      	movs	r1, #16
 80008ca:	4849      	ldr	r0, [pc, #292]	; (80009f0 <Get_Current+0x164>)
 80008cc:	f001 fafe 	bl	8001ecc <HAL_GPIO_WritePin>
	HAL_Delay(3);
 80008d0:	2003      	movs	r0, #3
 80008d2:	f000 fd5b 	bl	800138c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2110      	movs	r1, #16
 80008da:	4845      	ldr	r0, [pc, #276]	; (80009f0 <Get_Current+0x164>)
 80008dc:	f001 faf6 	bl	8001ecc <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, BufferRx, sizeof(BufferRx), HAL_MAX_DELAY);
 80008e0:	f04f 33ff 	mov.w	r3, #4294967295
 80008e4:	220c      	movs	r2, #12
 80008e6:	4944      	ldr	r1, [pc, #272]	; (80009f8 <Get_Current+0x16c>)
 80008e8:	4842      	ldr	r0, [pc, #264]	; (80009f4 <Get_Current+0x168>)
 80008ea:	f002 ffa2 	bl	8003832 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4, GPIO_PIN_SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	2110      	movs	r1, #16
 80008f2:	483f      	ldr	r0, [pc, #252]	; (80009f0 <Get_Current+0x164>)
 80008f4:	f001 faea 	bl	8001ecc <HAL_GPIO_WritePin>
	HAL_Delay(3);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f000 fd47 	bl	800138c <HAL_Delay>

	deframeReturn retVal;
	retVal = PacketDisassemble(&id, &len, &cmd, BufferArg, BufferRx, sizeof(BufferArg));
 80008fe:	230c      	movs	r3, #12
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	4b3d      	ldr	r3, [pc, #244]	; (80009f8 <Get_Current+0x16c>)
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	4b3d      	ldr	r3, [pc, #244]	; (80009fc <Get_Current+0x170>)
 8000908:	4a3d      	ldr	r2, [pc, #244]	; (8000a00 <Get_Current+0x174>)
 800090a:	493e      	ldr	r1, [pc, #248]	; (8000a04 <Get_Current+0x178>)
 800090c:	483e      	ldr	r0, [pc, #248]	; (8000a08 <Get_Current+0x17c>)
 800090e:	f7ff feaf 	bl	8000670 <PacketDisassemble>
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]

/*---------------------- OCU GET_CURRENT FIRST MESSAGE ----------------------*/

	if(retVal == DEFRAME_OK)
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d104      	bne.n	8000926 <Get_Current+0x9a>
	{
		Ack++;
 800091c:	4b3b      	ldr	r3, [pc, #236]	; (8000a0c <Get_Current+0x180>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	4a3a      	ldr	r2, [pc, #232]	; (8000a0c <Get_Current+0x180>)
 8000924:	6013      	str	r3, [r2, #0]
	}
/*---------------------- OCU GET_CURRENT 2ND MESSAGE ----------------------*/
	if(Ack  == 1 ) {
 8000926:	4b39      	ldr	r3, [pc, #228]	; (8000a0c <Get_Current+0x180>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d11b      	bne.n	8000966 <Get_Current+0xda>
		PacketAssemble(OCU_BUS_ID, OCU_GET_CURRENT, Current_Full_TX, 1, BufferTX2);
 800092e:	4b38      	ldr	r3, [pc, #224]	; (8000a10 <Get_Current+0x184>)
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	2301      	movs	r3, #1
 8000934:	4a37      	ldr	r2, [pc, #220]	; (8000a14 <Get_Current+0x188>)
 8000936:	2109      	movs	r1, #9
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff fe0f 	bl	800055c <PacketAssemble>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2110      	movs	r1, #16
 8000942:	482b      	ldr	r0, [pc, #172]	; (80009f0 <Get_Current+0x164>)
 8000944:	f001 fac2 	bl	8001ecc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi4,BufferTX2,sizeof(BufferTX2), HAL_MAX_DELAY);
 8000948:	f04f 33ff 	mov.w	r3, #4294967295
 800094c:	2217      	movs	r2, #23
 800094e:	4930      	ldr	r1, [pc, #192]	; (8000a10 <Get_Current+0x184>)
 8000950:	4828      	ldr	r0, [pc, #160]	; (80009f4 <Get_Current+0x168>)
 8000952:	f002 fe00 	bl	8003556 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8000956:	2201      	movs	r2, #1
 8000958:	2110      	movs	r1, #16
 800095a:	4825      	ldr	r0, [pc, #148]	; (80009f0 <Get_Current+0x164>)
 800095c:	f001 fab6 	bl	8001ecc <HAL_GPIO_WritePin>
		HAL_Delay(3);
 8000960:	2003      	movs	r0, #3
 8000962:	f000 fd13 	bl	800138c <HAL_Delay>
	}
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2110      	movs	r1, #16
 800096a:	4821      	ldr	r0, [pc, #132]	; (80009f0 <Get_Current+0x164>)
 800096c:	f001 faae 	bl	8001ecc <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, BufferRX2, 12, HAL_MAX_DELAY);
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
 8000974:	220c      	movs	r2, #12
 8000976:	4928      	ldr	r1, [pc, #160]	; (8000a18 <Get_Current+0x18c>)
 8000978:	481e      	ldr	r0, [pc, #120]	; (80009f4 <Get_Current+0x168>)
 800097a:	f002 ff5a 	bl	8003832 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4,GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	2110      	movs	r1, #16
 8000982:	481b      	ldr	r0, [pc, #108]	; (80009f0 <Get_Current+0x164>)
 8000984:	f001 faa2 	bl	8001ecc <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8000988:	2003      	movs	r0, #3
 800098a:	f000 fcff 	bl	800138c <HAL_Delay>

	retVal = PacketDisassemble(&id,&len,&cmd, BufferArg, BufferRX2, sizeof(BufferArg));
 800098e:	230c      	movs	r3, #12
 8000990:	9301      	str	r3, [sp, #4]
 8000992:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <Get_Current+0x18c>)
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <Get_Current+0x170>)
 8000998:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <Get_Current+0x174>)
 800099a:	491a      	ldr	r1, [pc, #104]	; (8000a04 <Get_Current+0x178>)
 800099c:	481a      	ldr	r0, [pc, #104]	; (8000a08 <Get_Current+0x17c>)
 800099e:	f7ff fe67 	bl	8000670 <PacketDisassemble>
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	if (retVal == DEFRAME_OK)
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d104      	bne.n	80009b6 <Get_Current+0x12a>
	{
		Ack++;
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <Get_Current+0x180>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	3301      	adds	r3, #1
 80009b2:	4a16      	ldr	r2, [pc, #88]	; (8000a0c <Get_Current+0x180>)
 80009b4:	6013      	str	r3, [r2, #0]
	}
	Ack = 0;
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <Get_Current+0x180>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
	HAL_SPIEx_FlushRxFifo(&hspi4);
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <Get_Current+0x168>)
 80009be:	f003 fc7f 	bl	80042c0 <HAL_SPIEx_FlushRxFifo>
	Clear(BufferTx, sizeof(BufferTx));
 80009c2:	210c      	movs	r1, #12
 80009c4:	4809      	ldr	r0, [pc, #36]	; (80009ec <Get_Current+0x160>)
 80009c6:	f7ff ff45 	bl	8000854 <Clear>
	Clear(BufferRx, sizeof(BufferRx));
 80009ca:	210c      	movs	r1, #12
 80009cc:	480a      	ldr	r0, [pc, #40]	; (80009f8 <Get_Current+0x16c>)
 80009ce:	f7ff ff41 	bl	8000854 <Clear>
	Clear(BufferTX2, sizeof(BufferTX2));
 80009d2:	2117      	movs	r1, #23
 80009d4:	480e      	ldr	r0, [pc, #56]	; (8000a10 <Get_Current+0x184>)
 80009d6:	f7ff ff3d 	bl	8000854 <Clear>
	Clear(BufferRX2, sizeof(BufferRX2));
 80009da:	2117      	movs	r1, #23
 80009dc:	480e      	ldr	r0, [pc, #56]	; (8000a18 <Get_Current+0x18c>)
 80009de:	f7ff ff39 	bl	8000854 <Clear>
/*---------------------- OCU GET_CURRENT 2ND MESSAGE ----------------------*/

};
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000428 	.word	0x20000428
 80009f0:	40021000 	.word	0x40021000
 80009f4:	200009dc 	.word	0x200009dc
 80009f8:	20000434 	.word	0x20000434
 80009fc:	2000047c 	.word	0x2000047c
 8000a00:	20000ad5 	.word	0x20000ad5
 8000a04:	20000ad4 	.word	0x20000ad4
 8000a08:	20000978 	.word	0x20000978
 8000a0c:	2000048c 	.word	0x2000048c
 8000a10:	20000440 	.word	0x20000440
 8000a14:	20000470 	.word	0x20000470
 8000a18:	20000458 	.word	0x20000458

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a20:	f000 fc57 	bl	80012d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a24:	f000 f81c 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a28:	f000 f94c 	bl	8000cc4 <MX_GPIO_Init>
 // MX_ETH_Init();
  MX_USART3_UART_Init();
 8000a2c:	f000 f8ec 	bl	8000c08 <MX_USART3_UART_Init>
  //MX_DMA_Init();
  MX_SPI4_Init();
 8000a30:	f000 f888 	bl	8000b44 <MX_SPI4_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a34:	f000 f918 	bl	8000c68 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM14_Init();
 8000a38:	f000 f8c2 	bl	8000bc0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim14);
 8000a3c:	4806      	ldr	r0, [pc, #24]	; (8000a58 <main+0x3c>)
 8000a3e:	f003 fcb9 	bl	80043b4 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2110      	movs	r1, #16
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <main+0x40>)
 8000a48:	f001 fa40 	bl	8001ecc <HAL_GPIO_WritePin>
  PacketInit();
 8000a4c:	f7ff fd70 	bl	8000530 <PacketInit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


		  Get_Current();
 8000a50:	f7ff ff1c 	bl	800088c <Get_Current>
 8000a54:	e7fc      	b.n	8000a50 <main+0x34>
 8000a56:	bf00      	nop
 8000a58:	20000a40 	.word	0x20000a40
 8000a5c:	40021000 	.word	0x40021000

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b094      	sub	sp, #80	; 0x50
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	2234      	movs	r2, #52	; 0x34
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f004 fd46 	bl	8005500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a84:	f001 fb84 	bl	8002190 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a88:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <SystemClock_Config+0xdc>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	4a2b      	ldr	r2, [pc, #172]	; (8000b3c <SystemClock_Config+0xdc>)
 8000a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a92:	6413      	str	r3, [r2, #64]	; 0x40
 8000a94:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <SystemClock_Config+0xdc>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aa0:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <SystemClock_Config+0xe0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aa8:	4a25      	ldr	r2, [pc, #148]	; (8000b40 <SystemClock_Config+0xe0>)
 8000aaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <SystemClock_Config+0xe0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ac0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ac4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ace:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000ad4:	2360      	movs	r3, #96	; 0x60
 8000ad6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000adc:	2304      	movs	r3, #4
 8000ade:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f001 fbb1 	bl	8002250 <HAL_RCC_OscConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000af4:	f000 f9a8 	bl	8000e48 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000af8:	f001 fb5a 	bl	80021b0 <HAL_PWREx_EnableOverDrive>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b02:	f000 f9a1 	bl	8000e48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b06:	230f      	movs	r3, #15
 8000b08:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	2103      	movs	r1, #3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 fe42 	bl	80027ac <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b2e:	f000 f98b 	bl	8000e48 <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3750      	adds	r7, #80	; 0x50
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40007000 	.word	0x40007000

08000b44 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <MX_SPI4_Init+0x74>)
 8000b4a:	4a1c      	ldr	r2, [pc, #112]	; (8000bbc <MX_SPI4_Init+0x78>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_SPI4_Init+0x74>)
 8000b50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b54:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <MX_SPI4_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <MX_SPI4_Init+0x74>)
 8000b5e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b62:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_SPI4_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <MX_SPI4_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_SPI4_Init+0x74>)
 8000b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b76:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_SPI4_Init+0x74>)
 8000b7a:	2238      	movs	r2, #56	; 0x38
 8000b7c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_SPI4_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_SPI4_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <MX_SPI4_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_SPI4_Init+0x74>)
 8000b92:	2207      	movs	r2, #7
 8000b94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <MX_SPI4_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_SPI4_Init+0x74>)
 8000b9e:	2208      	movs	r2, #8
 8000ba0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_SPI4_Init+0x74>)
 8000ba4:	f002 fc2c 	bl	8003400 <HAL_SPI_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000bae:	f000 f94b 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200009dc 	.word	0x200009dc
 8000bbc:	40013400 	.word	0x40013400

08000bc0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_TIM14_Init+0x40>)
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <MX_TIM14_Init+0x44>)
 8000bc8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10800 - 1;
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <MX_TIM14_Init+0x40>)
 8000bcc:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8000bd0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <MX_TIM14_Init+0x40>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000 - 1;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_TIM14_Init+0x40>)
 8000bda:	f241 3287 	movw	r2, #4999	; 0x1387
 8000bde:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <MX_TIM14_Init+0x40>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_TIM14_Init+0x40>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <MX_TIM14_Init+0x40>)
 8000bee:	f003 fb89 	bl	8004304 <HAL_TIM_Base_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000bf8:	f000 f926 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000a40 	.word	0x20000a40
 8000c04:	40002000 	.word	0x40002000

08000c08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c0e:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <MX_USART3_UART_Init+0x5c>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c12:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c4c:	f003 fcca 	bl	80045e4 <HAL_UART_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c56:	f000 f8f7 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000490 	.word	0x20000490
 8000c64:	40004800 	.word	0x40004800

08000c68 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c76:	2206      	movs	r2, #6
 8000c78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c88:	2202      	movs	r2, #2
 8000c8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cac:	f001 f927 	bl	8001efe <HAL_PCD_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000cb6:	f000 f8c7 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000514 	.word	0x20000514

08000cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08c      	sub	sp, #48	; 0x30
 8000cc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
 8000cd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cda:	4b56      	ldr	r3, [pc, #344]	; (8000e34 <MX_GPIO_Init+0x170>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a55      	ldr	r2, [pc, #340]	; (8000e34 <MX_GPIO_Init+0x170>)
 8000ce0:	f043 0310 	orr.w	r3, r3, #16
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b53      	ldr	r3, [pc, #332]	; (8000e34 <MX_GPIO_Init+0x170>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0310 	and.w	r3, r3, #16
 8000cee:	61bb      	str	r3, [r7, #24]
 8000cf0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf2:	4b50      	ldr	r3, [pc, #320]	; (8000e34 <MX_GPIO_Init+0x170>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a4f      	ldr	r2, [pc, #316]	; (8000e34 <MX_GPIO_Init+0x170>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b4d      	ldr	r3, [pc, #308]	; (8000e34 <MX_GPIO_Init+0x170>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d0a:	4b4a      	ldr	r3, [pc, #296]	; (8000e34 <MX_GPIO_Init+0x170>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a49      	ldr	r2, [pc, #292]	; (8000e34 <MX_GPIO_Init+0x170>)
 8000d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b47      	ldr	r3, [pc, #284]	; (8000e34 <MX_GPIO_Init+0x170>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	4b44      	ldr	r3, [pc, #272]	; (8000e34 <MX_GPIO_Init+0x170>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a43      	ldr	r2, [pc, #268]	; (8000e34 <MX_GPIO_Init+0x170>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b41      	ldr	r3, [pc, #260]	; (8000e34 <MX_GPIO_Init+0x170>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	4b3e      	ldr	r3, [pc, #248]	; (8000e34 <MX_GPIO_Init+0x170>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a3d      	ldr	r2, [pc, #244]	; (8000e34 <MX_GPIO_Init+0x170>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b3b      	ldr	r3, [pc, #236]	; (8000e34 <MX_GPIO_Init+0x170>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d52:	4b38      	ldr	r3, [pc, #224]	; (8000e34 <MX_GPIO_Init+0x170>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a37      	ldr	r2, [pc, #220]	; (8000e34 <MX_GPIO_Init+0x170>)
 8000d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b35      	ldr	r3, [pc, #212]	; (8000e34 <MX_GPIO_Init+0x170>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6a:	4b32      	ldr	r3, [pc, #200]	; (8000e34 <MX_GPIO_Init+0x170>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a31      	ldr	r2, [pc, #196]	; (8000e34 <MX_GPIO_Init+0x170>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b2f      	ldr	r3, [pc, #188]	; (8000e34 <MX_GPIO_Init+0x170>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2110      	movs	r1, #16
 8000d86:	482c      	ldr	r0, [pc, #176]	; (8000e38 <MX_GPIO_Init+0x174>)
 8000d88:	f001 f8a0 	bl	8001ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d92:	482a      	ldr	r0, [pc, #168]	; (8000e3c <MX_GPIO_Init+0x178>)
 8000d94:	f001 f89a 	bl	8001ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2140      	movs	r1, #64	; 0x40
 8000d9c:	4828      	ldr	r0, [pc, #160]	; (8000e40 <MX_GPIO_Init+0x17c>)
 8000d9e:	f001 f895 	bl	8001ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000da2:	2310      	movs	r3, #16
 8000da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	481f      	ldr	r0, [pc, #124]	; (8000e38 <MX_GPIO_Init+0x174>)
 8000dba:	f000 fedb 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000dbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	481b      	ldr	r0, [pc, #108]	; (8000e44 <MX_GPIO_Init+0x180>)
 8000dd6:	f000 fecd 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000dda:	f244 0381 	movw	r3, #16513	; 0x4081
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	4619      	mov	r1, r3
 8000df2:	4812      	ldr	r0, [pc, #72]	; (8000e3c <MX_GPIO_Init+0x178>)
 8000df4:	f000 febe 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PushButton_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = PushButton_Pin|USB_OverCurrent_Pin;
 8000df8:	2382      	movs	r3, #130	; 0x82
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480d      	ldr	r0, [pc, #52]	; (8000e40 <MX_GPIO_Init+0x17c>)
 8000e0c:	f000 feb2 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e10:	2340      	movs	r3, #64	; 0x40
 8000e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <MX_GPIO_Init+0x17c>)
 8000e28:	f000 fea4 	bl	8001b74 <HAL_GPIO_Init>

}
 8000e2c:	bf00      	nop
 8000e2e:	3730      	adds	r7, #48	; 0x30
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40020400 	.word	0x40020400
 8000e40:	40021800 	.word	0x40021800
 8000e44:	40020800 	.word	0x40020800

08000e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e4c:	b672      	cpsid	i
}
 8000e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <Error_Handler+0x8>
	...

08000e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_MspInit+0x44>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <HAL_MspInit+0x44>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e64:	6413      	str	r3, [r2, #64]	; 0x40
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_MspInit+0x44>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <HAL_MspInit+0x44>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <HAL_MspInit+0x44>)
 8000e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_MspInit+0x44>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800

08000e9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	; 0x28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a45      	ldr	r2, [pc, #276]	; (8000fd0 <HAL_SPI_MspInit+0x134>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	f040 8084 	bne.w	8000fc8 <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000ec0:	4b44      	ldr	r3, [pc, #272]	; (8000fd4 <HAL_SPI_MspInit+0x138>)
 8000ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec4:	4a43      	ldr	r2, [pc, #268]	; (8000fd4 <HAL_SPI_MspInit+0x138>)
 8000ec6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eca:	6453      	str	r3, [r2, #68]	; 0x44
 8000ecc:	4b41      	ldr	r3, [pc, #260]	; (8000fd4 <HAL_SPI_MspInit+0x138>)
 8000ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed8:	4b3e      	ldr	r3, [pc, #248]	; (8000fd4 <HAL_SPI_MspInit+0x138>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	4a3d      	ldr	r2, [pc, #244]	; (8000fd4 <HAL_SPI_MspInit+0x138>)
 8000ede:	f043 0310 	orr.w	r3, r3, #16
 8000ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee4:	4b3b      	ldr	r3, [pc, #236]	; (8000fd4 <HAL_SPI_MspInit+0x138>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee8:	f003 0310 	and.w	r3, r3, #16
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000ef0:	2364      	movs	r3, #100	; 0x64
 8000ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000f00:	2305      	movs	r3, #5
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4833      	ldr	r0, [pc, #204]	; (8000fd8 <HAL_SPI_MspInit+0x13c>)
 8000f0c:	f000 fe32 	bl	8001b74 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8000f10:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <HAL_SPI_MspInit+0x140>)
 8000f12:	4a33      	ldr	r2, [pc, #204]	; (8000fe0 <HAL_SPI_MspInit+0x144>)
 8000f14:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8000f16:	4b31      	ldr	r3, [pc, #196]	; (8000fdc <HAL_SPI_MspInit+0x140>)
 8000f18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f1c:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <HAL_SPI_MspInit+0x140>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f24:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <HAL_SPI_MspInit+0x140>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f2a:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <HAL_SPI_MspInit+0x140>)
 8000f2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f30:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f32:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <HAL_SPI_MspInit+0x140>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f38:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <HAL_SPI_MspInit+0x140>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8000f3e:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <HAL_SPI_MspInit+0x140>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f44:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <HAL_SPI_MspInit+0x140>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f4a:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <HAL_SPI_MspInit+0x140>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8000f50:	4822      	ldr	r0, [pc, #136]	; (8000fdc <HAL_SPI_MspInit+0x140>)
 8000f52:	f000 fb25 	bl	80015a0 <HAL_DMA_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8000f5c:	f7ff ff74 	bl	8000e48 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a1e      	ldr	r2, [pc, #120]	; (8000fdc <HAL_SPI_MspInit+0x140>)
 8000f64:	659a      	str	r2, [r3, #88]	; 0x58
 8000f66:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <HAL_SPI_MspInit+0x140>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <HAL_SPI_MspInit+0x148>)
 8000f6e:	4a1e      	ldr	r2, [pc, #120]	; (8000fe8 <HAL_SPI_MspInit+0x14c>)
 8000f70:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <HAL_SPI_MspInit+0x148>)
 8000f74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f78:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <HAL_SPI_MspInit+0x148>)
 8000f7c:	2240      	movs	r2, #64	; 0x40
 8000f7e:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_SPI_MspInit+0x148>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <HAL_SPI_MspInit+0x148>)
 8000f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8c:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_SPI_MspInit+0x148>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <HAL_SPI_MspInit+0x148>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_SPI_MspInit+0x148>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fa0:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <HAL_SPI_MspInit+0x148>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <HAL_SPI_MspInit+0x148>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <HAL_SPI_MspInit+0x148>)
 8000fae:	f000 faf7 	bl	80015a0 <HAL_DMA_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 8000fb8:	f7ff ff46 	bl	8000e48 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a09      	ldr	r2, [pc, #36]	; (8000fe4 <HAL_SPI_MspInit+0x148>)
 8000fc0:	655a      	str	r2, [r3, #84]	; 0x54
 8000fc2:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <HAL_SPI_MspInit+0x148>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8000fc8:	bf00      	nop
 8000fca:	3728      	adds	r7, #40	; 0x28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40013400 	.word	0x40013400
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	20000918 	.word	0x20000918
 8000fe0:	40026410 	.word	0x40026410
 8000fe4:	2000097c 	.word	0x2000097c
 8000fe8:	40026428 	.word	0x40026428

08000fec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_TIM_Base_MspInit+0x38>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d10b      	bne.n	8001016 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_TIM_Base_MspInit+0x3c>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	4a09      	ldr	r2, [pc, #36]	; (8001028 <HAL_TIM_Base_MspInit+0x3c>)
 8001004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <HAL_TIM_Base_MspInit+0x3c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001016:	bf00      	nop
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40002000 	.word	0x40002000
 8001028:	40023800 	.word	0x40023800

0800102c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b0ae      	sub	sp, #184	; 0xb8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2290      	movs	r2, #144	; 0x90
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f004 fa57 	bl	8005500 <memset>
  if(huart->Instance==USART3)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <HAL_UART_MspInit+0xb4>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d13c      	bne.n	80010d6 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800105c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001060:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001062:	2300      	movs	r3, #0
 8001064:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4618      	mov	r0, r3
 800106c:	f001 fda0 	bl	8002bb0 <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001076:	f7ff fee7 	bl	8000e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800107a:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <HAL_UART_MspInit+0xb8>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <HAL_UART_MspInit+0xb8>)
 8001080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_UART_MspInit+0xb8>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_UART_MspInit+0xb8>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <HAL_UART_MspInit+0xb8>)
 8001098:	f043 0308 	orr.w	r3, r3, #8
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_UART_MspInit+0xb8>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010c4:	2307      	movs	r3, #7
 80010c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <HAL_UART_MspInit+0xbc>)
 80010d2:	f000 fd4f 	bl	8001b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010d6:	bf00      	nop
 80010d8:	37b8      	adds	r7, #184	; 0xb8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40004800 	.word	0x40004800
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020c00 	.word	0x40020c00

080010ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0ae      	sub	sp, #184	; 0xb8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2290      	movs	r2, #144	; 0x90
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f004 f9f7 	bl	8005500 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800111a:	d159      	bne.n	80011d0 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800111c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001120:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4618      	mov	r0, r3
 800112e:	f001 fd3f 	bl	8002bb0 <HAL_RCCEx_PeriphCLKConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001138:	f7ff fe86 	bl	8000e48 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <HAL_PCD_MspInit+0xec>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	4a25      	ldr	r2, [pc, #148]	; (80011d8 <HAL_PCD_MspInit+0xec>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	6313      	str	r3, [r2, #48]	; 0x30
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <HAL_PCD_MspInit+0xec>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001154:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001158:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800116e:	230a      	movs	r3, #10
 8001170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001178:	4619      	mov	r1, r3
 800117a:	4818      	ldr	r0, [pc, #96]	; (80011dc <HAL_PCD_MspInit+0xf0>)
 800117c:	f000 fcfa 	bl	8001b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001180:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001184:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001198:	4619      	mov	r1, r3
 800119a:	4810      	ldr	r0, [pc, #64]	; (80011dc <HAL_PCD_MspInit+0xf0>)
 800119c:	f000 fcea 	bl	8001b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_PCD_MspInit+0xec>)
 80011a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a4:	4a0c      	ldr	r2, [pc, #48]	; (80011d8 <HAL_PCD_MspInit+0xec>)
 80011a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011aa:	6353      	str	r3, [r2, #52]	; 0x34
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_PCD_MspInit+0xec>)
 80011ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <HAL_PCD_MspInit+0xec>)
 80011ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011bc:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <HAL_PCD_MspInit+0xec>)
 80011be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c2:	6453      	str	r3, [r2, #68]	; 0x44
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <HAL_PCD_MspInit+0xec>)
 80011c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80011d0:	bf00      	nop
 80011d2:	37b8      	adds	r7, #184	; 0xb8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <NMI_Handler+0x4>

080011e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <MemManage_Handler+0x4>

080011f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <UsageFault_Handler+0x4>

080011fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122c:	f000 f88e 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <DMA2_Stream0_IRQHandler+0x10>)
 800123a:	f000 fa5f 	bl	80016fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000918 	.word	0x20000918

08001248 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <DMA2_Stream1_IRQHandler+0x10>)
 800124e:	f000 fa55 	bl	80016fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	2000097c 	.word	0x2000097c

0800125c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <SystemInit+0x20>)
 8001262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001266:	4a05      	ldr	r2, [pc, #20]	; (800127c <SystemInit+0x20>)
 8001268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800126c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001284:	480d      	ldr	r0, [pc, #52]	; (80012bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001286:	490e      	ldr	r1, [pc, #56]	; (80012c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001288:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800128c:	e002      	b.n	8001294 <LoopCopyDataInit>

0800128e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001292:	3304      	adds	r3, #4

08001294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001298:	d3f9      	bcc.n	800128e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800129c:	4c0b      	ldr	r4, [pc, #44]	; (80012cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a0:	e001      	b.n	80012a6 <LoopFillZerobss>

080012a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a4:	3204      	adds	r2, #4

080012a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a8:	d3fb      	bcc.n	80012a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012aa:	f7ff ffd7 	bl	800125c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ae:	f004 f8e7 	bl	8005480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012b2:	f7ff fbb3 	bl	8000a1c <main>
  bx  lr    
 80012b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012b8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c0:	2000040c 	.word	0x2000040c
  ldr r2, =_sidata
 80012c4:	08005558 	.word	0x08005558
  ldr r2, =_sbss
 80012c8:	2000040c 	.word	0x2000040c
  ldr r4, =_ebss
 80012cc:	20000adc 	.word	0x20000adc

080012d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC_IRQHandler>

080012d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d6:	2003      	movs	r0, #3
 80012d8:	f000 f92e 	bl	8001538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012dc:	2000      	movs	r0, #0
 80012de:	f000 f805 	bl	80012ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e2:	f7ff fdb7 	bl	8000e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_InitTick+0x54>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x58>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	fbb3 f3f1 	udiv	r3, r3, r1
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f000 f93b 	bl	8001586 <HAL_SYSTICK_Config>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e00e      	b.n	8001338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	d80a      	bhi.n	8001336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001320:	2200      	movs	r2, #0
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f000 f911 	bl	800154e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <HAL_InitTick+0x5c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000400 	.word	0x20000400
 8001344:	20000408 	.word	0x20000408
 8001348:	20000404 	.word	0x20000404

0800134c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x20>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x24>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_IncTick+0x24>)
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000408 	.word	0x20000408
 8001370:	20000ad8 	.word	0x20000ad8

08001374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <HAL_GetTick+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000ad8 	.word	0x20000ad8

0800138c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff ffee 	bl	8001374 <HAL_GetTick>
 8001398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a4:	d005      	beq.n	80013b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_Delay+0x44>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013b2:	bf00      	nop
 80013b4:	f7ff ffde 	bl	8001374 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d8f7      	bhi.n	80013b4 <HAL_Delay+0x28>
  {
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000408 	.word	0x20000408

080013d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <__NVIC_SetPriorityGrouping+0x40>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f0:	4013      	ands	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <__NVIC_SetPriorityGrouping+0x40>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00
 8001418:	05fa0000 	.word	0x05fa0000

0800141c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <__NVIC_GetPriorityGrouping+0x18>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	f003 0307 	and.w	r3, r3, #7
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	6039      	str	r1, [r7, #0]
 8001442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001448:	2b00      	cmp	r3, #0
 800144a:	db0a      	blt.n	8001462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	490c      	ldr	r1, [pc, #48]	; (8001484 <__NVIC_SetPriority+0x4c>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	0112      	lsls	r2, r2, #4
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	440b      	add	r3, r1
 800145c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001460:	e00a      	b.n	8001478 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4908      	ldr	r1, [pc, #32]	; (8001488 <__NVIC_SetPriority+0x50>)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	3b04      	subs	r3, #4
 8001470:	0112      	lsls	r2, r2, #4
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	440b      	add	r3, r1
 8001476:	761a      	strb	r2, [r3, #24]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000e100 	.word	0xe000e100
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	; 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f1c3 0307 	rsb	r3, r3, #7
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	bf28      	it	cs
 80014aa:	2304      	movcs	r3, #4
 80014ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3304      	adds	r3, #4
 80014b2:	2b06      	cmp	r3, #6
 80014b4:	d902      	bls.n	80014bc <NVIC_EncodePriority+0x30>
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3b03      	subs	r3, #3
 80014ba:	e000      	b.n	80014be <NVIC_EncodePriority+0x32>
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43da      	mvns	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	401a      	ands	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	43d9      	mvns	r1, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	4313      	orrs	r3, r2
         );
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3724      	adds	r7, #36	; 0x24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001504:	d301      	bcc.n	800150a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001506:	2301      	movs	r3, #1
 8001508:	e00f      	b.n	800152a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <SysTick_Config+0x40>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001512:	210f      	movs	r1, #15
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f7ff ff8e 	bl	8001438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <SysTick_Config+0x40>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <SysTick_Config+0x40>)
 8001524:	2207      	movs	r2, #7
 8001526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	e000e010 	.word	0xe000e010

08001538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff47 	bl	80013d4 <__NVIC_SetPriorityGrouping>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001560:	f7ff ff5c 	bl	800141c <__NVIC_GetPriorityGrouping>
 8001564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	6978      	ldr	r0, [r7, #20]
 800156c:	f7ff ff8e 	bl	800148c <NVIC_EncodePriority>
 8001570:	4602      	mov	r2, r0
 8001572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff5d 	bl	8001438 <__NVIC_SetPriority>
}
 800157e:	bf00      	nop
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ffb0 	bl	80014f4 <SysTick_Config>
 8001594:	4603      	mov	r3, r0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015ac:	f7ff fee2 	bl	8001374 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e099      	b.n	80016f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2202      	movs	r2, #2
 80015c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0201 	bic.w	r2, r2, #1
 80015da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015dc:	e00f      	b.n	80015fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015de:	f7ff fec9 	bl	8001374 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b05      	cmp	r3, #5
 80015ea:	d908      	bls.n	80015fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2220      	movs	r2, #32
 80015f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2203      	movs	r2, #3
 80015f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e078      	b.n	80016f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1e8      	bne.n	80015de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	4b38      	ldr	r3, [pc, #224]	; (80016f8 <HAL_DMA_Init+0x158>)
 8001618:	4013      	ands	r3, r2
 800161a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800162a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001636:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001642:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	4313      	orrs	r3, r2
 800164e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001654:	2b04      	cmp	r3, #4
 8001656:	d107      	bne.n	8001668 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	4313      	orrs	r3, r2
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	4313      	orrs	r3, r2
 8001666:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f023 0307 	bic.w	r3, r3, #7
 800167e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	4313      	orrs	r3, r2
 8001688:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	2b04      	cmp	r3, #4
 8001690:	d117      	bne.n	80016c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4313      	orrs	r3, r2
 800169a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00e      	beq.n	80016c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f9e9 	bl	8001a7c <DMA_CheckFifoParam>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2240      	movs	r2, #64	; 0x40
 80016b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80016be:	2301      	movs	r3, #1
 80016c0:	e016      	b.n	80016f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f9a0 	bl	8001a10 <DMA_CalcBaseAndBitshift>
 80016d0:	4603      	mov	r3, r0
 80016d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d8:	223f      	movs	r2, #63	; 0x3f
 80016da:	409a      	lsls	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	e010803f 	.word	0xe010803f

080016fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001708:	4b92      	ldr	r3, [pc, #584]	; (8001954 <HAL_DMA_IRQHandler+0x258>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a92      	ldr	r2, [pc, #584]	; (8001958 <HAL_DMA_IRQHandler+0x25c>)
 800170e:	fba2 2303 	umull	r2, r3, r2, r3
 8001712:	0a9b      	lsrs	r3, r3, #10
 8001714:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001726:	2208      	movs	r2, #8
 8001728:	409a      	lsls	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4013      	ands	r3, r2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d01a      	beq.n	8001768 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d013      	beq.n	8001768 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0204 	bic.w	r2, r2, #4
 800174e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001754:	2208      	movs	r2, #8
 8001756:	409a      	lsls	r2, r3
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001760:	f043 0201 	orr.w	r2, r3, #1
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176c:	2201      	movs	r2, #1
 800176e:	409a      	lsls	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d012      	beq.n	800179e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00b      	beq.n	800179e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178a:	2201      	movs	r2, #1
 800178c:	409a      	lsls	r2, r3
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001796:	f043 0202 	orr.w	r2, r3, #2
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a2:	2204      	movs	r2, #4
 80017a4:	409a      	lsls	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d012      	beq.n	80017d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00b      	beq.n	80017d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c0:	2204      	movs	r2, #4
 80017c2:	409a      	lsls	r2, r3
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017cc:	f043 0204 	orr.w	r2, r3, #4
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d8:	2210      	movs	r2, #16
 80017da:	409a      	lsls	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4013      	ands	r3, r2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d043      	beq.n	800186c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d03c      	beq.n	800186c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f6:	2210      	movs	r2, #16
 80017f8:	409a      	lsls	r2, r3
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d018      	beq.n	800183e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d108      	bne.n	800182c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	2b00      	cmp	r3, #0
 8001820:	d024      	beq.n	800186c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	4798      	blx	r3
 800182a:	e01f      	b.n	800186c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001830:	2b00      	cmp	r3, #0
 8001832:	d01b      	beq.n	800186c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	4798      	blx	r3
 800183c:	e016      	b.n	800186c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001848:	2b00      	cmp	r3, #0
 800184a:	d107      	bne.n	800185c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0208 	bic.w	r2, r2, #8
 800185a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001870:	2220      	movs	r2, #32
 8001872:	409a      	lsls	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4013      	ands	r3, r2
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 808e 	beq.w	800199a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 8086 	beq.w	800199a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001892:	2220      	movs	r2, #32
 8001894:	409a      	lsls	r2, r3
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b05      	cmp	r3, #5
 80018a4:	d136      	bne.n	8001914 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0216 	bic.w	r2, r2, #22
 80018b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	695a      	ldr	r2, [r3, #20]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d103      	bne.n	80018d6 <HAL_DMA_IRQHandler+0x1da>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d007      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0208 	bic.w	r2, r2, #8
 80018e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ea:	223f      	movs	r2, #63	; 0x3f
 80018ec:	409a      	lsls	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001906:	2b00      	cmp	r3, #0
 8001908:	d07d      	beq.n	8001a06 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	4798      	blx	r3
        }
        return;
 8001912:	e078      	b.n	8001a06 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d01c      	beq.n	800195c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d108      	bne.n	8001942 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001934:	2b00      	cmp	r3, #0
 8001936:	d030      	beq.n	800199a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	4798      	blx	r3
 8001940:	e02b      	b.n	800199a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001946:	2b00      	cmp	r3, #0
 8001948:	d027      	beq.n	800199a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	4798      	blx	r3
 8001952:	e022      	b.n	800199a <HAL_DMA_IRQHandler+0x29e>
 8001954:	20000400 	.word	0x20000400
 8001958:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10f      	bne.n	800198a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0210 	bic.w	r2, r2, #16
 8001978:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d032      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d022      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2205      	movs	r2, #5
 80019b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0201 	bic.w	r2, r2, #1
 80019c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	3301      	adds	r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d307      	bcc.n	80019e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f2      	bne.n	80019c6 <HAL_DMA_IRQHandler+0x2ca>
 80019e0:	e000      	b.n	80019e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80019e2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	4798      	blx	r3
 8001a04:	e000      	b.n	8001a08 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001a06:	bf00      	nop
    }
  }
}
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop

08001a10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	3b10      	subs	r3, #16
 8001a20:	4a13      	ldr	r2, [pc, #76]	; (8001a70 <DMA_CalcBaseAndBitshift+0x60>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a2a:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <DMA_CalcBaseAndBitshift+0x64>)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d908      	bls.n	8001a50 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <DMA_CalcBaseAndBitshift+0x68>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	1d1a      	adds	r2, r3, #4
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	659a      	str	r2, [r3, #88]	; 0x58
 8001a4e:	e006      	b.n	8001a5e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <DMA_CalcBaseAndBitshift+0x68>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	aaaaaaab 	.word	0xaaaaaaab
 8001a74:	08005540 	.word	0x08005540
 8001a78:	fffffc00 	.word	0xfffffc00

08001a7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d11f      	bne.n	8001ad6 <DMA_CheckFifoParam+0x5a>
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d856      	bhi.n	8001b4a <DMA_CheckFifoParam+0xce>
 8001a9c:	a201      	add	r2, pc, #4	; (adr r2, 8001aa4 <DMA_CheckFifoParam+0x28>)
 8001a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa2:	bf00      	nop
 8001aa4:	08001ab5 	.word	0x08001ab5
 8001aa8:	08001ac7 	.word	0x08001ac7
 8001aac:	08001ab5 	.word	0x08001ab5
 8001ab0:	08001b4b 	.word	0x08001b4b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d046      	beq.n	8001b4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ac4:	e043      	b.n	8001b4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ace:	d140      	bne.n	8001b52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ad4:	e03d      	b.n	8001b52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ade:	d121      	bne.n	8001b24 <DMA_CheckFifoParam+0xa8>
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d837      	bhi.n	8001b56 <DMA_CheckFifoParam+0xda>
 8001ae6:	a201      	add	r2, pc, #4	; (adr r2, 8001aec <DMA_CheckFifoParam+0x70>)
 8001ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aec:	08001afd 	.word	0x08001afd
 8001af0:	08001b03 	.word	0x08001b03
 8001af4:	08001afd 	.word	0x08001afd
 8001af8:	08001b15 	.word	0x08001b15
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
      break;
 8001b00:	e030      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d025      	beq.n	8001b5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b12:	e022      	b.n	8001b5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b1c:	d11f      	bne.n	8001b5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b22:	e01c      	b.n	8001b5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d903      	bls.n	8001b32 <DMA_CheckFifoParam+0xb6>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d003      	beq.n	8001b38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b30:	e018      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
      break;
 8001b36:	e015      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00e      	beq.n	8001b62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
      break;
 8001b48:	e00b      	b.n	8001b62 <DMA_CheckFifoParam+0xe6>
      break;
 8001b4a:	bf00      	nop
 8001b4c:	e00a      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      break;
 8001b4e:	bf00      	nop
 8001b50:	e008      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      break;
 8001b52:	bf00      	nop
 8001b54:	e006      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      break;
 8001b56:	bf00      	nop
 8001b58:	e004      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      break;
 8001b5a:	bf00      	nop
 8001b5c:	e002      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b5e:	bf00      	nop
 8001b60:	e000      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      break;
 8001b62:	bf00      	nop
    }
  } 
  
  return status; 
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop

08001b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	e175      	b.n	8001e80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b94:	2201      	movs	r2, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	f040 8164 	bne.w	8001e7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d005      	beq.n	8001bca <HAL_GPIO_Init+0x56>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d130      	bne.n	8001c2c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c00:	2201      	movs	r2, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 0201 	and.w	r2, r3, #1
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d017      	beq.n	8001c68 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	2203      	movs	r2, #3
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d123      	bne.n	8001cbc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	08da      	lsrs	r2, r3, #3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3208      	adds	r2, #8
 8001c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	220f      	movs	r2, #15
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	08da      	lsrs	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3208      	adds	r2, #8
 8001cb6:	69b9      	ldr	r1, [r7, #24]
 8001cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0203 	and.w	r2, r3, #3
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80be 	beq.w	8001e7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfe:	4b66      	ldr	r3, [pc, #408]	; (8001e98 <HAL_GPIO_Init+0x324>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	4a65      	ldr	r2, [pc, #404]	; (8001e98 <HAL_GPIO_Init+0x324>)
 8001d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d08:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0a:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <HAL_GPIO_Init+0x324>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d16:	4a61      	ldr	r2, [pc, #388]	; (8001e9c <HAL_GPIO_Init+0x328>)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a58      	ldr	r2, [pc, #352]	; (8001ea0 <HAL_GPIO_Init+0x32c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d037      	beq.n	8001db2 <HAL_GPIO_Init+0x23e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a57      	ldr	r2, [pc, #348]	; (8001ea4 <HAL_GPIO_Init+0x330>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d031      	beq.n	8001dae <HAL_GPIO_Init+0x23a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a56      	ldr	r2, [pc, #344]	; (8001ea8 <HAL_GPIO_Init+0x334>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d02b      	beq.n	8001daa <HAL_GPIO_Init+0x236>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a55      	ldr	r2, [pc, #340]	; (8001eac <HAL_GPIO_Init+0x338>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d025      	beq.n	8001da6 <HAL_GPIO_Init+0x232>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a54      	ldr	r2, [pc, #336]	; (8001eb0 <HAL_GPIO_Init+0x33c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d01f      	beq.n	8001da2 <HAL_GPIO_Init+0x22e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a53      	ldr	r2, [pc, #332]	; (8001eb4 <HAL_GPIO_Init+0x340>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d019      	beq.n	8001d9e <HAL_GPIO_Init+0x22a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a52      	ldr	r2, [pc, #328]	; (8001eb8 <HAL_GPIO_Init+0x344>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d013      	beq.n	8001d9a <HAL_GPIO_Init+0x226>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a51      	ldr	r2, [pc, #324]	; (8001ebc <HAL_GPIO_Init+0x348>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00d      	beq.n	8001d96 <HAL_GPIO_Init+0x222>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a50      	ldr	r2, [pc, #320]	; (8001ec0 <HAL_GPIO_Init+0x34c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d007      	beq.n	8001d92 <HAL_GPIO_Init+0x21e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4f      	ldr	r2, [pc, #316]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d101      	bne.n	8001d8e <HAL_GPIO_Init+0x21a>
 8001d8a:	2309      	movs	r3, #9
 8001d8c:	e012      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001d8e:	230a      	movs	r3, #10
 8001d90:	e010      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001d92:	2308      	movs	r3, #8
 8001d94:	e00e      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001d96:	2307      	movs	r3, #7
 8001d98:	e00c      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001d9a:	2306      	movs	r3, #6
 8001d9c:	e00a      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001d9e:	2305      	movs	r3, #5
 8001da0:	e008      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001da2:	2304      	movs	r3, #4
 8001da4:	e006      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001da6:	2303      	movs	r3, #3
 8001da8:	e004      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e002      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001db2:	2300      	movs	r3, #0
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	f002 0203 	and.w	r2, r2, #3
 8001dba:	0092      	lsls	r2, r2, #2
 8001dbc:	4093      	lsls	r3, r2
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001dc4:	4935      	ldr	r1, [pc, #212]	; (8001e9c <HAL_GPIO_Init+0x328>)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001df6:	4a34      	ldr	r2, [pc, #208]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dfc:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e20:	4a29      	ldr	r2, [pc, #164]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e26:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e4a:	4a1f      	ldr	r2, [pc, #124]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e50:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e74:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	61fb      	str	r3, [r7, #28]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	2b0f      	cmp	r3, #15
 8001e84:	f67f ae86 	bls.w	8001b94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3724      	adds	r7, #36	; 0x24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40013800 	.word	0x40013800
 8001ea0:	40020000 	.word	0x40020000
 8001ea4:	40020400 	.word	0x40020400
 8001ea8:	40020800 	.word	0x40020800
 8001eac:	40020c00 	.word	0x40020c00
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40021400 	.word	0x40021400
 8001eb8:	40021800 	.word	0x40021800
 8001ebc:	40021c00 	.word	0x40021c00
 8001ec0:	40022000 	.word	0x40022000
 8001ec4:	40022400 	.word	0x40022400
 8001ec8:	40013c00 	.word	0x40013c00

08001ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001edc:	787b      	ldrb	r3, [r7, #1]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee2:	887a      	ldrh	r2, [r7, #2]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ee8:	e003      	b.n	8001ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001eea:	887b      	ldrh	r3, [r7, #2]
 8001eec:	041a      	lsls	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	619a      	str	r2, [r3, #24]
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001efe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f00:	b08f      	sub	sp, #60	; 0x3c
 8001f02:	af0a      	add	r7, sp, #40	; 0x28
 8001f04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e116      	b.n	800213e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d106      	bne.n	8001f30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff f8de 	bl	80010ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2203      	movs	r2, #3
 8001f34:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f003 f800 	bl	8004f54 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	687e      	ldr	r6, [r7, #4]
 8001f5c:	466d      	mov	r5, sp
 8001f5e:	f106 0410 	add.w	r4, r6, #16
 8001f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f72:	1d33      	adds	r3, r6, #4
 8001f74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f76:	6838      	ldr	r0, [r7, #0]
 8001f78:	f002 ff94 	bl	8004ea4 <USB_CoreInit>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d005      	beq.n	8001f8e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2202      	movs	r2, #2
 8001f86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e0d7      	b.n	800213e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f002 ffee 	bl	8004f76 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73fb      	strb	r3, [r7, #15]
 8001f9e:	e04a      	b.n	8002036 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fa0:	7bfa      	ldrb	r2, [r7, #15]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	333d      	adds	r3, #61	; 0x3d
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fb4:	7bfa      	ldrb	r2, [r7, #15]
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	333c      	adds	r3, #60	; 0x3c
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fc8:	7bfa      	ldrb	r2, [r7, #15]
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	b298      	uxth	r0, r3
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	3342      	adds	r3, #66	; 0x42
 8001fdc:	4602      	mov	r2, r0
 8001fde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	1a9b      	subs	r3, r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	333f      	adds	r3, #63	; 0x3f
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ff4:	7bfa      	ldrb	r2, [r7, #15]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	3344      	adds	r3, #68	; 0x44
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	1a9b      	subs	r3, r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	3348      	adds	r3, #72	; 0x48
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	1a9b      	subs	r3, r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	3350      	adds	r3, #80	; 0x50
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	3301      	adds	r3, #1
 8002034:	73fb      	strb	r3, [r7, #15]
 8002036:	7bfa      	ldrb	r2, [r7, #15]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	429a      	cmp	r2, r3
 800203e:	d3af      	bcc.n	8001fa0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002040:	2300      	movs	r3, #0
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	e044      	b.n	80020d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002072:	7bfa      	ldrb	r2, [r7, #15]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	1a9b      	subs	r3, r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002088:	7bfa      	ldrb	r2, [r7, #15]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	1a9b      	subs	r3, r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	3301      	adds	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d3b5      	bcc.n	8002046 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	687e      	ldr	r6, [r7, #4]
 80020e2:	466d      	mov	r5, sp
 80020e4:	f106 0410 	add.w	r4, r6, #16
 80020e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80020f8:	1d33      	adds	r3, r6, #4
 80020fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020fc:	6838      	ldr	r0, [r7, #0]
 80020fe:	f002 ff87 	bl	8005010 <USB_DevInit>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e014      	b.n	800213e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	2b01      	cmp	r3, #1
 800212a:	d102      	bne.n	8002132 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f80b 	bl	8002148 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f003 f941 	bl	80053be <USB_DevDisconnect>

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002148 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_PCDEx_ActivateLPM+0x44>)
 8002178:	4313      	orrs	r3, r2
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	10000003 	.word	0x10000003

08002190 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800219a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219e:	6013      	str	r3, [r2, #0]
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40007000 	.word	0x40007000

080021b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80021ba:	4b23      	ldr	r3, [pc, #140]	; (8002248 <HAL_PWREx_EnableOverDrive+0x98>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a22      	ldr	r2, [pc, #136]	; (8002248 <HAL_PWREx_EnableOverDrive+0x98>)
 80021c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <HAL_PWREx_EnableOverDrive+0x98>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021d2:	4b1e      	ldr	r3, [pc, #120]	; (800224c <HAL_PWREx_EnableOverDrive+0x9c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a1d      	ldr	r2, [pc, #116]	; (800224c <HAL_PWREx_EnableOverDrive+0x9c>)
 80021d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021de:	f7ff f8c9 	bl	8001374 <HAL_GetTick>
 80021e2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021e4:	e009      	b.n	80021fa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021e6:	f7ff f8c5 	bl	8001374 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021f4:	d901      	bls.n	80021fa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e022      	b.n	8002240 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <HAL_PWREx_EnableOverDrive+0x9c>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002206:	d1ee      	bne.n	80021e6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002208:	4b10      	ldr	r3, [pc, #64]	; (800224c <HAL_PWREx_EnableOverDrive+0x9c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0f      	ldr	r2, [pc, #60]	; (800224c <HAL_PWREx_EnableOverDrive+0x9c>)
 800220e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002212:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002214:	f7ff f8ae 	bl	8001374 <HAL_GetTick>
 8002218:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800221a:	e009      	b.n	8002230 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800221c:	f7ff f8aa 	bl	8001374 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800222a:	d901      	bls.n	8002230 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e007      	b.n	8002240 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002238:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800223c:	d1ee      	bne.n	800221c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40023800 	.word	0x40023800
 800224c:	40007000 	.word	0x40007000

08002250 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002258:	2300      	movs	r3, #0
 800225a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e29b      	b.n	800279e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 8087 	beq.w	8002382 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002274:	4b96      	ldr	r3, [pc, #600]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	2b04      	cmp	r3, #4
 800227e:	d00c      	beq.n	800229a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002280:	4b93      	ldr	r3, [pc, #588]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	2b08      	cmp	r3, #8
 800228a:	d112      	bne.n	80022b2 <HAL_RCC_OscConfig+0x62>
 800228c:	4b90      	ldr	r3, [pc, #576]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002294:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002298:	d10b      	bne.n	80022b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229a:	4b8d      	ldr	r3, [pc, #564]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d06c      	beq.n	8002380 <HAL_RCC_OscConfig+0x130>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d168      	bne.n	8002380 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e275      	b.n	800279e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ba:	d106      	bne.n	80022ca <HAL_RCC_OscConfig+0x7a>
 80022bc:	4b84      	ldr	r3, [pc, #528]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a83      	ldr	r2, [pc, #524]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 80022c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	e02e      	b.n	8002328 <HAL_RCC_OscConfig+0xd8>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10c      	bne.n	80022ec <HAL_RCC_OscConfig+0x9c>
 80022d2:	4b7f      	ldr	r3, [pc, #508]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a7e      	ldr	r2, [pc, #504]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 80022d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	4b7c      	ldr	r3, [pc, #496]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a7b      	ldr	r2, [pc, #492]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 80022e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e01d      	b.n	8002328 <HAL_RCC_OscConfig+0xd8>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0xc0>
 80022f6:	4b76      	ldr	r3, [pc, #472]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a75      	ldr	r2, [pc, #468]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 80022fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b73      	ldr	r3, [pc, #460]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a72      	ldr	r2, [pc, #456]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e00b      	b.n	8002328 <HAL_RCC_OscConfig+0xd8>
 8002310:	4b6f      	ldr	r3, [pc, #444]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a6e      	ldr	r2, [pc, #440]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 8002316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	4b6c      	ldr	r3, [pc, #432]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a6b      	ldr	r2, [pc, #428]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 8002322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d013      	beq.n	8002358 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7ff f820 	bl	8001374 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002338:	f7ff f81c 	bl	8001374 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	; 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e229      	b.n	800279e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	4b61      	ldr	r3, [pc, #388]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0xe8>
 8002356:	e014      	b.n	8002382 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002358:	f7ff f80c 	bl	8001374 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002360:	f7ff f808 	bl	8001374 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b64      	cmp	r3, #100	; 0x64
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e215      	b.n	800279e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002372:	4b57      	ldr	r3, [pc, #348]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x110>
 800237e:	e000      	b.n	8002382 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d069      	beq.n	8002462 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800238e:	4b50      	ldr	r3, [pc, #320]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00b      	beq.n	80023b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800239a:	4b4d      	ldr	r3, [pc, #308]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d11c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x190>
 80023a6:	4b4a      	ldr	r3, [pc, #296]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d116      	bne.n	80023e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b2:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_RCC_OscConfig+0x17a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d001      	beq.n	80023ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e1e9      	b.n	800279e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ca:	4b41      	ldr	r3, [pc, #260]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	493d      	ldr	r1, [pc, #244]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023de:	e040      	b.n	8002462 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d023      	beq.n	8002430 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e8:	4b39      	ldr	r3, [pc, #228]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a38      	ldr	r2, [pc, #224]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7fe ffbe 	bl	8001374 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fc:	f7fe ffba 	bl	8001374 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e1c7      	b.n	800279e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240e:	4b30      	ldr	r3, [pc, #192]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241a:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4929      	ldr	r1, [pc, #164]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 800242a:	4313      	orrs	r3, r2
 800242c:	600b      	str	r3, [r1, #0]
 800242e:	e018      	b.n	8002462 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002430:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a26      	ldr	r2, [pc, #152]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 8002436:	f023 0301 	bic.w	r3, r3, #1
 800243a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe ff9a 	bl	8001374 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002444:	f7fe ff96 	bl	8001374 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e1a3      	b.n	800279e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002456:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d038      	beq.n	80024e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d019      	beq.n	80024aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002476:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 8002478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247a:	4a15      	ldr	r2, [pc, #84]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002482:	f7fe ff77 	bl	8001374 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248a:	f7fe ff73 	bl	8001374 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e180      	b.n	800279e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 800249e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x23a>
 80024a8:	e01a      	b.n	80024e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 80024ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ae:	4a08      	ldr	r2, [pc, #32]	; (80024d0 <HAL_RCC_OscConfig+0x280>)
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b6:	f7fe ff5d 	bl	8001374 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024bc:	e00a      	b.n	80024d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024be:	f7fe ff59 	bl	8001374 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d903      	bls.n	80024d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e166      	b.n	800279e <HAL_RCC_OscConfig+0x54e>
 80024d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d4:	4b92      	ldr	r3, [pc, #584]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 80024d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1ee      	bne.n	80024be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80a4 	beq.w	8002636 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ee:	4b8c      	ldr	r3, [pc, #560]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10d      	bne.n	8002516 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	4b89      	ldr	r3, [pc, #548]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	4a88      	ldr	r2, [pc, #544]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002504:	6413      	str	r3, [r2, #64]	; 0x40
 8002506:	4b86      	ldr	r3, [pc, #536]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002512:	2301      	movs	r3, #1
 8002514:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002516:	4b83      	ldr	r3, [pc, #524]	; (8002724 <HAL_RCC_OscConfig+0x4d4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d118      	bne.n	8002554 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002522:	4b80      	ldr	r3, [pc, #512]	; (8002724 <HAL_RCC_OscConfig+0x4d4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a7f      	ldr	r2, [pc, #508]	; (8002724 <HAL_RCC_OscConfig+0x4d4>)
 8002528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800252e:	f7fe ff21 	bl	8001374 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002536:	f7fe ff1d 	bl	8001374 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b64      	cmp	r3, #100	; 0x64
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e12a      	b.n	800279e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002548:	4b76      	ldr	r3, [pc, #472]	; (8002724 <HAL_RCC_OscConfig+0x4d4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d106      	bne.n	800256a <HAL_RCC_OscConfig+0x31a>
 800255c:	4b70      	ldr	r3, [pc, #448]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	4a6f      	ldr	r2, [pc, #444]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6713      	str	r3, [r2, #112]	; 0x70
 8002568:	e02d      	b.n	80025c6 <HAL_RCC_OscConfig+0x376>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0x33c>
 8002572:	4b6b      	ldr	r3, [pc, #428]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	4a6a      	ldr	r2, [pc, #424]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	6713      	str	r3, [r2, #112]	; 0x70
 800257e:	4b68      	ldr	r3, [pc, #416]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002582:	4a67      	ldr	r2, [pc, #412]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 8002584:	f023 0304 	bic.w	r3, r3, #4
 8002588:	6713      	str	r3, [r2, #112]	; 0x70
 800258a:	e01c      	b.n	80025c6 <HAL_RCC_OscConfig+0x376>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b05      	cmp	r3, #5
 8002592:	d10c      	bne.n	80025ae <HAL_RCC_OscConfig+0x35e>
 8002594:	4b62      	ldr	r3, [pc, #392]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 8002596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002598:	4a61      	ldr	r2, [pc, #388]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 800259a:	f043 0304 	orr.w	r3, r3, #4
 800259e:	6713      	str	r3, [r2, #112]	; 0x70
 80025a0:	4b5f      	ldr	r3, [pc, #380]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 80025a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a4:	4a5e      	ldr	r2, [pc, #376]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6713      	str	r3, [r2, #112]	; 0x70
 80025ac:	e00b      	b.n	80025c6 <HAL_RCC_OscConfig+0x376>
 80025ae:	4b5c      	ldr	r3, [pc, #368]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b2:	4a5b      	ldr	r2, [pc, #364]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ba:	4b59      	ldr	r3, [pc, #356]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025be:	4a58      	ldr	r2, [pc, #352]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 80025c0:	f023 0304 	bic.w	r3, r3, #4
 80025c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d015      	beq.n	80025fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ce:	f7fe fed1 	bl	8001374 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7fe fecd 	bl	8001374 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e0d8      	b.n	800279e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ec:	4b4c      	ldr	r3, [pc, #304]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ee      	beq.n	80025d6 <HAL_RCC_OscConfig+0x386>
 80025f8:	e014      	b.n	8002624 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fa:	f7fe febb 	bl	8001374 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002600:	e00a      	b.n	8002618 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002602:	f7fe feb7 	bl	8001374 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e0c2      	b.n	800279e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002618:	4b41      	ldr	r3, [pc, #260]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ee      	bne.n	8002602 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002624:	7dfb      	ldrb	r3, [r7, #23]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d105      	bne.n	8002636 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262a:	4b3d      	ldr	r3, [pc, #244]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	4a3c      	ldr	r2, [pc, #240]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 8002630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002634:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 80ae 	beq.w	800279c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002640:	4b37      	ldr	r3, [pc, #220]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 030c 	and.w	r3, r3, #12
 8002648:	2b08      	cmp	r3, #8
 800264a:	d06d      	beq.n	8002728 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d14b      	bne.n	80026ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002654:	4b32      	ldr	r3, [pc, #200]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a31      	ldr	r2, [pc, #196]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 800265a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800265e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7fe fe88 	bl	8001374 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002668:	f7fe fe84 	bl	8001374 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e091      	b.n	800279e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267a:	4b29      	ldr	r3, [pc, #164]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69da      	ldr	r2, [r3, #28]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	019b      	lsls	r3, r3, #6
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	085b      	lsrs	r3, r3, #1
 800269e:	3b01      	subs	r3, #1
 80026a0:	041b      	lsls	r3, r3, #16
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	061b      	lsls	r3, r3, #24
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	071b      	lsls	r3, r3, #28
 80026b2:	491b      	ldr	r1, [pc, #108]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b8:	4b19      	ldr	r3, [pc, #100]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a18      	ldr	r2, [pc, #96]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 80026be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7fe fe56 	bl	8001374 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026cc:	f7fe fe52 	bl	8001374 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e05f      	b.n	800279e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0x47c>
 80026ea:	e057      	b.n	800279c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a0b      	ldr	r2, [pc, #44]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 80026f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7fe fe3c 	bl	8001374 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002700:	f7fe fe38 	bl	8001374 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e045      	b.n	800279e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002712:	4b03      	ldr	r3, [pc, #12]	; (8002720 <HAL_RCC_OscConfig+0x4d0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x4b0>
 800271e:	e03d      	b.n	800279c <HAL_RCC_OscConfig+0x54c>
 8002720:	40023800 	.word	0x40023800
 8002724:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002728:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <HAL_RCC_OscConfig+0x558>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d030      	beq.n	8002798 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d129      	bne.n	8002798 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274e:	429a      	cmp	r2, r3
 8002750:	d122      	bne.n	8002798 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002758:	4013      	ands	r3, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800275e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002760:	4293      	cmp	r3, r2
 8002762:	d119      	bne.n	8002798 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276e:	085b      	lsrs	r3, r3, #1
 8002770:	3b01      	subs	r3, #1
 8002772:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002774:	429a      	cmp	r2, r3
 8002776:	d10f      	bne.n	8002798 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d107      	bne.n	8002798 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800

080027ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0d0      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027c4:	4b6a      	ldr	r3, [pc, #424]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d910      	bls.n	80027f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 020f 	bic.w	r2, r3, #15
 80027da:	4965      	ldr	r1, [pc, #404]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b63      	ldr	r3, [pc, #396]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0b8      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d020      	beq.n	8002842 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800280c:	4b59      	ldr	r3, [pc, #356]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	4a58      	ldr	r2, [pc, #352]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002812:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002816:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002824:	4b53      	ldr	r3, [pc, #332]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4a52      	ldr	r2, [pc, #328]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800282a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800282e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002830:	4b50      	ldr	r3, [pc, #320]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	494d      	ldr	r1, [pc, #308]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d040      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d107      	bne.n	8002866 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	4b47      	ldr	r3, [pc, #284]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d115      	bne.n	800288e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e07f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286e:	4b41      	ldr	r3, [pc, #260]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e073      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287e:	4b3d      	ldr	r3, [pc, #244]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e06b      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288e:	4b39      	ldr	r3, [pc, #228]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f023 0203 	bic.w	r2, r3, #3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4936      	ldr	r1, [pc, #216]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800289c:	4313      	orrs	r3, r2
 800289e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a0:	f7fe fd68 	bl	8001374 <HAL_GetTick>
 80028a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a6:	e00a      	b.n	80028be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a8:	f7fe fd64 	bl	8001374 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e053      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 020c 	and.w	r2, r3, #12
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d1eb      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d210      	bcs.n	8002900 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 020f 	bic.w	r2, r3, #15
 80028e6:	4922      	ldr	r1, [pc, #136]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b20      	ldr	r3, [pc, #128]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e032      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4916      	ldr	r1, [pc, #88]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d009      	beq.n	800293e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800292a:	4b12      	ldr	r3, [pc, #72]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	490e      	ldr	r1, [pc, #56]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800293e:	f000 f821 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8002942:	4602      	mov	r2, r0
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	490a      	ldr	r1, [pc, #40]	; (8002978 <HAL_RCC_ClockConfig+0x1cc>)
 8002950:	5ccb      	ldrb	r3, [r1, r3]
 8002952:	fa22 f303 	lsr.w	r3, r2, r3
 8002956:	4a09      	ldr	r2, [pc, #36]	; (800297c <HAL_RCC_ClockConfig+0x1d0>)
 8002958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HAL_RCC_ClockConfig+0x1d4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe fcc4 	bl	80012ec <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	08005528 	.word	0x08005528
 800297c:	20000400 	.word	0x20000400
 8002980:	20000404 	.word	0x20000404

08002984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002984:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	2300      	movs	r3, #0
 8002996:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800299c:	4b67      	ldr	r3, [pc, #412]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 030c 	and.w	r3, r3, #12
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d00d      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x40>
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	f200 80bd 	bhi.w	8002b28 <HAL_RCC_GetSysClockFreq+0x1a4>
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x34>
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d003      	beq.n	80029be <HAL_RCC_GetSysClockFreq+0x3a>
 80029b6:	e0b7      	b.n	8002b28 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029b8:	4b61      	ldr	r3, [pc, #388]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029ba:	60bb      	str	r3, [r7, #8]
      break;
 80029bc:	e0b7      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029be:	4b61      	ldr	r3, [pc, #388]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80029c0:	60bb      	str	r3, [r7, #8]
      break;
 80029c2:	e0b4      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c4:	4b5d      	ldr	r3, [pc, #372]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029cc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80029ce:	4b5b      	ldr	r3, [pc, #364]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d04d      	beq.n	8002a76 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029da:	4b58      	ldr	r3, [pc, #352]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	099b      	lsrs	r3, r3, #6
 80029e0:	461a      	mov	r2, r3
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029ea:	f04f 0100 	mov.w	r1, #0
 80029ee:	ea02 0800 	and.w	r8, r2, r0
 80029f2:	ea03 0901 	and.w	r9, r3, r1
 80029f6:	4640      	mov	r0, r8
 80029f8:	4649      	mov	r1, r9
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	014b      	lsls	r3, r1, #5
 8002a04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a08:	0142      	lsls	r2, r0, #5
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	ebb0 0008 	subs.w	r0, r0, r8
 8002a12:	eb61 0109 	sbc.w	r1, r1, r9
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	018b      	lsls	r3, r1, #6
 8002a20:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a24:	0182      	lsls	r2, r0, #6
 8002a26:	1a12      	subs	r2, r2, r0
 8002a28:	eb63 0301 	sbc.w	r3, r3, r1
 8002a2c:	f04f 0000 	mov.w	r0, #0
 8002a30:	f04f 0100 	mov.w	r1, #0
 8002a34:	00d9      	lsls	r1, r3, #3
 8002a36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a3a:	00d0      	lsls	r0, r2, #3
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	eb12 0208 	adds.w	r2, r2, r8
 8002a44:	eb43 0309 	adc.w	r3, r3, r9
 8002a48:	f04f 0000 	mov.w	r0, #0
 8002a4c:	f04f 0100 	mov.w	r1, #0
 8002a50:	0259      	lsls	r1, r3, #9
 8002a52:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a56:	0250      	lsls	r0, r2, #9
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	461a      	mov	r2, r3
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	f7fd fbe6 	bl	8000238 <__aeabi_uldivmod>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4613      	mov	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	e04a      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a76:	4b31      	ldr	r3, [pc, #196]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	099b      	lsrs	r3, r3, #6
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a86:	f04f 0100 	mov.w	r1, #0
 8002a8a:	ea02 0400 	and.w	r4, r2, r0
 8002a8e:	ea03 0501 	and.w	r5, r3, r1
 8002a92:	4620      	mov	r0, r4
 8002a94:	4629      	mov	r1, r5
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	014b      	lsls	r3, r1, #5
 8002aa0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002aa4:	0142      	lsls	r2, r0, #5
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	1b00      	subs	r0, r0, r4
 8002aac:	eb61 0105 	sbc.w	r1, r1, r5
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	018b      	lsls	r3, r1, #6
 8002aba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002abe:	0182      	lsls	r2, r0, #6
 8002ac0:	1a12      	subs	r2, r2, r0
 8002ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ac6:	f04f 0000 	mov.w	r0, #0
 8002aca:	f04f 0100 	mov.w	r1, #0
 8002ace:	00d9      	lsls	r1, r3, #3
 8002ad0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ad4:	00d0      	lsls	r0, r2, #3
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	1912      	adds	r2, r2, r4
 8002adc:	eb45 0303 	adc.w	r3, r5, r3
 8002ae0:	f04f 0000 	mov.w	r0, #0
 8002ae4:	f04f 0100 	mov.w	r1, #0
 8002ae8:	0299      	lsls	r1, r3, #10
 8002aea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002aee:	0290      	lsls	r0, r2, #10
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	461a      	mov	r2, r3
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	f7fd fb9a 	bl	8000238 <__aeabi_uldivmod>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4613      	mov	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	0c1b      	lsrs	r3, r3, #16
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	3301      	adds	r3, #1
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b24:	60bb      	str	r3, [r7, #8]
      break;
 8002b26:	e002      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b2a:	60bb      	str	r3, [r7, #8]
      break;
 8002b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	00f42400 	.word	0x00f42400
 8002b44:	007a1200 	.word	0x007a1200

08002b48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b4c:	4b03      	ldr	r3, [pc, #12]	; (8002b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	20000400 	.word	0x20000400

08002b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b64:	f7ff fff0 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	0a9b      	lsrs	r3, r3, #10
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	4903      	ldr	r1, [pc, #12]	; (8002b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b76:	5ccb      	ldrb	r3, [r1, r3]
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40023800 	.word	0x40023800
 8002b84:	08005538 	.word	0x08005538

08002b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b8c:	f7ff ffdc 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8002b90:	4602      	mov	r2, r0
 8002b92:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	0b5b      	lsrs	r3, r3, #13
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	4903      	ldr	r1, [pc, #12]	; (8002bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	08005538 	.word	0x08005538

08002bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d012      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bd8:	4b69      	ldr	r3, [pc, #420]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	4a68      	ldr	r2, [pc, #416]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bde:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002be2:	6093      	str	r3, [r2, #8]
 8002be4:	4b66      	ldr	r3, [pc, #408]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bec:	4964      	ldr	r1, [pc, #400]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d017      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c0a:	4b5d      	ldr	r3, [pc, #372]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c18:	4959      	ldr	r1, [pc, #356]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c28:	d101      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c36:	2301      	movs	r3, #1
 8002c38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d017      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c46:	4b4e      	ldr	r3, [pc, #312]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	494a      	ldr	r1, [pc, #296]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c64:	d101      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002c66:	2301      	movs	r3, #1
 8002c68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002c72:	2301      	movs	r3, #1
 8002c74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c82:	2301      	movs	r3, #1
 8002c84:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 808b 	beq.w	8002daa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c94:	4b3a      	ldr	r3, [pc, #232]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	4a39      	ldr	r2, [pc, #228]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca0:	4b37      	ldr	r3, [pc, #220]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002cac:	4b35      	ldr	r3, [pc, #212]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a34      	ldr	r2, [pc, #208]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb8:	f7fe fb5c 	bl	8001374 <HAL_GetTick>
 8002cbc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc0:	f7fe fb58 	bl	8001374 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	; 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e38f      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cd2:	4b2c      	ldr	r3, [pc, #176]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cde:	4b28      	ldr	r3, [pc, #160]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d035      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d02e      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cfc:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d06:	4b1e      	ldr	r3, [pc, #120]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	4a1d      	ldr	r2, [pc, #116]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d10:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d12:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	4a1a      	ldr	r2, [pc, #104]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d1e:	4a18      	ldr	r2, [pc, #96]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d24:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d114      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7fe fb20 	bl	8001374 <HAL_GetTick>
 8002d34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d36:	e00a      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d38:	f7fe fb1c 	bl	8001374 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e351      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4e:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0ee      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d66:	d111      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d74:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d76:	400b      	ands	r3, r1
 8002d78:	4901      	ldr	r1, [pc, #4]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
 8002d7e:	e00b      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40007000 	.word	0x40007000
 8002d88:	0ffffcff 	.word	0x0ffffcff
 8002d8c:	4bb3      	ldr	r3, [pc, #716]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4ab2      	ldr	r2, [pc, #712]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d96:	6093      	str	r3, [r2, #8]
 8002d98:	4bb0      	ldr	r3, [pc, #704]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da4:	49ad      	ldr	r1, [pc, #692]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d010      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002db6:	4ba9      	ldr	r3, [pc, #676]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dbc:	4aa7      	ldr	r2, [pc, #668]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002dc6:	4ba5      	ldr	r3, [pc, #660]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	49a2      	ldr	r1, [pc, #648]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002de4:	4b9d      	ldr	r3, [pc, #628]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002df2:	499a      	ldr	r1, [pc, #616]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e06:	4b95      	ldr	r3, [pc, #596]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e14:	4991      	ldr	r1, [pc, #580]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e28:	4b8c      	ldr	r3, [pc, #560]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e36:	4989      	ldr	r1, [pc, #548]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e4a:	4b84      	ldr	r3, [pc, #528]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	4980      	ldr	r1, [pc, #512]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00a      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e6c:	4b7b      	ldr	r3, [pc, #492]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	f023 0203 	bic.w	r2, r3, #3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	4978      	ldr	r1, [pc, #480]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e8e:	4b73      	ldr	r3, [pc, #460]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e94:	f023 020c 	bic.w	r2, r3, #12
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9c:	496f      	ldr	r1, [pc, #444]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002eb0:	4b6a      	ldr	r3, [pc, #424]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebe:	4967      	ldr	r1, [pc, #412]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ed2:	4b62      	ldr	r3, [pc, #392]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee0:	495e      	ldr	r1, [pc, #376]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ef4:	4b59      	ldr	r3, [pc, #356]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f02:	4956      	ldr	r1, [pc, #344]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f16:	4b51      	ldr	r3, [pc, #324]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f24:	494d      	ldr	r1, [pc, #308]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f38:	4b48      	ldr	r3, [pc, #288]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f46:	4945      	ldr	r1, [pc, #276]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f5a:	4b40      	ldr	r3, [pc, #256]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f68:	493c      	ldr	r1, [pc, #240]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f7c:	4b37      	ldr	r3, [pc, #220]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f82:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f8a:	4934      	ldr	r1, [pc, #208]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d011      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f9e:	4b2f      	ldr	r3, [pc, #188]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fac:	492b      	ldr	r1, [pc, #172]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fde:	4b1f      	ldr	r3, [pc, #124]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fec:	491b      	ldr	r1, [pc, #108]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00b      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003000:	4b16      	ldr	r3, [pc, #88]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003006:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003010:	4912      	ldr	r1, [pc, #72]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00b      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003024:	4b0d      	ldr	r3, [pc, #52]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003034:	4909      	ldr	r1, [pc, #36]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00f      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800304a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800304e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003058:	e002      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800
 8003060:	4986      	ldr	r1, [pc, #536]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00b      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003074:	4b81      	ldr	r3, [pc, #516]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800307a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003084:	497d      	ldr	r1, [pc, #500]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d006      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 80d6 	beq.w	800324c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030a0:	4b76      	ldr	r3, [pc, #472]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a75      	ldr	r2, [pc, #468]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ac:	f7fe f962 	bl	8001374 <HAL_GetTick>
 80030b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030b4:	f7fe f95e 	bl	8001374 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e195      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030c6:	4b6d      	ldr	r3, [pc, #436]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d021      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d11d      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030e6:	4b65      	ldr	r3, [pc, #404]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ec:	0c1b      	lsrs	r3, r3, #16
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030f4:	4b61      	ldr	r3, [pc, #388]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030fa:	0e1b      	lsrs	r3, r3, #24
 80030fc:	f003 030f 	and.w	r3, r3, #15
 8003100:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	019a      	lsls	r2, r3, #6
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	041b      	lsls	r3, r3, #16
 800310c:	431a      	orrs	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	061b      	lsls	r3, r3, #24
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	071b      	lsls	r3, r3, #28
 800311a:	4958      	ldr	r1, [pc, #352]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d004      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003140:	2b00      	cmp	r3, #0
 8003142:	d02e      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800314c:	d129      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800314e:	4b4b      	ldr	r3, [pc, #300]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800315c:	4b47      	ldr	r3, [pc, #284]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800315e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003162:	0f1b      	lsrs	r3, r3, #28
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	019a      	lsls	r2, r3, #6
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	041b      	lsls	r3, r3, #16
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	061b      	lsls	r3, r3, #24
 800317c:	431a      	orrs	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	071b      	lsls	r3, r3, #28
 8003182:	493e      	ldr	r1, [pc, #248]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800318a:	4b3c      	ldr	r3, [pc, #240]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003190:	f023 021f 	bic.w	r2, r3, #31
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	3b01      	subs	r3, #1
 800319a:	4938      	ldr	r1, [pc, #224]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d01d      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031ae:	4b33      	ldr	r3, [pc, #204]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031b4:	0e1b      	lsrs	r3, r3, #24
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031bc:	4b2f      	ldr	r3, [pc, #188]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031c2:	0f1b      	lsrs	r3, r3, #28
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	019a      	lsls	r2, r3, #6
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	041b      	lsls	r3, r3, #16
 80031d6:	431a      	orrs	r2, r3
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	061b      	lsls	r3, r3, #24
 80031dc:	431a      	orrs	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	071b      	lsls	r3, r3, #28
 80031e2:	4926      	ldr	r1, [pc, #152]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d011      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	019a      	lsls	r2, r3, #6
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	041b      	lsls	r3, r3, #16
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	061b      	lsls	r3, r3, #24
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	071b      	lsls	r3, r3, #28
 8003212:	491a      	ldr	r1, [pc, #104]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800321a:	4b18      	ldr	r3, [pc, #96]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a17      	ldr	r2, [pc, #92]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003220:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003226:	f7fe f8a5 	bl	8001374 <HAL_GetTick>
 800322a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800322e:	f7fe f8a1 	bl	8001374 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b64      	cmp	r3, #100	; 0x64
 800323a:	d901      	bls.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e0d8      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003240:	4b0e      	ldr	r3, [pc, #56]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f0      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	2b01      	cmp	r3, #1
 8003250:	f040 80ce 	bne.w	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003254:	4b09      	ldr	r3, [pc, #36]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a08      	ldr	r2, [pc, #32]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800325a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800325e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003260:	f7fe f888 	bl	8001374 <HAL_GetTick>
 8003264:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003266:	e00b      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003268:	f7fe f884 	bl	8001374 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	; 0x64
 8003274:	d904      	bls.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e0bb      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003280:	4b5e      	ldr	r3, [pc, #376]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800328c:	d0ec      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d02e      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d12a      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032b6:	4b51      	ldr	r3, [pc, #324]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032c4:	4b4d      	ldr	r3, [pc, #308]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ca:	0f1b      	lsrs	r3, r3, #28
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	019a      	lsls	r2, r3, #6
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	041b      	lsls	r3, r3, #16
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	061b      	lsls	r3, r3, #24
 80032e4:	431a      	orrs	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	071b      	lsls	r3, r3, #28
 80032ea:	4944      	ldr	r1, [pc, #272]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032f2:	4b42      	ldr	r3, [pc, #264]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	3b01      	subs	r3, #1
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	493d      	ldr	r1, [pc, #244]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d022      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800331c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003320:	d11d      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003322:	4b36      	ldr	r3, [pc, #216]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003328:	0e1b      	lsrs	r3, r3, #24
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003330:	4b32      	ldr	r3, [pc, #200]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003336:	0f1b      	lsrs	r3, r3, #28
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	019a      	lsls	r2, r3, #6
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	041b      	lsls	r3, r3, #16
 800334a:	431a      	orrs	r2, r3
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	061b      	lsls	r3, r3, #24
 8003350:	431a      	orrs	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	071b      	lsls	r3, r3, #28
 8003356:	4929      	ldr	r1, [pc, #164]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d028      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800336a:	4b24      	ldr	r3, [pc, #144]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003370:	0e1b      	lsrs	r3, r3, #24
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003378:	4b20      	ldr	r3, [pc, #128]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337e:	0c1b      	lsrs	r3, r3, #16
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	019a      	lsls	r2, r3, #6
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	041b      	lsls	r3, r3, #16
 8003390:	431a      	orrs	r2, r3
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	061b      	lsls	r3, r3, #24
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	071b      	lsls	r3, r3, #28
 800339e:	4917      	ldr	r1, [pc, #92]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80033a6:	4b15      	ldr	r3, [pc, #84]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	4911      	ldr	r1, [pc, #68]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033bc:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a0e      	ldr	r2, [pc, #56]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c8:	f7fd ffd4 	bl	8001374 <HAL_GetTick>
 80033cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033d0:	f7fd ffd0 	bl	8001374 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b64      	cmp	r3, #100	; 0x64
 80033dc:	d901      	bls.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e007      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033e2:	4b06      	ldr	r3, [pc, #24]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033ee:	d1ef      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3720      	adds	r7, #32
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800

08003400 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e09d      	b.n	800354e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	2b00      	cmp	r3, #0
 8003418:	d108      	bne.n	800342c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003422:	d009      	beq.n	8003438 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	61da      	str	r2, [r3, #28]
 800342a:	e005      	b.n	8003438 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d106      	bne.n	8003458 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7fd fd22 	bl	8000e9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800346e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003478:	d902      	bls.n	8003480 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	e002      	b.n	8003486 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003484:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800348e:	d007      	beq.n	80034a0 <HAL_SPI_Init+0xa0>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003498:	d002      	beq.n	80034a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e2:	ea42 0103 	orr.w	r1, r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	0c1b      	lsrs	r3, r3, #16
 80034fc:	f003 0204 	and.w	r2, r3, #4
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800351c:	ea42 0103 	orr.w	r1, r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69da      	ldr	r2, [r3, #28]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800353c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b088      	sub	sp, #32
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	603b      	str	r3, [r7, #0]
 8003562:	4613      	mov	r3, r2
 8003564:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_SPI_Transmit+0x22>
 8003574:	2302      	movs	r3, #2
 8003576:	e158      	b.n	800382a <HAL_SPI_Transmit+0x2d4>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003580:	f7fd fef8 	bl	8001374 <HAL_GetTick>
 8003584:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b01      	cmp	r3, #1
 8003594:	d002      	beq.n	800359c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003596:	2302      	movs	r3, #2
 8003598:	77fb      	strb	r3, [r7, #31]
    goto error;
 800359a:	e13d      	b.n	8003818 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <HAL_SPI_Transmit+0x52>
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d102      	bne.n	80035ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035ac:	e134      	b.n	8003818 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2203      	movs	r2, #3
 80035b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	88fa      	ldrh	r2, [r7, #6]
 80035c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	88fa      	ldrh	r2, [r7, #6]
 80035cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f8:	d10f      	bne.n	800361a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003608:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003618:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003624:	2b40      	cmp	r3, #64	; 0x40
 8003626:	d007      	beq.n	8003638 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003636:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003640:	d94b      	bls.n	80036da <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <HAL_SPI_Transmit+0xfa>
 800364a:	8afb      	ldrh	r3, [r7, #22]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d13e      	bne.n	80036ce <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003654:	881a      	ldrh	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	1c9a      	adds	r2, r3, #2
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003674:	e02b      	b.n	80036ce <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b02      	cmp	r3, #2
 8003682:	d112      	bne.n	80036aa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	881a      	ldrh	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	1c9a      	adds	r2, r3, #2
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036a8:	e011      	b.n	80036ce <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036aa:	f7fd fe63 	bl	8001374 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d803      	bhi.n	80036c2 <HAL_SPI_Transmit+0x16c>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d102      	bne.n	80036c8 <HAL_SPI_Transmit+0x172>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d102      	bne.n	80036ce <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036cc:	e0a4      	b.n	8003818 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1ce      	bne.n	8003676 <HAL_SPI_Transmit+0x120>
 80036d8:	e07c      	b.n	80037d4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_SPI_Transmit+0x192>
 80036e2:	8afb      	ldrh	r3, [r7, #22]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d170      	bne.n	80037ca <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d912      	bls.n	8003718 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	881a      	ldrh	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	1c9a      	adds	r2, r3, #2
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b02      	subs	r3, #2
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003716:	e058      	b.n	80037ca <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	330c      	adds	r3, #12
 8003722:	7812      	ldrb	r2, [r2, #0]
 8003724:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800373e:	e044      	b.n	80037ca <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b02      	cmp	r3, #2
 800374c:	d12b      	bne.n	80037a6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b01      	cmp	r3, #1
 8003756:	d912      	bls.n	800377e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	881a      	ldrh	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	1c9a      	adds	r2, r3, #2
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b02      	subs	r3, #2
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800377c:	e025      	b.n	80037ca <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	330c      	adds	r3, #12
 8003788:	7812      	ldrb	r2, [r2, #0]
 800378a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037a4:	e011      	b.n	80037ca <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037a6:	f7fd fde5 	bl	8001374 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d803      	bhi.n	80037be <HAL_SPI_Transmit+0x268>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037bc:	d102      	bne.n	80037c4 <HAL_SPI_Transmit+0x26e>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d102      	bne.n	80037ca <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037c8:	e026      	b.n	8003818 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1b5      	bne.n	8003740 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	6839      	ldr	r1, [r7, #0]
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 fd07 	bl	80041ec <SPI_EndRxTxTransaction>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037f2:	2300      	movs	r3, #0
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380c:	2b00      	cmp	r3, #0
 800380e:	d002      	beq.n	8003816 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	77fb      	strb	r3, [r7, #31]
 8003814:	e000      	b.n	8003818 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003816:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003828:	7ffb      	ldrb	r3, [r7, #31]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3720      	adds	r7, #32
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b088      	sub	sp, #32
 8003836:	af02      	add	r7, sp, #8
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	603b      	str	r3, [r7, #0]
 800383e:	4613      	mov	r3, r2
 8003840:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800384e:	d112      	bne.n	8003876 <HAL_SPI_Receive+0x44>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10e      	bne.n	8003876 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2204      	movs	r2, #4
 800385c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003860:	88fa      	ldrh	r2, [r7, #6]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	4613      	mov	r3, r2
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	68b9      	ldr	r1, [r7, #8]
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 f910 	bl	8003a92 <HAL_SPI_TransmitReceive>
 8003872:	4603      	mov	r3, r0
 8003874:	e109      	b.n	8003a8a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_SPI_Receive+0x52>
 8003880:	2302      	movs	r3, #2
 8003882:	e102      	b.n	8003a8a <HAL_SPI_Receive+0x258>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800388c:	f7fd fd72 	bl	8001374 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b01      	cmp	r3, #1
 800389c:	d002      	beq.n	80038a4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800389e:	2302      	movs	r3, #2
 80038a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038a2:	e0e9      	b.n	8003a78 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d002      	beq.n	80038b0 <HAL_SPI_Receive+0x7e>
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d102      	bne.n	80038b6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038b4:	e0e0      	b.n	8003a78 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2204      	movs	r2, #4
 80038ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	88fa      	ldrh	r2, [r7, #6]
 80038ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	88fa      	ldrh	r2, [r7, #6]
 80038d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003900:	d908      	bls.n	8003914 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	e007      	b.n	8003924 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003922:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800392c:	d10f      	bne.n	800394e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800393c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800394c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003958:	2b40      	cmp	r3, #64	; 0x40
 800395a:	d007      	beq.n	800396c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800396a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003974:	d867      	bhi.n	8003a46 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003976:	e030      	b.n	80039da <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b01      	cmp	r3, #1
 8003984:	d117      	bne.n	80039b6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f103 020c 	add.w	r2, r3, #12
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	7812      	ldrb	r2, [r2, #0]
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80039b4:	e011      	b.n	80039da <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039b6:	f7fd fcdd 	bl	8001374 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d803      	bhi.n	80039ce <HAL_SPI_Receive+0x19c>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039cc:	d102      	bne.n	80039d4 <HAL_SPI_Receive+0x1a2>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d102      	bne.n	80039da <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80039d8:	e04e      	b.n	8003a78 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1c8      	bne.n	8003978 <HAL_SPI_Receive+0x146>
 80039e6:	e034      	b.n	8003a52 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d115      	bne.n	8003a22 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	b292      	uxth	r2, r2
 8003a02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	1c9a      	adds	r2, r3, #2
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003a20:	e011      	b.n	8003a46 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a22:	f7fd fca7 	bl	8001374 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d803      	bhi.n	8003a3a <HAL_SPI_Receive+0x208>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d102      	bne.n	8003a40 <HAL_SPI_Receive+0x20e>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d102      	bne.n	8003a46 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a44:	e018      	b.n	8003a78 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1ca      	bne.n	80039e8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	6839      	ldr	r1, [r7, #0]
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 fb4c 	bl	80040f4 <SPI_EndRxTransaction>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	75fb      	strb	r3, [r7, #23]
 8003a74:	e000      	b.n	8003a78 <HAL_SPI_Receive+0x246>
  }

error :
 8003a76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b08a      	sub	sp, #40	; 0x28
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_SPI_TransmitReceive+0x26>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e1fb      	b.n	8003eb0 <HAL_SPI_TransmitReceive+0x41e>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ac0:	f7fd fc58 	bl	8001374 <HAL_GetTick>
 8003ac4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003acc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003ad4:	887b      	ldrh	r3, [r7, #2]
 8003ad6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003ad8:	887b      	ldrh	r3, [r7, #2]
 8003ada:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003adc:	7efb      	ldrb	r3, [r7, #27]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d00e      	beq.n	8003b00 <HAL_SPI_TransmitReceive+0x6e>
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ae8:	d106      	bne.n	8003af8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <HAL_SPI_TransmitReceive+0x66>
 8003af2:	7efb      	ldrb	r3, [r7, #27]
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d003      	beq.n	8003b00 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003af8:	2302      	movs	r3, #2
 8003afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003afe:	e1cd      	b.n	8003e9c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <HAL_SPI_TransmitReceive+0x80>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <HAL_SPI_TransmitReceive+0x80>
 8003b0c:	887b      	ldrh	r3, [r7, #2]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d103      	bne.n	8003b1a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003b18:	e1c0      	b.n	8003e9c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d003      	beq.n	8003b2e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2205      	movs	r2, #5
 8003b2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	887a      	ldrh	r2, [r7, #2]
 8003b3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	887a      	ldrh	r2, [r7, #2]
 8003b46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	887a      	ldrh	r2, [r7, #2]
 8003b54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	887a      	ldrh	r2, [r7, #2]
 8003b5a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b70:	d802      	bhi.n	8003b78 <HAL_SPI_TransmitReceive+0xe6>
 8003b72:	8a3b      	ldrh	r3, [r7, #16]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d908      	bls.n	8003b8a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b86:	605a      	str	r2, [r3, #4]
 8003b88:	e007      	b.n	8003b9a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b98:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba4:	2b40      	cmp	r3, #64	; 0x40
 8003ba6:	d007      	beq.n	8003bb8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bc0:	d97c      	bls.n	8003cbc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_SPI_TransmitReceive+0x13e>
 8003bca:	8a7b      	ldrh	r3, [r7, #18]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d169      	bne.n	8003ca4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	881a      	ldrh	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	1c9a      	adds	r2, r3, #2
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bf4:	e056      	b.n	8003ca4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d11b      	bne.n	8003c3c <HAL_SPI_TransmitReceive+0x1aa>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d016      	beq.n	8003c3c <HAL_SPI_TransmitReceive+0x1aa>
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d113      	bne.n	8003c3c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	881a      	ldrh	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	1c9a      	adds	r2, r3, #2
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d11c      	bne.n	8003c84 <HAL_SPI_TransmitReceive+0x1f2>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d016      	beq.n	8003c84 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	b292      	uxth	r2, r2
 8003c62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	1c9a      	adds	r2, r3, #2
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c80:	2301      	movs	r3, #1
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c84:	f7fd fb76 	bl	8001374 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d807      	bhi.n	8003ca4 <HAL_SPI_TransmitReceive+0x212>
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9a:	d003      	beq.n	8003ca4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003ca2:	e0fb      	b.n	8003e9c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1a3      	bne.n	8003bf6 <HAL_SPI_TransmitReceive+0x164>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d19d      	bne.n	8003bf6 <HAL_SPI_TransmitReceive+0x164>
 8003cba:	e0df      	b.n	8003e7c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_SPI_TransmitReceive+0x23a>
 8003cc4:	8a7b      	ldrh	r3, [r7, #18]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	f040 80cb 	bne.w	8003e62 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d912      	bls.n	8003cfc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	881a      	ldrh	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	1c9a      	adds	r2, r3, #2
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b02      	subs	r3, #2
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cfa:	e0b2      	b.n	8003e62 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	330c      	adds	r3, #12
 8003d06:	7812      	ldrb	r2, [r2, #0]
 8003d08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d22:	e09e      	b.n	8003e62 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d134      	bne.n	8003d9c <HAL_SPI_TransmitReceive+0x30a>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d02f      	beq.n	8003d9c <HAL_SPI_TransmitReceive+0x30a>
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d12c      	bne.n	8003d9c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d912      	bls.n	8003d72 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d50:	881a      	ldrh	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	1c9a      	adds	r2, r3, #2
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b02      	subs	r3, #2
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d70:	e012      	b.n	8003d98 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	7812      	ldrb	r2, [r2, #0]
 8003d7e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d148      	bne.n	8003e3c <HAL_SPI_TransmitReceive+0x3aa>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d042      	beq.n	8003e3c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d923      	bls.n	8003e0a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	b292      	uxth	r2, r2
 8003dce:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	1c9a      	adds	r2, r3, #2
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b02      	subs	r3, #2
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d81f      	bhi.n	8003e38 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e06:	605a      	str	r2, [r3, #4]
 8003e08:	e016      	b.n	8003e38 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f103 020c 	add.w	r2, r3, #12
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	7812      	ldrb	r2, [r2, #0]
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e3c:	f7fd fa9a 	bl	8001374 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d803      	bhi.n	8003e54 <HAL_SPI_TransmitReceive+0x3c2>
 8003e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e52:	d102      	bne.n	8003e5a <HAL_SPI_TransmitReceive+0x3c8>
 8003e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d103      	bne.n	8003e62 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003e60:	e01c      	b.n	8003e9c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f47f af5b 	bne.w	8003d24 <HAL_SPI_TransmitReceive+0x292>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f47f af54 	bne.w	8003d24 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e7c:	69fa      	ldr	r2, [r7, #28]
 8003e7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f9b3 	bl	80041ec <SPI_EndRxTxTransaction>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d006      	beq.n	8003e9a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2220      	movs	r2, #32
 8003e96:	661a      	str	r2, [r3, #96]	; 0x60
 8003e98:	e000      	b.n	8003e9c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003e9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003eac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3728      	adds	r7, #40	; 0x28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b088      	sub	sp, #32
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ec8:	f7fd fa54 	bl	8001374 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ed8:	f7fd fa4c 	bl	8001374 <HAL_GetTick>
 8003edc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ede:	4b39      	ldr	r3, [pc, #228]	; (8003fc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	015b      	lsls	r3, r3, #5
 8003ee4:	0d1b      	lsrs	r3, r3, #20
 8003ee6:	69fa      	ldr	r2, [r7, #28]
 8003ee8:	fb02 f303 	mul.w	r3, r2, r3
 8003eec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eee:	e054      	b.n	8003f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef6:	d050      	beq.n	8003f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ef8:	f7fd fa3c 	bl	8001374 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d902      	bls.n	8003f0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d13d      	bne.n	8003f8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f26:	d111      	bne.n	8003f4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f30:	d004      	beq.n	8003f3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f3a:	d107      	bne.n	8003f4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f54:	d10f      	bne.n	8003f76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e017      	b.n	8003fba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	bf0c      	ite	eq
 8003faa:	2301      	moveq	r3, #1
 8003fac:	2300      	movne	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	79fb      	ldrb	r3, [r7, #7]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d19b      	bne.n	8003ef0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3720      	adds	r7, #32
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000400 	.word	0x20000400

08003fc8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b08a      	sub	sp, #40	; 0x28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
 8003fd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003fda:	f7fd f9cb 	bl	8001374 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003fea:	f7fd f9c3 	bl	8001374 <HAL_GetTick>
 8003fee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	330c      	adds	r3, #12
 8003ff6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ff8:	4b3d      	ldr	r3, [pc, #244]	; (80040f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	00da      	lsls	r2, r3, #3
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	0d1b      	lsrs	r3, r3, #20
 8004008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400a:	fb02 f303 	mul.w	r3, r2, r3
 800400e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004010:	e060      	b.n	80040d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004018:	d107      	bne.n	800402a <SPI_WaitFifoStateUntilTimeout+0x62>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d104      	bne.n	800402a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004028:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004030:	d050      	beq.n	80040d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004032:	f7fd f99f 	bl	8001374 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403e:	429a      	cmp	r2, r3
 8004040:	d902      	bls.n	8004048 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	2b00      	cmp	r3, #0
 8004046:	d13d      	bne.n	80040c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004056:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004060:	d111      	bne.n	8004086 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800406a:	d004      	beq.n	8004076 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004074:	d107      	bne.n	8004086 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004084:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800408e:	d10f      	bne.n	80040b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e010      	b.n	80040e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4013      	ands	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d196      	bne.n	8004012 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3728      	adds	r7, #40	; 0x28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000400 	.word	0x20000400

080040f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004108:	d111      	bne.n	800412e <SPI_EndRxTransaction+0x3a>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004112:	d004      	beq.n	800411e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411c:	d107      	bne.n	800412e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800412c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004136:	d112      	bne.n	800415e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2200      	movs	r2, #0
 8004140:	2180      	movs	r1, #128	; 0x80
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f7ff feb8 	bl	8003eb8 <SPI_WaitFlagStateUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d021      	beq.n	8004192 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004152:	f043 0220 	orr.w	r2, r3, #32
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e03d      	b.n	80041da <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800415e:	4b21      	ldr	r3, [pc, #132]	; (80041e4 <SPI_EndRxTransaction+0xf0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a21      	ldr	r2, [pc, #132]	; (80041e8 <SPI_EndRxTransaction+0xf4>)
 8004164:	fba2 2303 	umull	r2, r3, r2, r3
 8004168:	0d5b      	lsrs	r3, r3, #21
 800416a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800416e:	fb02 f303 	mul.w	r3, r2, r3
 8004172:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	3b01      	subs	r3, #1
 800417e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b80      	cmp	r3, #128	; 0x80
 800418c:	d0f2      	beq.n	8004174 <SPI_EndRxTransaction+0x80>
 800418e:	e000      	b.n	8004192 <SPI_EndRxTransaction+0x9e>
        break;
 8004190:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800419a:	d11d      	bne.n	80041d8 <SPI_EndRxTransaction+0xe4>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a4:	d004      	beq.n	80041b0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ae:	d113      	bne.n	80041d8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f7ff ff03 	bl	8003fc8 <SPI_WaitFifoStateUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d007      	beq.n	80041d8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041cc:	f043 0220 	orr.w	r2, r3, #32
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e000      	b.n	80041da <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000400 	.word	0x20000400
 80041e8:	165e9f81 	.word	0x165e9f81

080041ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2200      	movs	r2, #0
 8004200:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f7ff fedf 	bl	8003fc8 <SPI_WaitFifoStateUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d007      	beq.n	8004220 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004214:	f043 0220 	orr.w	r2, r3, #32
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e046      	b.n	80042ae <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004220:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <SPI_EndRxTxTransaction+0xcc>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a25      	ldr	r2, [pc, #148]	; (80042bc <SPI_EndRxTxTransaction+0xd0>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	0d5b      	lsrs	r3, r3, #21
 800422c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004230:	fb02 f303 	mul.w	r3, r2, r3
 8004234:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800423e:	d112      	bne.n	8004266 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2200      	movs	r2, #0
 8004248:	2180      	movs	r1, #128	; 0x80
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7ff fe34 	bl	8003eb8 <SPI_WaitFlagStateUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d016      	beq.n	8004284 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800425a:	f043 0220 	orr.w	r2, r3, #32
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e023      	b.n	80042ae <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	3b01      	subs	r3, #1
 8004270:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427c:	2b80      	cmp	r3, #128	; 0x80
 800427e:	d0f2      	beq.n	8004266 <SPI_EndRxTxTransaction+0x7a>
 8004280:	e000      	b.n	8004284 <SPI_EndRxTxTransaction+0x98>
        break;
 8004282:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2200      	movs	r2, #0
 800428c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f7ff fe99 	bl	8003fc8 <SPI_WaitFifoStateUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d007      	beq.n	80042ac <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a0:	f043 0220 	orr.w	r2, r3, #32
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e000      	b.n	80042ae <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20000400 	.word	0x20000400
 80042bc:	165e9f81 	.word	0x165e9f81

080042c0 <HAL_SPIEx_FlushRxFifo>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	73fb      	strb	r3, [r7, #15]
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 80042cc:	e00c      	b.n	80042e8 <HAL_SPIEx_FlushRxFifo+0x28>
  {
    count++;
 80042ce:	7bfb      	ldrb	r3, [r7, #15]
 80042d0:	3301      	adds	r3, #1
 80042d2:	73fb      	strb	r3, [r7, #15]
    tmpreg = hspi->Instance->DR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	60bb      	str	r3, [r7, #8]
    UNUSED(tmpreg); /* To avoid GCC warning */
 80042dc:	68bb      	ldr	r3, [r7, #8]
    if (count == SPI_FIFO_SIZE)
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d101      	bne.n	80042e8 <HAL_SPIEx_FlushRxFifo+0x28>
    {
      return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e007      	b.n	80042f8 <HAL_SPIEx_FlushRxFifo+0x38>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1eb      	bne.n	80042ce <HAL_SPIEx_FlushRxFifo+0xe>
    }
  }
  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e049      	b.n	80043aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fc fe5e 	bl	8000fec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3304      	adds	r3, #4
 8004340:	4619      	mov	r1, r3
 8004342:	4610      	mov	r0, r2
 8004344:	f000 f8ae 	bl	80044a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d001      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e054      	b.n	8004476 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a26      	ldr	r2, [pc, #152]	; (8004484 <HAL_TIM_Base_Start_IT+0xd0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d022      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f6:	d01d      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a22      	ldr	r2, [pc, #136]	; (8004488 <HAL_TIM_Base_Start_IT+0xd4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d018      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a21      	ldr	r2, [pc, #132]	; (800448c <HAL_TIM_Base_Start_IT+0xd8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d013      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1f      	ldr	r2, [pc, #124]	; (8004490 <HAL_TIM_Base_Start_IT+0xdc>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00e      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a1e      	ldr	r2, [pc, #120]	; (8004494 <HAL_TIM_Base_Start_IT+0xe0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d009      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1c      	ldr	r2, [pc, #112]	; (8004498 <HAL_TIM_Base_Start_IT+0xe4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d004      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a1b      	ldr	r2, [pc, #108]	; (800449c <HAL_TIM_Base_Start_IT+0xe8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d115      	bne.n	8004460 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	4b19      	ldr	r3, [pc, #100]	; (80044a0 <HAL_TIM_Base_Start_IT+0xec>)
 800443c:	4013      	ands	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b06      	cmp	r3, #6
 8004444:	d015      	beq.n	8004472 <HAL_TIM_Base_Start_IT+0xbe>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444c:	d011      	beq.n	8004472 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0201 	orr.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445e:	e008      	b.n	8004472 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	e000      	b.n	8004474 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004472:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40010000 	.word	0x40010000
 8004488:	40000400 	.word	0x40000400
 800448c:	40000800 	.word	0x40000800
 8004490:	40000c00 	.word	0x40000c00
 8004494:	40010400 	.word	0x40010400
 8004498:	40014000 	.word	0x40014000
 800449c:	40001800 	.word	0x40001800
 80044a0:	00010007 	.word	0x00010007

080044a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a40      	ldr	r2, [pc, #256]	; (80045b8 <TIM_Base_SetConfig+0x114>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d013      	beq.n	80044e4 <TIM_Base_SetConfig+0x40>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c2:	d00f      	beq.n	80044e4 <TIM_Base_SetConfig+0x40>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a3d      	ldr	r2, [pc, #244]	; (80045bc <TIM_Base_SetConfig+0x118>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00b      	beq.n	80044e4 <TIM_Base_SetConfig+0x40>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a3c      	ldr	r2, [pc, #240]	; (80045c0 <TIM_Base_SetConfig+0x11c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d007      	beq.n	80044e4 <TIM_Base_SetConfig+0x40>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a3b      	ldr	r2, [pc, #236]	; (80045c4 <TIM_Base_SetConfig+0x120>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d003      	beq.n	80044e4 <TIM_Base_SetConfig+0x40>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a3a      	ldr	r2, [pc, #232]	; (80045c8 <TIM_Base_SetConfig+0x124>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d108      	bne.n	80044f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a2f      	ldr	r2, [pc, #188]	; (80045b8 <TIM_Base_SetConfig+0x114>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d02b      	beq.n	8004556 <TIM_Base_SetConfig+0xb2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004504:	d027      	beq.n	8004556 <TIM_Base_SetConfig+0xb2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a2c      	ldr	r2, [pc, #176]	; (80045bc <TIM_Base_SetConfig+0x118>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d023      	beq.n	8004556 <TIM_Base_SetConfig+0xb2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a2b      	ldr	r2, [pc, #172]	; (80045c0 <TIM_Base_SetConfig+0x11c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d01f      	beq.n	8004556 <TIM_Base_SetConfig+0xb2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a2a      	ldr	r2, [pc, #168]	; (80045c4 <TIM_Base_SetConfig+0x120>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d01b      	beq.n	8004556 <TIM_Base_SetConfig+0xb2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a29      	ldr	r2, [pc, #164]	; (80045c8 <TIM_Base_SetConfig+0x124>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d017      	beq.n	8004556 <TIM_Base_SetConfig+0xb2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a28      	ldr	r2, [pc, #160]	; (80045cc <TIM_Base_SetConfig+0x128>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d013      	beq.n	8004556 <TIM_Base_SetConfig+0xb2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a27      	ldr	r2, [pc, #156]	; (80045d0 <TIM_Base_SetConfig+0x12c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00f      	beq.n	8004556 <TIM_Base_SetConfig+0xb2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a26      	ldr	r2, [pc, #152]	; (80045d4 <TIM_Base_SetConfig+0x130>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00b      	beq.n	8004556 <TIM_Base_SetConfig+0xb2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a25      	ldr	r2, [pc, #148]	; (80045d8 <TIM_Base_SetConfig+0x134>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d007      	beq.n	8004556 <TIM_Base_SetConfig+0xb2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a24      	ldr	r2, [pc, #144]	; (80045dc <TIM_Base_SetConfig+0x138>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d003      	beq.n	8004556 <TIM_Base_SetConfig+0xb2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a23      	ldr	r2, [pc, #140]	; (80045e0 <TIM_Base_SetConfig+0x13c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d108      	bne.n	8004568 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4313      	orrs	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a0a      	ldr	r2, [pc, #40]	; (80045b8 <TIM_Base_SetConfig+0x114>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d003      	beq.n	800459c <TIM_Base_SetConfig+0xf8>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a0c      	ldr	r2, [pc, #48]	; (80045c8 <TIM_Base_SetConfig+0x124>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d103      	bne.n	80045a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	615a      	str	r2, [r3, #20]
}
 80045aa:	bf00      	nop
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40010000 	.word	0x40010000
 80045bc:	40000400 	.word	0x40000400
 80045c0:	40000800 	.word	0x40000800
 80045c4:	40000c00 	.word	0x40000c00
 80045c8:	40010400 	.word	0x40010400
 80045cc:	40014000 	.word	0x40014000
 80045d0:	40014400 	.word	0x40014400
 80045d4:	40014800 	.word	0x40014800
 80045d8:	40001800 	.word	0x40001800
 80045dc:	40001c00 	.word	0x40001c00
 80045e0:	40002000 	.word	0x40002000

080045e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e040      	b.n	8004678 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fc fd10 	bl	800102c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2224      	movs	r2, #36	; 0x24
 8004610:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0201 	bic.w	r2, r2, #1
 8004620:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f82c 	bl	8004680 <UART_SetConfig>
 8004628:	4603      	mov	r3, r0
 800462a:	2b01      	cmp	r3, #1
 800462c:	d101      	bne.n	8004632 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e022      	b.n	8004678 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fa82 	bl	8004b44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800464e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800465e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0201 	orr.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 fb09 	bl	8004c88 <UART_CheckIdleState>
 8004676:	4603      	mov	r3, r0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4ba7      	ldr	r3, [pc, #668]	; (8004948 <UART_SetConfig+0x2c8>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6812      	ldr	r2, [r2, #0]
 80046b2:	6979      	ldr	r1, [r7, #20]
 80046b4:	430b      	orrs	r3, r1
 80046b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a95      	ldr	r2, [pc, #596]	; (800494c <UART_SetConfig+0x2cc>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d120      	bne.n	800473e <UART_SetConfig+0xbe>
 80046fc:	4b94      	ldr	r3, [pc, #592]	; (8004950 <UART_SetConfig+0x2d0>)
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	2b03      	cmp	r3, #3
 8004708:	d816      	bhi.n	8004738 <UART_SetConfig+0xb8>
 800470a:	a201      	add	r2, pc, #4	; (adr r2, 8004710 <UART_SetConfig+0x90>)
 800470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004710:	08004721 	.word	0x08004721
 8004714:	0800472d 	.word	0x0800472d
 8004718:	08004727 	.word	0x08004727
 800471c:	08004733 	.word	0x08004733
 8004720:	2301      	movs	r3, #1
 8004722:	77fb      	strb	r3, [r7, #31]
 8004724:	e14f      	b.n	80049c6 <UART_SetConfig+0x346>
 8004726:	2302      	movs	r3, #2
 8004728:	77fb      	strb	r3, [r7, #31]
 800472a:	e14c      	b.n	80049c6 <UART_SetConfig+0x346>
 800472c:	2304      	movs	r3, #4
 800472e:	77fb      	strb	r3, [r7, #31]
 8004730:	e149      	b.n	80049c6 <UART_SetConfig+0x346>
 8004732:	2308      	movs	r3, #8
 8004734:	77fb      	strb	r3, [r7, #31]
 8004736:	e146      	b.n	80049c6 <UART_SetConfig+0x346>
 8004738:	2310      	movs	r3, #16
 800473a:	77fb      	strb	r3, [r7, #31]
 800473c:	e143      	b.n	80049c6 <UART_SetConfig+0x346>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a84      	ldr	r2, [pc, #528]	; (8004954 <UART_SetConfig+0x2d4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d132      	bne.n	80047ae <UART_SetConfig+0x12e>
 8004748:	4b81      	ldr	r3, [pc, #516]	; (8004950 <UART_SetConfig+0x2d0>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	2b0c      	cmp	r3, #12
 8004754:	d828      	bhi.n	80047a8 <UART_SetConfig+0x128>
 8004756:	a201      	add	r2, pc, #4	; (adr r2, 800475c <UART_SetConfig+0xdc>)
 8004758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475c:	08004791 	.word	0x08004791
 8004760:	080047a9 	.word	0x080047a9
 8004764:	080047a9 	.word	0x080047a9
 8004768:	080047a9 	.word	0x080047a9
 800476c:	0800479d 	.word	0x0800479d
 8004770:	080047a9 	.word	0x080047a9
 8004774:	080047a9 	.word	0x080047a9
 8004778:	080047a9 	.word	0x080047a9
 800477c:	08004797 	.word	0x08004797
 8004780:	080047a9 	.word	0x080047a9
 8004784:	080047a9 	.word	0x080047a9
 8004788:	080047a9 	.word	0x080047a9
 800478c:	080047a3 	.word	0x080047a3
 8004790:	2300      	movs	r3, #0
 8004792:	77fb      	strb	r3, [r7, #31]
 8004794:	e117      	b.n	80049c6 <UART_SetConfig+0x346>
 8004796:	2302      	movs	r3, #2
 8004798:	77fb      	strb	r3, [r7, #31]
 800479a:	e114      	b.n	80049c6 <UART_SetConfig+0x346>
 800479c:	2304      	movs	r3, #4
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e111      	b.n	80049c6 <UART_SetConfig+0x346>
 80047a2:	2308      	movs	r3, #8
 80047a4:	77fb      	strb	r3, [r7, #31]
 80047a6:	e10e      	b.n	80049c6 <UART_SetConfig+0x346>
 80047a8:	2310      	movs	r3, #16
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e10b      	b.n	80049c6 <UART_SetConfig+0x346>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a69      	ldr	r2, [pc, #420]	; (8004958 <UART_SetConfig+0x2d8>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d120      	bne.n	80047fa <UART_SetConfig+0x17a>
 80047b8:	4b65      	ldr	r3, [pc, #404]	; (8004950 <UART_SetConfig+0x2d0>)
 80047ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047c2:	2b30      	cmp	r3, #48	; 0x30
 80047c4:	d013      	beq.n	80047ee <UART_SetConfig+0x16e>
 80047c6:	2b30      	cmp	r3, #48	; 0x30
 80047c8:	d814      	bhi.n	80047f4 <UART_SetConfig+0x174>
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	d009      	beq.n	80047e2 <UART_SetConfig+0x162>
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	d810      	bhi.n	80047f4 <UART_SetConfig+0x174>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <UART_SetConfig+0x15c>
 80047d6:	2b10      	cmp	r3, #16
 80047d8:	d006      	beq.n	80047e8 <UART_SetConfig+0x168>
 80047da:	e00b      	b.n	80047f4 <UART_SetConfig+0x174>
 80047dc:	2300      	movs	r3, #0
 80047de:	77fb      	strb	r3, [r7, #31]
 80047e0:	e0f1      	b.n	80049c6 <UART_SetConfig+0x346>
 80047e2:	2302      	movs	r3, #2
 80047e4:	77fb      	strb	r3, [r7, #31]
 80047e6:	e0ee      	b.n	80049c6 <UART_SetConfig+0x346>
 80047e8:	2304      	movs	r3, #4
 80047ea:	77fb      	strb	r3, [r7, #31]
 80047ec:	e0eb      	b.n	80049c6 <UART_SetConfig+0x346>
 80047ee:	2308      	movs	r3, #8
 80047f0:	77fb      	strb	r3, [r7, #31]
 80047f2:	e0e8      	b.n	80049c6 <UART_SetConfig+0x346>
 80047f4:	2310      	movs	r3, #16
 80047f6:	77fb      	strb	r3, [r7, #31]
 80047f8:	e0e5      	b.n	80049c6 <UART_SetConfig+0x346>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a57      	ldr	r2, [pc, #348]	; (800495c <UART_SetConfig+0x2dc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d120      	bne.n	8004846 <UART_SetConfig+0x1c6>
 8004804:	4b52      	ldr	r3, [pc, #328]	; (8004950 <UART_SetConfig+0x2d0>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800480e:	2bc0      	cmp	r3, #192	; 0xc0
 8004810:	d013      	beq.n	800483a <UART_SetConfig+0x1ba>
 8004812:	2bc0      	cmp	r3, #192	; 0xc0
 8004814:	d814      	bhi.n	8004840 <UART_SetConfig+0x1c0>
 8004816:	2b80      	cmp	r3, #128	; 0x80
 8004818:	d009      	beq.n	800482e <UART_SetConfig+0x1ae>
 800481a:	2b80      	cmp	r3, #128	; 0x80
 800481c:	d810      	bhi.n	8004840 <UART_SetConfig+0x1c0>
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <UART_SetConfig+0x1a8>
 8004822:	2b40      	cmp	r3, #64	; 0x40
 8004824:	d006      	beq.n	8004834 <UART_SetConfig+0x1b4>
 8004826:	e00b      	b.n	8004840 <UART_SetConfig+0x1c0>
 8004828:	2300      	movs	r3, #0
 800482a:	77fb      	strb	r3, [r7, #31]
 800482c:	e0cb      	b.n	80049c6 <UART_SetConfig+0x346>
 800482e:	2302      	movs	r3, #2
 8004830:	77fb      	strb	r3, [r7, #31]
 8004832:	e0c8      	b.n	80049c6 <UART_SetConfig+0x346>
 8004834:	2304      	movs	r3, #4
 8004836:	77fb      	strb	r3, [r7, #31]
 8004838:	e0c5      	b.n	80049c6 <UART_SetConfig+0x346>
 800483a:	2308      	movs	r3, #8
 800483c:	77fb      	strb	r3, [r7, #31]
 800483e:	e0c2      	b.n	80049c6 <UART_SetConfig+0x346>
 8004840:	2310      	movs	r3, #16
 8004842:	77fb      	strb	r3, [r7, #31]
 8004844:	e0bf      	b.n	80049c6 <UART_SetConfig+0x346>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a45      	ldr	r2, [pc, #276]	; (8004960 <UART_SetConfig+0x2e0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d125      	bne.n	800489c <UART_SetConfig+0x21c>
 8004850:	4b3f      	ldr	r3, [pc, #252]	; (8004950 <UART_SetConfig+0x2d0>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800485a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800485e:	d017      	beq.n	8004890 <UART_SetConfig+0x210>
 8004860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004864:	d817      	bhi.n	8004896 <UART_SetConfig+0x216>
 8004866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800486a:	d00b      	beq.n	8004884 <UART_SetConfig+0x204>
 800486c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004870:	d811      	bhi.n	8004896 <UART_SetConfig+0x216>
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <UART_SetConfig+0x1fe>
 8004876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800487a:	d006      	beq.n	800488a <UART_SetConfig+0x20a>
 800487c:	e00b      	b.n	8004896 <UART_SetConfig+0x216>
 800487e:	2300      	movs	r3, #0
 8004880:	77fb      	strb	r3, [r7, #31]
 8004882:	e0a0      	b.n	80049c6 <UART_SetConfig+0x346>
 8004884:	2302      	movs	r3, #2
 8004886:	77fb      	strb	r3, [r7, #31]
 8004888:	e09d      	b.n	80049c6 <UART_SetConfig+0x346>
 800488a:	2304      	movs	r3, #4
 800488c:	77fb      	strb	r3, [r7, #31]
 800488e:	e09a      	b.n	80049c6 <UART_SetConfig+0x346>
 8004890:	2308      	movs	r3, #8
 8004892:	77fb      	strb	r3, [r7, #31]
 8004894:	e097      	b.n	80049c6 <UART_SetConfig+0x346>
 8004896:	2310      	movs	r3, #16
 8004898:	77fb      	strb	r3, [r7, #31]
 800489a:	e094      	b.n	80049c6 <UART_SetConfig+0x346>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a30      	ldr	r2, [pc, #192]	; (8004964 <UART_SetConfig+0x2e4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d125      	bne.n	80048f2 <UART_SetConfig+0x272>
 80048a6:	4b2a      	ldr	r3, [pc, #168]	; (8004950 <UART_SetConfig+0x2d0>)
 80048a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048b4:	d017      	beq.n	80048e6 <UART_SetConfig+0x266>
 80048b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048ba:	d817      	bhi.n	80048ec <UART_SetConfig+0x26c>
 80048bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c0:	d00b      	beq.n	80048da <UART_SetConfig+0x25a>
 80048c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c6:	d811      	bhi.n	80048ec <UART_SetConfig+0x26c>
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <UART_SetConfig+0x254>
 80048cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d0:	d006      	beq.n	80048e0 <UART_SetConfig+0x260>
 80048d2:	e00b      	b.n	80048ec <UART_SetConfig+0x26c>
 80048d4:	2301      	movs	r3, #1
 80048d6:	77fb      	strb	r3, [r7, #31]
 80048d8:	e075      	b.n	80049c6 <UART_SetConfig+0x346>
 80048da:	2302      	movs	r3, #2
 80048dc:	77fb      	strb	r3, [r7, #31]
 80048de:	e072      	b.n	80049c6 <UART_SetConfig+0x346>
 80048e0:	2304      	movs	r3, #4
 80048e2:	77fb      	strb	r3, [r7, #31]
 80048e4:	e06f      	b.n	80049c6 <UART_SetConfig+0x346>
 80048e6:	2308      	movs	r3, #8
 80048e8:	77fb      	strb	r3, [r7, #31]
 80048ea:	e06c      	b.n	80049c6 <UART_SetConfig+0x346>
 80048ec:	2310      	movs	r3, #16
 80048ee:	77fb      	strb	r3, [r7, #31]
 80048f0:	e069      	b.n	80049c6 <UART_SetConfig+0x346>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1c      	ldr	r2, [pc, #112]	; (8004968 <UART_SetConfig+0x2e8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d137      	bne.n	800496c <UART_SetConfig+0x2ec>
 80048fc:	4b14      	ldr	r3, [pc, #80]	; (8004950 <UART_SetConfig+0x2d0>)
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004902:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004906:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800490a:	d017      	beq.n	800493c <UART_SetConfig+0x2bc>
 800490c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004910:	d817      	bhi.n	8004942 <UART_SetConfig+0x2c2>
 8004912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004916:	d00b      	beq.n	8004930 <UART_SetConfig+0x2b0>
 8004918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800491c:	d811      	bhi.n	8004942 <UART_SetConfig+0x2c2>
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <UART_SetConfig+0x2aa>
 8004922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004926:	d006      	beq.n	8004936 <UART_SetConfig+0x2b6>
 8004928:	e00b      	b.n	8004942 <UART_SetConfig+0x2c2>
 800492a:	2300      	movs	r3, #0
 800492c:	77fb      	strb	r3, [r7, #31]
 800492e:	e04a      	b.n	80049c6 <UART_SetConfig+0x346>
 8004930:	2302      	movs	r3, #2
 8004932:	77fb      	strb	r3, [r7, #31]
 8004934:	e047      	b.n	80049c6 <UART_SetConfig+0x346>
 8004936:	2304      	movs	r3, #4
 8004938:	77fb      	strb	r3, [r7, #31]
 800493a:	e044      	b.n	80049c6 <UART_SetConfig+0x346>
 800493c:	2308      	movs	r3, #8
 800493e:	77fb      	strb	r3, [r7, #31]
 8004940:	e041      	b.n	80049c6 <UART_SetConfig+0x346>
 8004942:	2310      	movs	r3, #16
 8004944:	77fb      	strb	r3, [r7, #31]
 8004946:	e03e      	b.n	80049c6 <UART_SetConfig+0x346>
 8004948:	efff69f3 	.word	0xefff69f3
 800494c:	40011000 	.word	0x40011000
 8004950:	40023800 	.word	0x40023800
 8004954:	40004400 	.word	0x40004400
 8004958:	40004800 	.word	0x40004800
 800495c:	40004c00 	.word	0x40004c00
 8004960:	40005000 	.word	0x40005000
 8004964:	40011400 	.word	0x40011400
 8004968:	40007800 	.word	0x40007800
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a71      	ldr	r2, [pc, #452]	; (8004b38 <UART_SetConfig+0x4b8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d125      	bne.n	80049c2 <UART_SetConfig+0x342>
 8004976:	4b71      	ldr	r3, [pc, #452]	; (8004b3c <UART_SetConfig+0x4bc>)
 8004978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004980:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004984:	d017      	beq.n	80049b6 <UART_SetConfig+0x336>
 8004986:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800498a:	d817      	bhi.n	80049bc <UART_SetConfig+0x33c>
 800498c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004990:	d00b      	beq.n	80049aa <UART_SetConfig+0x32a>
 8004992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004996:	d811      	bhi.n	80049bc <UART_SetConfig+0x33c>
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <UART_SetConfig+0x324>
 800499c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049a0:	d006      	beq.n	80049b0 <UART_SetConfig+0x330>
 80049a2:	e00b      	b.n	80049bc <UART_SetConfig+0x33c>
 80049a4:	2300      	movs	r3, #0
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e00d      	b.n	80049c6 <UART_SetConfig+0x346>
 80049aa:	2302      	movs	r3, #2
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e00a      	b.n	80049c6 <UART_SetConfig+0x346>
 80049b0:	2304      	movs	r3, #4
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e007      	b.n	80049c6 <UART_SetConfig+0x346>
 80049b6:	2308      	movs	r3, #8
 80049b8:	77fb      	strb	r3, [r7, #31]
 80049ba:	e004      	b.n	80049c6 <UART_SetConfig+0x346>
 80049bc:	2310      	movs	r3, #16
 80049be:	77fb      	strb	r3, [r7, #31]
 80049c0:	e001      	b.n	80049c6 <UART_SetConfig+0x346>
 80049c2:	2310      	movs	r3, #16
 80049c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ce:	d15a      	bne.n	8004a86 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80049d0:	7ffb      	ldrb	r3, [r7, #31]
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d827      	bhi.n	8004a26 <UART_SetConfig+0x3a6>
 80049d6:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <UART_SetConfig+0x35c>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	08004a01 	.word	0x08004a01
 80049e0:	08004a09 	.word	0x08004a09
 80049e4:	08004a11 	.word	0x08004a11
 80049e8:	08004a27 	.word	0x08004a27
 80049ec:	08004a17 	.word	0x08004a17
 80049f0:	08004a27 	.word	0x08004a27
 80049f4:	08004a27 	.word	0x08004a27
 80049f8:	08004a27 	.word	0x08004a27
 80049fc:	08004a1f 	.word	0x08004a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a00:	f7fe f8ae 	bl	8002b60 <HAL_RCC_GetPCLK1Freq>
 8004a04:	61b8      	str	r0, [r7, #24]
        break;
 8004a06:	e013      	b.n	8004a30 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a08:	f7fe f8be 	bl	8002b88 <HAL_RCC_GetPCLK2Freq>
 8004a0c:	61b8      	str	r0, [r7, #24]
        break;
 8004a0e:	e00f      	b.n	8004a30 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a10:	4b4b      	ldr	r3, [pc, #300]	; (8004b40 <UART_SetConfig+0x4c0>)
 8004a12:	61bb      	str	r3, [r7, #24]
        break;
 8004a14:	e00c      	b.n	8004a30 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a16:	f7fd ffb5 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8004a1a:	61b8      	str	r0, [r7, #24]
        break;
 8004a1c:	e008      	b.n	8004a30 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a22:	61bb      	str	r3, [r7, #24]
        break;
 8004a24:	e004      	b.n	8004a30 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	77bb      	strb	r3, [r7, #30]
        break;
 8004a2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d074      	beq.n	8004b20 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	005a      	lsls	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	085b      	lsrs	r3, r3, #1
 8004a40:	441a      	add	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	2b0f      	cmp	r3, #15
 8004a50:	d916      	bls.n	8004a80 <UART_SetConfig+0x400>
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a58:	d212      	bcs.n	8004a80 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	f023 030f 	bic.w	r3, r3, #15
 8004a62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	085b      	lsrs	r3, r3, #1
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	89fb      	ldrh	r3, [r7, #14]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	89fa      	ldrh	r2, [r7, #14]
 8004a7c:	60da      	str	r2, [r3, #12]
 8004a7e:	e04f      	b.n	8004b20 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	77bb      	strb	r3, [r7, #30]
 8004a84:	e04c      	b.n	8004b20 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a86:	7ffb      	ldrb	r3, [r7, #31]
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d828      	bhi.n	8004ade <UART_SetConfig+0x45e>
 8004a8c:	a201      	add	r2, pc, #4	; (adr r2, 8004a94 <UART_SetConfig+0x414>)
 8004a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a92:	bf00      	nop
 8004a94:	08004ab9 	.word	0x08004ab9
 8004a98:	08004ac1 	.word	0x08004ac1
 8004a9c:	08004ac9 	.word	0x08004ac9
 8004aa0:	08004adf 	.word	0x08004adf
 8004aa4:	08004acf 	.word	0x08004acf
 8004aa8:	08004adf 	.word	0x08004adf
 8004aac:	08004adf 	.word	0x08004adf
 8004ab0:	08004adf 	.word	0x08004adf
 8004ab4:	08004ad7 	.word	0x08004ad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ab8:	f7fe f852 	bl	8002b60 <HAL_RCC_GetPCLK1Freq>
 8004abc:	61b8      	str	r0, [r7, #24]
        break;
 8004abe:	e013      	b.n	8004ae8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ac0:	f7fe f862 	bl	8002b88 <HAL_RCC_GetPCLK2Freq>
 8004ac4:	61b8      	str	r0, [r7, #24]
        break;
 8004ac6:	e00f      	b.n	8004ae8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ac8:	4b1d      	ldr	r3, [pc, #116]	; (8004b40 <UART_SetConfig+0x4c0>)
 8004aca:	61bb      	str	r3, [r7, #24]
        break;
 8004acc:	e00c      	b.n	8004ae8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ace:	f7fd ff59 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8004ad2:	61b8      	str	r0, [r7, #24]
        break;
 8004ad4:	e008      	b.n	8004ae8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ada:	61bb      	str	r3, [r7, #24]
        break;
 8004adc:	e004      	b.n	8004ae8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	77bb      	strb	r3, [r7, #30]
        break;
 8004ae6:	bf00      	nop
    }

    if (pclk != 0U)
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d018      	beq.n	8004b20 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	085a      	lsrs	r2, r3, #1
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	441a      	add	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	2b0f      	cmp	r3, #15
 8004b06:	d909      	bls.n	8004b1c <UART_SetConfig+0x49c>
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0e:	d205      	bcs.n	8004b1c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	60da      	str	r2, [r3, #12]
 8004b1a:	e001      	b.n	8004b20 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3720      	adds	r7, #32
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40007c00 	.word	0x40007c00
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	00f42400 	.word	0x00f42400

08004b44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01a      	beq.n	8004c5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c42:	d10a      	bne.n	8004c5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	605a      	str	r2, [r3, #4]
  }
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c98:	f7fc fb6c 	bl	8001374 <HAL_GetTick>
 8004c9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d10e      	bne.n	8004cca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f82d 	bl	8004d1a <UART_WaitOnFlagUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e023      	b.n	8004d12 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	d10e      	bne.n	8004cf6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f817 	bl	8004d1a <UART_WaitOnFlagUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e00d      	b.n	8004d12 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b09c      	sub	sp, #112	; 0x70
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	603b      	str	r3, [r7, #0]
 8004d26:	4613      	mov	r3, r2
 8004d28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d2a:	e0a5      	b.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d32:	f000 80a1 	beq.w	8004e78 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d36:	f7fc fb1d 	bl	8001374 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d302      	bcc.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x32>
 8004d46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d13e      	bne.n	8004dca <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d54:	e853 3f00 	ldrex	r3, [r3]
 8004d58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d60:	667b      	str	r3, [r7, #100]	; 0x64
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d6c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e6      	bne.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3308      	adds	r3, #8
 8004d84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d90:	f023 0301 	bic.w	r3, r3, #1
 8004d94:	663b      	str	r3, [r7, #96]	; 0x60
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3308      	adds	r3, #8
 8004d9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004da0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004da4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e5      	bne.n	8004d7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2220      	movs	r2, #32
 8004db6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e067      	b.n	8004e9a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d04f      	beq.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de6:	d147      	bne.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004df0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	e853 3f00 	ldrex	r3, [r3]
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e10:	637b      	str	r3, [r7, #52]	; 0x34
 8004e12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e18:	e841 2300 	strex	r3, r2, [r1]
 8004e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e6      	bne.n	8004df2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3308      	adds	r3, #8
 8004e2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	e853 3f00 	ldrex	r3, [r3]
 8004e32:	613b      	str	r3, [r7, #16]
   return(result);
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f023 0301 	bic.w	r3, r3, #1
 8004e3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3308      	adds	r3, #8
 8004e42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e44:	623a      	str	r2, [r7, #32]
 8004e46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e48:	69f9      	ldr	r1, [r7, #28]
 8004e4a:	6a3a      	ldr	r2, [r7, #32]
 8004e4c:	e841 2300 	strex	r3, r2, [r1]
 8004e50:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e5      	bne.n	8004e24 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2220      	movs	r2, #32
 8004e62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e010      	b.n	8004e9a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69da      	ldr	r2, [r3, #28]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4013      	ands	r3, r2
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	bf0c      	ite	eq
 8004e88:	2301      	moveq	r3, #1
 8004e8a:	2300      	movne	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	461a      	mov	r2, r3
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	f43f af4a 	beq.w	8004d2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3770      	adds	r7, #112	; 0x70
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	f107 001c 	add.w	r0, r7, #28
 8004eb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d120      	bne.n	8004efe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	4b20      	ldr	r3, [pc, #128]	; (8004f50 <USB_CoreInit+0xac>)
 8004ece:	4013      	ands	r3, r2
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d105      	bne.n	8004ef2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fa92 	bl	800541c <USB_CoreReset>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	73fb      	strb	r3, [r7, #15]
 8004efc:	e010      	b.n	8004f20 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fa86 	bl	800541c <USB_CoreReset>
 8004f10:	4603      	mov	r3, r0
 8004f12:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d10b      	bne.n	8004f3e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f043 0206 	orr.w	r2, r3, #6
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f043 0220 	orr.w	r2, r3, #32
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f4a:	b004      	add	sp, #16
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	ffbdffbf 	.word	0xffbdffbf

08004f54 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f023 0201 	bic.w	r2, r3, #1
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b084      	sub	sp, #16
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	460b      	mov	r3, r1
 8004f80:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f92:	78fb      	ldrb	r3, [r7, #3]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d115      	bne.n	8004fc4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fa4:	2001      	movs	r0, #1
 8004fa6:	f7fc f9f1 	bl	800138c <HAL_Delay>
      ms++;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3301      	adds	r3, #1
 8004fae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fa25 	bl	8005400 <USB_GetMode>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d01e      	beq.n	8004ffa <USB_SetCurrentMode+0x84>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2b31      	cmp	r3, #49	; 0x31
 8004fc0:	d9f0      	bls.n	8004fa4 <USB_SetCurrentMode+0x2e>
 8004fc2:	e01a      	b.n	8004ffa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d115      	bne.n	8004ff6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	f7fc f9d8 	bl	800138c <HAL_Delay>
      ms++;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fa0c 	bl	8005400 <USB_GetMode>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <USB_SetCurrentMode+0x84>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2b31      	cmp	r3, #49	; 0x31
 8004ff2:	d9f0      	bls.n	8004fd6 <USB_SetCurrentMode+0x60>
 8004ff4:	e001      	b.n	8004ffa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e005      	b.n	8005006 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2b32      	cmp	r3, #50	; 0x32
 8004ffe:	d101      	bne.n	8005004 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005010:	b084      	sub	sp, #16
 8005012:	b580      	push	{r7, lr}
 8005014:	b086      	sub	sp, #24
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800501e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800502a:	2300      	movs	r3, #0
 800502c:	613b      	str	r3, [r7, #16]
 800502e:	e009      	b.n	8005044 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	3340      	adds	r3, #64	; 0x40
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	2200      	movs	r2, #0
 800503c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	3301      	adds	r3, #1
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	2b0e      	cmp	r3, #14
 8005048:	d9f2      	bls.n	8005030 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800504a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800504c:	2b00      	cmp	r3, #0
 800504e:	d11c      	bne.n	800508a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800505e:	f043 0302 	orr.w	r3, r3, #2
 8005062:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	e005      	b.n	8005096 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800509c:	461a      	mov	r2, r3
 800509e:	2300      	movs	r3, #0
 80050a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a8:	4619      	mov	r1, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b0:	461a      	mov	r2, r3
 80050b2:	680b      	ldr	r3, [r1, #0]
 80050b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d10c      	bne.n	80050d6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d104      	bne.n	80050cc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050c2:	2100      	movs	r1, #0
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f961 	bl	800538c <USB_SetDevSpeed>
 80050ca:	e008      	b.n	80050de <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050cc:	2101      	movs	r1, #1
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f95c 	bl	800538c <USB_SetDevSpeed>
 80050d4:	e003      	b.n	80050de <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050d6:	2103      	movs	r1, #3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f957 	bl	800538c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050de:	2110      	movs	r1, #16
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f8f3 	bl	80052cc <USB_FlushTxFifo>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f91d 	bl	8005330 <USB_FlushRxFifo>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005106:	461a      	mov	r2, r3
 8005108:	2300      	movs	r3, #0
 800510a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005112:	461a      	mov	r2, r3
 8005114:	2300      	movs	r3, #0
 8005116:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511e:	461a      	mov	r2, r3
 8005120:	2300      	movs	r3, #0
 8005122:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005124:	2300      	movs	r3, #0
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	e043      	b.n	80051b2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800513c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005140:	d118      	bne.n	8005174 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005154:	461a      	mov	r2, r3
 8005156:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800515a:	6013      	str	r3, [r2, #0]
 800515c:	e013      	b.n	8005186 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516a:	461a      	mov	r2, r3
 800516c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	e008      	b.n	8005186 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005180:	461a      	mov	r2, r3
 8005182:	2300      	movs	r3, #0
 8005184:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005192:	461a      	mov	r2, r3
 8005194:	2300      	movs	r3, #0
 8005196:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a4:	461a      	mov	r2, r3
 80051a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	3301      	adds	r3, #1
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d3b7      	bcc.n	800512a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	e043      	b.n	8005248 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051d6:	d118      	bne.n	800520a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10a      	bne.n	80051f4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ea:	461a      	mov	r2, r3
 80051ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	e013      	b.n	800521c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005200:	461a      	mov	r2, r3
 8005202:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	e008      	b.n	800521c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005216:	461a      	mov	r2, r3
 8005218:	2300      	movs	r3, #0
 800521a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005228:	461a      	mov	r2, r3
 800522a:	2300      	movs	r3, #0
 800522c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523a:	461a      	mov	r2, r3
 800523c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005240:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	3301      	adds	r3, #1
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	429a      	cmp	r2, r3
 800524e:	d3b7      	bcc.n	80051c0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800525e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005262:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005270:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	2b00      	cmp	r3, #0
 8005276:	d105      	bne.n	8005284 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	f043 0210 	orr.w	r2, r3, #16
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699a      	ldr	r2, [r3, #24]
 8005288:	4b0e      	ldr	r3, [pc, #56]	; (80052c4 <USB_DevInit+0x2b4>)
 800528a:	4313      	orrs	r3, r2
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005292:	2b00      	cmp	r3, #0
 8005294:	d005      	beq.n	80052a2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	f043 0208 	orr.w	r2, r3, #8
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d105      	bne.n	80052b4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	699a      	ldr	r2, [r3, #24]
 80052ac:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <USB_DevInit+0x2b8>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052c0:	b004      	add	sp, #16
 80052c2:	4770      	bx	lr
 80052c4:	803c3800 	.word	0x803c3800
 80052c8:	40000004 	.word	0x40000004

080052cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3301      	adds	r3, #1
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	4a12      	ldr	r2, [pc, #72]	; (800532c <USB_FlushTxFifo+0x60>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d901      	bls.n	80052ea <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e01a      	b.n	8005320 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	daf3      	bge.n	80052da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	019b      	lsls	r3, r3, #6
 80052fa:	f043 0220 	orr.w	r2, r3, #32
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3301      	adds	r3, #1
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	4a08      	ldr	r2, [pc, #32]	; (800532c <USB_FlushTxFifo+0x60>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d901      	bls.n	8005312 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e006      	b.n	8005320 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b20      	cmp	r3, #32
 800531c:	d0f1      	beq.n	8005302 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	00030d40 	.word	0x00030d40

08005330 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3301      	adds	r3, #1
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	4a11      	ldr	r2, [pc, #68]	; (8005388 <USB_FlushRxFifo+0x58>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d901      	bls.n	800534c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e017      	b.n	800537c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	daf3      	bge.n	800533c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2210      	movs	r2, #16
 800535c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3301      	adds	r3, #1
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	4a08      	ldr	r2, [pc, #32]	; (8005388 <USB_FlushRxFifo+0x58>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d901      	bls.n	800536e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e006      	b.n	800537c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0310 	and.w	r3, r3, #16
 8005376:	2b10      	cmp	r3, #16
 8005378:	d0f1      	beq.n	800535e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	00030d40 	.word	0x00030d40

0800538c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	68f9      	ldr	r1, [r7, #12]
 80053a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ac:	4313      	orrs	r3, r2
 80053ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053be:	b480      	push	{r7}
 80053c0:	b085      	sub	sp, #20
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053d8:	f023 0303 	bic.w	r3, r3, #3
 80053dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ec:	f043 0302 	orr.w	r3, r3, #2
 80053f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	f003 0301 	and.w	r3, r3, #1
}
 8005410:	4618      	mov	r0, r3
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3301      	adds	r3, #1
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	4a13      	ldr	r2, [pc, #76]	; (800547c <USB_CoreReset+0x60>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d901      	bls.n	8005438 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e01a      	b.n	800546e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	daf3      	bge.n	8005428 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	f043 0201 	orr.w	r2, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3301      	adds	r3, #1
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	4a09      	ldr	r2, [pc, #36]	; (800547c <USB_CoreReset+0x60>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d901      	bls.n	8005460 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e006      	b.n	800546e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b01      	cmp	r3, #1
 800546a:	d0f1      	beq.n	8005450 <USB_CoreReset+0x34>

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	00030d40 	.word	0x00030d40

08005480 <__libc_init_array>:
 8005480:	b570      	push	{r4, r5, r6, lr}
 8005482:	4d0d      	ldr	r5, [pc, #52]	; (80054b8 <__libc_init_array+0x38>)
 8005484:	4c0d      	ldr	r4, [pc, #52]	; (80054bc <__libc_init_array+0x3c>)
 8005486:	1b64      	subs	r4, r4, r5
 8005488:	10a4      	asrs	r4, r4, #2
 800548a:	2600      	movs	r6, #0
 800548c:	42a6      	cmp	r6, r4
 800548e:	d109      	bne.n	80054a4 <__libc_init_array+0x24>
 8005490:	4d0b      	ldr	r5, [pc, #44]	; (80054c0 <__libc_init_array+0x40>)
 8005492:	4c0c      	ldr	r4, [pc, #48]	; (80054c4 <__libc_init_array+0x44>)
 8005494:	f000 f83c 	bl	8005510 <_init>
 8005498:	1b64      	subs	r4, r4, r5
 800549a:	10a4      	asrs	r4, r4, #2
 800549c:	2600      	movs	r6, #0
 800549e:	42a6      	cmp	r6, r4
 80054a0:	d105      	bne.n	80054ae <__libc_init_array+0x2e>
 80054a2:	bd70      	pop	{r4, r5, r6, pc}
 80054a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a8:	4798      	blx	r3
 80054aa:	3601      	adds	r6, #1
 80054ac:	e7ee      	b.n	800548c <__libc_init_array+0xc>
 80054ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b2:	4798      	blx	r3
 80054b4:	3601      	adds	r6, #1
 80054b6:	e7f2      	b.n	800549e <__libc_init_array+0x1e>
 80054b8:	08005550 	.word	0x08005550
 80054bc:	08005550 	.word	0x08005550
 80054c0:	08005550 	.word	0x08005550
 80054c4:	08005554 	.word	0x08005554

080054c8 <memcmp>:
 80054c8:	b530      	push	{r4, r5, lr}
 80054ca:	3901      	subs	r1, #1
 80054cc:	2400      	movs	r4, #0
 80054ce:	42a2      	cmp	r2, r4
 80054d0:	d101      	bne.n	80054d6 <memcmp+0xe>
 80054d2:	2000      	movs	r0, #0
 80054d4:	e005      	b.n	80054e2 <memcmp+0x1a>
 80054d6:	5d03      	ldrb	r3, [r0, r4]
 80054d8:	3401      	adds	r4, #1
 80054da:	5d0d      	ldrb	r5, [r1, r4]
 80054dc:	42ab      	cmp	r3, r5
 80054de:	d0f6      	beq.n	80054ce <memcmp+0x6>
 80054e0:	1b58      	subs	r0, r3, r5
 80054e2:	bd30      	pop	{r4, r5, pc}

080054e4 <memcpy>:
 80054e4:	440a      	add	r2, r1
 80054e6:	4291      	cmp	r1, r2
 80054e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80054ec:	d100      	bne.n	80054f0 <memcpy+0xc>
 80054ee:	4770      	bx	lr
 80054f0:	b510      	push	{r4, lr}
 80054f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054fa:	4291      	cmp	r1, r2
 80054fc:	d1f9      	bne.n	80054f2 <memcpy+0xe>
 80054fe:	bd10      	pop	{r4, pc}

08005500 <memset>:
 8005500:	4402      	add	r2, r0
 8005502:	4603      	mov	r3, r0
 8005504:	4293      	cmp	r3, r2
 8005506:	d100      	bne.n	800550a <memset+0xa>
 8005508:	4770      	bx	lr
 800550a:	f803 1b01 	strb.w	r1, [r3], #1
 800550e:	e7f9      	b.n	8005504 <memset+0x4>

08005510 <_init>:
 8005510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005512:	bf00      	nop
 8005514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005516:	bc08      	pop	{r3}
 8005518:	469e      	mov	lr, r3
 800551a:	4770      	bx	lr

0800551c <_fini>:
 800551c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551e:	bf00      	nop
 8005520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005522:	bc08      	pop	{r3}
 8005524:	469e      	mov	lr, r3
 8005526:	4770      	bx	lr
