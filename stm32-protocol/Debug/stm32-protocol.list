
stm32-protocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b30  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002bec  08002bec  00012bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c24  08002c24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c24  08002c24  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c24  08002c24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c24  08002c24  00012c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c28  08002c28  00012c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08002c38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002c38  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a70  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000158b  00000000  00000000  00029aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  0002b030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000770  00000000  00000000  0002b828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f61  00000000  00000000  0002bf98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a246  00000000  00000000  00045ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e72c  00000000  00000000  0005013f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee86b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b90  00000000  00000000  000ee8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002bd4 	.word	0x08002bd4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002bd4 	.word	0x08002bd4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fa58 	bl	80006d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f812 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f8e2 	bl	80003f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800022c:	f000 f8b0 	bl	8000390 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000230:	f000 f86e 	bl	8000310 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
    HAL_SPI_Receive(&hspi1, Rx_buffer, 10, 100);
 8000234:	4903      	ldr	r1, [pc, #12]	; (8000244 <main+0x28>)
 8000236:	4804      	ldr	r0, [pc, #16]	; (8000248 <main+0x2c>)
 8000238:	2364      	movs	r3, #100	; 0x64
 800023a:	220a      	movs	r2, #10
 800023c:	f001 fbb0 	bl	80019a0 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000240:	e7fe      	b.n	8000240 <main+0x24>
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	20000110 	.word	0x20000110
 8000248:	20000028 	.word	0x20000028

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b590      	push	{r4, r7, lr}
 800024e:	b099      	sub	sp, #100	; 0x64
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	242c      	movs	r4, #44	; 0x2c
 8000254:	193b      	adds	r3, r7, r4
 8000256:	0018      	movs	r0, r3
 8000258:	2334      	movs	r3, #52	; 0x34
 800025a:	001a      	movs	r2, r3
 800025c:	2100      	movs	r1, #0
 800025e:	f002 fcb1 	bl	8002bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000262:	231c      	movs	r3, #28
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	0018      	movs	r0, r3
 8000268:	2310      	movs	r3, #16
 800026a:	001a      	movs	r2, r3
 800026c:	2100      	movs	r1, #0
 800026e:	f002 fca9 	bl	8002bc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000272:	003b      	movs	r3, r7
 8000274:	0018      	movs	r0, r3
 8000276:	231c      	movs	r3, #28
 8000278:	001a      	movs	r2, r3
 800027a:	2100      	movs	r1, #0
 800027c:	f002 fca2 	bl	8002bc4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000280:	0021      	movs	r1, r4
 8000282:	187b      	adds	r3, r7, r1
 8000284:	2202      	movs	r2, #2
 8000286:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000288:	187b      	adds	r3, r7, r1
 800028a:	2201      	movs	r2, #1
 800028c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2210      	movs	r2, #16
 8000292:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2202      	movs	r2, #2
 8000298:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2280      	movs	r2, #128	; 0x80
 800029e:	0212      	lsls	r2, r2, #8
 80002a0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	22a0      	movs	r2, #160	; 0xa0
 80002a6:	0392      	lsls	r2, r2, #14
 80002a8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2201      	movs	r2, #1
 80002ae:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fcbc 	bl	8000c30 <HAL_RCC_OscConfig>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002bc:	f000 f902 	bl	80004c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c0:	211c      	movs	r1, #28
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2207      	movs	r2, #7
 80002c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2202      	movs	r2, #2
 80002cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2200      	movs	r2, #0
 80002d8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2101      	movs	r1, #1
 80002de:	0018      	movs	r0, r3
 80002e0:	f001 f82c 	bl	800133c <HAL_RCC_ClockConfig>
 80002e4:	1e03      	subs	r3, r0, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80002e8:	f000 f8ec 	bl	80004c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002ec:	003b      	movs	r3, r7
 80002ee:	2202      	movs	r2, #2
 80002f0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002f2:	003b      	movs	r3, r7
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f8:	003b      	movs	r3, r7
 80002fa:	0018      	movs	r0, r3
 80002fc:	f001 f998 	bl	8001630 <HAL_RCCEx_PeriphCLKConfig>
 8000300:	1e03      	subs	r3, r0, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000304:	f000 f8de 	bl	80004c4 <Error_Handler>
  }
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b019      	add	sp, #100	; 0x64
 800030e:	bd90      	pop	{r4, r7, pc}

08000310 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000314:	4b1c      	ldr	r3, [pc, #112]	; (8000388 <MX_SPI1_Init+0x78>)
 8000316:	4a1d      	ldr	r2, [pc, #116]	; (800038c <MX_SPI1_Init+0x7c>)
 8000318:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800031a:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <MX_SPI1_Init+0x78>)
 800031c:	2282      	movs	r2, #130	; 0x82
 800031e:	0052      	lsls	r2, r2, #1
 8000320:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000322:	4b19      	ldr	r3, [pc, #100]	; (8000388 <MX_SPI1_Init+0x78>)
 8000324:	2280      	movs	r2, #128	; 0x80
 8000326:	0212      	lsls	r2, r2, #8
 8000328:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <MX_SPI1_Init+0x78>)
 800032c:	22e0      	movs	r2, #224	; 0xe0
 800032e:	00d2      	lsls	r2, r2, #3
 8000330:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <MX_SPI1_Init+0x78>)
 8000334:	2200      	movs	r2, #0
 8000336:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000338:	4b13      	ldr	r3, [pc, #76]	; (8000388 <MX_SPI1_Init+0x78>)
 800033a:	2200      	movs	r2, #0
 800033c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800033e:	4b12      	ldr	r3, [pc, #72]	; (8000388 <MX_SPI1_Init+0x78>)
 8000340:	2280      	movs	r2, #128	; 0x80
 8000342:	0092      	lsls	r2, r2, #2
 8000344:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000346:	4b10      	ldr	r3, [pc, #64]	; (8000388 <MX_SPI1_Init+0x78>)
 8000348:	2228      	movs	r2, #40	; 0x28
 800034a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_SPI1_Init+0x78>)
 800034e:	2200      	movs	r2, #0
 8000350:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000352:	4b0d      	ldr	r3, [pc, #52]	; (8000388 <MX_SPI1_Init+0x78>)
 8000354:	2200      	movs	r2, #0
 8000356:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000358:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <MX_SPI1_Init+0x78>)
 800035a:	2200      	movs	r2, #0
 800035c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800035e:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <MX_SPI1_Init+0x78>)
 8000360:	2207      	movs	r2, #7
 8000362:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000364:	4b08      	ldr	r3, [pc, #32]	; (8000388 <MX_SPI1_Init+0x78>)
 8000366:	2200      	movs	r2, #0
 8000368:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800036a:	4b07      	ldr	r3, [pc, #28]	; (8000388 <MX_SPI1_Init+0x78>)
 800036c:	2208      	movs	r2, #8
 800036e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <MX_SPI1_Init+0x78>)
 8000372:	0018      	movs	r0, r3
 8000374:	f001 fa5c 	bl	8001830 <HAL_SPI_Init>
 8000378:	1e03      	subs	r3, r0, #0
 800037a:	d001      	beq.n	8000380 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800037c:	f000 f8a2 	bl	80004c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000380:	46c0      	nop			; (mov r8, r8)
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	20000028 	.word	0x20000028
 800038c:	40013000 	.word	0x40013000

08000390 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000394:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 8000396:	4a15      	ldr	r2, [pc, #84]	; (80003ec <MX_USART2_UART_Init+0x5c>)
 8000398:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800039a:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 800039c:	22e1      	movs	r2, #225	; 0xe1
 800039e:	0252      	lsls	r2, r2, #9
 80003a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003a2:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003b6:	220c      	movs	r2, #12
 80003b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <MX_USART2_UART_Init+0x58>)
 80003d4:	0018      	movs	r0, r3
 80003d6:	f001 ffd5 	bl	8002384 <HAL_UART_Init>
 80003da:	1e03      	subs	r3, r0, #0
 80003dc:	d001      	beq.n	80003e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003de:	f000 f871 	bl	80004c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	2000008c 	.word	0x2000008c
 80003ec:	40004400 	.word	0x40004400

080003f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f0:	b590      	push	{r4, r7, lr}
 80003f2:	b089      	sub	sp, #36	; 0x24
 80003f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f6:	240c      	movs	r4, #12
 80003f8:	193b      	adds	r3, r7, r4
 80003fa:	0018      	movs	r0, r3
 80003fc:	2314      	movs	r3, #20
 80003fe:	001a      	movs	r2, r3
 8000400:	2100      	movs	r1, #0
 8000402:	f002 fbdf 	bl	8002bc4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000406:	4b2d      	ldr	r3, [pc, #180]	; (80004bc <MX_GPIO_Init+0xcc>)
 8000408:	695a      	ldr	r2, [r3, #20]
 800040a:	4b2c      	ldr	r3, [pc, #176]	; (80004bc <MX_GPIO_Init+0xcc>)
 800040c:	2180      	movs	r1, #128	; 0x80
 800040e:	0309      	lsls	r1, r1, #12
 8000410:	430a      	orrs	r2, r1
 8000412:	615a      	str	r2, [r3, #20]
 8000414:	4b29      	ldr	r3, [pc, #164]	; (80004bc <MX_GPIO_Init+0xcc>)
 8000416:	695a      	ldr	r2, [r3, #20]
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	031b      	lsls	r3, r3, #12
 800041c:	4013      	ands	r3, r2
 800041e:	60bb      	str	r3, [r7, #8]
 8000420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000422:	4b26      	ldr	r3, [pc, #152]	; (80004bc <MX_GPIO_Init+0xcc>)
 8000424:	695a      	ldr	r2, [r3, #20]
 8000426:	4b25      	ldr	r3, [pc, #148]	; (80004bc <MX_GPIO_Init+0xcc>)
 8000428:	2180      	movs	r1, #128	; 0x80
 800042a:	03c9      	lsls	r1, r1, #15
 800042c:	430a      	orrs	r2, r1
 800042e:	615a      	str	r2, [r3, #20]
 8000430:	4b22      	ldr	r3, [pc, #136]	; (80004bc <MX_GPIO_Init+0xcc>)
 8000432:	695a      	ldr	r2, [r3, #20]
 8000434:	2380      	movs	r3, #128	; 0x80
 8000436:	03db      	lsls	r3, r3, #15
 8000438:	4013      	ands	r3, r2
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043e:	4b1f      	ldr	r3, [pc, #124]	; (80004bc <MX_GPIO_Init+0xcc>)
 8000440:	695a      	ldr	r2, [r3, #20]
 8000442:	4b1e      	ldr	r3, [pc, #120]	; (80004bc <MX_GPIO_Init+0xcc>)
 8000444:	2180      	movs	r1, #128	; 0x80
 8000446:	0289      	lsls	r1, r1, #10
 8000448:	430a      	orrs	r2, r1
 800044a:	615a      	str	r2, [r3, #20]
 800044c:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <MX_GPIO_Init+0xcc>)
 800044e:	695a      	ldr	r2, [r3, #20]
 8000450:	2380      	movs	r3, #128	; 0x80
 8000452:	029b      	lsls	r3, r3, #10
 8000454:	4013      	ands	r3, r2
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800045a:	2390      	movs	r3, #144	; 0x90
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	2200      	movs	r2, #0
 8000460:	2110      	movs	r1, #16
 8000462:	0018      	movs	r0, r3
 8000464:	f000 fbc6 	bl	8000bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000468:	193b      	adds	r3, r7, r4
 800046a:	2280      	movs	r2, #128	; 0x80
 800046c:	0192      	lsls	r2, r2, #6
 800046e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000470:	193b      	adds	r3, r7, r4
 8000472:	2284      	movs	r2, #132	; 0x84
 8000474:	0392      	lsls	r2, r2, #14
 8000476:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	193b      	adds	r3, r7, r4
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800047e:	193b      	adds	r3, r7, r4
 8000480:	4a0f      	ldr	r2, [pc, #60]	; (80004c0 <MX_GPIO_Init+0xd0>)
 8000482:	0019      	movs	r1, r3
 8000484:	0010      	movs	r0, r2
 8000486:	f000 fa3d 	bl	8000904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800048a:	0021      	movs	r1, r4
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2210      	movs	r2, #16
 8000490:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2201      	movs	r2, #1
 8000496:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2200      	movs	r2, #0
 80004a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a4:	187a      	adds	r2, r7, r1
 80004a6:	2390      	movs	r3, #144	; 0x90
 80004a8:	05db      	lsls	r3, r3, #23
 80004aa:	0011      	movs	r1, r2
 80004ac:	0018      	movs	r0, r3
 80004ae:	f000 fa29 	bl	8000904 <HAL_GPIO_Init>

}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b009      	add	sp, #36	; 0x24
 80004b8:	bd90      	pop	{r4, r7, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	40021000 	.word	0x40021000
 80004c0:	48000800 	.word	0x48000800

080004c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c8:	b672      	cpsid	i
}
 80004ca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004cc:	e7fe      	b.n	80004cc <Error_Handler+0x8>
	...

080004d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d6:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <HAL_MspInit+0x44>)
 80004d8:	699a      	ldr	r2, [r3, #24]
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <HAL_MspInit+0x44>)
 80004dc:	2101      	movs	r1, #1
 80004de:	430a      	orrs	r2, r1
 80004e0:	619a      	str	r2, [r3, #24]
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <HAL_MspInit+0x44>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	2201      	movs	r2, #1
 80004e8:	4013      	ands	r3, r2
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <HAL_MspInit+0x44>)
 80004f0:	69da      	ldr	r2, [r3, #28]
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <HAL_MspInit+0x44>)
 80004f4:	2180      	movs	r1, #128	; 0x80
 80004f6:	0549      	lsls	r1, r1, #21
 80004f8:	430a      	orrs	r2, r1
 80004fa:	61da      	str	r2, [r3, #28]
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <HAL_MspInit+0x44>)
 80004fe:	69da      	ldr	r2, [r3, #28]
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	055b      	lsls	r3, r3, #21
 8000504:	4013      	ands	r3, r2
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	b002      	add	sp, #8
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	40021000 	.word	0x40021000

08000518 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b08b      	sub	sp, #44	; 0x2c
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	2414      	movs	r4, #20
 8000522:	193b      	adds	r3, r7, r4
 8000524:	0018      	movs	r0, r3
 8000526:	2314      	movs	r3, #20
 8000528:	001a      	movs	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f002 fb4a 	bl	8002bc4 <memset>
  if(hspi->Instance==SPI1)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a1c      	ldr	r2, [pc, #112]	; (80005a8 <HAL_SPI_MspInit+0x90>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d132      	bne.n	80005a0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800053a:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <HAL_SPI_MspInit+0x94>)
 800053c:	699a      	ldr	r2, [r3, #24]
 800053e:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <HAL_SPI_MspInit+0x94>)
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	0149      	lsls	r1, r1, #5
 8000544:	430a      	orrs	r2, r1
 8000546:	619a      	str	r2, [r3, #24]
 8000548:	4b18      	ldr	r3, [pc, #96]	; (80005ac <HAL_SPI_MspInit+0x94>)
 800054a:	699a      	ldr	r2, [r3, #24]
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	015b      	lsls	r3, r3, #5
 8000550:	4013      	ands	r3, r2
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <HAL_SPI_MspInit+0x94>)
 8000558:	695a      	ldr	r2, [r3, #20]
 800055a:	4b14      	ldr	r3, [pc, #80]	; (80005ac <HAL_SPI_MspInit+0x94>)
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	0289      	lsls	r1, r1, #10
 8000560:	430a      	orrs	r2, r1
 8000562:	615a      	str	r2, [r3, #20]
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <HAL_SPI_MspInit+0x94>)
 8000566:	695a      	ldr	r2, [r3, #20]
 8000568:	2380      	movs	r3, #128	; 0x80
 800056a:	029b      	lsls	r3, r3, #10
 800056c:	4013      	ands	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000572:	0021      	movs	r1, r4
 8000574:	187b      	adds	r3, r7, r1
 8000576:	22a0      	movs	r2, #160	; 0xa0
 8000578:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2202      	movs	r2, #2
 800057e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2203      	movs	r2, #3
 800058a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000592:	187a      	adds	r2, r7, r1
 8000594:	2390      	movs	r3, #144	; 0x90
 8000596:	05db      	lsls	r3, r3, #23
 8000598:	0011      	movs	r1, r2
 800059a:	0018      	movs	r0, r3
 800059c:	f000 f9b2 	bl	8000904 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b00b      	add	sp, #44	; 0x2c
 80005a6:	bd90      	pop	{r4, r7, pc}
 80005a8:	40013000 	.word	0x40013000
 80005ac:	40021000 	.word	0x40021000

080005b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b08b      	sub	sp, #44	; 0x2c
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	2414      	movs	r4, #20
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	0018      	movs	r0, r3
 80005be:	2314      	movs	r3, #20
 80005c0:	001a      	movs	r2, r3
 80005c2:	2100      	movs	r1, #0
 80005c4:	f002 fafe 	bl	8002bc4 <memset>
  if(huart->Instance==USART2)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a1c      	ldr	r2, [pc, #112]	; (8000640 <HAL_UART_MspInit+0x90>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d132      	bne.n	8000638 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <HAL_UART_MspInit+0x94>)
 80005d4:	69da      	ldr	r2, [r3, #28]
 80005d6:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <HAL_UART_MspInit+0x94>)
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	0289      	lsls	r1, r1, #10
 80005dc:	430a      	orrs	r2, r1
 80005de:	61da      	str	r2, [r3, #28]
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <HAL_UART_MspInit+0x94>)
 80005e2:	69da      	ldr	r2, [r3, #28]
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	029b      	lsls	r3, r3, #10
 80005e8:	4013      	ands	r3, r2
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <HAL_UART_MspInit+0x94>)
 80005f0:	695a      	ldr	r2, [r3, #20]
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <HAL_UART_MspInit+0x94>)
 80005f4:	2180      	movs	r1, #128	; 0x80
 80005f6:	0289      	lsls	r1, r1, #10
 80005f8:	430a      	orrs	r2, r1
 80005fa:	615a      	str	r2, [r3, #20]
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <HAL_UART_MspInit+0x94>)
 80005fe:	695a      	ldr	r2, [r3, #20]
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	029b      	lsls	r3, r3, #10
 8000604:	4013      	ands	r3, r2
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800060a:	0021      	movs	r1, r4
 800060c:	187b      	adds	r3, r7, r1
 800060e:	220c      	movs	r2, #12
 8000610:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2202      	movs	r2, #2
 8000616:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2201      	movs	r2, #1
 8000628:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062a:	187a      	adds	r2, r7, r1
 800062c:	2390      	movs	r3, #144	; 0x90
 800062e:	05db      	lsls	r3, r3, #23
 8000630:	0011      	movs	r1, r2
 8000632:	0018      	movs	r0, r3
 8000634:	f000 f966 	bl	8000904 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	b00b      	add	sp, #44	; 0x2c
 800063e:	bd90      	pop	{r4, r7, pc}
 8000640:	40004400 	.word	0x40004400
 8000644:	40021000 	.word	0x40021000

08000648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800064c:	e7fe      	b.n	800064c <NMI_Handler+0x4>

0800064e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <HardFault_Handler+0x4>

08000654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066c:	f000 f87a 	bl	8000764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000682:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <LoopForever+0x6>)
  ldr r1, =_edata
 8000686:	490e      	ldr	r1, [pc, #56]	; (80006c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000688:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <LoopForever+0xe>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800068c:	e002      	b.n	8000694 <LoopCopyDataInit>

0800068e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000692:	3304      	adds	r3, #4

08000694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000698:	d3f9      	bcc.n	800068e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069a:	4a0b      	ldr	r2, [pc, #44]	; (80006c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800069c:	4c0b      	ldr	r4, [pc, #44]	; (80006cc <LoopForever+0x16>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a0:	e001      	b.n	80006a6 <LoopFillZerobss>

080006a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a4:	3204      	adds	r2, #4

080006a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a8:	d3fb      	bcc.n	80006a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006aa:	f7ff ffe4 	bl	8000676 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80006ae:	f002 fa65 	bl	8002b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b2:	f7ff fdb3 	bl	800021c <main>

080006b6 <LoopForever>:

LoopForever:
    b LoopForever
 80006b6:	e7fe      	b.n	80006b6 <LoopForever>
  ldr   r0, =_estack
 80006b8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80006bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006c4:	08002c2c 	.word	0x08002c2c
  ldr r2, =_sbss
 80006c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006cc:	20000124 	.word	0x20000124

080006d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d0:	e7fe      	b.n	80006d0 <ADC1_COMP_IRQHandler>
	...

080006d4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <HAL_Init+0x24>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <HAL_Init+0x24>)
 80006de:	2110      	movs	r1, #16
 80006e0:	430a      	orrs	r2, r1
 80006e2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006e4:	2000      	movs	r0, #0
 80006e6:	f000 f809 	bl	80006fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006ea:	f7ff fef1 	bl	80004d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	0018      	movs	r0, r3
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	40022000 	.word	0x40022000

080006fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <HAL_InitTick+0x5c>)
 8000706:	681c      	ldr	r4, [r3, #0]
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <HAL_InitTick+0x60>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	0019      	movs	r1, r3
 800070e:	23fa      	movs	r3, #250	; 0xfa
 8000710:	0098      	lsls	r0, r3, #2
 8000712:	f7ff fcf7 	bl	8000104 <__udivsi3>
 8000716:	0003      	movs	r3, r0
 8000718:	0019      	movs	r1, r3
 800071a:	0020      	movs	r0, r4
 800071c:	f7ff fcf2 	bl	8000104 <__udivsi3>
 8000720:	0003      	movs	r3, r0
 8000722:	0018      	movs	r0, r3
 8000724:	f000 f8e1 	bl	80008ea <HAL_SYSTICK_Config>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800072c:	2301      	movs	r3, #1
 800072e:	e00f      	b.n	8000750 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2b03      	cmp	r3, #3
 8000734:	d80b      	bhi.n	800074e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	2301      	movs	r3, #1
 800073a:	425b      	negs	r3, r3
 800073c:	2200      	movs	r2, #0
 800073e:	0018      	movs	r0, r3
 8000740:	f000 f8be 	bl	80008c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_InitTick+0x64>)
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800074a:	2300      	movs	r3, #0
 800074c:	e000      	b.n	8000750 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800074e:	2301      	movs	r3, #1
}
 8000750:	0018      	movs	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	b003      	add	sp, #12
 8000756:	bd90      	pop	{r4, r7, pc}
 8000758:	20000000 	.word	0x20000000
 800075c:	20000008 	.word	0x20000008
 8000760:	20000004 	.word	0x20000004

08000764 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <HAL_IncTick+0x1c>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	001a      	movs	r2, r3
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <HAL_IncTick+0x20>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	18d2      	adds	r2, r2, r3
 8000774:	4b03      	ldr	r3, [pc, #12]	; (8000784 <HAL_IncTick+0x20>)
 8000776:	601a      	str	r2, [r3, #0]
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	20000008 	.word	0x20000008
 8000784:	20000120 	.word	0x20000120

08000788 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  return uwTick;
 800078c:	4b02      	ldr	r3, [pc, #8]	; (8000798 <HAL_GetTick+0x10>)
 800078e:	681b      	ldr	r3, [r3, #0]
}
 8000790:	0018      	movs	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	20000120 	.word	0x20000120

0800079c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	0002      	movs	r2, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007aa:	1dfb      	adds	r3, r7, #7
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b7f      	cmp	r3, #127	; 0x7f
 80007b0:	d828      	bhi.n	8000804 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b2:	4a2f      	ldr	r2, [pc, #188]	; (8000870 <__NVIC_SetPriority+0xd4>)
 80007b4:	1dfb      	adds	r3, r7, #7
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	b25b      	sxtb	r3, r3
 80007ba:	089b      	lsrs	r3, r3, #2
 80007bc:	33c0      	adds	r3, #192	; 0xc0
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	589b      	ldr	r3, [r3, r2]
 80007c2:	1dfa      	adds	r2, r7, #7
 80007c4:	7812      	ldrb	r2, [r2, #0]
 80007c6:	0011      	movs	r1, r2
 80007c8:	2203      	movs	r2, #3
 80007ca:	400a      	ands	r2, r1
 80007cc:	00d2      	lsls	r2, r2, #3
 80007ce:	21ff      	movs	r1, #255	; 0xff
 80007d0:	4091      	lsls	r1, r2
 80007d2:	000a      	movs	r2, r1
 80007d4:	43d2      	mvns	r2, r2
 80007d6:	401a      	ands	r2, r3
 80007d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	019b      	lsls	r3, r3, #6
 80007de:	22ff      	movs	r2, #255	; 0xff
 80007e0:	401a      	ands	r2, r3
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	0018      	movs	r0, r3
 80007e8:	2303      	movs	r3, #3
 80007ea:	4003      	ands	r3, r0
 80007ec:	00db      	lsls	r3, r3, #3
 80007ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007f0:	481f      	ldr	r0, [pc, #124]	; (8000870 <__NVIC_SetPriority+0xd4>)
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	b25b      	sxtb	r3, r3
 80007f8:	089b      	lsrs	r3, r3, #2
 80007fa:	430a      	orrs	r2, r1
 80007fc:	33c0      	adds	r3, #192	; 0xc0
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000802:	e031      	b.n	8000868 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000804:	4a1b      	ldr	r2, [pc, #108]	; (8000874 <__NVIC_SetPriority+0xd8>)
 8000806:	1dfb      	adds	r3, r7, #7
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	0019      	movs	r1, r3
 800080c:	230f      	movs	r3, #15
 800080e:	400b      	ands	r3, r1
 8000810:	3b08      	subs	r3, #8
 8000812:	089b      	lsrs	r3, r3, #2
 8000814:	3306      	adds	r3, #6
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	18d3      	adds	r3, r2, r3
 800081a:	3304      	adds	r3, #4
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	1dfa      	adds	r2, r7, #7
 8000820:	7812      	ldrb	r2, [r2, #0]
 8000822:	0011      	movs	r1, r2
 8000824:	2203      	movs	r2, #3
 8000826:	400a      	ands	r2, r1
 8000828:	00d2      	lsls	r2, r2, #3
 800082a:	21ff      	movs	r1, #255	; 0xff
 800082c:	4091      	lsls	r1, r2
 800082e:	000a      	movs	r2, r1
 8000830:	43d2      	mvns	r2, r2
 8000832:	401a      	ands	r2, r3
 8000834:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	019b      	lsls	r3, r3, #6
 800083a:	22ff      	movs	r2, #255	; 0xff
 800083c:	401a      	ands	r2, r3
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	0018      	movs	r0, r3
 8000844:	2303      	movs	r3, #3
 8000846:	4003      	ands	r3, r0
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800084c:	4809      	ldr	r0, [pc, #36]	; (8000874 <__NVIC_SetPriority+0xd8>)
 800084e:	1dfb      	adds	r3, r7, #7
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	001c      	movs	r4, r3
 8000854:	230f      	movs	r3, #15
 8000856:	4023      	ands	r3, r4
 8000858:	3b08      	subs	r3, #8
 800085a:	089b      	lsrs	r3, r3, #2
 800085c:	430a      	orrs	r2, r1
 800085e:	3306      	adds	r3, #6
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	18c3      	adds	r3, r0, r3
 8000864:	3304      	adds	r3, #4
 8000866:	601a      	str	r2, [r3, #0]
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b003      	add	sp, #12
 800086e:	bd90      	pop	{r4, r7, pc}
 8000870:	e000e100 	.word	0xe000e100
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	1e5a      	subs	r2, r3, #1
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	045b      	lsls	r3, r3, #17
 8000888:	429a      	cmp	r2, r3
 800088a:	d301      	bcc.n	8000890 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800088c:	2301      	movs	r3, #1
 800088e:	e010      	b.n	80008b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <SysTick_Config+0x44>)
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	3a01      	subs	r2, #1
 8000896:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000898:	2301      	movs	r3, #1
 800089a:	425b      	negs	r3, r3
 800089c:	2103      	movs	r1, #3
 800089e:	0018      	movs	r0, r3
 80008a0:	f7ff ff7c 	bl	800079c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <SysTick_Config+0x44>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008aa:	4b04      	ldr	r3, [pc, #16]	; (80008bc <SysTick_Config+0x44>)
 80008ac:	2207      	movs	r2, #7
 80008ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	0018      	movs	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b002      	add	sp, #8
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	e000e010 	.word	0xe000e010

080008c0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	210f      	movs	r1, #15
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	1c02      	adds	r2, r0, #0
 80008d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	b25b      	sxtb	r3, r3
 80008da:	0011      	movs	r1, r2
 80008dc:	0018      	movs	r0, r3
 80008de:	f7ff ff5d 	bl	800079c <__NVIC_SetPriority>
}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b004      	add	sp, #16
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	0018      	movs	r0, r3
 80008f6:	f7ff ffbf 	bl	8000878 <SysTick_Config>
 80008fa:	0003      	movs	r3, r0
}
 80008fc:	0018      	movs	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	b002      	add	sp, #8
 8000902:	bd80      	pop	{r7, pc}

08000904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000912:	e155      	b.n	8000bc0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2101      	movs	r1, #1
 800091a:	697a      	ldr	r2, [r7, #20]
 800091c:	4091      	lsls	r1, r2
 800091e:	000a      	movs	r2, r1
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d100      	bne.n	800092c <HAL_GPIO_Init+0x28>
 800092a:	e146      	b.n	8000bba <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	2203      	movs	r2, #3
 8000932:	4013      	ands	r3, r2
 8000934:	2b01      	cmp	r3, #1
 8000936:	d005      	beq.n	8000944 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	2203      	movs	r2, #3
 800093e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000940:	2b02      	cmp	r3, #2
 8000942:	d130      	bne.n	80009a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2203      	movs	r2, #3
 8000950:	409a      	lsls	r2, r3
 8000952:	0013      	movs	r3, r2
 8000954:	43da      	mvns	r2, r3
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	4013      	ands	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	68da      	ldr	r2, [r3, #12]
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	409a      	lsls	r2, r3
 8000966:	0013      	movs	r3, r2
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	4313      	orrs	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800097a:	2201      	movs	r2, #1
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	409a      	lsls	r2, r3
 8000980:	0013      	movs	r3, r2
 8000982:	43da      	mvns	r2, r3
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	4013      	ands	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	091b      	lsrs	r3, r3, #4
 8000990:	2201      	movs	r2, #1
 8000992:	401a      	ands	r2, r3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	409a      	lsls	r2, r3
 8000998:	0013      	movs	r3, r2
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	2203      	movs	r2, #3
 80009ac:	4013      	ands	r3, r2
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d017      	beq.n	80009e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	2203      	movs	r2, #3
 80009be:	409a      	lsls	r2, r3
 80009c0:	0013      	movs	r3, r2
 80009c2:	43da      	mvns	r2, r3
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	4013      	ands	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	409a      	lsls	r2, r3
 80009d4:	0013      	movs	r3, r2
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	2203      	movs	r2, #3
 80009e8:	4013      	ands	r3, r2
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d123      	bne.n	8000a36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	08da      	lsrs	r2, r3, #3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3208      	adds	r2, #8
 80009f6:	0092      	lsls	r2, r2, #2
 80009f8:	58d3      	ldr	r3, [r2, r3]
 80009fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	2207      	movs	r2, #7
 8000a00:	4013      	ands	r3, r2
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	220f      	movs	r2, #15
 8000a06:	409a      	lsls	r2, r3
 8000a08:	0013      	movs	r3, r2
 8000a0a:	43da      	mvns	r2, r3
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	691a      	ldr	r2, [r3, #16]
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	2107      	movs	r1, #7
 8000a1a:	400b      	ands	r3, r1
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	409a      	lsls	r2, r3
 8000a20:	0013      	movs	r3, r2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	08da      	lsrs	r2, r3, #3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3208      	adds	r2, #8
 8000a30:	0092      	lsls	r2, r2, #2
 8000a32:	6939      	ldr	r1, [r7, #16]
 8000a34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	2203      	movs	r2, #3
 8000a42:	409a      	lsls	r2, r3
 8000a44:	0013      	movs	r3, r2
 8000a46:	43da      	mvns	r2, r3
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	2203      	movs	r2, #3
 8000a54:	401a      	ands	r2, r3
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	409a      	lsls	r2, r3
 8000a5c:	0013      	movs	r3, r2
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	23c0      	movs	r3, #192	; 0xc0
 8000a70:	029b      	lsls	r3, r3, #10
 8000a72:	4013      	ands	r3, r2
 8000a74:	d100      	bne.n	8000a78 <HAL_GPIO_Init+0x174>
 8000a76:	e0a0      	b.n	8000bba <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a78:	4b57      	ldr	r3, [pc, #348]	; (8000bd8 <HAL_GPIO_Init+0x2d4>)
 8000a7a:	699a      	ldr	r2, [r3, #24]
 8000a7c:	4b56      	ldr	r3, [pc, #344]	; (8000bd8 <HAL_GPIO_Init+0x2d4>)
 8000a7e:	2101      	movs	r1, #1
 8000a80:	430a      	orrs	r2, r1
 8000a82:	619a      	str	r2, [r3, #24]
 8000a84:	4b54      	ldr	r3, [pc, #336]	; (8000bd8 <HAL_GPIO_Init+0x2d4>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a90:	4a52      	ldr	r2, [pc, #328]	; (8000bdc <HAL_GPIO_Init+0x2d8>)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	089b      	lsrs	r3, r3, #2
 8000a96:	3302      	adds	r3, #2
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	589b      	ldr	r3, [r3, r2]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	220f      	movs	r2, #15
 8000aa8:	409a      	lsls	r2, r3
 8000aaa:	0013      	movs	r3, r2
 8000aac:	43da      	mvns	r2, r3
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	2390      	movs	r3, #144	; 0x90
 8000ab8:	05db      	lsls	r3, r3, #23
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d019      	beq.n	8000af2 <HAL_GPIO_Init+0x1ee>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a47      	ldr	r2, [pc, #284]	; (8000be0 <HAL_GPIO_Init+0x2dc>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d013      	beq.n	8000aee <HAL_GPIO_Init+0x1ea>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a46      	ldr	r2, [pc, #280]	; (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d00d      	beq.n	8000aea <HAL_GPIO_Init+0x1e6>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a45      	ldr	r2, [pc, #276]	; (8000be8 <HAL_GPIO_Init+0x2e4>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d007      	beq.n	8000ae6 <HAL_GPIO_Init+0x1e2>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a44      	ldr	r2, [pc, #272]	; (8000bec <HAL_GPIO_Init+0x2e8>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d101      	bne.n	8000ae2 <HAL_GPIO_Init+0x1de>
 8000ade:	2304      	movs	r3, #4
 8000ae0:	e008      	b.n	8000af4 <HAL_GPIO_Init+0x1f0>
 8000ae2:	2305      	movs	r3, #5
 8000ae4:	e006      	b.n	8000af4 <HAL_GPIO_Init+0x1f0>
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	e004      	b.n	8000af4 <HAL_GPIO_Init+0x1f0>
 8000aea:	2302      	movs	r3, #2
 8000aec:	e002      	b.n	8000af4 <HAL_GPIO_Init+0x1f0>
 8000aee:	2301      	movs	r3, #1
 8000af0:	e000      	b.n	8000af4 <HAL_GPIO_Init+0x1f0>
 8000af2:	2300      	movs	r3, #0
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	2103      	movs	r1, #3
 8000af8:	400a      	ands	r2, r1
 8000afa:	0092      	lsls	r2, r2, #2
 8000afc:	4093      	lsls	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b04:	4935      	ldr	r1, [pc, #212]	; (8000bdc <HAL_GPIO_Init+0x2d8>)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	089b      	lsrs	r3, r3, #2
 8000b0a:	3302      	adds	r3, #2
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b12:	4b37      	ldr	r3, [pc, #220]	; (8000bf0 <HAL_GPIO_Init+0x2ec>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	43da      	mvns	r2, r3
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685a      	ldr	r2, [r3, #4]
 8000b26:	2380      	movs	r3, #128	; 0x80
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b36:	4b2e      	ldr	r3, [pc, #184]	; (8000bf0 <HAL_GPIO_Init+0x2ec>)
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000b3c:	4b2c      	ldr	r3, [pc, #176]	; (8000bf0 <HAL_GPIO_Init+0x2ec>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	43da      	mvns	r2, r3
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685a      	ldr	r2, [r3, #4]
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	029b      	lsls	r3, r3, #10
 8000b54:	4013      	ands	r3, r2
 8000b56:	d003      	beq.n	8000b60 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b60:	4b23      	ldr	r3, [pc, #140]	; (8000bf0 <HAL_GPIO_Init+0x2ec>)
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b66:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <HAL_GPIO_Init+0x2ec>)
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685a      	ldr	r2, [r3, #4]
 8000b7a:	2380      	movs	r3, #128	; 0x80
 8000b7c:	035b      	lsls	r3, r3, #13
 8000b7e:	4013      	ands	r3, r2
 8000b80:	d003      	beq.n	8000b8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <HAL_GPIO_Init+0x2ec>)
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <HAL_GPIO_Init+0x2ec>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	43da      	mvns	r2, r3
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	039b      	lsls	r3, r3, #14
 8000ba8:	4013      	ands	r3, r2
 8000baa:	d003      	beq.n	8000bb4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_GPIO_Init+0x2ec>)
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	40da      	lsrs	r2, r3
 8000bc8:	1e13      	subs	r3, r2, #0
 8000bca:	d000      	beq.n	8000bce <HAL_GPIO_Init+0x2ca>
 8000bcc:	e6a2      	b.n	8000914 <HAL_GPIO_Init+0x10>
  } 
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b006      	add	sp, #24
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010000 	.word	0x40010000
 8000be0:	48000400 	.word	0x48000400
 8000be4:	48000800 	.word	0x48000800
 8000be8:	48000c00 	.word	0x48000c00
 8000bec:	48001000 	.word	0x48001000
 8000bf0:	40010400 	.word	0x40010400

08000bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	0008      	movs	r0, r1
 8000bfe:	0011      	movs	r1, r2
 8000c00:	1cbb      	adds	r3, r7, #2
 8000c02:	1c02      	adds	r2, r0, #0
 8000c04:	801a      	strh	r2, [r3, #0]
 8000c06:	1c7b      	adds	r3, r7, #1
 8000c08:	1c0a      	adds	r2, r1, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c0c:	1c7b      	adds	r3, r7, #1
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d004      	beq.n	8000c1e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c14:	1cbb      	adds	r3, r7, #2
 8000c16:	881a      	ldrh	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c1c:	e003      	b.n	8000c26 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c1e:	1cbb      	adds	r3, r7, #2
 8000c20:	881a      	ldrh	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b002      	add	sp, #8
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d102      	bne.n	8000c44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	f000 fb76 	bl	8001330 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2201      	movs	r2, #1
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	d100      	bne.n	8000c50 <HAL_RCC_OscConfig+0x20>
 8000c4e:	e08e      	b.n	8000d6e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c50:	4bc5      	ldr	r3, [pc, #788]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	220c      	movs	r2, #12
 8000c56:	4013      	ands	r3, r2
 8000c58:	2b04      	cmp	r3, #4
 8000c5a:	d00e      	beq.n	8000c7a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c5c:	4bc2      	ldr	r3, [pc, #776]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	220c      	movs	r2, #12
 8000c62:	4013      	ands	r3, r2
 8000c64:	2b08      	cmp	r3, #8
 8000c66:	d117      	bne.n	8000c98 <HAL_RCC_OscConfig+0x68>
 8000c68:	4bbf      	ldr	r3, [pc, #764]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000c6a:	685a      	ldr	r2, [r3, #4]
 8000c6c:	23c0      	movs	r3, #192	; 0xc0
 8000c6e:	025b      	lsls	r3, r3, #9
 8000c70:	401a      	ands	r2, r3
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	025b      	lsls	r3, r3, #9
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d10e      	bne.n	8000c98 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c7a:	4bbb      	ldr	r3, [pc, #748]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	029b      	lsls	r3, r3, #10
 8000c82:	4013      	ands	r3, r2
 8000c84:	d100      	bne.n	8000c88 <HAL_RCC_OscConfig+0x58>
 8000c86:	e071      	b.n	8000d6c <HAL_RCC_OscConfig+0x13c>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d000      	beq.n	8000c92 <HAL_RCC_OscConfig+0x62>
 8000c90:	e06c      	b.n	8000d6c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	f000 fb4c 	bl	8001330 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d107      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x80>
 8000ca0:	4bb1      	ldr	r3, [pc, #708]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4bb0      	ldr	r3, [pc, #704]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	0249      	lsls	r1, r1, #9
 8000caa:	430a      	orrs	r2, r1
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	e02f      	b.n	8000d10 <HAL_RCC_OscConfig+0xe0>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d10c      	bne.n	8000cd2 <HAL_RCC_OscConfig+0xa2>
 8000cb8:	4bab      	ldr	r3, [pc, #684]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4baa      	ldr	r3, [pc, #680]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000cbe:	49ab      	ldr	r1, [pc, #684]	; (8000f6c <HAL_RCC_OscConfig+0x33c>)
 8000cc0:	400a      	ands	r2, r1
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	4ba8      	ldr	r3, [pc, #672]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4ba7      	ldr	r3, [pc, #668]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000cca:	49a9      	ldr	r1, [pc, #676]	; (8000f70 <HAL_RCC_OscConfig+0x340>)
 8000ccc:	400a      	ands	r2, r1
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	e01e      	b.n	8000d10 <HAL_RCC_OscConfig+0xe0>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b05      	cmp	r3, #5
 8000cd8:	d10e      	bne.n	8000cf8 <HAL_RCC_OscConfig+0xc8>
 8000cda:	4ba3      	ldr	r3, [pc, #652]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	4ba2      	ldr	r3, [pc, #648]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000ce0:	2180      	movs	r1, #128	; 0x80
 8000ce2:	02c9      	lsls	r1, r1, #11
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	4b9f      	ldr	r3, [pc, #636]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b9e      	ldr	r3, [pc, #632]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000cee:	2180      	movs	r1, #128	; 0x80
 8000cf0:	0249      	lsls	r1, r1, #9
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	e00b      	b.n	8000d10 <HAL_RCC_OscConfig+0xe0>
 8000cf8:	4b9b      	ldr	r3, [pc, #620]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b9a      	ldr	r3, [pc, #616]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000cfe:	499b      	ldr	r1, [pc, #620]	; (8000f6c <HAL_RCC_OscConfig+0x33c>)
 8000d00:	400a      	ands	r2, r1
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	4b98      	ldr	r3, [pc, #608]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b97      	ldr	r3, [pc, #604]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000d0a:	4999      	ldr	r1, [pc, #612]	; (8000f70 <HAL_RCC_OscConfig+0x340>)
 8000d0c:	400a      	ands	r2, r1
 8000d0e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d014      	beq.n	8000d42 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d18:	f7ff fd36 	bl	8000788 <HAL_GetTick>
 8000d1c:	0003      	movs	r3, r0
 8000d1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d20:	e008      	b.n	8000d34 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d22:	f7ff fd31 	bl	8000788 <HAL_GetTick>
 8000d26:	0002      	movs	r2, r0
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	2b64      	cmp	r3, #100	; 0x64
 8000d2e:	d901      	bls.n	8000d34 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000d30:	2303      	movs	r3, #3
 8000d32:	e2fd      	b.n	8001330 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d34:	4b8c      	ldr	r3, [pc, #560]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	029b      	lsls	r3, r3, #10
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	d0f0      	beq.n	8000d22 <HAL_RCC_OscConfig+0xf2>
 8000d40:	e015      	b.n	8000d6e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d42:	f7ff fd21 	bl	8000788 <HAL_GetTick>
 8000d46:	0003      	movs	r3, r0
 8000d48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4a:	e008      	b.n	8000d5e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d4c:	f7ff fd1c 	bl	8000788 <HAL_GetTick>
 8000d50:	0002      	movs	r2, r0
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b64      	cmp	r3, #100	; 0x64
 8000d58:	d901      	bls.n	8000d5e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e2e8      	b.n	8001330 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d5e:	4b82      	ldr	r3, [pc, #520]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	2380      	movs	r3, #128	; 0x80
 8000d64:	029b      	lsls	r3, r3, #10
 8000d66:	4013      	ands	r3, r2
 8000d68:	d1f0      	bne.n	8000d4c <HAL_RCC_OscConfig+0x11c>
 8000d6a:	e000      	b.n	8000d6e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d6c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2202      	movs	r2, #2
 8000d74:	4013      	ands	r3, r2
 8000d76:	d100      	bne.n	8000d7a <HAL_RCC_OscConfig+0x14a>
 8000d78:	e06c      	b.n	8000e54 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d7a:	4b7b      	ldr	r3, [pc, #492]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	220c      	movs	r2, #12
 8000d80:	4013      	ands	r3, r2
 8000d82:	d00e      	beq.n	8000da2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d84:	4b78      	ldr	r3, [pc, #480]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	220c      	movs	r2, #12
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	2b08      	cmp	r3, #8
 8000d8e:	d11f      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x1a0>
 8000d90:	4b75      	ldr	r3, [pc, #468]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000d92:	685a      	ldr	r2, [r3, #4]
 8000d94:	23c0      	movs	r3, #192	; 0xc0
 8000d96:	025b      	lsls	r3, r3, #9
 8000d98:	401a      	ands	r2, r3
 8000d9a:	2380      	movs	r3, #128	; 0x80
 8000d9c:	021b      	lsls	r3, r3, #8
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d116      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000da2:	4b71      	ldr	r3, [pc, #452]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2202      	movs	r2, #2
 8000da8:	4013      	ands	r3, r2
 8000daa:	d005      	beq.n	8000db8 <HAL_RCC_OscConfig+0x188>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d001      	beq.n	8000db8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e2bb      	b.n	8001330 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db8:	4b6b      	ldr	r3, [pc, #428]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	22f8      	movs	r2, #248	; 0xf8
 8000dbe:	4393      	bics	r3, r2
 8000dc0:	0019      	movs	r1, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	00da      	lsls	r2, r3, #3
 8000dc8:	4b67      	ldr	r3, [pc, #412]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dce:	e041      	b.n	8000e54 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d024      	beq.n	8000e22 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dd8:	4b63      	ldr	r3, [pc, #396]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b62      	ldr	r3, [pc, #392]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000dde:	2101      	movs	r1, #1
 8000de0:	430a      	orrs	r2, r1
 8000de2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de4:	f7ff fcd0 	bl	8000788 <HAL_GetTick>
 8000de8:	0003      	movs	r3, r0
 8000dea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dec:	e008      	b.n	8000e00 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dee:	f7ff fccb 	bl	8000788 <HAL_GetTick>
 8000df2:	0002      	movs	r2, r0
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d901      	bls.n	8000e00 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	e297      	b.n	8001330 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e00:	4b59      	ldr	r3, [pc, #356]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2202      	movs	r2, #2
 8000e06:	4013      	ands	r3, r2
 8000e08:	d0f1      	beq.n	8000dee <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e0a:	4b57      	ldr	r3, [pc, #348]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	22f8      	movs	r2, #248	; 0xf8
 8000e10:	4393      	bics	r3, r2
 8000e12:	0019      	movs	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	00da      	lsls	r2, r3, #3
 8000e1a:	4b53      	ldr	r3, [pc, #332]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	e018      	b.n	8000e54 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e22:	4b51      	ldr	r3, [pc, #324]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4b50      	ldr	r3, [pc, #320]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000e28:	2101      	movs	r1, #1
 8000e2a:	438a      	bics	r2, r1
 8000e2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2e:	f7ff fcab 	bl	8000788 <HAL_GetTick>
 8000e32:	0003      	movs	r3, r0
 8000e34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e36:	e008      	b.n	8000e4a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e38:	f7ff fca6 	bl	8000788 <HAL_GetTick>
 8000e3c:	0002      	movs	r2, r0
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e272      	b.n	8001330 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e4a:	4b47      	ldr	r3, [pc, #284]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2202      	movs	r2, #2
 8000e50:	4013      	ands	r3, r2
 8000e52:	d1f1      	bne.n	8000e38 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2208      	movs	r2, #8
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	d036      	beq.n	8000ecc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d019      	beq.n	8000e9a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e66:	4b40      	ldr	r3, [pc, #256]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e6a:	4b3f      	ldr	r3, [pc, #252]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e72:	f7ff fc89 	bl	8000788 <HAL_GetTick>
 8000e76:	0003      	movs	r3, r0
 8000e78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e7c:	f7ff fc84 	bl	8000788 <HAL_GetTick>
 8000e80:	0002      	movs	r2, r0
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e250      	b.n	8001330 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e8e:	4b36      	ldr	r3, [pc, #216]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e92:	2202      	movs	r2, #2
 8000e94:	4013      	ands	r3, r2
 8000e96:	d0f1      	beq.n	8000e7c <HAL_RCC_OscConfig+0x24c>
 8000e98:	e018      	b.n	8000ecc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e9a:	4b33      	ldr	r3, [pc, #204]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000e9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e9e:	4b32      	ldr	r3, [pc, #200]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	438a      	bics	r2, r1
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea6:	f7ff fc6f 	bl	8000788 <HAL_GetTick>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eae:	e008      	b.n	8000ec2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eb0:	f7ff fc6a 	bl	8000788 <HAL_GetTick>
 8000eb4:	0002      	movs	r2, r0
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e236      	b.n	8001330 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec2:	4b29      	ldr	r3, [pc, #164]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d1f1      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d100      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x2a8>
 8000ed6:	e0b5      	b.n	8001044 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ed8:	201f      	movs	r0, #31
 8000eda:	183b      	adds	r3, r7, r0
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ee0:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000ee2:	69da      	ldr	r2, [r3, #28]
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	055b      	lsls	r3, r3, #21
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d110      	bne.n	8000f0e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eec:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000eee:	69da      	ldr	r2, [r3, #28]
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000ef2:	2180      	movs	r1, #128	; 0x80
 8000ef4:	0549      	lsls	r1, r1, #21
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	61da      	str	r2, [r3, #28]
 8000efa:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000efc:	69da      	ldr	r2, [r3, #28]
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	055b      	lsls	r3, r3, #21
 8000f02:	4013      	ands	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f08:	183b      	adds	r3, r7, r0
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_RCC_OscConfig+0x344>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	4013      	ands	r3, r2
 8000f18:	d11a      	bne.n	8000f50 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <HAL_RCC_OscConfig+0x344>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_RCC_OscConfig+0x344>)
 8000f20:	2180      	movs	r1, #128	; 0x80
 8000f22:	0049      	lsls	r1, r1, #1
 8000f24:	430a      	orrs	r2, r1
 8000f26:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f28:	f7ff fc2e 	bl	8000788 <HAL_GetTick>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f30:	e008      	b.n	8000f44 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f32:	f7ff fc29 	bl	8000788 <HAL_GetTick>
 8000f36:	0002      	movs	r2, r0
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b64      	cmp	r3, #100	; 0x64
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e1f5      	b.n	8001330 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_RCC_OscConfig+0x344>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d0f0      	beq.n	8000f32 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d10f      	bne.n	8000f78 <HAL_RCC_OscConfig+0x348>
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000f5a:	6a1a      	ldr	r2, [r3, #32]
 8000f5c:	4b02      	ldr	r3, [pc, #8]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000f5e:	2101      	movs	r1, #1
 8000f60:	430a      	orrs	r2, r1
 8000f62:	621a      	str	r2, [r3, #32]
 8000f64:	e036      	b.n	8000fd4 <HAL_RCC_OscConfig+0x3a4>
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	fffeffff 	.word	0xfffeffff
 8000f70:	fffbffff 	.word	0xfffbffff
 8000f74:	40007000 	.word	0x40007000
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d10c      	bne.n	8000f9a <HAL_RCC_OscConfig+0x36a>
 8000f80:	4bca      	ldr	r3, [pc, #808]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8000f82:	6a1a      	ldr	r2, [r3, #32]
 8000f84:	4bc9      	ldr	r3, [pc, #804]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8000f86:	2101      	movs	r1, #1
 8000f88:	438a      	bics	r2, r1
 8000f8a:	621a      	str	r2, [r3, #32]
 8000f8c:	4bc7      	ldr	r3, [pc, #796]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8000f8e:	6a1a      	ldr	r2, [r3, #32]
 8000f90:	4bc6      	ldr	r3, [pc, #792]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8000f92:	2104      	movs	r1, #4
 8000f94:	438a      	bics	r2, r1
 8000f96:	621a      	str	r2, [r3, #32]
 8000f98:	e01c      	b.n	8000fd4 <HAL_RCC_OscConfig+0x3a4>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	2b05      	cmp	r3, #5
 8000fa0:	d10c      	bne.n	8000fbc <HAL_RCC_OscConfig+0x38c>
 8000fa2:	4bc2      	ldr	r3, [pc, #776]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8000fa4:	6a1a      	ldr	r2, [r3, #32]
 8000fa6:	4bc1      	ldr	r3, [pc, #772]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8000fa8:	2104      	movs	r1, #4
 8000faa:	430a      	orrs	r2, r1
 8000fac:	621a      	str	r2, [r3, #32]
 8000fae:	4bbf      	ldr	r3, [pc, #764]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8000fb0:	6a1a      	ldr	r2, [r3, #32]
 8000fb2:	4bbe      	ldr	r3, [pc, #760]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	621a      	str	r2, [r3, #32]
 8000fba:	e00b      	b.n	8000fd4 <HAL_RCC_OscConfig+0x3a4>
 8000fbc:	4bbb      	ldr	r3, [pc, #748]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8000fbe:	6a1a      	ldr	r2, [r3, #32]
 8000fc0:	4bba      	ldr	r3, [pc, #744]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	438a      	bics	r2, r1
 8000fc6:	621a      	str	r2, [r3, #32]
 8000fc8:	4bb8      	ldr	r3, [pc, #736]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	4bb7      	ldr	r3, [pc, #732]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8000fce:	2104      	movs	r1, #4
 8000fd0:	438a      	bics	r2, r1
 8000fd2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d014      	beq.n	8001006 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fdc:	f7ff fbd4 	bl	8000788 <HAL_GetTick>
 8000fe0:	0003      	movs	r3, r0
 8000fe2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe4:	e009      	b.n	8000ffa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fe6:	f7ff fbcf 	bl	8000788 <HAL_GetTick>
 8000fea:	0002      	movs	r2, r0
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	4aaf      	ldr	r2, [pc, #700]	; (80012b0 <HAL_RCC_OscConfig+0x680>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e19a      	b.n	8001330 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ffa:	4bac      	ldr	r3, [pc, #688]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8000ffc:	6a1b      	ldr	r3, [r3, #32]
 8000ffe:	2202      	movs	r2, #2
 8001000:	4013      	ands	r3, r2
 8001002:	d0f0      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x3b6>
 8001004:	e013      	b.n	800102e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001006:	f7ff fbbf 	bl	8000788 <HAL_GetTick>
 800100a:	0003      	movs	r3, r0
 800100c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800100e:	e009      	b.n	8001024 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001010:	f7ff fbba 	bl	8000788 <HAL_GetTick>
 8001014:	0002      	movs	r2, r0
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	4aa5      	ldr	r2, [pc, #660]	; (80012b0 <HAL_RCC_OscConfig+0x680>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e185      	b.n	8001330 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001024:	4ba1      	ldr	r3, [pc, #644]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	2202      	movs	r2, #2
 800102a:	4013      	ands	r3, r2
 800102c:	d1f0      	bne.n	8001010 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800102e:	231f      	movs	r3, #31
 8001030:	18fb      	adds	r3, r7, r3
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d105      	bne.n	8001044 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001038:	4b9c      	ldr	r3, [pc, #624]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 800103a:	69da      	ldr	r2, [r3, #28]
 800103c:	4b9b      	ldr	r3, [pc, #620]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 800103e:	499d      	ldr	r1, [pc, #628]	; (80012b4 <HAL_RCC_OscConfig+0x684>)
 8001040:	400a      	ands	r2, r1
 8001042:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2210      	movs	r2, #16
 800104a:	4013      	ands	r3, r2
 800104c:	d063      	beq.n	8001116 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d12a      	bne.n	80010ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001056:	4b95      	ldr	r3, [pc, #596]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8001058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800105a:	4b94      	ldr	r3, [pc, #592]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 800105c:	2104      	movs	r1, #4
 800105e:	430a      	orrs	r2, r1
 8001060:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001062:	4b92      	ldr	r3, [pc, #584]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8001064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001066:	4b91      	ldr	r3, [pc, #580]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8001068:	2101      	movs	r1, #1
 800106a:	430a      	orrs	r2, r1
 800106c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106e:	f7ff fb8b 	bl	8000788 <HAL_GetTick>
 8001072:	0003      	movs	r3, r0
 8001074:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001078:	f7ff fb86 	bl	8000788 <HAL_GetTick>
 800107c:	0002      	movs	r2, r0
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e152      	b.n	8001330 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800108a:	4b88      	ldr	r3, [pc, #544]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 800108c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800108e:	2202      	movs	r2, #2
 8001090:	4013      	ands	r3, r2
 8001092:	d0f1      	beq.n	8001078 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001094:	4b85      	ldr	r3, [pc, #532]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8001096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001098:	22f8      	movs	r2, #248	; 0xf8
 800109a:	4393      	bics	r3, r2
 800109c:	0019      	movs	r1, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	00da      	lsls	r2, r3, #3
 80010a4:	4b81      	ldr	r3, [pc, #516]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 80010a6:	430a      	orrs	r2, r1
 80010a8:	635a      	str	r2, [r3, #52]	; 0x34
 80010aa:	e034      	b.n	8001116 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	3305      	adds	r3, #5
 80010b2:	d111      	bne.n	80010d8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80010b4:	4b7d      	ldr	r3, [pc, #500]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 80010b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010b8:	4b7c      	ldr	r3, [pc, #496]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 80010ba:	2104      	movs	r1, #4
 80010bc:	438a      	bics	r2, r1
 80010be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010c0:	4b7a      	ldr	r3, [pc, #488]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 80010c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c4:	22f8      	movs	r2, #248	; 0xf8
 80010c6:	4393      	bics	r3, r2
 80010c8:	0019      	movs	r1, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	00da      	lsls	r2, r3, #3
 80010d0:	4b76      	ldr	r3, [pc, #472]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 80010d2:	430a      	orrs	r2, r1
 80010d4:	635a      	str	r2, [r3, #52]	; 0x34
 80010d6:	e01e      	b.n	8001116 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010d8:	4b74      	ldr	r3, [pc, #464]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 80010da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010dc:	4b73      	ldr	r3, [pc, #460]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 80010de:	2104      	movs	r1, #4
 80010e0:	430a      	orrs	r2, r1
 80010e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80010e4:	4b71      	ldr	r3, [pc, #452]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 80010e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010e8:	4b70      	ldr	r3, [pc, #448]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 80010ea:	2101      	movs	r1, #1
 80010ec:	438a      	bics	r2, r1
 80010ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f0:	f7ff fb4a 	bl	8000788 <HAL_GetTick>
 80010f4:	0003      	movs	r3, r0
 80010f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010fa:	f7ff fb45 	bl	8000788 <HAL_GetTick>
 80010fe:	0002      	movs	r2, r0
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e111      	b.n	8001330 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800110c:	4b67      	ldr	r3, [pc, #412]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 800110e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001110:	2202      	movs	r2, #2
 8001112:	4013      	ands	r3, r2
 8001114:	d1f1      	bne.n	80010fa <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2220      	movs	r2, #32
 800111c:	4013      	ands	r3, r2
 800111e:	d05c      	beq.n	80011da <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001120:	4b62      	ldr	r3, [pc, #392]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	220c      	movs	r2, #12
 8001126:	4013      	ands	r3, r2
 8001128:	2b0c      	cmp	r3, #12
 800112a:	d00e      	beq.n	800114a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800112c:	4b5f      	ldr	r3, [pc, #380]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	220c      	movs	r2, #12
 8001132:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001134:	2b08      	cmp	r3, #8
 8001136:	d114      	bne.n	8001162 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001138:	4b5c      	ldr	r3, [pc, #368]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	23c0      	movs	r3, #192	; 0xc0
 800113e:	025b      	lsls	r3, r3, #9
 8001140:	401a      	ands	r2, r3
 8001142:	23c0      	movs	r3, #192	; 0xc0
 8001144:	025b      	lsls	r3, r3, #9
 8001146:	429a      	cmp	r2, r3
 8001148:	d10b      	bne.n	8001162 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800114a:	4b58      	ldr	r3, [pc, #352]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 800114c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	025b      	lsls	r3, r3, #9
 8001152:	4013      	ands	r3, r2
 8001154:	d040      	beq.n	80011d8 <HAL_RCC_OscConfig+0x5a8>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d03c      	beq.n	80011d8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e0e6      	b.n	8001330 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d01b      	beq.n	80011a2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800116a:	4b50      	ldr	r3, [pc, #320]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 800116c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800116e:	4b4f      	ldr	r3, [pc, #316]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8001170:	2180      	movs	r1, #128	; 0x80
 8001172:	0249      	lsls	r1, r1, #9
 8001174:	430a      	orrs	r2, r1
 8001176:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fb06 	bl	8000788 <HAL_GetTick>
 800117c:	0003      	movs	r3, r0
 800117e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001182:	f7ff fb01 	bl	8000788 <HAL_GetTick>
 8001186:	0002      	movs	r2, r0
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e0cd      	b.n	8001330 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001194:	4b45      	ldr	r3, [pc, #276]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8001196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	025b      	lsls	r3, r3, #9
 800119c:	4013      	ands	r3, r2
 800119e:	d0f0      	beq.n	8001182 <HAL_RCC_OscConfig+0x552>
 80011a0:	e01b      	b.n	80011da <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80011a2:	4b42      	ldr	r3, [pc, #264]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 80011a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011a6:	4b41      	ldr	r3, [pc, #260]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 80011a8:	4943      	ldr	r1, [pc, #268]	; (80012b8 <HAL_RCC_OscConfig+0x688>)
 80011aa:	400a      	ands	r2, r1
 80011ac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ae:	f7ff faeb 	bl	8000788 <HAL_GetTick>
 80011b2:	0003      	movs	r3, r0
 80011b4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011b8:	f7ff fae6 	bl	8000788 <HAL_GetTick>
 80011bc:	0002      	movs	r2, r0
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e0b2      	b.n	8001330 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80011ca:	4b38      	ldr	r3, [pc, #224]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 80011cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	025b      	lsls	r3, r3, #9
 80011d2:	4013      	ands	r3, r2
 80011d4:	d1f0      	bne.n	80011b8 <HAL_RCC_OscConfig+0x588>
 80011d6:	e000      	b.n	80011da <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80011d8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d100      	bne.n	80011e4 <HAL_RCC_OscConfig+0x5b4>
 80011e2:	e0a4      	b.n	800132e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011e4:	4b31      	ldr	r3, [pc, #196]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	220c      	movs	r2, #12
 80011ea:	4013      	ands	r3, r2
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d100      	bne.n	80011f2 <HAL_RCC_OscConfig+0x5c2>
 80011f0:	e078      	b.n	80012e4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d14c      	bne.n	8001294 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011fa:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8001200:	492e      	ldr	r1, [pc, #184]	; (80012bc <HAL_RCC_OscConfig+0x68c>)
 8001202:	400a      	ands	r2, r1
 8001204:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001206:	f7ff fabf 	bl	8000788 <HAL_GetTick>
 800120a:	0003      	movs	r3, r0
 800120c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001210:	f7ff faba 	bl	8000788 <HAL_GetTick>
 8001214:	0002      	movs	r2, r0
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e086      	b.n	8001330 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001222:	4b22      	ldr	r3, [pc, #136]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	049b      	lsls	r3, r3, #18
 800122a:	4013      	ands	r3, r2
 800122c:	d1f0      	bne.n	8001210 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001232:	220f      	movs	r2, #15
 8001234:	4393      	bics	r3, r2
 8001236:	0019      	movs	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 800123e:	430a      	orrs	r2, r1
 8001240:	62da      	str	r2, [r3, #44]	; 0x2c
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	4a1e      	ldr	r2, [pc, #120]	; (80012c0 <HAL_RCC_OscConfig+0x690>)
 8001248:	4013      	ands	r3, r2
 800124a:	0019      	movs	r1, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001254:	431a      	orrs	r2, r3
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8001258:	430a      	orrs	r2, r1
 800125a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8001262:	2180      	movs	r1, #128	; 0x80
 8001264:	0449      	lsls	r1, r1, #17
 8001266:	430a      	orrs	r2, r1
 8001268:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126a:	f7ff fa8d 	bl	8000788 <HAL_GetTick>
 800126e:	0003      	movs	r3, r0
 8001270:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001274:	f7ff fa88 	bl	8000788 <HAL_GetTick>
 8001278:	0002      	movs	r2, r0
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e054      	b.n	8001330 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	049b      	lsls	r3, r3, #18
 800128e:	4013      	ands	r3, r2
 8001290:	d0f0      	beq.n	8001274 <HAL_RCC_OscConfig+0x644>
 8001292:	e04c      	b.n	800132e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <HAL_RCC_OscConfig+0x68c>)
 800129c:	400a      	ands	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a0:	f7ff fa72 	bl	8000788 <HAL_GetTick>
 80012a4:	0003      	movs	r3, r0
 80012a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a8:	e015      	b.n	80012d6 <HAL_RCC_OscConfig+0x6a6>
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	40021000 	.word	0x40021000
 80012b0:	00001388 	.word	0x00001388
 80012b4:	efffffff 	.word	0xefffffff
 80012b8:	fffeffff 	.word	0xfffeffff
 80012bc:	feffffff 	.word	0xfeffffff
 80012c0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012c4:	f7ff fa60 	bl	8000788 <HAL_GetTick>
 80012c8:	0002      	movs	r2, r0
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e02c      	b.n	8001330 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d6:	4b18      	ldr	r3, [pc, #96]	; (8001338 <HAL_RCC_OscConfig+0x708>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	049b      	lsls	r3, r3, #18
 80012de:	4013      	ands	r3, r2
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0x694>
 80012e2:	e024      	b.n	800132e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d101      	bne.n	80012f0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e01f      	b.n	8001330 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_RCC_OscConfig+0x708>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <HAL_RCC_OscConfig+0x708>)
 80012f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fa:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	23c0      	movs	r3, #192	; 0xc0
 8001300:	025b      	lsls	r3, r3, #9
 8001302:	401a      	ands	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001308:	429a      	cmp	r2, r3
 800130a:	d10e      	bne.n	800132a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	220f      	movs	r2, #15
 8001310:	401a      	ands	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001316:	429a      	cmp	r2, r3
 8001318:	d107      	bne.n	800132a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	23f0      	movs	r3, #240	; 0xf0
 800131e:	039b      	lsls	r3, r3, #14
 8001320:	401a      	ands	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001326:	429a      	cmp	r2, r3
 8001328:	d001      	beq.n	800132e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800132e:	2300      	movs	r3, #0
}
 8001330:	0018      	movs	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	b008      	add	sp, #32
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021000 	.word	0x40021000

0800133c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e0bf      	b.n	80014d0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001350:	4b61      	ldr	r3, [pc, #388]	; (80014d8 <HAL_RCC_ClockConfig+0x19c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2201      	movs	r2, #1
 8001356:	4013      	ands	r3, r2
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	d911      	bls.n	8001382 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135e:	4b5e      	ldr	r3, [pc, #376]	; (80014d8 <HAL_RCC_ClockConfig+0x19c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2201      	movs	r2, #1
 8001364:	4393      	bics	r3, r2
 8001366:	0019      	movs	r1, r3
 8001368:	4b5b      	ldr	r3, [pc, #364]	; (80014d8 <HAL_RCC_ClockConfig+0x19c>)
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001370:	4b59      	ldr	r3, [pc, #356]	; (80014d8 <HAL_RCC_ClockConfig+0x19c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2201      	movs	r2, #1
 8001376:	4013      	ands	r3, r2
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d001      	beq.n	8001382 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e0a6      	b.n	80014d0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2202      	movs	r2, #2
 8001388:	4013      	ands	r3, r2
 800138a:	d015      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2204      	movs	r2, #4
 8001392:	4013      	ands	r3, r2
 8001394:	d006      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001396:	4b51      	ldr	r3, [pc, #324]	; (80014dc <HAL_RCC_ClockConfig+0x1a0>)
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	4b50      	ldr	r3, [pc, #320]	; (80014dc <HAL_RCC_ClockConfig+0x1a0>)
 800139c:	21e0      	movs	r1, #224	; 0xe0
 800139e:	00c9      	lsls	r1, r1, #3
 80013a0:	430a      	orrs	r2, r1
 80013a2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a4:	4b4d      	ldr	r3, [pc, #308]	; (80014dc <HAL_RCC_ClockConfig+0x1a0>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	22f0      	movs	r2, #240	; 0xf0
 80013aa:	4393      	bics	r3, r2
 80013ac:	0019      	movs	r1, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	4b4a      	ldr	r3, [pc, #296]	; (80014dc <HAL_RCC_ClockConfig+0x1a0>)
 80013b4:	430a      	orrs	r2, r1
 80013b6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2201      	movs	r2, #1
 80013be:	4013      	ands	r3, r2
 80013c0:	d04c      	beq.n	800145c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d107      	bne.n	80013da <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ca:	4b44      	ldr	r3, [pc, #272]	; (80014dc <HAL_RCC_ClockConfig+0x1a0>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	029b      	lsls	r3, r3, #10
 80013d2:	4013      	ands	r3, r2
 80013d4:	d120      	bne.n	8001418 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e07a      	b.n	80014d0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d107      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013e2:	4b3e      	ldr	r3, [pc, #248]	; (80014dc <HAL_RCC_ClockConfig+0x1a0>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	049b      	lsls	r3, r3, #18
 80013ea:	4013      	ands	r3, r2
 80013ec:	d114      	bne.n	8001418 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e06e      	b.n	80014d0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d107      	bne.n	800140a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80013fa:	4b38      	ldr	r3, [pc, #224]	; (80014dc <HAL_RCC_ClockConfig+0x1a0>)
 80013fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013fe:	2380      	movs	r3, #128	; 0x80
 8001400:	025b      	lsls	r3, r3, #9
 8001402:	4013      	ands	r3, r2
 8001404:	d108      	bne.n	8001418 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e062      	b.n	80014d0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140a:	4b34      	ldr	r3, [pc, #208]	; (80014dc <HAL_RCC_ClockConfig+0x1a0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2202      	movs	r2, #2
 8001410:	4013      	ands	r3, r2
 8001412:	d101      	bne.n	8001418 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e05b      	b.n	80014d0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001418:	4b30      	ldr	r3, [pc, #192]	; (80014dc <HAL_RCC_ClockConfig+0x1a0>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2203      	movs	r2, #3
 800141e:	4393      	bics	r3, r2
 8001420:	0019      	movs	r1, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <HAL_RCC_ClockConfig+0x1a0>)
 8001428:	430a      	orrs	r2, r1
 800142a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800142c:	f7ff f9ac 	bl	8000788 <HAL_GetTick>
 8001430:	0003      	movs	r3, r0
 8001432:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001434:	e009      	b.n	800144a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001436:	f7ff f9a7 	bl	8000788 <HAL_GetTick>
 800143a:	0002      	movs	r2, r0
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	4a27      	ldr	r2, [pc, #156]	; (80014e0 <HAL_RCC_ClockConfig+0x1a4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d901      	bls.n	800144a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e042      	b.n	80014d0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <HAL_RCC_ClockConfig+0x1a0>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	220c      	movs	r2, #12
 8001450:	401a      	ands	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	429a      	cmp	r2, r3
 800145a:	d1ec      	bne.n	8001436 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800145c:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <HAL_RCC_ClockConfig+0x19c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2201      	movs	r2, #1
 8001462:	4013      	ands	r3, r2
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d211      	bcs.n	800148e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146a:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <HAL_RCC_ClockConfig+0x19c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2201      	movs	r2, #1
 8001470:	4393      	bics	r3, r2
 8001472:	0019      	movs	r1, r3
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <HAL_RCC_ClockConfig+0x19c>)
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <HAL_RCC_ClockConfig+0x19c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2201      	movs	r2, #1
 8001482:	4013      	ands	r3, r2
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d001      	beq.n	800148e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e020      	b.n	80014d0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2204      	movs	r2, #4
 8001494:	4013      	ands	r3, r2
 8001496:	d009      	beq.n	80014ac <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <HAL_RCC_ClockConfig+0x1a0>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4a11      	ldr	r2, [pc, #68]	; (80014e4 <HAL_RCC_ClockConfig+0x1a8>)
 800149e:	4013      	ands	r3, r2
 80014a0:	0019      	movs	r1, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <HAL_RCC_ClockConfig+0x1a0>)
 80014a8:	430a      	orrs	r2, r1
 80014aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80014ac:	f000 f820 	bl	80014f0 <HAL_RCC_GetSysClockFreq>
 80014b0:	0001      	movs	r1, r0
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <HAL_RCC_ClockConfig+0x1a0>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	091b      	lsrs	r3, r3, #4
 80014b8:	220f      	movs	r2, #15
 80014ba:	4013      	ands	r3, r2
 80014bc:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <HAL_RCC_ClockConfig+0x1ac>)
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	000a      	movs	r2, r1
 80014c2:	40da      	lsrs	r2, r3
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_RCC_ClockConfig+0x1b0>)
 80014c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80014c8:	2000      	movs	r0, #0
 80014ca:	f7ff f917 	bl	80006fc <HAL_InitTick>
  
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	0018      	movs	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b004      	add	sp, #16
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40022000 	.word	0x40022000
 80014dc:	40021000 	.word	0x40021000
 80014e0:	00001388 	.word	0x00001388
 80014e4:	fffff8ff 	.word	0xfffff8ff
 80014e8:	08002c0c 	.word	0x08002c0c
 80014ec:	20000000 	.word	0x20000000

080014f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b08f      	sub	sp, #60	; 0x3c
 80014f4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80014f6:	2314      	movs	r3, #20
 80014f8:	18fb      	adds	r3, r7, r3
 80014fa:	4a38      	ldr	r2, [pc, #224]	; (80015dc <HAL_RCC_GetSysClockFreq+0xec>)
 80014fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80014fe:	c313      	stmia	r3!, {r0, r1, r4}
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	4a36      	ldr	r2, [pc, #216]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001508:	ca13      	ldmia	r2!, {r0, r1, r4}
 800150a:	c313      	stmia	r3!, {r0, r1, r4}
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
 8001518:	2300      	movs	r3, #0
 800151a:	637b      	str	r3, [r7, #52]	; 0x34
 800151c:	2300      	movs	r3, #0
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001524:	4b2f      	ldr	r3, [pc, #188]	; (80015e4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800152a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152c:	220c      	movs	r2, #12
 800152e:	4013      	ands	r3, r2
 8001530:	2b0c      	cmp	r3, #12
 8001532:	d047      	beq.n	80015c4 <HAL_RCC_GetSysClockFreq+0xd4>
 8001534:	d849      	bhi.n	80015ca <HAL_RCC_GetSysClockFreq+0xda>
 8001536:	2b04      	cmp	r3, #4
 8001538:	d002      	beq.n	8001540 <HAL_RCC_GetSysClockFreq+0x50>
 800153a:	2b08      	cmp	r3, #8
 800153c:	d003      	beq.n	8001546 <HAL_RCC_GetSysClockFreq+0x56>
 800153e:	e044      	b.n	80015ca <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001540:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001544:	e044      	b.n	80015d0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001548:	0c9b      	lsrs	r3, r3, #18
 800154a:	220f      	movs	r2, #15
 800154c:	4013      	ands	r3, r2
 800154e:	2214      	movs	r2, #20
 8001550:	18ba      	adds	r2, r7, r2
 8001552:	5cd3      	ldrb	r3, [r2, r3]
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155a:	220f      	movs	r2, #15
 800155c:	4013      	ands	r3, r2
 800155e:	1d3a      	adds	r2, r7, #4
 8001560:	5cd3      	ldrb	r3, [r2, r3]
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001566:	23c0      	movs	r3, #192	; 0xc0
 8001568:	025b      	lsls	r3, r3, #9
 800156a:	401a      	ands	r2, r3
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	025b      	lsls	r3, r3, #9
 8001570:	429a      	cmp	r2, r3
 8001572:	d109      	bne.n	8001588 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001576:	481c      	ldr	r0, [pc, #112]	; (80015e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001578:	f7fe fdc4 	bl	8000104 <__udivsi3>
 800157c:	0003      	movs	r3, r0
 800157e:	001a      	movs	r2, r3
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	4353      	muls	r3, r2
 8001584:	637b      	str	r3, [r7, #52]	; 0x34
 8001586:	e01a      	b.n	80015be <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800158a:	23c0      	movs	r3, #192	; 0xc0
 800158c:	025b      	lsls	r3, r3, #9
 800158e:	401a      	ands	r2, r3
 8001590:	23c0      	movs	r3, #192	; 0xc0
 8001592:	025b      	lsls	r3, r3, #9
 8001594:	429a      	cmp	r2, r3
 8001596:	d109      	bne.n	80015ac <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800159a:	4814      	ldr	r0, [pc, #80]	; (80015ec <HAL_RCC_GetSysClockFreq+0xfc>)
 800159c:	f7fe fdb2 	bl	8000104 <__udivsi3>
 80015a0:	0003      	movs	r3, r0
 80015a2:	001a      	movs	r2, r3
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	4353      	muls	r3, r2
 80015a8:	637b      	str	r3, [r7, #52]	; 0x34
 80015aa:	e008      	b.n	80015be <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015ae:	480e      	ldr	r0, [pc, #56]	; (80015e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015b0:	f7fe fda8 	bl	8000104 <__udivsi3>
 80015b4:	0003      	movs	r3, r0
 80015b6:	001a      	movs	r2, r3
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	4353      	muls	r3, r2
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80015be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015c2:	e005      	b.n	80015d0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_RCC_GetSysClockFreq+0xfc>)
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015c8:	e002      	b.n	80015d0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015ce:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80015d2:	0018      	movs	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b00f      	add	sp, #60	; 0x3c
 80015d8:	bd90      	pop	{r4, r7, pc}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	08002bec 	.word	0x08002bec
 80015e0:	08002bfc 	.word	0x08002bfc
 80015e4:	40021000 	.word	0x40021000
 80015e8:	007a1200 	.word	0x007a1200
 80015ec:	02dc6c00 	.word	0x02dc6c00

080015f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015f4:	4b02      	ldr	r3, [pc, #8]	; (8001600 <HAL_RCC_GetHCLKFreq+0x10>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	0018      	movs	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	20000000 	.word	0x20000000

08001604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001608:	f7ff fff2 	bl	80015f0 <HAL_RCC_GetHCLKFreq>
 800160c:	0001      	movs	r1, r0
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	0a1b      	lsrs	r3, r3, #8
 8001614:	2207      	movs	r2, #7
 8001616:	4013      	ands	r3, r2
 8001618:	4a04      	ldr	r2, [pc, #16]	; (800162c <HAL_RCC_GetPCLK1Freq+0x28>)
 800161a:	5cd3      	ldrb	r3, [r2, r3]
 800161c:	40d9      	lsrs	r1, r3
 800161e:	000b      	movs	r3, r1
}    
 8001620:	0018      	movs	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	40021000 	.word	0x40021000
 800162c:	08002c1c 	.word	0x08002c1c

08001630 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	025b      	lsls	r3, r3, #9
 8001648:	4013      	ands	r3, r2
 800164a:	d100      	bne.n	800164e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800164c:	e08e      	b.n	800176c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800164e:	2017      	movs	r0, #23
 8001650:	183b      	adds	r3, r7, r0
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001656:	4b6e      	ldr	r3, [pc, #440]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001658:	69da      	ldr	r2, [r3, #28]
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	055b      	lsls	r3, r3, #21
 800165e:	4013      	ands	r3, r2
 8001660:	d110      	bne.n	8001684 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	4b6b      	ldr	r3, [pc, #428]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001664:	69da      	ldr	r2, [r3, #28]
 8001666:	4b6a      	ldr	r3, [pc, #424]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001668:	2180      	movs	r1, #128	; 0x80
 800166a:	0549      	lsls	r1, r1, #21
 800166c:	430a      	orrs	r2, r1
 800166e:	61da      	str	r2, [r3, #28]
 8001670:	4b67      	ldr	r3, [pc, #412]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001672:	69da      	ldr	r2, [r3, #28]
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	055b      	lsls	r3, r3, #21
 8001678:	4013      	ands	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800167e:	183b      	adds	r3, r7, r0
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001684:	4b63      	ldr	r3, [pc, #396]	; (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4013      	ands	r3, r2
 800168e:	d11a      	bne.n	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001690:	4b60      	ldr	r3, [pc, #384]	; (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b5f      	ldr	r3, [pc, #380]	; (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	0049      	lsls	r1, r1, #1
 800169a:	430a      	orrs	r2, r1
 800169c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169e:	f7ff f873 	bl	8000788 <HAL_GetTick>
 80016a2:	0003      	movs	r3, r0
 80016a4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a6:	e008      	b.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a8:	f7ff f86e 	bl	8000788 <HAL_GetTick>
 80016ac:	0002      	movs	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b64      	cmp	r3, #100	; 0x64
 80016b4:	d901      	bls.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e0a6      	b.n	8001808 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ba:	4b56      	ldr	r3, [pc, #344]	; (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4013      	ands	r3, r2
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016c6:	4b52      	ldr	r3, [pc, #328]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016c8:	6a1a      	ldr	r2, [r3, #32]
 80016ca:	23c0      	movs	r3, #192	; 0xc0
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4013      	ands	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d034      	beq.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	23c0      	movs	r3, #192	; 0xc0
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4013      	ands	r3, r2
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d02c      	beq.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016e8:	4b49      	ldr	r3, [pc, #292]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4a4a      	ldr	r2, [pc, #296]	; (8001818 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016f2:	4b47      	ldr	r3, [pc, #284]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016f4:	6a1a      	ldr	r2, [r3, #32]
 80016f6:	4b46      	ldr	r3, [pc, #280]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016f8:	2180      	movs	r1, #128	; 0x80
 80016fa:	0249      	lsls	r1, r1, #9
 80016fc:	430a      	orrs	r2, r1
 80016fe:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001700:	4b43      	ldr	r3, [pc, #268]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001702:	6a1a      	ldr	r2, [r3, #32]
 8001704:	4b42      	ldr	r3, [pc, #264]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001706:	4945      	ldr	r1, [pc, #276]	; (800181c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001708:	400a      	ands	r2, r1
 800170a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800170c:	4b40      	ldr	r3, [pc, #256]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2201      	movs	r2, #1
 8001716:	4013      	ands	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171a:	f7ff f835 	bl	8000788 <HAL_GetTick>
 800171e:	0003      	movs	r3, r0
 8001720:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001722:	e009      	b.n	8001738 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001724:	f7ff f830 	bl	8000788 <HAL_GetTick>
 8001728:	0002      	movs	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	4a3c      	ldr	r2, [pc, #240]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d901      	bls.n	8001738 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e067      	b.n	8001808 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001738:	4b35      	ldr	r3, [pc, #212]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	2202      	movs	r2, #2
 800173e:	4013      	ands	r3, r2
 8001740:	d0f0      	beq.n	8001724 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001742:	4b33      	ldr	r3, [pc, #204]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4a34      	ldr	r2, [pc, #208]	; (8001818 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001748:	4013      	ands	r3, r2
 800174a:	0019      	movs	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	4b2f      	ldr	r3, [pc, #188]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001752:	430a      	orrs	r2, r1
 8001754:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001756:	2317      	movs	r3, #23
 8001758:	18fb      	adds	r3, r7, r3
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d105      	bne.n	800176c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001760:	4b2b      	ldr	r3, [pc, #172]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001762:	69da      	ldr	r2, [r3, #28]
 8001764:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001766:	492f      	ldr	r1, [pc, #188]	; (8001824 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001768:	400a      	ands	r2, r1
 800176a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2201      	movs	r2, #1
 8001772:	4013      	ands	r3, r2
 8001774:	d009      	beq.n	800178a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001776:	4b26      	ldr	r3, [pc, #152]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	2203      	movs	r2, #3
 800177c:	4393      	bics	r3, r2
 800177e:	0019      	movs	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001786:	430a      	orrs	r2, r1
 8001788:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2202      	movs	r2, #2
 8001790:	4013      	ands	r3, r2
 8001792:	d009      	beq.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001794:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	4a23      	ldr	r2, [pc, #140]	; (8001828 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800179a:	4013      	ands	r3, r2
 800179c:	0019      	movs	r1, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017a4:	430a      	orrs	r2, r1
 80017a6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	02db      	lsls	r3, r3, #11
 80017b0:	4013      	ands	r3, r2
 80017b2:	d009      	beq.n	80017c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80017b4:	4b16      	ldr	r3, [pc, #88]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b8:	4a1c      	ldr	r2, [pc, #112]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	0019      	movs	r1, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691a      	ldr	r2, [r3, #16]
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017c4:	430a      	orrs	r2, r1
 80017c6:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2220      	movs	r2, #32
 80017ce:	4013      	ands	r3, r2
 80017d0:	d009      	beq.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	2210      	movs	r2, #16
 80017d8:	4393      	bics	r3, r2
 80017da:	0019      	movs	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	695a      	ldr	r2, [r3, #20]
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017e2:	430a      	orrs	r2, r1
 80017e4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4013      	ands	r3, r2
 80017f0:	d009      	beq.n	8001806 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	2240      	movs	r2, #64	; 0x40
 80017f8:	4393      	bics	r3, r2
 80017fa:	0019      	movs	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699a      	ldr	r2, [r3, #24]
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001802:	430a      	orrs	r2, r1
 8001804:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	0018      	movs	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	b006      	add	sp, #24
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000
 8001814:	40007000 	.word	0x40007000
 8001818:	fffffcff 	.word	0xfffffcff
 800181c:	fffeffff 	.word	0xfffeffff
 8001820:	00001388 	.word	0x00001388
 8001824:	efffffff 	.word	0xefffffff
 8001828:	fffcffff 	.word	0xfffcffff
 800182c:	fff3ffff 	.word	0xfff3ffff

08001830 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e0a8      	b.n	8001994 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	2382      	movs	r3, #130	; 0x82
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	429a      	cmp	r2, r3
 8001854:	d009      	beq.n	800186a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	61da      	str	r2, [r3, #28]
 800185c:	e005      	b.n	800186a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	225d      	movs	r2, #93	; 0x5d
 8001874:	5c9b      	ldrb	r3, [r3, r2]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d107      	bne.n	800188c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	225c      	movs	r2, #92	; 0x5c
 8001880:	2100      	movs	r1, #0
 8001882:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	0018      	movs	r0, r3
 8001888:	f7fe fe46 	bl	8000518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	225d      	movs	r2, #93	; 0x5d
 8001890:	2102      	movs	r1, #2
 8001892:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2140      	movs	r1, #64	; 0x40
 80018a0:	438a      	bics	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	23e0      	movs	r3, #224	; 0xe0
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d902      	bls.n	80018b6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	e002      	b.n	80018bc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	015b      	lsls	r3, r3, #5
 80018ba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	23f0      	movs	r3, #240	; 0xf0
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d008      	beq.n	80018da <HAL_SPI_Init+0xaa>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	23e0      	movs	r3, #224	; 0xe0
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d002      	beq.n	80018da <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	2382      	movs	r3, #130	; 0x82
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	401a      	ands	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6899      	ldr	r1, [r3, #8]
 80018e8:	2384      	movs	r3, #132	; 0x84
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	400b      	ands	r3, r1
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	2102      	movs	r1, #2
 80018f6:	400b      	ands	r3, r1
 80018f8:	431a      	orrs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	2101      	movs	r1, #1
 8001900:	400b      	ands	r3, r1
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6999      	ldr	r1, [r3, #24]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	400b      	ands	r3, r1
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	2138      	movs	r1, #56	; 0x38
 8001916:	400b      	ands	r3, r1
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	2180      	movs	r1, #128	; 0x80
 8001920:	400b      	ands	r3, r1
 8001922:	431a      	orrs	r2, r3
 8001924:	0011      	movs	r1, r2
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	019b      	lsls	r3, r3, #6
 800192e:	401a      	ands	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	0c1b      	lsrs	r3, r3, #16
 800193e:	2204      	movs	r2, #4
 8001940:	401a      	ands	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	2110      	movs	r1, #16
 8001948:	400b      	ands	r3, r1
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001950:	2108      	movs	r1, #8
 8001952:	400b      	ands	r3, r1
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68d9      	ldr	r1, [r3, #12]
 800195a:	23f0      	movs	r3, #240	; 0xf0
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	400b      	ands	r3, r1
 8001960:	431a      	orrs	r2, r3
 8001962:	0011      	movs	r1, r2
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	015b      	lsls	r3, r3, #5
 800196a:	401a      	ands	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	69da      	ldr	r2, [r3, #28]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4907      	ldr	r1, [pc, #28]	; (800199c <HAL_SPI_Init+0x16c>)
 8001980:	400a      	ands	r2, r1
 8001982:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	225d      	movs	r2, #93	; 0x5d
 800198e:	2101      	movs	r1, #1
 8001990:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	0018      	movs	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	b004      	add	sp, #16
 800199a:	bd80      	pop	{r7, pc}
 800199c:	fffff7ff 	.word	0xfffff7ff

080019a0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	1dbb      	adds	r3, r7, #6
 80019ae:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80019b0:	2317      	movs	r3, #23
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	2382      	movs	r3, #130	; 0x82
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d113      	bne.n	80019ec <HAL_SPI_Receive+0x4c>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10f      	bne.n	80019ec <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	225d      	movs	r2, #93	; 0x5d
 80019d0:	2104      	movs	r1, #4
 80019d2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80019d4:	1dbb      	adds	r3, r7, #6
 80019d6:	881c      	ldrh	r4, [r3, #0]
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	68b9      	ldr	r1, [r7, #8]
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	0023      	movs	r3, r4
 80019e4:	f000 f928 	bl	8001c38 <HAL_SPI_TransmitReceive>
 80019e8:	0003      	movs	r3, r0
 80019ea:	e11c      	b.n	8001c26 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	225c      	movs	r2, #92	; 0x5c
 80019f0:	5c9b      	ldrb	r3, [r3, r2]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_SPI_Receive+0x5a>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e115      	b.n	8001c26 <HAL_SPI_Receive+0x286>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	225c      	movs	r2, #92	; 0x5c
 80019fe:	2101      	movs	r1, #1
 8001a00:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a02:	f7fe fec1 	bl	8000788 <HAL_GetTick>
 8001a06:	0003      	movs	r3, r0
 8001a08:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	225d      	movs	r2, #93	; 0x5d
 8001a0e:	5c9b      	ldrb	r3, [r3, r2]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d004      	beq.n	8001a20 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8001a16:	2317      	movs	r3, #23
 8001a18:	18fb      	adds	r3, r7, r3
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	701a      	strb	r2, [r3, #0]
    goto error;
 8001a1e:	e0f7      	b.n	8001c10 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_SPI_Receive+0x8e>
 8001a26:	1dbb      	adds	r3, r7, #6
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d104      	bne.n	8001a38 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8001a2e:	2317      	movs	r3, #23
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
    goto error;
 8001a36:	e0eb      	b.n	8001c10 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	225d      	movs	r2, #93	; 0x5d
 8001a3c:	2104      	movs	r1, #4
 8001a3e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	1dba      	adds	r2, r7, #6
 8001a50:	2144      	movs	r1, #68	; 0x44
 8001a52:	8812      	ldrh	r2, [r2, #0]
 8001a54:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1dba      	adds	r2, r7, #6
 8001a5a:	2146      	movs	r1, #70	; 0x46
 8001a5c:	8812      	ldrh	r2, [r2, #0]
 8001a5e:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	23e0      	movs	r3, #224	; 0xe0
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d908      	bls.n	8001a9c <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4966      	ldr	r1, [pc, #408]	; (8001c30 <HAL_SPI_Receive+0x290>)
 8001a96:	400a      	ands	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	e008      	b.n	8001aae <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2180      	movs	r1, #128	; 0x80
 8001aa8:	0149      	lsls	r1, r1, #5
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d10f      	bne.n	8001ada <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2140      	movs	r1, #64	; 0x40
 8001ac6:	438a      	bics	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4957      	ldr	r1, [pc, #348]	; (8001c34 <HAL_SPI_Receive+0x294>)
 8001ad6:	400a      	ands	r2, r1
 8001ad8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2240      	movs	r2, #64	; 0x40
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b40      	cmp	r3, #64	; 0x40
 8001ae6:	d007      	beq.n	8001af8 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2140      	movs	r1, #64	; 0x40
 8001af4:	430a      	orrs	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	23e0      	movs	r3, #224	; 0xe0
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d900      	bls.n	8001b06 <HAL_SPI_Receive+0x166>
 8001b04:	e069      	b.n	8001bda <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001b06:	e031      	b.n	8001b6c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d117      	bne.n	8001b46 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	330c      	adds	r3, #12
 8001b1c:	001a      	movs	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	7812      	ldrb	r2, [r2, #0]
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2246      	movs	r2, #70	; 0x46
 8001b36:	5a9b      	ldrh	r3, [r3, r2]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b299      	uxth	r1, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2246      	movs	r2, #70	; 0x46
 8001b42:	5299      	strh	r1, [r3, r2]
 8001b44:	e012      	b.n	8001b6c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b46:	f7fe fe1f 	bl	8000788 <HAL_GetTick>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d802      	bhi.n	8001b5c <HAL_SPI_Receive+0x1bc>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	d102      	bne.n	8001b62 <HAL_SPI_Receive+0x1c2>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d104      	bne.n	8001b6c <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8001b62:	2317      	movs	r3, #23
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	2203      	movs	r2, #3
 8001b68:	701a      	strb	r2, [r3, #0]
          goto error;
 8001b6a:	e051      	b.n	8001c10 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2246      	movs	r2, #70	; 0x46
 8001b70:	5a9b      	ldrh	r3, [r3, r2]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1c7      	bne.n	8001b08 <HAL_SPI_Receive+0x168>
 8001b78:	e035      	b.n	8001be6 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2201      	movs	r2, #1
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d115      	bne.n	8001bb4 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	b292      	uxth	r2, r2
 8001b94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	1c9a      	adds	r2, r3, #2
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2246      	movs	r2, #70	; 0x46
 8001ba4:	5a9b      	ldrh	r3, [r3, r2]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b299      	uxth	r1, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2246      	movs	r2, #70	; 0x46
 8001bb0:	5299      	strh	r1, [r3, r2]
 8001bb2:	e012      	b.n	8001bda <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bb4:	f7fe fde8 	bl	8000788 <HAL_GetTick>
 8001bb8:	0002      	movs	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d802      	bhi.n	8001bca <HAL_SPI_Receive+0x22a>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	d102      	bne.n	8001bd0 <HAL_SPI_Receive+0x230>
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d104      	bne.n	8001bda <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8001bd0:	2317      	movs	r3, #23
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	701a      	strb	r2, [r3, #0]
          goto error;
 8001bd8:	e01a      	b.n	8001c10 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2246      	movs	r2, #70	; 0x46
 8001bde:	5a9b      	ldrh	r3, [r3, r2]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1c9      	bne.n	8001b7a <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	6839      	ldr	r1, [r7, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	0018      	movs	r0, r3
 8001bee:	f000 fb25 	bl	800223c <SPI_EndRxTransaction>
 8001bf2:	1e03      	subs	r3, r0, #0
 8001bf4:	d002      	beq.n	8001bfc <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d004      	beq.n	8001c0e <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8001c04:	2317      	movs	r3, #23
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
 8001c0c:	e000      	b.n	8001c10 <HAL_SPI_Receive+0x270>
  }

error :
 8001c0e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	225d      	movs	r2, #93	; 0x5d
 8001c14:	2101      	movs	r1, #1
 8001c16:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	225c      	movs	r2, #92	; 0x5c
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001c20:	2317      	movs	r3, #23
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	781b      	ldrb	r3, [r3, #0]
}
 8001c26:	0018      	movs	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b007      	add	sp, #28
 8001c2c:	bd90      	pop	{r4, r7, pc}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	ffffefff 	.word	0xffffefff
 8001c34:	ffffbfff 	.word	0xffffbfff

08001c38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	001a      	movs	r2, r3
 8001c46:	1cbb      	adds	r3, r7, #2
 8001c48:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001c4e:	2323      	movs	r3, #35	; 0x23
 8001c50:	18fb      	adds	r3, r7, r3
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	225c      	movs	r2, #92	; 0x5c
 8001c5a:	5c9b      	ldrb	r3, [r3, r2]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_SPI_TransmitReceive+0x2c>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e1b5      	b.n	8001fd0 <HAL_SPI_TransmitReceive+0x398>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	225c      	movs	r2, #92	; 0x5c
 8001c68:	2101      	movs	r1, #1
 8001c6a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c6c:	f7fe fd8c 	bl	8000788 <HAL_GetTick>
 8001c70:	0003      	movs	r3, r0
 8001c72:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001c74:	201b      	movs	r0, #27
 8001c76:	183b      	adds	r3, r7, r0
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	215d      	movs	r1, #93	; 0x5d
 8001c7c:	5c52      	ldrb	r2, [r2, r1]
 8001c7e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001c86:	2312      	movs	r3, #18
 8001c88:	18fb      	adds	r3, r7, r3
 8001c8a:	1cba      	adds	r2, r7, #2
 8001c8c:	8812      	ldrh	r2, [r2, #0]
 8001c8e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001c90:	183b      	adds	r3, r7, r0
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d011      	beq.n	8001cbc <HAL_SPI_TransmitReceive+0x84>
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	2382      	movs	r3, #130	; 0x82
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d107      	bne.n	8001cb2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d103      	bne.n	8001cb2 <HAL_SPI_TransmitReceive+0x7a>
 8001caa:	183b      	adds	r3, r7, r0
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d004      	beq.n	8001cbc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001cb2:	2323      	movs	r3, #35	; 0x23
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	701a      	strb	r2, [r3, #0]
    goto error;
 8001cba:	e17e      	b.n	8001fba <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d006      	beq.n	8001cd0 <HAL_SPI_TransmitReceive+0x98>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_SPI_TransmitReceive+0x98>
 8001cc8:	1cbb      	adds	r3, r7, #2
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d104      	bne.n	8001cda <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001cd0:	2323      	movs	r3, #35	; 0x23
 8001cd2:	18fb      	adds	r3, r7, r3
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	701a      	strb	r2, [r3, #0]
    goto error;
 8001cd8:	e16f      	b.n	8001fba <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	225d      	movs	r2, #93	; 0x5d
 8001cde:	5c9b      	ldrb	r3, [r3, r2]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d003      	beq.n	8001cee <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	225d      	movs	r2, #93	; 0x5d
 8001cea:	2105      	movs	r1, #5
 8001cec:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1cba      	adds	r2, r7, #2
 8001cfe:	2146      	movs	r1, #70	; 0x46
 8001d00:	8812      	ldrh	r2, [r2, #0]
 8001d02:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1cba      	adds	r2, r7, #2
 8001d08:	2144      	movs	r1, #68	; 0x44
 8001d0a:	8812      	ldrh	r2, [r2, #0]
 8001d0c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	1cba      	adds	r2, r7, #2
 8001d18:	8812      	ldrh	r2, [r2, #0]
 8001d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1cba      	adds	r2, r7, #2
 8001d20:	8812      	ldrh	r2, [r2, #0]
 8001d22:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	23e0      	movs	r3, #224	; 0xe0
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d908      	bls.n	8001d4e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	49a4      	ldr	r1, [pc, #656]	; (8001fd8 <HAL_SPI_TransmitReceive+0x3a0>)
 8001d48:	400a      	ands	r2, r1
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	e008      	b.n	8001d60 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2180      	movs	r1, #128	; 0x80
 8001d5a:	0149      	lsls	r1, r1, #5
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2240      	movs	r2, #64	; 0x40
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b40      	cmp	r3, #64	; 0x40
 8001d6c:	d007      	beq.n	8001d7e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2140      	movs	r1, #64	; 0x40
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	23e0      	movs	r3, #224	; 0xe0
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d800      	bhi.n	8001d8c <HAL_SPI_TransmitReceive+0x154>
 8001d8a:	e07f      	b.n	8001e8c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_SPI_TransmitReceive+0x168>
 8001d94:	2312      	movs	r3, #18
 8001d96:	18fb      	adds	r3, r7, r3
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d000      	beq.n	8001da0 <HAL_SPI_TransmitReceive+0x168>
 8001d9e:	e069      	b.n	8001e74 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da4:	881a      	ldrh	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db0:	1c9a      	adds	r2, r3, #2
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dc4:	e056      	b.n	8001e74 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d11b      	bne.n	8001e0c <HAL_SPI_TransmitReceive+0x1d4>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d016      	beq.n	8001e0c <HAL_SPI_TransmitReceive+0x1d4>
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d113      	bne.n	8001e0c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de8:	881a      	ldrh	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df4:	1c9a      	adds	r2, r3, #2
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2201      	movs	r2, #1
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d11c      	bne.n	8001e54 <HAL_SPI_TransmitReceive+0x21c>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2246      	movs	r2, #70	; 0x46
 8001e1e:	5a9b      	ldrh	r3, [r3, r2]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d016      	beq.n	8001e54 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	b292      	uxth	r2, r2
 8001e32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	1c9a      	adds	r2, r3, #2
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2246      	movs	r2, #70	; 0x46
 8001e42:	5a9b      	ldrh	r3, [r3, r2]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b299      	uxth	r1, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2246      	movs	r2, #70	; 0x46
 8001e4e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e50:	2301      	movs	r3, #1
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001e54:	f7fe fc98 	bl	8000788 <HAL_GetTick>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d807      	bhi.n	8001e74 <HAL_SPI_TransmitReceive+0x23c>
 8001e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e66:	3301      	adds	r3, #1
 8001e68:	d004      	beq.n	8001e74 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8001e6a:	2323      	movs	r3, #35	; 0x23
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	2203      	movs	r2, #3
 8001e70:	701a      	strb	r2, [r3, #0]
        goto error;
 8001e72:	e0a2      	b.n	8001fba <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1a3      	bne.n	8001dc6 <HAL_SPI_TransmitReceive+0x18e>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2246      	movs	r2, #70	; 0x46
 8001e82:	5a9b      	ldrh	r3, [r3, r2]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d19d      	bne.n	8001dc6 <HAL_SPI_TransmitReceive+0x18e>
 8001e8a:	e085      	b.n	8001f98 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_SPI_TransmitReceive+0x268>
 8001e94:	2312      	movs	r3, #18
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d000      	beq.n	8001ea0 <HAL_SPI_TransmitReceive+0x268>
 8001e9e:	e070      	b.n	8001f82 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	330c      	adds	r3, #12
 8001eaa:	7812      	ldrb	r2, [r2, #0]
 8001eac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ec6:	e05c      	b.n	8001f82 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d11c      	bne.n	8001f10 <HAL_SPI_TransmitReceive+0x2d8>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d017      	beq.n	8001f10 <HAL_SPI_TransmitReceive+0x2d8>
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d114      	bne.n	8001f10 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	330c      	adds	r3, #12
 8001ef0:	7812      	ldrb	r2, [r2, #0]
 8001ef2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2201      	movs	r2, #1
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d11e      	bne.n	8001f5c <HAL_SPI_TransmitReceive+0x324>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2246      	movs	r2, #70	; 0x46
 8001f22:	5a9b      	ldrh	r3, [r3, r2]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d018      	beq.n	8001f5c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	330c      	adds	r3, #12
 8001f30:	001a      	movs	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	7812      	ldrb	r2, [r2, #0]
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2246      	movs	r2, #70	; 0x46
 8001f4a:	5a9b      	ldrh	r3, [r3, r2]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b299      	uxth	r1, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2246      	movs	r2, #70	; 0x46
 8001f56:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f5c:	f7fe fc14 	bl	8000788 <HAL_GetTick>
 8001f60:	0002      	movs	r2, r0
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d802      	bhi.n	8001f72 <HAL_SPI_TransmitReceive+0x33a>
 8001f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6e:	3301      	adds	r3, #1
 8001f70:	d102      	bne.n	8001f78 <HAL_SPI_TransmitReceive+0x340>
 8001f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d104      	bne.n	8001f82 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8001f78:	2323      	movs	r3, #35	; 0x23
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	701a      	strb	r2, [r3, #0]
        goto error;
 8001f80:	e01b      	b.n	8001fba <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d19d      	bne.n	8001ec8 <HAL_SPI_TransmitReceive+0x290>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2246      	movs	r2, #70	; 0x46
 8001f90:	5a9b      	ldrh	r3, [r3, r2]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d197      	bne.n	8001ec8 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f000 f9aa 	bl	80022f8 <SPI_EndRxTxTransaction>
 8001fa4:	1e03      	subs	r3, r0, #0
 8001fa6:	d007      	beq.n	8001fb8 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8001fa8:	2323      	movs	r3, #35	; 0x23
 8001faa:	18fb      	adds	r3, r7, r3
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	661a      	str	r2, [r3, #96]	; 0x60
 8001fb6:	e000      	b.n	8001fba <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8001fb8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	225d      	movs	r2, #93	; 0x5d
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	225c      	movs	r2, #92	; 0x5c
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001fca:	2323      	movs	r3, #35	; 0x23
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	781b      	ldrb	r3, [r3, #0]
}
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b00a      	add	sp, #40	; 0x28
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	ffffefff 	.word	0xffffefff

08001fdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	1dfb      	adds	r3, r7, #7
 8001fea:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001fec:	f7fe fbcc 	bl	8000788 <HAL_GetTick>
 8001ff0:	0002      	movs	r2, r0
 8001ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	18d3      	adds	r3, r2, r3
 8001ffa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ffc:	f7fe fbc4 	bl	8000788 <HAL_GetTick>
 8002000:	0003      	movs	r3, r0
 8002002:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002004:	4b3a      	ldr	r3, [pc, #232]	; (80020f0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	015b      	lsls	r3, r3, #5
 800200a:	0d1b      	lsrs	r3, r3, #20
 800200c:	69fa      	ldr	r2, [r7, #28]
 800200e:	4353      	muls	r3, r2
 8002010:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002012:	e058      	b.n	80020c6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	3301      	adds	r3, #1
 8002018:	d055      	beq.n	80020c6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800201a:	f7fe fbb5 	bl	8000788 <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	429a      	cmp	r2, r3
 8002028:	d902      	bls.n	8002030 <SPI_WaitFlagStateUntilTimeout+0x54>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d142      	bne.n	80020b6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	21e0      	movs	r1, #224	; 0xe0
 800203c:	438a      	bics	r2, r1
 800203e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	2382      	movs	r3, #130	; 0x82
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	429a      	cmp	r2, r3
 800204a:	d113      	bne.n	8002074 <SPI_WaitFlagStateUntilTimeout+0x98>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	429a      	cmp	r2, r3
 8002056:	d005      	beq.n	8002064 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	429a      	cmp	r2, r3
 8002062:	d107      	bne.n	8002074 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2140      	movs	r1, #64	; 0x40
 8002070:	438a      	bics	r2, r1
 8002072:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	019b      	lsls	r3, r3, #6
 800207c:	429a      	cmp	r2, r3
 800207e:	d110      	bne.n	80020a2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	491a      	ldr	r1, [pc, #104]	; (80020f4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800208c:	400a      	ands	r2, r1
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2180      	movs	r1, #128	; 0x80
 800209c:	0189      	lsls	r1, r1, #6
 800209e:	430a      	orrs	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	225d      	movs	r2, #93	; 0x5d
 80020a6:	2101      	movs	r1, #1
 80020a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	225c      	movs	r2, #92	; 0x5c
 80020ae:	2100      	movs	r1, #0
 80020b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e017      	b.n	80020e6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	4013      	ands	r3, r2
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	425a      	negs	r2, r3
 80020d6:	4153      	adcs	r3, r2
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	001a      	movs	r2, r3
 80020dc:	1dfb      	adds	r3, r7, #7
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d197      	bne.n	8002014 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	0018      	movs	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	b008      	add	sp, #32
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	20000000 	.word	0x20000000
 80020f4:	ffffdfff 	.word	0xffffdfff

080020f8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002106:	2317      	movs	r3, #23
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800210e:	f7fe fb3b 	bl	8000788 <HAL_GetTick>
 8002112:	0002      	movs	r2, r0
 8002114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	18d3      	adds	r3, r2, r3
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800211e:	f7fe fb33 	bl	8000788 <HAL_GetTick>
 8002122:	0003      	movs	r3, r0
 8002124:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	330c      	adds	r3, #12
 800212c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800212e:	4b41      	ldr	r3, [pc, #260]	; (8002234 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	0013      	movs	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	189b      	adds	r3, r3, r2
 8002138:	00da      	lsls	r2, r3, #3
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	0d1b      	lsrs	r3, r3, #20
 800213e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002140:	4353      	muls	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002144:	e068      	b.n	8002218 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	23c0      	movs	r3, #192	; 0xc0
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	429a      	cmp	r2, r3
 800214e:	d10a      	bne.n	8002166 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d107      	bne.n	8002166 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	b2da      	uxtb	r2, r3
 800215c:	2117      	movs	r1, #23
 800215e:	187b      	adds	r3, r7, r1
 8002160:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002162:	187b      	adds	r3, r7, r1
 8002164:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	3301      	adds	r3, #1
 800216a:	d055      	beq.n	8002218 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800216c:	f7fe fb0c 	bl	8000788 <HAL_GetTick>
 8002170:	0002      	movs	r2, r0
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002178:	429a      	cmp	r2, r3
 800217a:	d902      	bls.n	8002182 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	2b00      	cmp	r3, #0
 8002180:	d142      	bne.n	8002208 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	21e0      	movs	r1, #224	; 0xe0
 800218e:	438a      	bics	r2, r1
 8002190:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	2382      	movs	r3, #130	; 0x82
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	429a      	cmp	r2, r3
 800219c:	d113      	bne.n	80021c6 <SPI_WaitFifoStateUntilTimeout+0xce>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	021b      	lsls	r3, r3, #8
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d005      	beq.n	80021b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d107      	bne.n	80021c6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2140      	movs	r1, #64	; 0x40
 80021c2:	438a      	bics	r2, r1
 80021c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	019b      	lsls	r3, r3, #6
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d110      	bne.n	80021f4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4916      	ldr	r1, [pc, #88]	; (8002238 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80021de:	400a      	ands	r2, r1
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2180      	movs	r1, #128	; 0x80
 80021ee:	0189      	lsls	r1, r1, #6
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	225d      	movs	r2, #93	; 0x5d
 80021f8:	2101      	movs	r1, #1
 80021fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	225c      	movs	r2, #92	; 0x5c
 8002200:	2100      	movs	r1, #0
 8002202:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e010      	b.n	800222a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	3b01      	subs	r3, #1
 8002216:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	4013      	ands	r3, r2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	429a      	cmp	r2, r3
 8002226:	d18e      	bne.n	8002146 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	0018      	movs	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	b00a      	add	sp, #40	; 0x28
 8002230:	bd80      	pop	{r7, pc}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	20000000 	.word	0x20000000
 8002238:	ffffdfff 	.word	0xffffdfff

0800223c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	2382      	movs	r3, #130	; 0x82
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	429a      	cmp	r2, r3
 8002252:	d113      	bne.n	800227c <SPI_EndRxTransaction+0x40>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	021b      	lsls	r3, r3, #8
 800225c:	429a      	cmp	r2, r3
 800225e:	d005      	beq.n	800226c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	429a      	cmp	r2, r3
 800226a:	d107      	bne.n	800227c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2140      	movs	r1, #64	; 0x40
 8002278:	438a      	bics	r2, r1
 800227a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	0013      	movs	r3, r2
 8002286:	2200      	movs	r2, #0
 8002288:	2180      	movs	r1, #128	; 0x80
 800228a:	f7ff fea7 	bl	8001fdc <SPI_WaitFlagStateUntilTimeout>
 800228e:	1e03      	subs	r3, r0, #0
 8002290:	d007      	beq.n	80022a2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002296:	2220      	movs	r2, #32
 8002298:	431a      	orrs	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e026      	b.n	80022f0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	2382      	movs	r3, #130	; 0x82
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d11f      	bne.n	80022ee <SPI_EndRxTransaction+0xb2>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d005      	beq.n	80022c6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d113      	bne.n	80022ee <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	23c0      	movs	r3, #192	; 0xc0
 80022ca:	00d9      	lsls	r1, r3, #3
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	0013      	movs	r3, r2
 80022d4:	2200      	movs	r2, #0
 80022d6:	f7ff ff0f 	bl	80020f8 <SPI_WaitFifoStateUntilTimeout>
 80022da:	1e03      	subs	r3, r0, #0
 80022dc:	d007      	beq.n	80022ee <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e2:	2220      	movs	r2, #32
 80022e4:	431a      	orrs	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e000      	b.n	80022f0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	0018      	movs	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b004      	add	sp, #16
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	23c0      	movs	r3, #192	; 0xc0
 8002308:	0159      	lsls	r1, r3, #5
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	0013      	movs	r3, r2
 8002312:	2200      	movs	r2, #0
 8002314:	f7ff fef0 	bl	80020f8 <SPI_WaitFifoStateUntilTimeout>
 8002318:	1e03      	subs	r3, r0, #0
 800231a:	d007      	beq.n	800232c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002320:	2220      	movs	r2, #32
 8002322:	431a      	orrs	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e027      	b.n	800237c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	0013      	movs	r3, r2
 8002336:	2200      	movs	r2, #0
 8002338:	2180      	movs	r1, #128	; 0x80
 800233a:	f7ff fe4f 	bl	8001fdc <SPI_WaitFlagStateUntilTimeout>
 800233e:	1e03      	subs	r3, r0, #0
 8002340:	d007      	beq.n	8002352 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002346:	2220      	movs	r2, #32
 8002348:	431a      	orrs	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e014      	b.n	800237c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	23c0      	movs	r3, #192	; 0xc0
 8002356:	00d9      	lsls	r1, r3, #3
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	0013      	movs	r3, r2
 8002360:	2200      	movs	r2, #0
 8002362:	f7ff fec9 	bl	80020f8 <SPI_WaitFifoStateUntilTimeout>
 8002366:	1e03      	subs	r3, r0, #0
 8002368:	d007      	beq.n	800237a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236e:	2220      	movs	r2, #32
 8002370:	431a      	orrs	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e000      	b.n	800237c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	0018      	movs	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	b004      	add	sp, #16
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e044      	b.n	8002420 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800239a:	2b00      	cmp	r3, #0
 800239c:	d107      	bne.n	80023ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2274      	movs	r2, #116	; 0x74
 80023a2:	2100      	movs	r1, #0
 80023a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	0018      	movs	r0, r3
 80023aa:	f7fe f901 	bl	80005b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2224      	movs	r2, #36	; 0x24
 80023b2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2101      	movs	r1, #1
 80023c0:	438a      	bics	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	0018      	movs	r0, r3
 80023c8:	f000 f830 	bl	800242c <UART_SetConfig>
 80023cc:	0003      	movs	r3, r0
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e024      	b.n	8002420 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 fa0b 	bl	80027fc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	490d      	ldr	r1, [pc, #52]	; (8002428 <HAL_UART_Init+0xa4>)
 80023f2:	400a      	ands	r2, r1
 80023f4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	212a      	movs	r1, #42	; 0x2a
 8002402:	438a      	bics	r2, r1
 8002404:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2101      	movs	r1, #1
 8002412:	430a      	orrs	r2, r1
 8002414:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	0018      	movs	r0, r3
 800241a:	f000 faa3 	bl	8002964 <UART_CheckIdleState>
 800241e:	0003      	movs	r3, r0
}
 8002420:	0018      	movs	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	b002      	add	sp, #8
 8002426:	bd80      	pop	{r7, pc}
 8002428:	ffffb7ff 	.word	0xffffb7ff

0800242c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002434:	231e      	movs	r3, #30
 8002436:	18fb      	adds	r3, r7, r3
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4abe      	ldr	r2, [pc, #760]	; (8002754 <UART_SetConfig+0x328>)
 800245c:	4013      	ands	r3, r2
 800245e:	0019      	movs	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	430a      	orrs	r2, r1
 8002468:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4ab9      	ldr	r2, [pc, #740]	; (8002758 <UART_SetConfig+0x32c>)
 8002472:	4013      	ands	r3, r2
 8002474:	0019      	movs	r1, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	4313      	orrs	r3, r2
 8002490:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4ab0      	ldr	r2, [pc, #704]	; (800275c <UART_SetConfig+0x330>)
 800249a:	4013      	ands	r3, r2
 800249c:	0019      	movs	r1, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4aac      	ldr	r2, [pc, #688]	; (8002760 <UART_SetConfig+0x334>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d127      	bne.n	8002502 <UART_SetConfig+0xd6>
 80024b2:	4bac      	ldr	r3, [pc, #688]	; (8002764 <UART_SetConfig+0x338>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	2203      	movs	r2, #3
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d00d      	beq.n	80024da <UART_SetConfig+0xae>
 80024be:	d81b      	bhi.n	80024f8 <UART_SetConfig+0xcc>
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d014      	beq.n	80024ee <UART_SetConfig+0xc2>
 80024c4:	d818      	bhi.n	80024f8 <UART_SetConfig+0xcc>
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <UART_SetConfig+0xa4>
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d00a      	beq.n	80024e4 <UART_SetConfig+0xb8>
 80024ce:	e013      	b.n	80024f8 <UART_SetConfig+0xcc>
 80024d0:	231f      	movs	r3, #31
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
 80024d8:	e0bd      	b.n	8002656 <UART_SetConfig+0x22a>
 80024da:	231f      	movs	r3, #31
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	2202      	movs	r2, #2
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	e0b8      	b.n	8002656 <UART_SetConfig+0x22a>
 80024e4:	231f      	movs	r3, #31
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	2204      	movs	r2, #4
 80024ea:	701a      	strb	r2, [r3, #0]
 80024ec:	e0b3      	b.n	8002656 <UART_SetConfig+0x22a>
 80024ee:	231f      	movs	r3, #31
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	2208      	movs	r2, #8
 80024f4:	701a      	strb	r2, [r3, #0]
 80024f6:	e0ae      	b.n	8002656 <UART_SetConfig+0x22a>
 80024f8:	231f      	movs	r3, #31
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	2210      	movs	r2, #16
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	e0a9      	b.n	8002656 <UART_SetConfig+0x22a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a98      	ldr	r2, [pc, #608]	; (8002768 <UART_SetConfig+0x33c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d134      	bne.n	8002576 <UART_SetConfig+0x14a>
 800250c:	4b95      	ldr	r3, [pc, #596]	; (8002764 <UART_SetConfig+0x338>)
 800250e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002510:	23c0      	movs	r3, #192	; 0xc0
 8002512:	029b      	lsls	r3, r3, #10
 8002514:	4013      	ands	r3, r2
 8002516:	22c0      	movs	r2, #192	; 0xc0
 8002518:	0292      	lsls	r2, r2, #10
 800251a:	4293      	cmp	r3, r2
 800251c:	d017      	beq.n	800254e <UART_SetConfig+0x122>
 800251e:	22c0      	movs	r2, #192	; 0xc0
 8002520:	0292      	lsls	r2, r2, #10
 8002522:	4293      	cmp	r3, r2
 8002524:	d822      	bhi.n	800256c <UART_SetConfig+0x140>
 8002526:	2280      	movs	r2, #128	; 0x80
 8002528:	0292      	lsls	r2, r2, #10
 800252a:	4293      	cmp	r3, r2
 800252c:	d019      	beq.n	8002562 <UART_SetConfig+0x136>
 800252e:	2280      	movs	r2, #128	; 0x80
 8002530:	0292      	lsls	r2, r2, #10
 8002532:	4293      	cmp	r3, r2
 8002534:	d81a      	bhi.n	800256c <UART_SetConfig+0x140>
 8002536:	2b00      	cmp	r3, #0
 8002538:	d004      	beq.n	8002544 <UART_SetConfig+0x118>
 800253a:	2280      	movs	r2, #128	; 0x80
 800253c:	0252      	lsls	r2, r2, #9
 800253e:	4293      	cmp	r3, r2
 8002540:	d00a      	beq.n	8002558 <UART_SetConfig+0x12c>
 8002542:	e013      	b.n	800256c <UART_SetConfig+0x140>
 8002544:	231f      	movs	r3, #31
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e083      	b.n	8002656 <UART_SetConfig+0x22a>
 800254e:	231f      	movs	r3, #31
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	2202      	movs	r2, #2
 8002554:	701a      	strb	r2, [r3, #0]
 8002556:	e07e      	b.n	8002656 <UART_SetConfig+0x22a>
 8002558:	231f      	movs	r3, #31
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	2204      	movs	r2, #4
 800255e:	701a      	strb	r2, [r3, #0]
 8002560:	e079      	b.n	8002656 <UART_SetConfig+0x22a>
 8002562:	231f      	movs	r3, #31
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	2208      	movs	r2, #8
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	e074      	b.n	8002656 <UART_SetConfig+0x22a>
 800256c:	231f      	movs	r3, #31
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	2210      	movs	r2, #16
 8002572:	701a      	strb	r2, [r3, #0]
 8002574:	e06f      	b.n	8002656 <UART_SetConfig+0x22a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a7c      	ldr	r2, [pc, #496]	; (800276c <UART_SetConfig+0x340>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d134      	bne.n	80025ea <UART_SetConfig+0x1be>
 8002580:	4b78      	ldr	r3, [pc, #480]	; (8002764 <UART_SetConfig+0x338>)
 8002582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002584:	23c0      	movs	r3, #192	; 0xc0
 8002586:	031b      	lsls	r3, r3, #12
 8002588:	4013      	ands	r3, r2
 800258a:	22c0      	movs	r2, #192	; 0xc0
 800258c:	0312      	lsls	r2, r2, #12
 800258e:	4293      	cmp	r3, r2
 8002590:	d017      	beq.n	80025c2 <UART_SetConfig+0x196>
 8002592:	22c0      	movs	r2, #192	; 0xc0
 8002594:	0312      	lsls	r2, r2, #12
 8002596:	4293      	cmp	r3, r2
 8002598:	d822      	bhi.n	80025e0 <UART_SetConfig+0x1b4>
 800259a:	2280      	movs	r2, #128	; 0x80
 800259c:	0312      	lsls	r2, r2, #12
 800259e:	4293      	cmp	r3, r2
 80025a0:	d019      	beq.n	80025d6 <UART_SetConfig+0x1aa>
 80025a2:	2280      	movs	r2, #128	; 0x80
 80025a4:	0312      	lsls	r2, r2, #12
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d81a      	bhi.n	80025e0 <UART_SetConfig+0x1b4>
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d004      	beq.n	80025b8 <UART_SetConfig+0x18c>
 80025ae:	2280      	movs	r2, #128	; 0x80
 80025b0:	02d2      	lsls	r2, r2, #11
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d00a      	beq.n	80025cc <UART_SetConfig+0x1a0>
 80025b6:	e013      	b.n	80025e0 <UART_SetConfig+0x1b4>
 80025b8:	231f      	movs	r3, #31
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
 80025c0:	e049      	b.n	8002656 <UART_SetConfig+0x22a>
 80025c2:	231f      	movs	r3, #31
 80025c4:	18fb      	adds	r3, r7, r3
 80025c6:	2202      	movs	r2, #2
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	e044      	b.n	8002656 <UART_SetConfig+0x22a>
 80025cc:	231f      	movs	r3, #31
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	2204      	movs	r2, #4
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	e03f      	b.n	8002656 <UART_SetConfig+0x22a>
 80025d6:	231f      	movs	r3, #31
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	2208      	movs	r2, #8
 80025dc:	701a      	strb	r2, [r3, #0]
 80025de:	e03a      	b.n	8002656 <UART_SetConfig+0x22a>
 80025e0:	231f      	movs	r3, #31
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	2210      	movs	r2, #16
 80025e6:	701a      	strb	r2, [r3, #0]
 80025e8:	e035      	b.n	8002656 <UART_SetConfig+0x22a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a60      	ldr	r2, [pc, #384]	; (8002770 <UART_SetConfig+0x344>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d104      	bne.n	80025fe <UART_SetConfig+0x1d2>
 80025f4:	231f      	movs	r3, #31
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	e02b      	b.n	8002656 <UART_SetConfig+0x22a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a5c      	ldr	r2, [pc, #368]	; (8002774 <UART_SetConfig+0x348>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d104      	bne.n	8002612 <UART_SetConfig+0x1e6>
 8002608:	231f      	movs	r3, #31
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e021      	b.n	8002656 <UART_SetConfig+0x22a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a58      	ldr	r2, [pc, #352]	; (8002778 <UART_SetConfig+0x34c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d104      	bne.n	8002626 <UART_SetConfig+0x1fa>
 800261c:	231f      	movs	r3, #31
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	e017      	b.n	8002656 <UART_SetConfig+0x22a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a54      	ldr	r2, [pc, #336]	; (800277c <UART_SetConfig+0x350>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d104      	bne.n	800263a <UART_SetConfig+0x20e>
 8002630:	231f      	movs	r3, #31
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
 8002638:	e00d      	b.n	8002656 <UART_SetConfig+0x22a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a50      	ldr	r2, [pc, #320]	; (8002780 <UART_SetConfig+0x354>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d104      	bne.n	800264e <UART_SetConfig+0x222>
 8002644:	231f      	movs	r3, #31
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e003      	b.n	8002656 <UART_SetConfig+0x22a>
 800264e:	231f      	movs	r3, #31
 8002650:	18fb      	adds	r3, r7, r3
 8002652:	2210      	movs	r2, #16
 8002654:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69da      	ldr	r2, [r3, #28]
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	429a      	cmp	r2, r3
 8002660:	d15d      	bne.n	800271e <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8002662:	231f      	movs	r3, #31
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b08      	cmp	r3, #8
 800266a:	d015      	beq.n	8002698 <UART_SetConfig+0x26c>
 800266c:	dc18      	bgt.n	80026a0 <UART_SetConfig+0x274>
 800266e:	2b04      	cmp	r3, #4
 8002670:	d00d      	beq.n	800268e <UART_SetConfig+0x262>
 8002672:	dc15      	bgt.n	80026a0 <UART_SetConfig+0x274>
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <UART_SetConfig+0x252>
 8002678:	2b02      	cmp	r3, #2
 800267a:	d005      	beq.n	8002688 <UART_SetConfig+0x25c>
 800267c:	e010      	b.n	80026a0 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800267e:	f7fe ffc1 	bl	8001604 <HAL_RCC_GetPCLK1Freq>
 8002682:	0003      	movs	r3, r0
 8002684:	61bb      	str	r3, [r7, #24]
        break;
 8002686:	e012      	b.n	80026ae <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002688:	4b3e      	ldr	r3, [pc, #248]	; (8002784 <UART_SetConfig+0x358>)
 800268a:	61bb      	str	r3, [r7, #24]
        break;
 800268c:	e00f      	b.n	80026ae <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800268e:	f7fe ff2f 	bl	80014f0 <HAL_RCC_GetSysClockFreq>
 8002692:	0003      	movs	r3, r0
 8002694:	61bb      	str	r3, [r7, #24]
        break;
 8002696:	e00a      	b.n	80026ae <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	61bb      	str	r3, [r7, #24]
        break;
 800269e:	e006      	b.n	80026ae <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026a4:	231e      	movs	r3, #30
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]
        break;
 80026ac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d100      	bne.n	80026b6 <UART_SetConfig+0x28a>
 80026b4:	e095      	b.n	80027e2 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	005a      	lsls	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	085b      	lsrs	r3, r3, #1
 80026c0:	18d2      	adds	r2, r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	0019      	movs	r1, r3
 80026c8:	0010      	movs	r0, r2
 80026ca:	f7fd fd1b 	bl	8000104 <__udivsi3>
 80026ce:	0003      	movs	r3, r0
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	2b0f      	cmp	r3, #15
 80026d8:	d91c      	bls.n	8002714 <UART_SetConfig+0x2e8>
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	025b      	lsls	r3, r3, #9
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d217      	bcs.n	8002714 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	200e      	movs	r0, #14
 80026ea:	183b      	adds	r3, r7, r0
 80026ec:	210f      	movs	r1, #15
 80026ee:	438a      	bics	r2, r1
 80026f0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	085b      	lsrs	r3, r3, #1
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2207      	movs	r2, #7
 80026fa:	4013      	ands	r3, r2
 80026fc:	b299      	uxth	r1, r3
 80026fe:	183b      	adds	r3, r7, r0
 8002700:	183a      	adds	r2, r7, r0
 8002702:	8812      	ldrh	r2, [r2, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	183a      	adds	r2, r7, r0
 800270e:	8812      	ldrh	r2, [r2, #0]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	e066      	b.n	80027e2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002714:	231e      	movs	r3, #30
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	e061      	b.n	80027e2 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800271e:	231f      	movs	r3, #31
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b08      	cmp	r3, #8
 8002726:	d02f      	beq.n	8002788 <UART_SetConfig+0x35c>
 8002728:	dc32      	bgt.n	8002790 <UART_SetConfig+0x364>
 800272a:	2b04      	cmp	r3, #4
 800272c:	d00d      	beq.n	800274a <UART_SetConfig+0x31e>
 800272e:	dc2f      	bgt.n	8002790 <UART_SetConfig+0x364>
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <UART_SetConfig+0x30e>
 8002734:	2b02      	cmp	r3, #2
 8002736:	d005      	beq.n	8002744 <UART_SetConfig+0x318>
 8002738:	e02a      	b.n	8002790 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800273a:	f7fe ff63 	bl	8001604 <HAL_RCC_GetPCLK1Freq>
 800273e:	0003      	movs	r3, r0
 8002740:	61bb      	str	r3, [r7, #24]
        break;
 8002742:	e02c      	b.n	800279e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <UART_SetConfig+0x358>)
 8002746:	61bb      	str	r3, [r7, #24]
        break;
 8002748:	e029      	b.n	800279e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800274a:	f7fe fed1 	bl	80014f0 <HAL_RCC_GetSysClockFreq>
 800274e:	0003      	movs	r3, r0
 8002750:	61bb      	str	r3, [r7, #24]
        break;
 8002752:	e024      	b.n	800279e <UART_SetConfig+0x372>
 8002754:	efff69f3 	.word	0xefff69f3
 8002758:	ffffcfff 	.word	0xffffcfff
 800275c:	fffff4ff 	.word	0xfffff4ff
 8002760:	40013800 	.word	0x40013800
 8002764:	40021000 	.word	0x40021000
 8002768:	40004400 	.word	0x40004400
 800276c:	40004800 	.word	0x40004800
 8002770:	40004c00 	.word	0x40004c00
 8002774:	40005000 	.word	0x40005000
 8002778:	40011400 	.word	0x40011400
 800277c:	40011800 	.word	0x40011800
 8002780:	40011c00 	.word	0x40011c00
 8002784:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	61bb      	str	r3, [r7, #24]
        break;
 800278e:	e006      	b.n	800279e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002794:	231e      	movs	r3, #30
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	2201      	movs	r2, #1
 800279a:	701a      	strb	r2, [r3, #0]
        break;
 800279c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d01e      	beq.n	80027e2 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	085a      	lsrs	r2, r3, #1
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	18d2      	adds	r2, r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	0019      	movs	r1, r3
 80027b4:	0010      	movs	r0, r2
 80027b6:	f7fd fca5 	bl	8000104 <__udivsi3>
 80027ba:	0003      	movs	r3, r0
 80027bc:	b29b      	uxth	r3, r3
 80027be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	2b0f      	cmp	r3, #15
 80027c4:	d909      	bls.n	80027da <UART_SetConfig+0x3ae>
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	2380      	movs	r3, #128	; 0x80
 80027ca:	025b      	lsls	r3, r3, #9
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d204      	bcs.n	80027da <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	60da      	str	r2, [r3, #12]
 80027d8:	e003      	b.n	80027e2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80027da:	231e      	movs	r3, #30
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	2201      	movs	r2, #1
 80027e0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80027ee:	231e      	movs	r3, #30
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	781b      	ldrb	r3, [r3, #0]
}
 80027f4:	0018      	movs	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b008      	add	sp, #32
 80027fa:	bd80      	pop	{r7, pc}

080027fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	2201      	movs	r2, #1
 800280a:	4013      	ands	r3, r2
 800280c:	d00b      	beq.n	8002826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4a4a      	ldr	r2, [pc, #296]	; (8002940 <UART_AdvFeatureConfig+0x144>)
 8002816:	4013      	ands	r3, r2
 8002818:	0019      	movs	r1, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	2202      	movs	r2, #2
 800282c:	4013      	ands	r3, r2
 800282e:	d00b      	beq.n	8002848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4a43      	ldr	r2, [pc, #268]	; (8002944 <UART_AdvFeatureConfig+0x148>)
 8002838:	4013      	ands	r3, r2
 800283a:	0019      	movs	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	2204      	movs	r2, #4
 800284e:	4013      	ands	r3, r2
 8002850:	d00b      	beq.n	800286a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4a3b      	ldr	r2, [pc, #236]	; (8002948 <UART_AdvFeatureConfig+0x14c>)
 800285a:	4013      	ands	r3, r2
 800285c:	0019      	movs	r1, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2208      	movs	r2, #8
 8002870:	4013      	ands	r3, r2
 8002872:	d00b      	beq.n	800288c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4a34      	ldr	r2, [pc, #208]	; (800294c <UART_AdvFeatureConfig+0x150>)
 800287c:	4013      	ands	r3, r2
 800287e:	0019      	movs	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	2210      	movs	r2, #16
 8002892:	4013      	ands	r3, r2
 8002894:	d00b      	beq.n	80028ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	4a2c      	ldr	r2, [pc, #176]	; (8002950 <UART_AdvFeatureConfig+0x154>)
 800289e:	4013      	ands	r3, r2
 80028a0:	0019      	movs	r1, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	2220      	movs	r2, #32
 80028b4:	4013      	ands	r3, r2
 80028b6:	d00b      	beq.n	80028d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	4a25      	ldr	r2, [pc, #148]	; (8002954 <UART_AdvFeatureConfig+0x158>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	2240      	movs	r2, #64	; 0x40
 80028d6:	4013      	ands	r3, r2
 80028d8:	d01d      	beq.n	8002916 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4a1d      	ldr	r2, [pc, #116]	; (8002958 <UART_AdvFeatureConfig+0x15c>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	0019      	movs	r1, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	035b      	lsls	r3, r3, #13
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d10b      	bne.n	8002916 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	4a15      	ldr	r2, [pc, #84]	; (800295c <UART_AdvFeatureConfig+0x160>)
 8002906:	4013      	ands	r3, r2
 8002908:	0019      	movs	r1, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	4013      	ands	r3, r2
 800291e:	d00b      	beq.n	8002938 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <UART_AdvFeatureConfig+0x164>)
 8002928:	4013      	ands	r3, r2
 800292a:	0019      	movs	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	605a      	str	r2, [r3, #4]
  }
}
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b002      	add	sp, #8
 800293e:	bd80      	pop	{r7, pc}
 8002940:	fffdffff 	.word	0xfffdffff
 8002944:	fffeffff 	.word	0xfffeffff
 8002948:	fffbffff 	.word	0xfffbffff
 800294c:	ffff7fff 	.word	0xffff7fff
 8002950:	ffffefff 	.word	0xffffefff
 8002954:	ffffdfff 	.word	0xffffdfff
 8002958:	ffefffff 	.word	0xffefffff
 800295c:	ff9fffff 	.word	0xff9fffff
 8002960:	fff7ffff 	.word	0xfff7ffff

08002964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af02      	add	r7, sp, #8
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2280      	movs	r2, #128	; 0x80
 8002970:	2100      	movs	r1, #0
 8002972:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002974:	f7fd ff08 	bl	8000788 <HAL_GetTick>
 8002978:	0003      	movs	r3, r0
 800297a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2208      	movs	r2, #8
 8002984:	4013      	ands	r3, r2
 8002986:	2b08      	cmp	r3, #8
 8002988:	d10c      	bne.n	80029a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2280      	movs	r2, #128	; 0x80
 800298e:	0391      	lsls	r1, r2, #14
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	4a17      	ldr	r2, [pc, #92]	; (80029f0 <UART_CheckIdleState+0x8c>)
 8002994:	9200      	str	r2, [sp, #0]
 8002996:	2200      	movs	r2, #0
 8002998:	f000 f82c 	bl	80029f4 <UART_WaitOnFlagUntilTimeout>
 800299c:	1e03      	subs	r3, r0, #0
 800299e:	d001      	beq.n	80029a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e021      	b.n	80029e8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2204      	movs	r2, #4
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d10c      	bne.n	80029cc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2280      	movs	r2, #128	; 0x80
 80029b6:	03d1      	lsls	r1, r2, #15
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <UART_CheckIdleState+0x8c>)
 80029bc:	9200      	str	r2, [sp, #0]
 80029be:	2200      	movs	r2, #0
 80029c0:	f000 f818 	bl	80029f4 <UART_WaitOnFlagUntilTimeout>
 80029c4:	1e03      	subs	r3, r0, #0
 80029c6:	d001      	beq.n	80029cc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e00d      	b.n	80029e8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2220      	movs	r2, #32
 80029d0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2220      	movs	r2, #32
 80029d6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2274      	movs	r2, #116	; 0x74
 80029e2:	2100      	movs	r1, #0
 80029e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	0018      	movs	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b004      	add	sp, #16
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	01ffffff 	.word	0x01ffffff

080029f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b094      	sub	sp, #80	; 0x50
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	1dfb      	adds	r3, r7, #7
 8002a02:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a04:	e0a3      	b.n	8002b4e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a08:	3301      	adds	r3, #1
 8002a0a:	d100      	bne.n	8002a0e <UART_WaitOnFlagUntilTimeout+0x1a>
 8002a0c:	e09f      	b.n	8002b4e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a0e:	f7fd febb 	bl	8000788 <HAL_GetTick>
 8002a12:	0002      	movs	r2, r0
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d302      	bcc.n	8002a24 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d13d      	bne.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a24:	f3ef 8310 	mrs	r3, PRIMASK
 8002a28:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a2c:	647b      	str	r3, [r7, #68]	; 0x44
 8002a2e:	2301      	movs	r3, #1
 8002a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a34:	f383 8810 	msr	PRIMASK, r3
}
 8002a38:	46c0      	nop			; (mov r8, r8)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	494c      	ldr	r1, [pc, #304]	; (8002b78 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002a46:	400a      	ands	r2, r1
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a4c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a50:	f383 8810 	msr	PRIMASK, r3
}
 8002a54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a56:	f3ef 8310 	mrs	r3, PRIMASK
 8002a5a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a5e:	643b      	str	r3, [r7, #64]	; 0x40
 8002a60:	2301      	movs	r3, #1
 8002a62:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a66:	f383 8810 	msr	PRIMASK, r3
}
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2101      	movs	r1, #1
 8002a78:	438a      	bics	r2, r1
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a82:	f383 8810 	msr	PRIMASK, r3
}
 8002a86:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2220      	movs	r2, #32
 8002a92:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2274      	movs	r2, #116	; 0x74
 8002a98:	2100      	movs	r1, #0
 8002a9a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e067      	b.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2204      	movs	r2, #4
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d050      	beq.n	8002b4e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d146      	bne.n	8002b4e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2280      	movs	r2, #128	; 0x80
 8002ac6:	0112      	lsls	r2, r2, #4
 8002ac8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aca:	f3ef 8310 	mrs	r3, PRIMASK
 8002ace:	613b      	str	r3, [r7, #16]
  return(result);
 8002ad0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f383 8810 	msr	PRIMASK, r3
}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4923      	ldr	r1, [pc, #140]	; (8002b78 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002aec:	400a      	ands	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	f383 8810 	msr	PRIMASK, r3
}
 8002afa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002afc:	f3ef 8310 	mrs	r3, PRIMASK
 8002b00:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b02:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b04:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b06:	2301      	movs	r3, #1
 8002b08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	f383 8810 	msr	PRIMASK, r3
}
 8002b10:	46c0      	nop			; (mov r8, r8)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	438a      	bics	r2, r1
 8002b20:	609a      	str	r2, [r3, #8]
 8002b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	f383 8810 	msr	PRIMASK, r3
}
 8002b2c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2220      	movs	r2, #32
 8002b32:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2220      	movs	r2, #32
 8002b38:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2280      	movs	r2, #128	; 0x80
 8002b3e:	2120      	movs	r1, #32
 8002b40:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2274      	movs	r2, #116	; 0x74
 8002b46:	2100      	movs	r1, #0
 8002b48:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e010      	b.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	4013      	ands	r3, r2
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	425a      	negs	r2, r3
 8002b5e:	4153      	adcs	r3, r2
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	001a      	movs	r2, r3
 8002b64:	1dfb      	adds	r3, r7, #7
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d100      	bne.n	8002b6e <UART_WaitOnFlagUntilTimeout+0x17a>
 8002b6c:	e74b      	b.n	8002a06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	0018      	movs	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b014      	add	sp, #80	; 0x50
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	fffffe5f 	.word	0xfffffe5f

08002b7c <__libc_init_array>:
 8002b7c:	b570      	push	{r4, r5, r6, lr}
 8002b7e:	2600      	movs	r6, #0
 8002b80:	4d0c      	ldr	r5, [pc, #48]	; (8002bb4 <__libc_init_array+0x38>)
 8002b82:	4c0d      	ldr	r4, [pc, #52]	; (8002bb8 <__libc_init_array+0x3c>)
 8002b84:	1b64      	subs	r4, r4, r5
 8002b86:	10a4      	asrs	r4, r4, #2
 8002b88:	42a6      	cmp	r6, r4
 8002b8a:	d109      	bne.n	8002ba0 <__libc_init_array+0x24>
 8002b8c:	2600      	movs	r6, #0
 8002b8e:	f000 f821 	bl	8002bd4 <_init>
 8002b92:	4d0a      	ldr	r5, [pc, #40]	; (8002bbc <__libc_init_array+0x40>)
 8002b94:	4c0a      	ldr	r4, [pc, #40]	; (8002bc0 <__libc_init_array+0x44>)
 8002b96:	1b64      	subs	r4, r4, r5
 8002b98:	10a4      	asrs	r4, r4, #2
 8002b9a:	42a6      	cmp	r6, r4
 8002b9c:	d105      	bne.n	8002baa <__libc_init_array+0x2e>
 8002b9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ba0:	00b3      	lsls	r3, r6, #2
 8002ba2:	58eb      	ldr	r3, [r5, r3]
 8002ba4:	4798      	blx	r3
 8002ba6:	3601      	adds	r6, #1
 8002ba8:	e7ee      	b.n	8002b88 <__libc_init_array+0xc>
 8002baa:	00b3      	lsls	r3, r6, #2
 8002bac:	58eb      	ldr	r3, [r5, r3]
 8002bae:	4798      	blx	r3
 8002bb0:	3601      	adds	r6, #1
 8002bb2:	e7f2      	b.n	8002b9a <__libc_init_array+0x1e>
 8002bb4:	08002c24 	.word	0x08002c24
 8002bb8:	08002c24 	.word	0x08002c24
 8002bbc:	08002c24 	.word	0x08002c24
 8002bc0:	08002c28 	.word	0x08002c28

08002bc4 <memset>:
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	1882      	adds	r2, r0, r2
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d100      	bne.n	8002bce <memset+0xa>
 8002bcc:	4770      	bx	lr
 8002bce:	7019      	strb	r1, [r3, #0]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	e7f9      	b.n	8002bc8 <memset+0x4>

08002bd4 <_init>:
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bda:	bc08      	pop	{r3}
 8002bdc:	469e      	mov	lr, r3
 8002bde:	4770      	bx	lr

08002be0 <_fini>:
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be6:	bc08      	pop	{r3}
 8002be8:	469e      	mov	lr, r3
 8002bea:	4770      	bx	lr
