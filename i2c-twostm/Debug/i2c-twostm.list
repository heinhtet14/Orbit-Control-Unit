
i2c-twostm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003224  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080032e0  080032e0  000132e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003354  08003354  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003354  08003354  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003354  08003354  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003354  08003354  00013354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003358  08003358  00013358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800335c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  080033cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080033cc  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1a4  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d5  00000000  00000000  0002c23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  0002dc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000870  00000000  00000000  0002e530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad13  00000000  00000000  0002eda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c420  00000000  00000000  00049ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1a36  00000000  00000000  00055ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7909  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002358  00000000  00000000  000f795c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080032c8 	.word	0x080032c8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080032c8 	.word	0x080032c8

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b088      	sub	sp, #32
 8000234:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000236:	f000 fac5 	bl	80007c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023a:	f000 f833 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023e:	f000 f907 	bl	8000450 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000242:	f000 f8d5 	bl	80003f0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000246:	f000 f893 	bl	8000370 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  rel = HAL_I2C_Slave_Receive(&hi2c1, &RxData, 1, 100);
 800024a:	4911      	ldr	r1, [pc, #68]	; (8000290 <main+0x60>)
 800024c:	4811      	ldr	r0, [pc, #68]	; (8000294 <main+0x64>)
 800024e:	2364      	movs	r3, #100	; 0x64
 8000250:	2201      	movs	r2, #1
 8000252:	f000 fe15 	bl	8000e80 <HAL_I2C_Slave_Receive>
 8000256:	0003      	movs	r3, r0
 8000258:	001a      	movs	r2, r3
 800025a:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <main+0x68>)
 800025c:	701a      	strb	r2, [r3, #0]
	  if(rel==HAL_OK){
 800025e:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <main+0x68>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d1f1      	bne.n	800024a <main+0x1a>
		  sprintf(str, "%8d\r\n", RxData);
 8000266:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <main+0x60>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	001a      	movs	r2, r3
 800026c:	490b      	ldr	r1, [pc, #44]	; (800029c <main+0x6c>)
 800026e:	003b      	movs	r3, r7
 8000270:	0018      	movs	r0, r3
 8000272:	f002 fc03 	bl	8002a7c <siprintf>
		  HAL_UART_Transmit(&huart2,(uint8_t*)(&str),10,100);
 8000276:	0039      	movs	r1, r7
 8000278:	4809      	ldr	r0, [pc, #36]	; (80002a0 <main+0x70>)
 800027a:	2364      	movs	r3, #100	; 0x64
 800027c:	220a      	movs	r2, #10
 800027e:	f001 ff79 	bl	8002174 <HAL_UART_Transmit>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000282:	2390      	movs	r3, #144	; 0x90
 8000284:	05db      	lsls	r3, r3, #23
 8000286:	2120      	movs	r1, #32
 8000288:	0018      	movs	r0, r3
 800028a:	f000 fd48 	bl	8000d1e <HAL_GPIO_TogglePin>
	  rel = HAL_I2C_Slave_Receive(&hi2c1, &RxData, 1, 100);
 800028e:	e7dc      	b.n	800024a <main+0x1a>
 8000290:	200000e5 	.word	0x200000e5
 8000294:	20000098 	.word	0x20000098
 8000298:	200000e4 	.word	0x200000e4
 800029c:	080032e0 	.word	0x080032e0
 80002a0:	200000e8 	.word	0x200000e8

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b590      	push	{r4, r7, lr}
 80002a6:	b099      	sub	sp, #100	; 0x64
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	242c      	movs	r4, #44	; 0x2c
 80002ac:	193b      	adds	r3, r7, r4
 80002ae:	0018      	movs	r0, r3
 80002b0:	2334      	movs	r3, #52	; 0x34
 80002b2:	001a      	movs	r2, r3
 80002b4:	2100      	movs	r1, #0
 80002b6:	f002 fbd9 	bl	8002a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ba:	231c      	movs	r3, #28
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	0018      	movs	r0, r3
 80002c0:	2310      	movs	r3, #16
 80002c2:	001a      	movs	r2, r3
 80002c4:	2100      	movs	r1, #0
 80002c6:	f002 fbd1 	bl	8002a6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ca:	003b      	movs	r3, r7
 80002cc:	0018      	movs	r0, r3
 80002ce:	231c      	movs	r3, #28
 80002d0:	001a      	movs	r2, r3
 80002d2:	2100      	movs	r1, #0
 80002d4:	f002 fbca 	bl	8002a6c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d8:	0021      	movs	r1, r4
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2202      	movs	r2, #2
 80002de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2201      	movs	r2, #1
 80002e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2210      	movs	r2, #16
 80002ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2202      	movs	r2, #2
 80002f0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2280      	movs	r2, #128	; 0x80
 80002f6:	0212      	lsls	r2, r2, #8
 80002f8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	22a0      	movs	r2, #160	; 0xa0
 80002fe:	0392      	lsls	r2, r2, #14
 8000300:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2201      	movs	r2, #1
 8000306:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000308:	187b      	adds	r3, r7, r1
 800030a:	0018      	movs	r0, r3
 800030c:	f001 f8de 	bl	80014cc <HAL_RCC_OscConfig>
 8000310:	1e03      	subs	r3, r0, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000314:	f000 f914 	bl	8000540 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000318:	211c      	movs	r1, #28
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2207      	movs	r2, #7
 800031e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2202      	movs	r2, #2
 8000324:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2200      	movs	r2, #0
 8000330:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2101      	movs	r1, #1
 8000336:	0018      	movs	r0, r3
 8000338:	f001 fc4e 	bl	8001bd8 <HAL_RCC_ClockConfig>
 800033c:	1e03      	subs	r3, r0, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000340:	f000 f8fe 	bl	8000540 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000344:	003b      	movs	r3, r7
 8000346:	2222      	movs	r2, #34	; 0x22
 8000348:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800034a:	003b      	movs	r3, r7
 800034c:	2200      	movs	r2, #0
 800034e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000350:	003b      	movs	r3, r7
 8000352:	2200      	movs	r2, #0
 8000354:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000356:	003b      	movs	r3, r7
 8000358:	0018      	movs	r0, r3
 800035a:	f001 fdb7 	bl	8001ecc <HAL_RCCEx_PeriphCLKConfig>
 800035e:	1e03      	subs	r3, r0, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000362:	f000 f8ed 	bl	8000540 <Error_Handler>
  }
}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	46bd      	mov	sp, r7
 800036a:	b019      	add	sp, #100	; 0x64
 800036c:	bd90      	pop	{r4, r7, pc}
	...

08000370 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000374:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <MX_I2C1_Init+0x74>)
 8000376:	4a1c      	ldr	r2, [pc, #112]	; (80003e8 <MX_I2C1_Init+0x78>)
 8000378:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800037a:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <MX_I2C1_Init+0x74>)
 800037c:	4a1b      	ldr	r2, [pc, #108]	; (80003ec <MX_I2C1_Init+0x7c>)
 800037e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000380:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <MX_I2C1_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <MX_I2C1_Init+0x74>)
 8000388:	2201      	movs	r2, #1
 800038a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <MX_I2C1_Init+0x74>)
 800038e:	2200      	movs	r2, #0
 8000390:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000392:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <MX_I2C1_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000398:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <MX_I2C1_Init+0x74>)
 800039a:	2200      	movs	r2, #0
 800039c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800039e:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <MX_I2C1_Init+0x74>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <MX_I2C1_Init+0x74>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <MX_I2C1_Init+0x74>)
 80003ac:	0018      	movs	r0, r3
 80003ae:	f000 fcd1 	bl	8000d54 <HAL_I2C_Init>
 80003b2:	1e03      	subs	r3, r0, #0
 80003b4:	d001      	beq.n	80003ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003b6:	f000 f8c3 	bl	8000540 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ba:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <MX_I2C1_Init+0x74>)
 80003bc:	2100      	movs	r1, #0
 80003be:	0018      	movs	r0, r3
 80003c0:	f000 ffec 	bl	800139c <HAL_I2CEx_ConfigAnalogFilter>
 80003c4:	1e03      	subs	r3, r0, #0
 80003c6:	d001      	beq.n	80003cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003c8:	f000 f8ba 	bl	8000540 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003cc:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <MX_I2C1_Init+0x74>)
 80003ce:	2100      	movs	r1, #0
 80003d0:	0018      	movs	r0, r3
 80003d2:	f001 f82f 	bl	8001434 <HAL_I2CEx_ConfigDigitalFilter>
 80003d6:	1e03      	subs	r3, r0, #0
 80003d8:	d001      	beq.n	80003de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003da:	f000 f8b1 	bl	8000540 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000098 	.word	0x20000098
 80003e8:	40005400 	.word	0x40005400
 80003ec:	2000090e 	.word	0x2000090e

080003f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003f4:	4b14      	ldr	r3, [pc, #80]	; (8000448 <MX_USART2_UART_Init+0x58>)
 80003f6:	4a15      	ldr	r2, [pc, #84]	; (800044c <MX_USART2_UART_Init+0x5c>)
 80003f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003fa:	4b13      	ldr	r3, [pc, #76]	; (8000448 <MX_USART2_UART_Init+0x58>)
 80003fc:	22e1      	movs	r2, #225	; 0xe1
 80003fe:	0252      	lsls	r2, r2, #9
 8000400:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000402:	4b11      	ldr	r3, [pc, #68]	; (8000448 <MX_USART2_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000408:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <MX_USART2_UART_Init+0x58>)
 800040a:	2200      	movs	r2, #0
 800040c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <MX_USART2_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <MX_USART2_UART_Init+0x58>)
 8000416:	220c      	movs	r2, #12
 8000418:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <MX_USART2_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000420:	4b09      	ldr	r3, [pc, #36]	; (8000448 <MX_USART2_UART_Init+0x58>)
 8000422:	2200      	movs	r2, #0
 8000424:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <MX_USART2_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <MX_USART2_UART_Init+0x58>)
 800042e:	2200      	movs	r2, #0
 8000430:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000432:	4b05      	ldr	r3, [pc, #20]	; (8000448 <MX_USART2_UART_Init+0x58>)
 8000434:	0018      	movs	r0, r3
 8000436:	f001 fe49 	bl	80020cc <HAL_UART_Init>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800043e:	f000 f87f 	bl	8000540 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	200000e8 	.word	0x200000e8
 800044c:	40004400 	.word	0x40004400

08000450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000450:	b590      	push	{r4, r7, lr}
 8000452:	b08b      	sub	sp, #44	; 0x2c
 8000454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000456:	2414      	movs	r4, #20
 8000458:	193b      	adds	r3, r7, r4
 800045a:	0018      	movs	r0, r3
 800045c:	2314      	movs	r3, #20
 800045e:	001a      	movs	r2, r3
 8000460:	2100      	movs	r1, #0
 8000462:	f002 fb03 	bl	8002a6c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000466:	4b34      	ldr	r3, [pc, #208]	; (8000538 <MX_GPIO_Init+0xe8>)
 8000468:	695a      	ldr	r2, [r3, #20]
 800046a:	4b33      	ldr	r3, [pc, #204]	; (8000538 <MX_GPIO_Init+0xe8>)
 800046c:	2180      	movs	r1, #128	; 0x80
 800046e:	0309      	lsls	r1, r1, #12
 8000470:	430a      	orrs	r2, r1
 8000472:	615a      	str	r2, [r3, #20]
 8000474:	4b30      	ldr	r3, [pc, #192]	; (8000538 <MX_GPIO_Init+0xe8>)
 8000476:	695a      	ldr	r2, [r3, #20]
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	031b      	lsls	r3, r3, #12
 800047c:	4013      	ands	r3, r2
 800047e:	613b      	str	r3, [r7, #16]
 8000480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000482:	4b2d      	ldr	r3, [pc, #180]	; (8000538 <MX_GPIO_Init+0xe8>)
 8000484:	695a      	ldr	r2, [r3, #20]
 8000486:	4b2c      	ldr	r3, [pc, #176]	; (8000538 <MX_GPIO_Init+0xe8>)
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	03c9      	lsls	r1, r1, #15
 800048c:	430a      	orrs	r2, r1
 800048e:	615a      	str	r2, [r3, #20]
 8000490:	4b29      	ldr	r3, [pc, #164]	; (8000538 <MX_GPIO_Init+0xe8>)
 8000492:	695a      	ldr	r2, [r3, #20]
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	03db      	lsls	r3, r3, #15
 8000498:	4013      	ands	r3, r2
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049e:	4b26      	ldr	r3, [pc, #152]	; (8000538 <MX_GPIO_Init+0xe8>)
 80004a0:	695a      	ldr	r2, [r3, #20]
 80004a2:	4b25      	ldr	r3, [pc, #148]	; (8000538 <MX_GPIO_Init+0xe8>)
 80004a4:	2180      	movs	r1, #128	; 0x80
 80004a6:	0289      	lsls	r1, r1, #10
 80004a8:	430a      	orrs	r2, r1
 80004aa:	615a      	str	r2, [r3, #20]
 80004ac:	4b22      	ldr	r3, [pc, #136]	; (8000538 <MX_GPIO_Init+0xe8>)
 80004ae:	695a      	ldr	r2, [r3, #20]
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	029b      	lsls	r3, r3, #10
 80004b4:	4013      	ands	r3, r2
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ba:	4b1f      	ldr	r3, [pc, #124]	; (8000538 <MX_GPIO_Init+0xe8>)
 80004bc:	695a      	ldr	r2, [r3, #20]
 80004be:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <MX_GPIO_Init+0xe8>)
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	02c9      	lsls	r1, r1, #11
 80004c4:	430a      	orrs	r2, r1
 80004c6:	615a      	str	r2, [r3, #20]
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <MX_GPIO_Init+0xe8>)
 80004ca:	695a      	ldr	r2, [r3, #20]
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	02db      	lsls	r3, r3, #11
 80004d0:	4013      	ands	r3, r2
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004d6:	2390      	movs	r3, #144	; 0x90
 80004d8:	05db      	lsls	r3, r3, #23
 80004da:	2200      	movs	r2, #0
 80004dc:	2120      	movs	r1, #32
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 fc00 	bl	8000ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	2280      	movs	r2, #128	; 0x80
 80004e8:	0192      	lsls	r2, r2, #6
 80004ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	2284      	movs	r2, #132	; 0x84
 80004f0:	0392      	lsls	r2, r2, #14
 80004f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	4a0f      	ldr	r2, [pc, #60]	; (800053c <MX_GPIO_Init+0xec>)
 80004fe:	0019      	movs	r1, r3
 8000500:	0010      	movs	r0, r2
 8000502:	f000 fa77 	bl	80009f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000506:	0021      	movs	r1, r4
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2220      	movs	r2, #32
 800050c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2201      	movs	r2, #1
 8000512:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2200      	movs	r2, #0
 800051e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000520:	187a      	adds	r2, r7, r1
 8000522:	2390      	movs	r3, #144	; 0x90
 8000524:	05db      	lsls	r3, r3, #23
 8000526:	0011      	movs	r1, r2
 8000528:	0018      	movs	r0, r3
 800052a:	f000 fa63 	bl	80009f4 <HAL_GPIO_Init>

}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b00b      	add	sp, #44	; 0x2c
 8000534:	bd90      	pop	{r4, r7, pc}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	40021000 	.word	0x40021000
 800053c:	48000800 	.word	0x48000800

08000540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000544:	b672      	cpsid	i
}
 8000546:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000548:	e7fe      	b.n	8000548 <Error_Handler+0x8>
	...

0800054c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <HAL_MspInit+0x44>)
 8000554:	699a      	ldr	r2, [r3, #24]
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <HAL_MspInit+0x44>)
 8000558:	2101      	movs	r1, #1
 800055a:	430a      	orrs	r2, r1
 800055c:	619a      	str	r2, [r3, #24]
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <HAL_MspInit+0x44>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	2201      	movs	r2, #1
 8000564:	4013      	ands	r3, r2
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <HAL_MspInit+0x44>)
 800056c:	69da      	ldr	r2, [r3, #28]
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <HAL_MspInit+0x44>)
 8000570:	2180      	movs	r1, #128	; 0x80
 8000572:	0549      	lsls	r1, r1, #21
 8000574:	430a      	orrs	r2, r1
 8000576:	61da      	str	r2, [r3, #28]
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <HAL_MspInit+0x44>)
 800057a:	69da      	ldr	r2, [r3, #28]
 800057c:	2380      	movs	r3, #128	; 0x80
 800057e:	055b      	lsls	r3, r3, #21
 8000580:	4013      	ands	r3, r2
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b002      	add	sp, #8
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	40021000 	.word	0x40021000

08000594 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b08b      	sub	sp, #44	; 0x2c
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059c:	2414      	movs	r4, #20
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	0018      	movs	r0, r3
 80005a2:	2314      	movs	r3, #20
 80005a4:	001a      	movs	r2, r3
 80005a6:	2100      	movs	r1, #0
 80005a8:	f002 fa60 	bl	8002a6c <memset>
  if(hi2c->Instance==I2C1)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a1c      	ldr	r2, [pc, #112]	; (8000624 <HAL_I2C_MspInit+0x90>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d132      	bne.n	800061c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <HAL_I2C_MspInit+0x94>)
 80005b8:	695a      	ldr	r2, [r3, #20]
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <HAL_I2C_MspInit+0x94>)
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	02c9      	lsls	r1, r1, #11
 80005c0:	430a      	orrs	r2, r1
 80005c2:	615a      	str	r2, [r3, #20]
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <HAL_I2C_MspInit+0x94>)
 80005c6:	695a      	ldr	r2, [r3, #20]
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	02db      	lsls	r3, r3, #11
 80005cc:	4013      	ands	r3, r2
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	22c0      	movs	r2, #192	; 0xc0
 80005d6:	0092      	lsls	r2, r2, #2
 80005d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005da:	0021      	movs	r1, r4
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2212      	movs	r2, #18
 80005e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2203      	movs	r2, #3
 80005ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2201      	movs	r2, #1
 80005f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	4a0d      	ldr	r2, [pc, #52]	; (800062c <HAL_I2C_MspInit+0x98>)
 80005f8:	0019      	movs	r1, r3
 80005fa:	0010      	movs	r0, r2
 80005fc:	f000 f9fa 	bl	80009f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_I2C_MspInit+0x94>)
 8000602:	69da      	ldr	r2, [r3, #28]
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <HAL_I2C_MspInit+0x94>)
 8000606:	2180      	movs	r1, #128	; 0x80
 8000608:	0389      	lsls	r1, r1, #14
 800060a:	430a      	orrs	r2, r1
 800060c:	61da      	str	r2, [r3, #28]
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_I2C_MspInit+0x94>)
 8000610:	69da      	ldr	r2, [r3, #28]
 8000612:	2380      	movs	r3, #128	; 0x80
 8000614:	039b      	lsls	r3, r3, #14
 8000616:	4013      	ands	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	b00b      	add	sp, #44	; 0x2c
 8000622:	bd90      	pop	{r4, r7, pc}
 8000624:	40005400 	.word	0x40005400
 8000628:	40021000 	.word	0x40021000
 800062c:	48000400 	.word	0x48000400

08000630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b08b      	sub	sp, #44	; 0x2c
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	2414      	movs	r4, #20
 800063a:	193b      	adds	r3, r7, r4
 800063c:	0018      	movs	r0, r3
 800063e:	2314      	movs	r3, #20
 8000640:	001a      	movs	r2, r3
 8000642:	2100      	movs	r1, #0
 8000644:	f002 fa12 	bl	8002a6c <memset>
  if(huart->Instance==USART2)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <HAL_UART_MspInit+0x90>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d132      	bne.n	80006b8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <HAL_UART_MspInit+0x94>)
 8000654:	69da      	ldr	r2, [r3, #28]
 8000656:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <HAL_UART_MspInit+0x94>)
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	0289      	lsls	r1, r1, #10
 800065c:	430a      	orrs	r2, r1
 800065e:	61da      	str	r2, [r3, #28]
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <HAL_UART_MspInit+0x94>)
 8000662:	69da      	ldr	r2, [r3, #28]
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	029b      	lsls	r3, r3, #10
 8000668:	4013      	ands	r3, r2
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_UART_MspInit+0x94>)
 8000670:	695a      	ldr	r2, [r3, #20]
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <HAL_UART_MspInit+0x94>)
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	0289      	lsls	r1, r1, #10
 8000678:	430a      	orrs	r2, r1
 800067a:	615a      	str	r2, [r3, #20]
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <HAL_UART_MspInit+0x94>)
 800067e:	695a      	ldr	r2, [r3, #20]
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	029b      	lsls	r3, r3, #10
 8000684:	4013      	ands	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800068a:	0021      	movs	r1, r4
 800068c:	187b      	adds	r3, r7, r1
 800068e:	220c      	movs	r2, #12
 8000690:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2202      	movs	r2, #2
 8000696:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2201      	movs	r2, #1
 80006a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	187a      	adds	r2, r7, r1
 80006ac:	2390      	movs	r3, #144	; 0x90
 80006ae:	05db      	lsls	r3, r3, #23
 80006b0:	0011      	movs	r1, r2
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 f99e 	bl	80009f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b00b      	add	sp, #44	; 0x2c
 80006be:	bd90      	pop	{r4, r7, pc}
 80006c0:	40004400 	.word	0x40004400
 80006c4:	40021000 	.word	0x40021000

080006c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <NMI_Handler+0x4>

080006ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <HardFault_Handler+0x4>

080006d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ec:	f000 f8b2 	bl	8000854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000700:	4a14      	ldr	r2, [pc, #80]	; (8000754 <_sbrk+0x5c>)
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <_sbrk+0x60>)
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <_sbrk+0x64>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d102      	bne.n	800071a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <_sbrk+0x64>)
 8000716:	4a12      	ldr	r2, [pc, #72]	; (8000760 <_sbrk+0x68>)
 8000718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <_sbrk+0x64>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	18d3      	adds	r3, r2, r3
 8000722:	693a      	ldr	r2, [r7, #16]
 8000724:	429a      	cmp	r2, r3
 8000726:	d207      	bcs.n	8000738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000728:	f002 f976 	bl	8002a18 <__errno>
 800072c:	0003      	movs	r3, r0
 800072e:	220c      	movs	r2, #12
 8000730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000732:	2301      	movs	r3, #1
 8000734:	425b      	negs	r3, r3
 8000736:	e009      	b.n	800074c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <_sbrk+0x64>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800073e:	4b07      	ldr	r3, [pc, #28]	; (800075c <_sbrk+0x64>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	18d2      	adds	r2, r2, r3
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <_sbrk+0x64>)
 8000748:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800074a:	68fb      	ldr	r3, [r7, #12]
}
 800074c:	0018      	movs	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	b006      	add	sp, #24
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20008000 	.word	0x20008000
 8000758:	00000400 	.word	0x00000400
 800075c:	2000008c 	.word	0x2000008c
 8000760:	20000180 	.word	0x20000180

08000764 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000772:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <LoopForever+0x6>)
  ldr r1, =_edata
 8000776:	490e      	ldr	r1, [pc, #56]	; (80007b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000778:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <LoopForever+0xe>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800077c:	e002      	b.n	8000784 <LoopCopyDataInit>

0800077e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000782:	3304      	adds	r3, #4

08000784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000788:	d3f9      	bcc.n	800077e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078a:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800078c:	4c0b      	ldr	r4, [pc, #44]	; (80007bc <LoopForever+0x16>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000790:	e001      	b.n	8000796 <LoopFillZerobss>

08000792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000794:	3204      	adds	r2, #4

08000796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000798:	d3fb      	bcc.n	8000792 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800079a:	f7ff ffe3 	bl	8000764 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800079e:	f002 f941 	bl	8002a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007a2:	f7ff fd45 	bl	8000230 <main>

080007a6 <LoopForever>:

LoopForever:
    b LoopForever
 80007a6:	e7fe      	b.n	80007a6 <LoopForever>
  ldr   r0, =_estack
 80007a8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80007ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007b4:	0800335c 	.word	0x0800335c
  ldr r2, =_sbss
 80007b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007bc:	20000180 	.word	0x20000180

080007c0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c0:	e7fe      	b.n	80007c0 <ADC1_COMP_IRQHandler>
	...

080007c4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <HAL_Init+0x24>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_Init+0x24>)
 80007ce:	2110      	movs	r1, #16
 80007d0:	430a      	orrs	r2, r1
 80007d2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007d4:	2000      	movs	r0, #0
 80007d6:	f000 f809 	bl	80007ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007da:	f7ff feb7 	bl	800054c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007de:	2300      	movs	r3, #0
}
 80007e0:	0018      	movs	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	40022000 	.word	0x40022000

080007ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <HAL_InitTick+0x5c>)
 80007f6:	681c      	ldr	r4, [r3, #0]
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <HAL_InitTick+0x60>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	0019      	movs	r1, r3
 80007fe:	23fa      	movs	r3, #250	; 0xfa
 8000800:	0098      	lsls	r0, r3, #2
 8000802:	f7ff fc89 	bl	8000118 <__udivsi3>
 8000806:	0003      	movs	r3, r0
 8000808:	0019      	movs	r1, r3
 800080a:	0020      	movs	r0, r4
 800080c:	f7ff fc84 	bl	8000118 <__udivsi3>
 8000810:	0003      	movs	r3, r0
 8000812:	0018      	movs	r0, r3
 8000814:	f000 f8e1 	bl	80009da <HAL_SYSTICK_Config>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800081c:	2301      	movs	r3, #1
 800081e:	e00f      	b.n	8000840 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b03      	cmp	r3, #3
 8000824:	d80b      	bhi.n	800083e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	2301      	movs	r3, #1
 800082a:	425b      	negs	r3, r3
 800082c:	2200      	movs	r2, #0
 800082e:	0018      	movs	r0, r3
 8000830:	f000 f8be 	bl	80009b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_InitTick+0x64>)
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800083a:	2300      	movs	r3, #0
 800083c:	e000      	b.n	8000840 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
}
 8000840:	0018      	movs	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	b003      	add	sp, #12
 8000846:	bd90      	pop	{r4, r7, pc}
 8000848:	20000000 	.word	0x20000000
 800084c:	20000008 	.word	0x20000008
 8000850:	20000004 	.word	0x20000004

08000854 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <HAL_IncTick+0x1c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	001a      	movs	r2, r3
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_IncTick+0x20>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	18d2      	adds	r2, r2, r3
 8000864:	4b03      	ldr	r3, [pc, #12]	; (8000874 <HAL_IncTick+0x20>)
 8000866:	601a      	str	r2, [r3, #0]
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	20000008 	.word	0x20000008
 8000874:	2000016c 	.word	0x2000016c

08000878 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  return uwTick;
 800087c:	4b02      	ldr	r3, [pc, #8]	; (8000888 <HAL_GetTick+0x10>)
 800087e:	681b      	ldr	r3, [r3, #0]
}
 8000880:	0018      	movs	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	2000016c 	.word	0x2000016c

0800088c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	0002      	movs	r2, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b7f      	cmp	r3, #127	; 0x7f
 80008a0:	d828      	bhi.n	80008f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a2:	4a2f      	ldr	r2, [pc, #188]	; (8000960 <__NVIC_SetPriority+0xd4>)
 80008a4:	1dfb      	adds	r3, r7, #7
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b25b      	sxtb	r3, r3
 80008aa:	089b      	lsrs	r3, r3, #2
 80008ac:	33c0      	adds	r3, #192	; 0xc0
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	589b      	ldr	r3, [r3, r2]
 80008b2:	1dfa      	adds	r2, r7, #7
 80008b4:	7812      	ldrb	r2, [r2, #0]
 80008b6:	0011      	movs	r1, r2
 80008b8:	2203      	movs	r2, #3
 80008ba:	400a      	ands	r2, r1
 80008bc:	00d2      	lsls	r2, r2, #3
 80008be:	21ff      	movs	r1, #255	; 0xff
 80008c0:	4091      	lsls	r1, r2
 80008c2:	000a      	movs	r2, r1
 80008c4:	43d2      	mvns	r2, r2
 80008c6:	401a      	ands	r2, r3
 80008c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	019b      	lsls	r3, r3, #6
 80008ce:	22ff      	movs	r2, #255	; 0xff
 80008d0:	401a      	ands	r2, r3
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	0018      	movs	r0, r3
 80008d8:	2303      	movs	r3, #3
 80008da:	4003      	ands	r3, r0
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e0:	481f      	ldr	r0, [pc, #124]	; (8000960 <__NVIC_SetPriority+0xd4>)
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	089b      	lsrs	r3, r3, #2
 80008ea:	430a      	orrs	r2, r1
 80008ec:	33c0      	adds	r3, #192	; 0xc0
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008f2:	e031      	b.n	8000958 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f4:	4a1b      	ldr	r2, [pc, #108]	; (8000964 <__NVIC_SetPriority+0xd8>)
 80008f6:	1dfb      	adds	r3, r7, #7
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	0019      	movs	r1, r3
 80008fc:	230f      	movs	r3, #15
 80008fe:	400b      	ands	r3, r1
 8000900:	3b08      	subs	r3, #8
 8000902:	089b      	lsrs	r3, r3, #2
 8000904:	3306      	adds	r3, #6
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	18d3      	adds	r3, r2, r3
 800090a:	3304      	adds	r3, #4
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	1dfa      	adds	r2, r7, #7
 8000910:	7812      	ldrb	r2, [r2, #0]
 8000912:	0011      	movs	r1, r2
 8000914:	2203      	movs	r2, #3
 8000916:	400a      	ands	r2, r1
 8000918:	00d2      	lsls	r2, r2, #3
 800091a:	21ff      	movs	r1, #255	; 0xff
 800091c:	4091      	lsls	r1, r2
 800091e:	000a      	movs	r2, r1
 8000920:	43d2      	mvns	r2, r2
 8000922:	401a      	ands	r2, r3
 8000924:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	019b      	lsls	r3, r3, #6
 800092a:	22ff      	movs	r2, #255	; 0xff
 800092c:	401a      	ands	r2, r3
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	0018      	movs	r0, r3
 8000934:	2303      	movs	r3, #3
 8000936:	4003      	ands	r3, r0
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800093c:	4809      	ldr	r0, [pc, #36]	; (8000964 <__NVIC_SetPriority+0xd8>)
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	001c      	movs	r4, r3
 8000944:	230f      	movs	r3, #15
 8000946:	4023      	ands	r3, r4
 8000948:	3b08      	subs	r3, #8
 800094a:	089b      	lsrs	r3, r3, #2
 800094c:	430a      	orrs	r2, r1
 800094e:	3306      	adds	r3, #6
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	18c3      	adds	r3, r0, r3
 8000954:	3304      	adds	r3, #4
 8000956:	601a      	str	r2, [r3, #0]
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b003      	add	sp, #12
 800095e:	bd90      	pop	{r4, r7, pc}
 8000960:	e000e100 	.word	0xe000e100
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	1e5a      	subs	r2, r3, #1
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	045b      	lsls	r3, r3, #17
 8000978:	429a      	cmp	r2, r3
 800097a:	d301      	bcc.n	8000980 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097c:	2301      	movs	r3, #1
 800097e:	e010      	b.n	80009a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <SysTick_Config+0x44>)
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	3a01      	subs	r2, #1
 8000986:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000988:	2301      	movs	r3, #1
 800098a:	425b      	negs	r3, r3
 800098c:	2103      	movs	r1, #3
 800098e:	0018      	movs	r0, r3
 8000990:	f7ff ff7c 	bl	800088c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <SysTick_Config+0x44>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <SysTick_Config+0x44>)
 800099c:	2207      	movs	r2, #7
 800099e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	0018      	movs	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b002      	add	sp, #8
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	e000e010 	.word	0xe000e010

080009b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
 80009ba:	210f      	movs	r1, #15
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	1c02      	adds	r2, r0, #0
 80009c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b25b      	sxtb	r3, r3
 80009ca:	0011      	movs	r1, r2
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff ff5d 	bl	800088c <__NVIC_SetPriority>
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b004      	add	sp, #16
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	0018      	movs	r0, r3
 80009e6:	f7ff ffbf 	bl	8000968 <SysTick_Config>
 80009ea:	0003      	movs	r3, r0
}
 80009ec:	0018      	movs	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b002      	add	sp, #8
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a02:	e155      	b.n	8000cb0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2101      	movs	r1, #1
 8000a0a:	697a      	ldr	r2, [r7, #20]
 8000a0c:	4091      	lsls	r1, r2
 8000a0e:	000a      	movs	r2, r1
 8000a10:	4013      	ands	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d100      	bne.n	8000a1c <HAL_GPIO_Init+0x28>
 8000a1a:	e146      	b.n	8000caa <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	2203      	movs	r2, #3
 8000a22:	4013      	ands	r3, r2
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d005      	beq.n	8000a34 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d130      	bne.n	8000a96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	2203      	movs	r2, #3
 8000a40:	409a      	lsls	r2, r3
 8000a42:	0013      	movs	r3, r2
 8000a44:	43da      	mvns	r2, r3
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	68da      	ldr	r2, [r3, #12]
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	409a      	lsls	r2, r3
 8000a56:	0013      	movs	r3, r2
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	409a      	lsls	r2, r3
 8000a70:	0013      	movs	r3, r2
 8000a72:	43da      	mvns	r2, r3
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	091b      	lsrs	r3, r3, #4
 8000a80:	2201      	movs	r2, #1
 8000a82:	401a      	ands	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	409a      	lsls	r2, r3
 8000a88:	0013      	movs	r3, r2
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d017      	beq.n	8000ad2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	2203      	movs	r2, #3
 8000aae:	409a      	lsls	r2, r3
 8000ab0:	0013      	movs	r3, r2
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	689a      	ldr	r2, [r3, #8]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	409a      	lsls	r2, r3
 8000ac4:	0013      	movs	r3, r2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	4013      	ands	r3, r2
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d123      	bne.n	8000b26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	08da      	lsrs	r2, r3, #3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3208      	adds	r2, #8
 8000ae6:	0092      	lsls	r2, r2, #2
 8000ae8:	58d3      	ldr	r3, [r2, r3]
 8000aea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	2207      	movs	r2, #7
 8000af0:	4013      	ands	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	220f      	movs	r2, #15
 8000af6:	409a      	lsls	r2, r3
 8000af8:	0013      	movs	r3, r2
 8000afa:	43da      	mvns	r2, r3
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	691a      	ldr	r2, [r3, #16]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	2107      	movs	r1, #7
 8000b0a:	400b      	ands	r3, r1
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	409a      	lsls	r2, r3
 8000b10:	0013      	movs	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	08da      	lsrs	r2, r3, #3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3208      	adds	r2, #8
 8000b20:	0092      	lsls	r2, r2, #2
 8000b22:	6939      	ldr	r1, [r7, #16]
 8000b24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	2203      	movs	r2, #3
 8000b32:	409a      	lsls	r2, r3
 8000b34:	0013      	movs	r3, r2
 8000b36:	43da      	mvns	r2, r3
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2203      	movs	r2, #3
 8000b44:	401a      	ands	r2, r3
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	409a      	lsls	r2, r3
 8000b4c:	0013      	movs	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685a      	ldr	r2, [r3, #4]
 8000b5e:	23c0      	movs	r3, #192	; 0xc0
 8000b60:	029b      	lsls	r3, r3, #10
 8000b62:	4013      	ands	r3, r2
 8000b64:	d100      	bne.n	8000b68 <HAL_GPIO_Init+0x174>
 8000b66:	e0a0      	b.n	8000caa <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b68:	4b57      	ldr	r3, [pc, #348]	; (8000cc8 <HAL_GPIO_Init+0x2d4>)
 8000b6a:	699a      	ldr	r2, [r3, #24]
 8000b6c:	4b56      	ldr	r3, [pc, #344]	; (8000cc8 <HAL_GPIO_Init+0x2d4>)
 8000b6e:	2101      	movs	r1, #1
 8000b70:	430a      	orrs	r2, r1
 8000b72:	619a      	str	r2, [r3, #24]
 8000b74:	4b54      	ldr	r3, [pc, #336]	; (8000cc8 <HAL_GPIO_Init+0x2d4>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b80:	4a52      	ldr	r2, [pc, #328]	; (8000ccc <HAL_GPIO_Init+0x2d8>)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	089b      	lsrs	r3, r3, #2
 8000b86:	3302      	adds	r3, #2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	589b      	ldr	r3, [r3, r2]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	2203      	movs	r2, #3
 8000b92:	4013      	ands	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	220f      	movs	r2, #15
 8000b98:	409a      	lsls	r2, r3
 8000b9a:	0013      	movs	r3, r2
 8000b9c:	43da      	mvns	r2, r3
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	2390      	movs	r3, #144	; 0x90
 8000ba8:	05db      	lsls	r3, r3, #23
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d019      	beq.n	8000be2 <HAL_GPIO_Init+0x1ee>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a47      	ldr	r2, [pc, #284]	; (8000cd0 <HAL_GPIO_Init+0x2dc>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d013      	beq.n	8000bde <HAL_GPIO_Init+0x1ea>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a46      	ldr	r2, [pc, #280]	; (8000cd4 <HAL_GPIO_Init+0x2e0>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d00d      	beq.n	8000bda <HAL_GPIO_Init+0x1e6>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a45      	ldr	r2, [pc, #276]	; (8000cd8 <HAL_GPIO_Init+0x2e4>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d007      	beq.n	8000bd6 <HAL_GPIO_Init+0x1e2>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a44      	ldr	r2, [pc, #272]	; (8000cdc <HAL_GPIO_Init+0x2e8>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d101      	bne.n	8000bd2 <HAL_GPIO_Init+0x1de>
 8000bce:	2304      	movs	r3, #4
 8000bd0:	e008      	b.n	8000be4 <HAL_GPIO_Init+0x1f0>
 8000bd2:	2305      	movs	r3, #5
 8000bd4:	e006      	b.n	8000be4 <HAL_GPIO_Init+0x1f0>
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e004      	b.n	8000be4 <HAL_GPIO_Init+0x1f0>
 8000bda:	2302      	movs	r3, #2
 8000bdc:	e002      	b.n	8000be4 <HAL_GPIO_Init+0x1f0>
 8000bde:	2301      	movs	r3, #1
 8000be0:	e000      	b.n	8000be4 <HAL_GPIO_Init+0x1f0>
 8000be2:	2300      	movs	r3, #0
 8000be4:	697a      	ldr	r2, [r7, #20]
 8000be6:	2103      	movs	r1, #3
 8000be8:	400a      	ands	r2, r1
 8000bea:	0092      	lsls	r2, r2, #2
 8000bec:	4093      	lsls	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bf4:	4935      	ldr	r1, [pc, #212]	; (8000ccc <HAL_GPIO_Init+0x2d8>)
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	089b      	lsrs	r3, r3, #2
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c02:	4b37      	ldr	r3, [pc, #220]	; (8000ce0 <HAL_GPIO_Init+0x2ec>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	025b      	lsls	r3, r3, #9
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	d003      	beq.n	8000c26 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c26:	4b2e      	ldr	r3, [pc, #184]	; (8000ce0 <HAL_GPIO_Init+0x2ec>)
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ce0 <HAL_GPIO_Init+0x2ec>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	43da      	mvns	r2, r3
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	029b      	lsls	r3, r3, #10
 8000c44:	4013      	ands	r3, r2
 8000c46:	d003      	beq.n	8000c50 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c50:	4b23      	ldr	r3, [pc, #140]	; (8000ce0 <HAL_GPIO_Init+0x2ec>)
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c56:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <HAL_GPIO_Init+0x2ec>)
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	2380      	movs	r3, #128	; 0x80
 8000c6c:	035b      	lsls	r3, r3, #13
 8000c6e:	4013      	ands	r3, r2
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_GPIO_Init+0x2ec>)
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c80:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_GPIO_Init+0x2ec>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	43da      	mvns	r2, r3
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	039b      	lsls	r3, r3, #14
 8000c98:	4013      	ands	r3, r2
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_GPIO_Init+0x2ec>)
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	40da      	lsrs	r2, r3
 8000cb8:	1e13      	subs	r3, r2, #0
 8000cba:	d000      	beq.n	8000cbe <HAL_GPIO_Init+0x2ca>
 8000cbc:	e6a2      	b.n	8000a04 <HAL_GPIO_Init+0x10>
  } 
}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b006      	add	sp, #24
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40010000 	.word	0x40010000
 8000cd0:	48000400 	.word	0x48000400
 8000cd4:	48000800 	.word	0x48000800
 8000cd8:	48000c00 	.word	0x48000c00
 8000cdc:	48001000 	.word	0x48001000
 8000ce0:	40010400 	.word	0x40010400

08000ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	0008      	movs	r0, r1
 8000cee:	0011      	movs	r1, r2
 8000cf0:	1cbb      	adds	r3, r7, #2
 8000cf2:	1c02      	adds	r2, r0, #0
 8000cf4:	801a      	strh	r2, [r3, #0]
 8000cf6:	1c7b      	adds	r3, r7, #1
 8000cf8:	1c0a      	adds	r2, r1, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cfc:	1c7b      	adds	r3, r7, #1
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d004      	beq.n	8000d0e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d04:	1cbb      	adds	r3, r7, #2
 8000d06:	881a      	ldrh	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d0c:	e003      	b.n	8000d16 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d0e:	1cbb      	adds	r3, r7, #2
 8000d10:	881a      	ldrh	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b002      	add	sp, #8
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b084      	sub	sp, #16
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	000a      	movs	r2, r1
 8000d28:	1cbb      	adds	r3, r7, #2
 8000d2a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d32:	1cbb      	adds	r3, r7, #2
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	041a      	lsls	r2, r3, #16
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	1cb9      	adds	r1, r7, #2
 8000d42:	8809      	ldrh	r1, [r1, #0]
 8000d44:	400b      	ands	r3, r1
 8000d46:	431a      	orrs	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	619a      	str	r2, [r3, #24]
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b004      	add	sp, #16
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e082      	b.n	8000e6c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2241      	movs	r2, #65	; 0x41
 8000d6a:	5c9b      	ldrb	r3, [r3, r2]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d107      	bne.n	8000d82 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2240      	movs	r2, #64	; 0x40
 8000d76:	2100      	movs	r1, #0
 8000d78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f7ff fc09 	bl	8000594 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2241      	movs	r2, #65	; 0x41
 8000d86:	2124      	movs	r1, #36	; 0x24
 8000d88:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2101      	movs	r1, #1
 8000d96:	438a      	bics	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4934      	ldr	r1, [pc, #208]	; (8000e74 <HAL_I2C_Init+0x120>)
 8000da4:	400a      	ands	r2, r1
 8000da6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4931      	ldr	r1, [pc, #196]	; (8000e78 <HAL_I2C_Init+0x124>)
 8000db4:	400a      	ands	r2, r1
 8000db6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d108      	bne.n	8000dd2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2180      	movs	r1, #128	; 0x80
 8000dca:	0209      	lsls	r1, r1, #8
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	e007      	b.n	8000de2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2184      	movs	r1, #132	; 0x84
 8000ddc:	0209      	lsls	r1, r1, #8
 8000dde:	430a      	orrs	r2, r1
 8000de0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d104      	bne.n	8000df4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2280      	movs	r2, #128	; 0x80
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	491f      	ldr	r1, [pc, #124]	; (8000e7c <HAL_I2C_Init+0x128>)
 8000e00:	430a      	orrs	r2, r1
 8000e02:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68da      	ldr	r2, [r3, #12]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	491a      	ldr	r1, [pc, #104]	; (8000e78 <HAL_I2C_Init+0x124>)
 8000e10:	400a      	ands	r2, r1
 8000e12:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	691a      	ldr	r2, [r3, #16]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69d9      	ldr	r1, [r3, #28]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6a1a      	ldr	r2, [r3, #32]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2101      	movs	r1, #1
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2241      	movs	r2, #65	; 0x41
 8000e58:	2120      	movs	r1, #32
 8000e5a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2242      	movs	r2, #66	; 0x42
 8000e66:	2100      	movs	r1, #0
 8000e68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b002      	add	sp, #8
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	f0ffffff 	.word	0xf0ffffff
 8000e78:	ffff7fff 	.word	0xffff7fff
 8000e7c:	02008000 	.word	0x02008000

08000e80 <HAL_I2C_Slave_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                        uint32_t Timeout)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af02      	add	r7, sp, #8
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	1dbb      	adds	r3, r7, #6
 8000e8e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2241      	movs	r2, #65	; 0x41
 8000e94:	5c9b      	ldrb	r3, [r3, r2]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b20      	cmp	r3, #32
 8000e9a:	d000      	beq.n	8000e9e <HAL_I2C_Slave_Receive+0x1e>
 8000e9c:	e0f3      	b.n	8001086 <HAL_I2C_Slave_Receive+0x206>
  {
    if ((pData == NULL) || (Size == 0U))
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <HAL_I2C_Slave_Receive+0x2c>
 8000ea4:	1dbb      	adds	r3, r7, #6
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d105      	bne.n	8000eb8 <HAL_I2C_Slave_Receive+0x38>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	0092      	lsls	r2, r2, #2
 8000eb2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e0e7      	b.n	8001088 <HAL_I2C_Slave_Receive+0x208>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2240      	movs	r2, #64	; 0x40
 8000ebc:	5c9b      	ldrb	r3, [r3, r2]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d101      	bne.n	8000ec6 <HAL_I2C_Slave_Receive+0x46>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e0e0      	b.n	8001088 <HAL_I2C_Slave_Receive+0x208>
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2240      	movs	r2, #64	; 0x40
 8000eca:	2101      	movs	r1, #1
 8000ecc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000ece:	f7ff fcd3 	bl	8000878 <HAL_GetTick>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	617b      	str	r3, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2241      	movs	r2, #65	; 0x41
 8000eda:	2122      	movs	r1, #34	; 0x22
 8000edc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2242      	movs	r2, #66	; 0x42
 8000ee2:	2120      	movs	r1, #32
 8000ee4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	1dba      	adds	r2, r7, #6
 8000ef6:	8812      	ldrh	r2, [r2, #0]
 8000ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2200      	movs	r2, #0
 8000efe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4961      	ldr	r1, [pc, #388]	; (8001090 <HAL_I2C_Slave_Receive+0x210>)
 8000f0c:	400a      	ands	r2, r1
 8000f0e:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	0013      	movs	r3, r2
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2108      	movs	r1, #8
 8000f1e:	f000 f8db 	bl	80010d8 <I2C_WaitOnFlagUntilTimeout>
 8000f22:	1e03      	subs	r3, r0, #0
 8000f24:	d00a      	beq.n	8000f3c <HAL_I2C_Slave_Receive+0xbc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2180      	movs	r1, #128	; 0x80
 8000f32:	0209      	lsls	r1, r1, #8
 8000f34:	430a      	orrs	r2, r1
 8000f36:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e0a5      	b.n	8001088 <HAL_I2C_Slave_Receive+0x208>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2208      	movs	r2, #8
 8000f42:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	2380      	movs	r3, #128	; 0x80
 8000f48:	0259      	lsls	r1, r3, #9
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	0013      	movs	r3, r2
 8000f52:	2201      	movs	r2, #1
 8000f54:	f000 f8c0 	bl	80010d8 <I2C_WaitOnFlagUntilTimeout>
 8000f58:	1e03      	subs	r3, r0, #0
 8000f5a:	d04a      	beq.n	8000ff2 <HAL_I2C_Slave_Receive+0x172>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2180      	movs	r1, #128	; 0x80
 8000f68:	0209      	lsls	r1, r1, #8
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e08a      	b.n	8001088 <HAL_I2C_Slave_Receive+0x208>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	6839      	ldr	r1, [r7, #0]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f000 f929 	bl	80011d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000f7e:	1e03      	subs	r3, r0, #0
 8000f80:	d024      	beq.n	8000fcc <HAL_I2C_Slave_Receive+0x14c>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	0209      	lsls	r1, r1, #8
 8000f90:	430a      	orrs	r2, r1
 8000f92:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	2204      	movs	r2, #4
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	d112      	bne.n	8000fc8 <HAL_I2C_Slave_Receive+0x148>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb4:	1c5a      	adds	r2, r3, #1
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
        }

        return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e05d      	b.n	8001088 <HAL_I2C_Slave_Receive+0x208>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fde:	1c5a      	adds	r2, r3, #1
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	3b01      	subs	r3, #1
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1ba      	bne.n	8000f72 <HAL_I2C_Slave_Receive+0xf2>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	6839      	ldr	r1, [r7, #0]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	0018      	movs	r0, r3
 8001004:	f000 f8a7 	bl	8001156 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001008:	1e03      	subs	r3, r0, #0
 800100a:	d00a      	beq.n	8001022 <HAL_I2C_Slave_Receive+0x1a2>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2180      	movs	r1, #128	; 0x80
 8001018:	0209      	lsls	r1, r1, #8
 800101a:	430a      	orrs	r2, r1
 800101c:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e032      	b.n	8001088 <HAL_I2C_Slave_Receive+0x208>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2220      	movs	r2, #32
 8001028:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	0219      	lsls	r1, r3, #8
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	0013      	movs	r3, r2
 8001038:	2201      	movs	r2, #1
 800103a:	f000 f84d 	bl	80010d8 <I2C_WaitOnFlagUntilTimeout>
 800103e:	1e03      	subs	r3, r0, #0
 8001040:	d00a      	beq.n	8001058 <HAL_I2C_Slave_Receive+0x1d8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	0209      	lsls	r1, r1, #8
 8001050:	430a      	orrs	r2, r1
 8001052:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e017      	b.n	8001088 <HAL_I2C_Slave_Receive+0x208>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2180      	movs	r1, #128	; 0x80
 8001064:	0209      	lsls	r1, r1, #8
 8001066:	430a      	orrs	r2, r1
 8001068:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2241      	movs	r2, #65	; 0x41
 800106e:	2120      	movs	r1, #32
 8001070:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2242      	movs	r2, #66	; 0x42
 8001076:	2100      	movs	r1, #0
 8001078:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2240      	movs	r2, #64	; 0x40
 800107e:	2100      	movs	r1, #0
 8001080:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	e000      	b.n	8001088 <HAL_I2C_Slave_Receive+0x208>
  }
  else
  {
    return HAL_BUSY;
 8001086:	2302      	movs	r3, #2
  }
}
 8001088:	0018      	movs	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	b006      	add	sp, #24
 800108e:	bd80      	pop	{r7, pc}
 8001090:	ffff7fff 	.word	0xffff7fff

08001094 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	2202      	movs	r2, #2
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d103      	bne.n	80010b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2200      	movs	r2, #0
 80010b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	2201      	movs	r2, #1
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d007      	beq.n	80010d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	699a      	ldr	r2, [r3, #24]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2101      	movs	r1, #1
 80010cc:	430a      	orrs	r2, r1
 80010ce:	619a      	str	r2, [r3, #24]
  }
}
 80010d0:	46c0      	nop			; (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b002      	add	sp, #8
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80010e8:	e021      	b.n	800112e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	d01e      	beq.n	800112e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010f0:	f7ff fbc2 	bl	8000878 <HAL_GetTick>
 80010f4:	0002      	movs	r2, r0
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d302      	bcc.n	8001106 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d113      	bne.n	800112e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	2220      	movs	r2, #32
 800110c:	431a      	orrs	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2241      	movs	r2, #65	; 0x41
 8001116:	2120      	movs	r1, #32
 8001118:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2242      	movs	r2, #66	; 0x42
 800111e:	2100      	movs	r1, #0
 8001120:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2240      	movs	r2, #64	; 0x40
 8001126:	2100      	movs	r1, #0
 8001128:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e00f      	b.n	800114e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	68ba      	ldr	r2, [r7, #8]
 8001136:	4013      	ands	r3, r2
 8001138:	68ba      	ldr	r2, [r7, #8]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	425a      	negs	r2, r3
 800113e:	4153      	adcs	r3, r2
 8001140:	b2db      	uxtb	r3, r3
 8001142:	001a      	movs	r2, r3
 8001144:	1dfb      	adds	r3, r7, #7
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d0ce      	beq.n	80010ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	0018      	movs	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	b004      	add	sp, #16
 8001154:	bd80      	pop	{r7, pc}

08001156 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001162:	e028      	b.n	80011b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	68b9      	ldr	r1, [r7, #8]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	0018      	movs	r0, r3
 800116c:	f000 f89c 	bl	80012a8 <I2C_IsAcknowledgeFailed>
 8001170:	1e03      	subs	r3, r0, #0
 8001172:	d001      	beq.n	8001178 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e026      	b.n	80011c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001178:	f7ff fb7e 	bl	8000878 <HAL_GetTick>
 800117c:	0002      	movs	r2, r0
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	429a      	cmp	r2, r3
 8001186:	d302      	bcc.n	800118e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d113      	bne.n	80011b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	2220      	movs	r2, #32
 8001194:	431a      	orrs	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2241      	movs	r2, #65	; 0x41
 800119e:	2120      	movs	r1, #32
 80011a0:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2242      	movs	r2, #66	; 0x42
 80011a6:	2100      	movs	r1, #0
 80011a8:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2240      	movs	r2, #64	; 0x40
 80011ae:	2100      	movs	r1, #0
 80011b0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e007      	b.n	80011c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	2220      	movs	r2, #32
 80011be:	4013      	ands	r3, r2
 80011c0:	2b20      	cmp	r3, #32
 80011c2:	d1cf      	bne.n	8001164 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	0018      	movs	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b004      	add	sp, #16
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80011dc:	e055      	b.n	800128a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	0018      	movs	r0, r3
 80011e6:	f000 f85f 	bl	80012a8 <I2C_IsAcknowledgeFailed>
 80011ea:	1e03      	subs	r3, r0, #0
 80011ec:	d001      	beq.n	80011f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e053      	b.n	800129a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	2220      	movs	r2, #32
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b20      	cmp	r3, #32
 80011fe:	d129      	bne.n	8001254 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	2204      	movs	r2, #4
 8001208:	4013      	ands	r3, r2
 800120a:	2b04      	cmp	r3, #4
 800120c:	d105      	bne.n	800121a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e03f      	b.n	800129a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2220      	movs	r2, #32
 8001220:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	491d      	ldr	r1, [pc, #116]	; (80012a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800122e:	400a      	ands	r2, r1
 8001230:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2200      	movs	r2, #0
 8001236:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2241      	movs	r2, #65	; 0x41
 800123c:	2120      	movs	r1, #32
 800123e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2242      	movs	r2, #66	; 0x42
 8001244:	2100      	movs	r1, #0
 8001246:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2240      	movs	r2, #64	; 0x40
 800124c:	2100      	movs	r1, #0
 800124e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e022      	b.n	800129a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001254:	f7ff fb10 	bl	8000878 <HAL_GetTick>
 8001258:	0002      	movs	r2, r0
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	429a      	cmp	r2, r3
 8001262:	d302      	bcc.n	800126a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10f      	bne.n	800128a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	2220      	movs	r2, #32
 8001270:	431a      	orrs	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2241      	movs	r2, #65	; 0x41
 800127a:	2120      	movs	r1, #32
 800127c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2240      	movs	r2, #64	; 0x40
 8001282:	2100      	movs	r1, #0
 8001284:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e007      	b.n	800129a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	2204      	movs	r2, #4
 8001292:	4013      	ands	r3, r2
 8001294:	2b04      	cmp	r3, #4
 8001296:	d1a2      	bne.n	80011de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	0018      	movs	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	b004      	add	sp, #16
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	fe00e800 	.word	0xfe00e800

080012a8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	2210      	movs	r2, #16
 80012bc:	4013      	ands	r3, r2
 80012be:	2b10      	cmp	r3, #16
 80012c0:	d164      	bne.n	800138c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	049b      	lsls	r3, r3, #18
 80012cc:	401a      	ands	r2, r3
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	049b      	lsls	r3, r3, #18
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d02b      	beq.n	800132e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2180      	movs	r1, #128	; 0x80
 80012e2:	01c9      	lsls	r1, r1, #7
 80012e4:	430a      	orrs	r2, r1
 80012e6:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012e8:	e021      	b.n	800132e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	3301      	adds	r3, #1
 80012ee:	d01e      	beq.n	800132e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012f0:	f7ff fac2 	bl	8000878 <HAL_GetTick>
 80012f4:	0002      	movs	r2, r0
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d302      	bcc.n	8001306 <I2C_IsAcknowledgeFailed+0x5e>
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d113      	bne.n	800132e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	2220      	movs	r2, #32
 800130c:	431a      	orrs	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2241      	movs	r2, #65	; 0x41
 8001316:	2120      	movs	r1, #32
 8001318:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2242      	movs	r2, #66	; 0x42
 800131e:	2100      	movs	r1, #0
 8001320:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2240      	movs	r2, #64	; 0x40
 8001326:	2100      	movs	r1, #0
 8001328:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e02f      	b.n	800138e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	2220      	movs	r2, #32
 8001336:	4013      	ands	r3, r2
 8001338:	2b20      	cmp	r3, #32
 800133a:	d1d6      	bne.n	80012ea <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2210      	movs	r2, #16
 8001342:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2220      	movs	r2, #32
 800134a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	0018      	movs	r0, r3
 8001350:	f7ff fea0 	bl	8001094 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	490e      	ldr	r1, [pc, #56]	; (8001398 <I2C_IsAcknowledgeFailed+0xf0>)
 8001360:	400a      	ands	r2, r1
 8001362:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001368:	2204      	movs	r2, #4
 800136a:	431a      	orrs	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2241      	movs	r2, #65	; 0x41
 8001374:	2120      	movs	r1, #32
 8001376:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2242      	movs	r2, #66	; 0x42
 800137c:	2100      	movs	r1, #0
 800137e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2240      	movs	r2, #64	; 0x40
 8001384:	2100      	movs	r1, #0
 8001386:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	0018      	movs	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	b004      	add	sp, #16
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	fe00e800 	.word	0xfe00e800

0800139c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2241      	movs	r2, #65	; 0x41
 80013aa:	5c9b      	ldrb	r3, [r3, r2]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b20      	cmp	r3, #32
 80013b0:	d138      	bne.n	8001424 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2240      	movs	r2, #64	; 0x40
 80013b6:	5c9b      	ldrb	r3, [r3, r2]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d101      	bne.n	80013c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80013bc:	2302      	movs	r3, #2
 80013be:	e032      	b.n	8001426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2240      	movs	r2, #64	; 0x40
 80013c4:	2101      	movs	r1, #1
 80013c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2241      	movs	r2, #65	; 0x41
 80013cc:	2124      	movs	r1, #36	; 0x24
 80013ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2101      	movs	r1, #1
 80013dc:	438a      	bics	r2, r1
 80013de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4911      	ldr	r1, [pc, #68]	; (8001430 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80013ec:	400a      	ands	r2, r1
 80013ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6819      	ldr	r1, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2101      	movs	r1, #1
 800140c:	430a      	orrs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2241      	movs	r2, #65	; 0x41
 8001414:	2120      	movs	r1, #32
 8001416:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2240      	movs	r2, #64	; 0x40
 800141c:	2100      	movs	r1, #0
 800141e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	e000      	b.n	8001426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001424:	2302      	movs	r3, #2
  }
}
 8001426:	0018      	movs	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	b002      	add	sp, #8
 800142c:	bd80      	pop	{r7, pc}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	ffffefff 	.word	0xffffefff

08001434 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2241      	movs	r2, #65	; 0x41
 8001442:	5c9b      	ldrb	r3, [r3, r2]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b20      	cmp	r3, #32
 8001448:	d139      	bne.n	80014be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2240      	movs	r2, #64	; 0x40
 800144e:	5c9b      	ldrb	r3, [r3, r2]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d101      	bne.n	8001458 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001454:	2302      	movs	r3, #2
 8001456:	e033      	b.n	80014c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2240      	movs	r2, #64	; 0x40
 800145c:	2101      	movs	r1, #1
 800145e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2241      	movs	r2, #65	; 0x41
 8001464:	2124      	movs	r1, #36	; 0x24
 8001466:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2101      	movs	r1, #1
 8001474:	438a      	bics	r2, r1
 8001476:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4a11      	ldr	r2, [pc, #68]	; (80014c8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001484:	4013      	ands	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2101      	movs	r1, #1
 80014a6:	430a      	orrs	r2, r1
 80014a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2241      	movs	r2, #65	; 0x41
 80014ae:	2120      	movs	r1, #32
 80014b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2240      	movs	r2, #64	; 0x40
 80014b6:	2100      	movs	r1, #0
 80014b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e000      	b.n	80014c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80014be:	2302      	movs	r3, #2
  }
}
 80014c0:	0018      	movs	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b004      	add	sp, #16
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	fffff0ff 	.word	0xfffff0ff

080014cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d102      	bne.n	80014e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	f000 fb76 	bl	8001bcc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2201      	movs	r2, #1
 80014e6:	4013      	ands	r3, r2
 80014e8:	d100      	bne.n	80014ec <HAL_RCC_OscConfig+0x20>
 80014ea:	e08e      	b.n	800160a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014ec:	4bc5      	ldr	r3, [pc, #788]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	220c      	movs	r2, #12
 80014f2:	4013      	ands	r3, r2
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d00e      	beq.n	8001516 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014f8:	4bc2      	ldr	r3, [pc, #776]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	220c      	movs	r2, #12
 80014fe:	4013      	ands	r3, r2
 8001500:	2b08      	cmp	r3, #8
 8001502:	d117      	bne.n	8001534 <HAL_RCC_OscConfig+0x68>
 8001504:	4bbf      	ldr	r3, [pc, #764]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	23c0      	movs	r3, #192	; 0xc0
 800150a:	025b      	lsls	r3, r3, #9
 800150c:	401a      	ands	r2, r3
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	025b      	lsls	r3, r3, #9
 8001512:	429a      	cmp	r2, r3
 8001514:	d10e      	bne.n	8001534 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001516:	4bbb      	ldr	r3, [pc, #748]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	029b      	lsls	r3, r3, #10
 800151e:	4013      	ands	r3, r2
 8001520:	d100      	bne.n	8001524 <HAL_RCC_OscConfig+0x58>
 8001522:	e071      	b.n	8001608 <HAL_RCC_OscConfig+0x13c>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d000      	beq.n	800152e <HAL_RCC_OscConfig+0x62>
 800152c:	e06c      	b.n	8001608 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	f000 fb4c 	bl	8001bcc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d107      	bne.n	800154c <HAL_RCC_OscConfig+0x80>
 800153c:	4bb1      	ldr	r3, [pc, #708]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4bb0      	ldr	r3, [pc, #704]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 8001542:	2180      	movs	r1, #128	; 0x80
 8001544:	0249      	lsls	r1, r1, #9
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	e02f      	b.n	80015ac <HAL_RCC_OscConfig+0xe0>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10c      	bne.n	800156e <HAL_RCC_OscConfig+0xa2>
 8001554:	4bab      	ldr	r3, [pc, #684]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4baa      	ldr	r3, [pc, #680]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 800155a:	49ab      	ldr	r1, [pc, #684]	; (8001808 <HAL_RCC_OscConfig+0x33c>)
 800155c:	400a      	ands	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	4ba8      	ldr	r3, [pc, #672]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4ba7      	ldr	r3, [pc, #668]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 8001566:	49a9      	ldr	r1, [pc, #676]	; (800180c <HAL_RCC_OscConfig+0x340>)
 8001568:	400a      	ands	r2, r1
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	e01e      	b.n	80015ac <HAL_RCC_OscConfig+0xe0>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b05      	cmp	r3, #5
 8001574:	d10e      	bne.n	8001594 <HAL_RCC_OscConfig+0xc8>
 8001576:	4ba3      	ldr	r3, [pc, #652]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4ba2      	ldr	r3, [pc, #648]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	02c9      	lsls	r1, r1, #11
 8001580:	430a      	orrs	r2, r1
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	4b9f      	ldr	r3, [pc, #636]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b9e      	ldr	r3, [pc, #632]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 800158a:	2180      	movs	r1, #128	; 0x80
 800158c:	0249      	lsls	r1, r1, #9
 800158e:	430a      	orrs	r2, r1
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	e00b      	b.n	80015ac <HAL_RCC_OscConfig+0xe0>
 8001594:	4b9b      	ldr	r3, [pc, #620]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b9a      	ldr	r3, [pc, #616]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 800159a:	499b      	ldr	r1, [pc, #620]	; (8001808 <HAL_RCC_OscConfig+0x33c>)
 800159c:	400a      	ands	r2, r1
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	4b98      	ldr	r3, [pc, #608]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b97      	ldr	r3, [pc, #604]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 80015a6:	4999      	ldr	r1, [pc, #612]	; (800180c <HAL_RCC_OscConfig+0x340>)
 80015a8:	400a      	ands	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d014      	beq.n	80015de <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff f960 	bl	8000878 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015be:	f7ff f95b 	bl	8000878 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b64      	cmp	r3, #100	; 0x64
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e2fd      	b.n	8001bcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d0:	4b8c      	ldr	r3, [pc, #560]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	029b      	lsls	r3, r3, #10
 80015d8:	4013      	ands	r3, r2
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0xf2>
 80015dc:	e015      	b.n	800160a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7ff f94b 	bl	8000878 <HAL_GetTick>
 80015e2:	0003      	movs	r3, r0
 80015e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e8:	f7ff f946 	bl	8000878 <HAL_GetTick>
 80015ec:	0002      	movs	r2, r0
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	; 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e2e8      	b.n	8001bcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fa:	4b82      	ldr	r3, [pc, #520]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	029b      	lsls	r3, r3, #10
 8001602:	4013      	ands	r3, r2
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x11c>
 8001606:	e000      	b.n	800160a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001608:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2202      	movs	r2, #2
 8001610:	4013      	ands	r3, r2
 8001612:	d100      	bne.n	8001616 <HAL_RCC_OscConfig+0x14a>
 8001614:	e06c      	b.n	80016f0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001616:	4b7b      	ldr	r3, [pc, #492]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	220c      	movs	r2, #12
 800161c:	4013      	ands	r3, r2
 800161e:	d00e      	beq.n	800163e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001620:	4b78      	ldr	r3, [pc, #480]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	220c      	movs	r2, #12
 8001626:	4013      	ands	r3, r2
 8001628:	2b08      	cmp	r3, #8
 800162a:	d11f      	bne.n	800166c <HAL_RCC_OscConfig+0x1a0>
 800162c:	4b75      	ldr	r3, [pc, #468]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	23c0      	movs	r3, #192	; 0xc0
 8001632:	025b      	lsls	r3, r3, #9
 8001634:	401a      	ands	r2, r3
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	429a      	cmp	r2, r3
 800163c:	d116      	bne.n	800166c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163e:	4b71      	ldr	r3, [pc, #452]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2202      	movs	r2, #2
 8001644:	4013      	ands	r3, r2
 8001646:	d005      	beq.n	8001654 <HAL_RCC_OscConfig+0x188>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d001      	beq.n	8001654 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e2bb      	b.n	8001bcc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001654:	4b6b      	ldr	r3, [pc, #428]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	22f8      	movs	r2, #248	; 0xf8
 800165a:	4393      	bics	r3, r2
 800165c:	0019      	movs	r1, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	00da      	lsls	r2, r3, #3
 8001664:	4b67      	ldr	r3, [pc, #412]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 8001666:	430a      	orrs	r2, r1
 8001668:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166a:	e041      	b.n	80016f0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d024      	beq.n	80016be <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001674:	4b63      	ldr	r3, [pc, #396]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b62      	ldr	r3, [pc, #392]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 800167a:	2101      	movs	r1, #1
 800167c:	430a      	orrs	r2, r1
 800167e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff f8fa 	bl	8000878 <HAL_GetTick>
 8001684:	0003      	movs	r3, r0
 8001686:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800168a:	f7ff f8f5 	bl	8000878 <HAL_GetTick>
 800168e:	0002      	movs	r2, r0
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e297      	b.n	8001bcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169c:	4b59      	ldr	r3, [pc, #356]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2202      	movs	r2, #2
 80016a2:	4013      	ands	r3, r2
 80016a4:	d0f1      	beq.n	800168a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a6:	4b57      	ldr	r3, [pc, #348]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	22f8      	movs	r2, #248	; 0xf8
 80016ac:	4393      	bics	r3, r2
 80016ae:	0019      	movs	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	00da      	lsls	r2, r3, #3
 80016b6:	4b53      	ldr	r3, [pc, #332]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 80016b8:	430a      	orrs	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	e018      	b.n	80016f0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016be:	4b51      	ldr	r3, [pc, #324]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	4b50      	ldr	r3, [pc, #320]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 80016c4:	2101      	movs	r1, #1
 80016c6:	438a      	bics	r2, r1
 80016c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ca:	f7ff f8d5 	bl	8000878 <HAL_GetTick>
 80016ce:	0003      	movs	r3, r0
 80016d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d4:	f7ff f8d0 	bl	8000878 <HAL_GetTick>
 80016d8:	0002      	movs	r2, r0
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e272      	b.n	8001bcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e6:	4b47      	ldr	r3, [pc, #284]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2202      	movs	r2, #2
 80016ec:	4013      	ands	r3, r2
 80016ee:	d1f1      	bne.n	80016d4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2208      	movs	r2, #8
 80016f6:	4013      	ands	r3, r2
 80016f8:	d036      	beq.n	8001768 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d019      	beq.n	8001736 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001702:	4b40      	ldr	r3, [pc, #256]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 8001704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001706:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 8001708:	2101      	movs	r1, #1
 800170a:	430a      	orrs	r2, r1
 800170c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170e:	f7ff f8b3 	bl	8000878 <HAL_GetTick>
 8001712:	0003      	movs	r3, r0
 8001714:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001718:	f7ff f8ae 	bl	8000878 <HAL_GetTick>
 800171c:	0002      	movs	r2, r0
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e250      	b.n	8001bcc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172a:	4b36      	ldr	r3, [pc, #216]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	2202      	movs	r2, #2
 8001730:	4013      	ands	r3, r2
 8001732:	d0f1      	beq.n	8001718 <HAL_RCC_OscConfig+0x24c>
 8001734:	e018      	b.n	8001768 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001736:	4b33      	ldr	r3, [pc, #204]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 8001738:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800173a:	4b32      	ldr	r3, [pc, #200]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 800173c:	2101      	movs	r1, #1
 800173e:	438a      	bics	r2, r1
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001742:	f7ff f899 	bl	8000878 <HAL_GetTick>
 8001746:	0003      	movs	r3, r0
 8001748:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800174c:	f7ff f894 	bl	8000878 <HAL_GetTick>
 8001750:	0002      	movs	r2, r0
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e236      	b.n	8001bcc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175e:	4b29      	ldr	r3, [pc, #164]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001762:	2202      	movs	r2, #2
 8001764:	4013      	ands	r3, r2
 8001766:	d1f1      	bne.n	800174c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2204      	movs	r2, #4
 800176e:	4013      	ands	r3, r2
 8001770:	d100      	bne.n	8001774 <HAL_RCC_OscConfig+0x2a8>
 8001772:	e0b5      	b.n	80018e0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001774:	201f      	movs	r0, #31
 8001776:	183b      	adds	r3, r7, r0
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 800177e:	69da      	ldr	r2, [r3, #28]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	055b      	lsls	r3, r3, #21
 8001784:	4013      	ands	r3, r2
 8001786:	d110      	bne.n	80017aa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 800178a:	69da      	ldr	r2, [r3, #28]
 800178c:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	0549      	lsls	r1, r1, #21
 8001792:	430a      	orrs	r2, r1
 8001794:	61da      	str	r2, [r3, #28]
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 8001798:	69da      	ldr	r2, [r3, #28]
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	055b      	lsls	r3, r3, #21
 800179e:	4013      	ands	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017a4:	183b      	adds	r3, r7, r0
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_RCC_OscConfig+0x344>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	4013      	ands	r3, r2
 80017b4:	d11a      	bne.n	80017ec <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <HAL_RCC_OscConfig+0x344>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_RCC_OscConfig+0x344>)
 80017bc:	2180      	movs	r1, #128	; 0x80
 80017be:	0049      	lsls	r1, r1, #1
 80017c0:	430a      	orrs	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c4:	f7ff f858 	bl	8000878 <HAL_GetTick>
 80017c8:	0003      	movs	r3, r0
 80017ca:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ce:	f7ff f853 	bl	8000878 <HAL_GetTick>
 80017d2:	0002      	movs	r2, r0
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b64      	cmp	r3, #100	; 0x64
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e1f5      	b.n	8001bcc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_RCC_OscConfig+0x344>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4013      	ands	r3, r2
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d10f      	bne.n	8001814 <HAL_RCC_OscConfig+0x348>
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 80017f6:	6a1a      	ldr	r2, [r3, #32]
 80017f8:	4b02      	ldr	r3, [pc, #8]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 80017fa:	2101      	movs	r1, #1
 80017fc:	430a      	orrs	r2, r1
 80017fe:	621a      	str	r2, [r3, #32]
 8001800:	e036      	b.n	8001870 <HAL_RCC_OscConfig+0x3a4>
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	40021000 	.word	0x40021000
 8001808:	fffeffff 	.word	0xfffeffff
 800180c:	fffbffff 	.word	0xfffbffff
 8001810:	40007000 	.word	0x40007000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10c      	bne.n	8001836 <HAL_RCC_OscConfig+0x36a>
 800181c:	4bca      	ldr	r3, [pc, #808]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 800181e:	6a1a      	ldr	r2, [r3, #32]
 8001820:	4bc9      	ldr	r3, [pc, #804]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001822:	2101      	movs	r1, #1
 8001824:	438a      	bics	r2, r1
 8001826:	621a      	str	r2, [r3, #32]
 8001828:	4bc7      	ldr	r3, [pc, #796]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 800182a:	6a1a      	ldr	r2, [r3, #32]
 800182c:	4bc6      	ldr	r3, [pc, #792]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 800182e:	2104      	movs	r1, #4
 8001830:	438a      	bics	r2, r1
 8001832:	621a      	str	r2, [r3, #32]
 8001834:	e01c      	b.n	8001870 <HAL_RCC_OscConfig+0x3a4>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b05      	cmp	r3, #5
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x38c>
 800183e:	4bc2      	ldr	r3, [pc, #776]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001840:	6a1a      	ldr	r2, [r3, #32]
 8001842:	4bc1      	ldr	r3, [pc, #772]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001844:	2104      	movs	r1, #4
 8001846:	430a      	orrs	r2, r1
 8001848:	621a      	str	r2, [r3, #32]
 800184a:	4bbf      	ldr	r3, [pc, #764]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 800184c:	6a1a      	ldr	r2, [r3, #32]
 800184e:	4bbe      	ldr	r3, [pc, #760]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001850:	2101      	movs	r1, #1
 8001852:	430a      	orrs	r2, r1
 8001854:	621a      	str	r2, [r3, #32]
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0x3a4>
 8001858:	4bbb      	ldr	r3, [pc, #748]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 800185a:	6a1a      	ldr	r2, [r3, #32]
 800185c:	4bba      	ldr	r3, [pc, #744]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 800185e:	2101      	movs	r1, #1
 8001860:	438a      	bics	r2, r1
 8001862:	621a      	str	r2, [r3, #32]
 8001864:	4bb8      	ldr	r3, [pc, #736]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001866:	6a1a      	ldr	r2, [r3, #32]
 8001868:	4bb7      	ldr	r3, [pc, #732]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 800186a:	2104      	movs	r1, #4
 800186c:	438a      	bics	r2, r1
 800186e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d014      	beq.n	80018a2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001878:	f7fe fffe 	bl	8000878 <HAL_GetTick>
 800187c:	0003      	movs	r3, r0
 800187e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001880:	e009      	b.n	8001896 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001882:	f7fe fff9 	bl	8000878 <HAL_GetTick>
 8001886:	0002      	movs	r2, r0
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	4aaf      	ldr	r2, [pc, #700]	; (8001b4c <HAL_RCC_OscConfig+0x680>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e19a      	b.n	8001bcc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001896:	4bac      	ldr	r3, [pc, #688]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	2202      	movs	r2, #2
 800189c:	4013      	ands	r3, r2
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x3b6>
 80018a0:	e013      	b.n	80018ca <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a2:	f7fe ffe9 	bl	8000878 <HAL_GetTick>
 80018a6:	0003      	movs	r3, r0
 80018a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018aa:	e009      	b.n	80018c0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ac:	f7fe ffe4 	bl	8000878 <HAL_GetTick>
 80018b0:	0002      	movs	r2, r0
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	4aa5      	ldr	r2, [pc, #660]	; (8001b4c <HAL_RCC_OscConfig+0x680>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e185      	b.n	8001bcc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c0:	4ba1      	ldr	r3, [pc, #644]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	2202      	movs	r2, #2
 80018c6:	4013      	ands	r3, r2
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018ca:	231f      	movs	r3, #31
 80018cc:	18fb      	adds	r3, r7, r3
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d105      	bne.n	80018e0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d4:	4b9c      	ldr	r3, [pc, #624]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 80018d6:	69da      	ldr	r2, [r3, #28]
 80018d8:	4b9b      	ldr	r3, [pc, #620]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 80018da:	499d      	ldr	r1, [pc, #628]	; (8001b50 <HAL_RCC_OscConfig+0x684>)
 80018dc:	400a      	ands	r2, r1
 80018de:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2210      	movs	r2, #16
 80018e6:	4013      	ands	r3, r2
 80018e8:	d063      	beq.n	80019b2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d12a      	bne.n	8001948 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018f2:	4b95      	ldr	r3, [pc, #596]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 80018f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f6:	4b94      	ldr	r3, [pc, #592]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 80018f8:	2104      	movs	r1, #4
 80018fa:	430a      	orrs	r2, r1
 80018fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80018fe:	4b92      	ldr	r3, [pc, #584]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001902:	4b91      	ldr	r3, [pc, #580]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001904:	2101      	movs	r1, #1
 8001906:	430a      	orrs	r2, r1
 8001908:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190a:	f7fe ffb5 	bl	8000878 <HAL_GetTick>
 800190e:	0003      	movs	r3, r0
 8001910:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001914:	f7fe ffb0 	bl	8000878 <HAL_GetTick>
 8001918:	0002      	movs	r2, r0
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e152      	b.n	8001bcc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001926:	4b88      	ldr	r3, [pc, #544]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192a:	2202      	movs	r2, #2
 800192c:	4013      	ands	r3, r2
 800192e:	d0f1      	beq.n	8001914 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001930:	4b85      	ldr	r3, [pc, #532]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001934:	22f8      	movs	r2, #248	; 0xf8
 8001936:	4393      	bics	r3, r2
 8001938:	0019      	movs	r1, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	00da      	lsls	r2, r3, #3
 8001940:	4b81      	ldr	r3, [pc, #516]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001942:	430a      	orrs	r2, r1
 8001944:	635a      	str	r2, [r3, #52]	; 0x34
 8001946:	e034      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	3305      	adds	r3, #5
 800194e:	d111      	bne.n	8001974 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001950:	4b7d      	ldr	r3, [pc, #500]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001954:	4b7c      	ldr	r3, [pc, #496]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001956:	2104      	movs	r1, #4
 8001958:	438a      	bics	r2, r1
 800195a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800195c:	4b7a      	ldr	r3, [pc, #488]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 800195e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001960:	22f8      	movs	r2, #248	; 0xf8
 8001962:	4393      	bics	r3, r2
 8001964:	0019      	movs	r1, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	00da      	lsls	r2, r3, #3
 800196c:	4b76      	ldr	r3, [pc, #472]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 800196e:	430a      	orrs	r2, r1
 8001970:	635a      	str	r2, [r3, #52]	; 0x34
 8001972:	e01e      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001974:	4b74      	ldr	r3, [pc, #464]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001976:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001978:	4b73      	ldr	r3, [pc, #460]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 800197a:	2104      	movs	r1, #4
 800197c:	430a      	orrs	r2, r1
 800197e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001980:	4b71      	ldr	r3, [pc, #452]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001984:	4b70      	ldr	r3, [pc, #448]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001986:	2101      	movs	r1, #1
 8001988:	438a      	bics	r2, r1
 800198a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198c:	f7fe ff74 	bl	8000878 <HAL_GetTick>
 8001990:	0003      	movs	r3, r0
 8001992:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001996:	f7fe ff6f 	bl	8000878 <HAL_GetTick>
 800199a:	0002      	movs	r2, r0
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e111      	b.n	8001bcc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019a8:	4b67      	ldr	r3, [pc, #412]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 80019aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ac:	2202      	movs	r2, #2
 80019ae:	4013      	ands	r3, r2
 80019b0:	d1f1      	bne.n	8001996 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2220      	movs	r2, #32
 80019b8:	4013      	ands	r3, r2
 80019ba:	d05c      	beq.n	8001a76 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80019bc:	4b62      	ldr	r3, [pc, #392]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	220c      	movs	r2, #12
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b0c      	cmp	r3, #12
 80019c6:	d00e      	beq.n	80019e6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80019c8:	4b5f      	ldr	r3, [pc, #380]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	220c      	movs	r2, #12
 80019ce:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d114      	bne.n	80019fe <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80019d4:	4b5c      	ldr	r3, [pc, #368]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	23c0      	movs	r3, #192	; 0xc0
 80019da:	025b      	lsls	r3, r3, #9
 80019dc:	401a      	ands	r2, r3
 80019de:	23c0      	movs	r3, #192	; 0xc0
 80019e0:	025b      	lsls	r3, r3, #9
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d10b      	bne.n	80019fe <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80019e6:	4b58      	ldr	r3, [pc, #352]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 80019e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	025b      	lsls	r3, r3, #9
 80019ee:	4013      	ands	r3, r2
 80019f0:	d040      	beq.n	8001a74 <HAL_RCC_OscConfig+0x5a8>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d03c      	beq.n	8001a74 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e0e6      	b.n	8001bcc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d01b      	beq.n	8001a3e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001a06:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a0a:	4b4f      	ldr	r3, [pc, #316]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001a0c:	2180      	movs	r1, #128	; 0x80
 8001a0e:	0249      	lsls	r1, r1, #9
 8001a10:	430a      	orrs	r2, r1
 8001a12:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7fe ff30 	bl	8000878 <HAL_GetTick>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a1e:	f7fe ff2b 	bl	8000878 <HAL_GetTick>
 8001a22:	0002      	movs	r2, r0
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e0cd      	b.n	8001bcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a30:	4b45      	ldr	r3, [pc, #276]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	025b      	lsls	r3, r3, #9
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x552>
 8001a3c:	e01b      	b.n	8001a76 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001a3e:	4b42      	ldr	r3, [pc, #264]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a42:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001a44:	4943      	ldr	r1, [pc, #268]	; (8001b54 <HAL_RCC_OscConfig+0x688>)
 8001a46:	400a      	ands	r2, r1
 8001a48:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4a:	f7fe ff15 	bl	8000878 <HAL_GetTick>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a54:	f7fe ff10 	bl	8000878 <HAL_GetTick>
 8001a58:	0002      	movs	r2, r0
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e0b2      	b.n	8001bcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a66:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	025b      	lsls	r3, r3, #9
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x588>
 8001a72:	e000      	b.n	8001a76 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001a74:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d100      	bne.n	8001a80 <HAL_RCC_OscConfig+0x5b4>
 8001a7e:	e0a4      	b.n	8001bca <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a80:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	220c      	movs	r2, #12
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d100      	bne.n	8001a8e <HAL_RCC_OscConfig+0x5c2>
 8001a8c:	e078      	b.n	8001b80 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d14c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a96:	4b2c      	ldr	r3, [pc, #176]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001a9c:	492e      	ldr	r1, [pc, #184]	; (8001b58 <HAL_RCC_OscConfig+0x68c>)
 8001a9e:	400a      	ands	r2, r1
 8001aa0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa2:	f7fe fee9 	bl	8000878 <HAL_GetTick>
 8001aa6:	0003      	movs	r3, r0
 8001aa8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aac:	f7fe fee4 	bl	8000878 <HAL_GetTick>
 8001ab0:	0002      	movs	r2, r0
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e086      	b.n	8001bcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001abe:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	049b      	lsls	r3, r3, #18
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aca:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	220f      	movs	r2, #15
 8001ad0:	4393      	bics	r3, r2
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001ada:	430a      	orrs	r2, r1
 8001adc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4a1e      	ldr	r2, [pc, #120]	; (8001b5c <HAL_RCC_OscConfig+0x690>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	431a      	orrs	r2, r3
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001af4:	430a      	orrs	r2, r1
 8001af6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af8:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001afe:	2180      	movs	r1, #128	; 0x80
 8001b00:	0449      	lsls	r1, r1, #17
 8001b02:	430a      	orrs	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b06:	f7fe feb7 	bl	8000878 <HAL_GetTick>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b10:	f7fe feb2 	bl	8000878 <HAL_GetTick>
 8001b14:	0002      	movs	r2, r0
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e054      	b.n	8001bcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	049b      	lsls	r3, r3, #18
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x644>
 8001b2e:	e04c      	b.n	8001bca <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <HAL_RCC_OscConfig+0x67c>)
 8001b36:	4908      	ldr	r1, [pc, #32]	; (8001b58 <HAL_RCC_OscConfig+0x68c>)
 8001b38:	400a      	ands	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7fe fe9c 	bl	8000878 <HAL_GetTick>
 8001b40:	0003      	movs	r3, r0
 8001b42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b44:	e015      	b.n	8001b72 <HAL_RCC_OscConfig+0x6a6>
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	00001388 	.word	0x00001388
 8001b50:	efffffff 	.word	0xefffffff
 8001b54:	fffeffff 	.word	0xfffeffff
 8001b58:	feffffff 	.word	0xfeffffff
 8001b5c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b60:	f7fe fe8a 	bl	8000878 <HAL_GetTick>
 8001b64:	0002      	movs	r2, r0
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e02c      	b.n	8001bcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <HAL_RCC_OscConfig+0x708>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	049b      	lsls	r3, r3, #18
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x694>
 8001b7e:	e024      	b.n	8001bca <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e01f      	b.n	8001bcc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_RCC_OscConfig+0x708>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <HAL_RCC_OscConfig+0x708>)
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	23c0      	movs	r3, #192	; 0xc0
 8001b9c:	025b      	lsls	r3, r3, #9
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d10e      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	220f      	movs	r2, #15
 8001bac:	401a      	ands	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d107      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	23f0      	movs	r3, #240	; 0xf0
 8001bba:	039b      	lsls	r3, r3, #14
 8001bbc:	401a      	ands	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d001      	beq.n	8001bca <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	0018      	movs	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b008      	add	sp, #32
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40021000 	.word	0x40021000

08001bd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0bf      	b.n	8001d6c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bec:	4b61      	ldr	r3, [pc, #388]	; (8001d74 <HAL_RCC_ClockConfig+0x19c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d911      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4b5e      	ldr	r3, [pc, #376]	; (8001d74 <HAL_RCC_ClockConfig+0x19c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	4393      	bics	r3, r2
 8001c02:	0019      	movs	r1, r3
 8001c04:	4b5b      	ldr	r3, [pc, #364]	; (8001d74 <HAL_RCC_ClockConfig+0x19c>)
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0c:	4b59      	ldr	r3, [pc, #356]	; (8001d74 <HAL_RCC_ClockConfig+0x19c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2201      	movs	r2, #1
 8001c12:	4013      	ands	r3, r2
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d001      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e0a6      	b.n	8001d6c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2202      	movs	r2, #2
 8001c24:	4013      	ands	r3, r2
 8001c26:	d015      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d006      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c32:	4b51      	ldr	r3, [pc, #324]	; (8001d78 <HAL_RCC_ClockConfig+0x1a0>)
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	4b50      	ldr	r3, [pc, #320]	; (8001d78 <HAL_RCC_ClockConfig+0x1a0>)
 8001c38:	21e0      	movs	r1, #224	; 0xe0
 8001c3a:	00c9      	lsls	r1, r1, #3
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c40:	4b4d      	ldr	r3, [pc, #308]	; (8001d78 <HAL_RCC_ClockConfig+0x1a0>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	22f0      	movs	r2, #240	; 0xf0
 8001c46:	4393      	bics	r3, r2
 8001c48:	0019      	movs	r1, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <HAL_RCC_ClockConfig+0x1a0>)
 8001c50:	430a      	orrs	r2, r1
 8001c52:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d04c      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c66:	4b44      	ldr	r3, [pc, #272]	; (8001d78 <HAL_RCC_ClockConfig+0x1a0>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	029b      	lsls	r3, r3, #10
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d120      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e07a      	b.n	8001d6c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	4b3e      	ldr	r3, [pc, #248]	; (8001d78 <HAL_RCC_ClockConfig+0x1a0>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	049b      	lsls	r3, r3, #18
 8001c86:	4013      	ands	r3, r2
 8001c88:	d114      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e06e      	b.n	8001d6c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d107      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c96:	4b38      	ldr	r3, [pc, #224]	; (8001d78 <HAL_RCC_ClockConfig+0x1a0>)
 8001c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	025b      	lsls	r3, r3, #9
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d108      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e062      	b.n	8001d6c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca6:	4b34      	ldr	r3, [pc, #208]	; (8001d78 <HAL_RCC_ClockConfig+0x1a0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2202      	movs	r2, #2
 8001cac:	4013      	ands	r3, r2
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e05b      	b.n	8001d6c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cb4:	4b30      	ldr	r3, [pc, #192]	; (8001d78 <HAL_RCC_ClockConfig+0x1a0>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2203      	movs	r2, #3
 8001cba:	4393      	bics	r3, r2
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <HAL_RCC_ClockConfig+0x1a0>)
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cc8:	f7fe fdd6 	bl	8000878 <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd0:	e009      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd2:	f7fe fdd1 	bl	8000878 <HAL_GetTick>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	4a27      	ldr	r2, [pc, #156]	; (8001d7c <HAL_RCC_ClockConfig+0x1a4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e042      	b.n	8001d6c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_RCC_ClockConfig+0x1a0>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	220c      	movs	r2, #12
 8001cec:	401a      	ands	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d1ec      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf8:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <HAL_RCC_ClockConfig+0x19c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	4013      	ands	r3, r2
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d211      	bcs.n	8001d2a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d06:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_RCC_ClockConfig+0x19c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4393      	bics	r3, r2
 8001d0e:	0019      	movs	r1, r3
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <HAL_RCC_ClockConfig+0x19c>)
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d18:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <HAL_RCC_ClockConfig+0x19c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4013      	ands	r3, r2
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e020      	b.n	8001d6c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2204      	movs	r2, #4
 8001d30:	4013      	ands	r3, r2
 8001d32:	d009      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d34:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <HAL_RCC_ClockConfig+0x1a0>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	4a11      	ldr	r2, [pc, #68]	; (8001d80 <HAL_RCC_ClockConfig+0x1a8>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	0019      	movs	r1, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <HAL_RCC_ClockConfig+0x1a0>)
 8001d44:	430a      	orrs	r2, r1
 8001d46:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d48:	f000 f820 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d4c:	0001      	movs	r1, r0
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_RCC_ClockConfig+0x1a0>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	091b      	lsrs	r3, r3, #4
 8001d54:	220f      	movs	r2, #15
 8001d56:	4013      	ands	r3, r2
 8001d58:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <HAL_RCC_ClockConfig+0x1ac>)
 8001d5a:	5cd3      	ldrb	r3, [r2, r3]
 8001d5c:	000a      	movs	r2, r1
 8001d5e:	40da      	lsrs	r2, r3
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_RCC_ClockConfig+0x1b0>)
 8001d62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d64:	2000      	movs	r0, #0
 8001d66:	f7fe fd41 	bl	80007ec <HAL_InitTick>
  
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b004      	add	sp, #16
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40022000 	.word	0x40022000
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	00001388 	.word	0x00001388
 8001d80:	fffff8ff 	.word	0xfffff8ff
 8001d84:	08003308 	.word	0x08003308
 8001d88:	20000000 	.word	0x20000000

08001d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b08f      	sub	sp, #60	; 0x3c
 8001d90:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d92:	2314      	movs	r3, #20
 8001d94:	18fb      	adds	r3, r7, r3
 8001d96:	4a38      	ldr	r2, [pc, #224]	; (8001e78 <HAL_RCC_GetSysClockFreq+0xec>)
 8001d98:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d9a:	c313      	stmia	r3!, {r0, r1, r4}
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	4a36      	ldr	r2, [pc, #216]	; (8001e7c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001da4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001da6:	c313      	stmia	r3!, {r0, r1, r4}
 8001da8:	6812      	ldr	r2, [r2, #0]
 8001daa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001db0:	2300      	movs	r3, #0
 8001db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001db4:	2300      	movs	r3, #0
 8001db6:	637b      	str	r3, [r7, #52]	; 0x34
 8001db8:	2300      	movs	r3, #0
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001dc0:	4b2f      	ldr	r3, [pc, #188]	; (8001e80 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc8:	220c      	movs	r2, #12
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b0c      	cmp	r3, #12
 8001dce:	d047      	beq.n	8001e60 <HAL_RCC_GetSysClockFreq+0xd4>
 8001dd0:	d849      	bhi.n	8001e66 <HAL_RCC_GetSysClockFreq+0xda>
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d002      	beq.n	8001ddc <HAL_RCC_GetSysClockFreq+0x50>
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d003      	beq.n	8001de2 <HAL_RCC_GetSysClockFreq+0x56>
 8001dda:	e044      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ddc:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dde:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001de0:	e044      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de4:	0c9b      	lsrs	r3, r3, #18
 8001de6:	220f      	movs	r2, #15
 8001de8:	4013      	ands	r3, r2
 8001dea:	2214      	movs	r2, #20
 8001dec:	18ba      	adds	r2, r7, r2
 8001dee:	5cd3      	ldrb	r3, [r2, r3]
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001df2:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	220f      	movs	r2, #15
 8001df8:	4013      	ands	r3, r2
 8001dfa:	1d3a      	adds	r2, r7, #4
 8001dfc:	5cd3      	ldrb	r3, [r2, r3]
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e02:	23c0      	movs	r3, #192	; 0xc0
 8001e04:	025b      	lsls	r3, r3, #9
 8001e06:	401a      	ands	r2, r3
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	025b      	lsls	r3, r3, #9
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d109      	bne.n	8001e24 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e12:	481c      	ldr	r0, [pc, #112]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e14:	f7fe f980 	bl	8000118 <__udivsi3>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	001a      	movs	r2, r3
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	4353      	muls	r3, r2
 8001e20:	637b      	str	r3, [r7, #52]	; 0x34
 8001e22:	e01a      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e26:	23c0      	movs	r3, #192	; 0xc0
 8001e28:	025b      	lsls	r3, r3, #9
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	23c0      	movs	r3, #192	; 0xc0
 8001e2e:	025b      	lsls	r3, r3, #9
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d109      	bne.n	8001e48 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e36:	4814      	ldr	r0, [pc, #80]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e38:	f7fe f96e 	bl	8000118 <__udivsi3>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	001a      	movs	r2, r3
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	4353      	muls	r3, r2
 8001e44:	637b      	str	r3, [r7, #52]	; 0x34
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e4a:	480e      	ldr	r0, [pc, #56]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e4c:	f7fe f964 	bl	8000118 <__udivsi3>
 8001e50:	0003      	movs	r3, r0
 8001e52:	001a      	movs	r2, r3
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	4353      	muls	r3, r2
 8001e58:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e5e:	e005      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e64:	e002      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e68:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e6a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e6e:	0018      	movs	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b00f      	add	sp, #60	; 0x3c
 8001e74:	bd90      	pop	{r4, r7, pc}
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	080032e8 	.word	0x080032e8
 8001e7c:	080032f8 	.word	0x080032f8
 8001e80:	40021000 	.word	0x40021000
 8001e84:	007a1200 	.word	0x007a1200
 8001e88:	02dc6c00 	.word	0x02dc6c00

08001e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e90:	4b02      	ldr	r3, [pc, #8]	; (8001e9c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	0018      	movs	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	20000000 	.word	0x20000000

08001ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ea4:	f7ff fff2 	bl	8001e8c <HAL_RCC_GetHCLKFreq>
 8001ea8:	0001      	movs	r1, r0
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	2207      	movs	r2, #7
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eb6:	5cd3      	ldrb	r3, [r2, r3]
 8001eb8:	40d9      	lsrs	r1, r3
 8001eba:	000b      	movs	r3, r1
}    
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	08003318 	.word	0x08003318

08001ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	025b      	lsls	r3, r3, #9
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d100      	bne.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001ee8:	e08e      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001eea:	2017      	movs	r0, #23
 8001eec:	183b      	adds	r3, r7, r0
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef2:	4b6e      	ldr	r3, [pc, #440]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ef4:	69da      	ldr	r2, [r3, #28]
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	055b      	lsls	r3, r3, #21
 8001efa:	4013      	ands	r3, r2
 8001efc:	d110      	bne.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	4b6b      	ldr	r3, [pc, #428]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f00:	69da      	ldr	r2, [r3, #28]
 8001f02:	4b6a      	ldr	r3, [pc, #424]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f04:	2180      	movs	r1, #128	; 0x80
 8001f06:	0549      	lsls	r1, r1, #21
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	61da      	str	r2, [r3, #28]
 8001f0c:	4b67      	ldr	r3, [pc, #412]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f0e:	69da      	ldr	r2, [r3, #28]
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	055b      	lsls	r3, r3, #21
 8001f14:	4013      	ands	r3, r2
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f1a:	183b      	adds	r3, r7, r0
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f20:	4b63      	ldr	r3, [pc, #396]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d11a      	bne.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f2c:	4b60      	ldr	r3, [pc, #384]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b5f      	ldr	r3, [pc, #380]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f32:	2180      	movs	r1, #128	; 0x80
 8001f34:	0049      	lsls	r1, r1, #1
 8001f36:	430a      	orrs	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3a:	f7fe fc9d 	bl	8000878 <HAL_GetTick>
 8001f3e:	0003      	movs	r3, r0
 8001f40:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f42:	e008      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f44:	f7fe fc98 	bl	8000878 <HAL_GetTick>
 8001f48:	0002      	movs	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	; 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e0a6      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f56:	4b56      	ldr	r3, [pc, #344]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f62:	4b52      	ldr	r3, [pc, #328]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f64:	6a1a      	ldr	r2, [r3, #32]
 8001f66:	23c0      	movs	r3, #192	; 0xc0
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d034      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	23c0      	movs	r3, #192	; 0xc0
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d02c      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f84:	4b49      	ldr	r3, [pc, #292]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4a4a      	ldr	r2, [pc, #296]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f8e:	4b47      	ldr	r3, [pc, #284]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f90:	6a1a      	ldr	r2, [r3, #32]
 8001f92:	4b46      	ldr	r3, [pc, #280]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f94:	2180      	movs	r1, #128	; 0x80
 8001f96:	0249      	lsls	r1, r1, #9
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f9c:	4b43      	ldr	r3, [pc, #268]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f9e:	6a1a      	ldr	r2, [r3, #32]
 8001fa0:	4b42      	ldr	r3, [pc, #264]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fa2:	4945      	ldr	r1, [pc, #276]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fa8:	4b40      	ldr	r3, [pc, #256]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d013      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb6:	f7fe fc5f 	bl	8000878 <HAL_GetTick>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbe:	e009      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc0:	f7fe fc5a 	bl	8000878 <HAL_GetTick>
 8001fc4:	0002      	movs	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	4a3c      	ldr	r2, [pc, #240]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e067      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd4:	4b35      	ldr	r3, [pc, #212]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fde:	4b33      	ldr	r3, [pc, #204]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	4a34      	ldr	r2, [pc, #208]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	4b2f      	ldr	r3, [pc, #188]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ff2:	2317      	movs	r3, #23
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d105      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffc:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ffe:	69da      	ldr	r2, [r3, #28]
 8002000:	4b2a      	ldr	r3, [pc, #168]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002002:	492f      	ldr	r1, [pc, #188]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002004:	400a      	ands	r2, r1
 8002006:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2201      	movs	r2, #1
 800200e:	4013      	ands	r3, r2
 8002010:	d009      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002012:	4b26      	ldr	r3, [pc, #152]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	2203      	movs	r2, #3
 8002018:	4393      	bics	r3, r2
 800201a:	0019      	movs	r1, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	4b22      	ldr	r3, [pc, #136]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002022:	430a      	orrs	r2, r1
 8002024:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2202      	movs	r2, #2
 800202c:	4013      	ands	r3, r2
 800202e:	d009      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002030:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	4a23      	ldr	r2, [pc, #140]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002036:	4013      	ands	r3, r2
 8002038:	0019      	movs	r1, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002040:	430a      	orrs	r2, r1
 8002042:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	02db      	lsls	r3, r3, #11
 800204c:	4013      	ands	r3, r2
 800204e:	d009      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002050:	4b16      	ldr	r3, [pc, #88]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	4a1c      	ldr	r2, [pc, #112]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002056:	4013      	ands	r3, r2
 8002058:	0019      	movs	r1, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	4b13      	ldr	r3, [pc, #76]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002060:	430a      	orrs	r2, r1
 8002062:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2220      	movs	r2, #32
 800206a:	4013      	ands	r3, r2
 800206c:	d009      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800206e:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	2210      	movs	r2, #16
 8002074:	4393      	bics	r3, r2
 8002076:	0019      	movs	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	695a      	ldr	r2, [r3, #20]
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800207e:	430a      	orrs	r2, r1
 8002080:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4013      	ands	r3, r2
 800208c:	d009      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	2240      	movs	r2, #64	; 0x40
 8002094:	4393      	bics	r3, r2
 8002096:	0019      	movs	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699a      	ldr	r2, [r3, #24]
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800209e:	430a      	orrs	r2, r1
 80020a0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	0018      	movs	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b006      	add	sp, #24
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40007000 	.word	0x40007000
 80020b4:	fffffcff 	.word	0xfffffcff
 80020b8:	fffeffff 	.word	0xfffeffff
 80020bc:	00001388 	.word	0x00001388
 80020c0:	efffffff 	.word	0xefffffff
 80020c4:	fffcffff 	.word	0xfffcffff
 80020c8:	fff3ffff 	.word	0xfff3ffff

080020cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e044      	b.n	8002168 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d107      	bne.n	80020f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2274      	movs	r2, #116	; 0x74
 80020ea:	2100      	movs	r1, #0
 80020ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	0018      	movs	r0, r3
 80020f2:	f7fe fa9d 	bl	8000630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2224      	movs	r2, #36	; 0x24
 80020fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2101      	movs	r1, #1
 8002108:	438a      	bics	r2, r1
 800210a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	0018      	movs	r0, r3
 8002110:	f000 f8da 	bl	80022c8 <UART_SetConfig>
 8002114:	0003      	movs	r3, r0
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e024      	b.n	8002168 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	0018      	movs	r0, r3
 800212a:	f000 fab5 	bl	8002698 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	490d      	ldr	r1, [pc, #52]	; (8002170 <HAL_UART_Init+0xa4>)
 800213a:	400a      	ands	r2, r1
 800213c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	212a      	movs	r1, #42	; 0x2a
 800214a:	438a      	bics	r2, r1
 800214c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2101      	movs	r1, #1
 800215a:	430a      	orrs	r2, r1
 800215c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	0018      	movs	r0, r3
 8002162:	f000 fb4d 	bl	8002800 <UART_CheckIdleState>
 8002166:	0003      	movs	r3, r0
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b002      	add	sp, #8
 800216e:	bd80      	pop	{r7, pc}
 8002170:	ffffb7ff 	.word	0xffffb7ff

08002174 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	; 0x28
 8002178:	af02      	add	r7, sp, #8
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	1dbb      	adds	r3, r7, #6
 8002182:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002188:	2b20      	cmp	r3, #32
 800218a:	d000      	beq.n	800218e <HAL_UART_Transmit+0x1a>
 800218c:	e096      	b.n	80022bc <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_UART_Transmit+0x28>
 8002194:	1dbb      	adds	r3, r7, #6
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e08e      	b.n	80022be <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	015b      	lsls	r3, r3, #5
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d109      	bne.n	80021c0 <HAL_UART_Transmit+0x4c>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d105      	bne.n	80021c0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2201      	movs	r2, #1
 80021b8:	4013      	ands	r3, r2
 80021ba:	d001      	beq.n	80021c0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e07e      	b.n	80022be <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2274      	movs	r2, #116	; 0x74
 80021c4:	5c9b      	ldrb	r3, [r3, r2]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <HAL_UART_Transmit+0x5a>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e077      	b.n	80022be <HAL_UART_Transmit+0x14a>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2274      	movs	r2, #116	; 0x74
 80021d2:	2101      	movs	r1, #1
 80021d4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2280      	movs	r2, #128	; 0x80
 80021da:	2100      	movs	r1, #0
 80021dc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2221      	movs	r2, #33	; 0x21
 80021e2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021e4:	f7fe fb48 	bl	8000878 <HAL_GetTick>
 80021e8:	0003      	movs	r3, r0
 80021ea:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1dba      	adds	r2, r7, #6
 80021f0:	2150      	movs	r1, #80	; 0x50
 80021f2:	8812      	ldrh	r2, [r2, #0]
 80021f4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1dba      	adds	r2, r7, #6
 80021fa:	2152      	movs	r1, #82	; 0x52
 80021fc:	8812      	ldrh	r2, [r2, #0]
 80021fe:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	2380      	movs	r3, #128	; 0x80
 8002206:	015b      	lsls	r3, r3, #5
 8002208:	429a      	cmp	r2, r3
 800220a:	d108      	bne.n	800221e <HAL_UART_Transmit+0xaa>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d104      	bne.n	800221e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002214:	2300      	movs	r3, #0
 8002216:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	61bb      	str	r3, [r7, #24]
 800221c:	e003      	b.n	8002226 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2274      	movs	r2, #116	; 0x74
 800222a:	2100      	movs	r1, #0
 800222c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800222e:	e02d      	b.n	800228c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	0013      	movs	r3, r2
 800223a:	2200      	movs	r2, #0
 800223c:	2180      	movs	r1, #128	; 0x80
 800223e:	f000 fb27 	bl	8002890 <UART_WaitOnFlagUntilTimeout>
 8002242:	1e03      	subs	r3, r0, #0
 8002244:	d001      	beq.n	800224a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e039      	b.n	80022be <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10b      	bne.n	8002268 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	881a      	ldrh	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	05d2      	lsls	r2, r2, #23
 800225a:	0dd2      	lsrs	r2, r2, #23
 800225c:	b292      	uxth	r2, r2
 800225e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	3302      	adds	r3, #2
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	e008      	b.n	800227a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	781a      	ldrb	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	b292      	uxth	r2, r2
 8002272:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	3301      	adds	r3, #1
 8002278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2252      	movs	r2, #82	; 0x52
 800227e:	5a9b      	ldrh	r3, [r3, r2]
 8002280:	b29b      	uxth	r3, r3
 8002282:	3b01      	subs	r3, #1
 8002284:	b299      	uxth	r1, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2252      	movs	r2, #82	; 0x52
 800228a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2252      	movs	r2, #82	; 0x52
 8002290:	5a9b      	ldrh	r3, [r3, r2]
 8002292:	b29b      	uxth	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1cb      	bne.n	8002230 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	0013      	movs	r3, r2
 80022a2:	2200      	movs	r2, #0
 80022a4:	2140      	movs	r1, #64	; 0x40
 80022a6:	f000 faf3 	bl	8002890 <UART_WaitOnFlagUntilTimeout>
 80022aa:	1e03      	subs	r3, r0, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e005      	b.n	80022be <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2220      	movs	r2, #32
 80022b6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	e000      	b.n	80022be <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80022bc:	2302      	movs	r3, #2
  }
}
 80022be:	0018      	movs	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b008      	add	sp, #32
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80022d0:	231e      	movs	r3, #30
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4abe      	ldr	r2, [pc, #760]	; (80025f0 <UART_SetConfig+0x328>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	0019      	movs	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	430a      	orrs	r2, r1
 8002304:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4ab9      	ldr	r2, [pc, #740]	; (80025f4 <UART_SetConfig+0x32c>)
 800230e:	4013      	ands	r3, r2
 8002310:	0019      	movs	r1, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	4313      	orrs	r3, r2
 800232c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	4ab0      	ldr	r2, [pc, #704]	; (80025f8 <UART_SetConfig+0x330>)
 8002336:	4013      	ands	r3, r2
 8002338:	0019      	movs	r1, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	430a      	orrs	r2, r1
 8002342:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4aac      	ldr	r2, [pc, #688]	; (80025fc <UART_SetConfig+0x334>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d127      	bne.n	800239e <UART_SetConfig+0xd6>
 800234e:	4bac      	ldr	r3, [pc, #688]	; (8002600 <UART_SetConfig+0x338>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	2203      	movs	r2, #3
 8002354:	4013      	ands	r3, r2
 8002356:	2b03      	cmp	r3, #3
 8002358:	d00d      	beq.n	8002376 <UART_SetConfig+0xae>
 800235a:	d81b      	bhi.n	8002394 <UART_SetConfig+0xcc>
 800235c:	2b02      	cmp	r3, #2
 800235e:	d014      	beq.n	800238a <UART_SetConfig+0xc2>
 8002360:	d818      	bhi.n	8002394 <UART_SetConfig+0xcc>
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <UART_SetConfig+0xa4>
 8002366:	2b01      	cmp	r3, #1
 8002368:	d00a      	beq.n	8002380 <UART_SetConfig+0xb8>
 800236a:	e013      	b.n	8002394 <UART_SetConfig+0xcc>
 800236c:	231f      	movs	r3, #31
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
 8002374:	e0bd      	b.n	80024f2 <UART_SetConfig+0x22a>
 8002376:	231f      	movs	r3, #31
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	2202      	movs	r2, #2
 800237c:	701a      	strb	r2, [r3, #0]
 800237e:	e0b8      	b.n	80024f2 <UART_SetConfig+0x22a>
 8002380:	231f      	movs	r3, #31
 8002382:	18fb      	adds	r3, r7, r3
 8002384:	2204      	movs	r2, #4
 8002386:	701a      	strb	r2, [r3, #0]
 8002388:	e0b3      	b.n	80024f2 <UART_SetConfig+0x22a>
 800238a:	231f      	movs	r3, #31
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	2208      	movs	r2, #8
 8002390:	701a      	strb	r2, [r3, #0]
 8002392:	e0ae      	b.n	80024f2 <UART_SetConfig+0x22a>
 8002394:	231f      	movs	r3, #31
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	2210      	movs	r2, #16
 800239a:	701a      	strb	r2, [r3, #0]
 800239c:	e0a9      	b.n	80024f2 <UART_SetConfig+0x22a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a98      	ldr	r2, [pc, #608]	; (8002604 <UART_SetConfig+0x33c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d134      	bne.n	8002412 <UART_SetConfig+0x14a>
 80023a8:	4b95      	ldr	r3, [pc, #596]	; (8002600 <UART_SetConfig+0x338>)
 80023aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ac:	23c0      	movs	r3, #192	; 0xc0
 80023ae:	029b      	lsls	r3, r3, #10
 80023b0:	4013      	ands	r3, r2
 80023b2:	22c0      	movs	r2, #192	; 0xc0
 80023b4:	0292      	lsls	r2, r2, #10
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d017      	beq.n	80023ea <UART_SetConfig+0x122>
 80023ba:	22c0      	movs	r2, #192	; 0xc0
 80023bc:	0292      	lsls	r2, r2, #10
 80023be:	4293      	cmp	r3, r2
 80023c0:	d822      	bhi.n	8002408 <UART_SetConfig+0x140>
 80023c2:	2280      	movs	r2, #128	; 0x80
 80023c4:	0292      	lsls	r2, r2, #10
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d019      	beq.n	80023fe <UART_SetConfig+0x136>
 80023ca:	2280      	movs	r2, #128	; 0x80
 80023cc:	0292      	lsls	r2, r2, #10
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d81a      	bhi.n	8002408 <UART_SetConfig+0x140>
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d004      	beq.n	80023e0 <UART_SetConfig+0x118>
 80023d6:	2280      	movs	r2, #128	; 0x80
 80023d8:	0252      	lsls	r2, r2, #9
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00a      	beq.n	80023f4 <UART_SetConfig+0x12c>
 80023de:	e013      	b.n	8002408 <UART_SetConfig+0x140>
 80023e0:	231f      	movs	r3, #31
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
 80023e8:	e083      	b.n	80024f2 <UART_SetConfig+0x22a>
 80023ea:	231f      	movs	r3, #31
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	2202      	movs	r2, #2
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	e07e      	b.n	80024f2 <UART_SetConfig+0x22a>
 80023f4:	231f      	movs	r3, #31
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	2204      	movs	r2, #4
 80023fa:	701a      	strb	r2, [r3, #0]
 80023fc:	e079      	b.n	80024f2 <UART_SetConfig+0x22a>
 80023fe:	231f      	movs	r3, #31
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	2208      	movs	r2, #8
 8002404:	701a      	strb	r2, [r3, #0]
 8002406:	e074      	b.n	80024f2 <UART_SetConfig+0x22a>
 8002408:	231f      	movs	r3, #31
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	2210      	movs	r2, #16
 800240e:	701a      	strb	r2, [r3, #0]
 8002410:	e06f      	b.n	80024f2 <UART_SetConfig+0x22a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a7c      	ldr	r2, [pc, #496]	; (8002608 <UART_SetConfig+0x340>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d134      	bne.n	8002486 <UART_SetConfig+0x1be>
 800241c:	4b78      	ldr	r3, [pc, #480]	; (8002600 <UART_SetConfig+0x338>)
 800241e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002420:	23c0      	movs	r3, #192	; 0xc0
 8002422:	031b      	lsls	r3, r3, #12
 8002424:	4013      	ands	r3, r2
 8002426:	22c0      	movs	r2, #192	; 0xc0
 8002428:	0312      	lsls	r2, r2, #12
 800242a:	4293      	cmp	r3, r2
 800242c:	d017      	beq.n	800245e <UART_SetConfig+0x196>
 800242e:	22c0      	movs	r2, #192	; 0xc0
 8002430:	0312      	lsls	r2, r2, #12
 8002432:	4293      	cmp	r3, r2
 8002434:	d822      	bhi.n	800247c <UART_SetConfig+0x1b4>
 8002436:	2280      	movs	r2, #128	; 0x80
 8002438:	0312      	lsls	r2, r2, #12
 800243a:	4293      	cmp	r3, r2
 800243c:	d019      	beq.n	8002472 <UART_SetConfig+0x1aa>
 800243e:	2280      	movs	r2, #128	; 0x80
 8002440:	0312      	lsls	r2, r2, #12
 8002442:	4293      	cmp	r3, r2
 8002444:	d81a      	bhi.n	800247c <UART_SetConfig+0x1b4>
 8002446:	2b00      	cmp	r3, #0
 8002448:	d004      	beq.n	8002454 <UART_SetConfig+0x18c>
 800244a:	2280      	movs	r2, #128	; 0x80
 800244c:	02d2      	lsls	r2, r2, #11
 800244e:	4293      	cmp	r3, r2
 8002450:	d00a      	beq.n	8002468 <UART_SetConfig+0x1a0>
 8002452:	e013      	b.n	800247c <UART_SetConfig+0x1b4>
 8002454:	231f      	movs	r3, #31
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
 800245c:	e049      	b.n	80024f2 <UART_SetConfig+0x22a>
 800245e:	231f      	movs	r3, #31
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	2202      	movs	r2, #2
 8002464:	701a      	strb	r2, [r3, #0]
 8002466:	e044      	b.n	80024f2 <UART_SetConfig+0x22a>
 8002468:	231f      	movs	r3, #31
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	2204      	movs	r2, #4
 800246e:	701a      	strb	r2, [r3, #0]
 8002470:	e03f      	b.n	80024f2 <UART_SetConfig+0x22a>
 8002472:	231f      	movs	r3, #31
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	2208      	movs	r2, #8
 8002478:	701a      	strb	r2, [r3, #0]
 800247a:	e03a      	b.n	80024f2 <UART_SetConfig+0x22a>
 800247c:	231f      	movs	r3, #31
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	2210      	movs	r2, #16
 8002482:	701a      	strb	r2, [r3, #0]
 8002484:	e035      	b.n	80024f2 <UART_SetConfig+0x22a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a60      	ldr	r2, [pc, #384]	; (800260c <UART_SetConfig+0x344>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d104      	bne.n	800249a <UART_SetConfig+0x1d2>
 8002490:	231f      	movs	r3, #31
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
 8002498:	e02b      	b.n	80024f2 <UART_SetConfig+0x22a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a5c      	ldr	r2, [pc, #368]	; (8002610 <UART_SetConfig+0x348>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d104      	bne.n	80024ae <UART_SetConfig+0x1e6>
 80024a4:	231f      	movs	r3, #31
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	e021      	b.n	80024f2 <UART_SetConfig+0x22a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a58      	ldr	r2, [pc, #352]	; (8002614 <UART_SetConfig+0x34c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d104      	bne.n	80024c2 <UART_SetConfig+0x1fa>
 80024b8:	231f      	movs	r3, #31
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	e017      	b.n	80024f2 <UART_SetConfig+0x22a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a54      	ldr	r2, [pc, #336]	; (8002618 <UART_SetConfig+0x350>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d104      	bne.n	80024d6 <UART_SetConfig+0x20e>
 80024cc:	231f      	movs	r3, #31
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
 80024d4:	e00d      	b.n	80024f2 <UART_SetConfig+0x22a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a50      	ldr	r2, [pc, #320]	; (800261c <UART_SetConfig+0x354>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d104      	bne.n	80024ea <UART_SetConfig+0x222>
 80024e0:	231f      	movs	r3, #31
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
 80024e8:	e003      	b.n	80024f2 <UART_SetConfig+0x22a>
 80024ea:	231f      	movs	r3, #31
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	2210      	movs	r2, #16
 80024f0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69da      	ldr	r2, [r3, #28]
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d15d      	bne.n	80025ba <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 80024fe:	231f      	movs	r3, #31
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b08      	cmp	r3, #8
 8002506:	d015      	beq.n	8002534 <UART_SetConfig+0x26c>
 8002508:	dc18      	bgt.n	800253c <UART_SetConfig+0x274>
 800250a:	2b04      	cmp	r3, #4
 800250c:	d00d      	beq.n	800252a <UART_SetConfig+0x262>
 800250e:	dc15      	bgt.n	800253c <UART_SetConfig+0x274>
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <UART_SetConfig+0x252>
 8002514:	2b02      	cmp	r3, #2
 8002516:	d005      	beq.n	8002524 <UART_SetConfig+0x25c>
 8002518:	e010      	b.n	800253c <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800251a:	f7ff fcc1 	bl	8001ea0 <HAL_RCC_GetPCLK1Freq>
 800251e:	0003      	movs	r3, r0
 8002520:	61bb      	str	r3, [r7, #24]
        break;
 8002522:	e012      	b.n	800254a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002524:	4b3e      	ldr	r3, [pc, #248]	; (8002620 <UART_SetConfig+0x358>)
 8002526:	61bb      	str	r3, [r7, #24]
        break;
 8002528:	e00f      	b.n	800254a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800252a:	f7ff fc2f 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 800252e:	0003      	movs	r3, r0
 8002530:	61bb      	str	r3, [r7, #24]
        break;
 8002532:	e00a      	b.n	800254a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	61bb      	str	r3, [r7, #24]
        break;
 800253a:	e006      	b.n	800254a <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002540:	231e      	movs	r3, #30
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]
        break;
 8002548:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d100      	bne.n	8002552 <UART_SetConfig+0x28a>
 8002550:	e095      	b.n	800267e <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	005a      	lsls	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	085b      	lsrs	r3, r3, #1
 800255c:	18d2      	adds	r2, r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	0019      	movs	r1, r3
 8002564:	0010      	movs	r0, r2
 8002566:	f7fd fdd7 	bl	8000118 <__udivsi3>
 800256a:	0003      	movs	r3, r0
 800256c:	b29b      	uxth	r3, r3
 800256e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	2b0f      	cmp	r3, #15
 8002574:	d91c      	bls.n	80025b0 <UART_SetConfig+0x2e8>
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	025b      	lsls	r3, r3, #9
 800257c:	429a      	cmp	r2, r3
 800257e:	d217      	bcs.n	80025b0 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	b29a      	uxth	r2, r3
 8002584:	200e      	movs	r0, #14
 8002586:	183b      	adds	r3, r7, r0
 8002588:	210f      	movs	r1, #15
 800258a:	438a      	bics	r2, r1
 800258c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	085b      	lsrs	r3, r3, #1
 8002592:	b29b      	uxth	r3, r3
 8002594:	2207      	movs	r2, #7
 8002596:	4013      	ands	r3, r2
 8002598:	b299      	uxth	r1, r3
 800259a:	183b      	adds	r3, r7, r0
 800259c:	183a      	adds	r2, r7, r0
 800259e:	8812      	ldrh	r2, [r2, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	183a      	adds	r2, r7, r0
 80025aa:	8812      	ldrh	r2, [r2, #0]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	e066      	b.n	800267e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80025b0:	231e      	movs	r3, #30
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
 80025b8:	e061      	b.n	800267e <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80025ba:	231f      	movs	r3, #31
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d02f      	beq.n	8002624 <UART_SetConfig+0x35c>
 80025c4:	dc32      	bgt.n	800262c <UART_SetConfig+0x364>
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d00d      	beq.n	80025e6 <UART_SetConfig+0x31e>
 80025ca:	dc2f      	bgt.n	800262c <UART_SetConfig+0x364>
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <UART_SetConfig+0x30e>
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d005      	beq.n	80025e0 <UART_SetConfig+0x318>
 80025d4:	e02a      	b.n	800262c <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025d6:	f7ff fc63 	bl	8001ea0 <HAL_RCC_GetPCLK1Freq>
 80025da:	0003      	movs	r3, r0
 80025dc:	61bb      	str	r3, [r7, #24]
        break;
 80025de:	e02c      	b.n	800263a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025e0:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <UART_SetConfig+0x358>)
 80025e2:	61bb      	str	r3, [r7, #24]
        break;
 80025e4:	e029      	b.n	800263a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025e6:	f7ff fbd1 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 80025ea:	0003      	movs	r3, r0
 80025ec:	61bb      	str	r3, [r7, #24]
        break;
 80025ee:	e024      	b.n	800263a <UART_SetConfig+0x372>
 80025f0:	efff69f3 	.word	0xefff69f3
 80025f4:	ffffcfff 	.word	0xffffcfff
 80025f8:	fffff4ff 	.word	0xfffff4ff
 80025fc:	40013800 	.word	0x40013800
 8002600:	40021000 	.word	0x40021000
 8002604:	40004400 	.word	0x40004400
 8002608:	40004800 	.word	0x40004800
 800260c:	40004c00 	.word	0x40004c00
 8002610:	40005000 	.word	0x40005000
 8002614:	40011400 	.word	0x40011400
 8002618:	40011800 	.word	0x40011800
 800261c:	40011c00 	.word	0x40011c00
 8002620:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	61bb      	str	r3, [r7, #24]
        break;
 800262a:	e006      	b.n	800263a <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002630:	231e      	movs	r3, #30
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
        break;
 8002638:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d01e      	beq.n	800267e <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	085a      	lsrs	r2, r3, #1
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	18d2      	adds	r2, r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	0019      	movs	r1, r3
 8002650:	0010      	movs	r0, r2
 8002652:	f7fd fd61 	bl	8000118 <__udivsi3>
 8002656:	0003      	movs	r3, r0
 8002658:	b29b      	uxth	r3, r3
 800265a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	2b0f      	cmp	r3, #15
 8002660:	d909      	bls.n	8002676 <UART_SetConfig+0x3ae>
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	025b      	lsls	r3, r3, #9
 8002668:	429a      	cmp	r2, r3
 800266a:	d204      	bcs.n	8002676 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	60da      	str	r2, [r3, #12]
 8002674:	e003      	b.n	800267e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002676:	231e      	movs	r3, #30
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	2201      	movs	r2, #1
 800267c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800268a:	231e      	movs	r3, #30
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	781b      	ldrb	r3, [r3, #0]
}
 8002690:	0018      	movs	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	b008      	add	sp, #32
 8002696:	bd80      	pop	{r7, pc}

08002698 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	2201      	movs	r2, #1
 80026a6:	4013      	ands	r3, r2
 80026a8:	d00b      	beq.n	80026c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	4a4a      	ldr	r2, [pc, #296]	; (80027dc <UART_AdvFeatureConfig+0x144>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	0019      	movs	r1, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	2202      	movs	r2, #2
 80026c8:	4013      	ands	r3, r2
 80026ca:	d00b      	beq.n	80026e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4a43      	ldr	r2, [pc, #268]	; (80027e0 <UART_AdvFeatureConfig+0x148>)
 80026d4:	4013      	ands	r3, r2
 80026d6:	0019      	movs	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	2204      	movs	r2, #4
 80026ea:	4013      	ands	r3, r2
 80026ec:	d00b      	beq.n	8002706 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4a3b      	ldr	r2, [pc, #236]	; (80027e4 <UART_AdvFeatureConfig+0x14c>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	0019      	movs	r1, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	2208      	movs	r2, #8
 800270c:	4013      	ands	r3, r2
 800270e:	d00b      	beq.n	8002728 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4a34      	ldr	r2, [pc, #208]	; (80027e8 <UART_AdvFeatureConfig+0x150>)
 8002718:	4013      	ands	r3, r2
 800271a:	0019      	movs	r1, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	2210      	movs	r2, #16
 800272e:	4013      	ands	r3, r2
 8002730:	d00b      	beq.n	800274a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	4a2c      	ldr	r2, [pc, #176]	; (80027ec <UART_AdvFeatureConfig+0x154>)
 800273a:	4013      	ands	r3, r2
 800273c:	0019      	movs	r1, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	2220      	movs	r2, #32
 8002750:	4013      	ands	r3, r2
 8002752:	d00b      	beq.n	800276c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	4a25      	ldr	r2, [pc, #148]	; (80027f0 <UART_AdvFeatureConfig+0x158>)
 800275c:	4013      	ands	r3, r2
 800275e:	0019      	movs	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	2240      	movs	r2, #64	; 0x40
 8002772:	4013      	ands	r3, r2
 8002774:	d01d      	beq.n	80027b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a1d      	ldr	r2, [pc, #116]	; (80027f4 <UART_AdvFeatureConfig+0x15c>)
 800277e:	4013      	ands	r3, r2
 8002780:	0019      	movs	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	035b      	lsls	r3, r3, #13
 8002796:	429a      	cmp	r2, r3
 8002798:	d10b      	bne.n	80027b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	4a15      	ldr	r2, [pc, #84]	; (80027f8 <UART_AdvFeatureConfig+0x160>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	0019      	movs	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	2280      	movs	r2, #128	; 0x80
 80027b8:	4013      	ands	r3, r2
 80027ba:	d00b      	beq.n	80027d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4a0e      	ldr	r2, [pc, #56]	; (80027fc <UART_AdvFeatureConfig+0x164>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	0019      	movs	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	605a      	str	r2, [r3, #4]
  }
}
 80027d4:	46c0      	nop			; (mov r8, r8)
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b002      	add	sp, #8
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	fffdffff 	.word	0xfffdffff
 80027e0:	fffeffff 	.word	0xfffeffff
 80027e4:	fffbffff 	.word	0xfffbffff
 80027e8:	ffff7fff 	.word	0xffff7fff
 80027ec:	ffffefff 	.word	0xffffefff
 80027f0:	ffffdfff 	.word	0xffffdfff
 80027f4:	ffefffff 	.word	0xffefffff
 80027f8:	ff9fffff 	.word	0xff9fffff
 80027fc:	fff7ffff 	.word	0xfff7ffff

08002800 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af02      	add	r7, sp, #8
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2280      	movs	r2, #128	; 0x80
 800280c:	2100      	movs	r1, #0
 800280e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002810:	f7fe f832 	bl	8000878 <HAL_GetTick>
 8002814:	0003      	movs	r3, r0
 8002816:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2208      	movs	r2, #8
 8002820:	4013      	ands	r3, r2
 8002822:	2b08      	cmp	r3, #8
 8002824:	d10c      	bne.n	8002840 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2280      	movs	r2, #128	; 0x80
 800282a:	0391      	lsls	r1, r2, #14
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	4a17      	ldr	r2, [pc, #92]	; (800288c <UART_CheckIdleState+0x8c>)
 8002830:	9200      	str	r2, [sp, #0]
 8002832:	2200      	movs	r2, #0
 8002834:	f000 f82c 	bl	8002890 <UART_WaitOnFlagUntilTimeout>
 8002838:	1e03      	subs	r3, r0, #0
 800283a:	d001      	beq.n	8002840 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e021      	b.n	8002884 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2204      	movs	r2, #4
 8002848:	4013      	ands	r3, r2
 800284a:	2b04      	cmp	r3, #4
 800284c:	d10c      	bne.n	8002868 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2280      	movs	r2, #128	; 0x80
 8002852:	03d1      	lsls	r1, r2, #15
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4a0d      	ldr	r2, [pc, #52]	; (800288c <UART_CheckIdleState+0x8c>)
 8002858:	9200      	str	r2, [sp, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	f000 f818 	bl	8002890 <UART_WaitOnFlagUntilTimeout>
 8002860:	1e03      	subs	r3, r0, #0
 8002862:	d001      	beq.n	8002868 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e00d      	b.n	8002884 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2220      	movs	r2, #32
 8002872:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2274      	movs	r2, #116	; 0x74
 800287e:	2100      	movs	r1, #0
 8002880:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	0018      	movs	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	b004      	add	sp, #16
 800288a:	bd80      	pop	{r7, pc}
 800288c:	01ffffff 	.word	0x01ffffff

08002890 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b094      	sub	sp, #80	; 0x50
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	1dfb      	adds	r3, r7, #7
 800289e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028a0:	e0a3      	b.n	80029ea <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028a4:	3301      	adds	r3, #1
 80028a6:	d100      	bne.n	80028aa <UART_WaitOnFlagUntilTimeout+0x1a>
 80028a8:	e09f      	b.n	80029ea <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028aa:	f7fd ffe5 	bl	8000878 <HAL_GetTick>
 80028ae:	0002      	movs	r2, r0
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d302      	bcc.n	80028c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80028ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d13d      	bne.n	800293c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c0:	f3ef 8310 	mrs	r3, PRIMASK
 80028c4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80028c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028c8:	647b      	str	r3, [r7, #68]	; 0x44
 80028ca:	2301      	movs	r3, #1
 80028cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d0:	f383 8810 	msr	PRIMASK, r3
}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	494c      	ldr	r1, [pc, #304]	; (8002a14 <UART_WaitOnFlagUntilTimeout+0x184>)
 80028e2:	400a      	ands	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ec:	f383 8810 	msr	PRIMASK, r3
}
 80028f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028f2:	f3ef 8310 	mrs	r3, PRIMASK
 80028f6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80028f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028fa:	643b      	str	r3, [r7, #64]	; 0x40
 80028fc:	2301      	movs	r3, #1
 80028fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002902:	f383 8810 	msr	PRIMASK, r3
}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2101      	movs	r1, #1
 8002914:	438a      	bics	r2, r1
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800291a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800291c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800291e:	f383 8810 	msr	PRIMASK, r3
}
 8002922:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2274      	movs	r2, #116	; 0x74
 8002934:	2100      	movs	r1, #0
 8002936:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e067      	b.n	8002a0c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2204      	movs	r2, #4
 8002944:	4013      	ands	r3, r2
 8002946:	d050      	beq.n	80029ea <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	69da      	ldr	r2, [r3, #28]
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	401a      	ands	r2, r3
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	429a      	cmp	r2, r3
 800295a:	d146      	bne.n	80029ea <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2280      	movs	r2, #128	; 0x80
 8002962:	0112      	lsls	r2, r2, #4
 8002964:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002966:	f3ef 8310 	mrs	r3, PRIMASK
 800296a:	613b      	str	r3, [r7, #16]
  return(result);
 800296c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800296e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002970:	2301      	movs	r3, #1
 8002972:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f383 8810 	msr	PRIMASK, r3
}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4923      	ldr	r1, [pc, #140]	; (8002a14 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002988:	400a      	ands	r2, r1
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800298e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	f383 8810 	msr	PRIMASK, r3
}
 8002996:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002998:	f3ef 8310 	mrs	r3, PRIMASK
 800299c:	61fb      	str	r3, [r7, #28]
  return(result);
 800299e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80029a2:	2301      	movs	r3, #1
 80029a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	f383 8810 	msr	PRIMASK, r3
}
 80029ac:	46c0      	nop			; (mov r8, r8)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2101      	movs	r1, #1
 80029ba:	438a      	bics	r2, r1
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	f383 8810 	msr	PRIMASK, r3
}
 80029c8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2220      	movs	r2, #32
 80029ce:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2220      	movs	r2, #32
 80029d4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2280      	movs	r2, #128	; 0x80
 80029da:	2120      	movs	r1, #32
 80029dc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2274      	movs	r2, #116	; 0x74
 80029e2:	2100      	movs	r1, #0
 80029e4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e010      	b.n	8002a0c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	4013      	ands	r3, r2
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	425a      	negs	r2, r3
 80029fa:	4153      	adcs	r3, r2
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	001a      	movs	r2, r3
 8002a00:	1dfb      	adds	r3, r7, #7
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d100      	bne.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x17a>
 8002a08:	e74b      	b.n	80028a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b014      	add	sp, #80	; 0x50
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	fffffe5f 	.word	0xfffffe5f

08002a18 <__errno>:
 8002a18:	4b01      	ldr	r3, [pc, #4]	; (8002a20 <__errno+0x8>)
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	4770      	bx	lr
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	2000000c 	.word	0x2000000c

08002a24 <__libc_init_array>:
 8002a24:	b570      	push	{r4, r5, r6, lr}
 8002a26:	2600      	movs	r6, #0
 8002a28:	4d0c      	ldr	r5, [pc, #48]	; (8002a5c <__libc_init_array+0x38>)
 8002a2a:	4c0d      	ldr	r4, [pc, #52]	; (8002a60 <__libc_init_array+0x3c>)
 8002a2c:	1b64      	subs	r4, r4, r5
 8002a2e:	10a4      	asrs	r4, r4, #2
 8002a30:	42a6      	cmp	r6, r4
 8002a32:	d109      	bne.n	8002a48 <__libc_init_array+0x24>
 8002a34:	2600      	movs	r6, #0
 8002a36:	f000 fc47 	bl	80032c8 <_init>
 8002a3a:	4d0a      	ldr	r5, [pc, #40]	; (8002a64 <__libc_init_array+0x40>)
 8002a3c:	4c0a      	ldr	r4, [pc, #40]	; (8002a68 <__libc_init_array+0x44>)
 8002a3e:	1b64      	subs	r4, r4, r5
 8002a40:	10a4      	asrs	r4, r4, #2
 8002a42:	42a6      	cmp	r6, r4
 8002a44:	d105      	bne.n	8002a52 <__libc_init_array+0x2e>
 8002a46:	bd70      	pop	{r4, r5, r6, pc}
 8002a48:	00b3      	lsls	r3, r6, #2
 8002a4a:	58eb      	ldr	r3, [r5, r3]
 8002a4c:	4798      	blx	r3
 8002a4e:	3601      	adds	r6, #1
 8002a50:	e7ee      	b.n	8002a30 <__libc_init_array+0xc>
 8002a52:	00b3      	lsls	r3, r6, #2
 8002a54:	58eb      	ldr	r3, [r5, r3]
 8002a56:	4798      	blx	r3
 8002a58:	3601      	adds	r6, #1
 8002a5a:	e7f2      	b.n	8002a42 <__libc_init_array+0x1e>
 8002a5c:	08003354 	.word	0x08003354
 8002a60:	08003354 	.word	0x08003354
 8002a64:	08003354 	.word	0x08003354
 8002a68:	08003358 	.word	0x08003358

08002a6c <memset>:
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	1882      	adds	r2, r0, r2
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d100      	bne.n	8002a76 <memset+0xa>
 8002a74:	4770      	bx	lr
 8002a76:	7019      	strb	r1, [r3, #0]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	e7f9      	b.n	8002a70 <memset+0x4>

08002a7c <siprintf>:
 8002a7c:	b40e      	push	{r1, r2, r3}
 8002a7e:	b500      	push	{lr}
 8002a80:	490b      	ldr	r1, [pc, #44]	; (8002ab0 <siprintf+0x34>)
 8002a82:	b09c      	sub	sp, #112	; 0x70
 8002a84:	ab1d      	add	r3, sp, #116	; 0x74
 8002a86:	9002      	str	r0, [sp, #8]
 8002a88:	9006      	str	r0, [sp, #24]
 8002a8a:	9107      	str	r1, [sp, #28]
 8002a8c:	9104      	str	r1, [sp, #16]
 8002a8e:	4809      	ldr	r0, [pc, #36]	; (8002ab4 <siprintf+0x38>)
 8002a90:	4909      	ldr	r1, [pc, #36]	; (8002ab8 <siprintf+0x3c>)
 8002a92:	cb04      	ldmia	r3!, {r2}
 8002a94:	9105      	str	r1, [sp, #20]
 8002a96:	6800      	ldr	r0, [r0, #0]
 8002a98:	a902      	add	r1, sp, #8
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	f000 f870 	bl	8002b80 <_svfiprintf_r>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	9a02      	ldr	r2, [sp, #8]
 8002aa4:	7013      	strb	r3, [r2, #0]
 8002aa6:	b01c      	add	sp, #112	; 0x70
 8002aa8:	bc08      	pop	{r3}
 8002aaa:	b003      	add	sp, #12
 8002aac:	4718      	bx	r3
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	7fffffff 	.word	0x7fffffff
 8002ab4:	2000000c 	.word	0x2000000c
 8002ab8:	ffff0208 	.word	0xffff0208

08002abc <__ssputs_r>:
 8002abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002abe:	688e      	ldr	r6, [r1, #8]
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	0007      	movs	r7, r0
 8002ac4:	000c      	movs	r4, r1
 8002ac6:	9203      	str	r2, [sp, #12]
 8002ac8:	9301      	str	r3, [sp, #4]
 8002aca:	429e      	cmp	r6, r3
 8002acc:	d83c      	bhi.n	8002b48 <__ssputs_r+0x8c>
 8002ace:	2390      	movs	r3, #144	; 0x90
 8002ad0:	898a      	ldrh	r2, [r1, #12]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	421a      	tst	r2, r3
 8002ad6:	d034      	beq.n	8002b42 <__ssputs_r+0x86>
 8002ad8:	2503      	movs	r5, #3
 8002ada:	6909      	ldr	r1, [r1, #16]
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	1a5b      	subs	r3, r3, r1
 8002ae0:	9302      	str	r3, [sp, #8]
 8002ae2:	6963      	ldr	r3, [r4, #20]
 8002ae4:	9802      	ldr	r0, [sp, #8]
 8002ae6:	435d      	muls	r5, r3
 8002ae8:	0feb      	lsrs	r3, r5, #31
 8002aea:	195d      	adds	r5, r3, r5
 8002aec:	9b01      	ldr	r3, [sp, #4]
 8002aee:	106d      	asrs	r5, r5, #1
 8002af0:	3301      	adds	r3, #1
 8002af2:	181b      	adds	r3, r3, r0
 8002af4:	42ab      	cmp	r3, r5
 8002af6:	d900      	bls.n	8002afa <__ssputs_r+0x3e>
 8002af8:	001d      	movs	r5, r3
 8002afa:	0553      	lsls	r3, r2, #21
 8002afc:	d532      	bpl.n	8002b64 <__ssputs_r+0xa8>
 8002afe:	0029      	movs	r1, r5
 8002b00:	0038      	movs	r0, r7
 8002b02:	f000 fb31 	bl	8003168 <_malloc_r>
 8002b06:	1e06      	subs	r6, r0, #0
 8002b08:	d109      	bne.n	8002b1e <__ssputs_r+0x62>
 8002b0a:	230c      	movs	r3, #12
 8002b0c:	603b      	str	r3, [r7, #0]
 8002b0e:	2340      	movs	r3, #64	; 0x40
 8002b10:	2001      	movs	r0, #1
 8002b12:	89a2      	ldrh	r2, [r4, #12]
 8002b14:	4240      	negs	r0, r0
 8002b16:	4313      	orrs	r3, r2
 8002b18:	81a3      	strh	r3, [r4, #12]
 8002b1a:	b005      	add	sp, #20
 8002b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b1e:	9a02      	ldr	r2, [sp, #8]
 8002b20:	6921      	ldr	r1, [r4, #16]
 8002b22:	f000 faba 	bl	800309a <memcpy>
 8002b26:	89a3      	ldrh	r3, [r4, #12]
 8002b28:	4a14      	ldr	r2, [pc, #80]	; (8002b7c <__ssputs_r+0xc0>)
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	81a3      	strh	r3, [r4, #12]
 8002b32:	9b02      	ldr	r3, [sp, #8]
 8002b34:	6126      	str	r6, [r4, #16]
 8002b36:	18f6      	adds	r6, r6, r3
 8002b38:	6026      	str	r6, [r4, #0]
 8002b3a:	6165      	str	r5, [r4, #20]
 8002b3c:	9e01      	ldr	r6, [sp, #4]
 8002b3e:	1aed      	subs	r5, r5, r3
 8002b40:	60a5      	str	r5, [r4, #8]
 8002b42:	9b01      	ldr	r3, [sp, #4]
 8002b44:	429e      	cmp	r6, r3
 8002b46:	d900      	bls.n	8002b4a <__ssputs_r+0x8e>
 8002b48:	9e01      	ldr	r6, [sp, #4]
 8002b4a:	0032      	movs	r2, r6
 8002b4c:	9903      	ldr	r1, [sp, #12]
 8002b4e:	6820      	ldr	r0, [r4, #0]
 8002b50:	f000 faac 	bl	80030ac <memmove>
 8002b54:	68a3      	ldr	r3, [r4, #8]
 8002b56:	2000      	movs	r0, #0
 8002b58:	1b9b      	subs	r3, r3, r6
 8002b5a:	60a3      	str	r3, [r4, #8]
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	199e      	adds	r6, r3, r6
 8002b60:	6026      	str	r6, [r4, #0]
 8002b62:	e7da      	b.n	8002b1a <__ssputs_r+0x5e>
 8002b64:	002a      	movs	r2, r5
 8002b66:	0038      	movs	r0, r7
 8002b68:	f000 fb5c 	bl	8003224 <_realloc_r>
 8002b6c:	1e06      	subs	r6, r0, #0
 8002b6e:	d1e0      	bne.n	8002b32 <__ssputs_r+0x76>
 8002b70:	0038      	movs	r0, r7
 8002b72:	6921      	ldr	r1, [r4, #16]
 8002b74:	f000 faae 	bl	80030d4 <_free_r>
 8002b78:	e7c7      	b.n	8002b0a <__ssputs_r+0x4e>
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	fffffb7f 	.word	0xfffffb7f

08002b80 <_svfiprintf_r>:
 8002b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b82:	b0a1      	sub	sp, #132	; 0x84
 8002b84:	9003      	str	r0, [sp, #12]
 8002b86:	001d      	movs	r5, r3
 8002b88:	898b      	ldrh	r3, [r1, #12]
 8002b8a:	000f      	movs	r7, r1
 8002b8c:	0016      	movs	r6, r2
 8002b8e:	061b      	lsls	r3, r3, #24
 8002b90:	d511      	bpl.n	8002bb6 <_svfiprintf_r+0x36>
 8002b92:	690b      	ldr	r3, [r1, #16]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10e      	bne.n	8002bb6 <_svfiprintf_r+0x36>
 8002b98:	2140      	movs	r1, #64	; 0x40
 8002b9a:	f000 fae5 	bl	8003168 <_malloc_r>
 8002b9e:	6038      	str	r0, [r7, #0]
 8002ba0:	6138      	str	r0, [r7, #16]
 8002ba2:	2800      	cmp	r0, #0
 8002ba4:	d105      	bne.n	8002bb2 <_svfiprintf_r+0x32>
 8002ba6:	230c      	movs	r3, #12
 8002ba8:	9a03      	ldr	r2, [sp, #12]
 8002baa:	3801      	subs	r0, #1
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	b021      	add	sp, #132	; 0x84
 8002bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bb2:	2340      	movs	r3, #64	; 0x40
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	ac08      	add	r4, sp, #32
 8002bba:	6163      	str	r3, [r4, #20]
 8002bbc:	3320      	adds	r3, #32
 8002bbe:	7663      	strb	r3, [r4, #25]
 8002bc0:	3310      	adds	r3, #16
 8002bc2:	76a3      	strb	r3, [r4, #26]
 8002bc4:	9507      	str	r5, [sp, #28]
 8002bc6:	0035      	movs	r5, r6
 8002bc8:	782b      	ldrb	r3, [r5, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <_svfiprintf_r+0x52>
 8002bce:	2b25      	cmp	r3, #37	; 0x25
 8002bd0:	d147      	bne.n	8002c62 <_svfiprintf_r+0xe2>
 8002bd2:	1bab      	subs	r3, r5, r6
 8002bd4:	9305      	str	r3, [sp, #20]
 8002bd6:	42b5      	cmp	r5, r6
 8002bd8:	d00c      	beq.n	8002bf4 <_svfiprintf_r+0x74>
 8002bda:	0032      	movs	r2, r6
 8002bdc:	0039      	movs	r1, r7
 8002bde:	9803      	ldr	r0, [sp, #12]
 8002be0:	f7ff ff6c 	bl	8002abc <__ssputs_r>
 8002be4:	1c43      	adds	r3, r0, #1
 8002be6:	d100      	bne.n	8002bea <_svfiprintf_r+0x6a>
 8002be8:	e0ae      	b.n	8002d48 <_svfiprintf_r+0x1c8>
 8002bea:	6962      	ldr	r2, [r4, #20]
 8002bec:	9b05      	ldr	r3, [sp, #20]
 8002bee:	4694      	mov	ip, r2
 8002bf0:	4463      	add	r3, ip
 8002bf2:	6163      	str	r3, [r4, #20]
 8002bf4:	782b      	ldrb	r3, [r5, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d100      	bne.n	8002bfc <_svfiprintf_r+0x7c>
 8002bfa:	e0a5      	b.n	8002d48 <_svfiprintf_r+0x1c8>
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	2300      	movs	r3, #0
 8002c00:	4252      	negs	r2, r2
 8002c02:	6062      	str	r2, [r4, #4]
 8002c04:	a904      	add	r1, sp, #16
 8002c06:	3254      	adds	r2, #84	; 0x54
 8002c08:	1852      	adds	r2, r2, r1
 8002c0a:	1c6e      	adds	r6, r5, #1
 8002c0c:	6023      	str	r3, [r4, #0]
 8002c0e:	60e3      	str	r3, [r4, #12]
 8002c10:	60a3      	str	r3, [r4, #8]
 8002c12:	7013      	strb	r3, [r2, #0]
 8002c14:	65a3      	str	r3, [r4, #88]	; 0x58
 8002c16:	2205      	movs	r2, #5
 8002c18:	7831      	ldrb	r1, [r6, #0]
 8002c1a:	4854      	ldr	r0, [pc, #336]	; (8002d6c <_svfiprintf_r+0x1ec>)
 8002c1c:	f000 fa32 	bl	8003084 <memchr>
 8002c20:	1c75      	adds	r5, r6, #1
 8002c22:	2800      	cmp	r0, #0
 8002c24:	d11f      	bne.n	8002c66 <_svfiprintf_r+0xe6>
 8002c26:	6822      	ldr	r2, [r4, #0]
 8002c28:	06d3      	lsls	r3, r2, #27
 8002c2a:	d504      	bpl.n	8002c36 <_svfiprintf_r+0xb6>
 8002c2c:	2353      	movs	r3, #83	; 0x53
 8002c2e:	a904      	add	r1, sp, #16
 8002c30:	185b      	adds	r3, r3, r1
 8002c32:	2120      	movs	r1, #32
 8002c34:	7019      	strb	r1, [r3, #0]
 8002c36:	0713      	lsls	r3, r2, #28
 8002c38:	d504      	bpl.n	8002c44 <_svfiprintf_r+0xc4>
 8002c3a:	2353      	movs	r3, #83	; 0x53
 8002c3c:	a904      	add	r1, sp, #16
 8002c3e:	185b      	adds	r3, r3, r1
 8002c40:	212b      	movs	r1, #43	; 0x2b
 8002c42:	7019      	strb	r1, [r3, #0]
 8002c44:	7833      	ldrb	r3, [r6, #0]
 8002c46:	2b2a      	cmp	r3, #42	; 0x2a
 8002c48:	d016      	beq.n	8002c78 <_svfiprintf_r+0xf8>
 8002c4a:	0035      	movs	r5, r6
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	200a      	movs	r0, #10
 8002c50:	68e3      	ldr	r3, [r4, #12]
 8002c52:	782a      	ldrb	r2, [r5, #0]
 8002c54:	1c6e      	adds	r6, r5, #1
 8002c56:	3a30      	subs	r2, #48	; 0x30
 8002c58:	2a09      	cmp	r2, #9
 8002c5a:	d94e      	bls.n	8002cfa <_svfiprintf_r+0x17a>
 8002c5c:	2900      	cmp	r1, #0
 8002c5e:	d111      	bne.n	8002c84 <_svfiprintf_r+0x104>
 8002c60:	e017      	b.n	8002c92 <_svfiprintf_r+0x112>
 8002c62:	3501      	adds	r5, #1
 8002c64:	e7b0      	b.n	8002bc8 <_svfiprintf_r+0x48>
 8002c66:	4b41      	ldr	r3, [pc, #260]	; (8002d6c <_svfiprintf_r+0x1ec>)
 8002c68:	6822      	ldr	r2, [r4, #0]
 8002c6a:	1ac0      	subs	r0, r0, r3
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	4083      	lsls	r3, r0
 8002c70:	4313      	orrs	r3, r2
 8002c72:	002e      	movs	r6, r5
 8002c74:	6023      	str	r3, [r4, #0]
 8002c76:	e7ce      	b.n	8002c16 <_svfiprintf_r+0x96>
 8002c78:	9b07      	ldr	r3, [sp, #28]
 8002c7a:	1d19      	adds	r1, r3, #4
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	9107      	str	r1, [sp, #28]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	db01      	blt.n	8002c88 <_svfiprintf_r+0x108>
 8002c84:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c86:	e004      	b.n	8002c92 <_svfiprintf_r+0x112>
 8002c88:	425b      	negs	r3, r3
 8002c8a:	60e3      	str	r3, [r4, #12]
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	6023      	str	r3, [r4, #0]
 8002c92:	782b      	ldrb	r3, [r5, #0]
 8002c94:	2b2e      	cmp	r3, #46	; 0x2e
 8002c96:	d10a      	bne.n	8002cae <_svfiprintf_r+0x12e>
 8002c98:	786b      	ldrb	r3, [r5, #1]
 8002c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8002c9c:	d135      	bne.n	8002d0a <_svfiprintf_r+0x18a>
 8002c9e:	9b07      	ldr	r3, [sp, #28]
 8002ca0:	3502      	adds	r5, #2
 8002ca2:	1d1a      	adds	r2, r3, #4
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	9207      	str	r2, [sp, #28]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	db2b      	blt.n	8002d04 <_svfiprintf_r+0x184>
 8002cac:	9309      	str	r3, [sp, #36]	; 0x24
 8002cae:	4e30      	ldr	r6, [pc, #192]	; (8002d70 <_svfiprintf_r+0x1f0>)
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	0030      	movs	r0, r6
 8002cb4:	7829      	ldrb	r1, [r5, #0]
 8002cb6:	f000 f9e5 	bl	8003084 <memchr>
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d006      	beq.n	8002ccc <_svfiprintf_r+0x14c>
 8002cbe:	2340      	movs	r3, #64	; 0x40
 8002cc0:	1b80      	subs	r0, r0, r6
 8002cc2:	4083      	lsls	r3, r0
 8002cc4:	6822      	ldr	r2, [r4, #0]
 8002cc6:	3501      	adds	r5, #1
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	6023      	str	r3, [r4, #0]
 8002ccc:	7829      	ldrb	r1, [r5, #0]
 8002cce:	2206      	movs	r2, #6
 8002cd0:	4828      	ldr	r0, [pc, #160]	; (8002d74 <_svfiprintf_r+0x1f4>)
 8002cd2:	1c6e      	adds	r6, r5, #1
 8002cd4:	7621      	strb	r1, [r4, #24]
 8002cd6:	f000 f9d5 	bl	8003084 <memchr>
 8002cda:	2800      	cmp	r0, #0
 8002cdc:	d03c      	beq.n	8002d58 <_svfiprintf_r+0x1d8>
 8002cde:	4b26      	ldr	r3, [pc, #152]	; (8002d78 <_svfiprintf_r+0x1f8>)
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d125      	bne.n	8002d30 <_svfiprintf_r+0x1b0>
 8002ce4:	2207      	movs	r2, #7
 8002ce6:	9b07      	ldr	r3, [sp, #28]
 8002ce8:	3307      	adds	r3, #7
 8002cea:	4393      	bics	r3, r2
 8002cec:	3308      	adds	r3, #8
 8002cee:	9307      	str	r3, [sp, #28]
 8002cf0:	6963      	ldr	r3, [r4, #20]
 8002cf2:	9a04      	ldr	r2, [sp, #16]
 8002cf4:	189b      	adds	r3, r3, r2
 8002cf6:	6163      	str	r3, [r4, #20]
 8002cf8:	e765      	b.n	8002bc6 <_svfiprintf_r+0x46>
 8002cfa:	4343      	muls	r3, r0
 8002cfc:	0035      	movs	r5, r6
 8002cfe:	2101      	movs	r1, #1
 8002d00:	189b      	adds	r3, r3, r2
 8002d02:	e7a6      	b.n	8002c52 <_svfiprintf_r+0xd2>
 8002d04:	2301      	movs	r3, #1
 8002d06:	425b      	negs	r3, r3
 8002d08:	e7d0      	b.n	8002cac <_svfiprintf_r+0x12c>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	200a      	movs	r0, #10
 8002d0e:	001a      	movs	r2, r3
 8002d10:	3501      	adds	r5, #1
 8002d12:	6063      	str	r3, [r4, #4]
 8002d14:	7829      	ldrb	r1, [r5, #0]
 8002d16:	1c6e      	adds	r6, r5, #1
 8002d18:	3930      	subs	r1, #48	; 0x30
 8002d1a:	2909      	cmp	r1, #9
 8002d1c:	d903      	bls.n	8002d26 <_svfiprintf_r+0x1a6>
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0c5      	beq.n	8002cae <_svfiprintf_r+0x12e>
 8002d22:	9209      	str	r2, [sp, #36]	; 0x24
 8002d24:	e7c3      	b.n	8002cae <_svfiprintf_r+0x12e>
 8002d26:	4342      	muls	r2, r0
 8002d28:	0035      	movs	r5, r6
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	1852      	adds	r2, r2, r1
 8002d2e:	e7f1      	b.n	8002d14 <_svfiprintf_r+0x194>
 8002d30:	ab07      	add	r3, sp, #28
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	003a      	movs	r2, r7
 8002d36:	0021      	movs	r1, r4
 8002d38:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <_svfiprintf_r+0x1fc>)
 8002d3a:	9803      	ldr	r0, [sp, #12]
 8002d3c:	e000      	b.n	8002d40 <_svfiprintf_r+0x1c0>
 8002d3e:	bf00      	nop
 8002d40:	9004      	str	r0, [sp, #16]
 8002d42:	9b04      	ldr	r3, [sp, #16]
 8002d44:	3301      	adds	r3, #1
 8002d46:	d1d3      	bne.n	8002cf0 <_svfiprintf_r+0x170>
 8002d48:	89bb      	ldrh	r3, [r7, #12]
 8002d4a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002d4c:	065b      	lsls	r3, r3, #25
 8002d4e:	d400      	bmi.n	8002d52 <_svfiprintf_r+0x1d2>
 8002d50:	e72d      	b.n	8002bae <_svfiprintf_r+0x2e>
 8002d52:	2001      	movs	r0, #1
 8002d54:	4240      	negs	r0, r0
 8002d56:	e72a      	b.n	8002bae <_svfiprintf_r+0x2e>
 8002d58:	ab07      	add	r3, sp, #28
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	003a      	movs	r2, r7
 8002d5e:	0021      	movs	r1, r4
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <_svfiprintf_r+0x1fc>)
 8002d62:	9803      	ldr	r0, [sp, #12]
 8002d64:	f000 f87c 	bl	8002e60 <_printf_i>
 8002d68:	e7ea      	b.n	8002d40 <_svfiprintf_r+0x1c0>
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	08003320 	.word	0x08003320
 8002d70:	08003326 	.word	0x08003326
 8002d74:	0800332a 	.word	0x0800332a
 8002d78:	00000000 	.word	0x00000000
 8002d7c:	08002abd 	.word	0x08002abd

08002d80 <_printf_common>:
 8002d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d82:	0015      	movs	r5, r2
 8002d84:	9301      	str	r3, [sp, #4]
 8002d86:	688a      	ldr	r2, [r1, #8]
 8002d88:	690b      	ldr	r3, [r1, #16]
 8002d8a:	000c      	movs	r4, r1
 8002d8c:	9000      	str	r0, [sp, #0]
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	da00      	bge.n	8002d94 <_printf_common+0x14>
 8002d92:	0013      	movs	r3, r2
 8002d94:	0022      	movs	r2, r4
 8002d96:	602b      	str	r3, [r5, #0]
 8002d98:	3243      	adds	r2, #67	; 0x43
 8002d9a:	7812      	ldrb	r2, [r2, #0]
 8002d9c:	2a00      	cmp	r2, #0
 8002d9e:	d001      	beq.n	8002da4 <_printf_common+0x24>
 8002da0:	3301      	adds	r3, #1
 8002da2:	602b      	str	r3, [r5, #0]
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	069b      	lsls	r3, r3, #26
 8002da8:	d502      	bpl.n	8002db0 <_printf_common+0x30>
 8002daa:	682b      	ldr	r3, [r5, #0]
 8002dac:	3302      	adds	r3, #2
 8002dae:	602b      	str	r3, [r5, #0]
 8002db0:	6822      	ldr	r2, [r4, #0]
 8002db2:	2306      	movs	r3, #6
 8002db4:	0017      	movs	r7, r2
 8002db6:	401f      	ands	r7, r3
 8002db8:	421a      	tst	r2, r3
 8002dba:	d027      	beq.n	8002e0c <_printf_common+0x8c>
 8002dbc:	0023      	movs	r3, r4
 8002dbe:	3343      	adds	r3, #67	; 0x43
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	1e5a      	subs	r2, r3, #1
 8002dc4:	4193      	sbcs	r3, r2
 8002dc6:	6822      	ldr	r2, [r4, #0]
 8002dc8:	0692      	lsls	r2, r2, #26
 8002dca:	d430      	bmi.n	8002e2e <_printf_common+0xae>
 8002dcc:	0022      	movs	r2, r4
 8002dce:	9901      	ldr	r1, [sp, #4]
 8002dd0:	9800      	ldr	r0, [sp, #0]
 8002dd2:	9e08      	ldr	r6, [sp, #32]
 8002dd4:	3243      	adds	r2, #67	; 0x43
 8002dd6:	47b0      	blx	r6
 8002dd8:	1c43      	adds	r3, r0, #1
 8002dda:	d025      	beq.n	8002e28 <_printf_common+0xa8>
 8002ddc:	2306      	movs	r3, #6
 8002dde:	6820      	ldr	r0, [r4, #0]
 8002de0:	682a      	ldr	r2, [r5, #0]
 8002de2:	68e1      	ldr	r1, [r4, #12]
 8002de4:	2500      	movs	r5, #0
 8002de6:	4003      	ands	r3, r0
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d103      	bne.n	8002df4 <_printf_common+0x74>
 8002dec:	1a8d      	subs	r5, r1, r2
 8002dee:	43eb      	mvns	r3, r5
 8002df0:	17db      	asrs	r3, r3, #31
 8002df2:	401d      	ands	r5, r3
 8002df4:	68a3      	ldr	r3, [r4, #8]
 8002df6:	6922      	ldr	r2, [r4, #16]
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	dd01      	ble.n	8002e00 <_printf_common+0x80>
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	18ed      	adds	r5, r5, r3
 8002e00:	2700      	movs	r7, #0
 8002e02:	42bd      	cmp	r5, r7
 8002e04:	d120      	bne.n	8002e48 <_printf_common+0xc8>
 8002e06:	2000      	movs	r0, #0
 8002e08:	e010      	b.n	8002e2c <_printf_common+0xac>
 8002e0a:	3701      	adds	r7, #1
 8002e0c:	68e3      	ldr	r3, [r4, #12]
 8002e0e:	682a      	ldr	r2, [r5, #0]
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	42bb      	cmp	r3, r7
 8002e14:	ddd2      	ble.n	8002dbc <_printf_common+0x3c>
 8002e16:	0022      	movs	r2, r4
 8002e18:	2301      	movs	r3, #1
 8002e1a:	9901      	ldr	r1, [sp, #4]
 8002e1c:	9800      	ldr	r0, [sp, #0]
 8002e1e:	9e08      	ldr	r6, [sp, #32]
 8002e20:	3219      	adds	r2, #25
 8002e22:	47b0      	blx	r6
 8002e24:	1c43      	adds	r3, r0, #1
 8002e26:	d1f0      	bne.n	8002e0a <_printf_common+0x8a>
 8002e28:	2001      	movs	r0, #1
 8002e2a:	4240      	negs	r0, r0
 8002e2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e2e:	2030      	movs	r0, #48	; 0x30
 8002e30:	18e1      	adds	r1, r4, r3
 8002e32:	3143      	adds	r1, #67	; 0x43
 8002e34:	7008      	strb	r0, [r1, #0]
 8002e36:	0021      	movs	r1, r4
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	3145      	adds	r1, #69	; 0x45
 8002e3c:	7809      	ldrb	r1, [r1, #0]
 8002e3e:	18a2      	adds	r2, r4, r2
 8002e40:	3243      	adds	r2, #67	; 0x43
 8002e42:	3302      	adds	r3, #2
 8002e44:	7011      	strb	r1, [r2, #0]
 8002e46:	e7c1      	b.n	8002dcc <_printf_common+0x4c>
 8002e48:	0022      	movs	r2, r4
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	9901      	ldr	r1, [sp, #4]
 8002e4e:	9800      	ldr	r0, [sp, #0]
 8002e50:	9e08      	ldr	r6, [sp, #32]
 8002e52:	321a      	adds	r2, #26
 8002e54:	47b0      	blx	r6
 8002e56:	1c43      	adds	r3, r0, #1
 8002e58:	d0e6      	beq.n	8002e28 <_printf_common+0xa8>
 8002e5a:	3701      	adds	r7, #1
 8002e5c:	e7d1      	b.n	8002e02 <_printf_common+0x82>
	...

08002e60 <_printf_i>:
 8002e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e62:	b08b      	sub	sp, #44	; 0x2c
 8002e64:	9206      	str	r2, [sp, #24]
 8002e66:	000a      	movs	r2, r1
 8002e68:	3243      	adds	r2, #67	; 0x43
 8002e6a:	9307      	str	r3, [sp, #28]
 8002e6c:	9005      	str	r0, [sp, #20]
 8002e6e:	9204      	str	r2, [sp, #16]
 8002e70:	7e0a      	ldrb	r2, [r1, #24]
 8002e72:	000c      	movs	r4, r1
 8002e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002e76:	2a78      	cmp	r2, #120	; 0x78
 8002e78:	d806      	bhi.n	8002e88 <_printf_i+0x28>
 8002e7a:	2a62      	cmp	r2, #98	; 0x62
 8002e7c:	d808      	bhi.n	8002e90 <_printf_i+0x30>
 8002e7e:	2a00      	cmp	r2, #0
 8002e80:	d100      	bne.n	8002e84 <_printf_i+0x24>
 8002e82:	e0c0      	b.n	8003006 <_printf_i+0x1a6>
 8002e84:	2a58      	cmp	r2, #88	; 0x58
 8002e86:	d052      	beq.n	8002f2e <_printf_i+0xce>
 8002e88:	0026      	movs	r6, r4
 8002e8a:	3642      	adds	r6, #66	; 0x42
 8002e8c:	7032      	strb	r2, [r6, #0]
 8002e8e:	e022      	b.n	8002ed6 <_printf_i+0x76>
 8002e90:	0010      	movs	r0, r2
 8002e92:	3863      	subs	r0, #99	; 0x63
 8002e94:	2815      	cmp	r0, #21
 8002e96:	d8f7      	bhi.n	8002e88 <_printf_i+0x28>
 8002e98:	f7fd f934 	bl	8000104 <__gnu_thumb1_case_shi>
 8002e9c:	001f0016 	.word	0x001f0016
 8002ea0:	fff6fff6 	.word	0xfff6fff6
 8002ea4:	fff6fff6 	.word	0xfff6fff6
 8002ea8:	fff6001f 	.word	0xfff6001f
 8002eac:	fff6fff6 	.word	0xfff6fff6
 8002eb0:	00a8fff6 	.word	0x00a8fff6
 8002eb4:	009a0036 	.word	0x009a0036
 8002eb8:	fff6fff6 	.word	0xfff6fff6
 8002ebc:	fff600b9 	.word	0xfff600b9
 8002ec0:	fff60036 	.word	0xfff60036
 8002ec4:	009efff6 	.word	0x009efff6
 8002ec8:	0026      	movs	r6, r4
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	3642      	adds	r6, #66	; 0x42
 8002ece:	1d11      	adds	r1, r2, #4
 8002ed0:	6019      	str	r1, [r3, #0]
 8002ed2:	6813      	ldr	r3, [r2, #0]
 8002ed4:	7033      	strb	r3, [r6, #0]
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e0a7      	b.n	800302a <_printf_i+0x1ca>
 8002eda:	6808      	ldr	r0, [r1, #0]
 8002edc:	6819      	ldr	r1, [r3, #0]
 8002ede:	1d0a      	adds	r2, r1, #4
 8002ee0:	0605      	lsls	r5, r0, #24
 8002ee2:	d50b      	bpl.n	8002efc <_printf_i+0x9c>
 8002ee4:	680d      	ldr	r5, [r1, #0]
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	2d00      	cmp	r5, #0
 8002eea:	da03      	bge.n	8002ef4 <_printf_i+0x94>
 8002eec:	232d      	movs	r3, #45	; 0x2d
 8002eee:	9a04      	ldr	r2, [sp, #16]
 8002ef0:	426d      	negs	r5, r5
 8002ef2:	7013      	strb	r3, [r2, #0]
 8002ef4:	4b61      	ldr	r3, [pc, #388]	; (800307c <_printf_i+0x21c>)
 8002ef6:	270a      	movs	r7, #10
 8002ef8:	9303      	str	r3, [sp, #12]
 8002efa:	e032      	b.n	8002f62 <_printf_i+0x102>
 8002efc:	680d      	ldr	r5, [r1, #0]
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	0641      	lsls	r1, r0, #25
 8002f02:	d5f1      	bpl.n	8002ee8 <_printf_i+0x88>
 8002f04:	b22d      	sxth	r5, r5
 8002f06:	e7ef      	b.n	8002ee8 <_printf_i+0x88>
 8002f08:	680d      	ldr	r5, [r1, #0]
 8002f0a:	6819      	ldr	r1, [r3, #0]
 8002f0c:	1d08      	adds	r0, r1, #4
 8002f0e:	6018      	str	r0, [r3, #0]
 8002f10:	062e      	lsls	r6, r5, #24
 8002f12:	d501      	bpl.n	8002f18 <_printf_i+0xb8>
 8002f14:	680d      	ldr	r5, [r1, #0]
 8002f16:	e003      	b.n	8002f20 <_printf_i+0xc0>
 8002f18:	066d      	lsls	r5, r5, #25
 8002f1a:	d5fb      	bpl.n	8002f14 <_printf_i+0xb4>
 8002f1c:	680d      	ldr	r5, [r1, #0]
 8002f1e:	b2ad      	uxth	r5, r5
 8002f20:	4b56      	ldr	r3, [pc, #344]	; (800307c <_printf_i+0x21c>)
 8002f22:	270a      	movs	r7, #10
 8002f24:	9303      	str	r3, [sp, #12]
 8002f26:	2a6f      	cmp	r2, #111	; 0x6f
 8002f28:	d117      	bne.n	8002f5a <_printf_i+0xfa>
 8002f2a:	2708      	movs	r7, #8
 8002f2c:	e015      	b.n	8002f5a <_printf_i+0xfa>
 8002f2e:	3145      	adds	r1, #69	; 0x45
 8002f30:	700a      	strb	r2, [r1, #0]
 8002f32:	4a52      	ldr	r2, [pc, #328]	; (800307c <_printf_i+0x21c>)
 8002f34:	9203      	str	r2, [sp, #12]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	6821      	ldr	r1, [r4, #0]
 8002f3a:	ca20      	ldmia	r2!, {r5}
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	0608      	lsls	r0, r1, #24
 8002f40:	d550      	bpl.n	8002fe4 <_printf_i+0x184>
 8002f42:	07cb      	lsls	r3, r1, #31
 8002f44:	d502      	bpl.n	8002f4c <_printf_i+0xec>
 8002f46:	2320      	movs	r3, #32
 8002f48:	4319      	orrs	r1, r3
 8002f4a:	6021      	str	r1, [r4, #0]
 8002f4c:	2710      	movs	r7, #16
 8002f4e:	2d00      	cmp	r5, #0
 8002f50:	d103      	bne.n	8002f5a <_printf_i+0xfa>
 8002f52:	2320      	movs	r3, #32
 8002f54:	6822      	ldr	r2, [r4, #0]
 8002f56:	439a      	bics	r2, r3
 8002f58:	6022      	str	r2, [r4, #0]
 8002f5a:	0023      	movs	r3, r4
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	3343      	adds	r3, #67	; 0x43
 8002f60:	701a      	strb	r2, [r3, #0]
 8002f62:	6863      	ldr	r3, [r4, #4]
 8002f64:	60a3      	str	r3, [r4, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	db03      	blt.n	8002f72 <_printf_i+0x112>
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	6821      	ldr	r1, [r4, #0]
 8002f6e:	4391      	bics	r1, r2
 8002f70:	6021      	str	r1, [r4, #0]
 8002f72:	2d00      	cmp	r5, #0
 8002f74:	d102      	bne.n	8002f7c <_printf_i+0x11c>
 8002f76:	9e04      	ldr	r6, [sp, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00c      	beq.n	8002f96 <_printf_i+0x136>
 8002f7c:	9e04      	ldr	r6, [sp, #16]
 8002f7e:	0028      	movs	r0, r5
 8002f80:	0039      	movs	r1, r7
 8002f82:	f7fd f94f 	bl	8000224 <__aeabi_uidivmod>
 8002f86:	9b03      	ldr	r3, [sp, #12]
 8002f88:	3e01      	subs	r6, #1
 8002f8a:	5c5b      	ldrb	r3, [r3, r1]
 8002f8c:	7033      	strb	r3, [r6, #0]
 8002f8e:	002b      	movs	r3, r5
 8002f90:	0005      	movs	r5, r0
 8002f92:	429f      	cmp	r7, r3
 8002f94:	d9f3      	bls.n	8002f7e <_printf_i+0x11e>
 8002f96:	2f08      	cmp	r7, #8
 8002f98:	d109      	bne.n	8002fae <_printf_i+0x14e>
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	07db      	lsls	r3, r3, #31
 8002f9e:	d506      	bpl.n	8002fae <_printf_i+0x14e>
 8002fa0:	6863      	ldr	r3, [r4, #4]
 8002fa2:	6922      	ldr	r2, [r4, #16]
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	dc02      	bgt.n	8002fae <_printf_i+0x14e>
 8002fa8:	2330      	movs	r3, #48	; 0x30
 8002faa:	3e01      	subs	r6, #1
 8002fac:	7033      	strb	r3, [r6, #0]
 8002fae:	9b04      	ldr	r3, [sp, #16]
 8002fb0:	1b9b      	subs	r3, r3, r6
 8002fb2:	6123      	str	r3, [r4, #16]
 8002fb4:	9b07      	ldr	r3, [sp, #28]
 8002fb6:	0021      	movs	r1, r4
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	9805      	ldr	r0, [sp, #20]
 8002fbc:	9b06      	ldr	r3, [sp, #24]
 8002fbe:	aa09      	add	r2, sp, #36	; 0x24
 8002fc0:	f7ff fede 	bl	8002d80 <_printf_common>
 8002fc4:	1c43      	adds	r3, r0, #1
 8002fc6:	d135      	bne.n	8003034 <_printf_i+0x1d4>
 8002fc8:	2001      	movs	r0, #1
 8002fca:	4240      	negs	r0, r0
 8002fcc:	b00b      	add	sp, #44	; 0x2c
 8002fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	6809      	ldr	r1, [r1, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	6022      	str	r2, [r4, #0]
 8002fd8:	0022      	movs	r2, r4
 8002fda:	2178      	movs	r1, #120	; 0x78
 8002fdc:	3245      	adds	r2, #69	; 0x45
 8002fde:	7011      	strb	r1, [r2, #0]
 8002fe0:	4a27      	ldr	r2, [pc, #156]	; (8003080 <_printf_i+0x220>)
 8002fe2:	e7a7      	b.n	8002f34 <_printf_i+0xd4>
 8002fe4:	0648      	lsls	r0, r1, #25
 8002fe6:	d5ac      	bpl.n	8002f42 <_printf_i+0xe2>
 8002fe8:	b2ad      	uxth	r5, r5
 8002fea:	e7aa      	b.n	8002f42 <_printf_i+0xe2>
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	680d      	ldr	r5, [r1, #0]
 8002ff0:	1d10      	adds	r0, r2, #4
 8002ff2:	6949      	ldr	r1, [r1, #20]
 8002ff4:	6018      	str	r0, [r3, #0]
 8002ff6:	6813      	ldr	r3, [r2, #0]
 8002ff8:	062e      	lsls	r6, r5, #24
 8002ffa:	d501      	bpl.n	8003000 <_printf_i+0x1a0>
 8002ffc:	6019      	str	r1, [r3, #0]
 8002ffe:	e002      	b.n	8003006 <_printf_i+0x1a6>
 8003000:	066d      	lsls	r5, r5, #25
 8003002:	d5fb      	bpl.n	8002ffc <_printf_i+0x19c>
 8003004:	8019      	strh	r1, [r3, #0]
 8003006:	2300      	movs	r3, #0
 8003008:	9e04      	ldr	r6, [sp, #16]
 800300a:	6123      	str	r3, [r4, #16]
 800300c:	e7d2      	b.n	8002fb4 <_printf_i+0x154>
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	1d11      	adds	r1, r2, #4
 8003012:	6019      	str	r1, [r3, #0]
 8003014:	6816      	ldr	r6, [r2, #0]
 8003016:	2100      	movs	r1, #0
 8003018:	0030      	movs	r0, r6
 800301a:	6862      	ldr	r2, [r4, #4]
 800301c:	f000 f832 	bl	8003084 <memchr>
 8003020:	2800      	cmp	r0, #0
 8003022:	d001      	beq.n	8003028 <_printf_i+0x1c8>
 8003024:	1b80      	subs	r0, r0, r6
 8003026:	6060      	str	r0, [r4, #4]
 8003028:	6863      	ldr	r3, [r4, #4]
 800302a:	6123      	str	r3, [r4, #16]
 800302c:	2300      	movs	r3, #0
 800302e:	9a04      	ldr	r2, [sp, #16]
 8003030:	7013      	strb	r3, [r2, #0]
 8003032:	e7bf      	b.n	8002fb4 <_printf_i+0x154>
 8003034:	6923      	ldr	r3, [r4, #16]
 8003036:	0032      	movs	r2, r6
 8003038:	9906      	ldr	r1, [sp, #24]
 800303a:	9805      	ldr	r0, [sp, #20]
 800303c:	9d07      	ldr	r5, [sp, #28]
 800303e:	47a8      	blx	r5
 8003040:	1c43      	adds	r3, r0, #1
 8003042:	d0c1      	beq.n	8002fc8 <_printf_i+0x168>
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	079b      	lsls	r3, r3, #30
 8003048:	d415      	bmi.n	8003076 <_printf_i+0x216>
 800304a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800304c:	68e0      	ldr	r0, [r4, #12]
 800304e:	4298      	cmp	r0, r3
 8003050:	dabc      	bge.n	8002fcc <_printf_i+0x16c>
 8003052:	0018      	movs	r0, r3
 8003054:	e7ba      	b.n	8002fcc <_printf_i+0x16c>
 8003056:	0022      	movs	r2, r4
 8003058:	2301      	movs	r3, #1
 800305a:	9906      	ldr	r1, [sp, #24]
 800305c:	9805      	ldr	r0, [sp, #20]
 800305e:	9e07      	ldr	r6, [sp, #28]
 8003060:	3219      	adds	r2, #25
 8003062:	47b0      	blx	r6
 8003064:	1c43      	adds	r3, r0, #1
 8003066:	d0af      	beq.n	8002fc8 <_printf_i+0x168>
 8003068:	3501      	adds	r5, #1
 800306a:	68e3      	ldr	r3, [r4, #12]
 800306c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	42ab      	cmp	r3, r5
 8003072:	dcf0      	bgt.n	8003056 <_printf_i+0x1f6>
 8003074:	e7e9      	b.n	800304a <_printf_i+0x1ea>
 8003076:	2500      	movs	r5, #0
 8003078:	e7f7      	b.n	800306a <_printf_i+0x20a>
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	08003331 	.word	0x08003331
 8003080:	08003342 	.word	0x08003342

08003084 <memchr>:
 8003084:	b2c9      	uxtb	r1, r1
 8003086:	1882      	adds	r2, r0, r2
 8003088:	4290      	cmp	r0, r2
 800308a:	d101      	bne.n	8003090 <memchr+0xc>
 800308c:	2000      	movs	r0, #0
 800308e:	4770      	bx	lr
 8003090:	7803      	ldrb	r3, [r0, #0]
 8003092:	428b      	cmp	r3, r1
 8003094:	d0fb      	beq.n	800308e <memchr+0xa>
 8003096:	3001      	adds	r0, #1
 8003098:	e7f6      	b.n	8003088 <memchr+0x4>

0800309a <memcpy>:
 800309a:	2300      	movs	r3, #0
 800309c:	b510      	push	{r4, lr}
 800309e:	429a      	cmp	r2, r3
 80030a0:	d100      	bne.n	80030a4 <memcpy+0xa>
 80030a2:	bd10      	pop	{r4, pc}
 80030a4:	5ccc      	ldrb	r4, [r1, r3]
 80030a6:	54c4      	strb	r4, [r0, r3]
 80030a8:	3301      	adds	r3, #1
 80030aa:	e7f8      	b.n	800309e <memcpy+0x4>

080030ac <memmove>:
 80030ac:	b510      	push	{r4, lr}
 80030ae:	4288      	cmp	r0, r1
 80030b0:	d902      	bls.n	80030b8 <memmove+0xc>
 80030b2:	188b      	adds	r3, r1, r2
 80030b4:	4298      	cmp	r0, r3
 80030b6:	d303      	bcc.n	80030c0 <memmove+0x14>
 80030b8:	2300      	movs	r3, #0
 80030ba:	e007      	b.n	80030cc <memmove+0x20>
 80030bc:	5c8b      	ldrb	r3, [r1, r2]
 80030be:	5483      	strb	r3, [r0, r2]
 80030c0:	3a01      	subs	r2, #1
 80030c2:	d2fb      	bcs.n	80030bc <memmove+0x10>
 80030c4:	bd10      	pop	{r4, pc}
 80030c6:	5ccc      	ldrb	r4, [r1, r3]
 80030c8:	54c4      	strb	r4, [r0, r3]
 80030ca:	3301      	adds	r3, #1
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d1fa      	bne.n	80030c6 <memmove+0x1a>
 80030d0:	e7f8      	b.n	80030c4 <memmove+0x18>
	...

080030d4 <_free_r>:
 80030d4:	b570      	push	{r4, r5, r6, lr}
 80030d6:	0005      	movs	r5, r0
 80030d8:	2900      	cmp	r1, #0
 80030da:	d010      	beq.n	80030fe <_free_r+0x2a>
 80030dc:	1f0c      	subs	r4, r1, #4
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	da00      	bge.n	80030e6 <_free_r+0x12>
 80030e4:	18e4      	adds	r4, r4, r3
 80030e6:	0028      	movs	r0, r5
 80030e8:	f000 f8d4 	bl	8003294 <__malloc_lock>
 80030ec:	4a1d      	ldr	r2, [pc, #116]	; (8003164 <_free_r+0x90>)
 80030ee:	6813      	ldr	r3, [r2, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d105      	bne.n	8003100 <_free_r+0x2c>
 80030f4:	6063      	str	r3, [r4, #4]
 80030f6:	6014      	str	r4, [r2, #0]
 80030f8:	0028      	movs	r0, r5
 80030fa:	f000 f8d3 	bl	80032a4 <__malloc_unlock>
 80030fe:	bd70      	pop	{r4, r5, r6, pc}
 8003100:	42a3      	cmp	r3, r4
 8003102:	d908      	bls.n	8003116 <_free_r+0x42>
 8003104:	6821      	ldr	r1, [r4, #0]
 8003106:	1860      	adds	r0, r4, r1
 8003108:	4283      	cmp	r3, r0
 800310a:	d1f3      	bne.n	80030f4 <_free_r+0x20>
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	1841      	adds	r1, r0, r1
 8003112:	6021      	str	r1, [r4, #0]
 8003114:	e7ee      	b.n	80030f4 <_free_r+0x20>
 8003116:	001a      	movs	r2, r3
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <_free_r+0x4e>
 800311e:	42a3      	cmp	r3, r4
 8003120:	d9f9      	bls.n	8003116 <_free_r+0x42>
 8003122:	6811      	ldr	r1, [r2, #0]
 8003124:	1850      	adds	r0, r2, r1
 8003126:	42a0      	cmp	r0, r4
 8003128:	d10b      	bne.n	8003142 <_free_r+0x6e>
 800312a:	6820      	ldr	r0, [r4, #0]
 800312c:	1809      	adds	r1, r1, r0
 800312e:	1850      	adds	r0, r2, r1
 8003130:	6011      	str	r1, [r2, #0]
 8003132:	4283      	cmp	r3, r0
 8003134:	d1e0      	bne.n	80030f8 <_free_r+0x24>
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	1841      	adds	r1, r0, r1
 800313c:	6011      	str	r1, [r2, #0]
 800313e:	6053      	str	r3, [r2, #4]
 8003140:	e7da      	b.n	80030f8 <_free_r+0x24>
 8003142:	42a0      	cmp	r0, r4
 8003144:	d902      	bls.n	800314c <_free_r+0x78>
 8003146:	230c      	movs	r3, #12
 8003148:	602b      	str	r3, [r5, #0]
 800314a:	e7d5      	b.n	80030f8 <_free_r+0x24>
 800314c:	6821      	ldr	r1, [r4, #0]
 800314e:	1860      	adds	r0, r4, r1
 8003150:	4283      	cmp	r3, r0
 8003152:	d103      	bne.n	800315c <_free_r+0x88>
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	1841      	adds	r1, r0, r1
 800315a:	6021      	str	r1, [r4, #0]
 800315c:	6063      	str	r3, [r4, #4]
 800315e:	6054      	str	r4, [r2, #4]
 8003160:	e7ca      	b.n	80030f8 <_free_r+0x24>
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	20000090 	.word	0x20000090

08003168 <_malloc_r>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	2303      	movs	r3, #3
 800316c:	1ccd      	adds	r5, r1, #3
 800316e:	439d      	bics	r5, r3
 8003170:	3508      	adds	r5, #8
 8003172:	0006      	movs	r6, r0
 8003174:	2d0c      	cmp	r5, #12
 8003176:	d21f      	bcs.n	80031b8 <_malloc_r+0x50>
 8003178:	250c      	movs	r5, #12
 800317a:	42a9      	cmp	r1, r5
 800317c:	d81e      	bhi.n	80031bc <_malloc_r+0x54>
 800317e:	0030      	movs	r0, r6
 8003180:	f000 f888 	bl	8003294 <__malloc_lock>
 8003184:	4925      	ldr	r1, [pc, #148]	; (800321c <_malloc_r+0xb4>)
 8003186:	680a      	ldr	r2, [r1, #0]
 8003188:	0014      	movs	r4, r2
 800318a:	2c00      	cmp	r4, #0
 800318c:	d11a      	bne.n	80031c4 <_malloc_r+0x5c>
 800318e:	4f24      	ldr	r7, [pc, #144]	; (8003220 <_malloc_r+0xb8>)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d104      	bne.n	80031a0 <_malloc_r+0x38>
 8003196:	0021      	movs	r1, r4
 8003198:	0030      	movs	r0, r6
 800319a:	f000 f869 	bl	8003270 <_sbrk_r>
 800319e:	6038      	str	r0, [r7, #0]
 80031a0:	0029      	movs	r1, r5
 80031a2:	0030      	movs	r0, r6
 80031a4:	f000 f864 	bl	8003270 <_sbrk_r>
 80031a8:	1c43      	adds	r3, r0, #1
 80031aa:	d12b      	bne.n	8003204 <_malloc_r+0x9c>
 80031ac:	230c      	movs	r3, #12
 80031ae:	0030      	movs	r0, r6
 80031b0:	6033      	str	r3, [r6, #0]
 80031b2:	f000 f877 	bl	80032a4 <__malloc_unlock>
 80031b6:	e003      	b.n	80031c0 <_malloc_r+0x58>
 80031b8:	2d00      	cmp	r5, #0
 80031ba:	dade      	bge.n	800317a <_malloc_r+0x12>
 80031bc:	230c      	movs	r3, #12
 80031be:	6033      	str	r3, [r6, #0]
 80031c0:	2000      	movs	r0, #0
 80031c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	1b5b      	subs	r3, r3, r5
 80031c8:	d419      	bmi.n	80031fe <_malloc_r+0x96>
 80031ca:	2b0b      	cmp	r3, #11
 80031cc:	d903      	bls.n	80031d6 <_malloc_r+0x6e>
 80031ce:	6023      	str	r3, [r4, #0]
 80031d0:	18e4      	adds	r4, r4, r3
 80031d2:	6025      	str	r5, [r4, #0]
 80031d4:	e003      	b.n	80031de <_malloc_r+0x76>
 80031d6:	6863      	ldr	r3, [r4, #4]
 80031d8:	42a2      	cmp	r2, r4
 80031da:	d10e      	bne.n	80031fa <_malloc_r+0x92>
 80031dc:	600b      	str	r3, [r1, #0]
 80031de:	0030      	movs	r0, r6
 80031e0:	f000 f860 	bl	80032a4 <__malloc_unlock>
 80031e4:	0020      	movs	r0, r4
 80031e6:	2207      	movs	r2, #7
 80031e8:	300b      	adds	r0, #11
 80031ea:	1d23      	adds	r3, r4, #4
 80031ec:	4390      	bics	r0, r2
 80031ee:	1ac2      	subs	r2, r0, r3
 80031f0:	4298      	cmp	r0, r3
 80031f2:	d0e6      	beq.n	80031c2 <_malloc_r+0x5a>
 80031f4:	1a1b      	subs	r3, r3, r0
 80031f6:	50a3      	str	r3, [r4, r2]
 80031f8:	e7e3      	b.n	80031c2 <_malloc_r+0x5a>
 80031fa:	6053      	str	r3, [r2, #4]
 80031fc:	e7ef      	b.n	80031de <_malloc_r+0x76>
 80031fe:	0022      	movs	r2, r4
 8003200:	6864      	ldr	r4, [r4, #4]
 8003202:	e7c2      	b.n	800318a <_malloc_r+0x22>
 8003204:	2303      	movs	r3, #3
 8003206:	1cc4      	adds	r4, r0, #3
 8003208:	439c      	bics	r4, r3
 800320a:	42a0      	cmp	r0, r4
 800320c:	d0e1      	beq.n	80031d2 <_malloc_r+0x6a>
 800320e:	1a21      	subs	r1, r4, r0
 8003210:	0030      	movs	r0, r6
 8003212:	f000 f82d 	bl	8003270 <_sbrk_r>
 8003216:	1c43      	adds	r3, r0, #1
 8003218:	d1db      	bne.n	80031d2 <_malloc_r+0x6a>
 800321a:	e7c7      	b.n	80031ac <_malloc_r+0x44>
 800321c:	20000090 	.word	0x20000090
 8003220:	20000094 	.word	0x20000094

08003224 <_realloc_r>:
 8003224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003226:	0007      	movs	r7, r0
 8003228:	000d      	movs	r5, r1
 800322a:	0016      	movs	r6, r2
 800322c:	2900      	cmp	r1, #0
 800322e:	d105      	bne.n	800323c <_realloc_r+0x18>
 8003230:	0011      	movs	r1, r2
 8003232:	f7ff ff99 	bl	8003168 <_malloc_r>
 8003236:	0004      	movs	r4, r0
 8003238:	0020      	movs	r0, r4
 800323a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800323c:	2a00      	cmp	r2, #0
 800323e:	d103      	bne.n	8003248 <_realloc_r+0x24>
 8003240:	f7ff ff48 	bl	80030d4 <_free_r>
 8003244:	0034      	movs	r4, r6
 8003246:	e7f7      	b.n	8003238 <_realloc_r+0x14>
 8003248:	f000 f834 	bl	80032b4 <_malloc_usable_size_r>
 800324c:	002c      	movs	r4, r5
 800324e:	42b0      	cmp	r0, r6
 8003250:	d2f2      	bcs.n	8003238 <_realloc_r+0x14>
 8003252:	0031      	movs	r1, r6
 8003254:	0038      	movs	r0, r7
 8003256:	f7ff ff87 	bl	8003168 <_malloc_r>
 800325a:	1e04      	subs	r4, r0, #0
 800325c:	d0ec      	beq.n	8003238 <_realloc_r+0x14>
 800325e:	0029      	movs	r1, r5
 8003260:	0032      	movs	r2, r6
 8003262:	f7ff ff1a 	bl	800309a <memcpy>
 8003266:	0029      	movs	r1, r5
 8003268:	0038      	movs	r0, r7
 800326a:	f7ff ff33 	bl	80030d4 <_free_r>
 800326e:	e7e3      	b.n	8003238 <_realloc_r+0x14>

08003270 <_sbrk_r>:
 8003270:	2300      	movs	r3, #0
 8003272:	b570      	push	{r4, r5, r6, lr}
 8003274:	4d06      	ldr	r5, [pc, #24]	; (8003290 <_sbrk_r+0x20>)
 8003276:	0004      	movs	r4, r0
 8003278:	0008      	movs	r0, r1
 800327a:	602b      	str	r3, [r5, #0]
 800327c:	f7fd fa3c 	bl	80006f8 <_sbrk>
 8003280:	1c43      	adds	r3, r0, #1
 8003282:	d103      	bne.n	800328c <_sbrk_r+0x1c>
 8003284:	682b      	ldr	r3, [r5, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d000      	beq.n	800328c <_sbrk_r+0x1c>
 800328a:	6023      	str	r3, [r4, #0]
 800328c:	bd70      	pop	{r4, r5, r6, pc}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	20000170 	.word	0x20000170

08003294 <__malloc_lock>:
 8003294:	b510      	push	{r4, lr}
 8003296:	4802      	ldr	r0, [pc, #8]	; (80032a0 <__malloc_lock+0xc>)
 8003298:	f000 f814 	bl	80032c4 <__retarget_lock_acquire_recursive>
 800329c:	bd10      	pop	{r4, pc}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	20000178 	.word	0x20000178

080032a4 <__malloc_unlock>:
 80032a4:	b510      	push	{r4, lr}
 80032a6:	4802      	ldr	r0, [pc, #8]	; (80032b0 <__malloc_unlock+0xc>)
 80032a8:	f000 f80d 	bl	80032c6 <__retarget_lock_release_recursive>
 80032ac:	bd10      	pop	{r4, pc}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	20000178 	.word	0x20000178

080032b4 <_malloc_usable_size_r>:
 80032b4:	1f0b      	subs	r3, r1, #4
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	1f18      	subs	r0, r3, #4
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	da01      	bge.n	80032c2 <_malloc_usable_size_r+0xe>
 80032be:	580b      	ldr	r3, [r1, r0]
 80032c0:	18c0      	adds	r0, r0, r3
 80032c2:	4770      	bx	lr

080032c4 <__retarget_lock_acquire_recursive>:
 80032c4:	4770      	bx	lr

080032c6 <__retarget_lock_release_recursive>:
 80032c6:	4770      	bx	lr

080032c8 <_init>:
 80032c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ce:	bc08      	pop	{r3}
 80032d0:	469e      	mov	lr, r3
 80032d2:	4770      	bx	lr

080032d4 <_fini>:
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032da:	bc08      	pop	{r3}
 80032dc:	469e      	mov	lr, r3
 80032de:	4770      	bx	lr
