
uart_stm_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b9c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08003c58  08003c58  00013c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003db8  08003db8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003db8  08003db8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003db8  08003db8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003db8  08003db8  00013db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dbc  08003dbc  00013dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000018  08003dd4  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08003dd4  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086e9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013e5  00000000  00000000  00028725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  00029b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000598  00000000  00000000  0002a120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a82d  00000000  00000000  0002a6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000848a  00000000  00000000  00044ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0ec1  00000000  00000000  0004d36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee230  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001694  00000000  00000000  000ee284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000018 	.word	0x20000018
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003c40 	.word	0x08003c40

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000001c 	.word	0x2000001c
 8000100:	08003c40 	.word	0x08003c40

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_fdiv>:
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	464f      	mov	r7, r9
 8000220:	4646      	mov	r6, r8
 8000222:	46d6      	mov	lr, sl
 8000224:	0245      	lsls	r5, r0, #9
 8000226:	b5c0      	push	{r6, r7, lr}
 8000228:	0047      	lsls	r7, r0, #1
 800022a:	1c0c      	adds	r4, r1, #0
 800022c:	0a6d      	lsrs	r5, r5, #9
 800022e:	0e3f      	lsrs	r7, r7, #24
 8000230:	0fc6      	lsrs	r6, r0, #31
 8000232:	2f00      	cmp	r7, #0
 8000234:	d066      	beq.n	8000304 <__aeabi_fdiv+0xe8>
 8000236:	2fff      	cmp	r7, #255	; 0xff
 8000238:	d06c      	beq.n	8000314 <__aeabi_fdiv+0xf8>
 800023a:	2300      	movs	r3, #0
 800023c:	00ea      	lsls	r2, r5, #3
 800023e:	2580      	movs	r5, #128	; 0x80
 8000240:	4699      	mov	r9, r3
 8000242:	469a      	mov	sl, r3
 8000244:	04ed      	lsls	r5, r5, #19
 8000246:	4315      	orrs	r5, r2
 8000248:	3f7f      	subs	r7, #127	; 0x7f
 800024a:	0260      	lsls	r0, r4, #9
 800024c:	0061      	lsls	r1, r4, #1
 800024e:	0a43      	lsrs	r3, r0, #9
 8000250:	4698      	mov	r8, r3
 8000252:	0e09      	lsrs	r1, r1, #24
 8000254:	0fe4      	lsrs	r4, r4, #31
 8000256:	2900      	cmp	r1, #0
 8000258:	d048      	beq.n	80002ec <__aeabi_fdiv+0xd0>
 800025a:	29ff      	cmp	r1, #255	; 0xff
 800025c:	d010      	beq.n	8000280 <__aeabi_fdiv+0x64>
 800025e:	2280      	movs	r2, #128	; 0x80
 8000260:	00d8      	lsls	r0, r3, #3
 8000262:	04d2      	lsls	r2, r2, #19
 8000264:	4302      	orrs	r2, r0
 8000266:	4690      	mov	r8, r2
 8000268:	2000      	movs	r0, #0
 800026a:	397f      	subs	r1, #127	; 0x7f
 800026c:	464a      	mov	r2, r9
 800026e:	0033      	movs	r3, r6
 8000270:	1a7f      	subs	r7, r7, r1
 8000272:	4302      	orrs	r2, r0
 8000274:	496c      	ldr	r1, [pc, #432]	; (8000428 <__aeabi_fdiv+0x20c>)
 8000276:	0092      	lsls	r2, r2, #2
 8000278:	588a      	ldr	r2, [r1, r2]
 800027a:	4063      	eors	r3, r4
 800027c:	b2db      	uxtb	r3, r3
 800027e:	4697      	mov	pc, r2
 8000280:	2b00      	cmp	r3, #0
 8000282:	d16d      	bne.n	8000360 <__aeabi_fdiv+0x144>
 8000284:	2002      	movs	r0, #2
 8000286:	3fff      	subs	r7, #255	; 0xff
 8000288:	e033      	b.n	80002f2 <__aeabi_fdiv+0xd6>
 800028a:	2300      	movs	r3, #0
 800028c:	4698      	mov	r8, r3
 800028e:	0026      	movs	r6, r4
 8000290:	4645      	mov	r5, r8
 8000292:	4682      	mov	sl, r0
 8000294:	4653      	mov	r3, sl
 8000296:	2b02      	cmp	r3, #2
 8000298:	d100      	bne.n	800029c <__aeabi_fdiv+0x80>
 800029a:	e07f      	b.n	800039c <__aeabi_fdiv+0x180>
 800029c:	2b03      	cmp	r3, #3
 800029e:	d100      	bne.n	80002a2 <__aeabi_fdiv+0x86>
 80002a0:	e094      	b.n	80003cc <__aeabi_fdiv+0x1b0>
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d017      	beq.n	80002d6 <__aeabi_fdiv+0xba>
 80002a6:	0038      	movs	r0, r7
 80002a8:	307f      	adds	r0, #127	; 0x7f
 80002aa:	2800      	cmp	r0, #0
 80002ac:	dd5f      	ble.n	800036e <__aeabi_fdiv+0x152>
 80002ae:	076b      	lsls	r3, r5, #29
 80002b0:	d004      	beq.n	80002bc <__aeabi_fdiv+0xa0>
 80002b2:	230f      	movs	r3, #15
 80002b4:	402b      	ands	r3, r5
 80002b6:	2b04      	cmp	r3, #4
 80002b8:	d000      	beq.n	80002bc <__aeabi_fdiv+0xa0>
 80002ba:	3504      	adds	r5, #4
 80002bc:	012b      	lsls	r3, r5, #4
 80002be:	d503      	bpl.n	80002c8 <__aeabi_fdiv+0xac>
 80002c0:	0038      	movs	r0, r7
 80002c2:	4b5a      	ldr	r3, [pc, #360]	; (800042c <__aeabi_fdiv+0x210>)
 80002c4:	3080      	adds	r0, #128	; 0x80
 80002c6:	401d      	ands	r5, r3
 80002c8:	28fe      	cmp	r0, #254	; 0xfe
 80002ca:	dc67      	bgt.n	800039c <__aeabi_fdiv+0x180>
 80002cc:	01ad      	lsls	r5, r5, #6
 80002ce:	0a6d      	lsrs	r5, r5, #9
 80002d0:	b2c0      	uxtb	r0, r0
 80002d2:	e002      	b.n	80002da <__aeabi_fdiv+0xbe>
 80002d4:	001e      	movs	r6, r3
 80002d6:	2000      	movs	r0, #0
 80002d8:	2500      	movs	r5, #0
 80002da:	05c0      	lsls	r0, r0, #23
 80002dc:	4328      	orrs	r0, r5
 80002de:	07f6      	lsls	r6, r6, #31
 80002e0:	4330      	orrs	r0, r6
 80002e2:	bce0      	pop	{r5, r6, r7}
 80002e4:	46ba      	mov	sl, r7
 80002e6:	46b1      	mov	r9, r6
 80002e8:	46a8      	mov	r8, r5
 80002ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d12b      	bne.n	8000348 <__aeabi_fdiv+0x12c>
 80002f0:	2001      	movs	r0, #1
 80002f2:	464a      	mov	r2, r9
 80002f4:	0033      	movs	r3, r6
 80002f6:	494e      	ldr	r1, [pc, #312]	; (8000430 <__aeabi_fdiv+0x214>)
 80002f8:	4302      	orrs	r2, r0
 80002fa:	0092      	lsls	r2, r2, #2
 80002fc:	588a      	ldr	r2, [r1, r2]
 80002fe:	4063      	eors	r3, r4
 8000300:	b2db      	uxtb	r3, r3
 8000302:	4697      	mov	pc, r2
 8000304:	2d00      	cmp	r5, #0
 8000306:	d113      	bne.n	8000330 <__aeabi_fdiv+0x114>
 8000308:	2304      	movs	r3, #4
 800030a:	4699      	mov	r9, r3
 800030c:	3b03      	subs	r3, #3
 800030e:	2700      	movs	r7, #0
 8000310:	469a      	mov	sl, r3
 8000312:	e79a      	b.n	800024a <__aeabi_fdiv+0x2e>
 8000314:	2d00      	cmp	r5, #0
 8000316:	d105      	bne.n	8000324 <__aeabi_fdiv+0x108>
 8000318:	2308      	movs	r3, #8
 800031a:	4699      	mov	r9, r3
 800031c:	3b06      	subs	r3, #6
 800031e:	27ff      	movs	r7, #255	; 0xff
 8000320:	469a      	mov	sl, r3
 8000322:	e792      	b.n	800024a <__aeabi_fdiv+0x2e>
 8000324:	230c      	movs	r3, #12
 8000326:	4699      	mov	r9, r3
 8000328:	3b09      	subs	r3, #9
 800032a:	27ff      	movs	r7, #255	; 0xff
 800032c:	469a      	mov	sl, r3
 800032e:	e78c      	b.n	800024a <__aeabi_fdiv+0x2e>
 8000330:	0028      	movs	r0, r5
 8000332:	f001 fa9b 	bl	800186c <__clzsi2>
 8000336:	2776      	movs	r7, #118	; 0x76
 8000338:	1f43      	subs	r3, r0, #5
 800033a:	409d      	lsls	r5, r3
 800033c:	2300      	movs	r3, #0
 800033e:	427f      	negs	r7, r7
 8000340:	4699      	mov	r9, r3
 8000342:	469a      	mov	sl, r3
 8000344:	1a3f      	subs	r7, r7, r0
 8000346:	e780      	b.n	800024a <__aeabi_fdiv+0x2e>
 8000348:	0018      	movs	r0, r3
 800034a:	f001 fa8f 	bl	800186c <__clzsi2>
 800034e:	4642      	mov	r2, r8
 8000350:	1f43      	subs	r3, r0, #5
 8000352:	2176      	movs	r1, #118	; 0x76
 8000354:	409a      	lsls	r2, r3
 8000356:	4249      	negs	r1, r1
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	4690      	mov	r8, r2
 800035c:	2000      	movs	r0, #0
 800035e:	e785      	b.n	800026c <__aeabi_fdiv+0x50>
 8000360:	21ff      	movs	r1, #255	; 0xff
 8000362:	2003      	movs	r0, #3
 8000364:	e782      	b.n	800026c <__aeabi_fdiv+0x50>
 8000366:	001e      	movs	r6, r3
 8000368:	20ff      	movs	r0, #255	; 0xff
 800036a:	2500      	movs	r5, #0
 800036c:	e7b5      	b.n	80002da <__aeabi_fdiv+0xbe>
 800036e:	2301      	movs	r3, #1
 8000370:	1a1b      	subs	r3, r3, r0
 8000372:	2b1b      	cmp	r3, #27
 8000374:	dcaf      	bgt.n	80002d6 <__aeabi_fdiv+0xba>
 8000376:	379e      	adds	r7, #158	; 0x9e
 8000378:	0029      	movs	r1, r5
 800037a:	40bd      	lsls	r5, r7
 800037c:	40d9      	lsrs	r1, r3
 800037e:	1e6a      	subs	r2, r5, #1
 8000380:	4195      	sbcs	r5, r2
 8000382:	430d      	orrs	r5, r1
 8000384:	076b      	lsls	r3, r5, #29
 8000386:	d004      	beq.n	8000392 <__aeabi_fdiv+0x176>
 8000388:	230f      	movs	r3, #15
 800038a:	402b      	ands	r3, r5
 800038c:	2b04      	cmp	r3, #4
 800038e:	d000      	beq.n	8000392 <__aeabi_fdiv+0x176>
 8000390:	3504      	adds	r5, #4
 8000392:	016b      	lsls	r3, r5, #5
 8000394:	d544      	bpl.n	8000420 <__aeabi_fdiv+0x204>
 8000396:	2001      	movs	r0, #1
 8000398:	2500      	movs	r5, #0
 800039a:	e79e      	b.n	80002da <__aeabi_fdiv+0xbe>
 800039c:	20ff      	movs	r0, #255	; 0xff
 800039e:	2500      	movs	r5, #0
 80003a0:	e79b      	b.n	80002da <__aeabi_fdiv+0xbe>
 80003a2:	2580      	movs	r5, #128	; 0x80
 80003a4:	2600      	movs	r6, #0
 80003a6:	20ff      	movs	r0, #255	; 0xff
 80003a8:	03ed      	lsls	r5, r5, #15
 80003aa:	e796      	b.n	80002da <__aeabi_fdiv+0xbe>
 80003ac:	2300      	movs	r3, #0
 80003ae:	4698      	mov	r8, r3
 80003b0:	2080      	movs	r0, #128	; 0x80
 80003b2:	03c0      	lsls	r0, r0, #15
 80003b4:	4205      	tst	r5, r0
 80003b6:	d009      	beq.n	80003cc <__aeabi_fdiv+0x1b0>
 80003b8:	4643      	mov	r3, r8
 80003ba:	4203      	tst	r3, r0
 80003bc:	d106      	bne.n	80003cc <__aeabi_fdiv+0x1b0>
 80003be:	4645      	mov	r5, r8
 80003c0:	4305      	orrs	r5, r0
 80003c2:	026d      	lsls	r5, r5, #9
 80003c4:	0026      	movs	r6, r4
 80003c6:	20ff      	movs	r0, #255	; 0xff
 80003c8:	0a6d      	lsrs	r5, r5, #9
 80003ca:	e786      	b.n	80002da <__aeabi_fdiv+0xbe>
 80003cc:	2080      	movs	r0, #128	; 0x80
 80003ce:	03c0      	lsls	r0, r0, #15
 80003d0:	4305      	orrs	r5, r0
 80003d2:	026d      	lsls	r5, r5, #9
 80003d4:	20ff      	movs	r0, #255	; 0xff
 80003d6:	0a6d      	lsrs	r5, r5, #9
 80003d8:	e77f      	b.n	80002da <__aeabi_fdiv+0xbe>
 80003da:	4641      	mov	r1, r8
 80003dc:	016a      	lsls	r2, r5, #5
 80003de:	0148      	lsls	r0, r1, #5
 80003e0:	4282      	cmp	r2, r0
 80003e2:	d219      	bcs.n	8000418 <__aeabi_fdiv+0x1fc>
 80003e4:	211b      	movs	r1, #27
 80003e6:	2500      	movs	r5, #0
 80003e8:	3f01      	subs	r7, #1
 80003ea:	2601      	movs	r6, #1
 80003ec:	0014      	movs	r4, r2
 80003ee:	006d      	lsls	r5, r5, #1
 80003f0:	0052      	lsls	r2, r2, #1
 80003f2:	2c00      	cmp	r4, #0
 80003f4:	db01      	blt.n	80003fa <__aeabi_fdiv+0x1de>
 80003f6:	4290      	cmp	r0, r2
 80003f8:	d801      	bhi.n	80003fe <__aeabi_fdiv+0x1e2>
 80003fa:	1a12      	subs	r2, r2, r0
 80003fc:	4335      	orrs	r5, r6
 80003fe:	3901      	subs	r1, #1
 8000400:	2900      	cmp	r1, #0
 8000402:	d1f3      	bne.n	80003ec <__aeabi_fdiv+0x1d0>
 8000404:	1e50      	subs	r0, r2, #1
 8000406:	4182      	sbcs	r2, r0
 8000408:	0038      	movs	r0, r7
 800040a:	307f      	adds	r0, #127	; 0x7f
 800040c:	001e      	movs	r6, r3
 800040e:	4315      	orrs	r5, r2
 8000410:	2800      	cmp	r0, #0
 8000412:	dd00      	ble.n	8000416 <__aeabi_fdiv+0x1fa>
 8000414:	e74b      	b.n	80002ae <__aeabi_fdiv+0x92>
 8000416:	e7aa      	b.n	800036e <__aeabi_fdiv+0x152>
 8000418:	211a      	movs	r1, #26
 800041a:	2501      	movs	r5, #1
 800041c:	1a12      	subs	r2, r2, r0
 800041e:	e7e4      	b.n	80003ea <__aeabi_fdiv+0x1ce>
 8000420:	01ad      	lsls	r5, r5, #6
 8000422:	2000      	movs	r0, #0
 8000424:	0a6d      	lsrs	r5, r5, #9
 8000426:	e758      	b.n	80002da <__aeabi_fdiv+0xbe>
 8000428:	08003c78 	.word	0x08003c78
 800042c:	f7ffffff 	.word	0xf7ffffff
 8000430:	08003cb8 	.word	0x08003cb8

08000434 <__aeabi_ddiv>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	4681      	mov	r9, r0
 8000442:	0005      	movs	r5, r0
 8000444:	030c      	lsls	r4, r1, #12
 8000446:	0048      	lsls	r0, r1, #1
 8000448:	4692      	mov	sl, r2
 800044a:	001f      	movs	r7, r3
 800044c:	b085      	sub	sp, #20
 800044e:	0b24      	lsrs	r4, r4, #12
 8000450:	0d40      	lsrs	r0, r0, #21
 8000452:	0fce      	lsrs	r6, r1, #31
 8000454:	2800      	cmp	r0, #0
 8000456:	d059      	beq.n	800050c <__aeabi_ddiv+0xd8>
 8000458:	4b87      	ldr	r3, [pc, #540]	; (8000678 <__aeabi_ddiv+0x244>)
 800045a:	4298      	cmp	r0, r3
 800045c:	d100      	bne.n	8000460 <__aeabi_ddiv+0x2c>
 800045e:	e098      	b.n	8000592 <__aeabi_ddiv+0x15e>
 8000460:	0f6b      	lsrs	r3, r5, #29
 8000462:	00e4      	lsls	r4, r4, #3
 8000464:	431c      	orrs	r4, r3
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	041b      	lsls	r3, r3, #16
 800046a:	4323      	orrs	r3, r4
 800046c:	4698      	mov	r8, r3
 800046e:	4b83      	ldr	r3, [pc, #524]	; (800067c <__aeabi_ddiv+0x248>)
 8000470:	00ed      	lsls	r5, r5, #3
 8000472:	469b      	mov	fp, r3
 8000474:	2300      	movs	r3, #0
 8000476:	4699      	mov	r9, r3
 8000478:	4483      	add	fp, r0
 800047a:	9300      	str	r3, [sp, #0]
 800047c:	033c      	lsls	r4, r7, #12
 800047e:	007b      	lsls	r3, r7, #1
 8000480:	4650      	mov	r0, sl
 8000482:	0b24      	lsrs	r4, r4, #12
 8000484:	0d5b      	lsrs	r3, r3, #21
 8000486:	0fff      	lsrs	r7, r7, #31
 8000488:	2b00      	cmp	r3, #0
 800048a:	d067      	beq.n	800055c <__aeabi_ddiv+0x128>
 800048c:	4a7a      	ldr	r2, [pc, #488]	; (8000678 <__aeabi_ddiv+0x244>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d018      	beq.n	80004c4 <__aeabi_ddiv+0x90>
 8000492:	497a      	ldr	r1, [pc, #488]	; (800067c <__aeabi_ddiv+0x248>)
 8000494:	0f42      	lsrs	r2, r0, #29
 8000496:	468c      	mov	ip, r1
 8000498:	00e4      	lsls	r4, r4, #3
 800049a:	4659      	mov	r1, fp
 800049c:	4314      	orrs	r4, r2
 800049e:	2280      	movs	r2, #128	; 0x80
 80004a0:	4463      	add	r3, ip
 80004a2:	0412      	lsls	r2, r2, #16
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	4314      	orrs	r4, r2
 80004a8:	469b      	mov	fp, r3
 80004aa:	00c2      	lsls	r2, r0, #3
 80004ac:	2000      	movs	r0, #0
 80004ae:	0033      	movs	r3, r6
 80004b0:	407b      	eors	r3, r7
 80004b2:	469a      	mov	sl, r3
 80004b4:	464b      	mov	r3, r9
 80004b6:	2b0f      	cmp	r3, #15
 80004b8:	d900      	bls.n	80004bc <__aeabi_ddiv+0x88>
 80004ba:	e0ef      	b.n	800069c <__aeabi_ddiv+0x268>
 80004bc:	4970      	ldr	r1, [pc, #448]	; (8000680 <__aeabi_ddiv+0x24c>)
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	58cb      	ldr	r3, [r1, r3]
 80004c2:	469f      	mov	pc, r3
 80004c4:	4b6f      	ldr	r3, [pc, #444]	; (8000684 <__aeabi_ddiv+0x250>)
 80004c6:	4652      	mov	r2, sl
 80004c8:	469c      	mov	ip, r3
 80004ca:	4322      	orrs	r2, r4
 80004cc:	44e3      	add	fp, ip
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	d000      	beq.n	80004d4 <__aeabi_ddiv+0xa0>
 80004d2:	e095      	b.n	8000600 <__aeabi_ddiv+0x1cc>
 80004d4:	4649      	mov	r1, r9
 80004d6:	2302      	movs	r3, #2
 80004d8:	4319      	orrs	r1, r3
 80004da:	4689      	mov	r9, r1
 80004dc:	2400      	movs	r4, #0
 80004de:	2002      	movs	r0, #2
 80004e0:	e7e5      	b.n	80004ae <__aeabi_ddiv+0x7a>
 80004e2:	2300      	movs	r3, #0
 80004e4:	2400      	movs	r4, #0
 80004e6:	2500      	movs	r5, #0
 80004e8:	4652      	mov	r2, sl
 80004ea:	051b      	lsls	r3, r3, #20
 80004ec:	4323      	orrs	r3, r4
 80004ee:	07d2      	lsls	r2, r2, #31
 80004f0:	4313      	orrs	r3, r2
 80004f2:	0028      	movs	r0, r5
 80004f4:	0019      	movs	r1, r3
 80004f6:	b005      	add	sp, #20
 80004f8:	bcf0      	pop	{r4, r5, r6, r7}
 80004fa:	46bb      	mov	fp, r7
 80004fc:	46b2      	mov	sl, r6
 80004fe:	46a9      	mov	r9, r5
 8000500:	46a0      	mov	r8, r4
 8000502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000504:	2400      	movs	r4, #0
 8000506:	2500      	movs	r5, #0
 8000508:	4b5b      	ldr	r3, [pc, #364]	; (8000678 <__aeabi_ddiv+0x244>)
 800050a:	e7ed      	b.n	80004e8 <__aeabi_ddiv+0xb4>
 800050c:	464b      	mov	r3, r9
 800050e:	4323      	orrs	r3, r4
 8000510:	4698      	mov	r8, r3
 8000512:	d100      	bne.n	8000516 <__aeabi_ddiv+0xe2>
 8000514:	e089      	b.n	800062a <__aeabi_ddiv+0x1f6>
 8000516:	2c00      	cmp	r4, #0
 8000518:	d100      	bne.n	800051c <__aeabi_ddiv+0xe8>
 800051a:	e1e0      	b.n	80008de <__aeabi_ddiv+0x4aa>
 800051c:	0020      	movs	r0, r4
 800051e:	f001 f9a5 	bl	800186c <__clzsi2>
 8000522:	0001      	movs	r1, r0
 8000524:	0002      	movs	r2, r0
 8000526:	390b      	subs	r1, #11
 8000528:	231d      	movs	r3, #29
 800052a:	1a5b      	subs	r3, r3, r1
 800052c:	4649      	mov	r1, r9
 800052e:	0010      	movs	r0, r2
 8000530:	40d9      	lsrs	r1, r3
 8000532:	3808      	subs	r0, #8
 8000534:	4084      	lsls	r4, r0
 8000536:	000b      	movs	r3, r1
 8000538:	464d      	mov	r5, r9
 800053a:	4323      	orrs	r3, r4
 800053c:	4698      	mov	r8, r3
 800053e:	4085      	lsls	r5, r0
 8000540:	4851      	ldr	r0, [pc, #324]	; (8000688 <__aeabi_ddiv+0x254>)
 8000542:	033c      	lsls	r4, r7, #12
 8000544:	1a83      	subs	r3, r0, r2
 8000546:	469b      	mov	fp, r3
 8000548:	2300      	movs	r3, #0
 800054a:	4699      	mov	r9, r3
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	007b      	lsls	r3, r7, #1
 8000550:	4650      	mov	r0, sl
 8000552:	0b24      	lsrs	r4, r4, #12
 8000554:	0d5b      	lsrs	r3, r3, #21
 8000556:	0fff      	lsrs	r7, r7, #31
 8000558:	2b00      	cmp	r3, #0
 800055a:	d197      	bne.n	800048c <__aeabi_ddiv+0x58>
 800055c:	4652      	mov	r2, sl
 800055e:	4322      	orrs	r2, r4
 8000560:	d055      	beq.n	800060e <__aeabi_ddiv+0x1da>
 8000562:	2c00      	cmp	r4, #0
 8000564:	d100      	bne.n	8000568 <__aeabi_ddiv+0x134>
 8000566:	e1ca      	b.n	80008fe <__aeabi_ddiv+0x4ca>
 8000568:	0020      	movs	r0, r4
 800056a:	f001 f97f 	bl	800186c <__clzsi2>
 800056e:	0002      	movs	r2, r0
 8000570:	3a0b      	subs	r2, #11
 8000572:	231d      	movs	r3, #29
 8000574:	0001      	movs	r1, r0
 8000576:	1a9b      	subs	r3, r3, r2
 8000578:	4652      	mov	r2, sl
 800057a:	3908      	subs	r1, #8
 800057c:	40da      	lsrs	r2, r3
 800057e:	408c      	lsls	r4, r1
 8000580:	4314      	orrs	r4, r2
 8000582:	4652      	mov	r2, sl
 8000584:	408a      	lsls	r2, r1
 8000586:	4b41      	ldr	r3, [pc, #260]	; (800068c <__aeabi_ddiv+0x258>)
 8000588:	4458      	add	r0, fp
 800058a:	469b      	mov	fp, r3
 800058c:	4483      	add	fp, r0
 800058e:	2000      	movs	r0, #0
 8000590:	e78d      	b.n	80004ae <__aeabi_ddiv+0x7a>
 8000592:	464b      	mov	r3, r9
 8000594:	4323      	orrs	r3, r4
 8000596:	4698      	mov	r8, r3
 8000598:	d140      	bne.n	800061c <__aeabi_ddiv+0x1e8>
 800059a:	2308      	movs	r3, #8
 800059c:	4699      	mov	r9, r3
 800059e:	3b06      	subs	r3, #6
 80005a0:	2500      	movs	r5, #0
 80005a2:	4683      	mov	fp, r0
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	e769      	b.n	800047c <__aeabi_ddiv+0x48>
 80005a8:	46b2      	mov	sl, r6
 80005aa:	9b00      	ldr	r3, [sp, #0]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d0a9      	beq.n	8000504 <__aeabi_ddiv+0xd0>
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d100      	bne.n	80005b6 <__aeabi_ddiv+0x182>
 80005b4:	e211      	b.n	80009da <__aeabi_ddiv+0x5a6>
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d093      	beq.n	80004e2 <__aeabi_ddiv+0xae>
 80005ba:	4a35      	ldr	r2, [pc, #212]	; (8000690 <__aeabi_ddiv+0x25c>)
 80005bc:	445a      	add	r2, fp
 80005be:	2a00      	cmp	r2, #0
 80005c0:	dc00      	bgt.n	80005c4 <__aeabi_ddiv+0x190>
 80005c2:	e13c      	b.n	800083e <__aeabi_ddiv+0x40a>
 80005c4:	076b      	lsls	r3, r5, #29
 80005c6:	d000      	beq.n	80005ca <__aeabi_ddiv+0x196>
 80005c8:	e1a7      	b.n	800091a <__aeabi_ddiv+0x4e6>
 80005ca:	08ed      	lsrs	r5, r5, #3
 80005cc:	4643      	mov	r3, r8
 80005ce:	01db      	lsls	r3, r3, #7
 80005d0:	d506      	bpl.n	80005e0 <__aeabi_ddiv+0x1ac>
 80005d2:	4642      	mov	r2, r8
 80005d4:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <__aeabi_ddiv+0x260>)
 80005d6:	401a      	ands	r2, r3
 80005d8:	4690      	mov	r8, r2
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	00d2      	lsls	r2, r2, #3
 80005de:	445a      	add	r2, fp
 80005e0:	4b2d      	ldr	r3, [pc, #180]	; (8000698 <__aeabi_ddiv+0x264>)
 80005e2:	429a      	cmp	r2, r3
 80005e4:	dc8e      	bgt.n	8000504 <__aeabi_ddiv+0xd0>
 80005e6:	4643      	mov	r3, r8
 80005e8:	0552      	lsls	r2, r2, #21
 80005ea:	0758      	lsls	r0, r3, #29
 80005ec:	025c      	lsls	r4, r3, #9
 80005ee:	4305      	orrs	r5, r0
 80005f0:	0b24      	lsrs	r4, r4, #12
 80005f2:	0d53      	lsrs	r3, r2, #21
 80005f4:	e778      	b.n	80004e8 <__aeabi_ddiv+0xb4>
 80005f6:	46ba      	mov	sl, r7
 80005f8:	46a0      	mov	r8, r4
 80005fa:	0015      	movs	r5, r2
 80005fc:	9000      	str	r0, [sp, #0]
 80005fe:	e7d4      	b.n	80005aa <__aeabi_ddiv+0x176>
 8000600:	464a      	mov	r2, r9
 8000602:	2303      	movs	r3, #3
 8000604:	431a      	orrs	r2, r3
 8000606:	4691      	mov	r9, r2
 8000608:	2003      	movs	r0, #3
 800060a:	4652      	mov	r2, sl
 800060c:	e74f      	b.n	80004ae <__aeabi_ddiv+0x7a>
 800060e:	4649      	mov	r1, r9
 8000610:	2301      	movs	r3, #1
 8000612:	4319      	orrs	r1, r3
 8000614:	4689      	mov	r9, r1
 8000616:	2400      	movs	r4, #0
 8000618:	2001      	movs	r0, #1
 800061a:	e748      	b.n	80004ae <__aeabi_ddiv+0x7a>
 800061c:	230c      	movs	r3, #12
 800061e:	4699      	mov	r9, r3
 8000620:	3b09      	subs	r3, #9
 8000622:	46a0      	mov	r8, r4
 8000624:	4683      	mov	fp, r0
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	e728      	b.n	800047c <__aeabi_ddiv+0x48>
 800062a:	2304      	movs	r3, #4
 800062c:	4699      	mov	r9, r3
 800062e:	2300      	movs	r3, #0
 8000630:	469b      	mov	fp, r3
 8000632:	3301      	adds	r3, #1
 8000634:	2500      	movs	r5, #0
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	e720      	b.n	800047c <__aeabi_ddiv+0x48>
 800063a:	2300      	movs	r3, #0
 800063c:	2480      	movs	r4, #128	; 0x80
 800063e:	469a      	mov	sl, r3
 8000640:	2500      	movs	r5, #0
 8000642:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <__aeabi_ddiv+0x244>)
 8000644:	0324      	lsls	r4, r4, #12
 8000646:	e74f      	b.n	80004e8 <__aeabi_ddiv+0xb4>
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	4641      	mov	r1, r8
 800064c:	031b      	lsls	r3, r3, #12
 800064e:	4219      	tst	r1, r3
 8000650:	d008      	beq.n	8000664 <__aeabi_ddiv+0x230>
 8000652:	421c      	tst	r4, r3
 8000654:	d106      	bne.n	8000664 <__aeabi_ddiv+0x230>
 8000656:	431c      	orrs	r4, r3
 8000658:	0324      	lsls	r4, r4, #12
 800065a:	46ba      	mov	sl, r7
 800065c:	0015      	movs	r5, r2
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <__aeabi_ddiv+0x244>)
 8000660:	0b24      	lsrs	r4, r4, #12
 8000662:	e741      	b.n	80004e8 <__aeabi_ddiv+0xb4>
 8000664:	2480      	movs	r4, #128	; 0x80
 8000666:	4643      	mov	r3, r8
 8000668:	0324      	lsls	r4, r4, #12
 800066a:	431c      	orrs	r4, r3
 800066c:	0324      	lsls	r4, r4, #12
 800066e:	46b2      	mov	sl, r6
 8000670:	4b01      	ldr	r3, [pc, #4]	; (8000678 <__aeabi_ddiv+0x244>)
 8000672:	0b24      	lsrs	r4, r4, #12
 8000674:	e738      	b.n	80004e8 <__aeabi_ddiv+0xb4>
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	000007ff 	.word	0x000007ff
 800067c:	fffffc01 	.word	0xfffffc01
 8000680:	08003cf8 	.word	0x08003cf8
 8000684:	fffff801 	.word	0xfffff801
 8000688:	fffffc0d 	.word	0xfffffc0d
 800068c:	000003f3 	.word	0x000003f3
 8000690:	000003ff 	.word	0x000003ff
 8000694:	feffffff 	.word	0xfeffffff
 8000698:	000007fe 	.word	0x000007fe
 800069c:	4544      	cmp	r4, r8
 800069e:	d200      	bcs.n	80006a2 <__aeabi_ddiv+0x26e>
 80006a0:	e116      	b.n	80008d0 <__aeabi_ddiv+0x49c>
 80006a2:	d100      	bne.n	80006a6 <__aeabi_ddiv+0x272>
 80006a4:	e111      	b.n	80008ca <__aeabi_ddiv+0x496>
 80006a6:	2301      	movs	r3, #1
 80006a8:	425b      	negs	r3, r3
 80006aa:	469c      	mov	ip, r3
 80006ac:	002e      	movs	r6, r5
 80006ae:	4640      	mov	r0, r8
 80006b0:	2500      	movs	r5, #0
 80006b2:	44e3      	add	fp, ip
 80006b4:	0223      	lsls	r3, r4, #8
 80006b6:	0e14      	lsrs	r4, r2, #24
 80006b8:	431c      	orrs	r4, r3
 80006ba:	0c1b      	lsrs	r3, r3, #16
 80006bc:	4699      	mov	r9, r3
 80006be:	0423      	lsls	r3, r4, #16
 80006c0:	0c1f      	lsrs	r7, r3, #16
 80006c2:	0212      	lsls	r2, r2, #8
 80006c4:	4649      	mov	r1, r9
 80006c6:	9200      	str	r2, [sp, #0]
 80006c8:	9701      	str	r7, [sp, #4]
 80006ca:	f7ff fda1 	bl	8000210 <__aeabi_uidivmod>
 80006ce:	0002      	movs	r2, r0
 80006d0:	437a      	muls	r2, r7
 80006d2:	040b      	lsls	r3, r1, #16
 80006d4:	0c31      	lsrs	r1, r6, #16
 80006d6:	4680      	mov	r8, r0
 80006d8:	4319      	orrs	r1, r3
 80006da:	428a      	cmp	r2, r1
 80006dc:	d90b      	bls.n	80006f6 <__aeabi_ddiv+0x2c2>
 80006de:	2301      	movs	r3, #1
 80006e0:	425b      	negs	r3, r3
 80006e2:	469c      	mov	ip, r3
 80006e4:	1909      	adds	r1, r1, r4
 80006e6:	44e0      	add	r8, ip
 80006e8:	428c      	cmp	r4, r1
 80006ea:	d804      	bhi.n	80006f6 <__aeabi_ddiv+0x2c2>
 80006ec:	428a      	cmp	r2, r1
 80006ee:	d902      	bls.n	80006f6 <__aeabi_ddiv+0x2c2>
 80006f0:	1e83      	subs	r3, r0, #2
 80006f2:	4698      	mov	r8, r3
 80006f4:	1909      	adds	r1, r1, r4
 80006f6:	1a88      	subs	r0, r1, r2
 80006f8:	4649      	mov	r1, r9
 80006fa:	f7ff fd89 	bl	8000210 <__aeabi_uidivmod>
 80006fe:	0409      	lsls	r1, r1, #16
 8000700:	468c      	mov	ip, r1
 8000702:	0431      	lsls	r1, r6, #16
 8000704:	4666      	mov	r6, ip
 8000706:	9a01      	ldr	r2, [sp, #4]
 8000708:	0c09      	lsrs	r1, r1, #16
 800070a:	4342      	muls	r2, r0
 800070c:	0003      	movs	r3, r0
 800070e:	4331      	orrs	r1, r6
 8000710:	428a      	cmp	r2, r1
 8000712:	d904      	bls.n	800071e <__aeabi_ddiv+0x2ea>
 8000714:	1909      	adds	r1, r1, r4
 8000716:	3b01      	subs	r3, #1
 8000718:	428c      	cmp	r4, r1
 800071a:	d800      	bhi.n	800071e <__aeabi_ddiv+0x2ea>
 800071c:	e111      	b.n	8000942 <__aeabi_ddiv+0x50e>
 800071e:	1a89      	subs	r1, r1, r2
 8000720:	4642      	mov	r2, r8
 8000722:	9e00      	ldr	r6, [sp, #0]
 8000724:	0412      	lsls	r2, r2, #16
 8000726:	431a      	orrs	r2, r3
 8000728:	0c33      	lsrs	r3, r6, #16
 800072a:	001f      	movs	r7, r3
 800072c:	0c10      	lsrs	r0, r2, #16
 800072e:	4690      	mov	r8, r2
 8000730:	9302      	str	r3, [sp, #8]
 8000732:	0413      	lsls	r3, r2, #16
 8000734:	0432      	lsls	r2, r6, #16
 8000736:	0c16      	lsrs	r6, r2, #16
 8000738:	0032      	movs	r2, r6
 800073a:	0c1b      	lsrs	r3, r3, #16
 800073c:	435a      	muls	r2, r3
 800073e:	9603      	str	r6, [sp, #12]
 8000740:	437b      	muls	r3, r7
 8000742:	4346      	muls	r6, r0
 8000744:	4378      	muls	r0, r7
 8000746:	0c17      	lsrs	r7, r2, #16
 8000748:	46bc      	mov	ip, r7
 800074a:	199b      	adds	r3, r3, r6
 800074c:	4463      	add	r3, ip
 800074e:	429e      	cmp	r6, r3
 8000750:	d903      	bls.n	800075a <__aeabi_ddiv+0x326>
 8000752:	2680      	movs	r6, #128	; 0x80
 8000754:	0276      	lsls	r6, r6, #9
 8000756:	46b4      	mov	ip, r6
 8000758:	4460      	add	r0, ip
 800075a:	0c1e      	lsrs	r6, r3, #16
 800075c:	1830      	adds	r0, r6, r0
 800075e:	0416      	lsls	r6, r2, #16
 8000760:	041b      	lsls	r3, r3, #16
 8000762:	0c36      	lsrs	r6, r6, #16
 8000764:	199e      	adds	r6, r3, r6
 8000766:	4281      	cmp	r1, r0
 8000768:	d200      	bcs.n	800076c <__aeabi_ddiv+0x338>
 800076a:	e09c      	b.n	80008a6 <__aeabi_ddiv+0x472>
 800076c:	d100      	bne.n	8000770 <__aeabi_ddiv+0x33c>
 800076e:	e097      	b.n	80008a0 <__aeabi_ddiv+0x46c>
 8000770:	1bae      	subs	r6, r5, r6
 8000772:	1a09      	subs	r1, r1, r0
 8000774:	42b5      	cmp	r5, r6
 8000776:	4180      	sbcs	r0, r0
 8000778:	4240      	negs	r0, r0
 800077a:	1a08      	subs	r0, r1, r0
 800077c:	4284      	cmp	r4, r0
 800077e:	d100      	bne.n	8000782 <__aeabi_ddiv+0x34e>
 8000780:	e111      	b.n	80009a6 <__aeabi_ddiv+0x572>
 8000782:	4649      	mov	r1, r9
 8000784:	f7ff fd44 	bl	8000210 <__aeabi_uidivmod>
 8000788:	9a01      	ldr	r2, [sp, #4]
 800078a:	040b      	lsls	r3, r1, #16
 800078c:	4342      	muls	r2, r0
 800078e:	0c31      	lsrs	r1, r6, #16
 8000790:	0005      	movs	r5, r0
 8000792:	4319      	orrs	r1, r3
 8000794:	428a      	cmp	r2, r1
 8000796:	d907      	bls.n	80007a8 <__aeabi_ddiv+0x374>
 8000798:	1909      	adds	r1, r1, r4
 800079a:	3d01      	subs	r5, #1
 800079c:	428c      	cmp	r4, r1
 800079e:	d803      	bhi.n	80007a8 <__aeabi_ddiv+0x374>
 80007a0:	428a      	cmp	r2, r1
 80007a2:	d901      	bls.n	80007a8 <__aeabi_ddiv+0x374>
 80007a4:	1e85      	subs	r5, r0, #2
 80007a6:	1909      	adds	r1, r1, r4
 80007a8:	1a88      	subs	r0, r1, r2
 80007aa:	4649      	mov	r1, r9
 80007ac:	f7ff fd30 	bl	8000210 <__aeabi_uidivmod>
 80007b0:	0409      	lsls	r1, r1, #16
 80007b2:	468c      	mov	ip, r1
 80007b4:	0431      	lsls	r1, r6, #16
 80007b6:	4666      	mov	r6, ip
 80007b8:	9a01      	ldr	r2, [sp, #4]
 80007ba:	0c09      	lsrs	r1, r1, #16
 80007bc:	4342      	muls	r2, r0
 80007be:	0003      	movs	r3, r0
 80007c0:	4331      	orrs	r1, r6
 80007c2:	428a      	cmp	r2, r1
 80007c4:	d907      	bls.n	80007d6 <__aeabi_ddiv+0x3a2>
 80007c6:	1909      	adds	r1, r1, r4
 80007c8:	3b01      	subs	r3, #1
 80007ca:	428c      	cmp	r4, r1
 80007cc:	d803      	bhi.n	80007d6 <__aeabi_ddiv+0x3a2>
 80007ce:	428a      	cmp	r2, r1
 80007d0:	d901      	bls.n	80007d6 <__aeabi_ddiv+0x3a2>
 80007d2:	1e83      	subs	r3, r0, #2
 80007d4:	1909      	adds	r1, r1, r4
 80007d6:	9e03      	ldr	r6, [sp, #12]
 80007d8:	1a89      	subs	r1, r1, r2
 80007da:	0032      	movs	r2, r6
 80007dc:	042d      	lsls	r5, r5, #16
 80007de:	431d      	orrs	r5, r3
 80007e0:	9f02      	ldr	r7, [sp, #8]
 80007e2:	042b      	lsls	r3, r5, #16
 80007e4:	0c1b      	lsrs	r3, r3, #16
 80007e6:	435a      	muls	r2, r3
 80007e8:	437b      	muls	r3, r7
 80007ea:	469c      	mov	ip, r3
 80007ec:	0c28      	lsrs	r0, r5, #16
 80007ee:	4346      	muls	r6, r0
 80007f0:	0c13      	lsrs	r3, r2, #16
 80007f2:	44b4      	add	ip, r6
 80007f4:	4463      	add	r3, ip
 80007f6:	4378      	muls	r0, r7
 80007f8:	429e      	cmp	r6, r3
 80007fa:	d903      	bls.n	8000804 <__aeabi_ddiv+0x3d0>
 80007fc:	2680      	movs	r6, #128	; 0x80
 80007fe:	0276      	lsls	r6, r6, #9
 8000800:	46b4      	mov	ip, r6
 8000802:	4460      	add	r0, ip
 8000804:	0c1e      	lsrs	r6, r3, #16
 8000806:	0412      	lsls	r2, r2, #16
 8000808:	041b      	lsls	r3, r3, #16
 800080a:	0c12      	lsrs	r2, r2, #16
 800080c:	1830      	adds	r0, r6, r0
 800080e:	189b      	adds	r3, r3, r2
 8000810:	4281      	cmp	r1, r0
 8000812:	d306      	bcc.n	8000822 <__aeabi_ddiv+0x3ee>
 8000814:	d002      	beq.n	800081c <__aeabi_ddiv+0x3e8>
 8000816:	2301      	movs	r3, #1
 8000818:	431d      	orrs	r5, r3
 800081a:	e6ce      	b.n	80005ba <__aeabi_ddiv+0x186>
 800081c:	2b00      	cmp	r3, #0
 800081e:	d100      	bne.n	8000822 <__aeabi_ddiv+0x3ee>
 8000820:	e6cb      	b.n	80005ba <__aeabi_ddiv+0x186>
 8000822:	1861      	adds	r1, r4, r1
 8000824:	1e6e      	subs	r6, r5, #1
 8000826:	42a1      	cmp	r1, r4
 8000828:	d200      	bcs.n	800082c <__aeabi_ddiv+0x3f8>
 800082a:	e0a4      	b.n	8000976 <__aeabi_ddiv+0x542>
 800082c:	4281      	cmp	r1, r0
 800082e:	d200      	bcs.n	8000832 <__aeabi_ddiv+0x3fe>
 8000830:	e0c9      	b.n	80009c6 <__aeabi_ddiv+0x592>
 8000832:	d100      	bne.n	8000836 <__aeabi_ddiv+0x402>
 8000834:	e0d9      	b.n	80009ea <__aeabi_ddiv+0x5b6>
 8000836:	0035      	movs	r5, r6
 8000838:	e7ed      	b.n	8000816 <__aeabi_ddiv+0x3e2>
 800083a:	2501      	movs	r5, #1
 800083c:	426d      	negs	r5, r5
 800083e:	2101      	movs	r1, #1
 8000840:	1a89      	subs	r1, r1, r2
 8000842:	2938      	cmp	r1, #56	; 0x38
 8000844:	dd00      	ble.n	8000848 <__aeabi_ddiv+0x414>
 8000846:	e64c      	b.n	80004e2 <__aeabi_ddiv+0xae>
 8000848:	291f      	cmp	r1, #31
 800084a:	dc00      	bgt.n	800084e <__aeabi_ddiv+0x41a>
 800084c:	e07f      	b.n	800094e <__aeabi_ddiv+0x51a>
 800084e:	231f      	movs	r3, #31
 8000850:	425b      	negs	r3, r3
 8000852:	1a9a      	subs	r2, r3, r2
 8000854:	4643      	mov	r3, r8
 8000856:	40d3      	lsrs	r3, r2
 8000858:	2920      	cmp	r1, #32
 800085a:	d004      	beq.n	8000866 <__aeabi_ddiv+0x432>
 800085c:	4644      	mov	r4, r8
 800085e:	4a65      	ldr	r2, [pc, #404]	; (80009f4 <__aeabi_ddiv+0x5c0>)
 8000860:	445a      	add	r2, fp
 8000862:	4094      	lsls	r4, r2
 8000864:	4325      	orrs	r5, r4
 8000866:	1e6a      	subs	r2, r5, #1
 8000868:	4195      	sbcs	r5, r2
 800086a:	2207      	movs	r2, #7
 800086c:	432b      	orrs	r3, r5
 800086e:	0015      	movs	r5, r2
 8000870:	2400      	movs	r4, #0
 8000872:	401d      	ands	r5, r3
 8000874:	421a      	tst	r2, r3
 8000876:	d100      	bne.n	800087a <__aeabi_ddiv+0x446>
 8000878:	e0a1      	b.n	80009be <__aeabi_ddiv+0x58a>
 800087a:	220f      	movs	r2, #15
 800087c:	2400      	movs	r4, #0
 800087e:	401a      	ands	r2, r3
 8000880:	2a04      	cmp	r2, #4
 8000882:	d100      	bne.n	8000886 <__aeabi_ddiv+0x452>
 8000884:	e098      	b.n	80009b8 <__aeabi_ddiv+0x584>
 8000886:	1d1a      	adds	r2, r3, #4
 8000888:	429a      	cmp	r2, r3
 800088a:	419b      	sbcs	r3, r3
 800088c:	425b      	negs	r3, r3
 800088e:	18e4      	adds	r4, r4, r3
 8000890:	0013      	movs	r3, r2
 8000892:	0222      	lsls	r2, r4, #8
 8000894:	d400      	bmi.n	8000898 <__aeabi_ddiv+0x464>
 8000896:	e08f      	b.n	80009b8 <__aeabi_ddiv+0x584>
 8000898:	2301      	movs	r3, #1
 800089a:	2400      	movs	r4, #0
 800089c:	2500      	movs	r5, #0
 800089e:	e623      	b.n	80004e8 <__aeabi_ddiv+0xb4>
 80008a0:	42b5      	cmp	r5, r6
 80008a2:	d300      	bcc.n	80008a6 <__aeabi_ddiv+0x472>
 80008a4:	e764      	b.n	8000770 <__aeabi_ddiv+0x33c>
 80008a6:	4643      	mov	r3, r8
 80008a8:	1e5a      	subs	r2, r3, #1
 80008aa:	9b00      	ldr	r3, [sp, #0]
 80008ac:	469c      	mov	ip, r3
 80008ae:	4465      	add	r5, ip
 80008b0:	001f      	movs	r7, r3
 80008b2:	429d      	cmp	r5, r3
 80008b4:	419b      	sbcs	r3, r3
 80008b6:	425b      	negs	r3, r3
 80008b8:	191b      	adds	r3, r3, r4
 80008ba:	18c9      	adds	r1, r1, r3
 80008bc:	428c      	cmp	r4, r1
 80008be:	d23a      	bcs.n	8000936 <__aeabi_ddiv+0x502>
 80008c0:	4288      	cmp	r0, r1
 80008c2:	d863      	bhi.n	800098c <__aeabi_ddiv+0x558>
 80008c4:	d060      	beq.n	8000988 <__aeabi_ddiv+0x554>
 80008c6:	4690      	mov	r8, r2
 80008c8:	e752      	b.n	8000770 <__aeabi_ddiv+0x33c>
 80008ca:	42aa      	cmp	r2, r5
 80008cc:	d900      	bls.n	80008d0 <__aeabi_ddiv+0x49c>
 80008ce:	e6ea      	b.n	80006a6 <__aeabi_ddiv+0x272>
 80008d0:	4643      	mov	r3, r8
 80008d2:	07de      	lsls	r6, r3, #31
 80008d4:	0858      	lsrs	r0, r3, #1
 80008d6:	086b      	lsrs	r3, r5, #1
 80008d8:	431e      	orrs	r6, r3
 80008da:	07ed      	lsls	r5, r5, #31
 80008dc:	e6ea      	b.n	80006b4 <__aeabi_ddiv+0x280>
 80008de:	4648      	mov	r0, r9
 80008e0:	f000 ffc4 	bl	800186c <__clzsi2>
 80008e4:	0001      	movs	r1, r0
 80008e6:	0002      	movs	r2, r0
 80008e8:	3115      	adds	r1, #21
 80008ea:	3220      	adds	r2, #32
 80008ec:	291c      	cmp	r1, #28
 80008ee:	dc00      	bgt.n	80008f2 <__aeabi_ddiv+0x4be>
 80008f0:	e61a      	b.n	8000528 <__aeabi_ddiv+0xf4>
 80008f2:	464b      	mov	r3, r9
 80008f4:	3808      	subs	r0, #8
 80008f6:	4083      	lsls	r3, r0
 80008f8:	2500      	movs	r5, #0
 80008fa:	4698      	mov	r8, r3
 80008fc:	e620      	b.n	8000540 <__aeabi_ddiv+0x10c>
 80008fe:	f000 ffb5 	bl	800186c <__clzsi2>
 8000902:	0003      	movs	r3, r0
 8000904:	001a      	movs	r2, r3
 8000906:	3215      	adds	r2, #21
 8000908:	3020      	adds	r0, #32
 800090a:	2a1c      	cmp	r2, #28
 800090c:	dc00      	bgt.n	8000910 <__aeabi_ddiv+0x4dc>
 800090e:	e630      	b.n	8000572 <__aeabi_ddiv+0x13e>
 8000910:	4654      	mov	r4, sl
 8000912:	3b08      	subs	r3, #8
 8000914:	2200      	movs	r2, #0
 8000916:	409c      	lsls	r4, r3
 8000918:	e635      	b.n	8000586 <__aeabi_ddiv+0x152>
 800091a:	230f      	movs	r3, #15
 800091c:	402b      	ands	r3, r5
 800091e:	2b04      	cmp	r3, #4
 8000920:	d100      	bne.n	8000924 <__aeabi_ddiv+0x4f0>
 8000922:	e652      	b.n	80005ca <__aeabi_ddiv+0x196>
 8000924:	2305      	movs	r3, #5
 8000926:	425b      	negs	r3, r3
 8000928:	42ab      	cmp	r3, r5
 800092a:	419b      	sbcs	r3, r3
 800092c:	3504      	adds	r5, #4
 800092e:	425b      	negs	r3, r3
 8000930:	08ed      	lsrs	r5, r5, #3
 8000932:	4498      	add	r8, r3
 8000934:	e64a      	b.n	80005cc <__aeabi_ddiv+0x198>
 8000936:	428c      	cmp	r4, r1
 8000938:	d1c5      	bne.n	80008c6 <__aeabi_ddiv+0x492>
 800093a:	42af      	cmp	r7, r5
 800093c:	d9c0      	bls.n	80008c0 <__aeabi_ddiv+0x48c>
 800093e:	4690      	mov	r8, r2
 8000940:	e716      	b.n	8000770 <__aeabi_ddiv+0x33c>
 8000942:	428a      	cmp	r2, r1
 8000944:	d800      	bhi.n	8000948 <__aeabi_ddiv+0x514>
 8000946:	e6ea      	b.n	800071e <__aeabi_ddiv+0x2ea>
 8000948:	1e83      	subs	r3, r0, #2
 800094a:	1909      	adds	r1, r1, r4
 800094c:	e6e7      	b.n	800071e <__aeabi_ddiv+0x2ea>
 800094e:	4a2a      	ldr	r2, [pc, #168]	; (80009f8 <__aeabi_ddiv+0x5c4>)
 8000950:	0028      	movs	r0, r5
 8000952:	445a      	add	r2, fp
 8000954:	4643      	mov	r3, r8
 8000956:	4095      	lsls	r5, r2
 8000958:	4093      	lsls	r3, r2
 800095a:	40c8      	lsrs	r0, r1
 800095c:	1e6a      	subs	r2, r5, #1
 800095e:	4195      	sbcs	r5, r2
 8000960:	4644      	mov	r4, r8
 8000962:	4303      	orrs	r3, r0
 8000964:	432b      	orrs	r3, r5
 8000966:	40cc      	lsrs	r4, r1
 8000968:	075a      	lsls	r2, r3, #29
 800096a:	d092      	beq.n	8000892 <__aeabi_ddiv+0x45e>
 800096c:	220f      	movs	r2, #15
 800096e:	401a      	ands	r2, r3
 8000970:	2a04      	cmp	r2, #4
 8000972:	d188      	bne.n	8000886 <__aeabi_ddiv+0x452>
 8000974:	e78d      	b.n	8000892 <__aeabi_ddiv+0x45e>
 8000976:	0035      	movs	r5, r6
 8000978:	4281      	cmp	r1, r0
 800097a:	d000      	beq.n	800097e <__aeabi_ddiv+0x54a>
 800097c:	e74b      	b.n	8000816 <__aeabi_ddiv+0x3e2>
 800097e:	9a00      	ldr	r2, [sp, #0]
 8000980:	4293      	cmp	r3, r2
 8000982:	d000      	beq.n	8000986 <__aeabi_ddiv+0x552>
 8000984:	e747      	b.n	8000816 <__aeabi_ddiv+0x3e2>
 8000986:	e618      	b.n	80005ba <__aeabi_ddiv+0x186>
 8000988:	42ae      	cmp	r6, r5
 800098a:	d99c      	bls.n	80008c6 <__aeabi_ddiv+0x492>
 800098c:	2302      	movs	r3, #2
 800098e:	425b      	negs	r3, r3
 8000990:	469c      	mov	ip, r3
 8000992:	9b00      	ldr	r3, [sp, #0]
 8000994:	44e0      	add	r8, ip
 8000996:	469c      	mov	ip, r3
 8000998:	4465      	add	r5, ip
 800099a:	429d      	cmp	r5, r3
 800099c:	419b      	sbcs	r3, r3
 800099e:	425b      	negs	r3, r3
 80009a0:	191b      	adds	r3, r3, r4
 80009a2:	18c9      	adds	r1, r1, r3
 80009a4:	e6e4      	b.n	8000770 <__aeabi_ddiv+0x33c>
 80009a6:	4a15      	ldr	r2, [pc, #84]	; (80009fc <__aeabi_ddiv+0x5c8>)
 80009a8:	445a      	add	r2, fp
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	dc00      	bgt.n	80009b0 <__aeabi_ddiv+0x57c>
 80009ae:	e744      	b.n	800083a <__aeabi_ddiv+0x406>
 80009b0:	2301      	movs	r3, #1
 80009b2:	2500      	movs	r5, #0
 80009b4:	4498      	add	r8, r3
 80009b6:	e609      	b.n	80005cc <__aeabi_ddiv+0x198>
 80009b8:	0765      	lsls	r5, r4, #29
 80009ba:	0264      	lsls	r4, r4, #9
 80009bc:	0b24      	lsrs	r4, r4, #12
 80009be:	08db      	lsrs	r3, r3, #3
 80009c0:	431d      	orrs	r5, r3
 80009c2:	2300      	movs	r3, #0
 80009c4:	e590      	b.n	80004e8 <__aeabi_ddiv+0xb4>
 80009c6:	9e00      	ldr	r6, [sp, #0]
 80009c8:	3d02      	subs	r5, #2
 80009ca:	0072      	lsls	r2, r6, #1
 80009cc:	42b2      	cmp	r2, r6
 80009ce:	41bf      	sbcs	r7, r7
 80009d0:	427f      	negs	r7, r7
 80009d2:	193c      	adds	r4, r7, r4
 80009d4:	1909      	adds	r1, r1, r4
 80009d6:	9200      	str	r2, [sp, #0]
 80009d8:	e7ce      	b.n	8000978 <__aeabi_ddiv+0x544>
 80009da:	2480      	movs	r4, #128	; 0x80
 80009dc:	4643      	mov	r3, r8
 80009de:	0324      	lsls	r4, r4, #12
 80009e0:	431c      	orrs	r4, r3
 80009e2:	0324      	lsls	r4, r4, #12
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <__aeabi_ddiv+0x5cc>)
 80009e6:	0b24      	lsrs	r4, r4, #12
 80009e8:	e57e      	b.n	80004e8 <__aeabi_ddiv+0xb4>
 80009ea:	9a00      	ldr	r2, [sp, #0]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d3ea      	bcc.n	80009c6 <__aeabi_ddiv+0x592>
 80009f0:	0035      	movs	r5, r6
 80009f2:	e7c4      	b.n	800097e <__aeabi_ddiv+0x54a>
 80009f4:	0000043e 	.word	0x0000043e
 80009f8:	0000041e 	.word	0x0000041e
 80009fc:	000003ff 	.word	0x000003ff
 8000a00:	000007ff 	.word	0x000007ff

08000a04 <__aeabi_dmul>:
 8000a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a06:	4657      	mov	r7, sl
 8000a08:	464e      	mov	r6, r9
 8000a0a:	4645      	mov	r5, r8
 8000a0c:	46de      	mov	lr, fp
 8000a0e:	b5e0      	push	{r5, r6, r7, lr}
 8000a10:	4698      	mov	r8, r3
 8000a12:	030c      	lsls	r4, r1, #12
 8000a14:	004b      	lsls	r3, r1, #1
 8000a16:	0006      	movs	r6, r0
 8000a18:	4692      	mov	sl, r2
 8000a1a:	b087      	sub	sp, #28
 8000a1c:	0b24      	lsrs	r4, r4, #12
 8000a1e:	0d5b      	lsrs	r3, r3, #21
 8000a20:	0fcf      	lsrs	r7, r1, #31
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d06c      	beq.n	8000b00 <__aeabi_dmul+0xfc>
 8000a26:	4add      	ldr	r2, [pc, #884]	; (8000d9c <__aeabi_dmul+0x398>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_dmul+0x2a>
 8000a2c:	e086      	b.n	8000b3c <__aeabi_dmul+0x138>
 8000a2e:	0f42      	lsrs	r2, r0, #29
 8000a30:	00e4      	lsls	r4, r4, #3
 8000a32:	4314      	orrs	r4, r2
 8000a34:	2280      	movs	r2, #128	; 0x80
 8000a36:	0412      	lsls	r2, r2, #16
 8000a38:	4314      	orrs	r4, r2
 8000a3a:	4ad9      	ldr	r2, [pc, #868]	; (8000da0 <__aeabi_dmul+0x39c>)
 8000a3c:	00c5      	lsls	r5, r0, #3
 8000a3e:	4694      	mov	ip, r2
 8000a40:	4463      	add	r3, ip
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2300      	movs	r3, #0
 8000a46:	4699      	mov	r9, r3
 8000a48:	469b      	mov	fp, r3
 8000a4a:	4643      	mov	r3, r8
 8000a4c:	4642      	mov	r2, r8
 8000a4e:	031e      	lsls	r6, r3, #12
 8000a50:	0fd2      	lsrs	r2, r2, #31
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4650      	mov	r0, sl
 8000a56:	4690      	mov	r8, r2
 8000a58:	0b36      	lsrs	r6, r6, #12
 8000a5a:	0d5b      	lsrs	r3, r3, #21
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_dmul+0x5c>
 8000a5e:	e078      	b.n	8000b52 <__aeabi_dmul+0x14e>
 8000a60:	4ace      	ldr	r2, [pc, #824]	; (8000d9c <__aeabi_dmul+0x398>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d01d      	beq.n	8000aa2 <__aeabi_dmul+0x9e>
 8000a66:	49ce      	ldr	r1, [pc, #824]	; (8000da0 <__aeabi_dmul+0x39c>)
 8000a68:	0f42      	lsrs	r2, r0, #29
 8000a6a:	468c      	mov	ip, r1
 8000a6c:	9900      	ldr	r1, [sp, #0]
 8000a6e:	4463      	add	r3, ip
 8000a70:	00f6      	lsls	r6, r6, #3
 8000a72:	468c      	mov	ip, r1
 8000a74:	4316      	orrs	r6, r2
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	449c      	add	ip, r3
 8000a7a:	0412      	lsls	r2, r2, #16
 8000a7c:	4663      	mov	r3, ip
 8000a7e:	4316      	orrs	r6, r2
 8000a80:	00c2      	lsls	r2, r0, #3
 8000a82:	2000      	movs	r0, #0
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	9900      	ldr	r1, [sp, #0]
 8000a88:	4643      	mov	r3, r8
 8000a8a:	3101      	adds	r1, #1
 8000a8c:	468c      	mov	ip, r1
 8000a8e:	4649      	mov	r1, r9
 8000a90:	407b      	eors	r3, r7
 8000a92:	9301      	str	r3, [sp, #4]
 8000a94:	290f      	cmp	r1, #15
 8000a96:	d900      	bls.n	8000a9a <__aeabi_dmul+0x96>
 8000a98:	e07e      	b.n	8000b98 <__aeabi_dmul+0x194>
 8000a9a:	4bc2      	ldr	r3, [pc, #776]	; (8000da4 <__aeabi_dmul+0x3a0>)
 8000a9c:	0089      	lsls	r1, r1, #2
 8000a9e:	5859      	ldr	r1, [r3, r1]
 8000aa0:	468f      	mov	pc, r1
 8000aa2:	4652      	mov	r2, sl
 8000aa4:	9b00      	ldr	r3, [sp, #0]
 8000aa6:	4332      	orrs	r2, r6
 8000aa8:	d000      	beq.n	8000aac <__aeabi_dmul+0xa8>
 8000aaa:	e156      	b.n	8000d5a <__aeabi_dmul+0x356>
 8000aac:	49bb      	ldr	r1, [pc, #748]	; (8000d9c <__aeabi_dmul+0x398>)
 8000aae:	2600      	movs	r6, #0
 8000ab0:	468c      	mov	ip, r1
 8000ab2:	4463      	add	r3, ip
 8000ab4:	4649      	mov	r1, r9
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	2302      	movs	r3, #2
 8000aba:	4319      	orrs	r1, r3
 8000abc:	4689      	mov	r9, r1
 8000abe:	2002      	movs	r0, #2
 8000ac0:	e7e1      	b.n	8000a86 <__aeabi_dmul+0x82>
 8000ac2:	4643      	mov	r3, r8
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	0034      	movs	r4, r6
 8000ac8:	0015      	movs	r5, r2
 8000aca:	4683      	mov	fp, r0
 8000acc:	465b      	mov	r3, fp
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d05e      	beq.n	8000b90 <__aeabi_dmul+0x18c>
 8000ad2:	2b03      	cmp	r3, #3
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_dmul+0xd4>
 8000ad6:	e1f3      	b.n	8000ec0 <__aeabi_dmul+0x4bc>
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d000      	beq.n	8000ade <__aeabi_dmul+0xda>
 8000adc:	e118      	b.n	8000d10 <__aeabi_dmul+0x30c>
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2400      	movs	r4, #0
 8000ae2:	2500      	movs	r5, #0
 8000ae4:	9b01      	ldr	r3, [sp, #4]
 8000ae6:	0512      	lsls	r2, r2, #20
 8000ae8:	4322      	orrs	r2, r4
 8000aea:	07db      	lsls	r3, r3, #31
 8000aec:	431a      	orrs	r2, r3
 8000aee:	0028      	movs	r0, r5
 8000af0:	0011      	movs	r1, r2
 8000af2:	b007      	add	sp, #28
 8000af4:	bcf0      	pop	{r4, r5, r6, r7}
 8000af6:	46bb      	mov	fp, r7
 8000af8:	46b2      	mov	sl, r6
 8000afa:	46a9      	mov	r9, r5
 8000afc:	46a0      	mov	r8, r4
 8000afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b00:	0025      	movs	r5, r4
 8000b02:	4305      	orrs	r5, r0
 8000b04:	d100      	bne.n	8000b08 <__aeabi_dmul+0x104>
 8000b06:	e141      	b.n	8000d8c <__aeabi_dmul+0x388>
 8000b08:	2c00      	cmp	r4, #0
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dmul+0x10a>
 8000b0c:	e1ad      	b.n	8000e6a <__aeabi_dmul+0x466>
 8000b0e:	0020      	movs	r0, r4
 8000b10:	f000 feac 	bl	800186c <__clzsi2>
 8000b14:	0001      	movs	r1, r0
 8000b16:	0002      	movs	r2, r0
 8000b18:	390b      	subs	r1, #11
 8000b1a:	231d      	movs	r3, #29
 8000b1c:	0010      	movs	r0, r2
 8000b1e:	1a5b      	subs	r3, r3, r1
 8000b20:	0031      	movs	r1, r6
 8000b22:	0035      	movs	r5, r6
 8000b24:	3808      	subs	r0, #8
 8000b26:	4084      	lsls	r4, r0
 8000b28:	40d9      	lsrs	r1, r3
 8000b2a:	4085      	lsls	r5, r0
 8000b2c:	430c      	orrs	r4, r1
 8000b2e:	489e      	ldr	r0, [pc, #632]	; (8000da8 <__aeabi_dmul+0x3a4>)
 8000b30:	1a83      	subs	r3, r0, r2
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	2300      	movs	r3, #0
 8000b36:	4699      	mov	r9, r3
 8000b38:	469b      	mov	fp, r3
 8000b3a:	e786      	b.n	8000a4a <__aeabi_dmul+0x46>
 8000b3c:	0005      	movs	r5, r0
 8000b3e:	4325      	orrs	r5, r4
 8000b40:	d000      	beq.n	8000b44 <__aeabi_dmul+0x140>
 8000b42:	e11c      	b.n	8000d7e <__aeabi_dmul+0x37a>
 8000b44:	2208      	movs	r2, #8
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2302      	movs	r3, #2
 8000b4a:	2400      	movs	r4, #0
 8000b4c:	4691      	mov	r9, r2
 8000b4e:	469b      	mov	fp, r3
 8000b50:	e77b      	b.n	8000a4a <__aeabi_dmul+0x46>
 8000b52:	4652      	mov	r2, sl
 8000b54:	4332      	orrs	r2, r6
 8000b56:	d100      	bne.n	8000b5a <__aeabi_dmul+0x156>
 8000b58:	e10a      	b.n	8000d70 <__aeabi_dmul+0x36c>
 8000b5a:	2e00      	cmp	r6, #0
 8000b5c:	d100      	bne.n	8000b60 <__aeabi_dmul+0x15c>
 8000b5e:	e176      	b.n	8000e4e <__aeabi_dmul+0x44a>
 8000b60:	0030      	movs	r0, r6
 8000b62:	f000 fe83 	bl	800186c <__clzsi2>
 8000b66:	0002      	movs	r2, r0
 8000b68:	3a0b      	subs	r2, #11
 8000b6a:	231d      	movs	r3, #29
 8000b6c:	0001      	movs	r1, r0
 8000b6e:	1a9b      	subs	r3, r3, r2
 8000b70:	4652      	mov	r2, sl
 8000b72:	3908      	subs	r1, #8
 8000b74:	40da      	lsrs	r2, r3
 8000b76:	408e      	lsls	r6, r1
 8000b78:	4316      	orrs	r6, r2
 8000b7a:	4652      	mov	r2, sl
 8000b7c:	408a      	lsls	r2, r1
 8000b7e:	9b00      	ldr	r3, [sp, #0]
 8000b80:	4989      	ldr	r1, [pc, #548]	; (8000da8 <__aeabi_dmul+0x3a4>)
 8000b82:	1a18      	subs	r0, r3, r0
 8000b84:	0003      	movs	r3, r0
 8000b86:	468c      	mov	ip, r1
 8000b88:	4463      	add	r3, ip
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	e77a      	b.n	8000a86 <__aeabi_dmul+0x82>
 8000b90:	2400      	movs	r4, #0
 8000b92:	2500      	movs	r5, #0
 8000b94:	4a81      	ldr	r2, [pc, #516]	; (8000d9c <__aeabi_dmul+0x398>)
 8000b96:	e7a5      	b.n	8000ae4 <__aeabi_dmul+0xe0>
 8000b98:	0c2f      	lsrs	r7, r5, #16
 8000b9a:	042d      	lsls	r5, r5, #16
 8000b9c:	0c2d      	lsrs	r5, r5, #16
 8000b9e:	002b      	movs	r3, r5
 8000ba0:	0c11      	lsrs	r1, r2, #16
 8000ba2:	0412      	lsls	r2, r2, #16
 8000ba4:	0c12      	lsrs	r2, r2, #16
 8000ba6:	4353      	muls	r3, r2
 8000ba8:	4698      	mov	r8, r3
 8000baa:	0013      	movs	r3, r2
 8000bac:	0028      	movs	r0, r5
 8000bae:	437b      	muls	r3, r7
 8000bb0:	4699      	mov	r9, r3
 8000bb2:	4348      	muls	r0, r1
 8000bb4:	4448      	add	r0, r9
 8000bb6:	4683      	mov	fp, r0
 8000bb8:	4640      	mov	r0, r8
 8000bba:	000b      	movs	r3, r1
 8000bbc:	0c00      	lsrs	r0, r0, #16
 8000bbe:	4682      	mov	sl, r0
 8000bc0:	4658      	mov	r0, fp
 8000bc2:	437b      	muls	r3, r7
 8000bc4:	4450      	add	r0, sl
 8000bc6:	9302      	str	r3, [sp, #8]
 8000bc8:	4581      	cmp	r9, r0
 8000bca:	d906      	bls.n	8000bda <__aeabi_dmul+0x1d6>
 8000bcc:	469a      	mov	sl, r3
 8000bce:	2380      	movs	r3, #128	; 0x80
 8000bd0:	025b      	lsls	r3, r3, #9
 8000bd2:	4699      	mov	r9, r3
 8000bd4:	44ca      	add	sl, r9
 8000bd6:	4653      	mov	r3, sl
 8000bd8:	9302      	str	r3, [sp, #8]
 8000bda:	0c03      	lsrs	r3, r0, #16
 8000bdc:	469b      	mov	fp, r3
 8000bde:	4643      	mov	r3, r8
 8000be0:	041b      	lsls	r3, r3, #16
 8000be2:	0400      	lsls	r0, r0, #16
 8000be4:	0c1b      	lsrs	r3, r3, #16
 8000be6:	4698      	mov	r8, r3
 8000be8:	0003      	movs	r3, r0
 8000bea:	4443      	add	r3, r8
 8000bec:	9304      	str	r3, [sp, #16]
 8000bee:	0c33      	lsrs	r3, r6, #16
 8000bf0:	4699      	mov	r9, r3
 8000bf2:	002b      	movs	r3, r5
 8000bf4:	0436      	lsls	r6, r6, #16
 8000bf6:	0c36      	lsrs	r6, r6, #16
 8000bf8:	4373      	muls	r3, r6
 8000bfa:	4698      	mov	r8, r3
 8000bfc:	0033      	movs	r3, r6
 8000bfe:	437b      	muls	r3, r7
 8000c00:	469a      	mov	sl, r3
 8000c02:	464b      	mov	r3, r9
 8000c04:	435d      	muls	r5, r3
 8000c06:	435f      	muls	r7, r3
 8000c08:	4643      	mov	r3, r8
 8000c0a:	4455      	add	r5, sl
 8000c0c:	0c18      	lsrs	r0, r3, #16
 8000c0e:	1940      	adds	r0, r0, r5
 8000c10:	4582      	cmp	sl, r0
 8000c12:	d903      	bls.n	8000c1c <__aeabi_dmul+0x218>
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	025b      	lsls	r3, r3, #9
 8000c18:	469a      	mov	sl, r3
 8000c1a:	4457      	add	r7, sl
 8000c1c:	0c05      	lsrs	r5, r0, #16
 8000c1e:	19eb      	adds	r3, r5, r7
 8000c20:	9305      	str	r3, [sp, #20]
 8000c22:	4643      	mov	r3, r8
 8000c24:	041d      	lsls	r5, r3, #16
 8000c26:	0c2d      	lsrs	r5, r5, #16
 8000c28:	0400      	lsls	r0, r0, #16
 8000c2a:	1940      	adds	r0, r0, r5
 8000c2c:	0c25      	lsrs	r5, r4, #16
 8000c2e:	0424      	lsls	r4, r4, #16
 8000c30:	0c24      	lsrs	r4, r4, #16
 8000c32:	0027      	movs	r7, r4
 8000c34:	4357      	muls	r7, r2
 8000c36:	436a      	muls	r2, r5
 8000c38:	4690      	mov	r8, r2
 8000c3a:	002a      	movs	r2, r5
 8000c3c:	0c3b      	lsrs	r3, r7, #16
 8000c3e:	469a      	mov	sl, r3
 8000c40:	434a      	muls	r2, r1
 8000c42:	4361      	muls	r1, r4
 8000c44:	4441      	add	r1, r8
 8000c46:	4451      	add	r1, sl
 8000c48:	4483      	add	fp, r0
 8000c4a:	4588      	cmp	r8, r1
 8000c4c:	d903      	bls.n	8000c56 <__aeabi_dmul+0x252>
 8000c4e:	2380      	movs	r3, #128	; 0x80
 8000c50:	025b      	lsls	r3, r3, #9
 8000c52:	4698      	mov	r8, r3
 8000c54:	4442      	add	r2, r8
 8000c56:	043f      	lsls	r7, r7, #16
 8000c58:	0c0b      	lsrs	r3, r1, #16
 8000c5a:	0c3f      	lsrs	r7, r7, #16
 8000c5c:	0409      	lsls	r1, r1, #16
 8000c5e:	19c9      	adds	r1, r1, r7
 8000c60:	0027      	movs	r7, r4
 8000c62:	4698      	mov	r8, r3
 8000c64:	464b      	mov	r3, r9
 8000c66:	4377      	muls	r7, r6
 8000c68:	435c      	muls	r4, r3
 8000c6a:	436e      	muls	r6, r5
 8000c6c:	435d      	muls	r5, r3
 8000c6e:	0c3b      	lsrs	r3, r7, #16
 8000c70:	4699      	mov	r9, r3
 8000c72:	19a4      	adds	r4, r4, r6
 8000c74:	444c      	add	r4, r9
 8000c76:	4442      	add	r2, r8
 8000c78:	9503      	str	r5, [sp, #12]
 8000c7a:	42a6      	cmp	r6, r4
 8000c7c:	d904      	bls.n	8000c88 <__aeabi_dmul+0x284>
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	025b      	lsls	r3, r3, #9
 8000c82:	4698      	mov	r8, r3
 8000c84:	4445      	add	r5, r8
 8000c86:	9503      	str	r5, [sp, #12]
 8000c88:	9b02      	ldr	r3, [sp, #8]
 8000c8a:	043f      	lsls	r7, r7, #16
 8000c8c:	445b      	add	r3, fp
 8000c8e:	001e      	movs	r6, r3
 8000c90:	4283      	cmp	r3, r0
 8000c92:	4180      	sbcs	r0, r0
 8000c94:	0423      	lsls	r3, r4, #16
 8000c96:	4698      	mov	r8, r3
 8000c98:	9b05      	ldr	r3, [sp, #20]
 8000c9a:	0c3f      	lsrs	r7, r7, #16
 8000c9c:	4447      	add	r7, r8
 8000c9e:	4698      	mov	r8, r3
 8000ca0:	1876      	adds	r6, r6, r1
 8000ca2:	428e      	cmp	r6, r1
 8000ca4:	4189      	sbcs	r1, r1
 8000ca6:	4447      	add	r7, r8
 8000ca8:	4240      	negs	r0, r0
 8000caa:	183d      	adds	r5, r7, r0
 8000cac:	46a8      	mov	r8, r5
 8000cae:	4693      	mov	fp, r2
 8000cb0:	4249      	negs	r1, r1
 8000cb2:	468a      	mov	sl, r1
 8000cb4:	44c3      	add	fp, r8
 8000cb6:	429f      	cmp	r7, r3
 8000cb8:	41bf      	sbcs	r7, r7
 8000cba:	4580      	cmp	r8, r0
 8000cbc:	4180      	sbcs	r0, r0
 8000cbe:	9b03      	ldr	r3, [sp, #12]
 8000cc0:	44da      	add	sl, fp
 8000cc2:	4698      	mov	r8, r3
 8000cc4:	4653      	mov	r3, sl
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	427f      	negs	r7, r7
 8000cca:	4307      	orrs	r7, r0
 8000ccc:	0c24      	lsrs	r4, r4, #16
 8000cce:	4593      	cmp	fp, r2
 8000cd0:	4192      	sbcs	r2, r2
 8000cd2:	458a      	cmp	sl, r1
 8000cd4:	4189      	sbcs	r1, r1
 8000cd6:	193f      	adds	r7, r7, r4
 8000cd8:	0ddc      	lsrs	r4, r3, #23
 8000cda:	9b04      	ldr	r3, [sp, #16]
 8000cdc:	0275      	lsls	r5, r6, #9
 8000cde:	431d      	orrs	r5, r3
 8000ce0:	1e68      	subs	r0, r5, #1
 8000ce2:	4185      	sbcs	r5, r0
 8000ce4:	4653      	mov	r3, sl
 8000ce6:	4252      	negs	r2, r2
 8000ce8:	4249      	negs	r1, r1
 8000cea:	430a      	orrs	r2, r1
 8000cec:	18bf      	adds	r7, r7, r2
 8000cee:	4447      	add	r7, r8
 8000cf0:	0df6      	lsrs	r6, r6, #23
 8000cf2:	027f      	lsls	r7, r7, #9
 8000cf4:	4335      	orrs	r5, r6
 8000cf6:	025a      	lsls	r2, r3, #9
 8000cf8:	433c      	orrs	r4, r7
 8000cfa:	4315      	orrs	r5, r2
 8000cfc:	01fb      	lsls	r3, r7, #7
 8000cfe:	d400      	bmi.n	8000d02 <__aeabi_dmul+0x2fe>
 8000d00:	e0c1      	b.n	8000e86 <__aeabi_dmul+0x482>
 8000d02:	2101      	movs	r1, #1
 8000d04:	086a      	lsrs	r2, r5, #1
 8000d06:	400d      	ands	r5, r1
 8000d08:	4315      	orrs	r5, r2
 8000d0a:	07e2      	lsls	r2, r4, #31
 8000d0c:	4315      	orrs	r5, r2
 8000d0e:	0864      	lsrs	r4, r4, #1
 8000d10:	4926      	ldr	r1, [pc, #152]	; (8000dac <__aeabi_dmul+0x3a8>)
 8000d12:	4461      	add	r1, ip
 8000d14:	2900      	cmp	r1, #0
 8000d16:	dd56      	ble.n	8000dc6 <__aeabi_dmul+0x3c2>
 8000d18:	076b      	lsls	r3, r5, #29
 8000d1a:	d009      	beq.n	8000d30 <__aeabi_dmul+0x32c>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	402a      	ands	r2, r5
 8000d20:	2a04      	cmp	r2, #4
 8000d22:	d005      	beq.n	8000d30 <__aeabi_dmul+0x32c>
 8000d24:	1d2a      	adds	r2, r5, #4
 8000d26:	42aa      	cmp	r2, r5
 8000d28:	41ad      	sbcs	r5, r5
 8000d2a:	426d      	negs	r5, r5
 8000d2c:	1964      	adds	r4, r4, r5
 8000d2e:	0015      	movs	r5, r2
 8000d30:	01e3      	lsls	r3, r4, #7
 8000d32:	d504      	bpl.n	8000d3e <__aeabi_dmul+0x33a>
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	4a1e      	ldr	r2, [pc, #120]	; (8000db0 <__aeabi_dmul+0x3ac>)
 8000d38:	00c9      	lsls	r1, r1, #3
 8000d3a:	4014      	ands	r4, r2
 8000d3c:	4461      	add	r1, ip
 8000d3e:	4a1d      	ldr	r2, [pc, #116]	; (8000db4 <__aeabi_dmul+0x3b0>)
 8000d40:	4291      	cmp	r1, r2
 8000d42:	dd00      	ble.n	8000d46 <__aeabi_dmul+0x342>
 8000d44:	e724      	b.n	8000b90 <__aeabi_dmul+0x18c>
 8000d46:	0762      	lsls	r2, r4, #29
 8000d48:	08ed      	lsrs	r5, r5, #3
 8000d4a:	0264      	lsls	r4, r4, #9
 8000d4c:	0549      	lsls	r1, r1, #21
 8000d4e:	4315      	orrs	r5, r2
 8000d50:	0b24      	lsrs	r4, r4, #12
 8000d52:	0d4a      	lsrs	r2, r1, #21
 8000d54:	e6c6      	b.n	8000ae4 <__aeabi_dmul+0xe0>
 8000d56:	9701      	str	r7, [sp, #4]
 8000d58:	e6b8      	b.n	8000acc <__aeabi_dmul+0xc8>
 8000d5a:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <__aeabi_dmul+0x398>)
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	4694      	mov	ip, r2
 8000d60:	4463      	add	r3, ip
 8000d62:	464a      	mov	r2, r9
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	2303      	movs	r3, #3
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	4691      	mov	r9, r2
 8000d6c:	4652      	mov	r2, sl
 8000d6e:	e68a      	b.n	8000a86 <__aeabi_dmul+0x82>
 8000d70:	4649      	mov	r1, r9
 8000d72:	2301      	movs	r3, #1
 8000d74:	4319      	orrs	r1, r3
 8000d76:	4689      	mov	r9, r1
 8000d78:	2600      	movs	r6, #0
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	e683      	b.n	8000a86 <__aeabi_dmul+0x82>
 8000d7e:	220c      	movs	r2, #12
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	2303      	movs	r3, #3
 8000d84:	0005      	movs	r5, r0
 8000d86:	4691      	mov	r9, r2
 8000d88:	469b      	mov	fp, r3
 8000d8a:	e65e      	b.n	8000a4a <__aeabi_dmul+0x46>
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	4699      	mov	r9, r3
 8000d90:	2300      	movs	r3, #0
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	2400      	movs	r4, #0
 8000d98:	469b      	mov	fp, r3
 8000d9a:	e656      	b.n	8000a4a <__aeabi_dmul+0x46>
 8000d9c:	000007ff 	.word	0x000007ff
 8000da0:	fffffc01 	.word	0xfffffc01
 8000da4:	08003d38 	.word	0x08003d38
 8000da8:	fffffc0d 	.word	0xfffffc0d
 8000dac:	000003ff 	.word	0x000003ff
 8000db0:	feffffff 	.word	0xfeffffff
 8000db4:	000007fe 	.word	0x000007fe
 8000db8:	2300      	movs	r3, #0
 8000dba:	2480      	movs	r4, #128	; 0x80
 8000dbc:	2500      	movs	r5, #0
 8000dbe:	4a44      	ldr	r2, [pc, #272]	; (8000ed0 <__aeabi_dmul+0x4cc>)
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	0324      	lsls	r4, r4, #12
 8000dc4:	e68e      	b.n	8000ae4 <__aeabi_dmul+0xe0>
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	1a40      	subs	r0, r0, r1
 8000dca:	2838      	cmp	r0, #56	; 0x38
 8000dcc:	dd00      	ble.n	8000dd0 <__aeabi_dmul+0x3cc>
 8000dce:	e686      	b.n	8000ade <__aeabi_dmul+0xda>
 8000dd0:	281f      	cmp	r0, #31
 8000dd2:	dd5b      	ble.n	8000e8c <__aeabi_dmul+0x488>
 8000dd4:	221f      	movs	r2, #31
 8000dd6:	0023      	movs	r3, r4
 8000dd8:	4252      	negs	r2, r2
 8000dda:	1a51      	subs	r1, r2, r1
 8000ddc:	40cb      	lsrs	r3, r1
 8000dde:	0019      	movs	r1, r3
 8000de0:	2820      	cmp	r0, #32
 8000de2:	d003      	beq.n	8000dec <__aeabi_dmul+0x3e8>
 8000de4:	4a3b      	ldr	r2, [pc, #236]	; (8000ed4 <__aeabi_dmul+0x4d0>)
 8000de6:	4462      	add	r2, ip
 8000de8:	4094      	lsls	r4, r2
 8000dea:	4325      	orrs	r5, r4
 8000dec:	1e6a      	subs	r2, r5, #1
 8000dee:	4195      	sbcs	r5, r2
 8000df0:	002a      	movs	r2, r5
 8000df2:	430a      	orrs	r2, r1
 8000df4:	2107      	movs	r1, #7
 8000df6:	000d      	movs	r5, r1
 8000df8:	2400      	movs	r4, #0
 8000dfa:	4015      	ands	r5, r2
 8000dfc:	4211      	tst	r1, r2
 8000dfe:	d05b      	beq.n	8000eb8 <__aeabi_dmul+0x4b4>
 8000e00:	210f      	movs	r1, #15
 8000e02:	2400      	movs	r4, #0
 8000e04:	4011      	ands	r1, r2
 8000e06:	2904      	cmp	r1, #4
 8000e08:	d053      	beq.n	8000eb2 <__aeabi_dmul+0x4ae>
 8000e0a:	1d11      	adds	r1, r2, #4
 8000e0c:	4291      	cmp	r1, r2
 8000e0e:	4192      	sbcs	r2, r2
 8000e10:	4252      	negs	r2, r2
 8000e12:	18a4      	adds	r4, r4, r2
 8000e14:	000a      	movs	r2, r1
 8000e16:	0223      	lsls	r3, r4, #8
 8000e18:	d54b      	bpl.n	8000eb2 <__aeabi_dmul+0x4ae>
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2400      	movs	r4, #0
 8000e1e:	2500      	movs	r5, #0
 8000e20:	e660      	b.n	8000ae4 <__aeabi_dmul+0xe0>
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	031b      	lsls	r3, r3, #12
 8000e26:	421c      	tst	r4, r3
 8000e28:	d009      	beq.n	8000e3e <__aeabi_dmul+0x43a>
 8000e2a:	421e      	tst	r6, r3
 8000e2c:	d107      	bne.n	8000e3e <__aeabi_dmul+0x43a>
 8000e2e:	4333      	orrs	r3, r6
 8000e30:	031c      	lsls	r4, r3, #12
 8000e32:	4643      	mov	r3, r8
 8000e34:	0015      	movs	r5, r2
 8000e36:	0b24      	lsrs	r4, r4, #12
 8000e38:	4a25      	ldr	r2, [pc, #148]	; (8000ed0 <__aeabi_dmul+0x4cc>)
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	e652      	b.n	8000ae4 <__aeabi_dmul+0xe0>
 8000e3e:	2280      	movs	r2, #128	; 0x80
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4314      	orrs	r4, r2
 8000e44:	0324      	lsls	r4, r4, #12
 8000e46:	4a22      	ldr	r2, [pc, #136]	; (8000ed0 <__aeabi_dmul+0x4cc>)
 8000e48:	0b24      	lsrs	r4, r4, #12
 8000e4a:	9701      	str	r7, [sp, #4]
 8000e4c:	e64a      	b.n	8000ae4 <__aeabi_dmul+0xe0>
 8000e4e:	f000 fd0d 	bl	800186c <__clzsi2>
 8000e52:	0003      	movs	r3, r0
 8000e54:	001a      	movs	r2, r3
 8000e56:	3215      	adds	r2, #21
 8000e58:	3020      	adds	r0, #32
 8000e5a:	2a1c      	cmp	r2, #28
 8000e5c:	dc00      	bgt.n	8000e60 <__aeabi_dmul+0x45c>
 8000e5e:	e684      	b.n	8000b6a <__aeabi_dmul+0x166>
 8000e60:	4656      	mov	r6, sl
 8000e62:	3b08      	subs	r3, #8
 8000e64:	2200      	movs	r2, #0
 8000e66:	409e      	lsls	r6, r3
 8000e68:	e689      	b.n	8000b7e <__aeabi_dmul+0x17a>
 8000e6a:	f000 fcff 	bl	800186c <__clzsi2>
 8000e6e:	0001      	movs	r1, r0
 8000e70:	0002      	movs	r2, r0
 8000e72:	3115      	adds	r1, #21
 8000e74:	3220      	adds	r2, #32
 8000e76:	291c      	cmp	r1, #28
 8000e78:	dc00      	bgt.n	8000e7c <__aeabi_dmul+0x478>
 8000e7a:	e64e      	b.n	8000b1a <__aeabi_dmul+0x116>
 8000e7c:	0034      	movs	r4, r6
 8000e7e:	3808      	subs	r0, #8
 8000e80:	2500      	movs	r5, #0
 8000e82:	4084      	lsls	r4, r0
 8000e84:	e653      	b.n	8000b2e <__aeabi_dmul+0x12a>
 8000e86:	9b00      	ldr	r3, [sp, #0]
 8000e88:	469c      	mov	ip, r3
 8000e8a:	e741      	b.n	8000d10 <__aeabi_dmul+0x30c>
 8000e8c:	4912      	ldr	r1, [pc, #72]	; (8000ed8 <__aeabi_dmul+0x4d4>)
 8000e8e:	0022      	movs	r2, r4
 8000e90:	4461      	add	r1, ip
 8000e92:	002e      	movs	r6, r5
 8000e94:	408d      	lsls	r5, r1
 8000e96:	408a      	lsls	r2, r1
 8000e98:	40c6      	lsrs	r6, r0
 8000e9a:	1e69      	subs	r1, r5, #1
 8000e9c:	418d      	sbcs	r5, r1
 8000e9e:	4332      	orrs	r2, r6
 8000ea0:	432a      	orrs	r2, r5
 8000ea2:	40c4      	lsrs	r4, r0
 8000ea4:	0753      	lsls	r3, r2, #29
 8000ea6:	d0b6      	beq.n	8000e16 <__aeabi_dmul+0x412>
 8000ea8:	210f      	movs	r1, #15
 8000eaa:	4011      	ands	r1, r2
 8000eac:	2904      	cmp	r1, #4
 8000eae:	d1ac      	bne.n	8000e0a <__aeabi_dmul+0x406>
 8000eb0:	e7b1      	b.n	8000e16 <__aeabi_dmul+0x412>
 8000eb2:	0765      	lsls	r5, r4, #29
 8000eb4:	0264      	lsls	r4, r4, #9
 8000eb6:	0b24      	lsrs	r4, r4, #12
 8000eb8:	08d2      	lsrs	r2, r2, #3
 8000eba:	4315      	orrs	r5, r2
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	e611      	b.n	8000ae4 <__aeabi_dmul+0xe0>
 8000ec0:	2280      	movs	r2, #128	; 0x80
 8000ec2:	0312      	lsls	r2, r2, #12
 8000ec4:	4314      	orrs	r4, r2
 8000ec6:	0324      	lsls	r4, r4, #12
 8000ec8:	4a01      	ldr	r2, [pc, #4]	; (8000ed0 <__aeabi_dmul+0x4cc>)
 8000eca:	0b24      	lsrs	r4, r4, #12
 8000ecc:	e60a      	b.n	8000ae4 <__aeabi_dmul+0xe0>
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	000007ff 	.word	0x000007ff
 8000ed4:	0000043e 	.word	0x0000043e
 8000ed8:	0000041e 	.word	0x0000041e

08000edc <__aeabi_dsub>:
 8000edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ede:	4657      	mov	r7, sl
 8000ee0:	464e      	mov	r6, r9
 8000ee2:	4645      	mov	r5, r8
 8000ee4:	46de      	mov	lr, fp
 8000ee6:	0004      	movs	r4, r0
 8000ee8:	b5e0      	push	{r5, r6, r7, lr}
 8000eea:	001f      	movs	r7, r3
 8000eec:	0010      	movs	r0, r2
 8000eee:	030b      	lsls	r3, r1, #12
 8000ef0:	0f62      	lsrs	r2, r4, #29
 8000ef2:	004e      	lsls	r6, r1, #1
 8000ef4:	0fcd      	lsrs	r5, r1, #31
 8000ef6:	0a5b      	lsrs	r3, r3, #9
 8000ef8:	0339      	lsls	r1, r7, #12
 8000efa:	4313      	orrs	r3, r2
 8000efc:	0a49      	lsrs	r1, r1, #9
 8000efe:	00e2      	lsls	r2, r4, #3
 8000f00:	0f44      	lsrs	r4, r0, #29
 8000f02:	4321      	orrs	r1, r4
 8000f04:	4cc2      	ldr	r4, [pc, #776]	; (8001210 <__aeabi_dsub+0x334>)
 8000f06:	4691      	mov	r9, r2
 8000f08:	4692      	mov	sl, r2
 8000f0a:	00c0      	lsls	r0, r0, #3
 8000f0c:	007a      	lsls	r2, r7, #1
 8000f0e:	4680      	mov	r8, r0
 8000f10:	0d76      	lsrs	r6, r6, #21
 8000f12:	0d52      	lsrs	r2, r2, #21
 8000f14:	0fff      	lsrs	r7, r7, #31
 8000f16:	42a2      	cmp	r2, r4
 8000f18:	d100      	bne.n	8000f1c <__aeabi_dsub+0x40>
 8000f1a:	e0b4      	b.n	8001086 <__aeabi_dsub+0x1aa>
 8000f1c:	2401      	movs	r4, #1
 8000f1e:	4067      	eors	r7, r4
 8000f20:	46bb      	mov	fp, r7
 8000f22:	42bd      	cmp	r5, r7
 8000f24:	d100      	bne.n	8000f28 <__aeabi_dsub+0x4c>
 8000f26:	e088      	b.n	800103a <__aeabi_dsub+0x15e>
 8000f28:	1ab4      	subs	r4, r6, r2
 8000f2a:	46a4      	mov	ip, r4
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	dc00      	bgt.n	8000f32 <__aeabi_dsub+0x56>
 8000f30:	e0b2      	b.n	8001098 <__aeabi_dsub+0x1bc>
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	d100      	bne.n	8000f38 <__aeabi_dsub+0x5c>
 8000f36:	e0c5      	b.n	80010c4 <__aeabi_dsub+0x1e8>
 8000f38:	4ab5      	ldr	r2, [pc, #724]	; (8001210 <__aeabi_dsub+0x334>)
 8000f3a:	4296      	cmp	r6, r2
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_dsub+0x64>
 8000f3e:	e28b      	b.n	8001458 <__aeabi_dsub+0x57c>
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	0412      	lsls	r2, r2, #16
 8000f44:	4311      	orrs	r1, r2
 8000f46:	4662      	mov	r2, ip
 8000f48:	2a38      	cmp	r2, #56	; 0x38
 8000f4a:	dd00      	ble.n	8000f4e <__aeabi_dsub+0x72>
 8000f4c:	e1a1      	b.n	8001292 <__aeabi_dsub+0x3b6>
 8000f4e:	2a1f      	cmp	r2, #31
 8000f50:	dd00      	ble.n	8000f54 <__aeabi_dsub+0x78>
 8000f52:	e216      	b.n	8001382 <__aeabi_dsub+0x4a6>
 8000f54:	2720      	movs	r7, #32
 8000f56:	000c      	movs	r4, r1
 8000f58:	1abf      	subs	r7, r7, r2
 8000f5a:	40bc      	lsls	r4, r7
 8000f5c:	0002      	movs	r2, r0
 8000f5e:	46a0      	mov	r8, r4
 8000f60:	4664      	mov	r4, ip
 8000f62:	40b8      	lsls	r0, r7
 8000f64:	40e2      	lsrs	r2, r4
 8000f66:	4644      	mov	r4, r8
 8000f68:	4314      	orrs	r4, r2
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	1e50      	subs	r0, r2, #1
 8000f6e:	4182      	sbcs	r2, r0
 8000f70:	4660      	mov	r0, ip
 8000f72:	40c1      	lsrs	r1, r0
 8000f74:	4322      	orrs	r2, r4
 8000f76:	1a5b      	subs	r3, r3, r1
 8000f78:	4649      	mov	r1, r9
 8000f7a:	1a8c      	subs	r4, r1, r2
 8000f7c:	45a1      	cmp	r9, r4
 8000f7e:	4192      	sbcs	r2, r2
 8000f80:	4252      	negs	r2, r2
 8000f82:	1a9b      	subs	r3, r3, r2
 8000f84:	4698      	mov	r8, r3
 8000f86:	4643      	mov	r3, r8
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	d400      	bmi.n	8000f8e <__aeabi_dsub+0xb2>
 8000f8c:	e117      	b.n	80011be <__aeabi_dsub+0x2e2>
 8000f8e:	4643      	mov	r3, r8
 8000f90:	025b      	lsls	r3, r3, #9
 8000f92:	0a5b      	lsrs	r3, r3, #9
 8000f94:	4698      	mov	r8, r3
 8000f96:	4643      	mov	r3, r8
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_dsub+0xc2>
 8000f9c:	e16c      	b.n	8001278 <__aeabi_dsub+0x39c>
 8000f9e:	4640      	mov	r0, r8
 8000fa0:	f000 fc64 	bl	800186c <__clzsi2>
 8000fa4:	0002      	movs	r2, r0
 8000fa6:	3a08      	subs	r2, #8
 8000fa8:	2120      	movs	r1, #32
 8000faa:	0020      	movs	r0, r4
 8000fac:	4643      	mov	r3, r8
 8000fae:	1a89      	subs	r1, r1, r2
 8000fb0:	4093      	lsls	r3, r2
 8000fb2:	40c8      	lsrs	r0, r1
 8000fb4:	4094      	lsls	r4, r2
 8000fb6:	4303      	orrs	r3, r0
 8000fb8:	4296      	cmp	r6, r2
 8000fba:	dd00      	ble.n	8000fbe <__aeabi_dsub+0xe2>
 8000fbc:	e157      	b.n	800126e <__aeabi_dsub+0x392>
 8000fbe:	1b96      	subs	r6, r2, r6
 8000fc0:	1c71      	adds	r1, r6, #1
 8000fc2:	291f      	cmp	r1, #31
 8000fc4:	dd00      	ble.n	8000fc8 <__aeabi_dsub+0xec>
 8000fc6:	e1cb      	b.n	8001360 <__aeabi_dsub+0x484>
 8000fc8:	2220      	movs	r2, #32
 8000fca:	0018      	movs	r0, r3
 8000fcc:	0026      	movs	r6, r4
 8000fce:	1a52      	subs	r2, r2, r1
 8000fd0:	4094      	lsls	r4, r2
 8000fd2:	4090      	lsls	r0, r2
 8000fd4:	40ce      	lsrs	r6, r1
 8000fd6:	40cb      	lsrs	r3, r1
 8000fd8:	1e62      	subs	r2, r4, #1
 8000fda:	4194      	sbcs	r4, r2
 8000fdc:	4330      	orrs	r0, r6
 8000fde:	4698      	mov	r8, r3
 8000fe0:	2600      	movs	r6, #0
 8000fe2:	4304      	orrs	r4, r0
 8000fe4:	0763      	lsls	r3, r4, #29
 8000fe6:	d009      	beq.n	8000ffc <__aeabi_dsub+0x120>
 8000fe8:	230f      	movs	r3, #15
 8000fea:	4023      	ands	r3, r4
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	d005      	beq.n	8000ffc <__aeabi_dsub+0x120>
 8000ff0:	1d23      	adds	r3, r4, #4
 8000ff2:	42a3      	cmp	r3, r4
 8000ff4:	41a4      	sbcs	r4, r4
 8000ff6:	4264      	negs	r4, r4
 8000ff8:	44a0      	add	r8, r4
 8000ffa:	001c      	movs	r4, r3
 8000ffc:	4643      	mov	r3, r8
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	d400      	bmi.n	8001004 <__aeabi_dsub+0x128>
 8001002:	e0df      	b.n	80011c4 <__aeabi_dsub+0x2e8>
 8001004:	4b82      	ldr	r3, [pc, #520]	; (8001210 <__aeabi_dsub+0x334>)
 8001006:	3601      	adds	r6, #1
 8001008:	429e      	cmp	r6, r3
 800100a:	d100      	bne.n	800100e <__aeabi_dsub+0x132>
 800100c:	e0fb      	b.n	8001206 <__aeabi_dsub+0x32a>
 800100e:	4642      	mov	r2, r8
 8001010:	4b80      	ldr	r3, [pc, #512]	; (8001214 <__aeabi_dsub+0x338>)
 8001012:	08e4      	lsrs	r4, r4, #3
 8001014:	401a      	ands	r2, r3
 8001016:	0013      	movs	r3, r2
 8001018:	0571      	lsls	r1, r6, #21
 800101a:	0752      	lsls	r2, r2, #29
 800101c:	025b      	lsls	r3, r3, #9
 800101e:	4322      	orrs	r2, r4
 8001020:	0b1b      	lsrs	r3, r3, #12
 8001022:	0d49      	lsrs	r1, r1, #21
 8001024:	0509      	lsls	r1, r1, #20
 8001026:	07ed      	lsls	r5, r5, #31
 8001028:	4319      	orrs	r1, r3
 800102a:	4329      	orrs	r1, r5
 800102c:	0010      	movs	r0, r2
 800102e:	bcf0      	pop	{r4, r5, r6, r7}
 8001030:	46bb      	mov	fp, r7
 8001032:	46b2      	mov	sl, r6
 8001034:	46a9      	mov	r9, r5
 8001036:	46a0      	mov	r8, r4
 8001038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800103a:	1ab4      	subs	r4, r6, r2
 800103c:	46a4      	mov	ip, r4
 800103e:	2c00      	cmp	r4, #0
 8001040:	dd58      	ble.n	80010f4 <__aeabi_dsub+0x218>
 8001042:	2a00      	cmp	r2, #0
 8001044:	d100      	bne.n	8001048 <__aeabi_dsub+0x16c>
 8001046:	e09e      	b.n	8001186 <__aeabi_dsub+0x2aa>
 8001048:	4a71      	ldr	r2, [pc, #452]	; (8001210 <__aeabi_dsub+0x334>)
 800104a:	4296      	cmp	r6, r2
 800104c:	d100      	bne.n	8001050 <__aeabi_dsub+0x174>
 800104e:	e13b      	b.n	80012c8 <__aeabi_dsub+0x3ec>
 8001050:	2280      	movs	r2, #128	; 0x80
 8001052:	0412      	lsls	r2, r2, #16
 8001054:	4311      	orrs	r1, r2
 8001056:	4662      	mov	r2, ip
 8001058:	2a38      	cmp	r2, #56	; 0x38
 800105a:	dd00      	ble.n	800105e <__aeabi_dsub+0x182>
 800105c:	e0c1      	b.n	80011e2 <__aeabi_dsub+0x306>
 800105e:	2a1f      	cmp	r2, #31
 8001060:	dc00      	bgt.n	8001064 <__aeabi_dsub+0x188>
 8001062:	e1bb      	b.n	80013dc <__aeabi_dsub+0x500>
 8001064:	000c      	movs	r4, r1
 8001066:	3a20      	subs	r2, #32
 8001068:	40d4      	lsrs	r4, r2
 800106a:	0022      	movs	r2, r4
 800106c:	4664      	mov	r4, ip
 800106e:	2c20      	cmp	r4, #32
 8001070:	d004      	beq.n	800107c <__aeabi_dsub+0x1a0>
 8001072:	2740      	movs	r7, #64	; 0x40
 8001074:	1b3f      	subs	r7, r7, r4
 8001076:	40b9      	lsls	r1, r7
 8001078:	4308      	orrs	r0, r1
 800107a:	4680      	mov	r8, r0
 800107c:	4644      	mov	r4, r8
 800107e:	1e61      	subs	r1, r4, #1
 8001080:	418c      	sbcs	r4, r1
 8001082:	4314      	orrs	r4, r2
 8001084:	e0b1      	b.n	80011ea <__aeabi_dsub+0x30e>
 8001086:	000c      	movs	r4, r1
 8001088:	4304      	orrs	r4, r0
 800108a:	d02a      	beq.n	80010e2 <__aeabi_dsub+0x206>
 800108c:	46bb      	mov	fp, r7
 800108e:	42bd      	cmp	r5, r7
 8001090:	d02d      	beq.n	80010ee <__aeabi_dsub+0x212>
 8001092:	4c61      	ldr	r4, [pc, #388]	; (8001218 <__aeabi_dsub+0x33c>)
 8001094:	46a4      	mov	ip, r4
 8001096:	44b4      	add	ip, r6
 8001098:	4664      	mov	r4, ip
 800109a:	2c00      	cmp	r4, #0
 800109c:	d05c      	beq.n	8001158 <__aeabi_dsub+0x27c>
 800109e:	1b94      	subs	r4, r2, r6
 80010a0:	46a4      	mov	ip, r4
 80010a2:	2e00      	cmp	r6, #0
 80010a4:	d000      	beq.n	80010a8 <__aeabi_dsub+0x1cc>
 80010a6:	e115      	b.n	80012d4 <__aeabi_dsub+0x3f8>
 80010a8:	464d      	mov	r5, r9
 80010aa:	431d      	orrs	r5, r3
 80010ac:	d100      	bne.n	80010b0 <__aeabi_dsub+0x1d4>
 80010ae:	e1c3      	b.n	8001438 <__aeabi_dsub+0x55c>
 80010b0:	1e65      	subs	r5, r4, #1
 80010b2:	2c01      	cmp	r4, #1
 80010b4:	d100      	bne.n	80010b8 <__aeabi_dsub+0x1dc>
 80010b6:	e20c      	b.n	80014d2 <__aeabi_dsub+0x5f6>
 80010b8:	4e55      	ldr	r6, [pc, #340]	; (8001210 <__aeabi_dsub+0x334>)
 80010ba:	42b4      	cmp	r4, r6
 80010bc:	d100      	bne.n	80010c0 <__aeabi_dsub+0x1e4>
 80010be:	e1f8      	b.n	80014b2 <__aeabi_dsub+0x5d6>
 80010c0:	46ac      	mov	ip, r5
 80010c2:	e10e      	b.n	80012e2 <__aeabi_dsub+0x406>
 80010c4:	000a      	movs	r2, r1
 80010c6:	4302      	orrs	r2, r0
 80010c8:	d100      	bne.n	80010cc <__aeabi_dsub+0x1f0>
 80010ca:	e136      	b.n	800133a <__aeabi_dsub+0x45e>
 80010cc:	0022      	movs	r2, r4
 80010ce:	3a01      	subs	r2, #1
 80010d0:	2c01      	cmp	r4, #1
 80010d2:	d100      	bne.n	80010d6 <__aeabi_dsub+0x1fa>
 80010d4:	e1c6      	b.n	8001464 <__aeabi_dsub+0x588>
 80010d6:	4c4e      	ldr	r4, [pc, #312]	; (8001210 <__aeabi_dsub+0x334>)
 80010d8:	45a4      	cmp	ip, r4
 80010da:	d100      	bne.n	80010de <__aeabi_dsub+0x202>
 80010dc:	e0f4      	b.n	80012c8 <__aeabi_dsub+0x3ec>
 80010de:	4694      	mov	ip, r2
 80010e0:	e731      	b.n	8000f46 <__aeabi_dsub+0x6a>
 80010e2:	2401      	movs	r4, #1
 80010e4:	4067      	eors	r7, r4
 80010e6:	46bb      	mov	fp, r7
 80010e8:	42bd      	cmp	r5, r7
 80010ea:	d000      	beq.n	80010ee <__aeabi_dsub+0x212>
 80010ec:	e71c      	b.n	8000f28 <__aeabi_dsub+0x4c>
 80010ee:	4c4a      	ldr	r4, [pc, #296]	; (8001218 <__aeabi_dsub+0x33c>)
 80010f0:	46a4      	mov	ip, r4
 80010f2:	44b4      	add	ip, r6
 80010f4:	4664      	mov	r4, ip
 80010f6:	2c00      	cmp	r4, #0
 80010f8:	d100      	bne.n	80010fc <__aeabi_dsub+0x220>
 80010fa:	e0cf      	b.n	800129c <__aeabi_dsub+0x3c0>
 80010fc:	1b94      	subs	r4, r2, r6
 80010fe:	46a4      	mov	ip, r4
 8001100:	2e00      	cmp	r6, #0
 8001102:	d100      	bne.n	8001106 <__aeabi_dsub+0x22a>
 8001104:	e15c      	b.n	80013c0 <__aeabi_dsub+0x4e4>
 8001106:	4e42      	ldr	r6, [pc, #264]	; (8001210 <__aeabi_dsub+0x334>)
 8001108:	42b2      	cmp	r2, r6
 800110a:	d100      	bne.n	800110e <__aeabi_dsub+0x232>
 800110c:	e1ec      	b.n	80014e8 <__aeabi_dsub+0x60c>
 800110e:	2680      	movs	r6, #128	; 0x80
 8001110:	0436      	lsls	r6, r6, #16
 8001112:	4333      	orrs	r3, r6
 8001114:	4664      	mov	r4, ip
 8001116:	2c38      	cmp	r4, #56	; 0x38
 8001118:	dd00      	ble.n	800111c <__aeabi_dsub+0x240>
 800111a:	e1b3      	b.n	8001484 <__aeabi_dsub+0x5a8>
 800111c:	2c1f      	cmp	r4, #31
 800111e:	dd00      	ble.n	8001122 <__aeabi_dsub+0x246>
 8001120:	e238      	b.n	8001594 <__aeabi_dsub+0x6b8>
 8001122:	2620      	movs	r6, #32
 8001124:	1b36      	subs	r6, r6, r4
 8001126:	001c      	movs	r4, r3
 8001128:	40b4      	lsls	r4, r6
 800112a:	464f      	mov	r7, r9
 800112c:	46a0      	mov	r8, r4
 800112e:	4664      	mov	r4, ip
 8001130:	40e7      	lsrs	r7, r4
 8001132:	4644      	mov	r4, r8
 8001134:	433c      	orrs	r4, r7
 8001136:	464f      	mov	r7, r9
 8001138:	40b7      	lsls	r7, r6
 800113a:	003e      	movs	r6, r7
 800113c:	1e77      	subs	r7, r6, #1
 800113e:	41be      	sbcs	r6, r7
 8001140:	4334      	orrs	r4, r6
 8001142:	4666      	mov	r6, ip
 8001144:	40f3      	lsrs	r3, r6
 8001146:	18c9      	adds	r1, r1, r3
 8001148:	1824      	adds	r4, r4, r0
 800114a:	4284      	cmp	r4, r0
 800114c:	419b      	sbcs	r3, r3
 800114e:	425b      	negs	r3, r3
 8001150:	4698      	mov	r8, r3
 8001152:	0016      	movs	r6, r2
 8001154:	4488      	add	r8, r1
 8001156:	e04e      	b.n	80011f6 <__aeabi_dsub+0x31a>
 8001158:	4a30      	ldr	r2, [pc, #192]	; (800121c <__aeabi_dsub+0x340>)
 800115a:	1c74      	adds	r4, r6, #1
 800115c:	4214      	tst	r4, r2
 800115e:	d000      	beq.n	8001162 <__aeabi_dsub+0x286>
 8001160:	e0d6      	b.n	8001310 <__aeabi_dsub+0x434>
 8001162:	464a      	mov	r2, r9
 8001164:	431a      	orrs	r2, r3
 8001166:	2e00      	cmp	r6, #0
 8001168:	d000      	beq.n	800116c <__aeabi_dsub+0x290>
 800116a:	e15b      	b.n	8001424 <__aeabi_dsub+0x548>
 800116c:	2a00      	cmp	r2, #0
 800116e:	d100      	bne.n	8001172 <__aeabi_dsub+0x296>
 8001170:	e1a5      	b.n	80014be <__aeabi_dsub+0x5e2>
 8001172:	000a      	movs	r2, r1
 8001174:	4302      	orrs	r2, r0
 8001176:	d000      	beq.n	800117a <__aeabi_dsub+0x29e>
 8001178:	e1bb      	b.n	80014f2 <__aeabi_dsub+0x616>
 800117a:	464a      	mov	r2, r9
 800117c:	0759      	lsls	r1, r3, #29
 800117e:	08d2      	lsrs	r2, r2, #3
 8001180:	430a      	orrs	r2, r1
 8001182:	08db      	lsrs	r3, r3, #3
 8001184:	e027      	b.n	80011d6 <__aeabi_dsub+0x2fa>
 8001186:	000a      	movs	r2, r1
 8001188:	4302      	orrs	r2, r0
 800118a:	d100      	bne.n	800118e <__aeabi_dsub+0x2b2>
 800118c:	e174      	b.n	8001478 <__aeabi_dsub+0x59c>
 800118e:	0022      	movs	r2, r4
 8001190:	3a01      	subs	r2, #1
 8001192:	2c01      	cmp	r4, #1
 8001194:	d005      	beq.n	80011a2 <__aeabi_dsub+0x2c6>
 8001196:	4c1e      	ldr	r4, [pc, #120]	; (8001210 <__aeabi_dsub+0x334>)
 8001198:	45a4      	cmp	ip, r4
 800119a:	d100      	bne.n	800119e <__aeabi_dsub+0x2c2>
 800119c:	e094      	b.n	80012c8 <__aeabi_dsub+0x3ec>
 800119e:	4694      	mov	ip, r2
 80011a0:	e759      	b.n	8001056 <__aeabi_dsub+0x17a>
 80011a2:	4448      	add	r0, r9
 80011a4:	4548      	cmp	r0, r9
 80011a6:	4192      	sbcs	r2, r2
 80011a8:	185b      	adds	r3, r3, r1
 80011aa:	4698      	mov	r8, r3
 80011ac:	0004      	movs	r4, r0
 80011ae:	4252      	negs	r2, r2
 80011b0:	4490      	add	r8, r2
 80011b2:	4643      	mov	r3, r8
 80011b4:	2602      	movs	r6, #2
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	d500      	bpl.n	80011bc <__aeabi_dsub+0x2e0>
 80011ba:	e0c4      	b.n	8001346 <__aeabi_dsub+0x46a>
 80011bc:	3e01      	subs	r6, #1
 80011be:	0763      	lsls	r3, r4, #29
 80011c0:	d000      	beq.n	80011c4 <__aeabi_dsub+0x2e8>
 80011c2:	e711      	b.n	8000fe8 <__aeabi_dsub+0x10c>
 80011c4:	4643      	mov	r3, r8
 80011c6:	46b4      	mov	ip, r6
 80011c8:	0759      	lsls	r1, r3, #29
 80011ca:	08e2      	lsrs	r2, r4, #3
 80011cc:	430a      	orrs	r2, r1
 80011ce:	08db      	lsrs	r3, r3, #3
 80011d0:	490f      	ldr	r1, [pc, #60]	; (8001210 <__aeabi_dsub+0x334>)
 80011d2:	458c      	cmp	ip, r1
 80011d4:	d040      	beq.n	8001258 <__aeabi_dsub+0x37c>
 80011d6:	4661      	mov	r1, ip
 80011d8:	031b      	lsls	r3, r3, #12
 80011da:	0549      	lsls	r1, r1, #21
 80011dc:	0b1b      	lsrs	r3, r3, #12
 80011de:	0d49      	lsrs	r1, r1, #21
 80011e0:	e720      	b.n	8001024 <__aeabi_dsub+0x148>
 80011e2:	4301      	orrs	r1, r0
 80011e4:	000c      	movs	r4, r1
 80011e6:	1e61      	subs	r1, r4, #1
 80011e8:	418c      	sbcs	r4, r1
 80011ea:	444c      	add	r4, r9
 80011ec:	454c      	cmp	r4, r9
 80011ee:	4192      	sbcs	r2, r2
 80011f0:	4252      	negs	r2, r2
 80011f2:	4690      	mov	r8, r2
 80011f4:	4498      	add	r8, r3
 80011f6:	4643      	mov	r3, r8
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	d5e0      	bpl.n	80011be <__aeabi_dsub+0x2e2>
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <__aeabi_dsub+0x334>)
 80011fe:	3601      	adds	r6, #1
 8001200:	429e      	cmp	r6, r3
 8001202:	d000      	beq.n	8001206 <__aeabi_dsub+0x32a>
 8001204:	e09f      	b.n	8001346 <__aeabi_dsub+0x46a>
 8001206:	0031      	movs	r1, r6
 8001208:	2300      	movs	r3, #0
 800120a:	2200      	movs	r2, #0
 800120c:	e70a      	b.n	8001024 <__aeabi_dsub+0x148>
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	000007ff 	.word	0x000007ff
 8001214:	ff7fffff 	.word	0xff7fffff
 8001218:	fffff801 	.word	0xfffff801
 800121c:	000007fe 	.word	0x000007fe
 8001220:	2a00      	cmp	r2, #0
 8001222:	d100      	bne.n	8001226 <__aeabi_dsub+0x34a>
 8001224:	e160      	b.n	80014e8 <__aeabi_dsub+0x60c>
 8001226:	000a      	movs	r2, r1
 8001228:	4302      	orrs	r2, r0
 800122a:	d04d      	beq.n	80012c8 <__aeabi_dsub+0x3ec>
 800122c:	464a      	mov	r2, r9
 800122e:	075c      	lsls	r4, r3, #29
 8001230:	08d2      	lsrs	r2, r2, #3
 8001232:	4322      	orrs	r2, r4
 8001234:	2480      	movs	r4, #128	; 0x80
 8001236:	08db      	lsrs	r3, r3, #3
 8001238:	0324      	lsls	r4, r4, #12
 800123a:	4223      	tst	r3, r4
 800123c:	d007      	beq.n	800124e <__aeabi_dsub+0x372>
 800123e:	08ce      	lsrs	r6, r1, #3
 8001240:	4226      	tst	r6, r4
 8001242:	d104      	bne.n	800124e <__aeabi_dsub+0x372>
 8001244:	465d      	mov	r5, fp
 8001246:	0033      	movs	r3, r6
 8001248:	08c2      	lsrs	r2, r0, #3
 800124a:	0749      	lsls	r1, r1, #29
 800124c:	430a      	orrs	r2, r1
 800124e:	0f51      	lsrs	r1, r2, #29
 8001250:	00d2      	lsls	r2, r2, #3
 8001252:	08d2      	lsrs	r2, r2, #3
 8001254:	0749      	lsls	r1, r1, #29
 8001256:	430a      	orrs	r2, r1
 8001258:	0011      	movs	r1, r2
 800125a:	4319      	orrs	r1, r3
 800125c:	d100      	bne.n	8001260 <__aeabi_dsub+0x384>
 800125e:	e1c8      	b.n	80015f2 <__aeabi_dsub+0x716>
 8001260:	2180      	movs	r1, #128	; 0x80
 8001262:	0309      	lsls	r1, r1, #12
 8001264:	430b      	orrs	r3, r1
 8001266:	031b      	lsls	r3, r3, #12
 8001268:	49d5      	ldr	r1, [pc, #852]	; (80015c0 <__aeabi_dsub+0x6e4>)
 800126a:	0b1b      	lsrs	r3, r3, #12
 800126c:	e6da      	b.n	8001024 <__aeabi_dsub+0x148>
 800126e:	49d5      	ldr	r1, [pc, #852]	; (80015c4 <__aeabi_dsub+0x6e8>)
 8001270:	1ab6      	subs	r6, r6, r2
 8001272:	400b      	ands	r3, r1
 8001274:	4698      	mov	r8, r3
 8001276:	e6b5      	b.n	8000fe4 <__aeabi_dsub+0x108>
 8001278:	0020      	movs	r0, r4
 800127a:	f000 faf7 	bl	800186c <__clzsi2>
 800127e:	0002      	movs	r2, r0
 8001280:	3218      	adds	r2, #24
 8001282:	2a1f      	cmp	r2, #31
 8001284:	dc00      	bgt.n	8001288 <__aeabi_dsub+0x3ac>
 8001286:	e68f      	b.n	8000fa8 <__aeabi_dsub+0xcc>
 8001288:	0023      	movs	r3, r4
 800128a:	3808      	subs	r0, #8
 800128c:	4083      	lsls	r3, r0
 800128e:	2400      	movs	r4, #0
 8001290:	e692      	b.n	8000fb8 <__aeabi_dsub+0xdc>
 8001292:	4308      	orrs	r0, r1
 8001294:	0002      	movs	r2, r0
 8001296:	1e50      	subs	r0, r2, #1
 8001298:	4182      	sbcs	r2, r0
 800129a:	e66d      	b.n	8000f78 <__aeabi_dsub+0x9c>
 800129c:	4cca      	ldr	r4, [pc, #808]	; (80015c8 <__aeabi_dsub+0x6ec>)
 800129e:	1c72      	adds	r2, r6, #1
 80012a0:	4222      	tst	r2, r4
 80012a2:	d000      	beq.n	80012a6 <__aeabi_dsub+0x3ca>
 80012a4:	e0ad      	b.n	8001402 <__aeabi_dsub+0x526>
 80012a6:	464a      	mov	r2, r9
 80012a8:	431a      	orrs	r2, r3
 80012aa:	2e00      	cmp	r6, #0
 80012ac:	d1b8      	bne.n	8001220 <__aeabi_dsub+0x344>
 80012ae:	2a00      	cmp	r2, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_dsub+0x3d8>
 80012b2:	e158      	b.n	8001566 <__aeabi_dsub+0x68a>
 80012b4:	000a      	movs	r2, r1
 80012b6:	4302      	orrs	r2, r0
 80012b8:	d000      	beq.n	80012bc <__aeabi_dsub+0x3e0>
 80012ba:	e159      	b.n	8001570 <__aeabi_dsub+0x694>
 80012bc:	464a      	mov	r2, r9
 80012be:	0759      	lsls	r1, r3, #29
 80012c0:	08d2      	lsrs	r2, r2, #3
 80012c2:	430a      	orrs	r2, r1
 80012c4:	08db      	lsrs	r3, r3, #3
 80012c6:	e786      	b.n	80011d6 <__aeabi_dsub+0x2fa>
 80012c8:	464a      	mov	r2, r9
 80012ca:	0759      	lsls	r1, r3, #29
 80012cc:	08d2      	lsrs	r2, r2, #3
 80012ce:	430a      	orrs	r2, r1
 80012d0:	08db      	lsrs	r3, r3, #3
 80012d2:	e7c1      	b.n	8001258 <__aeabi_dsub+0x37c>
 80012d4:	4dba      	ldr	r5, [pc, #744]	; (80015c0 <__aeabi_dsub+0x6e4>)
 80012d6:	42aa      	cmp	r2, r5
 80012d8:	d100      	bne.n	80012dc <__aeabi_dsub+0x400>
 80012da:	e11e      	b.n	800151a <__aeabi_dsub+0x63e>
 80012dc:	2580      	movs	r5, #128	; 0x80
 80012de:	042d      	lsls	r5, r5, #16
 80012e0:	432b      	orrs	r3, r5
 80012e2:	4664      	mov	r4, ip
 80012e4:	2c38      	cmp	r4, #56	; 0x38
 80012e6:	dc5d      	bgt.n	80013a4 <__aeabi_dsub+0x4c8>
 80012e8:	2c1f      	cmp	r4, #31
 80012ea:	dd00      	ble.n	80012ee <__aeabi_dsub+0x412>
 80012ec:	e0d0      	b.n	8001490 <__aeabi_dsub+0x5b4>
 80012ee:	2520      	movs	r5, #32
 80012f0:	4667      	mov	r7, ip
 80012f2:	1b2d      	subs	r5, r5, r4
 80012f4:	464e      	mov	r6, r9
 80012f6:	001c      	movs	r4, r3
 80012f8:	40fe      	lsrs	r6, r7
 80012fa:	40ac      	lsls	r4, r5
 80012fc:	4334      	orrs	r4, r6
 80012fe:	464e      	mov	r6, r9
 8001300:	40ae      	lsls	r6, r5
 8001302:	0035      	movs	r5, r6
 8001304:	40fb      	lsrs	r3, r7
 8001306:	1e6e      	subs	r6, r5, #1
 8001308:	41b5      	sbcs	r5, r6
 800130a:	1ac9      	subs	r1, r1, r3
 800130c:	432c      	orrs	r4, r5
 800130e:	e04e      	b.n	80013ae <__aeabi_dsub+0x4d2>
 8001310:	464a      	mov	r2, r9
 8001312:	1a14      	subs	r4, r2, r0
 8001314:	45a1      	cmp	r9, r4
 8001316:	4192      	sbcs	r2, r2
 8001318:	4252      	negs	r2, r2
 800131a:	4690      	mov	r8, r2
 800131c:	1a5f      	subs	r7, r3, r1
 800131e:	003a      	movs	r2, r7
 8001320:	4647      	mov	r7, r8
 8001322:	1bd2      	subs	r2, r2, r7
 8001324:	4690      	mov	r8, r2
 8001326:	0212      	lsls	r2, r2, #8
 8001328:	d500      	bpl.n	800132c <__aeabi_dsub+0x450>
 800132a:	e08b      	b.n	8001444 <__aeabi_dsub+0x568>
 800132c:	4642      	mov	r2, r8
 800132e:	4322      	orrs	r2, r4
 8001330:	d000      	beq.n	8001334 <__aeabi_dsub+0x458>
 8001332:	e630      	b.n	8000f96 <__aeabi_dsub+0xba>
 8001334:	2300      	movs	r3, #0
 8001336:	2500      	movs	r5, #0
 8001338:	e74d      	b.n	80011d6 <__aeabi_dsub+0x2fa>
 800133a:	464a      	mov	r2, r9
 800133c:	0759      	lsls	r1, r3, #29
 800133e:	08d2      	lsrs	r2, r2, #3
 8001340:	430a      	orrs	r2, r1
 8001342:	08db      	lsrs	r3, r3, #3
 8001344:	e744      	b.n	80011d0 <__aeabi_dsub+0x2f4>
 8001346:	4642      	mov	r2, r8
 8001348:	4b9e      	ldr	r3, [pc, #632]	; (80015c4 <__aeabi_dsub+0x6e8>)
 800134a:	0861      	lsrs	r1, r4, #1
 800134c:	401a      	ands	r2, r3
 800134e:	0013      	movs	r3, r2
 8001350:	2201      	movs	r2, #1
 8001352:	4014      	ands	r4, r2
 8001354:	430c      	orrs	r4, r1
 8001356:	07da      	lsls	r2, r3, #31
 8001358:	085b      	lsrs	r3, r3, #1
 800135a:	4698      	mov	r8, r3
 800135c:	4314      	orrs	r4, r2
 800135e:	e641      	b.n	8000fe4 <__aeabi_dsub+0x108>
 8001360:	001a      	movs	r2, r3
 8001362:	3e1f      	subs	r6, #31
 8001364:	40f2      	lsrs	r2, r6
 8001366:	0016      	movs	r6, r2
 8001368:	2920      	cmp	r1, #32
 800136a:	d003      	beq.n	8001374 <__aeabi_dsub+0x498>
 800136c:	2240      	movs	r2, #64	; 0x40
 800136e:	1a51      	subs	r1, r2, r1
 8001370:	408b      	lsls	r3, r1
 8001372:	431c      	orrs	r4, r3
 8001374:	1e62      	subs	r2, r4, #1
 8001376:	4194      	sbcs	r4, r2
 8001378:	2300      	movs	r3, #0
 800137a:	4334      	orrs	r4, r6
 800137c:	4698      	mov	r8, r3
 800137e:	2600      	movs	r6, #0
 8001380:	e71d      	b.n	80011be <__aeabi_dsub+0x2e2>
 8001382:	000c      	movs	r4, r1
 8001384:	3a20      	subs	r2, #32
 8001386:	40d4      	lsrs	r4, r2
 8001388:	0022      	movs	r2, r4
 800138a:	4664      	mov	r4, ip
 800138c:	2c20      	cmp	r4, #32
 800138e:	d004      	beq.n	800139a <__aeabi_dsub+0x4be>
 8001390:	2740      	movs	r7, #64	; 0x40
 8001392:	1b3f      	subs	r7, r7, r4
 8001394:	40b9      	lsls	r1, r7
 8001396:	4308      	orrs	r0, r1
 8001398:	4680      	mov	r8, r0
 800139a:	4644      	mov	r4, r8
 800139c:	1e61      	subs	r1, r4, #1
 800139e:	418c      	sbcs	r4, r1
 80013a0:	4322      	orrs	r2, r4
 80013a2:	e5e9      	b.n	8000f78 <__aeabi_dsub+0x9c>
 80013a4:	464c      	mov	r4, r9
 80013a6:	4323      	orrs	r3, r4
 80013a8:	001c      	movs	r4, r3
 80013aa:	1e63      	subs	r3, r4, #1
 80013ac:	419c      	sbcs	r4, r3
 80013ae:	1b04      	subs	r4, r0, r4
 80013b0:	42a0      	cmp	r0, r4
 80013b2:	419b      	sbcs	r3, r3
 80013b4:	425b      	negs	r3, r3
 80013b6:	1acb      	subs	r3, r1, r3
 80013b8:	4698      	mov	r8, r3
 80013ba:	465d      	mov	r5, fp
 80013bc:	0016      	movs	r6, r2
 80013be:	e5e2      	b.n	8000f86 <__aeabi_dsub+0xaa>
 80013c0:	464e      	mov	r6, r9
 80013c2:	431e      	orrs	r6, r3
 80013c4:	d100      	bne.n	80013c8 <__aeabi_dsub+0x4ec>
 80013c6:	e0ae      	b.n	8001526 <__aeabi_dsub+0x64a>
 80013c8:	1e66      	subs	r6, r4, #1
 80013ca:	2c01      	cmp	r4, #1
 80013cc:	d100      	bne.n	80013d0 <__aeabi_dsub+0x4f4>
 80013ce:	e0fd      	b.n	80015cc <__aeabi_dsub+0x6f0>
 80013d0:	4f7b      	ldr	r7, [pc, #492]	; (80015c0 <__aeabi_dsub+0x6e4>)
 80013d2:	42bc      	cmp	r4, r7
 80013d4:	d100      	bne.n	80013d8 <__aeabi_dsub+0x4fc>
 80013d6:	e107      	b.n	80015e8 <__aeabi_dsub+0x70c>
 80013d8:	46b4      	mov	ip, r6
 80013da:	e69b      	b.n	8001114 <__aeabi_dsub+0x238>
 80013dc:	4664      	mov	r4, ip
 80013de:	2220      	movs	r2, #32
 80013e0:	1b12      	subs	r2, r2, r4
 80013e2:	000c      	movs	r4, r1
 80013e4:	4094      	lsls	r4, r2
 80013e6:	0007      	movs	r7, r0
 80013e8:	4090      	lsls	r0, r2
 80013ea:	46a0      	mov	r8, r4
 80013ec:	4664      	mov	r4, ip
 80013ee:	1e42      	subs	r2, r0, #1
 80013f0:	4190      	sbcs	r0, r2
 80013f2:	4662      	mov	r2, ip
 80013f4:	40e7      	lsrs	r7, r4
 80013f6:	4644      	mov	r4, r8
 80013f8:	40d1      	lsrs	r1, r2
 80013fa:	433c      	orrs	r4, r7
 80013fc:	4304      	orrs	r4, r0
 80013fe:	185b      	adds	r3, r3, r1
 8001400:	e6f3      	b.n	80011ea <__aeabi_dsub+0x30e>
 8001402:	4c6f      	ldr	r4, [pc, #444]	; (80015c0 <__aeabi_dsub+0x6e4>)
 8001404:	42a2      	cmp	r2, r4
 8001406:	d100      	bne.n	800140a <__aeabi_dsub+0x52e>
 8001408:	e0d5      	b.n	80015b6 <__aeabi_dsub+0x6da>
 800140a:	4448      	add	r0, r9
 800140c:	185b      	adds	r3, r3, r1
 800140e:	4548      	cmp	r0, r9
 8001410:	4189      	sbcs	r1, r1
 8001412:	4249      	negs	r1, r1
 8001414:	185b      	adds	r3, r3, r1
 8001416:	07dc      	lsls	r4, r3, #31
 8001418:	0840      	lsrs	r0, r0, #1
 800141a:	085b      	lsrs	r3, r3, #1
 800141c:	4698      	mov	r8, r3
 800141e:	0016      	movs	r6, r2
 8001420:	4304      	orrs	r4, r0
 8001422:	e6cc      	b.n	80011be <__aeabi_dsub+0x2e2>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d000      	beq.n	800142a <__aeabi_dsub+0x54e>
 8001428:	e082      	b.n	8001530 <__aeabi_dsub+0x654>
 800142a:	000a      	movs	r2, r1
 800142c:	4302      	orrs	r2, r0
 800142e:	d140      	bne.n	80014b2 <__aeabi_dsub+0x5d6>
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	2500      	movs	r5, #0
 8001434:	031b      	lsls	r3, r3, #12
 8001436:	e713      	b.n	8001260 <__aeabi_dsub+0x384>
 8001438:	074b      	lsls	r3, r1, #29
 800143a:	08c2      	lsrs	r2, r0, #3
 800143c:	431a      	orrs	r2, r3
 800143e:	465d      	mov	r5, fp
 8001440:	08cb      	lsrs	r3, r1, #3
 8001442:	e6c5      	b.n	80011d0 <__aeabi_dsub+0x2f4>
 8001444:	464a      	mov	r2, r9
 8001446:	1a84      	subs	r4, r0, r2
 8001448:	42a0      	cmp	r0, r4
 800144a:	4192      	sbcs	r2, r2
 800144c:	1acb      	subs	r3, r1, r3
 800144e:	4252      	negs	r2, r2
 8001450:	1a9b      	subs	r3, r3, r2
 8001452:	4698      	mov	r8, r3
 8001454:	465d      	mov	r5, fp
 8001456:	e59e      	b.n	8000f96 <__aeabi_dsub+0xba>
 8001458:	464a      	mov	r2, r9
 800145a:	0759      	lsls	r1, r3, #29
 800145c:	08d2      	lsrs	r2, r2, #3
 800145e:	430a      	orrs	r2, r1
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	e6f9      	b.n	8001258 <__aeabi_dsub+0x37c>
 8001464:	464a      	mov	r2, r9
 8001466:	1a14      	subs	r4, r2, r0
 8001468:	45a1      	cmp	r9, r4
 800146a:	4192      	sbcs	r2, r2
 800146c:	1a5b      	subs	r3, r3, r1
 800146e:	4252      	negs	r2, r2
 8001470:	1a9b      	subs	r3, r3, r2
 8001472:	4698      	mov	r8, r3
 8001474:	2601      	movs	r6, #1
 8001476:	e586      	b.n	8000f86 <__aeabi_dsub+0xaa>
 8001478:	464a      	mov	r2, r9
 800147a:	0759      	lsls	r1, r3, #29
 800147c:	08d2      	lsrs	r2, r2, #3
 800147e:	430a      	orrs	r2, r1
 8001480:	08db      	lsrs	r3, r3, #3
 8001482:	e6a5      	b.n	80011d0 <__aeabi_dsub+0x2f4>
 8001484:	464c      	mov	r4, r9
 8001486:	4323      	orrs	r3, r4
 8001488:	001c      	movs	r4, r3
 800148a:	1e63      	subs	r3, r4, #1
 800148c:	419c      	sbcs	r4, r3
 800148e:	e65b      	b.n	8001148 <__aeabi_dsub+0x26c>
 8001490:	4665      	mov	r5, ip
 8001492:	001e      	movs	r6, r3
 8001494:	3d20      	subs	r5, #32
 8001496:	40ee      	lsrs	r6, r5
 8001498:	2c20      	cmp	r4, #32
 800149a:	d005      	beq.n	80014a8 <__aeabi_dsub+0x5cc>
 800149c:	2540      	movs	r5, #64	; 0x40
 800149e:	1b2d      	subs	r5, r5, r4
 80014a0:	40ab      	lsls	r3, r5
 80014a2:	464c      	mov	r4, r9
 80014a4:	431c      	orrs	r4, r3
 80014a6:	46a2      	mov	sl, r4
 80014a8:	4654      	mov	r4, sl
 80014aa:	1e63      	subs	r3, r4, #1
 80014ac:	419c      	sbcs	r4, r3
 80014ae:	4334      	orrs	r4, r6
 80014b0:	e77d      	b.n	80013ae <__aeabi_dsub+0x4d2>
 80014b2:	074b      	lsls	r3, r1, #29
 80014b4:	08c2      	lsrs	r2, r0, #3
 80014b6:	431a      	orrs	r2, r3
 80014b8:	465d      	mov	r5, fp
 80014ba:	08cb      	lsrs	r3, r1, #3
 80014bc:	e6cc      	b.n	8001258 <__aeabi_dsub+0x37c>
 80014be:	000a      	movs	r2, r1
 80014c0:	4302      	orrs	r2, r0
 80014c2:	d100      	bne.n	80014c6 <__aeabi_dsub+0x5ea>
 80014c4:	e736      	b.n	8001334 <__aeabi_dsub+0x458>
 80014c6:	074b      	lsls	r3, r1, #29
 80014c8:	08c2      	lsrs	r2, r0, #3
 80014ca:	431a      	orrs	r2, r3
 80014cc:	465d      	mov	r5, fp
 80014ce:	08cb      	lsrs	r3, r1, #3
 80014d0:	e681      	b.n	80011d6 <__aeabi_dsub+0x2fa>
 80014d2:	464a      	mov	r2, r9
 80014d4:	1a84      	subs	r4, r0, r2
 80014d6:	42a0      	cmp	r0, r4
 80014d8:	4192      	sbcs	r2, r2
 80014da:	1acb      	subs	r3, r1, r3
 80014dc:	4252      	negs	r2, r2
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	4698      	mov	r8, r3
 80014e2:	465d      	mov	r5, fp
 80014e4:	2601      	movs	r6, #1
 80014e6:	e54e      	b.n	8000f86 <__aeabi_dsub+0xaa>
 80014e8:	074b      	lsls	r3, r1, #29
 80014ea:	08c2      	lsrs	r2, r0, #3
 80014ec:	431a      	orrs	r2, r3
 80014ee:	08cb      	lsrs	r3, r1, #3
 80014f0:	e6b2      	b.n	8001258 <__aeabi_dsub+0x37c>
 80014f2:	464a      	mov	r2, r9
 80014f4:	1a14      	subs	r4, r2, r0
 80014f6:	45a1      	cmp	r9, r4
 80014f8:	4192      	sbcs	r2, r2
 80014fa:	1a5f      	subs	r7, r3, r1
 80014fc:	4252      	negs	r2, r2
 80014fe:	1aba      	subs	r2, r7, r2
 8001500:	4690      	mov	r8, r2
 8001502:	0212      	lsls	r2, r2, #8
 8001504:	d56b      	bpl.n	80015de <__aeabi_dsub+0x702>
 8001506:	464a      	mov	r2, r9
 8001508:	1a84      	subs	r4, r0, r2
 800150a:	42a0      	cmp	r0, r4
 800150c:	4192      	sbcs	r2, r2
 800150e:	1acb      	subs	r3, r1, r3
 8001510:	4252      	negs	r2, r2
 8001512:	1a9b      	subs	r3, r3, r2
 8001514:	4698      	mov	r8, r3
 8001516:	465d      	mov	r5, fp
 8001518:	e564      	b.n	8000fe4 <__aeabi_dsub+0x108>
 800151a:	074b      	lsls	r3, r1, #29
 800151c:	08c2      	lsrs	r2, r0, #3
 800151e:	431a      	orrs	r2, r3
 8001520:	465d      	mov	r5, fp
 8001522:	08cb      	lsrs	r3, r1, #3
 8001524:	e698      	b.n	8001258 <__aeabi_dsub+0x37c>
 8001526:	074b      	lsls	r3, r1, #29
 8001528:	08c2      	lsrs	r2, r0, #3
 800152a:	431a      	orrs	r2, r3
 800152c:	08cb      	lsrs	r3, r1, #3
 800152e:	e64f      	b.n	80011d0 <__aeabi_dsub+0x2f4>
 8001530:	000a      	movs	r2, r1
 8001532:	4302      	orrs	r2, r0
 8001534:	d090      	beq.n	8001458 <__aeabi_dsub+0x57c>
 8001536:	464a      	mov	r2, r9
 8001538:	075c      	lsls	r4, r3, #29
 800153a:	08d2      	lsrs	r2, r2, #3
 800153c:	4314      	orrs	r4, r2
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	08db      	lsrs	r3, r3, #3
 8001542:	0312      	lsls	r2, r2, #12
 8001544:	4213      	tst	r3, r2
 8001546:	d008      	beq.n	800155a <__aeabi_dsub+0x67e>
 8001548:	08ce      	lsrs	r6, r1, #3
 800154a:	4216      	tst	r6, r2
 800154c:	d105      	bne.n	800155a <__aeabi_dsub+0x67e>
 800154e:	08c0      	lsrs	r0, r0, #3
 8001550:	0749      	lsls	r1, r1, #29
 8001552:	4308      	orrs	r0, r1
 8001554:	0004      	movs	r4, r0
 8001556:	465d      	mov	r5, fp
 8001558:	0033      	movs	r3, r6
 800155a:	0f61      	lsrs	r1, r4, #29
 800155c:	00e2      	lsls	r2, r4, #3
 800155e:	0749      	lsls	r1, r1, #29
 8001560:	08d2      	lsrs	r2, r2, #3
 8001562:	430a      	orrs	r2, r1
 8001564:	e678      	b.n	8001258 <__aeabi_dsub+0x37c>
 8001566:	074b      	lsls	r3, r1, #29
 8001568:	08c2      	lsrs	r2, r0, #3
 800156a:	431a      	orrs	r2, r3
 800156c:	08cb      	lsrs	r3, r1, #3
 800156e:	e632      	b.n	80011d6 <__aeabi_dsub+0x2fa>
 8001570:	4448      	add	r0, r9
 8001572:	185b      	adds	r3, r3, r1
 8001574:	4548      	cmp	r0, r9
 8001576:	4192      	sbcs	r2, r2
 8001578:	4698      	mov	r8, r3
 800157a:	4252      	negs	r2, r2
 800157c:	4490      	add	r8, r2
 800157e:	4643      	mov	r3, r8
 8001580:	0004      	movs	r4, r0
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	d400      	bmi.n	8001588 <__aeabi_dsub+0x6ac>
 8001586:	e61a      	b.n	80011be <__aeabi_dsub+0x2e2>
 8001588:	4642      	mov	r2, r8
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <__aeabi_dsub+0x6e8>)
 800158c:	2601      	movs	r6, #1
 800158e:	401a      	ands	r2, r3
 8001590:	4690      	mov	r8, r2
 8001592:	e614      	b.n	80011be <__aeabi_dsub+0x2e2>
 8001594:	4666      	mov	r6, ip
 8001596:	001f      	movs	r7, r3
 8001598:	3e20      	subs	r6, #32
 800159a:	40f7      	lsrs	r7, r6
 800159c:	2c20      	cmp	r4, #32
 800159e:	d005      	beq.n	80015ac <__aeabi_dsub+0x6d0>
 80015a0:	2640      	movs	r6, #64	; 0x40
 80015a2:	1b36      	subs	r6, r6, r4
 80015a4:	40b3      	lsls	r3, r6
 80015a6:	464c      	mov	r4, r9
 80015a8:	431c      	orrs	r4, r3
 80015aa:	46a2      	mov	sl, r4
 80015ac:	4654      	mov	r4, sl
 80015ae:	1e63      	subs	r3, r4, #1
 80015b0:	419c      	sbcs	r4, r3
 80015b2:	433c      	orrs	r4, r7
 80015b4:	e5c8      	b.n	8001148 <__aeabi_dsub+0x26c>
 80015b6:	0011      	movs	r1, r2
 80015b8:	2300      	movs	r3, #0
 80015ba:	2200      	movs	r2, #0
 80015bc:	e532      	b.n	8001024 <__aeabi_dsub+0x148>
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	000007ff 	.word	0x000007ff
 80015c4:	ff7fffff 	.word	0xff7fffff
 80015c8:	000007fe 	.word	0x000007fe
 80015cc:	464a      	mov	r2, r9
 80015ce:	1814      	adds	r4, r2, r0
 80015d0:	4284      	cmp	r4, r0
 80015d2:	4192      	sbcs	r2, r2
 80015d4:	185b      	adds	r3, r3, r1
 80015d6:	4698      	mov	r8, r3
 80015d8:	4252      	negs	r2, r2
 80015da:	4490      	add	r8, r2
 80015dc:	e5e9      	b.n	80011b2 <__aeabi_dsub+0x2d6>
 80015de:	4642      	mov	r2, r8
 80015e0:	4322      	orrs	r2, r4
 80015e2:	d100      	bne.n	80015e6 <__aeabi_dsub+0x70a>
 80015e4:	e6a6      	b.n	8001334 <__aeabi_dsub+0x458>
 80015e6:	e5ea      	b.n	80011be <__aeabi_dsub+0x2e2>
 80015e8:	074b      	lsls	r3, r1, #29
 80015ea:	08c2      	lsrs	r2, r0, #3
 80015ec:	431a      	orrs	r2, r3
 80015ee:	08cb      	lsrs	r3, r1, #3
 80015f0:	e632      	b.n	8001258 <__aeabi_dsub+0x37c>
 80015f2:	2200      	movs	r2, #0
 80015f4:	4901      	ldr	r1, [pc, #4]	; (80015fc <__aeabi_dsub+0x720>)
 80015f6:	0013      	movs	r3, r2
 80015f8:	e514      	b.n	8001024 <__aeabi_dsub+0x148>
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	000007ff 	.word	0x000007ff

08001600 <__aeabi_d2iz>:
 8001600:	000a      	movs	r2, r1
 8001602:	b530      	push	{r4, r5, lr}
 8001604:	4c13      	ldr	r4, [pc, #76]	; (8001654 <__aeabi_d2iz+0x54>)
 8001606:	0053      	lsls	r3, r2, #1
 8001608:	0309      	lsls	r1, r1, #12
 800160a:	0005      	movs	r5, r0
 800160c:	0b09      	lsrs	r1, r1, #12
 800160e:	2000      	movs	r0, #0
 8001610:	0d5b      	lsrs	r3, r3, #21
 8001612:	0fd2      	lsrs	r2, r2, #31
 8001614:	42a3      	cmp	r3, r4
 8001616:	dd04      	ble.n	8001622 <__aeabi_d2iz+0x22>
 8001618:	480f      	ldr	r0, [pc, #60]	; (8001658 <__aeabi_d2iz+0x58>)
 800161a:	4283      	cmp	r3, r0
 800161c:	dd02      	ble.n	8001624 <__aeabi_d2iz+0x24>
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <__aeabi_d2iz+0x5c>)
 8001620:	18d0      	adds	r0, r2, r3
 8001622:	bd30      	pop	{r4, r5, pc}
 8001624:	2080      	movs	r0, #128	; 0x80
 8001626:	0340      	lsls	r0, r0, #13
 8001628:	4301      	orrs	r1, r0
 800162a:	480d      	ldr	r0, [pc, #52]	; (8001660 <__aeabi_d2iz+0x60>)
 800162c:	1ac0      	subs	r0, r0, r3
 800162e:	281f      	cmp	r0, #31
 8001630:	dd08      	ble.n	8001644 <__aeabi_d2iz+0x44>
 8001632:	480c      	ldr	r0, [pc, #48]	; (8001664 <__aeabi_d2iz+0x64>)
 8001634:	1ac3      	subs	r3, r0, r3
 8001636:	40d9      	lsrs	r1, r3
 8001638:	000b      	movs	r3, r1
 800163a:	4258      	negs	r0, r3
 800163c:	2a00      	cmp	r2, #0
 800163e:	d1f0      	bne.n	8001622 <__aeabi_d2iz+0x22>
 8001640:	0018      	movs	r0, r3
 8001642:	e7ee      	b.n	8001622 <__aeabi_d2iz+0x22>
 8001644:	4c08      	ldr	r4, [pc, #32]	; (8001668 <__aeabi_d2iz+0x68>)
 8001646:	40c5      	lsrs	r5, r0
 8001648:	46a4      	mov	ip, r4
 800164a:	4463      	add	r3, ip
 800164c:	4099      	lsls	r1, r3
 800164e:	000b      	movs	r3, r1
 8001650:	432b      	orrs	r3, r5
 8001652:	e7f2      	b.n	800163a <__aeabi_d2iz+0x3a>
 8001654:	000003fe 	.word	0x000003fe
 8001658:	0000041d 	.word	0x0000041d
 800165c:	7fffffff 	.word	0x7fffffff
 8001660:	00000433 	.word	0x00000433
 8001664:	00000413 	.word	0x00000413
 8001668:	fffffbed 	.word	0xfffffbed

0800166c <__aeabi_i2d>:
 800166c:	b570      	push	{r4, r5, r6, lr}
 800166e:	2800      	cmp	r0, #0
 8001670:	d016      	beq.n	80016a0 <__aeabi_i2d+0x34>
 8001672:	17c3      	asrs	r3, r0, #31
 8001674:	18c5      	adds	r5, r0, r3
 8001676:	405d      	eors	r5, r3
 8001678:	0fc4      	lsrs	r4, r0, #31
 800167a:	0028      	movs	r0, r5
 800167c:	f000 f8f6 	bl	800186c <__clzsi2>
 8001680:	4a11      	ldr	r2, [pc, #68]	; (80016c8 <__aeabi_i2d+0x5c>)
 8001682:	1a12      	subs	r2, r2, r0
 8001684:	280a      	cmp	r0, #10
 8001686:	dc16      	bgt.n	80016b6 <__aeabi_i2d+0x4a>
 8001688:	0003      	movs	r3, r0
 800168a:	002e      	movs	r6, r5
 800168c:	3315      	adds	r3, #21
 800168e:	409e      	lsls	r6, r3
 8001690:	230b      	movs	r3, #11
 8001692:	1a18      	subs	r0, r3, r0
 8001694:	40c5      	lsrs	r5, r0
 8001696:	0553      	lsls	r3, r2, #21
 8001698:	032d      	lsls	r5, r5, #12
 800169a:	0b2d      	lsrs	r5, r5, #12
 800169c:	0d5b      	lsrs	r3, r3, #21
 800169e:	e003      	b.n	80016a8 <__aeabi_i2d+0x3c>
 80016a0:	2400      	movs	r4, #0
 80016a2:	2300      	movs	r3, #0
 80016a4:	2500      	movs	r5, #0
 80016a6:	2600      	movs	r6, #0
 80016a8:	051b      	lsls	r3, r3, #20
 80016aa:	432b      	orrs	r3, r5
 80016ac:	07e4      	lsls	r4, r4, #31
 80016ae:	4323      	orrs	r3, r4
 80016b0:	0030      	movs	r0, r6
 80016b2:	0019      	movs	r1, r3
 80016b4:	bd70      	pop	{r4, r5, r6, pc}
 80016b6:	380b      	subs	r0, #11
 80016b8:	4085      	lsls	r5, r0
 80016ba:	0553      	lsls	r3, r2, #21
 80016bc:	032d      	lsls	r5, r5, #12
 80016be:	2600      	movs	r6, #0
 80016c0:	0b2d      	lsrs	r5, r5, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	e7f0      	b.n	80016a8 <__aeabi_i2d+0x3c>
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	0000041e 	.word	0x0000041e

080016cc <__aeabi_f2d>:
 80016cc:	b570      	push	{r4, r5, r6, lr}
 80016ce:	0043      	lsls	r3, r0, #1
 80016d0:	0246      	lsls	r6, r0, #9
 80016d2:	0fc4      	lsrs	r4, r0, #31
 80016d4:	20fe      	movs	r0, #254	; 0xfe
 80016d6:	0e1b      	lsrs	r3, r3, #24
 80016d8:	1c59      	adds	r1, r3, #1
 80016da:	0a75      	lsrs	r5, r6, #9
 80016dc:	4208      	tst	r0, r1
 80016de:	d00c      	beq.n	80016fa <__aeabi_f2d+0x2e>
 80016e0:	22e0      	movs	r2, #224	; 0xe0
 80016e2:	0092      	lsls	r2, r2, #2
 80016e4:	4694      	mov	ip, r2
 80016e6:	076d      	lsls	r5, r5, #29
 80016e8:	0b36      	lsrs	r6, r6, #12
 80016ea:	4463      	add	r3, ip
 80016ec:	051b      	lsls	r3, r3, #20
 80016ee:	4333      	orrs	r3, r6
 80016f0:	07e4      	lsls	r4, r4, #31
 80016f2:	4323      	orrs	r3, r4
 80016f4:	0028      	movs	r0, r5
 80016f6:	0019      	movs	r1, r3
 80016f8:	bd70      	pop	{r4, r5, r6, pc}
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d114      	bne.n	8001728 <__aeabi_f2d+0x5c>
 80016fe:	2d00      	cmp	r5, #0
 8001700:	d01b      	beq.n	800173a <__aeabi_f2d+0x6e>
 8001702:	0028      	movs	r0, r5
 8001704:	f000 f8b2 	bl	800186c <__clzsi2>
 8001708:	280a      	cmp	r0, #10
 800170a:	dc1c      	bgt.n	8001746 <__aeabi_f2d+0x7a>
 800170c:	230b      	movs	r3, #11
 800170e:	002a      	movs	r2, r5
 8001710:	1a1b      	subs	r3, r3, r0
 8001712:	40da      	lsrs	r2, r3
 8001714:	0003      	movs	r3, r0
 8001716:	3315      	adds	r3, #21
 8001718:	409d      	lsls	r5, r3
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <__aeabi_f2d+0x88>)
 800171c:	0312      	lsls	r2, r2, #12
 800171e:	1a1b      	subs	r3, r3, r0
 8001720:	055b      	lsls	r3, r3, #21
 8001722:	0b16      	lsrs	r6, r2, #12
 8001724:	0d5b      	lsrs	r3, r3, #21
 8001726:	e7e1      	b.n	80016ec <__aeabi_f2d+0x20>
 8001728:	2d00      	cmp	r5, #0
 800172a:	d009      	beq.n	8001740 <__aeabi_f2d+0x74>
 800172c:	0b32      	lsrs	r2, r6, #12
 800172e:	2680      	movs	r6, #128	; 0x80
 8001730:	0336      	lsls	r6, r6, #12
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <__aeabi_f2d+0x8c>)
 8001734:	076d      	lsls	r5, r5, #29
 8001736:	4316      	orrs	r6, r2
 8001738:	e7d8      	b.n	80016ec <__aeabi_f2d+0x20>
 800173a:	2300      	movs	r3, #0
 800173c:	2600      	movs	r6, #0
 800173e:	e7d5      	b.n	80016ec <__aeabi_f2d+0x20>
 8001740:	2600      	movs	r6, #0
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <__aeabi_f2d+0x8c>)
 8001744:	e7d2      	b.n	80016ec <__aeabi_f2d+0x20>
 8001746:	0003      	movs	r3, r0
 8001748:	002a      	movs	r2, r5
 800174a:	3b0b      	subs	r3, #11
 800174c:	409a      	lsls	r2, r3
 800174e:	2500      	movs	r5, #0
 8001750:	e7e3      	b.n	800171a <__aeabi_f2d+0x4e>
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	00000389 	.word	0x00000389
 8001758:	000007ff 	.word	0x000007ff

0800175c <__aeabi_d2f>:
 800175c:	0002      	movs	r2, r0
 800175e:	004b      	lsls	r3, r1, #1
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001762:	0308      	lsls	r0, r1, #12
 8001764:	0d5b      	lsrs	r3, r3, #21
 8001766:	4e3d      	ldr	r6, [pc, #244]	; (800185c <__aeabi_d2f+0x100>)
 8001768:	0fcc      	lsrs	r4, r1, #31
 800176a:	0a40      	lsrs	r0, r0, #9
 800176c:	0f51      	lsrs	r1, r2, #29
 800176e:	1c5f      	adds	r7, r3, #1
 8001770:	4308      	orrs	r0, r1
 8001772:	00d5      	lsls	r5, r2, #3
 8001774:	4237      	tst	r7, r6
 8001776:	d00a      	beq.n	800178e <__aeabi_d2f+0x32>
 8001778:	4939      	ldr	r1, [pc, #228]	; (8001860 <__aeabi_d2f+0x104>)
 800177a:	185e      	adds	r6, r3, r1
 800177c:	2efe      	cmp	r6, #254	; 0xfe
 800177e:	dd16      	ble.n	80017ae <__aeabi_d2f+0x52>
 8001780:	23ff      	movs	r3, #255	; 0xff
 8001782:	2100      	movs	r1, #0
 8001784:	05db      	lsls	r3, r3, #23
 8001786:	430b      	orrs	r3, r1
 8001788:	07e0      	lsls	r0, r4, #31
 800178a:	4318      	orrs	r0, r3
 800178c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800178e:	2b00      	cmp	r3, #0
 8001790:	d106      	bne.n	80017a0 <__aeabi_d2f+0x44>
 8001792:	4328      	orrs	r0, r5
 8001794:	d027      	beq.n	80017e6 <__aeabi_d2f+0x8a>
 8001796:	2105      	movs	r1, #5
 8001798:	0189      	lsls	r1, r1, #6
 800179a:	0a49      	lsrs	r1, r1, #9
 800179c:	b2db      	uxtb	r3, r3
 800179e:	e7f1      	b.n	8001784 <__aeabi_d2f+0x28>
 80017a0:	4305      	orrs	r5, r0
 80017a2:	d0ed      	beq.n	8001780 <__aeabi_d2f+0x24>
 80017a4:	2180      	movs	r1, #128	; 0x80
 80017a6:	03c9      	lsls	r1, r1, #15
 80017a8:	23ff      	movs	r3, #255	; 0xff
 80017aa:	4301      	orrs	r1, r0
 80017ac:	e7ea      	b.n	8001784 <__aeabi_d2f+0x28>
 80017ae:	2e00      	cmp	r6, #0
 80017b0:	dd1c      	ble.n	80017ec <__aeabi_d2f+0x90>
 80017b2:	0192      	lsls	r2, r2, #6
 80017b4:	0011      	movs	r1, r2
 80017b6:	1e4a      	subs	r2, r1, #1
 80017b8:	4191      	sbcs	r1, r2
 80017ba:	00c0      	lsls	r0, r0, #3
 80017bc:	0f6d      	lsrs	r5, r5, #29
 80017be:	4301      	orrs	r1, r0
 80017c0:	4329      	orrs	r1, r5
 80017c2:	074b      	lsls	r3, r1, #29
 80017c4:	d048      	beq.n	8001858 <__aeabi_d2f+0xfc>
 80017c6:	230f      	movs	r3, #15
 80017c8:	400b      	ands	r3, r1
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d000      	beq.n	80017d0 <__aeabi_d2f+0x74>
 80017ce:	3104      	adds	r1, #4
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	04db      	lsls	r3, r3, #19
 80017d4:	400b      	ands	r3, r1
 80017d6:	d03f      	beq.n	8001858 <__aeabi_d2f+0xfc>
 80017d8:	1c72      	adds	r2, r6, #1
 80017da:	2efe      	cmp	r6, #254	; 0xfe
 80017dc:	d0d0      	beq.n	8001780 <__aeabi_d2f+0x24>
 80017de:	0189      	lsls	r1, r1, #6
 80017e0:	0a49      	lsrs	r1, r1, #9
 80017e2:	b2d3      	uxtb	r3, r2
 80017e4:	e7ce      	b.n	8001784 <__aeabi_d2f+0x28>
 80017e6:	2300      	movs	r3, #0
 80017e8:	2100      	movs	r1, #0
 80017ea:	e7cb      	b.n	8001784 <__aeabi_d2f+0x28>
 80017ec:	0032      	movs	r2, r6
 80017ee:	3217      	adds	r2, #23
 80017f0:	db22      	blt.n	8001838 <__aeabi_d2f+0xdc>
 80017f2:	2180      	movs	r1, #128	; 0x80
 80017f4:	221e      	movs	r2, #30
 80017f6:	0409      	lsls	r1, r1, #16
 80017f8:	4308      	orrs	r0, r1
 80017fa:	1b92      	subs	r2, r2, r6
 80017fc:	2a1f      	cmp	r2, #31
 80017fe:	dd1d      	ble.n	800183c <__aeabi_d2f+0xe0>
 8001800:	2102      	movs	r1, #2
 8001802:	4249      	negs	r1, r1
 8001804:	1b8e      	subs	r6, r1, r6
 8001806:	0001      	movs	r1, r0
 8001808:	40f1      	lsrs	r1, r6
 800180a:	000e      	movs	r6, r1
 800180c:	2a20      	cmp	r2, #32
 800180e:	d004      	beq.n	800181a <__aeabi_d2f+0xbe>
 8001810:	4a14      	ldr	r2, [pc, #80]	; (8001864 <__aeabi_d2f+0x108>)
 8001812:	4694      	mov	ip, r2
 8001814:	4463      	add	r3, ip
 8001816:	4098      	lsls	r0, r3
 8001818:	4305      	orrs	r5, r0
 800181a:	0029      	movs	r1, r5
 800181c:	1e4d      	subs	r5, r1, #1
 800181e:	41a9      	sbcs	r1, r5
 8001820:	4331      	orrs	r1, r6
 8001822:	2600      	movs	r6, #0
 8001824:	074b      	lsls	r3, r1, #29
 8001826:	d1ce      	bne.n	80017c6 <__aeabi_d2f+0x6a>
 8001828:	2080      	movs	r0, #128	; 0x80
 800182a:	000b      	movs	r3, r1
 800182c:	04c0      	lsls	r0, r0, #19
 800182e:	2201      	movs	r2, #1
 8001830:	4003      	ands	r3, r0
 8001832:	4201      	tst	r1, r0
 8001834:	d1d3      	bne.n	80017de <__aeabi_d2f+0x82>
 8001836:	e7af      	b.n	8001798 <__aeabi_d2f+0x3c>
 8001838:	2300      	movs	r3, #0
 800183a:	e7ac      	b.n	8001796 <__aeabi_d2f+0x3a>
 800183c:	490a      	ldr	r1, [pc, #40]	; (8001868 <__aeabi_d2f+0x10c>)
 800183e:	468c      	mov	ip, r1
 8001840:	0029      	movs	r1, r5
 8001842:	4463      	add	r3, ip
 8001844:	40d1      	lsrs	r1, r2
 8001846:	409d      	lsls	r5, r3
 8001848:	000a      	movs	r2, r1
 800184a:	0029      	movs	r1, r5
 800184c:	4098      	lsls	r0, r3
 800184e:	1e4d      	subs	r5, r1, #1
 8001850:	41a9      	sbcs	r1, r5
 8001852:	4301      	orrs	r1, r0
 8001854:	4311      	orrs	r1, r2
 8001856:	e7e4      	b.n	8001822 <__aeabi_d2f+0xc6>
 8001858:	0033      	movs	r3, r6
 800185a:	e79d      	b.n	8001798 <__aeabi_d2f+0x3c>
 800185c:	000007fe 	.word	0x000007fe
 8001860:	fffffc80 	.word	0xfffffc80
 8001864:	fffffca2 	.word	0xfffffca2
 8001868:	fffffc82 	.word	0xfffffc82

0800186c <__clzsi2>:
 800186c:	211c      	movs	r1, #28
 800186e:	2301      	movs	r3, #1
 8001870:	041b      	lsls	r3, r3, #16
 8001872:	4298      	cmp	r0, r3
 8001874:	d301      	bcc.n	800187a <__clzsi2+0xe>
 8001876:	0c00      	lsrs	r0, r0, #16
 8001878:	3910      	subs	r1, #16
 800187a:	0a1b      	lsrs	r3, r3, #8
 800187c:	4298      	cmp	r0, r3
 800187e:	d301      	bcc.n	8001884 <__clzsi2+0x18>
 8001880:	0a00      	lsrs	r0, r0, #8
 8001882:	3908      	subs	r1, #8
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	4298      	cmp	r0, r3
 8001888:	d301      	bcc.n	800188e <__clzsi2+0x22>
 800188a:	0900      	lsrs	r0, r0, #4
 800188c:	3904      	subs	r1, #4
 800188e:	a202      	add	r2, pc, #8	; (adr r2, 8001898 <__clzsi2+0x2c>)
 8001890:	5c10      	ldrb	r0, [r2, r0]
 8001892:	1840      	adds	r0, r0, r1
 8001894:	4770      	bx	lr
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	02020304 	.word	0x02020304
 800189c:	01010101 	.word	0x01010101
	...

080018a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ac:	f000 fafc 	bl	8001ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018b0:	f000 f8d0 	bl	8001a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018b4:	f000 f996 	bl	8001be4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018b8:	f000 f934 	bl	8001b24 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80018bc:	f000 f962 	bl	8001b84 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  v_dc = VDC_CONSTANT * 4000;
 80018c0:	4b4d      	ldr	r3, [pc, #308]	; (80019f8 <main+0x150>)
 80018c2:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <main+0x154>)
 80018c4:	601a      	str	r2, [r3, #0]
	  	psi  = (PSI_CONSTANT * v_dc) - PSI_CONSTANT_A;
 80018c6:	4b4c      	ldr	r3, [pc, #304]	; (80019f8 <main+0x150>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	1c18      	adds	r0, r3, #0
 80018cc:	f7ff fefe 	bl	80016cc <__aeabi_f2d>
 80018d0:	4a4b      	ldr	r2, [pc, #300]	; (8001a00 <main+0x158>)
 80018d2:	4b4c      	ldr	r3, [pc, #304]	; (8001a04 <main+0x15c>)
 80018d4:	f7ff f896 	bl	8000a04 <__aeabi_dmul>
 80018d8:	0002      	movs	r2, r0
 80018da:	000b      	movs	r3, r1
 80018dc:	0010      	movs	r0, r2
 80018de:	0019      	movs	r1, r3
 80018e0:	4a49      	ldr	r2, [pc, #292]	; (8001a08 <main+0x160>)
 80018e2:	4b4a      	ldr	r3, [pc, #296]	; (8001a0c <main+0x164>)
 80018e4:	f7ff fafa 	bl	8000edc <__aeabi_dsub>
 80018e8:	0002      	movs	r2, r0
 80018ea:	000b      	movs	r3, r1
 80018ec:	0010      	movs	r0, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	f7ff ff34 	bl	800175c <__aeabi_d2f>
 80018f4:	1c02      	adds	r2, r0, #0
 80018f6:	4b46      	ldr	r3, [pc, #280]	; (8001a10 <main+0x168>)
 80018f8:	601a      	str	r2, [r3, #0]
	  	relation_temp = sqrt(530/(32 + 460));
 80018fa:	4b46      	ldr	r3, [pc, #280]	; (8001a14 <main+0x16c>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]
	  	set_point_initial =  (KRYPTON_GAS_CONSTANT *  relation_temp  * psi * PSI_CONSTANT_B * PSI_CONSTANT_C) ;
 8001900:	4b44      	ldr	r3, [pc, #272]	; (8001a14 <main+0x16c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	0018      	movs	r0, r3
 8001906:	f7ff feb1 	bl	800166c <__aeabi_i2d>
 800190a:	4a43      	ldr	r2, [pc, #268]	; (8001a18 <main+0x170>)
 800190c:	4b43      	ldr	r3, [pc, #268]	; (8001a1c <main+0x174>)
 800190e:	f7ff f879 	bl	8000a04 <__aeabi_dmul>
 8001912:	0002      	movs	r2, r0
 8001914:	000b      	movs	r3, r1
 8001916:	0014      	movs	r4, r2
 8001918:	001d      	movs	r5, r3
 800191a:	4b3d      	ldr	r3, [pc, #244]	; (8001a10 <main+0x168>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	1c18      	adds	r0, r3, #0
 8001920:	f7ff fed4 	bl	80016cc <__aeabi_f2d>
 8001924:	0002      	movs	r2, r0
 8001926:	000b      	movs	r3, r1
 8001928:	0020      	movs	r0, r4
 800192a:	0029      	movs	r1, r5
 800192c:	f7ff f86a 	bl	8000a04 <__aeabi_dmul>
 8001930:	0002      	movs	r2, r0
 8001932:	000b      	movs	r3, r1
 8001934:	0010      	movs	r0, r2
 8001936:	0019      	movs	r1, r3
 8001938:	4a39      	ldr	r2, [pc, #228]	; (8001a20 <main+0x178>)
 800193a:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <main+0x17c>)
 800193c:	f7ff f862 	bl	8000a04 <__aeabi_dmul>
 8001940:	0002      	movs	r2, r0
 8001942:	000b      	movs	r3, r1
 8001944:	0010      	movs	r0, r2
 8001946:	0019      	movs	r1, r3
 8001948:	2200      	movs	r2, #0
 800194a:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <main+0x180>)
 800194c:	f7ff f85a 	bl	8000a04 <__aeabi_dmul>
 8001950:	0002      	movs	r2, r0
 8001952:	000b      	movs	r3, r1
 8001954:	0010      	movs	r0, r2
 8001956:	0019      	movs	r1, r3
 8001958:	f7ff ff00 	bl	800175c <__aeabi_d2f>
 800195c:	1c02      	adds	r2, r0, #0
 800195e:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <main+0x184>)
 8001960:	601a      	str	r2, [r3, #0]
	  	set_point = set_point_initial / ( L_OHM * PSI_CONSTANT_D );
 8001962:	4b32      	ldr	r3, [pc, #200]	; (8001a2c <main+0x184>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4932      	ldr	r1, [pc, #200]	; (8001a30 <main+0x188>)
 8001968:	1c18      	adds	r0, r3, #0
 800196a:	f7fe fc57 	bl	800021c <__aeabi_fdiv>
 800196e:	1c03      	adds	r3, r0, #0
 8001970:	1c18      	adds	r0, r3, #0
 8001972:	f7ff feab 	bl	80016cc <__aeabi_f2d>
 8001976:	0002      	movs	r2, r0
 8001978:	000b      	movs	r3, r1
 800197a:	492e      	ldr	r1, [pc, #184]	; (8001a34 <main+0x18c>)
 800197c:	600a      	str	r2, [r1, #0]
 800197e:	604b      	str	r3, [r1, #4]
	  	set_point_pfcv = (set_point * 64000) / 100;
 8001980:	4b2c      	ldr	r3, [pc, #176]	; (8001a34 <main+0x18c>)
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	6859      	ldr	r1, [r3, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <main+0x190>)
 800198a:	f7ff f83b 	bl	8000a04 <__aeabi_dmul>
 800198e:	0002      	movs	r2, r0
 8001990:	000b      	movs	r3, r1
 8001992:	0010      	movs	r0, r2
 8001994:	0019      	movs	r1, r3
 8001996:	2200      	movs	r2, #0
 8001998:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <main+0x194>)
 800199a:	f7fe fd4b 	bl	8000434 <__aeabi_ddiv>
 800199e:	0002      	movs	r2, r0
 80019a0:	000b      	movs	r3, r1
 80019a2:	0010      	movs	r0, r2
 80019a4:	0019      	movs	r1, r3
 80019a6:	f7ff fe2b 	bl	8001600 <__aeabi_d2iz>
 80019aa:	0002      	movs	r2, r0
 80019ac:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <main+0x198>)
 80019ae:	601a      	str	r2, [r3, #0]
	  	itoa(set_point_pfcv, pfcv_set_point, 10);
 80019b0:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <main+0x198>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4923      	ldr	r1, [pc, #140]	; (8001a44 <main+0x19c>)
 80019b6:	220a      	movs	r2, #10
 80019b8:	0018      	movs	r0, r3
 80019ba:	f002 f8f5 	bl	8003ba8 <itoa>
	  	set_point_[1] = pfcv_set_point[0];
 80019be:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <main+0x19c>)
 80019c0:	781a      	ldrb	r2, [r3, #0]
 80019c2:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <main+0x1a0>)
 80019c4:	705a      	strb	r2, [r3, #1]
	  	set_point_[2] = pfcv_set_point[1];
 80019c6:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <main+0x19c>)
 80019c8:	785a      	ldrb	r2, [r3, #1]
 80019ca:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <main+0x1a0>)
 80019cc:	709a      	strb	r2, [r3, #2]
	  	set_point_[3] = pfcv_set_point[2];
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <main+0x19c>)
 80019d0:	789a      	ldrb	r2, [r3, #2]
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <main+0x1a0>)
 80019d4:	70da      	strb	r2, [r3, #3]
	  	set_point_[4] = pfcv_set_point[3];
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <main+0x19c>)
 80019d8:	78da      	ldrb	r2, [r3, #3]
 80019da:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <main+0x1a0>)
 80019dc:	711a      	strb	r2, [r3, #4]
	  	HAL_UART_Transmit(&huart3, set_point_, 6, 100);
 80019de:	491a      	ldr	r1, [pc, #104]	; (8001a48 <main+0x1a0>)
 80019e0:	481a      	ldr	r0, [pc, #104]	; (8001a4c <main+0x1a4>)
 80019e2:	2364      	movs	r3, #100	; 0x64
 80019e4:	2206      	movs	r2, #6
 80019e6:	f001 fb61 	bl	80030ac <HAL_UART_Transmit>
	  	 setpoint[3] = newsetpoint[2];
	  	 setpoint[4] = newsetpoint[3];
	  	 setpoint[5] = newsetpoint[4];
	  	 HAL_UART_Transmit(&huart3, setpoint, 7, 100);
	  	 HAL_Delay(5000);*/
	  HAL_UART_Receive(&huart3, rx, 49, 100);
 80019ea:	4919      	ldr	r1, [pc, #100]	; (8001a50 <main+0x1a8>)
 80019ec:	4817      	ldr	r0, [pc, #92]	; (8001a4c <main+0x1a4>)
 80019ee:	2364      	movs	r3, #100	; 0x64
 80019f0:	2231      	movs	r2, #49	; 0x31
 80019f2:	f001 fc05 	bl	8003200 <HAL_UART_Receive>
	  v_dc = VDC_CONSTANT * 4000;
 80019f6:	e763      	b.n	80018c0 <main+0x18>
 80019f8:	200001a4 	.word	0x200001a4
 80019fc:	4099999a 	.word	0x4099999a
 8001a00:	b645a1cb 	.word	0xb645a1cb
 8001a04:	4033fdf3 	.word	0x4033fdf3
 8001a08:	c5d63886 	.word	0xc5d63886
 8001a0c:	3fc0346d 	.word	0x3fc0346d
 8001a10:	20000038 	.word	0x20000038
 8001a14:	200001b4 	.word	0x200001b4
 8001a18:	f5c28f5c 	.word	0xf5c28f5c
 8001a1c:	3fe35c28 	.word	0x3fe35c28
 8001a20:	cccccccd 	.word	0xcccccccd
 8001a24:	3ff4cccc 	.word	0x3ff4cccc
 8001a28:	412e8480 	.word	0x412e8480
 8001a2c:	200001b0 	.word	0x200001b0
 8001a30:	4b2037a0 	.word	0x4b2037a0
 8001a34:	20000108 	.word	0x20000108
 8001a38:	40ef4000 	.word	0x40ef4000
 8001a3c:	40590000 	.word	0x40590000
 8001a40:	2000011c 	.word	0x2000011c
 8001a44:	20000110 	.word	0x20000110
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	20000040 	.word	0x20000040
 8001a50:	200000d0 	.word	0x200000d0

08001a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b099      	sub	sp, #100	; 0x64
 8001a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5a:	242c      	movs	r4, #44	; 0x2c
 8001a5c:	193b      	adds	r3, r7, r4
 8001a5e:	0018      	movs	r0, r3
 8001a60:	2334      	movs	r3, #52	; 0x34
 8001a62:	001a      	movs	r2, r3
 8001a64:	2100      	movs	r1, #0
 8001a66:	f002 f8a3 	bl	8003bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a6a:	231c      	movs	r3, #28
 8001a6c:	18fb      	adds	r3, r7, r3
 8001a6e:	0018      	movs	r0, r3
 8001a70:	2310      	movs	r3, #16
 8001a72:	001a      	movs	r2, r3
 8001a74:	2100      	movs	r1, #0
 8001a76:	f002 f89b 	bl	8003bb0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a7a:	003b      	movs	r3, r7
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	231c      	movs	r3, #28
 8001a80:	001a      	movs	r2, r3
 8001a82:	2100      	movs	r1, #0
 8001a84:	f002 f894 	bl	8003bb0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a88:	0021      	movs	r1, r4
 8001a8a:	187b      	adds	r3, r7, r1
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a90:	187b      	adds	r3, r7, r1
 8001a92:	2201      	movs	r2, #1
 8001a94:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a96:	187b      	adds	r3, r7, r1
 8001a98:	2210      	movs	r2, #16
 8001a9a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aa2:	187b      	adds	r3, r7, r1
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	0212      	lsls	r2, r2, #8
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001aaa:	187b      	adds	r3, r7, r1
 8001aac:	22a0      	movs	r2, #160	; 0xa0
 8001aae:	0392      	lsls	r2, r2, #14
 8001ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8001ab2:	187b      	adds	r3, r7, r1
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab8:	187b      	adds	r3, r7, r1
 8001aba:	0018      	movs	r0, r3
 8001abc:	f000 fca2 	bl	8002404 <HAL_RCC_OscConfig>
 8001ac0:	1e03      	subs	r3, r0, #0
 8001ac2:	d001      	beq.n	8001ac8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001ac4:	f000 f8f8 	bl	8001cb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac8:	211c      	movs	r1, #28
 8001aca:	187b      	adds	r3, r7, r1
 8001acc:	2207      	movs	r2, #7
 8001ace:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad0:	187b      	adds	r3, r7, r1
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad6:	187b      	adds	r3, r7, r1
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001adc:	187b      	adds	r3, r7, r1
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ae2:	187b      	adds	r3, r7, r1
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f001 f812 	bl	8002b10 <HAL_RCC_ClockConfig>
 8001aec:	1e03      	subs	r3, r0, #0
 8001aee:	d001      	beq.n	8001af4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001af0:	f000 f8e2 	bl	8001cb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2;
 8001af4:	003b      	movs	r3, r7
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <SystemClock_Config+0xcc>)
 8001af8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001afa:	003b      	movs	r3, r7
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b00:	003b      	movs	r3, r7
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b06:	003b      	movs	r3, r7
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f001 f97b 	bl	8002e04 <HAL_RCCEx_PeriphCLKConfig>
 8001b0e:	1e03      	subs	r3, r0, #0
 8001b10:	d001      	beq.n	8001b16 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b12:	f000 f8d1 	bl	8001cb8 <Error_Handler>
  }
}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b019      	add	sp, #100	; 0x64
 8001b1c:	bd90      	pop	{r4, r7, pc}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	00040002 	.word	0x00040002

08001b24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b2a:	4a15      	ldr	r2, [pc, #84]	; (8001b80 <MX_USART2_UART_Init+0x5c>)
 8001b2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b30:	22e1      	movs	r2, #225	; 0xe1
 8001b32:	0252      	lsls	r2, r2, #9
 8001b34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f001 fa4b 	bl	8003004 <HAL_UART_Init>
 8001b6e:	1e03      	subs	r3, r0, #0
 8001b70:	d001      	beq.n	8001b76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b72:	f000 f8a1 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000120 	.word	0x20000120
 8001b80:	40004400 	.word	0x40004400

08001b84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001b8a:	4a15      	ldr	r2, [pc, #84]	; (8001be0 <MX_USART3_UART_Init+0x5c>)
 8001b8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b8e:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001b90:	22e1      	movs	r2, #225	; 0xe1
 8001b92:	0252      	lsls	r2, r2, #9
 8001b94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001baa:	220c      	movs	r2, #12
 8001bac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f001 fa1b 	bl	8003004 <HAL_UART_Init>
 8001bce:	1e03      	subs	r3, r0, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001bd2:	f000 f871 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000040 	.word	0x20000040
 8001be0:	40004800 	.word	0x40004800

08001be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001be4:	b590      	push	{r4, r7, lr}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bea:	240c      	movs	r4, #12
 8001bec:	193b      	adds	r3, r7, r4
 8001bee:	0018      	movs	r0, r3
 8001bf0:	2314      	movs	r3, #20
 8001bf2:	001a      	movs	r2, r3
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	f001 ffdb 	bl	8003bb0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfa:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <MX_GPIO_Init+0xcc>)
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	4b2c      	ldr	r3, [pc, #176]	; (8001cb0 <MX_GPIO_Init+0xcc>)
 8001c00:	2180      	movs	r1, #128	; 0x80
 8001c02:	0309      	lsls	r1, r1, #12
 8001c04:	430a      	orrs	r2, r1
 8001c06:	615a      	str	r2, [r3, #20]
 8001c08:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <MX_GPIO_Init+0xcc>)
 8001c0a:	695a      	ldr	r2, [r3, #20]
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	031b      	lsls	r3, r3, #12
 8001c10:	4013      	ands	r3, r2
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c16:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <MX_GPIO_Init+0xcc>)
 8001c18:	695a      	ldr	r2, [r3, #20]
 8001c1a:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <MX_GPIO_Init+0xcc>)
 8001c1c:	2180      	movs	r1, #128	; 0x80
 8001c1e:	03c9      	lsls	r1, r1, #15
 8001c20:	430a      	orrs	r2, r1
 8001c22:	615a      	str	r2, [r3, #20]
 8001c24:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <MX_GPIO_Init+0xcc>)
 8001c26:	695a      	ldr	r2, [r3, #20]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	03db      	lsls	r3, r3, #15
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c32:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <MX_GPIO_Init+0xcc>)
 8001c34:	695a      	ldr	r2, [r3, #20]
 8001c36:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <MX_GPIO_Init+0xcc>)
 8001c38:	2180      	movs	r1, #128	; 0x80
 8001c3a:	0289      	lsls	r1, r1, #10
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	615a      	str	r2, [r3, #20]
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <MX_GPIO_Init+0xcc>)
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	029b      	lsls	r3, r3, #10
 8001c48:	4013      	ands	r3, r2
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c4e:	2390      	movs	r3, #144	; 0x90
 8001c50:	05db      	lsls	r3, r3, #23
 8001c52:	2200      	movs	r2, #0
 8001c54:	2120      	movs	r1, #32
 8001c56:	0018      	movs	r0, r3
 8001c58:	f000 fbb6 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c5c:	193b      	adds	r3, r7, r4
 8001c5e:	2280      	movs	r2, #128	; 0x80
 8001c60:	0192      	lsls	r2, r2, #6
 8001c62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c64:	193b      	adds	r3, r7, r4
 8001c66:	2284      	movs	r2, #132	; 0x84
 8001c68:	0392      	lsls	r2, r2, #14
 8001c6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	193b      	adds	r3, r7, r4
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c72:	193b      	adds	r3, r7, r4
 8001c74:	4a0f      	ldr	r2, [pc, #60]	; (8001cb4 <MX_GPIO_Init+0xd0>)
 8001c76:	0019      	movs	r1, r3
 8001c78:	0010      	movs	r0, r2
 8001c7a:	f000 fa2d 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c7e:	0021      	movs	r1, r4
 8001c80:	187b      	adds	r3, r7, r1
 8001c82:	2220      	movs	r2, #32
 8001c84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	2201      	movs	r2, #1
 8001c8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	187b      	adds	r3, r7, r1
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	187b      	adds	r3, r7, r1
 8001c94:	2200      	movs	r2, #0
 8001c96:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c98:	187a      	adds	r2, r7, r1
 8001c9a:	2390      	movs	r3, #144	; 0x90
 8001c9c:	05db      	lsls	r3, r3, #23
 8001c9e:	0011      	movs	r1, r2
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f000 fa19 	bl	80020d8 <HAL_GPIO_Init>

}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b009      	add	sp, #36	; 0x24
 8001cac:	bd90      	pop	{r4, r7, pc}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	48000800 	.word	0x48000800

08001cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cbc:	b672      	cpsid	i
}
 8001cbe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <Error_Handler+0x8>
	...

08001cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <HAL_MspInit+0x44>)
 8001ccc:	699a      	ldr	r2, [r3, #24]
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <HAL_MspInit+0x44>)
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	619a      	str	r2, [r3, #24]
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <HAL_MspInit+0x44>)
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4013      	ands	r3, r2
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_MspInit+0x44>)
 8001ce4:	69da      	ldr	r2, [r3, #28]
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_MspInit+0x44>)
 8001ce8:	2180      	movs	r1, #128	; 0x80
 8001cea:	0549      	lsls	r1, r1, #21
 8001cec:	430a      	orrs	r2, r1
 8001cee:	61da      	str	r2, [r3, #28]
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_MspInit+0x44>)
 8001cf2:	69da      	ldr	r2, [r3, #28]
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	055b      	lsls	r3, r3, #21
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b002      	add	sp, #8
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	40021000 	.word	0x40021000

08001d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b08d      	sub	sp, #52	; 0x34
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	241c      	movs	r4, #28
 8001d16:	193b      	adds	r3, r7, r4
 8001d18:	0018      	movs	r0, r3
 8001d1a:	2314      	movs	r3, #20
 8001d1c:	001a      	movs	r2, r3
 8001d1e:	2100      	movs	r1, #0
 8001d20:	f001 ff46 	bl	8003bb0 <memset>
  if(huart->Instance==USART2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a38      	ldr	r2, [pc, #224]	; (8001e0c <HAL_UART_MspInit+0x100>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d133      	bne.n	8001d96 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d2e:	4b38      	ldr	r3, [pc, #224]	; (8001e10 <HAL_UART_MspInit+0x104>)
 8001d30:	69da      	ldr	r2, [r3, #28]
 8001d32:	4b37      	ldr	r3, [pc, #220]	; (8001e10 <HAL_UART_MspInit+0x104>)
 8001d34:	2180      	movs	r1, #128	; 0x80
 8001d36:	0289      	lsls	r1, r1, #10
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	61da      	str	r2, [r3, #28]
 8001d3c:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <HAL_UART_MspInit+0x104>)
 8001d3e:	69da      	ldr	r2, [r3, #28]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	029b      	lsls	r3, r3, #10
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
 8001d48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <HAL_UART_MspInit+0x104>)
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <HAL_UART_MspInit+0x104>)
 8001d50:	2180      	movs	r1, #128	; 0x80
 8001d52:	0289      	lsls	r1, r1, #10
 8001d54:	430a      	orrs	r2, r1
 8001d56:	615a      	str	r2, [r3, #20]
 8001d58:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <HAL_UART_MspInit+0x104>)
 8001d5a:	695a      	ldr	r2, [r3, #20]
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	029b      	lsls	r3, r3, #10
 8001d60:	4013      	ands	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d66:	0021      	movs	r1, r4
 8001d68:	187b      	adds	r3, r7, r1
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	187b      	adds	r3, r7, r1
 8001d70:	2202      	movs	r2, #2
 8001d72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	187b      	adds	r3, r7, r1
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	187b      	adds	r3, r7, r1
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	2201      	movs	r2, #1
 8001d84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	187a      	adds	r2, r7, r1
 8001d88:	2390      	movs	r3, #144	; 0x90
 8001d8a:	05db      	lsls	r3, r3, #23
 8001d8c:	0011      	movs	r1, r2
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f000 f9a2 	bl	80020d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d94:	e036      	b.n	8001e04 <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART3)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a1e      	ldr	r2, [pc, #120]	; (8001e14 <HAL_UART_MspInit+0x108>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d131      	bne.n	8001e04 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001da0:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <HAL_UART_MspInit+0x104>)
 8001da2:	69da      	ldr	r2, [r3, #28]
 8001da4:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <HAL_UART_MspInit+0x104>)
 8001da6:	2180      	movs	r1, #128	; 0x80
 8001da8:	02c9      	lsls	r1, r1, #11
 8001daa:	430a      	orrs	r2, r1
 8001dac:	61da      	str	r2, [r3, #28]
 8001dae:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <HAL_UART_MspInit+0x104>)
 8001db0:	69da      	ldr	r2, [r3, #28]
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	02db      	lsls	r3, r3, #11
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <HAL_UART_MspInit+0x104>)
 8001dbe:	695a      	ldr	r2, [r3, #20]
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <HAL_UART_MspInit+0x104>)
 8001dc2:	2180      	movs	r1, #128	; 0x80
 8001dc4:	0309      	lsls	r1, r1, #12
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	615a      	str	r2, [r3, #20]
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_UART_MspInit+0x104>)
 8001dcc:	695a      	ldr	r2, [r3, #20]
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	031b      	lsls	r3, r3, #12
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001dd8:	211c      	movs	r1, #28
 8001dda:	187b      	adds	r3, r7, r1
 8001ddc:	2230      	movs	r2, #48	; 0x30
 8001dde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	187b      	adds	r3, r7, r1
 8001de2:	2202      	movs	r2, #2
 8001de4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	187b      	adds	r3, r7, r1
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dec:	187b      	adds	r3, r7, r1
 8001dee:	2203      	movs	r2, #3
 8001df0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8001df2:	187b      	adds	r3, r7, r1
 8001df4:	2201      	movs	r2, #1
 8001df6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df8:	187b      	adds	r3, r7, r1
 8001dfa:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <HAL_UART_MspInit+0x10c>)
 8001dfc:	0019      	movs	r1, r3
 8001dfe:	0010      	movs	r0, r2
 8001e00:	f000 f96a 	bl	80020d8 <HAL_GPIO_Init>
}
 8001e04:	46c0      	nop			; (mov r8, r8)
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b00d      	add	sp, #52	; 0x34
 8001e0a:	bd90      	pop	{r4, r7, pc}
 8001e0c:	40004400 	.word	0x40004400
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40004800 	.word	0x40004800
 8001e18:	48000800 	.word	0x48000800

08001e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <NMI_Handler+0x4>

08001e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e26:	e7fe      	b.n	8001e26 <HardFault_Handler+0x4>

08001e28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e2c:	46c0      	nop			; (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e40:	f000 f87a 	bl	8001f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e44:	46c0      	nop			; (mov r8, r8)
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e54:	480d      	ldr	r0, [pc, #52]	; (8001e8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e56:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e58:	480d      	ldr	r0, [pc, #52]	; (8001e90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e5a:	490e      	ldr	r1, [pc, #56]	; (8001e94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e5c:	4a0e      	ldr	r2, [pc, #56]	; (8001e98 <LoopForever+0xe>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e60:	e002      	b.n	8001e68 <LoopCopyDataInit>

08001e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e66:	3304      	adds	r3, #4

08001e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e6c:	d3f9      	bcc.n	8001e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e70:	4c0b      	ldr	r4, [pc, #44]	; (8001ea0 <LoopForever+0x16>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e74:	e001      	b.n	8001e7a <LoopFillZerobss>

08001e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e78:	3204      	adds	r2, #4

08001e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e7c:	d3fb      	bcc.n	8001e76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001e7e:	f7ff ffe4 	bl	8001e4a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001e82:	f001 fe55 	bl	8003b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e86:	f7ff fd0f 	bl	80018a8 <main>

08001e8a <LoopForever>:

LoopForever:
    b LoopForever
 8001e8a:	e7fe      	b.n	8001e8a <LoopForever>
  ldr   r0, =_estack
 8001e8c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e94:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001e98:	08003dc0 	.word	0x08003dc0
  ldr r2, =_sbss
 8001e9c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001ea0:	200001bc 	.word	0x200001bc

08001ea4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ea4:	e7fe      	b.n	8001ea4 <ADC1_COMP_IRQHandler>
	...

08001ea8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eac:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <HAL_Init+0x24>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_Init+0x24>)
 8001eb2:	2110      	movs	r1, #16
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f000 f809 	bl	8001ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ebe:	f7ff ff01 	bl	8001cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	40022000 	.word	0x40022000

08001ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <HAL_InitTick+0x5c>)
 8001eda:	681c      	ldr	r4, [r3, #0]
 8001edc:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_InitTick+0x60>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	23fa      	movs	r3, #250	; 0xfa
 8001ee4:	0098      	lsls	r0, r3, #2
 8001ee6:	f7fe f90d 	bl	8000104 <__udivsi3>
 8001eea:	0003      	movs	r3, r0
 8001eec:	0019      	movs	r1, r3
 8001eee:	0020      	movs	r0, r4
 8001ef0:	f7fe f908 	bl	8000104 <__udivsi3>
 8001ef4:	0003      	movs	r3, r0
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f000 f8e1 	bl	80020be <HAL_SYSTICK_Config>
 8001efc:	1e03      	subs	r3, r0, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e00f      	b.n	8001f24 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d80b      	bhi.n	8001f22 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	425b      	negs	r3, r3
 8001f10:	2200      	movs	r2, #0
 8001f12:	0018      	movs	r0, r3
 8001f14:	f000 f8be 	bl	8002094 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_InitTick+0x64>)
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e000      	b.n	8001f24 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
}
 8001f24:	0018      	movs	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b003      	add	sp, #12
 8001f2a:	bd90      	pop	{r4, r7, pc}
 8001f2c:	20000008 	.word	0x20000008
 8001f30:	20000010 	.word	0x20000010
 8001f34:	2000000c 	.word	0x2000000c

08001f38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <HAL_IncTick+0x1c>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	001a      	movs	r2, r3
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_IncTick+0x20>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	18d2      	adds	r2, r2, r3
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <HAL_IncTick+0x20>)
 8001f4a:	601a      	str	r2, [r3, #0]
}
 8001f4c:	46c0      	nop			; (mov r8, r8)
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	20000010 	.word	0x20000010
 8001f58:	200001b8 	.word	0x200001b8

08001f5c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f60:	4b02      	ldr	r3, [pc, #8]	; (8001f6c <HAL_GetTick+0x10>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	0018      	movs	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	200001b8 	.word	0x200001b8

08001f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	0002      	movs	r2, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f7e:	1dfb      	adds	r3, r7, #7
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b7f      	cmp	r3, #127	; 0x7f
 8001f84:	d828      	bhi.n	8001fd8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f86:	4a2f      	ldr	r2, [pc, #188]	; (8002044 <__NVIC_SetPriority+0xd4>)
 8001f88:	1dfb      	adds	r3, r7, #7
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	b25b      	sxtb	r3, r3
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	33c0      	adds	r3, #192	; 0xc0
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	589b      	ldr	r3, [r3, r2]
 8001f96:	1dfa      	adds	r2, r7, #7
 8001f98:	7812      	ldrb	r2, [r2, #0]
 8001f9a:	0011      	movs	r1, r2
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	00d2      	lsls	r2, r2, #3
 8001fa2:	21ff      	movs	r1, #255	; 0xff
 8001fa4:	4091      	lsls	r1, r2
 8001fa6:	000a      	movs	r2, r1
 8001fa8:	43d2      	mvns	r2, r2
 8001faa:	401a      	ands	r2, r3
 8001fac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	019b      	lsls	r3, r3, #6
 8001fb2:	22ff      	movs	r2, #255	; 0xff
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	1dfb      	adds	r3, r7, #7
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	0018      	movs	r0, r3
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	4003      	ands	r3, r0
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fc4:	481f      	ldr	r0, [pc, #124]	; (8002044 <__NVIC_SetPriority+0xd4>)
 8001fc6:	1dfb      	adds	r3, r7, #7
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	b25b      	sxtb	r3, r3
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	33c0      	adds	r3, #192	; 0xc0
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fd6:	e031      	b.n	800203c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fd8:	4a1b      	ldr	r2, [pc, #108]	; (8002048 <__NVIC_SetPriority+0xd8>)
 8001fda:	1dfb      	adds	r3, r7, #7
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	0019      	movs	r1, r3
 8001fe0:	230f      	movs	r3, #15
 8001fe2:	400b      	ands	r3, r1
 8001fe4:	3b08      	subs	r3, #8
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	3306      	adds	r3, #6
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	18d3      	adds	r3, r2, r3
 8001fee:	3304      	adds	r3, #4
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	1dfa      	adds	r2, r7, #7
 8001ff4:	7812      	ldrb	r2, [r2, #0]
 8001ff6:	0011      	movs	r1, r2
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	400a      	ands	r2, r1
 8001ffc:	00d2      	lsls	r2, r2, #3
 8001ffe:	21ff      	movs	r1, #255	; 0xff
 8002000:	4091      	lsls	r1, r2
 8002002:	000a      	movs	r2, r1
 8002004:	43d2      	mvns	r2, r2
 8002006:	401a      	ands	r2, r3
 8002008:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	019b      	lsls	r3, r3, #6
 800200e:	22ff      	movs	r2, #255	; 0xff
 8002010:	401a      	ands	r2, r3
 8002012:	1dfb      	adds	r3, r7, #7
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	0018      	movs	r0, r3
 8002018:	2303      	movs	r3, #3
 800201a:	4003      	ands	r3, r0
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002020:	4809      	ldr	r0, [pc, #36]	; (8002048 <__NVIC_SetPriority+0xd8>)
 8002022:	1dfb      	adds	r3, r7, #7
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	001c      	movs	r4, r3
 8002028:	230f      	movs	r3, #15
 800202a:	4023      	ands	r3, r4
 800202c:	3b08      	subs	r3, #8
 800202e:	089b      	lsrs	r3, r3, #2
 8002030:	430a      	orrs	r2, r1
 8002032:	3306      	adds	r3, #6
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	18c3      	adds	r3, r0, r3
 8002038:	3304      	adds	r3, #4
 800203a:	601a      	str	r2, [r3, #0]
}
 800203c:	46c0      	nop			; (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	b003      	add	sp, #12
 8002042:	bd90      	pop	{r4, r7, pc}
 8002044:	e000e100 	.word	0xe000e100
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	1e5a      	subs	r2, r3, #1
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	045b      	lsls	r3, r3, #17
 800205c:	429a      	cmp	r2, r3
 800205e:	d301      	bcc.n	8002064 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002060:	2301      	movs	r3, #1
 8002062:	e010      	b.n	8002086 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <SysTick_Config+0x44>)
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	3a01      	subs	r2, #1
 800206a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206c:	2301      	movs	r3, #1
 800206e:	425b      	negs	r3, r3
 8002070:	2103      	movs	r1, #3
 8002072:	0018      	movs	r0, r3
 8002074:	f7ff ff7c 	bl	8001f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <SysTick_Config+0x44>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207e:	4b04      	ldr	r3, [pc, #16]	; (8002090 <SysTick_Config+0x44>)
 8002080:	2207      	movs	r2, #7
 8002082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002084:	2300      	movs	r3, #0
}
 8002086:	0018      	movs	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	b002      	add	sp, #8
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	e000e010 	.word	0xe000e010

08002094 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	210f      	movs	r1, #15
 80020a0:	187b      	adds	r3, r7, r1
 80020a2:	1c02      	adds	r2, r0, #0
 80020a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	187b      	adds	r3, r7, r1
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b25b      	sxtb	r3, r3
 80020ae:	0011      	movs	r1, r2
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff ff5d 	bl	8001f70 <__NVIC_SetPriority>
}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b004      	add	sp, #16
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7ff ffbf 	bl	800204c <SysTick_Config>
 80020ce:	0003      	movs	r3, r0
}
 80020d0:	0018      	movs	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b002      	add	sp, #8
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e6:	e155      	b.n	8002394 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2101      	movs	r1, #1
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4091      	lsls	r1, r2
 80020f2:	000a      	movs	r2, r1
 80020f4:	4013      	ands	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d100      	bne.n	8002100 <HAL_GPIO_Init+0x28>
 80020fe:	e146      	b.n	800238e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2203      	movs	r2, #3
 8002106:	4013      	ands	r3, r2
 8002108:	2b01      	cmp	r3, #1
 800210a:	d005      	beq.n	8002118 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2203      	movs	r2, #3
 8002112:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002114:	2b02      	cmp	r3, #2
 8002116:	d130      	bne.n	800217a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	409a      	lsls	r2, r3
 8002126:	0013      	movs	r3, r2
 8002128:	43da      	mvns	r2, r3
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	409a      	lsls	r2, r3
 800213a:	0013      	movs	r3, r2
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800214e:	2201      	movs	r2, #1
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	409a      	lsls	r2, r3
 8002154:	0013      	movs	r3, r2
 8002156:	43da      	mvns	r2, r3
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	091b      	lsrs	r3, r3, #4
 8002164:	2201      	movs	r2, #1
 8002166:	401a      	ands	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	409a      	lsls	r2, r3
 800216c:	0013      	movs	r3, r2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2203      	movs	r2, #3
 8002180:	4013      	ands	r3, r2
 8002182:	2b03      	cmp	r3, #3
 8002184:	d017      	beq.n	80021b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	2203      	movs	r2, #3
 8002192:	409a      	lsls	r2, r3
 8002194:	0013      	movs	r3, r2
 8002196:	43da      	mvns	r2, r3
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4013      	ands	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	409a      	lsls	r2, r3
 80021a8:	0013      	movs	r3, r2
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2203      	movs	r2, #3
 80021bc:	4013      	ands	r3, r2
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d123      	bne.n	800220a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	08da      	lsrs	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3208      	adds	r2, #8
 80021ca:	0092      	lsls	r2, r2, #2
 80021cc:	58d3      	ldr	r3, [r2, r3]
 80021ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2207      	movs	r2, #7
 80021d4:	4013      	ands	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	220f      	movs	r2, #15
 80021da:	409a      	lsls	r2, r3
 80021dc:	0013      	movs	r3, r2
 80021de:	43da      	mvns	r2, r3
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4013      	ands	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2107      	movs	r1, #7
 80021ee:	400b      	ands	r3, r1
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	409a      	lsls	r2, r3
 80021f4:	0013      	movs	r3, r2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	08da      	lsrs	r2, r3, #3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3208      	adds	r2, #8
 8002204:	0092      	lsls	r2, r2, #2
 8002206:	6939      	ldr	r1, [r7, #16]
 8002208:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	2203      	movs	r2, #3
 8002216:	409a      	lsls	r2, r3
 8002218:	0013      	movs	r3, r2
 800221a:	43da      	mvns	r2, r3
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4013      	ands	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2203      	movs	r2, #3
 8002228:	401a      	ands	r2, r3
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	409a      	lsls	r2, r3
 8002230:	0013      	movs	r3, r2
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	23c0      	movs	r3, #192	; 0xc0
 8002244:	029b      	lsls	r3, r3, #10
 8002246:	4013      	ands	r3, r2
 8002248:	d100      	bne.n	800224c <HAL_GPIO_Init+0x174>
 800224a:	e0a0      	b.n	800238e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224c:	4b57      	ldr	r3, [pc, #348]	; (80023ac <HAL_GPIO_Init+0x2d4>)
 800224e:	699a      	ldr	r2, [r3, #24]
 8002250:	4b56      	ldr	r3, [pc, #344]	; (80023ac <HAL_GPIO_Init+0x2d4>)
 8002252:	2101      	movs	r1, #1
 8002254:	430a      	orrs	r2, r1
 8002256:	619a      	str	r2, [r3, #24]
 8002258:	4b54      	ldr	r3, [pc, #336]	; (80023ac <HAL_GPIO_Init+0x2d4>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	2201      	movs	r2, #1
 800225e:	4013      	ands	r3, r2
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002264:	4a52      	ldr	r2, [pc, #328]	; (80023b0 <HAL_GPIO_Init+0x2d8>)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	3302      	adds	r3, #2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	589b      	ldr	r3, [r3, r2]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2203      	movs	r2, #3
 8002276:	4013      	ands	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	220f      	movs	r2, #15
 800227c:	409a      	lsls	r2, r3
 800227e:	0013      	movs	r3, r2
 8002280:	43da      	mvns	r2, r3
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	2390      	movs	r3, #144	; 0x90
 800228c:	05db      	lsls	r3, r3, #23
 800228e:	429a      	cmp	r2, r3
 8002290:	d019      	beq.n	80022c6 <HAL_GPIO_Init+0x1ee>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a47      	ldr	r2, [pc, #284]	; (80023b4 <HAL_GPIO_Init+0x2dc>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d013      	beq.n	80022c2 <HAL_GPIO_Init+0x1ea>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a46      	ldr	r2, [pc, #280]	; (80023b8 <HAL_GPIO_Init+0x2e0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00d      	beq.n	80022be <HAL_GPIO_Init+0x1e6>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a45      	ldr	r2, [pc, #276]	; (80023bc <HAL_GPIO_Init+0x2e4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d007      	beq.n	80022ba <HAL_GPIO_Init+0x1e2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a44      	ldr	r2, [pc, #272]	; (80023c0 <HAL_GPIO_Init+0x2e8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d101      	bne.n	80022b6 <HAL_GPIO_Init+0x1de>
 80022b2:	2304      	movs	r3, #4
 80022b4:	e008      	b.n	80022c8 <HAL_GPIO_Init+0x1f0>
 80022b6:	2305      	movs	r3, #5
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x1f0>
 80022ba:	2303      	movs	r3, #3
 80022bc:	e004      	b.n	80022c8 <HAL_GPIO_Init+0x1f0>
 80022be:	2302      	movs	r3, #2
 80022c0:	e002      	b.n	80022c8 <HAL_GPIO_Init+0x1f0>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <HAL_GPIO_Init+0x1f0>
 80022c6:	2300      	movs	r3, #0
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	2103      	movs	r1, #3
 80022cc:	400a      	ands	r2, r1
 80022ce:	0092      	lsls	r2, r2, #2
 80022d0:	4093      	lsls	r3, r2
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022d8:	4935      	ldr	r1, [pc, #212]	; (80023b0 <HAL_GPIO_Init+0x2d8>)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	3302      	adds	r3, #2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e6:	4b37      	ldr	r3, [pc, #220]	; (80023c4 <HAL_GPIO_Init+0x2ec>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	43da      	mvns	r2, r3
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	025b      	lsls	r3, r3, #9
 80022fe:	4013      	ands	r3, r2
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800230a:	4b2e      	ldr	r3, [pc, #184]	; (80023c4 <HAL_GPIO_Init+0x2ec>)
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002310:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <HAL_GPIO_Init+0x2ec>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	43da      	mvns	r2, r3
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	029b      	lsls	r3, r3, #10
 8002328:	4013      	ands	r3, r2
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002334:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <HAL_GPIO_Init+0x2ec>)
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800233a:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <HAL_GPIO_Init+0x2ec>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	43da      	mvns	r2, r3
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	035b      	lsls	r3, r3, #13
 8002352:	4013      	ands	r3, r2
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800235e:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <HAL_GPIO_Init+0x2ec>)
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002364:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <HAL_GPIO_Init+0x2ec>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	43da      	mvns	r2, r3
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	039b      	lsls	r3, r3, #14
 800237c:	4013      	ands	r3, r2
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002388:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <HAL_GPIO_Init+0x2ec>)
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	3301      	adds	r3, #1
 8002392:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	40da      	lsrs	r2, r3
 800239c:	1e13      	subs	r3, r2, #0
 800239e:	d000      	beq.n	80023a2 <HAL_GPIO_Init+0x2ca>
 80023a0:	e6a2      	b.n	80020e8 <HAL_GPIO_Init+0x10>
  } 
}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b006      	add	sp, #24
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40010000 	.word	0x40010000
 80023b4:	48000400 	.word	0x48000400
 80023b8:	48000800 	.word	0x48000800
 80023bc:	48000c00 	.word	0x48000c00
 80023c0:	48001000 	.word	0x48001000
 80023c4:	40010400 	.word	0x40010400

080023c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	0008      	movs	r0, r1
 80023d2:	0011      	movs	r1, r2
 80023d4:	1cbb      	adds	r3, r7, #2
 80023d6:	1c02      	adds	r2, r0, #0
 80023d8:	801a      	strh	r2, [r3, #0]
 80023da:	1c7b      	adds	r3, r7, #1
 80023dc:	1c0a      	adds	r2, r1, #0
 80023de:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023e0:	1c7b      	adds	r3, r7, #1
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d004      	beq.n	80023f2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023e8:	1cbb      	adds	r3, r7, #2
 80023ea:	881a      	ldrh	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023f0:	e003      	b.n	80023fa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023f2:	1cbb      	adds	r3, r7, #2
 80023f4:	881a      	ldrh	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b002      	add	sp, #8
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d102      	bne.n	8002418 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	f000 fb76 	bl	8002b04 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2201      	movs	r2, #1
 800241e:	4013      	ands	r3, r2
 8002420:	d100      	bne.n	8002424 <HAL_RCC_OscConfig+0x20>
 8002422:	e08e      	b.n	8002542 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002424:	4bc5      	ldr	r3, [pc, #788]	; (800273c <HAL_RCC_OscConfig+0x338>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	220c      	movs	r2, #12
 800242a:	4013      	ands	r3, r2
 800242c:	2b04      	cmp	r3, #4
 800242e:	d00e      	beq.n	800244e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002430:	4bc2      	ldr	r3, [pc, #776]	; (800273c <HAL_RCC_OscConfig+0x338>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	220c      	movs	r2, #12
 8002436:	4013      	ands	r3, r2
 8002438:	2b08      	cmp	r3, #8
 800243a:	d117      	bne.n	800246c <HAL_RCC_OscConfig+0x68>
 800243c:	4bbf      	ldr	r3, [pc, #764]	; (800273c <HAL_RCC_OscConfig+0x338>)
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	23c0      	movs	r3, #192	; 0xc0
 8002442:	025b      	lsls	r3, r3, #9
 8002444:	401a      	ands	r2, r3
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	025b      	lsls	r3, r3, #9
 800244a:	429a      	cmp	r2, r3
 800244c:	d10e      	bne.n	800246c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244e:	4bbb      	ldr	r3, [pc, #748]	; (800273c <HAL_RCC_OscConfig+0x338>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	029b      	lsls	r3, r3, #10
 8002456:	4013      	ands	r3, r2
 8002458:	d100      	bne.n	800245c <HAL_RCC_OscConfig+0x58>
 800245a:	e071      	b.n	8002540 <HAL_RCC_OscConfig+0x13c>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d000      	beq.n	8002466 <HAL_RCC_OscConfig+0x62>
 8002464:	e06c      	b.n	8002540 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	f000 fb4c 	bl	8002b04 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d107      	bne.n	8002484 <HAL_RCC_OscConfig+0x80>
 8002474:	4bb1      	ldr	r3, [pc, #708]	; (800273c <HAL_RCC_OscConfig+0x338>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4bb0      	ldr	r3, [pc, #704]	; (800273c <HAL_RCC_OscConfig+0x338>)
 800247a:	2180      	movs	r1, #128	; 0x80
 800247c:	0249      	lsls	r1, r1, #9
 800247e:	430a      	orrs	r2, r1
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	e02f      	b.n	80024e4 <HAL_RCC_OscConfig+0xe0>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10c      	bne.n	80024a6 <HAL_RCC_OscConfig+0xa2>
 800248c:	4bab      	ldr	r3, [pc, #684]	; (800273c <HAL_RCC_OscConfig+0x338>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4baa      	ldr	r3, [pc, #680]	; (800273c <HAL_RCC_OscConfig+0x338>)
 8002492:	49ab      	ldr	r1, [pc, #684]	; (8002740 <HAL_RCC_OscConfig+0x33c>)
 8002494:	400a      	ands	r2, r1
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	4ba8      	ldr	r3, [pc, #672]	; (800273c <HAL_RCC_OscConfig+0x338>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4ba7      	ldr	r3, [pc, #668]	; (800273c <HAL_RCC_OscConfig+0x338>)
 800249e:	49a9      	ldr	r1, [pc, #676]	; (8002744 <HAL_RCC_OscConfig+0x340>)
 80024a0:	400a      	ands	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e01e      	b.n	80024e4 <HAL_RCC_OscConfig+0xe0>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b05      	cmp	r3, #5
 80024ac:	d10e      	bne.n	80024cc <HAL_RCC_OscConfig+0xc8>
 80024ae:	4ba3      	ldr	r3, [pc, #652]	; (800273c <HAL_RCC_OscConfig+0x338>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	4ba2      	ldr	r3, [pc, #648]	; (800273c <HAL_RCC_OscConfig+0x338>)
 80024b4:	2180      	movs	r1, #128	; 0x80
 80024b6:	02c9      	lsls	r1, r1, #11
 80024b8:	430a      	orrs	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	4b9f      	ldr	r3, [pc, #636]	; (800273c <HAL_RCC_OscConfig+0x338>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b9e      	ldr	r3, [pc, #632]	; (800273c <HAL_RCC_OscConfig+0x338>)
 80024c2:	2180      	movs	r1, #128	; 0x80
 80024c4:	0249      	lsls	r1, r1, #9
 80024c6:	430a      	orrs	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	e00b      	b.n	80024e4 <HAL_RCC_OscConfig+0xe0>
 80024cc:	4b9b      	ldr	r3, [pc, #620]	; (800273c <HAL_RCC_OscConfig+0x338>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b9a      	ldr	r3, [pc, #616]	; (800273c <HAL_RCC_OscConfig+0x338>)
 80024d2:	499b      	ldr	r1, [pc, #620]	; (8002740 <HAL_RCC_OscConfig+0x33c>)
 80024d4:	400a      	ands	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	4b98      	ldr	r3, [pc, #608]	; (800273c <HAL_RCC_OscConfig+0x338>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b97      	ldr	r3, [pc, #604]	; (800273c <HAL_RCC_OscConfig+0x338>)
 80024de:	4999      	ldr	r1, [pc, #612]	; (8002744 <HAL_RCC_OscConfig+0x340>)
 80024e0:	400a      	ands	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d014      	beq.n	8002516 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7ff fd36 	bl	8001f5c <HAL_GetTick>
 80024f0:	0003      	movs	r3, r0
 80024f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f6:	f7ff fd31 	bl	8001f5c <HAL_GetTick>
 80024fa:	0002      	movs	r2, r0
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b64      	cmp	r3, #100	; 0x64
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e2fd      	b.n	8002b04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002508:	4b8c      	ldr	r3, [pc, #560]	; (800273c <HAL_RCC_OscConfig+0x338>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	029b      	lsls	r3, r3, #10
 8002510:	4013      	ands	r3, r2
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0xf2>
 8002514:	e015      	b.n	8002542 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7ff fd21 	bl	8001f5c <HAL_GetTick>
 800251a:	0003      	movs	r3, r0
 800251c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002520:	f7ff fd1c 	bl	8001f5c <HAL_GetTick>
 8002524:	0002      	movs	r2, r0
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e2e8      	b.n	8002b04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002532:	4b82      	ldr	r3, [pc, #520]	; (800273c <HAL_RCC_OscConfig+0x338>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	029b      	lsls	r3, r3, #10
 800253a:	4013      	ands	r3, r2
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x11c>
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002540:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2202      	movs	r2, #2
 8002548:	4013      	ands	r3, r2
 800254a:	d100      	bne.n	800254e <HAL_RCC_OscConfig+0x14a>
 800254c:	e06c      	b.n	8002628 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800254e:	4b7b      	ldr	r3, [pc, #492]	; (800273c <HAL_RCC_OscConfig+0x338>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	220c      	movs	r2, #12
 8002554:	4013      	ands	r3, r2
 8002556:	d00e      	beq.n	8002576 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002558:	4b78      	ldr	r3, [pc, #480]	; (800273c <HAL_RCC_OscConfig+0x338>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	220c      	movs	r2, #12
 800255e:	4013      	ands	r3, r2
 8002560:	2b08      	cmp	r3, #8
 8002562:	d11f      	bne.n	80025a4 <HAL_RCC_OscConfig+0x1a0>
 8002564:	4b75      	ldr	r3, [pc, #468]	; (800273c <HAL_RCC_OscConfig+0x338>)
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	23c0      	movs	r3, #192	; 0xc0
 800256a:	025b      	lsls	r3, r3, #9
 800256c:	401a      	ands	r2, r3
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	021b      	lsls	r3, r3, #8
 8002572:	429a      	cmp	r2, r3
 8002574:	d116      	bne.n	80025a4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002576:	4b71      	ldr	r3, [pc, #452]	; (800273c <HAL_RCC_OscConfig+0x338>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2202      	movs	r2, #2
 800257c:	4013      	ands	r3, r2
 800257e:	d005      	beq.n	800258c <HAL_RCC_OscConfig+0x188>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d001      	beq.n	800258c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e2bb      	b.n	8002b04 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258c:	4b6b      	ldr	r3, [pc, #428]	; (800273c <HAL_RCC_OscConfig+0x338>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	22f8      	movs	r2, #248	; 0xf8
 8002592:	4393      	bics	r3, r2
 8002594:	0019      	movs	r1, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	00da      	lsls	r2, r3, #3
 800259c:	4b67      	ldr	r3, [pc, #412]	; (800273c <HAL_RCC_OscConfig+0x338>)
 800259e:	430a      	orrs	r2, r1
 80025a0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a2:	e041      	b.n	8002628 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d024      	beq.n	80025f6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ac:	4b63      	ldr	r3, [pc, #396]	; (800273c <HAL_RCC_OscConfig+0x338>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b62      	ldr	r3, [pc, #392]	; (800273c <HAL_RCC_OscConfig+0x338>)
 80025b2:	2101      	movs	r1, #1
 80025b4:	430a      	orrs	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7ff fcd0 	bl	8001f5c <HAL_GetTick>
 80025bc:	0003      	movs	r3, r0
 80025be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025c2:	f7ff fccb 	bl	8001f5c <HAL_GetTick>
 80025c6:	0002      	movs	r2, r0
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e297      	b.n	8002b04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d4:	4b59      	ldr	r3, [pc, #356]	; (800273c <HAL_RCC_OscConfig+0x338>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2202      	movs	r2, #2
 80025da:	4013      	ands	r3, r2
 80025dc:	d0f1      	beq.n	80025c2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025de:	4b57      	ldr	r3, [pc, #348]	; (800273c <HAL_RCC_OscConfig+0x338>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	22f8      	movs	r2, #248	; 0xf8
 80025e4:	4393      	bics	r3, r2
 80025e6:	0019      	movs	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	00da      	lsls	r2, r3, #3
 80025ee:	4b53      	ldr	r3, [pc, #332]	; (800273c <HAL_RCC_OscConfig+0x338>)
 80025f0:	430a      	orrs	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	e018      	b.n	8002628 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f6:	4b51      	ldr	r3, [pc, #324]	; (800273c <HAL_RCC_OscConfig+0x338>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	4b50      	ldr	r3, [pc, #320]	; (800273c <HAL_RCC_OscConfig+0x338>)
 80025fc:	2101      	movs	r1, #1
 80025fe:	438a      	bics	r2, r1
 8002600:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002602:	f7ff fcab 	bl	8001f5c <HAL_GetTick>
 8002606:	0003      	movs	r3, r0
 8002608:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800260c:	f7ff fca6 	bl	8001f5c <HAL_GetTick>
 8002610:	0002      	movs	r2, r0
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e272      	b.n	8002b04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261e:	4b47      	ldr	r3, [pc, #284]	; (800273c <HAL_RCC_OscConfig+0x338>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2202      	movs	r2, #2
 8002624:	4013      	ands	r3, r2
 8002626:	d1f1      	bne.n	800260c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2208      	movs	r2, #8
 800262e:	4013      	ands	r3, r2
 8002630:	d036      	beq.n	80026a0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d019      	beq.n	800266e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263a:	4b40      	ldr	r3, [pc, #256]	; (800273c <HAL_RCC_OscConfig+0x338>)
 800263c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800263e:	4b3f      	ldr	r3, [pc, #252]	; (800273c <HAL_RCC_OscConfig+0x338>)
 8002640:	2101      	movs	r1, #1
 8002642:	430a      	orrs	r2, r1
 8002644:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002646:	f7ff fc89 	bl	8001f5c <HAL_GetTick>
 800264a:	0003      	movs	r3, r0
 800264c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002650:	f7ff fc84 	bl	8001f5c <HAL_GetTick>
 8002654:	0002      	movs	r2, r0
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e250      	b.n	8002b04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002662:	4b36      	ldr	r3, [pc, #216]	; (800273c <HAL_RCC_OscConfig+0x338>)
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	2202      	movs	r2, #2
 8002668:	4013      	ands	r3, r2
 800266a:	d0f1      	beq.n	8002650 <HAL_RCC_OscConfig+0x24c>
 800266c:	e018      	b.n	80026a0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800266e:	4b33      	ldr	r3, [pc, #204]	; (800273c <HAL_RCC_OscConfig+0x338>)
 8002670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002672:	4b32      	ldr	r3, [pc, #200]	; (800273c <HAL_RCC_OscConfig+0x338>)
 8002674:	2101      	movs	r1, #1
 8002676:	438a      	bics	r2, r1
 8002678:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267a:	f7ff fc6f 	bl	8001f5c <HAL_GetTick>
 800267e:	0003      	movs	r3, r0
 8002680:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002684:	f7ff fc6a 	bl	8001f5c <HAL_GetTick>
 8002688:	0002      	movs	r2, r0
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e236      	b.n	8002b04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002696:	4b29      	ldr	r3, [pc, #164]	; (800273c <HAL_RCC_OscConfig+0x338>)
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	2202      	movs	r2, #2
 800269c:	4013      	ands	r3, r2
 800269e:	d1f1      	bne.n	8002684 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2204      	movs	r2, #4
 80026a6:	4013      	ands	r3, r2
 80026a8:	d100      	bne.n	80026ac <HAL_RCC_OscConfig+0x2a8>
 80026aa:	e0b5      	b.n	8002818 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ac:	201f      	movs	r0, #31
 80026ae:	183b      	adds	r3, r7, r0
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b4:	4b21      	ldr	r3, [pc, #132]	; (800273c <HAL_RCC_OscConfig+0x338>)
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	055b      	lsls	r3, r3, #21
 80026bc:	4013      	ands	r3, r2
 80026be:	d110      	bne.n	80026e2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c0:	4b1e      	ldr	r3, [pc, #120]	; (800273c <HAL_RCC_OscConfig+0x338>)
 80026c2:	69da      	ldr	r2, [r3, #28]
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_RCC_OscConfig+0x338>)
 80026c6:	2180      	movs	r1, #128	; 0x80
 80026c8:	0549      	lsls	r1, r1, #21
 80026ca:	430a      	orrs	r2, r1
 80026cc:	61da      	str	r2, [r3, #28]
 80026ce:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_RCC_OscConfig+0x338>)
 80026d0:	69da      	ldr	r2, [r3, #28]
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	055b      	lsls	r3, r3, #21
 80026d6:	4013      	ands	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026dc:	183b      	adds	r3, r7, r0
 80026de:	2201      	movs	r2, #1
 80026e0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e2:	4b19      	ldr	r3, [pc, #100]	; (8002748 <HAL_RCC_OscConfig+0x344>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4013      	ands	r3, r2
 80026ec:	d11a      	bne.n	8002724 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ee:	4b16      	ldr	r3, [pc, #88]	; (8002748 <HAL_RCC_OscConfig+0x344>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_RCC_OscConfig+0x344>)
 80026f4:	2180      	movs	r1, #128	; 0x80
 80026f6:	0049      	lsls	r1, r1, #1
 80026f8:	430a      	orrs	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026fc:	f7ff fc2e 	bl	8001f5c <HAL_GetTick>
 8002700:	0003      	movs	r3, r0
 8002702:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002706:	f7ff fc29 	bl	8001f5c <HAL_GetTick>
 800270a:	0002      	movs	r2, r0
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b64      	cmp	r3, #100	; 0x64
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e1f5      	b.n	8002b04 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_RCC_OscConfig+0x344>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4013      	ands	r3, r2
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d10f      	bne.n	800274c <HAL_RCC_OscConfig+0x348>
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <HAL_RCC_OscConfig+0x338>)
 800272e:	6a1a      	ldr	r2, [r3, #32]
 8002730:	4b02      	ldr	r3, [pc, #8]	; (800273c <HAL_RCC_OscConfig+0x338>)
 8002732:	2101      	movs	r1, #1
 8002734:	430a      	orrs	r2, r1
 8002736:	621a      	str	r2, [r3, #32]
 8002738:	e036      	b.n	80027a8 <HAL_RCC_OscConfig+0x3a4>
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	40021000 	.word	0x40021000
 8002740:	fffeffff 	.word	0xfffeffff
 8002744:	fffbffff 	.word	0xfffbffff
 8002748:	40007000 	.word	0x40007000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10c      	bne.n	800276e <HAL_RCC_OscConfig+0x36a>
 8002754:	4bca      	ldr	r3, [pc, #808]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002756:	6a1a      	ldr	r2, [r3, #32]
 8002758:	4bc9      	ldr	r3, [pc, #804]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 800275a:	2101      	movs	r1, #1
 800275c:	438a      	bics	r2, r1
 800275e:	621a      	str	r2, [r3, #32]
 8002760:	4bc7      	ldr	r3, [pc, #796]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002762:	6a1a      	ldr	r2, [r3, #32]
 8002764:	4bc6      	ldr	r3, [pc, #792]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002766:	2104      	movs	r1, #4
 8002768:	438a      	bics	r2, r1
 800276a:	621a      	str	r2, [r3, #32]
 800276c:	e01c      	b.n	80027a8 <HAL_RCC_OscConfig+0x3a4>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b05      	cmp	r3, #5
 8002774:	d10c      	bne.n	8002790 <HAL_RCC_OscConfig+0x38c>
 8002776:	4bc2      	ldr	r3, [pc, #776]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002778:	6a1a      	ldr	r2, [r3, #32]
 800277a:	4bc1      	ldr	r3, [pc, #772]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 800277c:	2104      	movs	r1, #4
 800277e:	430a      	orrs	r2, r1
 8002780:	621a      	str	r2, [r3, #32]
 8002782:	4bbf      	ldr	r3, [pc, #764]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002784:	6a1a      	ldr	r2, [r3, #32]
 8002786:	4bbe      	ldr	r3, [pc, #760]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002788:	2101      	movs	r1, #1
 800278a:	430a      	orrs	r2, r1
 800278c:	621a      	str	r2, [r3, #32]
 800278e:	e00b      	b.n	80027a8 <HAL_RCC_OscConfig+0x3a4>
 8002790:	4bbb      	ldr	r3, [pc, #748]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002792:	6a1a      	ldr	r2, [r3, #32]
 8002794:	4bba      	ldr	r3, [pc, #744]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002796:	2101      	movs	r1, #1
 8002798:	438a      	bics	r2, r1
 800279a:	621a      	str	r2, [r3, #32]
 800279c:	4bb8      	ldr	r3, [pc, #736]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 800279e:	6a1a      	ldr	r2, [r3, #32]
 80027a0:	4bb7      	ldr	r3, [pc, #732]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 80027a2:	2104      	movs	r1, #4
 80027a4:	438a      	bics	r2, r1
 80027a6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d014      	beq.n	80027da <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b0:	f7ff fbd4 	bl	8001f5c <HAL_GetTick>
 80027b4:	0003      	movs	r3, r0
 80027b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b8:	e009      	b.n	80027ce <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ba:	f7ff fbcf 	bl	8001f5c <HAL_GetTick>
 80027be:	0002      	movs	r2, r0
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	4aaf      	ldr	r2, [pc, #700]	; (8002a84 <HAL_RCC_OscConfig+0x680>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e19a      	b.n	8002b04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ce:	4bac      	ldr	r3, [pc, #688]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	2202      	movs	r2, #2
 80027d4:	4013      	ands	r3, r2
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x3b6>
 80027d8:	e013      	b.n	8002802 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027da:	f7ff fbbf 	bl	8001f5c <HAL_GetTick>
 80027de:	0003      	movs	r3, r0
 80027e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e2:	e009      	b.n	80027f8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e4:	f7ff fbba 	bl	8001f5c <HAL_GetTick>
 80027e8:	0002      	movs	r2, r0
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	4aa5      	ldr	r2, [pc, #660]	; (8002a84 <HAL_RCC_OscConfig+0x680>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e185      	b.n	8002b04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f8:	4ba1      	ldr	r3, [pc, #644]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	2202      	movs	r2, #2
 80027fe:	4013      	ands	r3, r2
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002802:	231f      	movs	r3, #31
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d105      	bne.n	8002818 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280c:	4b9c      	ldr	r3, [pc, #624]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 800280e:	69da      	ldr	r2, [r3, #28]
 8002810:	4b9b      	ldr	r3, [pc, #620]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002812:	499d      	ldr	r1, [pc, #628]	; (8002a88 <HAL_RCC_OscConfig+0x684>)
 8002814:	400a      	ands	r2, r1
 8002816:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2210      	movs	r2, #16
 800281e:	4013      	ands	r3, r2
 8002820:	d063      	beq.n	80028ea <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d12a      	bne.n	8002880 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800282a:	4b95      	ldr	r3, [pc, #596]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 800282c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800282e:	4b94      	ldr	r3, [pc, #592]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002830:	2104      	movs	r1, #4
 8002832:	430a      	orrs	r2, r1
 8002834:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002836:	4b92      	ldr	r3, [pc, #584]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800283a:	4b91      	ldr	r3, [pc, #580]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 800283c:	2101      	movs	r1, #1
 800283e:	430a      	orrs	r2, r1
 8002840:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002842:	f7ff fb8b 	bl	8001f5c <HAL_GetTick>
 8002846:	0003      	movs	r3, r0
 8002848:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800284c:	f7ff fb86 	bl	8001f5c <HAL_GetTick>
 8002850:	0002      	movs	r2, r0
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e152      	b.n	8002b04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800285e:	4b88      	ldr	r3, [pc, #544]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002862:	2202      	movs	r2, #2
 8002864:	4013      	ands	r3, r2
 8002866:	d0f1      	beq.n	800284c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002868:	4b85      	ldr	r3, [pc, #532]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 800286a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286c:	22f8      	movs	r2, #248	; 0xf8
 800286e:	4393      	bics	r3, r2
 8002870:	0019      	movs	r1, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	00da      	lsls	r2, r3, #3
 8002878:	4b81      	ldr	r3, [pc, #516]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 800287a:	430a      	orrs	r2, r1
 800287c:	635a      	str	r2, [r3, #52]	; 0x34
 800287e:	e034      	b.n	80028ea <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	3305      	adds	r3, #5
 8002886:	d111      	bne.n	80028ac <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002888:	4b7d      	ldr	r3, [pc, #500]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 800288a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800288c:	4b7c      	ldr	r3, [pc, #496]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 800288e:	2104      	movs	r1, #4
 8002890:	438a      	bics	r2, r1
 8002892:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002894:	4b7a      	ldr	r3, [pc, #488]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002898:	22f8      	movs	r2, #248	; 0xf8
 800289a:	4393      	bics	r3, r2
 800289c:	0019      	movs	r1, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	00da      	lsls	r2, r3, #3
 80028a4:	4b76      	ldr	r3, [pc, #472]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 80028a6:	430a      	orrs	r2, r1
 80028a8:	635a      	str	r2, [r3, #52]	; 0x34
 80028aa:	e01e      	b.n	80028ea <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80028ac:	4b74      	ldr	r3, [pc, #464]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 80028ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028b0:	4b73      	ldr	r3, [pc, #460]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 80028b2:	2104      	movs	r1, #4
 80028b4:	430a      	orrs	r2, r1
 80028b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80028b8:	4b71      	ldr	r3, [pc, #452]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 80028ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028bc:	4b70      	ldr	r3, [pc, #448]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 80028be:	2101      	movs	r1, #1
 80028c0:	438a      	bics	r2, r1
 80028c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c4:	f7ff fb4a 	bl	8001f5c <HAL_GetTick>
 80028c8:	0003      	movs	r3, r0
 80028ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80028ce:	f7ff fb45 	bl	8001f5c <HAL_GetTick>
 80028d2:	0002      	movs	r2, r0
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e111      	b.n	8002b04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80028e0:	4b67      	ldr	r3, [pc, #412]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 80028e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e4:	2202      	movs	r2, #2
 80028e6:	4013      	ands	r3, r2
 80028e8:	d1f1      	bne.n	80028ce <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2220      	movs	r2, #32
 80028f0:	4013      	ands	r3, r2
 80028f2:	d05c      	beq.n	80029ae <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80028f4:	4b62      	ldr	r3, [pc, #392]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	220c      	movs	r2, #12
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b0c      	cmp	r3, #12
 80028fe:	d00e      	beq.n	800291e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002900:	4b5f      	ldr	r3, [pc, #380]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	220c      	movs	r2, #12
 8002906:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002908:	2b08      	cmp	r3, #8
 800290a:	d114      	bne.n	8002936 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800290c:	4b5c      	ldr	r3, [pc, #368]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	23c0      	movs	r3, #192	; 0xc0
 8002912:	025b      	lsls	r3, r3, #9
 8002914:	401a      	ands	r2, r3
 8002916:	23c0      	movs	r3, #192	; 0xc0
 8002918:	025b      	lsls	r3, r3, #9
 800291a:	429a      	cmp	r2, r3
 800291c:	d10b      	bne.n	8002936 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800291e:	4b58      	ldr	r3, [pc, #352]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	025b      	lsls	r3, r3, #9
 8002926:	4013      	ands	r3, r2
 8002928:	d040      	beq.n	80029ac <HAL_RCC_OscConfig+0x5a8>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d03c      	beq.n	80029ac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e0e6      	b.n	8002b04 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d01b      	beq.n	8002976 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800293e:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002942:	4b4f      	ldr	r3, [pc, #316]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002944:	2180      	movs	r1, #128	; 0x80
 8002946:	0249      	lsls	r1, r1, #9
 8002948:	430a      	orrs	r2, r1
 800294a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7ff fb06 	bl	8001f5c <HAL_GetTick>
 8002950:	0003      	movs	r3, r0
 8002952:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002956:	f7ff fb01 	bl	8001f5c <HAL_GetTick>
 800295a:	0002      	movs	r2, r0
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e0cd      	b.n	8002b04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002968:	4b45      	ldr	r3, [pc, #276]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 800296a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	025b      	lsls	r3, r3, #9
 8002970:	4013      	ands	r3, r2
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x552>
 8002974:	e01b      	b.n	80029ae <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002976:	4b42      	ldr	r3, [pc, #264]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800297a:	4b41      	ldr	r3, [pc, #260]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 800297c:	4943      	ldr	r1, [pc, #268]	; (8002a8c <HAL_RCC_OscConfig+0x688>)
 800297e:	400a      	ands	r2, r1
 8002980:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7ff faeb 	bl	8001f5c <HAL_GetTick>
 8002986:	0003      	movs	r3, r0
 8002988:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800298c:	f7ff fae6 	bl	8001f5c <HAL_GetTick>
 8002990:	0002      	movs	r2, r0
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e0b2      	b.n	8002b04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800299e:	4b38      	ldr	r3, [pc, #224]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 80029a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	025b      	lsls	r3, r3, #9
 80029a6:	4013      	ands	r3, r2
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x588>
 80029aa:	e000      	b.n	80029ae <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80029ac:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d100      	bne.n	80029b8 <HAL_RCC_OscConfig+0x5b4>
 80029b6:	e0a4      	b.n	8002b02 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b8:	4b31      	ldr	r3, [pc, #196]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	220c      	movs	r2, #12
 80029be:	4013      	ands	r3, r2
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d100      	bne.n	80029c6 <HAL_RCC_OscConfig+0x5c2>
 80029c4:	e078      	b.n	8002ab8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d14c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4b2c      	ldr	r3, [pc, #176]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	4b2b      	ldr	r3, [pc, #172]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 80029d4:	492e      	ldr	r1, [pc, #184]	; (8002a90 <HAL_RCC_OscConfig+0x68c>)
 80029d6:	400a      	ands	r2, r1
 80029d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029da:	f7ff fabf 	bl	8001f5c <HAL_GetTick>
 80029de:	0003      	movs	r3, r0
 80029e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e4:	f7ff faba 	bl	8001f5c <HAL_GetTick>
 80029e8:	0002      	movs	r2, r0
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e086      	b.n	8002b04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f6:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	049b      	lsls	r3, r3, #18
 80029fe:	4013      	ands	r3, r2
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a02:	4b1f      	ldr	r3, [pc, #124]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a06:	220f      	movs	r2, #15
 8002a08:	4393      	bics	r3, r2
 8002a0a:	0019      	movs	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a10:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002a12:	430a      	orrs	r2, r1
 8002a14:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a16:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	4a1e      	ldr	r2, [pc, #120]	; (8002a94 <HAL_RCC_OscConfig+0x690>)
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	0019      	movs	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a30:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002a36:	2180      	movs	r1, #128	; 0x80
 8002a38:	0449      	lsls	r1, r1, #17
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3e:	f7ff fa8d 	bl	8001f5c <HAL_GetTick>
 8002a42:	0003      	movs	r3, r0
 8002a44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a48:	f7ff fa88 	bl	8001f5c <HAL_GetTick>
 8002a4c:	0002      	movs	r2, r0
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e054      	b.n	8002b04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	049b      	lsls	r3, r3, #18
 8002a62:	4013      	ands	r3, r2
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x644>
 8002a66:	e04c      	b.n	8002b02 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <HAL_RCC_OscConfig+0x67c>)
 8002a6e:	4908      	ldr	r1, [pc, #32]	; (8002a90 <HAL_RCC_OscConfig+0x68c>)
 8002a70:	400a      	ands	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a74:	f7ff fa72 	bl	8001f5c <HAL_GetTick>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7c:	e015      	b.n	8002aaa <HAL_RCC_OscConfig+0x6a6>
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	40021000 	.word	0x40021000
 8002a84:	00001388 	.word	0x00001388
 8002a88:	efffffff 	.word	0xefffffff
 8002a8c:	fffeffff 	.word	0xfffeffff
 8002a90:	feffffff 	.word	0xfeffffff
 8002a94:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a98:	f7ff fa60 	bl	8001f5c <HAL_GetTick>
 8002a9c:	0002      	movs	r2, r0
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e02c      	b.n	8002b04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aaa:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <HAL_RCC_OscConfig+0x708>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	2380      	movs	r3, #128	; 0x80
 8002ab0:	049b      	lsls	r3, r3, #18
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0x694>
 8002ab6:	e024      	b.n	8002b02 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e01f      	b.n	8002b04 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002ac4:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <HAL_RCC_OscConfig+0x708>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002aca:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <HAL_RCC_OscConfig+0x708>)
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	23c0      	movs	r3, #192	; 0xc0
 8002ad4:	025b      	lsls	r3, r3, #9
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d10e      	bne.n	8002afe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	220f      	movs	r2, #15
 8002ae4:	401a      	ands	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	23f0      	movs	r3, #240	; 0xf0
 8002af2:	039b      	lsls	r3, r3, #14
 8002af4:	401a      	ands	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d001      	beq.n	8002b02 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	0018      	movs	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b008      	add	sp, #32
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40021000 	.word	0x40021000

08002b10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0bf      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b24:	4b61      	ldr	r3, [pc, #388]	; (8002cac <HAL_RCC_ClockConfig+0x19c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d911      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b5e      	ldr	r3, [pc, #376]	; (8002cac <HAL_RCC_ClockConfig+0x19c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2201      	movs	r2, #1
 8002b38:	4393      	bics	r3, r2
 8002b3a:	0019      	movs	r1, r3
 8002b3c:	4b5b      	ldr	r3, [pc, #364]	; (8002cac <HAL_RCC_ClockConfig+0x19c>)
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b44:	4b59      	ldr	r3, [pc, #356]	; (8002cac <HAL_RCC_ClockConfig+0x19c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0a6      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d015      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2204      	movs	r2, #4
 8002b66:	4013      	ands	r3, r2
 8002b68:	d006      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b6a:	4b51      	ldr	r3, [pc, #324]	; (8002cb0 <HAL_RCC_ClockConfig+0x1a0>)
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	4b50      	ldr	r3, [pc, #320]	; (8002cb0 <HAL_RCC_ClockConfig+0x1a0>)
 8002b70:	21e0      	movs	r1, #224	; 0xe0
 8002b72:	00c9      	lsls	r1, r1, #3
 8002b74:	430a      	orrs	r2, r1
 8002b76:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b4d      	ldr	r3, [pc, #308]	; (8002cb0 <HAL_RCC_ClockConfig+0x1a0>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	22f0      	movs	r2, #240	; 0xf0
 8002b7e:	4393      	bics	r3, r2
 8002b80:	0019      	movs	r1, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	4b4a      	ldr	r3, [pc, #296]	; (8002cb0 <HAL_RCC_ClockConfig+0x1a0>)
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2201      	movs	r2, #1
 8002b92:	4013      	ands	r3, r2
 8002b94:	d04c      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b44      	ldr	r3, [pc, #272]	; (8002cb0 <HAL_RCC_ClockConfig+0x1a0>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	029b      	lsls	r3, r3, #10
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d120      	bne.n	8002bec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e07a      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb6:	4b3e      	ldr	r3, [pc, #248]	; (8002cb0 <HAL_RCC_ClockConfig+0x1a0>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	2380      	movs	r3, #128	; 0x80
 8002bbc:	049b      	lsls	r3, r3, #18
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d114      	bne.n	8002bec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e06e      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002bce:	4b38      	ldr	r3, [pc, #224]	; (8002cb0 <HAL_RCC_ClockConfig+0x1a0>)
 8002bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	025b      	lsls	r3, r3, #9
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d108      	bne.n	8002bec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e062      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bde:	4b34      	ldr	r3, [pc, #208]	; (8002cb0 <HAL_RCC_ClockConfig+0x1a0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2202      	movs	r2, #2
 8002be4:	4013      	ands	r3, r2
 8002be6:	d101      	bne.n	8002bec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e05b      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bec:	4b30      	ldr	r3, [pc, #192]	; (8002cb0 <HAL_RCC_ClockConfig+0x1a0>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	4393      	bics	r3, r2
 8002bf4:	0019      	movs	r1, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <HAL_RCC_ClockConfig+0x1a0>)
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c00:	f7ff f9ac 	bl	8001f5c <HAL_GetTick>
 8002c04:	0003      	movs	r3, r0
 8002c06:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c08:	e009      	b.n	8002c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0a:	f7ff f9a7 	bl	8001f5c <HAL_GetTick>
 8002c0e:	0002      	movs	r2, r0
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	4a27      	ldr	r2, [pc, #156]	; (8002cb4 <HAL_RCC_ClockConfig+0x1a4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e042      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1e:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <HAL_RCC_ClockConfig+0x1a0>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	220c      	movs	r2, #12
 8002c24:	401a      	ands	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d1ec      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c30:	4b1e      	ldr	r3, [pc, #120]	; (8002cac <HAL_RCC_ClockConfig+0x19c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2201      	movs	r2, #1
 8002c36:	4013      	ands	r3, r2
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d211      	bcs.n	8002c62 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <HAL_RCC_ClockConfig+0x19c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2201      	movs	r2, #1
 8002c44:	4393      	bics	r3, r2
 8002c46:	0019      	movs	r1, r3
 8002c48:	4b18      	ldr	r3, [pc, #96]	; (8002cac <HAL_RCC_ClockConfig+0x19c>)
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c50:	4b16      	ldr	r3, [pc, #88]	; (8002cac <HAL_RCC_ClockConfig+0x19c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2201      	movs	r2, #1
 8002c56:	4013      	ands	r3, r2
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d001      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e020      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2204      	movs	r2, #4
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d009      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c6c:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <HAL_RCC_ClockConfig+0x1a0>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4a11      	ldr	r2, [pc, #68]	; (8002cb8 <HAL_RCC_ClockConfig+0x1a8>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	0019      	movs	r1, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <HAL_RCC_ClockConfig+0x1a0>)
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c80:	f000 f820 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8002c84:	0001      	movs	r1, r0
 8002c86:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <HAL_RCC_ClockConfig+0x1a0>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	091b      	lsrs	r3, r3, #4
 8002c8c:	220f      	movs	r2, #15
 8002c8e:	4013      	ands	r3, r2
 8002c90:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <HAL_RCC_ClockConfig+0x1ac>)
 8002c92:	5cd3      	ldrb	r3, [r2, r3]
 8002c94:	000a      	movs	r2, r1
 8002c96:	40da      	lsrs	r2, r3
 8002c98:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b0>)
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f7ff f917 	bl	8001ed0 <HAL_InitTick>
  
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b004      	add	sp, #16
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40022000 	.word	0x40022000
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	00001388 	.word	0x00001388
 8002cb8:	fffff8ff 	.word	0xfffff8ff
 8002cbc:	08003d78 	.word	0x08003d78
 8002cc0:	20000008 	.word	0x20000008

08002cc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc4:	b590      	push	{r4, r7, lr}
 8002cc6:	b08f      	sub	sp, #60	; 0x3c
 8002cc8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002cca:	2314      	movs	r3, #20
 8002ccc:	18fb      	adds	r3, r7, r3
 8002cce:	4a38      	ldr	r2, [pc, #224]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xec>)
 8002cd0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002cd2:	c313      	stmia	r3!, {r0, r1, r4}
 8002cd4:	6812      	ldr	r2, [r2, #0]
 8002cd6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	4a36      	ldr	r2, [pc, #216]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002cdc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002cde:	c313      	stmia	r3!, {r0, r1, r4}
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce8:	2300      	movs	r3, #0
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cec:	2300      	movs	r3, #0
 8002cee:	637b      	str	r3, [r7, #52]	; 0x34
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002cf8:	4b2f      	ldr	r3, [pc, #188]	; (8002db8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d00:	220c      	movs	r2, #12
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b0c      	cmp	r3, #12
 8002d06:	d047      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0xd4>
 8002d08:	d849      	bhi.n	8002d9e <HAL_RCC_GetSysClockFreq+0xda>
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d002      	beq.n	8002d14 <HAL_RCC_GetSysClockFreq+0x50>
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d003      	beq.n	8002d1a <HAL_RCC_GetSysClockFreq+0x56>
 8002d12:	e044      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d14:	4b29      	ldr	r3, [pc, #164]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d16:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d18:	e044      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1c:	0c9b      	lsrs	r3, r3, #18
 8002d1e:	220f      	movs	r2, #15
 8002d20:	4013      	ands	r3, r2
 8002d22:	2214      	movs	r2, #20
 8002d24:	18ba      	adds	r2, r7, r2
 8002d26:	5cd3      	ldrb	r3, [r2, r3]
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002d2a:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	220f      	movs	r2, #15
 8002d30:	4013      	ands	r3, r2
 8002d32:	1d3a      	adds	r2, r7, #4
 8002d34:	5cd3      	ldrb	r3, [r2, r3]
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d3a:	23c0      	movs	r3, #192	; 0xc0
 8002d3c:	025b      	lsls	r3, r3, #9
 8002d3e:	401a      	ands	r2, r3
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	025b      	lsls	r3, r3, #9
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d109      	bne.n	8002d5c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d4a:	481c      	ldr	r0, [pc, #112]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d4c:	f7fd f9da 	bl	8000104 <__udivsi3>
 8002d50:	0003      	movs	r3, r0
 8002d52:	001a      	movs	r2, r3
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	4353      	muls	r3, r2
 8002d58:	637b      	str	r3, [r7, #52]	; 0x34
 8002d5a:	e01a      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d5e:	23c0      	movs	r3, #192	; 0xc0
 8002d60:	025b      	lsls	r3, r3, #9
 8002d62:	401a      	ands	r2, r3
 8002d64:	23c0      	movs	r3, #192	; 0xc0
 8002d66:	025b      	lsls	r3, r3, #9
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d109      	bne.n	8002d80 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d6e:	4814      	ldr	r0, [pc, #80]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d70:	f7fd f9c8 	bl	8000104 <__udivsi3>
 8002d74:	0003      	movs	r3, r0
 8002d76:	001a      	movs	r2, r3
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	4353      	muls	r3, r2
 8002d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d82:	480e      	ldr	r0, [pc, #56]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d84:	f7fd f9be 	bl	8000104 <__udivsi3>
 8002d88:	0003      	movs	r3, r0
 8002d8a:	001a      	movs	r2, r3
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	4353      	muls	r3, r2
 8002d90:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d94:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d96:	e005      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d9c:	e002      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d9e:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002da0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002da2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002da6:	0018      	movs	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b00f      	add	sp, #60	; 0x3c
 8002dac:	bd90      	pop	{r4, r7, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	08003c58 	.word	0x08003c58
 8002db4:	08003c68 	.word	0x08003c68
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	007a1200 	.word	0x007a1200
 8002dc0:	02dc6c00 	.word	0x02dc6c00

08002dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc8:	4b02      	ldr	r3, [pc, #8]	; (8002dd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	20000008 	.word	0x20000008

08002dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002ddc:	f7ff fff2 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002de0:	0001      	movs	r1, r0
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	2207      	movs	r2, #7
 8002dea:	4013      	ands	r3, r2
 8002dec:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dee:	5cd3      	ldrb	r3, [r2, r3]
 8002df0:	40d9      	lsrs	r1, r3
 8002df2:	000b      	movs	r3, r1
}    
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	08003d88 	.word	0x08003d88

08002e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	2380      	movs	r3, #128	; 0x80
 8002e1a:	025b      	lsls	r3, r3, #9
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d100      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002e20:	e08e      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002e22:	2017      	movs	r0, #23
 8002e24:	183b      	adds	r3, r7, r0
 8002e26:	2200      	movs	r2, #0
 8002e28:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e2a:	4b6e      	ldr	r3, [pc, #440]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e2c:	69da      	ldr	r2, [r3, #28]
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	055b      	lsls	r3, r3, #21
 8002e32:	4013      	ands	r3, r2
 8002e34:	d110      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e36:	4b6b      	ldr	r3, [pc, #428]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e38:	69da      	ldr	r2, [r3, #28]
 8002e3a:	4b6a      	ldr	r3, [pc, #424]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e3c:	2180      	movs	r1, #128	; 0x80
 8002e3e:	0549      	lsls	r1, r1, #21
 8002e40:	430a      	orrs	r2, r1
 8002e42:	61da      	str	r2, [r3, #28]
 8002e44:	4b67      	ldr	r3, [pc, #412]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e46:	69da      	ldr	r2, [r3, #28]
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	055b      	lsls	r3, r3, #21
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e52:	183b      	adds	r3, r7, r0
 8002e54:	2201      	movs	r2, #1
 8002e56:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e58:	4b63      	ldr	r3, [pc, #396]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	4013      	ands	r3, r2
 8002e62:	d11a      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e64:	4b60      	ldr	r3, [pc, #384]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4b5f      	ldr	r3, [pc, #380]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002e6a:	2180      	movs	r1, #128	; 0x80
 8002e6c:	0049      	lsls	r1, r1, #1
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e72:	f7ff f873 	bl	8001f5c <HAL_GetTick>
 8002e76:	0003      	movs	r3, r0
 8002e78:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7a:	e008      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7c:	f7ff f86e 	bl	8001f5c <HAL_GetTick>
 8002e80:	0002      	movs	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	; 0x64
 8002e88:	d901      	bls.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e0a6      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8e:	4b56      	ldr	r3, [pc, #344]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4013      	ands	r3, r2
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e9a:	4b52      	ldr	r3, [pc, #328]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e9c:	6a1a      	ldr	r2, [r3, #32]
 8002e9e:	23c0      	movs	r3, #192	; 0xc0
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d034      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	23c0      	movs	r3, #192	; 0xc0
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d02c      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ebc:	4b49      	ldr	r3, [pc, #292]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	4a4a      	ldr	r2, [pc, #296]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ec6:	4b47      	ldr	r3, [pc, #284]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ec8:	6a1a      	ldr	r2, [r3, #32]
 8002eca:	4b46      	ldr	r3, [pc, #280]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ecc:	2180      	movs	r1, #128	; 0x80
 8002ece:	0249      	lsls	r1, r1, #9
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ed4:	4b43      	ldr	r3, [pc, #268]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ed6:	6a1a      	ldr	r2, [r3, #32]
 8002ed8:	4b42      	ldr	r3, [pc, #264]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002eda:	4945      	ldr	r1, [pc, #276]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002edc:	400a      	ands	r2, r1
 8002ede:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ee0:	4b40      	ldr	r3, [pc, #256]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	4013      	ands	r3, r2
 8002eec:	d013      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eee:	f7ff f835 	bl	8001f5c <HAL_GetTick>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef6:	e009      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef8:	f7ff f830 	bl	8001f5c <HAL_GetTick>
 8002efc:	0002      	movs	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	4a3c      	ldr	r2, [pc, #240]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e067      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0c:	4b35      	ldr	r3, [pc, #212]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	2202      	movs	r2, #2
 8002f12:	4013      	ands	r3, r2
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f16:	4b33      	ldr	r3, [pc, #204]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	4a34      	ldr	r2, [pc, #208]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	0019      	movs	r1, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	4b2f      	ldr	r3, [pc, #188]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f26:	430a      	orrs	r2, r1
 8002f28:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f2a:	2317      	movs	r3, #23
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d105      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f34:	4b2b      	ldr	r3, [pc, #172]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f36:	69da      	ldr	r2, [r3, #28]
 8002f38:	4b2a      	ldr	r3, [pc, #168]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f3a:	492f      	ldr	r1, [pc, #188]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002f3c:	400a      	ands	r2, r1
 8002f3e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2201      	movs	r2, #1
 8002f46:	4013      	ands	r3, r2
 8002f48:	d009      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f4a:	4b26      	ldr	r3, [pc, #152]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	2203      	movs	r2, #3
 8002f50:	4393      	bics	r3, r2
 8002f52:	0019      	movs	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	4b22      	ldr	r3, [pc, #136]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2202      	movs	r2, #2
 8002f64:	4013      	ands	r3, r2
 8002f66:	d009      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f68:	4b1e      	ldr	r3, [pc, #120]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	4a23      	ldr	r2, [pc, #140]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	0019      	movs	r1, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	02db      	lsls	r3, r3, #11
 8002f84:	4013      	ands	r3, r2
 8002f86:	d009      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f88:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	4a1c      	ldr	r2, [pc, #112]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	0019      	movs	r1, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d009      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fa6:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	2210      	movs	r2, #16
 8002fac:	4393      	bics	r3, r2
 8002fae:	0019      	movs	r1, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d009      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fc6:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	2240      	movs	r2, #64	; 0x40
 8002fcc:	4393      	bics	r3, r2
 8002fce:	0019      	movs	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699a      	ldr	r2, [r3, #24]
 8002fd4:	4b03      	ldr	r3, [pc, #12]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	0018      	movs	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b006      	add	sp, #24
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	fffffcff 	.word	0xfffffcff
 8002ff0:	fffeffff 	.word	0xfffeffff
 8002ff4:	00001388 	.word	0x00001388
 8002ff8:	efffffff 	.word	0xefffffff
 8002ffc:	fffcffff 	.word	0xfffcffff
 8003000:	fff3ffff 	.word	0xfff3ffff

08003004 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e044      	b.n	80030a0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800301a:	2b00      	cmp	r3, #0
 800301c:	d107      	bne.n	800302e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2274      	movs	r2, #116	; 0x74
 8003022:	2100      	movs	r1, #0
 8003024:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	0018      	movs	r0, r3
 800302a:	f7fe fe6f 	bl	8001d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2224      	movs	r2, #36	; 0x24
 8003032:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2101      	movs	r1, #1
 8003040:	438a      	bics	r2, r1
 8003042:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	0018      	movs	r0, r3
 8003048:	f000 f9ca 	bl	80033e0 <UART_SetConfig>
 800304c:	0003      	movs	r3, r0
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e024      	b.n	80030a0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	0018      	movs	r0, r3
 8003062:	f000 fba5 	bl	80037b0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	490d      	ldr	r1, [pc, #52]	; (80030a8 <HAL_UART_Init+0xa4>)
 8003072:	400a      	ands	r2, r1
 8003074:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	212a      	movs	r1, #42	; 0x2a
 8003082:	438a      	bics	r2, r1
 8003084:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2101      	movs	r1, #1
 8003092:	430a      	orrs	r2, r1
 8003094:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	0018      	movs	r0, r3
 800309a:	f000 fc3d 	bl	8003918 <UART_CheckIdleState>
 800309e:	0003      	movs	r3, r0
}
 80030a0:	0018      	movs	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b002      	add	sp, #8
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	ffffb7ff 	.word	0xffffb7ff

080030ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	1dbb      	adds	r3, r7, #6
 80030ba:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d000      	beq.n	80030c6 <HAL_UART_Transmit+0x1a>
 80030c4:	e096      	b.n	80031f4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_UART_Transmit+0x28>
 80030cc:	1dbb      	adds	r3, r7, #6
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e08e      	b.n	80031f6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	2380      	movs	r3, #128	; 0x80
 80030de:	015b      	lsls	r3, r3, #5
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d109      	bne.n	80030f8 <HAL_UART_Transmit+0x4c>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d105      	bne.n	80030f8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2201      	movs	r2, #1
 80030f0:	4013      	ands	r3, r2
 80030f2:	d001      	beq.n	80030f8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e07e      	b.n	80031f6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2274      	movs	r2, #116	; 0x74
 80030fc:	5c9b      	ldrb	r3, [r3, r2]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_UART_Transmit+0x5a>
 8003102:	2302      	movs	r3, #2
 8003104:	e077      	b.n	80031f6 <HAL_UART_Transmit+0x14a>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2274      	movs	r2, #116	; 0x74
 800310a:	2101      	movs	r1, #1
 800310c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2280      	movs	r2, #128	; 0x80
 8003112:	2100      	movs	r1, #0
 8003114:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2221      	movs	r2, #33	; 0x21
 800311a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800311c:	f7fe ff1e 	bl	8001f5c <HAL_GetTick>
 8003120:	0003      	movs	r3, r0
 8003122:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1dba      	adds	r2, r7, #6
 8003128:	2150      	movs	r1, #80	; 0x50
 800312a:	8812      	ldrh	r2, [r2, #0]
 800312c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1dba      	adds	r2, r7, #6
 8003132:	2152      	movs	r1, #82	; 0x52
 8003134:	8812      	ldrh	r2, [r2, #0]
 8003136:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	015b      	lsls	r3, r3, #5
 8003140:	429a      	cmp	r2, r3
 8003142:	d108      	bne.n	8003156 <HAL_UART_Transmit+0xaa>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d104      	bne.n	8003156 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800314c:	2300      	movs	r3, #0
 800314e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	61bb      	str	r3, [r7, #24]
 8003154:	e003      	b.n	800315e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2274      	movs	r2, #116	; 0x74
 8003162:	2100      	movs	r1, #0
 8003164:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003166:	e02d      	b.n	80031c4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	0013      	movs	r3, r2
 8003172:	2200      	movs	r2, #0
 8003174:	2180      	movs	r1, #128	; 0x80
 8003176:	f000 fc17 	bl	80039a8 <UART_WaitOnFlagUntilTimeout>
 800317a:	1e03      	subs	r3, r0, #0
 800317c:	d001      	beq.n	8003182 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e039      	b.n	80031f6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10b      	bne.n	80031a0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	881a      	ldrh	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	05d2      	lsls	r2, r2, #23
 8003192:	0dd2      	lsrs	r2, r2, #23
 8003194:	b292      	uxth	r2, r2
 8003196:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	3302      	adds	r3, #2
 800319c:	61bb      	str	r3, [r7, #24]
 800319e:	e008      	b.n	80031b2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	781a      	ldrb	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	b292      	uxth	r2, r2
 80031aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	3301      	adds	r3, #1
 80031b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2252      	movs	r2, #82	; 0x52
 80031b6:	5a9b      	ldrh	r3, [r3, r2]
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b299      	uxth	r1, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2252      	movs	r2, #82	; 0x52
 80031c2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2252      	movs	r2, #82	; 0x52
 80031c8:	5a9b      	ldrh	r3, [r3, r2]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1cb      	bne.n	8003168 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	0013      	movs	r3, r2
 80031da:	2200      	movs	r2, #0
 80031dc:	2140      	movs	r1, #64	; 0x40
 80031de:	f000 fbe3 	bl	80039a8 <UART_WaitOnFlagUntilTimeout>
 80031e2:	1e03      	subs	r3, r0, #0
 80031e4:	d001      	beq.n	80031ea <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e005      	b.n	80031f6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2220      	movs	r2, #32
 80031ee:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	e000      	b.n	80031f6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80031f4:	2302      	movs	r3, #2
  }
}
 80031f6:	0018      	movs	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b008      	add	sp, #32
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08a      	sub	sp, #40	; 0x28
 8003204:	af02      	add	r7, sp, #8
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	603b      	str	r3, [r7, #0]
 800320c:	1dbb      	adds	r3, r7, #6
 800320e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003214:	2b20      	cmp	r3, #32
 8003216:	d000      	beq.n	800321a <HAL_UART_Receive+0x1a>
 8003218:	e0da      	b.n	80033d0 <HAL_UART_Receive+0x1d0>
  {
    if ((pData == NULL) || (Size == 0U))
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_UART_Receive+0x28>
 8003220:	1dbb      	adds	r3, r7, #6
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0d2      	b.n	80033d2 <HAL_UART_Receive+0x1d2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	015b      	lsls	r3, r3, #5
 8003234:	429a      	cmp	r2, r3
 8003236:	d109      	bne.n	800324c <HAL_UART_Receive+0x4c>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d105      	bne.n	800324c <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2201      	movs	r2, #1
 8003244:	4013      	ands	r3, r2
 8003246:	d001      	beq.n	800324c <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0c2      	b.n	80033d2 <HAL_UART_Receive+0x1d2>
      }
    }

    __HAL_LOCK(huart);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2274      	movs	r2, #116	; 0x74
 8003250:	5c9b      	ldrb	r3, [r3, r2]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <HAL_UART_Receive+0x5a>
 8003256:	2302      	movs	r3, #2
 8003258:	e0bb      	b.n	80033d2 <HAL_UART_Receive+0x1d2>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2274      	movs	r2, #116	; 0x74
 800325e:	2101      	movs	r1, #1
 8003260:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2280      	movs	r2, #128	; 0x80
 8003266:	2100      	movs	r1, #0
 8003268:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2222      	movs	r2, #34	; 0x22
 800326e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003276:	f7fe fe71 	bl	8001f5c <HAL_GetTick>
 800327a:	0003      	movs	r3, r0
 800327c:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1dba      	adds	r2, r7, #6
 8003282:	2158      	movs	r1, #88	; 0x58
 8003284:	8812      	ldrh	r2, [r2, #0]
 8003286:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1dba      	adds	r2, r7, #6
 800328c:	215a      	movs	r1, #90	; 0x5a
 800328e:	8812      	ldrh	r2, [r2, #0]
 8003290:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	015b      	lsls	r3, r3, #5
 800329a:	429a      	cmp	r2, r3
 800329c:	d10d      	bne.n	80032ba <HAL_UART_Receive+0xba>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d104      	bne.n	80032b0 <HAL_UART_Receive+0xb0>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	225c      	movs	r2, #92	; 0x5c
 80032aa:	494c      	ldr	r1, [pc, #304]	; (80033dc <HAL_UART_Receive+0x1dc>)
 80032ac:	5299      	strh	r1, [r3, r2]
 80032ae:	e02e      	b.n	800330e <HAL_UART_Receive+0x10e>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	225c      	movs	r2, #92	; 0x5c
 80032b4:	21ff      	movs	r1, #255	; 0xff
 80032b6:	5299      	strh	r1, [r3, r2]
 80032b8:	e029      	b.n	800330e <HAL_UART_Receive+0x10e>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10d      	bne.n	80032de <HAL_UART_Receive+0xde>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d104      	bne.n	80032d4 <HAL_UART_Receive+0xd4>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	225c      	movs	r2, #92	; 0x5c
 80032ce:	21ff      	movs	r1, #255	; 0xff
 80032d0:	5299      	strh	r1, [r3, r2]
 80032d2:	e01c      	b.n	800330e <HAL_UART_Receive+0x10e>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	225c      	movs	r2, #92	; 0x5c
 80032d8:	217f      	movs	r1, #127	; 0x7f
 80032da:	5299      	strh	r1, [r3, r2]
 80032dc:	e017      	b.n	800330e <HAL_UART_Receive+0x10e>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	2380      	movs	r3, #128	; 0x80
 80032e4:	055b      	lsls	r3, r3, #21
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d10d      	bne.n	8003306 <HAL_UART_Receive+0x106>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d104      	bne.n	80032fc <HAL_UART_Receive+0xfc>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	225c      	movs	r2, #92	; 0x5c
 80032f6:	217f      	movs	r1, #127	; 0x7f
 80032f8:	5299      	strh	r1, [r3, r2]
 80032fa:	e008      	b.n	800330e <HAL_UART_Receive+0x10e>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	225c      	movs	r2, #92	; 0x5c
 8003300:	213f      	movs	r1, #63	; 0x3f
 8003302:	5299      	strh	r1, [r3, r2]
 8003304:	e003      	b.n	800330e <HAL_UART_Receive+0x10e>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	225c      	movs	r2, #92	; 0x5c
 800330a:	2100      	movs	r1, #0
 800330c:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800330e:	2312      	movs	r3, #18
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	215c      	movs	r1, #92	; 0x5c
 8003316:	5a52      	ldrh	r2, [r2, r1]
 8003318:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	015b      	lsls	r3, r3, #5
 8003322:	429a      	cmp	r2, r3
 8003324:	d108      	bne.n	8003338 <HAL_UART_Receive+0x138>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d104      	bne.n	8003338 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	e003      	b.n	8003340 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2274      	movs	r2, #116	; 0x74
 8003344:	2100      	movs	r1, #0
 8003346:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003348:	e037      	b.n	80033ba <HAL_UART_Receive+0x1ba>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	0013      	movs	r3, r2
 8003354:	2200      	movs	r2, #0
 8003356:	2120      	movs	r1, #32
 8003358:	f000 fb26 	bl	80039a8 <UART_WaitOnFlagUntilTimeout>
 800335c:	1e03      	subs	r3, r0, #0
 800335e:	d001      	beq.n	8003364 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e036      	b.n	80033d2 <HAL_UART_Receive+0x1d2>
      }
      if (pdata8bits == NULL)
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10e      	bne.n	8003388 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003370:	b29b      	uxth	r3, r3
 8003372:	2212      	movs	r2, #18
 8003374:	18ba      	adds	r2, r7, r2
 8003376:	8812      	ldrh	r2, [r2, #0]
 8003378:	4013      	ands	r3, r2
 800337a:	b29a      	uxth	r2, r3
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	3302      	adds	r3, #2
 8003384:	61bb      	str	r3, [r7, #24]
 8003386:	e00f      	b.n	80033a8 <HAL_UART_Receive+0x1a8>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800338e:	b29b      	uxth	r3, r3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2212      	movs	r2, #18
 8003394:	18ba      	adds	r2, r7, r2
 8003396:	8812      	ldrh	r2, [r2, #0]
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	4013      	ands	r3, r2
 800339c:	b2da      	uxtb	r2, r3
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3301      	adds	r3, #1
 80033a6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	225a      	movs	r2, #90	; 0x5a
 80033ac:	5a9b      	ldrh	r3, [r3, r2]
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b299      	uxth	r1, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	225a      	movs	r2, #90	; 0x5a
 80033b8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	225a      	movs	r2, #90	; 0x5a
 80033be:	5a9b      	ldrh	r3, [r3, r2]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1c1      	bne.n	800334a <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <HAL_UART_Receive+0x1d2>
  }
  else
  {
    return HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
  }
}
 80033d2:	0018      	movs	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b008      	add	sp, #32
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	000001ff 	.word	0x000001ff

080033e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033e8:	231e      	movs	r3, #30
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	2200      	movs	r2, #0
 80033ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4abe      	ldr	r2, [pc, #760]	; (8003708 <UART_SetConfig+0x328>)
 8003410:	4013      	ands	r3, r2
 8003412:	0019      	movs	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	430a      	orrs	r2, r1
 800341c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4ab9      	ldr	r2, [pc, #740]	; (800370c <UART_SetConfig+0x32c>)
 8003426:	4013      	ands	r3, r2
 8003428:	0019      	movs	r1, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4ab0      	ldr	r2, [pc, #704]	; (8003710 <UART_SetConfig+0x330>)
 800344e:	4013      	ands	r3, r2
 8003450:	0019      	movs	r1, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	430a      	orrs	r2, r1
 800345a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4aac      	ldr	r2, [pc, #688]	; (8003714 <UART_SetConfig+0x334>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d127      	bne.n	80034b6 <UART_SetConfig+0xd6>
 8003466:	4bac      	ldr	r3, [pc, #688]	; (8003718 <UART_SetConfig+0x338>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	2203      	movs	r2, #3
 800346c:	4013      	ands	r3, r2
 800346e:	2b03      	cmp	r3, #3
 8003470:	d00d      	beq.n	800348e <UART_SetConfig+0xae>
 8003472:	d81b      	bhi.n	80034ac <UART_SetConfig+0xcc>
 8003474:	2b02      	cmp	r3, #2
 8003476:	d014      	beq.n	80034a2 <UART_SetConfig+0xc2>
 8003478:	d818      	bhi.n	80034ac <UART_SetConfig+0xcc>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <UART_SetConfig+0xa4>
 800347e:	2b01      	cmp	r3, #1
 8003480:	d00a      	beq.n	8003498 <UART_SetConfig+0xb8>
 8003482:	e013      	b.n	80034ac <UART_SetConfig+0xcc>
 8003484:	231f      	movs	r3, #31
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	2200      	movs	r2, #0
 800348a:	701a      	strb	r2, [r3, #0]
 800348c:	e0bd      	b.n	800360a <UART_SetConfig+0x22a>
 800348e:	231f      	movs	r3, #31
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	2202      	movs	r2, #2
 8003494:	701a      	strb	r2, [r3, #0]
 8003496:	e0b8      	b.n	800360a <UART_SetConfig+0x22a>
 8003498:	231f      	movs	r3, #31
 800349a:	18fb      	adds	r3, r7, r3
 800349c:	2204      	movs	r2, #4
 800349e:	701a      	strb	r2, [r3, #0]
 80034a0:	e0b3      	b.n	800360a <UART_SetConfig+0x22a>
 80034a2:	231f      	movs	r3, #31
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	2208      	movs	r2, #8
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	e0ae      	b.n	800360a <UART_SetConfig+0x22a>
 80034ac:	231f      	movs	r3, #31
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	2210      	movs	r2, #16
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	e0a9      	b.n	800360a <UART_SetConfig+0x22a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a98      	ldr	r2, [pc, #608]	; (800371c <UART_SetConfig+0x33c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d134      	bne.n	800352a <UART_SetConfig+0x14a>
 80034c0:	4b95      	ldr	r3, [pc, #596]	; (8003718 <UART_SetConfig+0x338>)
 80034c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c4:	23c0      	movs	r3, #192	; 0xc0
 80034c6:	029b      	lsls	r3, r3, #10
 80034c8:	4013      	ands	r3, r2
 80034ca:	22c0      	movs	r2, #192	; 0xc0
 80034cc:	0292      	lsls	r2, r2, #10
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d017      	beq.n	8003502 <UART_SetConfig+0x122>
 80034d2:	22c0      	movs	r2, #192	; 0xc0
 80034d4:	0292      	lsls	r2, r2, #10
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d822      	bhi.n	8003520 <UART_SetConfig+0x140>
 80034da:	2280      	movs	r2, #128	; 0x80
 80034dc:	0292      	lsls	r2, r2, #10
 80034de:	4293      	cmp	r3, r2
 80034e0:	d019      	beq.n	8003516 <UART_SetConfig+0x136>
 80034e2:	2280      	movs	r2, #128	; 0x80
 80034e4:	0292      	lsls	r2, r2, #10
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d81a      	bhi.n	8003520 <UART_SetConfig+0x140>
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d004      	beq.n	80034f8 <UART_SetConfig+0x118>
 80034ee:	2280      	movs	r2, #128	; 0x80
 80034f0:	0252      	lsls	r2, r2, #9
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00a      	beq.n	800350c <UART_SetConfig+0x12c>
 80034f6:	e013      	b.n	8003520 <UART_SetConfig+0x140>
 80034f8:	231f      	movs	r3, #31
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]
 8003500:	e083      	b.n	800360a <UART_SetConfig+0x22a>
 8003502:	231f      	movs	r3, #31
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	2202      	movs	r2, #2
 8003508:	701a      	strb	r2, [r3, #0]
 800350a:	e07e      	b.n	800360a <UART_SetConfig+0x22a>
 800350c:	231f      	movs	r3, #31
 800350e:	18fb      	adds	r3, r7, r3
 8003510:	2204      	movs	r2, #4
 8003512:	701a      	strb	r2, [r3, #0]
 8003514:	e079      	b.n	800360a <UART_SetConfig+0x22a>
 8003516:	231f      	movs	r3, #31
 8003518:	18fb      	adds	r3, r7, r3
 800351a:	2208      	movs	r2, #8
 800351c:	701a      	strb	r2, [r3, #0]
 800351e:	e074      	b.n	800360a <UART_SetConfig+0x22a>
 8003520:	231f      	movs	r3, #31
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	2210      	movs	r2, #16
 8003526:	701a      	strb	r2, [r3, #0]
 8003528:	e06f      	b.n	800360a <UART_SetConfig+0x22a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a7c      	ldr	r2, [pc, #496]	; (8003720 <UART_SetConfig+0x340>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d134      	bne.n	800359e <UART_SetConfig+0x1be>
 8003534:	4b78      	ldr	r3, [pc, #480]	; (8003718 <UART_SetConfig+0x338>)
 8003536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003538:	23c0      	movs	r3, #192	; 0xc0
 800353a:	031b      	lsls	r3, r3, #12
 800353c:	4013      	ands	r3, r2
 800353e:	22c0      	movs	r2, #192	; 0xc0
 8003540:	0312      	lsls	r2, r2, #12
 8003542:	4293      	cmp	r3, r2
 8003544:	d017      	beq.n	8003576 <UART_SetConfig+0x196>
 8003546:	22c0      	movs	r2, #192	; 0xc0
 8003548:	0312      	lsls	r2, r2, #12
 800354a:	4293      	cmp	r3, r2
 800354c:	d822      	bhi.n	8003594 <UART_SetConfig+0x1b4>
 800354e:	2280      	movs	r2, #128	; 0x80
 8003550:	0312      	lsls	r2, r2, #12
 8003552:	4293      	cmp	r3, r2
 8003554:	d019      	beq.n	800358a <UART_SetConfig+0x1aa>
 8003556:	2280      	movs	r2, #128	; 0x80
 8003558:	0312      	lsls	r2, r2, #12
 800355a:	4293      	cmp	r3, r2
 800355c:	d81a      	bhi.n	8003594 <UART_SetConfig+0x1b4>
 800355e:	2b00      	cmp	r3, #0
 8003560:	d004      	beq.n	800356c <UART_SetConfig+0x18c>
 8003562:	2280      	movs	r2, #128	; 0x80
 8003564:	02d2      	lsls	r2, r2, #11
 8003566:	4293      	cmp	r3, r2
 8003568:	d00a      	beq.n	8003580 <UART_SetConfig+0x1a0>
 800356a:	e013      	b.n	8003594 <UART_SetConfig+0x1b4>
 800356c:	231f      	movs	r3, #31
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
 8003574:	e049      	b.n	800360a <UART_SetConfig+0x22a>
 8003576:	231f      	movs	r3, #31
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	2202      	movs	r2, #2
 800357c:	701a      	strb	r2, [r3, #0]
 800357e:	e044      	b.n	800360a <UART_SetConfig+0x22a>
 8003580:	231f      	movs	r3, #31
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	2204      	movs	r2, #4
 8003586:	701a      	strb	r2, [r3, #0]
 8003588:	e03f      	b.n	800360a <UART_SetConfig+0x22a>
 800358a:	231f      	movs	r3, #31
 800358c:	18fb      	adds	r3, r7, r3
 800358e:	2208      	movs	r2, #8
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	e03a      	b.n	800360a <UART_SetConfig+0x22a>
 8003594:	231f      	movs	r3, #31
 8003596:	18fb      	adds	r3, r7, r3
 8003598:	2210      	movs	r2, #16
 800359a:	701a      	strb	r2, [r3, #0]
 800359c:	e035      	b.n	800360a <UART_SetConfig+0x22a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a60      	ldr	r2, [pc, #384]	; (8003724 <UART_SetConfig+0x344>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d104      	bne.n	80035b2 <UART_SetConfig+0x1d2>
 80035a8:	231f      	movs	r3, #31
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
 80035b0:	e02b      	b.n	800360a <UART_SetConfig+0x22a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a5c      	ldr	r2, [pc, #368]	; (8003728 <UART_SetConfig+0x348>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d104      	bne.n	80035c6 <UART_SetConfig+0x1e6>
 80035bc:	231f      	movs	r3, #31
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
 80035c4:	e021      	b.n	800360a <UART_SetConfig+0x22a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a58      	ldr	r2, [pc, #352]	; (800372c <UART_SetConfig+0x34c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d104      	bne.n	80035da <UART_SetConfig+0x1fa>
 80035d0:	231f      	movs	r3, #31
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	2200      	movs	r2, #0
 80035d6:	701a      	strb	r2, [r3, #0]
 80035d8:	e017      	b.n	800360a <UART_SetConfig+0x22a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a54      	ldr	r2, [pc, #336]	; (8003730 <UART_SetConfig+0x350>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d104      	bne.n	80035ee <UART_SetConfig+0x20e>
 80035e4:	231f      	movs	r3, #31
 80035e6:	18fb      	adds	r3, r7, r3
 80035e8:	2200      	movs	r2, #0
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	e00d      	b.n	800360a <UART_SetConfig+0x22a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a50      	ldr	r2, [pc, #320]	; (8003734 <UART_SetConfig+0x354>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d104      	bne.n	8003602 <UART_SetConfig+0x222>
 80035f8:	231f      	movs	r3, #31
 80035fa:	18fb      	adds	r3, r7, r3
 80035fc:	2200      	movs	r2, #0
 80035fe:	701a      	strb	r2, [r3, #0]
 8003600:	e003      	b.n	800360a <UART_SetConfig+0x22a>
 8003602:	231f      	movs	r3, #31
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	2210      	movs	r2, #16
 8003608:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69da      	ldr	r2, [r3, #28]
 800360e:	2380      	movs	r3, #128	; 0x80
 8003610:	021b      	lsls	r3, r3, #8
 8003612:	429a      	cmp	r2, r3
 8003614:	d15d      	bne.n	80036d2 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8003616:	231f      	movs	r3, #31
 8003618:	18fb      	adds	r3, r7, r3
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b08      	cmp	r3, #8
 800361e:	d015      	beq.n	800364c <UART_SetConfig+0x26c>
 8003620:	dc18      	bgt.n	8003654 <UART_SetConfig+0x274>
 8003622:	2b04      	cmp	r3, #4
 8003624:	d00d      	beq.n	8003642 <UART_SetConfig+0x262>
 8003626:	dc15      	bgt.n	8003654 <UART_SetConfig+0x274>
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <UART_SetConfig+0x252>
 800362c:	2b02      	cmp	r3, #2
 800362e:	d005      	beq.n	800363c <UART_SetConfig+0x25c>
 8003630:	e010      	b.n	8003654 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003632:	f7ff fbd1 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 8003636:	0003      	movs	r3, r0
 8003638:	61bb      	str	r3, [r7, #24]
        break;
 800363a:	e012      	b.n	8003662 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800363c:	4b3e      	ldr	r3, [pc, #248]	; (8003738 <UART_SetConfig+0x358>)
 800363e:	61bb      	str	r3, [r7, #24]
        break;
 8003640:	e00f      	b.n	8003662 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003642:	f7ff fb3f 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8003646:	0003      	movs	r3, r0
 8003648:	61bb      	str	r3, [r7, #24]
        break;
 800364a:	e00a      	b.n	8003662 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	61bb      	str	r3, [r7, #24]
        break;
 8003652:	e006      	b.n	8003662 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003658:	231e      	movs	r3, #30
 800365a:	18fb      	adds	r3, r7, r3
 800365c:	2201      	movs	r2, #1
 800365e:	701a      	strb	r2, [r3, #0]
        break;
 8003660:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d100      	bne.n	800366a <UART_SetConfig+0x28a>
 8003668:	e095      	b.n	8003796 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	005a      	lsls	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	085b      	lsrs	r3, r3, #1
 8003674:	18d2      	adds	r2, r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	0019      	movs	r1, r3
 800367c:	0010      	movs	r0, r2
 800367e:	f7fc fd41 	bl	8000104 <__udivsi3>
 8003682:	0003      	movs	r3, r0
 8003684:	b29b      	uxth	r3, r3
 8003686:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	2b0f      	cmp	r3, #15
 800368c:	d91c      	bls.n	80036c8 <UART_SetConfig+0x2e8>
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	025b      	lsls	r3, r3, #9
 8003694:	429a      	cmp	r2, r3
 8003696:	d217      	bcs.n	80036c8 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	b29a      	uxth	r2, r3
 800369c:	200e      	movs	r0, #14
 800369e:	183b      	adds	r3, r7, r0
 80036a0:	210f      	movs	r1, #15
 80036a2:	438a      	bics	r2, r1
 80036a4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	085b      	lsrs	r3, r3, #1
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2207      	movs	r2, #7
 80036ae:	4013      	ands	r3, r2
 80036b0:	b299      	uxth	r1, r3
 80036b2:	183b      	adds	r3, r7, r0
 80036b4:	183a      	adds	r2, r7, r0
 80036b6:	8812      	ldrh	r2, [r2, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	183a      	adds	r2, r7, r0
 80036c2:	8812      	ldrh	r2, [r2, #0]
 80036c4:	60da      	str	r2, [r3, #12]
 80036c6:	e066      	b.n	8003796 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80036c8:	231e      	movs	r3, #30
 80036ca:	18fb      	adds	r3, r7, r3
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	e061      	b.n	8003796 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036d2:	231f      	movs	r3, #31
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d02f      	beq.n	800373c <UART_SetConfig+0x35c>
 80036dc:	dc32      	bgt.n	8003744 <UART_SetConfig+0x364>
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d00d      	beq.n	80036fe <UART_SetConfig+0x31e>
 80036e2:	dc2f      	bgt.n	8003744 <UART_SetConfig+0x364>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <UART_SetConfig+0x30e>
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d005      	beq.n	80036f8 <UART_SetConfig+0x318>
 80036ec:	e02a      	b.n	8003744 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036ee:	f7ff fb73 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 80036f2:	0003      	movs	r3, r0
 80036f4:	61bb      	str	r3, [r7, #24]
        break;
 80036f6:	e02c      	b.n	8003752 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f8:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <UART_SetConfig+0x358>)
 80036fa:	61bb      	str	r3, [r7, #24]
        break;
 80036fc:	e029      	b.n	8003752 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036fe:	f7ff fae1 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8003702:	0003      	movs	r3, r0
 8003704:	61bb      	str	r3, [r7, #24]
        break;
 8003706:	e024      	b.n	8003752 <UART_SetConfig+0x372>
 8003708:	efff69f3 	.word	0xefff69f3
 800370c:	ffffcfff 	.word	0xffffcfff
 8003710:	fffff4ff 	.word	0xfffff4ff
 8003714:	40013800 	.word	0x40013800
 8003718:	40021000 	.word	0x40021000
 800371c:	40004400 	.word	0x40004400
 8003720:	40004800 	.word	0x40004800
 8003724:	40004c00 	.word	0x40004c00
 8003728:	40005000 	.word	0x40005000
 800372c:	40011400 	.word	0x40011400
 8003730:	40011800 	.word	0x40011800
 8003734:	40011c00 	.word	0x40011c00
 8003738:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	021b      	lsls	r3, r3, #8
 8003740:	61bb      	str	r3, [r7, #24]
        break;
 8003742:	e006      	b.n	8003752 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003748:	231e      	movs	r3, #30
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	2201      	movs	r2, #1
 800374e:	701a      	strb	r2, [r3, #0]
        break;
 8003750:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01e      	beq.n	8003796 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	085a      	lsrs	r2, r3, #1
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	18d2      	adds	r2, r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	0019      	movs	r1, r3
 8003768:	0010      	movs	r0, r2
 800376a:	f7fc fccb 	bl	8000104 <__udivsi3>
 800376e:	0003      	movs	r3, r0
 8003770:	b29b      	uxth	r3, r3
 8003772:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	2b0f      	cmp	r3, #15
 8003778:	d909      	bls.n	800378e <UART_SetConfig+0x3ae>
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	2380      	movs	r3, #128	; 0x80
 800377e:	025b      	lsls	r3, r3, #9
 8003780:	429a      	cmp	r2, r3
 8003782:	d204      	bcs.n	800378e <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	60da      	str	r2, [r3, #12]
 800378c:	e003      	b.n	8003796 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800378e:	231e      	movs	r3, #30
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	2201      	movs	r2, #1
 8003794:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80037a2:	231e      	movs	r3, #30
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	781b      	ldrb	r3, [r3, #0]
}
 80037a8:	0018      	movs	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b008      	add	sp, #32
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	2201      	movs	r2, #1
 80037be:	4013      	ands	r3, r2
 80037c0:	d00b      	beq.n	80037da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	4a4a      	ldr	r2, [pc, #296]	; (80038f4 <UART_AdvFeatureConfig+0x144>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	0019      	movs	r1, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	2202      	movs	r2, #2
 80037e0:	4013      	ands	r3, r2
 80037e2:	d00b      	beq.n	80037fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	4a43      	ldr	r2, [pc, #268]	; (80038f8 <UART_AdvFeatureConfig+0x148>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	0019      	movs	r1, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	2204      	movs	r2, #4
 8003802:	4013      	ands	r3, r2
 8003804:	d00b      	beq.n	800381e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a3b      	ldr	r2, [pc, #236]	; (80038fc <UART_AdvFeatureConfig+0x14c>)
 800380e:	4013      	ands	r3, r2
 8003810:	0019      	movs	r1, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	2208      	movs	r2, #8
 8003824:	4013      	ands	r3, r2
 8003826:	d00b      	beq.n	8003840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	4a34      	ldr	r2, [pc, #208]	; (8003900 <UART_AdvFeatureConfig+0x150>)
 8003830:	4013      	ands	r3, r2
 8003832:	0019      	movs	r1, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	2210      	movs	r2, #16
 8003846:	4013      	ands	r3, r2
 8003848:	d00b      	beq.n	8003862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4a2c      	ldr	r2, [pc, #176]	; (8003904 <UART_AdvFeatureConfig+0x154>)
 8003852:	4013      	ands	r3, r2
 8003854:	0019      	movs	r1, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	2220      	movs	r2, #32
 8003868:	4013      	ands	r3, r2
 800386a:	d00b      	beq.n	8003884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	4a25      	ldr	r2, [pc, #148]	; (8003908 <UART_AdvFeatureConfig+0x158>)
 8003874:	4013      	ands	r3, r2
 8003876:	0019      	movs	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	2240      	movs	r2, #64	; 0x40
 800388a:	4013      	ands	r3, r2
 800388c:	d01d      	beq.n	80038ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4a1d      	ldr	r2, [pc, #116]	; (800390c <UART_AdvFeatureConfig+0x15c>)
 8003896:	4013      	ands	r3, r2
 8003898:	0019      	movs	r1, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038aa:	2380      	movs	r3, #128	; 0x80
 80038ac:	035b      	lsls	r3, r3, #13
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d10b      	bne.n	80038ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	4a15      	ldr	r2, [pc, #84]	; (8003910 <UART_AdvFeatureConfig+0x160>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	0019      	movs	r1, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	2280      	movs	r2, #128	; 0x80
 80038d0:	4013      	ands	r3, r2
 80038d2:	d00b      	beq.n	80038ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	4a0e      	ldr	r2, [pc, #56]	; (8003914 <UART_AdvFeatureConfig+0x164>)
 80038dc:	4013      	ands	r3, r2
 80038de:	0019      	movs	r1, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	605a      	str	r2, [r3, #4]
  }
}
 80038ec:	46c0      	nop			; (mov r8, r8)
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b002      	add	sp, #8
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	fffdffff 	.word	0xfffdffff
 80038f8:	fffeffff 	.word	0xfffeffff
 80038fc:	fffbffff 	.word	0xfffbffff
 8003900:	ffff7fff 	.word	0xffff7fff
 8003904:	ffffefff 	.word	0xffffefff
 8003908:	ffffdfff 	.word	0xffffdfff
 800390c:	ffefffff 	.word	0xffefffff
 8003910:	ff9fffff 	.word	0xff9fffff
 8003914:	fff7ffff 	.word	0xfff7ffff

08003918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af02      	add	r7, sp, #8
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2280      	movs	r2, #128	; 0x80
 8003924:	2100      	movs	r1, #0
 8003926:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003928:	f7fe fb18 	bl	8001f5c <HAL_GetTick>
 800392c:	0003      	movs	r3, r0
 800392e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2208      	movs	r2, #8
 8003938:	4013      	ands	r3, r2
 800393a:	2b08      	cmp	r3, #8
 800393c:	d10c      	bne.n	8003958 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2280      	movs	r2, #128	; 0x80
 8003942:	0391      	lsls	r1, r2, #14
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	4a17      	ldr	r2, [pc, #92]	; (80039a4 <UART_CheckIdleState+0x8c>)
 8003948:	9200      	str	r2, [sp, #0]
 800394a:	2200      	movs	r2, #0
 800394c:	f000 f82c 	bl	80039a8 <UART_WaitOnFlagUntilTimeout>
 8003950:	1e03      	subs	r3, r0, #0
 8003952:	d001      	beq.n	8003958 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e021      	b.n	800399c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2204      	movs	r2, #4
 8003960:	4013      	ands	r3, r2
 8003962:	2b04      	cmp	r3, #4
 8003964:	d10c      	bne.n	8003980 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2280      	movs	r2, #128	; 0x80
 800396a:	03d1      	lsls	r1, r2, #15
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4a0d      	ldr	r2, [pc, #52]	; (80039a4 <UART_CheckIdleState+0x8c>)
 8003970:	9200      	str	r2, [sp, #0]
 8003972:	2200      	movs	r2, #0
 8003974:	f000 f818 	bl	80039a8 <UART_WaitOnFlagUntilTimeout>
 8003978:	1e03      	subs	r3, r0, #0
 800397a:	d001      	beq.n	8003980 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e00d      	b.n	800399c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2274      	movs	r2, #116	; 0x74
 8003996:	2100      	movs	r1, #0
 8003998:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	0018      	movs	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	b004      	add	sp, #16
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	01ffffff 	.word	0x01ffffff

080039a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b094      	sub	sp, #80	; 0x50
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	1dfb      	adds	r3, r7, #7
 80039b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b8:	e0a3      	b.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039bc:	3301      	adds	r3, #1
 80039be:	d100      	bne.n	80039c2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80039c0:	e09f      	b.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c2:	f7fe facb 	bl	8001f5c <HAL_GetTick>
 80039c6:	0002      	movs	r2, r0
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d302      	bcc.n	80039d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80039d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d13d      	bne.n	8003a54 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d8:	f3ef 8310 	mrs	r3, PRIMASK
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80039de:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039e0:	647b      	str	r3, [r7, #68]	; 0x44
 80039e2:	2301      	movs	r3, #1
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e8:	f383 8810 	msr	PRIMASK, r3
}
 80039ec:	46c0      	nop			; (mov r8, r8)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	494c      	ldr	r1, [pc, #304]	; (8003b2c <UART_WaitOnFlagUntilTimeout+0x184>)
 80039fa:	400a      	ands	r2, r1
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a00:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	f383 8810 	msr	PRIMASK, r3
}
 8003a08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a0e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a12:	643b      	str	r3, [r7, #64]	; 0x40
 8003a14:	2301      	movs	r3, #1
 8003a16:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1a:	f383 8810 	msr	PRIMASK, r3
}
 8003a1e:	46c0      	nop			; (mov r8, r8)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	438a      	bics	r2, r1
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a36:	f383 8810 	msr	PRIMASK, r3
}
 8003a3a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2220      	movs	r2, #32
 8003a46:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2274      	movs	r2, #116	; 0x74
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e067      	b.n	8003b24 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2204      	movs	r2, #4
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d050      	beq.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69da      	ldr	r2, [r3, #28]
 8003a66:	2380      	movs	r3, #128	; 0x80
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	2380      	movs	r3, #128	; 0x80
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d146      	bne.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2280      	movs	r2, #128	; 0x80
 8003a7a:	0112      	lsls	r2, r2, #4
 8003a7c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a82:	613b      	str	r3, [r7, #16]
  return(result);
 8003a84:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a88:	2301      	movs	r3, #1
 8003a8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f383 8810 	msr	PRIMASK, r3
}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4923      	ldr	r1, [pc, #140]	; (8003b2c <UART_WaitOnFlagUntilTimeout+0x184>)
 8003aa0:	400a      	ands	r2, r1
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	f383 8810 	msr	PRIMASK, r3
}
 8003aae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ab4:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ab6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aba:	2301      	movs	r3, #1
 8003abc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	f383 8810 	msr	PRIMASK, r3
}
 8003ac4:	46c0      	nop			; (mov r8, r8)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	438a      	bics	r2, r1
 8003ad4:	609a      	str	r2, [r3, #8]
 8003ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	f383 8810 	msr	PRIMASK, r3
}
 8003ae0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2280      	movs	r2, #128	; 0x80
 8003af2:	2120      	movs	r1, #32
 8003af4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2274      	movs	r2, #116	; 0x74
 8003afa:	2100      	movs	r1, #0
 8003afc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e010      	b.n	8003b24 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	425a      	negs	r2, r3
 8003b12:	4153      	adcs	r3, r2
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	001a      	movs	r2, r3
 8003b18:	1dfb      	adds	r3, r7, #7
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d100      	bne.n	8003b22 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003b20:	e74b      	b.n	80039ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	0018      	movs	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b014      	add	sp, #80	; 0x50
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	fffffe5f 	.word	0xfffffe5f

08003b30 <__libc_init_array>:
 8003b30:	b570      	push	{r4, r5, r6, lr}
 8003b32:	2600      	movs	r6, #0
 8003b34:	4d0c      	ldr	r5, [pc, #48]	; (8003b68 <__libc_init_array+0x38>)
 8003b36:	4c0d      	ldr	r4, [pc, #52]	; (8003b6c <__libc_init_array+0x3c>)
 8003b38:	1b64      	subs	r4, r4, r5
 8003b3a:	10a4      	asrs	r4, r4, #2
 8003b3c:	42a6      	cmp	r6, r4
 8003b3e:	d109      	bne.n	8003b54 <__libc_init_array+0x24>
 8003b40:	2600      	movs	r6, #0
 8003b42:	f000 f87d 	bl	8003c40 <_init>
 8003b46:	4d0a      	ldr	r5, [pc, #40]	; (8003b70 <__libc_init_array+0x40>)
 8003b48:	4c0a      	ldr	r4, [pc, #40]	; (8003b74 <__libc_init_array+0x44>)
 8003b4a:	1b64      	subs	r4, r4, r5
 8003b4c:	10a4      	asrs	r4, r4, #2
 8003b4e:	42a6      	cmp	r6, r4
 8003b50:	d105      	bne.n	8003b5e <__libc_init_array+0x2e>
 8003b52:	bd70      	pop	{r4, r5, r6, pc}
 8003b54:	00b3      	lsls	r3, r6, #2
 8003b56:	58eb      	ldr	r3, [r5, r3]
 8003b58:	4798      	blx	r3
 8003b5a:	3601      	adds	r6, #1
 8003b5c:	e7ee      	b.n	8003b3c <__libc_init_array+0xc>
 8003b5e:	00b3      	lsls	r3, r6, #2
 8003b60:	58eb      	ldr	r3, [r5, r3]
 8003b62:	4798      	blx	r3
 8003b64:	3601      	adds	r6, #1
 8003b66:	e7f2      	b.n	8003b4e <__libc_init_array+0x1e>
 8003b68:	08003db8 	.word	0x08003db8
 8003b6c:	08003db8 	.word	0x08003db8
 8003b70:	08003db8 	.word	0x08003db8
 8003b74:	08003dbc 	.word	0x08003dbc

08003b78 <__itoa>:
 8003b78:	1e93      	subs	r3, r2, #2
 8003b7a:	b510      	push	{r4, lr}
 8003b7c:	000c      	movs	r4, r1
 8003b7e:	2b22      	cmp	r3, #34	; 0x22
 8003b80:	d904      	bls.n	8003b8c <__itoa+0x14>
 8003b82:	2300      	movs	r3, #0
 8003b84:	001c      	movs	r4, r3
 8003b86:	700b      	strb	r3, [r1, #0]
 8003b88:	0020      	movs	r0, r4
 8003b8a:	bd10      	pop	{r4, pc}
 8003b8c:	2a0a      	cmp	r2, #10
 8003b8e:	d109      	bne.n	8003ba4 <__itoa+0x2c>
 8003b90:	2800      	cmp	r0, #0
 8003b92:	da07      	bge.n	8003ba4 <__itoa+0x2c>
 8003b94:	232d      	movs	r3, #45	; 0x2d
 8003b96:	700b      	strb	r3, [r1, #0]
 8003b98:	2101      	movs	r1, #1
 8003b9a:	4240      	negs	r0, r0
 8003b9c:	1861      	adds	r1, r4, r1
 8003b9e:	f000 f80f 	bl	8003bc0 <__utoa>
 8003ba2:	e7f1      	b.n	8003b88 <__itoa+0x10>
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	e7f9      	b.n	8003b9c <__itoa+0x24>

08003ba8 <itoa>:
 8003ba8:	b510      	push	{r4, lr}
 8003baa:	f7ff ffe5 	bl	8003b78 <__itoa>
 8003bae:	bd10      	pop	{r4, pc}

08003bb0 <memset>:
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	1882      	adds	r2, r0, r2
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d100      	bne.n	8003bba <memset+0xa>
 8003bb8:	4770      	bx	lr
 8003bba:	7019      	strb	r1, [r3, #0]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	e7f9      	b.n	8003bb4 <memset+0x4>

08003bc0 <__utoa>:
 8003bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc2:	0016      	movs	r6, r2
 8003bc4:	b08d      	sub	sp, #52	; 0x34
 8003bc6:	0007      	movs	r7, r0
 8003bc8:	000c      	movs	r4, r1
 8003bca:	2225      	movs	r2, #37	; 0x25
 8003bcc:	4916      	ldr	r1, [pc, #88]	; (8003c28 <__utoa+0x68>)
 8003bce:	a802      	add	r0, sp, #8
 8003bd0:	f000 f82c 	bl	8003c2c <memcpy>
 8003bd4:	1eb3      	subs	r3, r6, #2
 8003bd6:	2500      	movs	r5, #0
 8003bd8:	2b22      	cmp	r3, #34	; 0x22
 8003bda:	d820      	bhi.n	8003c1e <__utoa+0x5e>
 8003bdc:	1e63      	subs	r3, r4, #1
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	ab02      	add	r3, sp, #8
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	0038      	movs	r0, r7
 8003be6:	0031      	movs	r1, r6
 8003be8:	f7fc fb12 	bl	8000210 <__aeabi_uidivmod>
 8003bec:	000b      	movs	r3, r1
 8003bee:	9a01      	ldr	r2, [sp, #4]
 8003bf0:	0029      	movs	r1, r5
 8003bf2:	5cd3      	ldrb	r3, [r2, r3]
 8003bf4:	9a00      	ldr	r2, [sp, #0]
 8003bf6:	3501      	adds	r5, #1
 8003bf8:	5553      	strb	r3, [r2, r5]
 8003bfa:	003b      	movs	r3, r7
 8003bfc:	0007      	movs	r7, r0
 8003bfe:	429e      	cmp	r6, r3
 8003c00:	d9f0      	bls.n	8003be4 <__utoa+0x24>
 8003c02:	2300      	movs	r3, #0
 8003c04:	0022      	movs	r2, r4
 8003c06:	5563      	strb	r3, [r4, r5]
 8003c08:	000b      	movs	r3, r1
 8003c0a:	1ac8      	subs	r0, r1, r3
 8003c0c:	4283      	cmp	r3, r0
 8003c0e:	dd08      	ble.n	8003c22 <__utoa+0x62>
 8003c10:	7810      	ldrb	r0, [r2, #0]
 8003c12:	5ce5      	ldrb	r5, [r4, r3]
 8003c14:	7015      	strb	r5, [r2, #0]
 8003c16:	54e0      	strb	r0, [r4, r3]
 8003c18:	3201      	adds	r2, #1
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	e7f5      	b.n	8003c0a <__utoa+0x4a>
 8003c1e:	7025      	strb	r5, [r4, #0]
 8003c20:	002c      	movs	r4, r5
 8003c22:	0020      	movs	r0, r4
 8003c24:	b00d      	add	sp, #52	; 0x34
 8003c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c28:	08003d90 	.word	0x08003d90

08003c2c <memcpy>:
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	b510      	push	{r4, lr}
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d100      	bne.n	8003c36 <memcpy+0xa>
 8003c34:	bd10      	pop	{r4, pc}
 8003c36:	5ccc      	ldrb	r4, [r1, r3]
 8003c38:	54c4      	strb	r4, [r0, r3]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	e7f8      	b.n	8003c30 <memcpy+0x4>
	...

08003c40 <_init>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c46:	bc08      	pop	{r3}
 8003c48:	469e      	mov	lr, r3
 8003c4a:	4770      	bx	lr

08003c4c <_fini>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c52:	bc08      	pop	{r3}
 8003c54:	469e      	mov	lr, r3
 8003c56:	4770      	bx	lr
